{"dependencies":[{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":35,"index":35}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI=","exportNames":["*"]}},{"name":"md5.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":10,"index":53},"end":{"line":2,"column":27,"index":70}}],"key":"hjDWeTyOSDzf2TqUwFSFEe7yqYg=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var Buffer = require(_dependencyMap[0], \"safe-buffer\").Buffer;\n  var MD5 = require(_dependencyMap[1], \"md5.js\");\n\n  /* eslint-disable camelcase */\n  function EVP_BytesToKey(password, salt, keyBits, ivLen) {\n    if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary');\n    if (salt) {\n      if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary');\n      if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length');\n    }\n    var keyLen = keyBits / 8;\n    var key = Buffer.alloc(keyLen);\n    var iv = Buffer.alloc(ivLen || 0);\n    var tmp = Buffer.alloc(0);\n    while (keyLen > 0 || ivLen > 0) {\n      var hash = new MD5();\n      hash.update(tmp);\n      hash.update(password);\n      if (salt) hash.update(salt);\n      tmp = hash.digest();\n      var used = 0;\n      if (keyLen > 0) {\n        var keyStart = key.length - keyLen;\n        used = Math.min(keyLen, tmp.length);\n        tmp.copy(key, keyStart, 0, used);\n        keyLen -= used;\n      }\n      if (used < tmp.length && ivLen > 0) {\n        var ivStart = iv.length - ivLen;\n        var length = Math.min(ivLen, tmp.length - used);\n        tmp.copy(iv, ivStart, used, used + length);\n        ivLen -= length;\n      }\n    }\n    tmp.fill(0);\n    return {\n      key: key,\n      iv: iv\n    };\n  }\n  module.exports = EVP_BytesToKey;\n});","lineCount":43,"map":[[2,2,1,0],[2,6,1,4,"Buffer"],[2,12,1,10],[2,15,1,13,"require"],[2,22,1,20],[2,23,1,20,"_dependencyMap"],[2,37,1,20],[2,55,1,34],[2,56,1,35],[2,57,1,36,"Buffer"],[2,63,1,42],[3,2,2,0],[3,6,2,4,"MD5"],[3,9,2,7],[3,12,2,10,"require"],[3,19,2,17],[3,20,2,17,"_dependencyMap"],[3,34,2,17],[3,47,2,26],[3,48,2,27],[5,2,4,0],[6,2,5,0],[6,11,5,9,"EVP_BytesToKey"],[6,25,5,23,"EVP_BytesToKey"],[6,26,5,25,"password"],[6,34,5,33],[6,36,5,35,"salt"],[6,40,5,39],[6,42,5,41,"keyBits"],[6,49,5,48],[6,51,5,50,"ivLen"],[6,56,5,55],[6,58,5,57],[7,4,6,2],[7,8,6,6],[7,9,6,7,"Buffer"],[7,15,6,13],[7,16,6,14,"isBuffer"],[7,24,6,22],[7,25,6,23,"password"],[7,33,6,31],[7,34,6,32],[7,36,6,34,"password"],[7,44,6,42],[7,47,6,45,"Buffer"],[7,53,6,51],[7,54,6,52,"from"],[7,58,6,56],[7,59,6,57,"password"],[7,67,6,65],[7,69,6,67],[7,77,6,75],[7,78,6,76],[8,4,7,2],[8,8,7,6,"salt"],[8,12,7,10],[8,14,7,12],[9,6,8,4],[9,10,8,8],[9,11,8,9,"Buffer"],[9,17,8,15],[9,18,8,16,"isBuffer"],[9,26,8,24],[9,27,8,25,"salt"],[9,31,8,29],[9,32,8,30],[9,34,8,32,"salt"],[9,38,8,36],[9,41,8,39,"Buffer"],[9,47,8,45],[9,48,8,46,"from"],[9,52,8,50],[9,53,8,51,"salt"],[9,57,8,55],[9,59,8,57],[9,67,8,65],[9,68,8,66],[10,6,9,4],[10,10,9,8,"salt"],[10,14,9,12],[10,15,9,13,"length"],[10,21,9,19],[10,26,9,24],[10,27,9,25],[10,29,9,27],[10,35,9,33],[10,39,9,37,"RangeError"],[10,49,9,47],[10,50,9,48],[10,92,9,90],[10,93,9,91],[11,4,10,2],[12,4,12,2],[12,8,12,6,"keyLen"],[12,14,12,12],[12,17,12,15,"keyBits"],[12,24,12,22],[12,27,12,25],[12,28,12,26],[13,4,13,2],[13,8,13,6,"key"],[13,11,13,9],[13,14,13,12,"Buffer"],[13,20,13,18],[13,21,13,19,"alloc"],[13,26,13,24],[13,27,13,25,"keyLen"],[13,33,13,31],[13,34,13,32],[14,4,14,2],[14,8,14,6,"iv"],[14,10,14,8],[14,13,14,11,"Buffer"],[14,19,14,17],[14,20,14,18,"alloc"],[14,25,14,23],[14,26,14,24,"ivLen"],[14,31,14,29],[14,35,14,33],[14,36,14,34],[14,37,14,35],[15,4,15,2],[15,8,15,6,"tmp"],[15,11,15,9],[15,14,15,12,"Buffer"],[15,20,15,18],[15,21,15,19,"alloc"],[15,26,15,24],[15,27,15,25],[15,28,15,26],[15,29,15,27],[16,4,17,2],[16,11,17,9,"keyLen"],[16,17,17,15],[16,20,17,18],[16,21,17,19],[16,25,17,23,"ivLen"],[16,30,17,28],[16,33,17,31],[16,34,17,32],[16,36,17,34],[17,6,18,4],[17,10,18,8,"hash"],[17,14,18,12],[17,17,18,15],[17,21,18,19,"MD5"],[17,24,18,22],[17,25,18,23],[17,26,18,24],[18,6,19,4,"hash"],[18,10,19,8],[18,11,19,9,"update"],[18,17,19,15],[18,18,19,16,"tmp"],[18,21,19,19],[18,22,19,20],[19,6,20,4,"hash"],[19,10,20,8],[19,11,20,9,"update"],[19,17,20,15],[19,18,20,16,"password"],[19,26,20,24],[19,27,20,25],[20,6,21,4],[20,10,21,8,"salt"],[20,14,21,12],[20,16,21,14,"hash"],[20,20,21,18],[20,21,21,19,"update"],[20,27,21,25],[20,28,21,26,"salt"],[20,32,21,30],[20,33,21,31],[21,6,22,4,"tmp"],[21,9,22,7],[21,12,22,10,"hash"],[21,16,22,14],[21,17,22,15,"digest"],[21,23,22,21],[21,24,22,22],[21,25,22,23],[22,6,24,4],[22,10,24,8,"used"],[22,14,24,12],[22,17,24,15],[22,18,24,16],[23,6,26,4],[23,10,26,8,"keyLen"],[23,16,26,14],[23,19,26,17],[23,20,26,18],[23,22,26,20],[24,8,27,6],[24,12,27,10,"keyStart"],[24,20,27,18],[24,23,27,21,"key"],[24,26,27,24],[24,27,27,25,"length"],[24,33,27,31],[24,36,27,34,"keyLen"],[24,42,27,40],[25,8,28,6,"used"],[25,12,28,10],[25,15,28,13,"Math"],[25,19,28,17],[25,20,28,18,"min"],[25,23,28,21],[25,24,28,22,"keyLen"],[25,30,28,28],[25,32,28,30,"tmp"],[25,35,28,33],[25,36,28,34,"length"],[25,42,28,40],[25,43,28,41],[26,8,29,6,"tmp"],[26,11,29,9],[26,12,29,10,"copy"],[26,16,29,14],[26,17,29,15,"key"],[26,20,29,18],[26,22,29,20,"keyStart"],[26,30,29,28],[26,32,29,30],[26,33,29,31],[26,35,29,33,"used"],[26,39,29,37],[26,40,29,38],[27,8,30,6,"keyLen"],[27,14,30,12],[27,18,30,16,"used"],[27,22,30,20],[28,6,31,4],[29,6,33,4],[29,10,33,8,"used"],[29,14,33,12],[29,17,33,15,"tmp"],[29,20,33,18],[29,21,33,19,"length"],[29,27,33,25],[29,31,33,29,"ivLen"],[29,36,33,34],[29,39,33,37],[29,40,33,38],[29,42,33,40],[30,8,34,6],[30,12,34,10,"ivStart"],[30,19,34,17],[30,22,34,20,"iv"],[30,24,34,22],[30,25,34,23,"length"],[30,31,34,29],[30,34,34,32,"ivLen"],[30,39,34,37],[31,8,35,6],[31,12,35,10,"length"],[31,18,35,16],[31,21,35,19,"Math"],[31,25,35,23],[31,26,35,24,"min"],[31,29,35,27],[31,30,35,28,"ivLen"],[31,35,35,33],[31,37,35,35,"tmp"],[31,40,35,38],[31,41,35,39,"length"],[31,47,35,45],[31,50,35,48,"used"],[31,54,35,52],[31,55,35,53],[32,8,36,6,"tmp"],[32,11,36,9],[32,12,36,10,"copy"],[32,16,36,14],[32,17,36,15,"iv"],[32,19,36,17],[32,21,36,19,"ivStart"],[32,28,36,26],[32,30,36,28,"used"],[32,34,36,32],[32,36,36,34,"used"],[32,40,36,38],[32,43,36,41,"length"],[32,49,36,47],[32,50,36,48],[33,8,37,6,"ivLen"],[33,13,37,11],[33,17,37,15,"length"],[33,23,37,21],[34,6,38,4],[35,4,39,2],[36,4,41,2,"tmp"],[36,7,41,5],[36,8,41,6,"fill"],[36,12,41,10],[36,13,41,11],[36,14,41,12],[36,15,41,13],[37,4,42,2],[37,11,42,9],[38,6,42,11,"key"],[38,9,42,14],[38,11,42,16,"key"],[38,14,42,19],[39,6,42,21,"iv"],[39,8,42,23],[39,10,42,25,"iv"],[40,4,42,28],[40,5,42,29],[41,2,43,0],[42,2,45,0,"module"],[42,8,45,6],[42,9,45,7,"exports"],[42,16,45,14],[42,19,45,17,"EVP_BytesToKey"],[42,33,45,31],[43,0,45,31],[43,3]],"functionMap":{"names":["<global>","EVP_BytesToKey"],"mappings":"AAA;ACI;CDsC"}},"type":"js/module"}]}