{"dependencies":[{"name":"uuid","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":13,"index":28},"end":{"line":3,"column":28,"index":43}}],"key":"jDVWfT8IaDtrIKMfZusH6IH9Zlc=","exportNames":["*"]}},{"name":"../../generateRequest","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":24,"index":72},"end":{"line":4,"column":56,"index":104}}],"key":"oaYZszHZ4JsVBCrMWnpecsoi8U0=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  const uuid = require(_dependencyMap[0], \"uuid\").v4;\n  const generateRequest = require(_dependencyMap[1], \"../../generateRequest\");\n\n  /**\n   * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n   * @class ClientBrowser\n   * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n   * @param {Object} [options]\n   * @param {Function} [options.reviver] Reviver function for JSON\n   * @param {Function} [options.replacer] Replacer function for JSON\n   * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n   * @param {Function} [options.generator] Function to use for generating request IDs\n   *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n   * @return {ClientBrowser}\n   */\n  const ClientBrowser = function (callServer, options) {\n    if (!(this instanceof ClientBrowser)) {\n      return new ClientBrowser(callServer, options);\n    }\n    if (!options) {\n      options = {};\n    }\n    this.options = {\n      reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n      replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n      generator: typeof options.generator !== 'undefined' ? options.generator : function () {\n        return uuid();\n      },\n      version: typeof options.version !== 'undefined' ? options.version : 2,\n      notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false\n    };\n    this.callServer = callServer;\n  };\n  module.exports = ClientBrowser;\n\n  /**\n   *  Creates a request and dispatches it if given a callback.\n   *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n   *  @param {Array|Object} [params] Parameters for the method\n   *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n   *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n   *  @throws {TypeError} Invalid parameters\n   *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n   */\n  ClientBrowser.prototype.request = function (method, params, id, callback) {\n    const self = this;\n    let request = null;\n\n    // is this a batch request?\n    const isBatch = Array.isArray(method) && typeof params === 'function';\n    if (this.options.version === 1 && isBatch) {\n      throw new TypeError('JSON-RPC 1.0 does not support batching');\n    }\n\n    // is this a raw request?\n    const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n    if (isBatch || isRaw) {\n      callback = params;\n      request = method;\n    } else {\n      if (typeof id === 'function') {\n        callback = id;\n        // specifically undefined because \"null\" is a notification request\n        id = undefined;\n      }\n      const hasCallback = typeof callback === 'function';\n      try {\n        request = generateRequest(method, params, id, {\n          generator: this.options.generator,\n          version: this.options.version,\n          notificationIdNull: this.options.notificationIdNull\n        });\n      } catch (err) {\n        if (hasCallback) {\n          return callback(err);\n        }\n        throw err;\n      }\n\n      // no callback means we should just return a raw request\n      if (!hasCallback) {\n        return request;\n      }\n    }\n    let message;\n    try {\n      message = JSON.stringify(request, this.options.replacer);\n    } catch (err) {\n      return callback(err);\n    }\n    this.callServer(message, function (err, response) {\n      self._parseResponse(err, response, callback);\n    });\n\n    // always return the raw request\n    return request;\n  };\n\n  /**\n   * Parses a response from a server\n   * @param {Object} err Error to pass on that is unrelated to the actual response\n   * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n   * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n   * @private\n   */\n  ClientBrowser.prototype._parseResponse = function (err, responseText, callback) {\n    if (err) {\n      callback(err);\n      return;\n    }\n    if (!responseText) {\n      // empty response text, assume that is correct because it could be a\n      // notification which jayson does not give any body for\n      return callback();\n    }\n    let response;\n    try {\n      response = JSON.parse(responseText, this.options.reviver);\n    } catch (err) {\n      return callback(err);\n    }\n    if (callback.length === 3) {\n      // if callback length is 3, we split callback arguments on error and response\n\n      // is batch response?\n      if (Array.isArray(response)) {\n        // neccesary to split strictly on validity according to spec here\n        const isError = function (res) {\n          return typeof res.error !== 'undefined';\n        };\n        const isNotError = function (res) {\n          return !isError(res);\n        };\n        return callback(null, response.filter(isError), response.filter(isNotError));\n      } else {\n        // split regardless of validity\n        return callback(null, response.error, response.result);\n      }\n    }\n    callback(null, response);\n  };\n});","lineCount":145,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,8,3,6,"uuid"],[4,12,3,10],[4,15,3,13,"require"],[4,22,3,20],[4,23,3,20,"_dependencyMap"],[4,37,3,20],[4,48,3,27],[4,49,3,28],[4,50,3,29,"v4"],[4,52,3,31],[5,2,4,0],[5,8,4,6,"generateRequest"],[5,23,4,21],[5,26,4,24,"require"],[5,33,4,31],[5,34,4,31,"_dependencyMap"],[5,48,4,31],[5,76,4,55],[5,77,4,56],[7,2,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,2,18,0],[19,8,18,6,"ClientBrowser"],[19,21,18,19],[19,24,18,22],[19,33,18,22,"ClientBrowser"],[19,34,18,31,"callServer"],[19,44,18,41],[19,46,18,43,"options"],[19,53,18,50],[19,55,18,52],[20,4,19,2],[20,8,19,5],[20,10,19,7],[20,14,19,11],[20,26,19,23,"ClientBrowser"],[20,39,19,36],[20,40,19,37],[20,42,19,39],[21,6,20,4],[21,13,20,11],[21,17,20,15,"ClientBrowser"],[21,30,20,28],[21,31,20,29,"callServer"],[21,41,20,39],[21,43,20,41,"options"],[21,50,20,48],[21,51,20,49],[22,4,21,2],[23,4,23,2],[23,8,23,6],[23,9,23,7,"options"],[23,16,23,14],[23,18,23,16],[24,6,24,4,"options"],[24,13,24,11],[24,16,24,14],[24,17,24,15],[24,18,24,16],[25,4,25,2],[26,4,27,2],[26,8,27,6],[26,9,27,7,"options"],[26,16,27,14],[26,19,27,17],[27,6,28,4,"reviver"],[27,13,28,11],[27,15,28,13],[27,22,28,20,"options"],[27,29,28,27],[27,30,28,28,"reviver"],[27,37,28,35],[27,42,28,40],[27,53,28,51],[27,56,28,54,"options"],[27,63,28,61],[27,64,28,62,"reviver"],[27,71,28,69],[27,74,28,72],[27,78,28,76],[28,6,29,4,"replacer"],[28,14,29,12],[28,16,29,14],[28,23,29,21,"options"],[28,30,29,28],[28,31,29,29,"replacer"],[28,39,29,37],[28,44,29,42],[28,55,29,53],[28,58,29,56,"options"],[28,65,29,63],[28,66,29,64,"replacer"],[28,74,29,72],[28,77,29,75],[28,81,29,79],[29,6,30,4,"generator"],[29,15,30,13],[29,17,30,15],[29,24,30,22,"options"],[29,31,30,29],[29,32,30,30,"generator"],[29,41,30,39],[29,46,30,44],[29,57,30,55],[29,60,30,58,"options"],[29,67,30,65],[29,68,30,66,"generator"],[29,77,30,75],[29,80,30,78],[29,92,30,89],[30,8,30,91],[30,15,30,98,"uuid"],[30,19,30,102],[30,20,30,103],[30,21,30,104],[31,6,30,106],[31,7,30,107],[32,6,31,4,"version"],[32,13,31,11],[32,15,31,13],[32,22,31,20,"options"],[32,29,31,27],[32,30,31,28,"version"],[32,37,31,35],[32,42,31,40],[32,53,31,51],[32,56,31,54,"options"],[32,63,31,61],[32,64,31,62,"version"],[32,71,31,69],[32,74,31,72],[32,75,31,73],[33,6,32,4,"notificationIdNull"],[33,24,32,22],[33,26,32,24],[33,33,32,31,"options"],[33,40,32,38],[33,41,32,39,"notificationIdNull"],[33,59,32,57],[33,64,32,62],[33,73,32,71],[33,76,32,74,"options"],[33,83,32,81],[33,84,32,82,"notificationIdNull"],[33,102,32,100],[33,105,32,103],[34,4,33,2],[34,5,33,3],[35,4,35,2],[35,8,35,6],[35,9,35,7,"callServer"],[35,19,35,17],[35,22,35,20,"callServer"],[35,32,35,30],[36,2,36,0],[36,3,36,1],[37,2,38,0,"module"],[37,8,38,6],[37,9,38,7,"exports"],[37,16,38,14],[37,19,38,17,"ClientBrowser"],[37,32,38,30],[39,2,40,0],[40,0,41,0],[41,0,42,0],[42,0,43,0],[43,0,44,0],[44,0,45,0],[45,0,46,0],[46,0,47,0],[47,0,48,0],[48,2,49,0,"ClientBrowser"],[48,15,49,13],[48,16,49,14,"prototype"],[48,25,49,23],[48,26,49,24,"request"],[48,33,49,31],[48,36,49,34],[48,46,49,43,"method"],[48,52,49,49],[48,54,49,51,"params"],[48,60,49,57],[48,62,49,59,"id"],[48,64,49,61],[48,66,49,63,"callback"],[48,74,49,71],[48,76,49,73],[49,4,50,2],[49,10,50,8,"self"],[49,14,50,12],[49,17,50,15],[49,21,50,19],[50,4,51,2],[50,8,51,6,"request"],[50,15,51,13],[50,18,51,16],[50,22,51,20],[52,4,53,2],[53,4,54,2],[53,10,54,8,"isBatch"],[53,17,54,15],[53,20,54,18,"Array"],[53,25,54,23],[53,26,54,24,"isArray"],[53,33,54,31],[53,34,54,32,"method"],[53,40,54,38],[53,41,54,39],[53,45,54,43],[53,52,54,50,"params"],[53,58,54,56],[53,63,54,61],[53,73,54,71],[54,4,56,2],[54,8,56,6],[54,12,56,10],[54,13,56,11,"options"],[54,20,56,18],[54,21,56,19,"version"],[54,28,56,26],[54,33,56,31],[54,34,56,32],[54,38,56,36,"isBatch"],[54,45,56,43],[54,47,56,45],[55,6,57,4],[55,12,57,10],[55,16,57,14,"TypeError"],[55,25,57,23],[55,26,57,24],[55,66,57,64],[55,67,57,65],[56,4,58,2],[58,4,60,2],[59,4,61,2],[59,10,61,8,"isRaw"],[59,15,61,13],[59,18,61,16],[59,19,61,17,"isBatch"],[59,26,61,24],[59,30,61,28,"method"],[59,36,61,34],[59,40,61,38],[59,47,61,45,"method"],[59,53,61,51],[59,58,61,56],[59,66,61,64],[59,70,61,68],[59,77,61,75,"params"],[59,83,61,81],[59,88,61,86],[59,98,61,96],[60,4,63,2],[60,8,63,5,"isBatch"],[60,15,63,12],[60,19,63,16,"isRaw"],[60,24,63,21],[60,26,63,23],[61,6,64,4,"callback"],[61,14,64,12],[61,17,64,15,"params"],[61,23,64,21],[62,6,65,4,"request"],[62,13,65,11],[62,16,65,14,"method"],[62,22,65,20],[63,4,66,2],[63,5,66,3],[63,11,66,9],[64,6,67,4],[64,10,67,7],[64,17,67,14,"id"],[64,19,67,16],[64,24,67,21],[64,34,67,31],[64,36,67,33],[65,8,68,6,"callback"],[65,16,68,14],[65,19,68,17,"id"],[65,21,68,19],[66,8,69,6],[67,8,70,6,"id"],[67,10,70,8],[67,13,70,11,"undefined"],[67,22,70,20],[68,6,71,4],[69,6,73,4],[69,12,73,10,"hasCallback"],[69,23,73,21],[69,26,73,24],[69,33,73,31,"callback"],[69,41,73,39],[69,46,73,44],[69,56,73,54],[70,6,75,4],[70,10,75,8],[71,8,76,6,"request"],[71,15,76,13],[71,18,76,16,"generateRequest"],[71,33,76,31],[71,34,76,32,"method"],[71,40,76,38],[71,42,76,40,"params"],[71,48,76,46],[71,50,76,48,"id"],[71,52,76,50],[71,54,76,52],[72,10,77,8,"generator"],[72,19,77,17],[72,21,77,19],[72,25,77,23],[72,26,77,24,"options"],[72,33,77,31],[72,34,77,32,"generator"],[72,43,77,41],[73,10,78,8,"version"],[73,17,78,15],[73,19,78,17],[73,23,78,21],[73,24,78,22,"options"],[73,31,78,29],[73,32,78,30,"version"],[73,39,78,37],[74,10,79,8,"notificationIdNull"],[74,28,79,26],[74,30,79,28],[74,34,79,32],[74,35,79,33,"options"],[74,42,79,40],[74,43,79,41,"notificationIdNull"],[75,8,80,6],[75,9,80,7],[75,10,80,8],[76,6,81,4],[76,7,81,5],[76,8,81,6],[76,15,81,12,"err"],[76,18,81,15],[76,20,81,17],[77,8,82,6],[77,12,82,9,"hasCallback"],[77,23,82,20],[77,25,82,22],[78,10,83,8],[78,17,83,15,"callback"],[78,25,83,23],[78,26,83,24,"err"],[78,29,83,27],[78,30,83,28],[79,8,84,6],[80,8,85,6],[80,14,85,12,"err"],[80,17,85,15],[81,6,86,4],[83,6,88,4],[84,6,89,4],[84,10,89,7],[84,11,89,8,"hasCallback"],[84,22,89,19],[84,24,89,21],[85,8,90,6],[85,15,90,13,"request"],[85,22,90,20],[86,6,91,4],[87,4,93,2],[88,4,95,2],[88,8,95,6,"message"],[88,15,95,13],[89,4,96,2],[89,8,96,6],[90,6,97,4,"message"],[90,13,97,11],[90,16,97,14,"JSON"],[90,20,97,18],[90,21,97,19,"stringify"],[90,30,97,28],[90,31,97,29,"request"],[90,38,97,36],[90,40,97,38],[90,44,97,42],[90,45,97,43,"options"],[90,52,97,50],[90,53,97,51,"replacer"],[90,61,97,59],[90,62,97,60],[91,4,98,2],[91,5,98,3],[91,6,98,4],[91,13,98,10,"err"],[91,16,98,13],[91,18,98,15],[92,6,99,4],[92,13,99,11,"callback"],[92,21,99,19],[92,22,99,20,"err"],[92,25,99,23],[92,26,99,24],[93,4,100,2],[94,4,102,2],[94,8,102,6],[94,9,102,7,"callServer"],[94,19,102,17],[94,20,102,18,"message"],[94,27,102,25],[94,29,102,27],[94,39,102,36,"err"],[94,42,102,39],[94,44,102,41,"response"],[94,52,102,49],[94,54,102,51],[95,6,103,4,"self"],[95,10,103,8],[95,11,103,9,"_parseResponse"],[95,25,103,23],[95,26,103,24,"err"],[95,29,103,27],[95,31,103,29,"response"],[95,39,103,37],[95,41,103,39,"callback"],[95,49,103,47],[95,50,103,48],[96,4,104,2],[96,5,104,3],[96,6,104,4],[98,4,106,2],[99,4,107,2],[99,11,107,9,"request"],[99,18,107,16],[100,2,108,0],[100,3,108,1],[102,2,110,0],[103,0,111,0],[104,0,112,0],[105,0,113,0],[106,0,114,0],[107,0,115,0],[108,0,116,0],[109,2,117,0,"ClientBrowser"],[109,15,117,13],[109,16,117,14,"prototype"],[109,25,117,23],[109,26,117,24,"_parseResponse"],[109,40,117,38],[109,43,117,41],[109,53,117,50,"err"],[109,56,117,53],[109,58,117,55,"responseText"],[109,70,117,67],[109,72,117,69,"callback"],[109,80,117,77],[109,82,117,79],[110,4,118,2],[110,8,118,5,"err"],[110,11,118,8],[110,13,118,10],[111,6,119,4,"callback"],[111,14,119,12],[111,15,119,13,"err"],[111,18,119,16],[111,19,119,17],[112,6,120,4],[113,4,121,2],[114,4,123,2],[114,8,123,5],[114,9,123,6,"responseText"],[114,21,123,18],[114,23,123,20],[115,6,124,4],[116,6,125,4],[117,6,126,4],[117,13,126,11,"callback"],[117,21,126,19],[117,22,126,20],[117,23,126,21],[118,4,127,2],[119,4,129,2],[119,8,129,6,"response"],[119,16,129,14],[120,4,130,2],[120,8,130,6],[121,6,131,4,"response"],[121,14,131,12],[121,17,131,15,"JSON"],[121,21,131,19],[121,22,131,20,"parse"],[121,27,131,25],[121,28,131,26,"responseText"],[121,40,131,38],[121,42,131,40],[121,46,131,44],[121,47,131,45,"options"],[121,54,131,52],[121,55,131,53,"reviver"],[121,62,131,60],[121,63,131,61],[122,4,132,2],[122,5,132,3],[122,6,132,4],[122,13,132,10,"err"],[122,16,132,13],[122,18,132,15],[123,6,133,4],[123,13,133,11,"callback"],[123,21,133,19],[123,22,133,20,"err"],[123,25,133,23],[123,26,133,24],[124,4,134,2],[125,4,136,2],[125,8,136,5,"callback"],[125,16,136,13],[125,17,136,14,"length"],[125,23,136,20],[125,28,136,25],[125,29,136,26],[125,31,136,28],[126,6,137,4],[128,6,139,4],[129,6,140,4],[129,10,140,7,"Array"],[129,15,140,12],[129,16,140,13,"isArray"],[129,23,140,20],[129,24,140,21,"response"],[129,32,140,29],[129,33,140,30],[129,35,140,32],[130,8,142,6],[131,8,143,6],[131,14,143,12,"isError"],[131,21,143,19],[131,24,143,22],[131,33,143,22,"isError"],[131,34,143,31,"res"],[131,37,143,34],[131,39,143,36],[132,10,144,8],[132,17,144,15],[132,24,144,22,"res"],[132,27,144,25],[132,28,144,26,"error"],[132,33,144,31],[132,38,144,36],[132,49,144,47],[133,8,145,6],[133,9,145,7],[134,8,147,6],[134,14,147,12,"isNotError"],[134,24,147,22],[134,27,147,25],[134,36,147,25,"isNotError"],[134,37,147,35,"res"],[134,40,147,38],[134,42,147,40],[135,10,148,8],[135,17,148,15],[135,18,148,16,"isError"],[135,25,148,23],[135,26,148,24,"res"],[135,29,148,27],[135,30,148,28],[136,8,149,6],[136,9,149,7],[137,8,151,6],[137,15,151,13,"callback"],[137,23,151,21],[137,24,151,22],[137,28,151,26],[137,30,151,28,"response"],[137,38,151,36],[137,39,151,37,"filter"],[137,45,151,43],[137,46,151,44,"isError"],[137,53,151,51],[137,54,151,52],[137,56,151,54,"response"],[137,64,151,62],[137,65,151,63,"filter"],[137,71,151,69],[137,72,151,70,"isNotError"],[137,82,151,80],[137,83,151,81],[137,84,151,82],[138,6,153,4],[138,7,153,5],[138,13,153,11],[139,8,155,6],[140,8,156,6],[140,15,156,13,"callback"],[140,23,156,21],[140,24,156,22],[140,28,156,26],[140,30,156,28,"response"],[140,38,156,36],[140,39,156,37,"error"],[140,44,156,42],[140,46,156,44,"response"],[140,54,156,52],[140,55,156,53,"result"],[140,61,156,59],[140,62,156,60],[141,6,158,4],[142,4,160,2],[143,4,162,2,"callback"],[143,12,162,10],[143,13,162,11],[143,17,162,15],[143,19,162,17,"response"],[143,27,162,25],[143,28,162,26],[144,2,163,0],[144,3,163,1],[145,0,163,2],[145,3]],"functionMap":{"names":["<global>","ClientBrowser","<anonymous>","ClientBrowser.prototype.request","callServer$argument_1","ClientBrowser.prototype._parseResponse","isError","isNotError"],"mappings":"AAA;sBCiB;8ECY,6BD;CDM;kCGa;2BCqD;GDE;CHI;yCKS;sBC0B;ODE;yBEE;OFE;CLc"}},"type":"js/module"}]}