{"dependencies":[{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":35,"index":35}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI=","exportNames":["*"]}},{"name":"buffer-xor","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":10,"index":53},"end":{"line":2,"column":31,"index":74}}],"key":"loeSrW6/3vzsFLRxgE5dDkO1O/w=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var Buffer = require(_dependencyMap[0], \"safe-buffer\").Buffer;\n  var xor = require(_dependencyMap[1], \"buffer-xor\");\n  function encryptStart(self, data, decrypt) {\n    var len = data.length;\n    var out = xor(data, self._cache);\n    self._cache = self._cache.slice(len);\n    self._prev = Buffer.concat([self._prev, decrypt ? data : out]);\n    return out;\n  }\n  exports.encrypt = function (self, data, decrypt) {\n    var out = Buffer.allocUnsafe(0);\n    var len;\n    while (data.length) {\n      if (self._cache.length === 0) {\n        self._cache = self._cipher.encryptBlock(self._prev);\n        self._prev = Buffer.allocUnsafe(0);\n      }\n      if (self._cache.length <= data.length) {\n        len = self._cache.length;\n        out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)]);\n        data = data.slice(len);\n      } else {\n        out = Buffer.concat([out, encryptStart(self, data, decrypt)]);\n        break;\n      }\n    }\n    return out;\n  };\n});","lineCount":30,"map":[[2,2,1,0],[2,6,1,4,"Buffer"],[2,12,1,10],[2,15,1,13,"require"],[2,22,1,20],[2,23,1,20,"_dependencyMap"],[2,37,1,20],[2,55,1,34],[2,56,1,35],[2,57,1,36,"Buffer"],[2,63,1,42],[3,2,2,0],[3,6,2,4,"xor"],[3,9,2,7],[3,12,2,10,"require"],[3,19,2,17],[3,20,2,17,"_dependencyMap"],[3,34,2,17],[3,51,2,30],[3,52,2,31],[4,2,4,0],[4,11,4,9,"encryptStart"],[4,23,4,21,"encryptStart"],[4,24,4,23,"self"],[4,28,4,27],[4,30,4,29,"data"],[4,34,4,33],[4,36,4,35,"decrypt"],[4,43,4,42],[4,45,4,44],[5,4,5,2],[5,8,5,6,"len"],[5,11,5,9],[5,14,5,12,"data"],[5,18,5,16],[5,19,5,17,"length"],[5,25,5,23],[6,4,6,2],[6,8,6,6,"out"],[6,11,6,9],[6,14,6,12,"xor"],[6,17,6,15],[6,18,6,16,"data"],[6,22,6,20],[6,24,6,22,"self"],[6,28,6,26],[6,29,6,27,"_cache"],[6,35,6,33],[6,36,6,34],[7,4,7,2,"self"],[7,8,7,6],[7,9,7,7,"_cache"],[7,15,7,13],[7,18,7,16,"self"],[7,22,7,20],[7,23,7,21,"_cache"],[7,29,7,27],[7,30,7,28,"slice"],[7,35,7,33],[7,36,7,34,"len"],[7,39,7,37],[7,40,7,38],[8,4,8,2,"self"],[8,8,8,6],[8,9,8,7,"_prev"],[8,14,8,12],[8,17,8,15,"Buffer"],[8,23,8,21],[8,24,8,22,"concat"],[8,30,8,28],[8,31,8,29],[8,32,8,30,"self"],[8,36,8,34],[8,37,8,35,"_prev"],[8,42,8,40],[8,44,8,42,"decrypt"],[8,51,8,49],[8,54,8,52,"data"],[8,58,8,56],[8,61,8,59,"out"],[8,64,8,62],[8,65,8,63],[8,66,8,64],[9,4,9,2],[9,11,9,9,"out"],[9,14,9,12],[10,2,10,0],[11,2,12,0,"exports"],[11,9,12,7],[11,10,12,8,"encrypt"],[11,17,12,15],[11,20,12,18],[11,30,12,28,"self"],[11,34,12,32],[11,36,12,34,"data"],[11,40,12,38],[11,42,12,40,"decrypt"],[11,49,12,47],[11,51,12,49],[12,4,13,2],[12,8,13,6,"out"],[12,11,13,9],[12,14,13,12,"Buffer"],[12,20,13,18],[12,21,13,19,"allocUnsafe"],[12,32,13,30],[12,33,13,31],[12,34,13,32],[12,35,13,33],[13,4,14,2],[13,8,14,6,"len"],[13,11,14,9],[14,4,16,2],[14,11,16,9,"data"],[14,15,16,13],[14,16,16,14,"length"],[14,22,16,20],[14,24,16,22],[15,6,17,4],[15,10,17,8,"self"],[15,14,17,12],[15,15,17,13,"_cache"],[15,21,17,19],[15,22,17,20,"length"],[15,28,17,26],[15,33,17,31],[15,34,17,32],[15,36,17,34],[16,8,18,6,"self"],[16,12,18,10],[16,13,18,11,"_cache"],[16,19,18,17],[16,22,18,20,"self"],[16,26,18,24],[16,27,18,25,"_cipher"],[16,34,18,32],[16,35,18,33,"encryptBlock"],[16,47,18,45],[16,48,18,46,"self"],[16,52,18,50],[16,53,18,51,"_prev"],[16,58,18,56],[16,59,18,57],[17,8,19,6,"self"],[17,12,19,10],[17,13,19,11,"_prev"],[17,18,19,16],[17,21,19,19,"Buffer"],[17,27,19,25],[17,28,19,26,"allocUnsafe"],[17,39,19,37],[17,40,19,38],[17,41,19,39],[17,42,19,40],[18,6,20,4],[19,6,22,4],[19,10,22,8,"self"],[19,14,22,12],[19,15,22,13,"_cache"],[19,21,22,19],[19,22,22,20,"length"],[19,28,22,26],[19,32,22,30,"data"],[19,36,22,34],[19,37,22,35,"length"],[19,43,22,41],[19,45,22,43],[20,8,23,6,"len"],[20,11,23,9],[20,14,23,12,"self"],[20,18,23,16],[20,19,23,17,"_cache"],[20,25,23,23],[20,26,23,24,"length"],[20,32,23,30],[21,8,24,6,"out"],[21,11,24,9],[21,14,24,12,"Buffer"],[21,20,24,18],[21,21,24,19,"concat"],[21,27,24,25],[21,28,24,26],[21,29,24,27,"out"],[21,32,24,30],[21,34,24,32,"encryptStart"],[21,46,24,44],[21,47,24,45,"self"],[21,51,24,49],[21,53,24,51,"data"],[21,57,24,55],[21,58,24,56,"slice"],[21,63,24,61],[21,64,24,62],[21,65,24,63],[21,67,24,65,"len"],[21,70,24,68],[21,71,24,69],[21,73,24,71,"decrypt"],[21,80,24,78],[21,81,24,79],[21,82,24,80],[21,83,24,81],[22,8,25,6,"data"],[22,12,25,10],[22,15,25,13,"data"],[22,19,25,17],[22,20,25,18,"slice"],[22,25,25,23],[22,26,25,24,"len"],[22,29,25,27],[22,30,25,28],[23,6,26,4],[23,7,26,5],[23,13,26,11],[24,8,27,6,"out"],[24,11,27,9],[24,14,27,12,"Buffer"],[24,20,27,18],[24,21,27,19,"concat"],[24,27,27,25],[24,28,27,26],[24,29,27,27,"out"],[24,32,27,30],[24,34,27,32,"encryptStart"],[24,46,27,44],[24,47,27,45,"self"],[24,51,27,49],[24,53,27,51,"data"],[24,57,27,55],[24,59,27,57,"decrypt"],[24,66,27,64],[24,67,27,65],[24,68,27,66],[24,69,27,67],[25,8,28,6],[26,6,29,4],[27,4,30,2],[28,4,32,2],[28,11,32,9,"out"],[28,14,32,12],[29,2,33,0],[29,3,33,1],[30,0,33,1],[30,3]],"functionMap":{"names":["<global>","encryptStart","exports.encrypt"],"mappings":"AAA;ACG;CDM;kBEE;CFqB"}},"type":"js/module"}]}