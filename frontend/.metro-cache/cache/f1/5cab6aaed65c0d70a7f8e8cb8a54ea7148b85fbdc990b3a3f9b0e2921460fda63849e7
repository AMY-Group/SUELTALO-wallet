{"dependencies":[{"name":"@solana/buffer-layout","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"QwywkJpcZkKLkjXs9E7VxOaHAHQ=","exportNames":["*"]}},{"name":"@solana/buffer-layout-utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":52},"end":{"line":2,"column":50,"index":102}}],"key":"uY07c2hRI0N+OVJYRD373wbUopw=","exportNames":["*"]}},{"name":"@solana/web3.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":103},"end":{"line":3,"column":57,"index":160}}],"key":"hVqIgOgXAH1+S7mu7qk6LJzdVc8=","exportNames":["*"]}},{"name":"../constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":161},"end":{"line":4,"column":51,"index":212}}],"key":"w33QN4nlqAZn5CNK6M5HKbLWgBA=","exportNames":["*"]}},{"name":"../errors.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":213},"end":{"line":5,"column":170,"index":383}}],"key":"hqwpWRawU/ruYp+nBkn/8IqEHoU=","exportNames":["*"]}},{"name":"./internal.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":384},"end":{"line":6,"column":43,"index":427}}],"key":"8koSC5bhCi+pFNPMfaVFms7TipA=","exportNames":["*"]}},{"name":"./types.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":428},"end":{"line":7,"column":46,"index":474}}],"key":"yJvqu7zVoaSgx/LOxsKU/6eppkQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.approveCheckedInstructionData = void 0;\n  exports.createApproveCheckedInstruction = createApproveCheckedInstruction;\n  exports.decodeApproveCheckedInstruction = decodeApproveCheckedInstruction;\n  exports.decodeApproveCheckedInstructionUnchecked = decodeApproveCheckedInstructionUnchecked;\n  var _bufferLayout = require(_dependencyMap[0], \"@solana/buffer-layout\");\n  var _bufferLayoutUtils = require(_dependencyMap[1], \"@solana/buffer-layout-utils\");\n  var _web = require(_dependencyMap[2], \"@solana/web3.js\");\n  var _constants = require(_dependencyMap[3], \"../constants.js\");\n  var _errors = require(_dependencyMap[4], \"../errors.js\");\n  var _internal = require(_dependencyMap[5], \"./internal.js\");\n  var _types = require(_dependencyMap[6], \"./types.js\");\n  /** TODO: docs */\n  const approveCheckedInstructionData = exports.approveCheckedInstructionData = (0, _bufferLayout.struct)([(0, _bufferLayout.u8)('instruction'), (0, _bufferLayoutUtils.u64)('amount'), (0, _bufferLayout.u8)('decimals')]);\n  /**\n   * Construct an ApproveChecked instruction\n   *\n   * @param account      Account to set the delegate for\n   * @param mint         Mint account\n   * @param delegate     Account authorized to transfer of tokens from the account\n   * @param owner        Owner of the account\n   * @param amount       Maximum number of tokens the delegate may transfer\n   * @param decimals     Number of decimals in approve amount\n   * @param multiSigners Signing accounts if `owner` is a multisig\n   * @param programId    SPL Token program account\n   *\n   * @return Instruction to add to a transaction\n   */\n  function createApproveCheckedInstruction(account, mint, delegate, owner, amount, decimals, multiSigners = [], programId = _constants.TOKEN_PROGRAM_ID) {\n    const keys = (0, _internal.addSigners)([{\n      pubkey: account,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: mint,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: delegate,\n      isSigner: false,\n      isWritable: false\n    }], owner, multiSigners);\n    const data = Buffer.alloc(approveCheckedInstructionData.span);\n    approveCheckedInstructionData.encode({\n      instruction: _types.TokenInstruction.ApproveChecked,\n      amount: BigInt(amount),\n      decimals\n    }, data);\n    return new _web.TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n  }\n  /**\n   * Decode an ApproveChecked instruction and validate it\n   *\n   * @param instruction Transaction instruction to decode\n   * @param programId   SPL Token program account\n   *\n   * @return Decoded, valid instruction\n   */\n  function decodeApproveCheckedInstruction(instruction, programId = _constants.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId)) throw new _errors.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== approveCheckedInstructionData.span) throw new _errors.TokenInvalidInstructionDataError();\n    const {\n      keys: {\n        account,\n        mint,\n        delegate,\n        owner,\n        multiSigners\n      },\n      data\n    } = decodeApproveCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== _types.TokenInstruction.ApproveChecked) throw new _errors.TokenInvalidInstructionTypeError();\n    if (!account || !mint || !delegate || !owner) throw new _errors.TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n      programId,\n      keys: {\n        account,\n        mint,\n        delegate,\n        owner,\n        multiSigners\n      },\n      data\n    };\n  }\n  /**\n   * Decode an ApproveChecked instruction without validating it\n   *\n   * @param instruction Transaction instruction to decode\n   *\n   * @return Decoded, non-validated instruction\n   */\n  function decodeApproveCheckedInstructionUnchecked({\n    programId,\n    keys: [account, mint, delegate, owner, ...multiSigners],\n    data\n  }) {\n    return {\n      programId,\n      keys: {\n        account,\n        mint,\n        delegate,\n        owner,\n        multiSigners\n      },\n      data: approveCheckedInstructionData.decode(data)\n    };\n  }\n});","lineCount":118,"map":[[9,2,1,0],[9,6,1,0,"_bufferLayout"],[9,19,1,0],[9,22,1,0,"require"],[9,29,1,0],[9,30,1,0,"_dependencyMap"],[9,44,1,0],[10,2,2,0],[10,6,2,0,"_bufferLayoutUtils"],[10,24,2,0],[10,27,2,0,"require"],[10,34,2,0],[10,35,2,0,"_dependencyMap"],[10,49,2,0],[11,2,3,0],[11,6,3,0,"_web"],[11,10,3,0],[11,13,3,0,"require"],[11,20,3,0],[11,21,3,0,"_dependencyMap"],[11,35,3,0],[12,2,4,0],[12,6,4,0,"_constants"],[12,16,4,0],[12,19,4,0,"require"],[12,26,4,0],[12,27,4,0,"_dependencyMap"],[12,41,4,0],[13,2,5,0],[13,6,5,0,"_errors"],[13,13,5,0],[13,16,5,0,"require"],[13,23,5,0],[13,24,5,0,"_dependencyMap"],[13,38,5,0],[14,2,6,0],[14,6,6,0,"_internal"],[14,15,6,0],[14,18,6,0,"require"],[14,25,6,0],[14,26,6,0,"_dependencyMap"],[14,40,6,0],[15,2,7,0],[15,6,7,0,"_types"],[15,12,7,0],[15,15,7,0,"require"],[15,22,7,0],[15,23,7,0,"_dependencyMap"],[15,37,7,0],[16,2,8,0],[17,2,9,7],[17,8,9,13,"approveCheckedInstructionData"],[17,37,9,42],[17,40,9,42,"exports"],[17,47,9,42],[17,48,9,42,"approveCheckedInstructionData"],[17,77,9,42],[17,80,9,45],[17,84,9,45,"struct"],[17,104,9,51],[17,106,9,52],[17,107,10,4],[17,111,10,4,"u8"],[17,127,10,6],[17,129,10,7],[17,142,10,20],[17,143,10,21],[17,145,11,4],[17,149,11,4,"u64"],[17,171,11,7],[17,173,11,8],[17,181,11,16],[17,182,11,17],[17,184,12,4],[17,188,12,4,"u8"],[17,204,12,6],[17,206,12,7],[17,216,12,17],[17,217,12,18],[17,218,13,1],[17,219,13,2],[18,2,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,2,28,7],[32,11,28,16,"createApproveCheckedInstruction"],[32,42,28,47,"createApproveCheckedInstruction"],[32,43,28,48,"account"],[32,50,28,55],[32,52,28,57,"mint"],[32,56,28,61],[32,58,28,63,"delegate"],[32,66,28,71],[32,68,28,73,"owner"],[32,73,28,78],[32,75,28,80,"amount"],[32,81,28,86],[32,83,28,88,"decimals"],[32,91,28,96],[32,93,28,98,"multiSigners"],[32,105,28,110],[32,108,28,113],[32,110,28,115],[32,112,28,117,"programId"],[32,121,28,126],[32,124,28,129,"TOKEN_PROGRAM_ID"],[32,151,28,145],[32,153,28,147],[33,4,29,4],[33,10,29,10,"keys"],[33,14,29,14],[33,17,29,17],[33,21,29,17,"addSigners"],[33,41,29,27],[33,43,29,28],[33,44,30,8],[34,6,30,10,"pubkey"],[34,12,30,16],[34,14,30,18,"account"],[34,21,30,25],[35,6,30,27,"isSigner"],[35,14,30,35],[35,16,30,37],[35,21,30,42],[36,6,30,44,"isWritable"],[36,16,30,54],[36,18,30,56],[37,4,30,61],[37,5,30,62],[37,7,31,8],[38,6,31,10,"pubkey"],[38,12,31,16],[38,14,31,18,"mint"],[38,18,31,22],[39,6,31,24,"isSigner"],[39,14,31,32],[39,16,31,34],[39,21,31,39],[40,6,31,41,"isWritable"],[40,16,31,51],[40,18,31,53],[41,4,31,59],[41,5,31,60],[41,7,32,8],[42,6,32,10,"pubkey"],[42,12,32,16],[42,14,32,18,"delegate"],[42,22,32,26],[43,6,32,28,"isSigner"],[43,14,32,36],[43,16,32,38],[43,21,32,43],[44,6,32,45,"isWritable"],[44,16,32,55],[44,18,32,57],[45,4,32,63],[45,5,32,64],[45,6,33,5],[45,8,33,7,"owner"],[45,13,33,12],[45,15,33,14,"multiSigners"],[45,27,33,26],[45,28,33,27],[46,4,34,4],[46,10,34,10,"data"],[46,14,34,14],[46,17,34,17,"Buffer"],[46,23,34,23],[46,24,34,24,"alloc"],[46,29,34,29],[46,30,34,30,"approveCheckedInstructionData"],[46,59,34,59],[46,60,34,60,"span"],[46,64,34,64],[46,65,34,65],[47,4,35,4,"approveCheckedInstructionData"],[47,33,35,33],[47,34,35,34,"encode"],[47,40,35,40],[47,41,35,41],[48,6,36,8,"instruction"],[48,17,36,19],[48,19,36,21,"TokenInstruction"],[48,42,36,37],[48,43,36,38,"ApproveChecked"],[48,57,36,52],[49,6,37,8,"amount"],[49,12,37,14],[49,14,37,16,"BigInt"],[49,20,37,22],[49,21,37,23,"amount"],[49,27,37,29],[49,28,37,30],[50,6,38,8,"decimals"],[51,4,39,4],[51,5,39,5],[51,7,39,7,"data"],[51,11,39,11],[51,12,39,12],[52,4,40,4],[52,11,40,11],[52,15,40,15,"TransactionInstruction"],[52,42,40,37],[52,43,40,38],[53,6,40,40,"keys"],[53,10,40,44],[54,6,40,46,"programId"],[54,15,40,55],[55,6,40,57,"data"],[56,4,40,62],[56,5,40,63],[56,6,40,64],[57,2,41,0],[58,2,42,0],[59,0,43,0],[60,0,44,0],[61,0,45,0],[62,0,46,0],[63,0,47,0],[64,0,48,0],[65,0,49,0],[66,2,50,7],[66,11,50,16,"decodeApproveCheckedInstruction"],[66,42,50,47,"decodeApproveCheckedInstruction"],[66,43,50,48,"instruction"],[66,54,50,59],[66,56,50,61,"programId"],[66,65,50,70],[66,68,50,73,"TOKEN_PROGRAM_ID"],[66,95,50,89],[66,97,50,91],[67,4,51,4],[67,8,51,8],[67,9,51,9,"instruction"],[67,20,51,20],[67,21,51,21,"programId"],[67,30,51,30],[67,31,51,31,"equals"],[67,37,51,37],[67,38,51,38,"programId"],[67,47,51,47],[67,48,51,48],[67,50,52,8],[67,56,52,14],[67,60,52,18,"TokenInvalidInstructionProgramError"],[67,103,52,53],[67,104,52,54],[67,105,52,55],[68,4,53,4],[68,8,53,8,"instruction"],[68,19,53,19],[68,20,53,20,"data"],[68,24,53,24],[68,25,53,25,"length"],[68,31,53,31],[68,36,53,36,"approveCheckedInstructionData"],[68,65,53,65],[68,66,53,66,"span"],[68,70,53,70],[68,72,54,8],[68,78,54,14],[68,82,54,18,"TokenInvalidInstructionDataError"],[68,122,54,50],[68,123,54,51],[68,124,54,52],[69,4,55,4],[69,10,55,10],[70,6,55,12,"keys"],[70,10,55,16],[70,12,55,18],[71,8,55,20,"account"],[71,15,55,27],[72,8,55,29,"mint"],[72,12,55,33],[73,8,55,35,"delegate"],[73,16,55,43],[74,8,55,45,"owner"],[74,13,55,50],[75,8,55,52,"multiSigners"],[76,6,55,65],[76,7,55,66],[77,6,55,68,"data"],[78,4,55,74],[78,5,55,75],[78,8,55,78,"decodeApproveCheckedInstructionUnchecked"],[78,48,55,118],[78,49,55,119,"instruction"],[78,60,55,130],[78,61,55,131],[79,4,56,4],[79,8,56,8,"data"],[79,12,56,12],[79,13,56,13,"instruction"],[79,24,56,24],[79,29,56,29,"TokenInstruction"],[79,52,56,45],[79,53,56,46,"ApproveChecked"],[79,67,56,60],[79,69,57,8],[79,75,57,14],[79,79,57,18,"TokenInvalidInstructionTypeError"],[79,119,57,50],[79,120,57,51],[79,121,57,52],[80,4,58,4],[80,8,58,8],[80,9,58,9,"account"],[80,16,58,16],[80,20,58,20],[80,21,58,21,"mint"],[80,25,58,25],[80,29,58,29],[80,30,58,30,"delegate"],[80,38,58,38],[80,42,58,42],[80,43,58,43,"owner"],[80,48,58,48],[80,50,59,8],[80,56,59,14],[80,60,59,18,"TokenInvalidInstructionKeysError"],[80,100,59,50],[80,101,59,51],[80,102,59,52],[81,4,60,4],[82,4,61,4],[82,11,61,11],[83,6,62,8,"programId"],[83,15,62,17],[84,6,63,8,"keys"],[84,10,63,12],[84,12,63,14],[85,8,64,12,"account"],[85,15,64,19],[86,8,65,12,"mint"],[86,12,65,16],[87,8,66,12,"delegate"],[87,16,66,20],[88,8,67,12,"owner"],[88,13,67,17],[89,8,68,12,"multiSigners"],[90,6,69,8],[90,7,69,9],[91,6,70,8,"data"],[92,4,71,4],[92,5,71,5],[93,2,72,0],[94,2,73,0],[95,0,74,0],[96,0,75,0],[97,0,76,0],[98,0,77,0],[99,0,78,0],[100,0,79,0],[101,2,80,7],[101,11,80,16,"decodeApproveCheckedInstructionUnchecked"],[101,51,80,56,"decodeApproveCheckedInstructionUnchecked"],[101,52,80,57],[102,4,80,59,"programId"],[102,13,80,68],[103,4,80,70,"keys"],[103,8,80,74],[103,10,80,76],[103,11,80,77,"account"],[103,18,80,84],[103,20,80,86,"mint"],[103,24,80,90],[103,26,80,92,"delegate"],[103,34,80,100],[103,36,80,102,"owner"],[103,41,80,107],[103,43,80,109],[103,46,80,112,"multiSigners"],[103,58,80,124],[103,59,80,125],[104,4,80,127,"data"],[105,2,80,133],[105,3,80,134],[105,5,80,136],[106,4,81,4],[106,11,81,11],[107,6,82,8,"programId"],[107,15,82,17],[108,6,83,8,"keys"],[108,10,83,12],[108,12,83,14],[109,8,84,12,"account"],[109,15,84,19],[110,8,85,12,"mint"],[110,12,85,16],[111,8,86,12,"delegate"],[111,16,86,20],[112,8,87,12,"owner"],[112,13,87,17],[113,8,88,12,"multiSigners"],[114,6,89,8],[114,7,89,9],[115,6,90,8,"data"],[115,10,90,12],[115,12,90,14,"approveCheckedInstructionData"],[115,41,90,43],[115,42,90,44,"decode"],[115,48,90,50],[115,49,90,51,"data"],[115,53,90,55],[116,4,91,4],[116,5,91,5],[117,2,92,0],[118,0,92,1],[118,3]],"functionMap":{"names":["<global>","createApproveCheckedInstruction","decodeApproveCheckedInstruction","decodeApproveCheckedInstructionUnchecked"],"mappings":"AAA;OC2B;CDa;OES;CFsB;OGQ;CHY"}},"type":"js/module"}]}