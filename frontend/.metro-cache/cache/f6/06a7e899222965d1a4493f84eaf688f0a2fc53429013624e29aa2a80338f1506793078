{"dependencies":[{"name":"@solana/web3.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":73,"index":73}}],"key":"hVqIgOgXAH1+S7mu7qk6LJzdVc8=","exportNames":["*"]}},{"name":"../constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":74},"end":{"line":2,"column":80,"index":154}}],"key":"w33QN4nlqAZn5CNK6M5HKbLWgBA=","exportNames":["*"]}},{"name":"../instructions/associatedTokenAccount.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":155},"end":{"line":3,"column":110,"index":265}}],"key":"0KInrlWvwWYIf/F6QtBqaQdI9AA=","exportNames":["*"]}},{"name":"../state/mint.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":266},"end":{"line":4,"column":65,"index":331}}],"key":"v3pX84XwBjgEzA16Wj3LfwCi9fI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createAssociatedTokenAccountIdempotent = createAssociatedTokenAccountIdempotent;\n  var _web = require(_dependencyMap[0], \"@solana/web3.js\");\n  var _constants = require(_dependencyMap[1], \"../constants.js\");\n  var _associatedTokenAccount = require(_dependencyMap[2], \"../instructions/associatedTokenAccount.js\");\n  var _mint = require(_dependencyMap[3], \"../state/mint.js\");\n  /**\n   * Create and initialize a new associated token account\n   * The instruction will succeed even if the associated token account already exists\n   *\n   * @param connection               Connection to use\n   * @param payer                    Payer of the transaction and initialization fees\n   * @param mint                     Mint for the account\n   * @param owner                    Owner of the new account\n   * @param confirmOptions           Options for confirming the transaction\n   * @param programId                SPL Token program account\n   * @param associatedTokenProgramId SPL Associated Token program account\n   * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n   *\n   * @return Address of the new or existing associated token account\n   */\n  async function createAssociatedTokenAccountIdempotent(connection, payer, mint, owner, confirmOptions, programId = _constants.TOKEN_PROGRAM_ID, associatedTokenProgramId = _constants.ASSOCIATED_TOKEN_PROGRAM_ID, allowOwnerOffCurve = false) {\n    const associatedToken = (0, _mint.getAssociatedTokenAddressSync)(mint, owner, allowOwnerOffCurve, programId, associatedTokenProgramId);\n    const transaction = new _web.Transaction().add((0, _associatedTokenAccount.createAssociatedTokenAccountIdempotentInstruction)(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n    await (0, _web.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n    return associatedToken;\n  }\n});","lineCount":31,"map":[[6,2,1,0],[6,6,1,0,"_web"],[6,10,1,0],[6,13,1,0,"require"],[6,20,1,0],[6,21,1,0,"_dependencyMap"],[6,35,1,0],[7,2,2,0],[7,6,2,0,"_constants"],[7,16,2,0],[7,19,2,0,"require"],[7,26,2,0],[7,27,2,0,"_dependencyMap"],[7,41,2,0],[8,2,3,0],[8,6,3,0,"_associatedTokenAccount"],[8,29,3,0],[8,32,3,0,"require"],[8,39,3,0],[8,40,3,0,"_dependencyMap"],[8,54,3,0],[9,2,4,0],[9,6,4,0,"_mint"],[9,11,4,0],[9,14,4,0,"require"],[9,21,4,0],[9,22,4,0,"_dependencyMap"],[9,36,4,0],[10,2,5,0],[11,0,6,0],[12,0,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,2,20,7],[25,17,20,22,"createAssociatedTokenAccountIdempotent"],[25,55,20,60,"createAssociatedTokenAccountIdempotent"],[25,56,20,61,"connection"],[25,66,20,71],[25,68,20,73,"payer"],[25,73,20,78],[25,75,20,80,"mint"],[25,79,20,84],[25,81,20,86,"owner"],[25,86,20,91],[25,88,20,93,"confirmOptions"],[25,102,20,107],[25,104,20,109,"programId"],[25,113,20,118],[25,116,20,121,"TOKEN_PROGRAM_ID"],[25,143,20,137],[25,145,20,139,"associatedTokenProgramId"],[25,169,20,163],[25,172,20,166,"ASSOCIATED_TOKEN_PROGRAM_ID"],[25,210,20,193],[25,212,20,195,"allowOwnerOffCurve"],[25,230,20,213],[25,233,20,216],[25,238,20,221],[25,240,20,223],[26,4,21,4],[26,10,21,10,"associatedToken"],[26,25,21,25],[26,28,21,28],[26,32,21,28,"getAssociatedTokenAddressSync"],[26,67,21,57],[26,69,21,58,"mint"],[26,73,21,62],[26,75,21,64,"owner"],[26,80,21,69],[26,82,21,71,"allowOwnerOffCurve"],[26,100,21,89],[26,102,21,91,"programId"],[26,111,21,100],[26,113,21,102,"associatedTokenProgramId"],[26,137,21,126],[26,138,21,127],[27,4,22,4],[27,10,22,10,"transaction"],[27,21,22,21],[27,24,22,24],[27,28,22,28,"Transaction"],[27,44,22,39],[27,45,22,40],[27,46,22,41],[27,47,22,42,"add"],[27,50,22,45],[27,51,22,46],[27,55,22,46,"createAssociatedTokenAccountIdempotentInstruction"],[27,128,22,95],[27,130,22,96,"payer"],[27,135,22,101],[27,136,22,102,"publicKey"],[27,145,22,111],[27,147,22,113,"associatedToken"],[27,162,22,128],[27,164,22,130,"owner"],[27,169,22,135],[27,171,22,137,"mint"],[27,175,22,141],[27,177,22,143,"programId"],[27,186,22,152],[27,188,22,154,"associatedTokenProgramId"],[27,212,22,178],[27,213,22,179],[27,214,22,180],[28,4,23,4],[28,10,23,10],[28,14,23,10,"sendAndConfirmTransaction"],[28,44,23,35],[28,46,23,36,"connection"],[28,56,23,46],[28,58,23,48,"transaction"],[28,69,23,59],[28,71,23,61],[28,72,23,62,"payer"],[28,77,23,67],[28,78,23,68],[28,80,23,70,"confirmOptions"],[28,94,23,84],[28,95,23,85],[29,4,24,4],[29,11,24,11,"associatedToken"],[29,26,24,26],[30,2,25,0],[31,0,25,1],[31,3]],"functionMap":{"names":["<global>","createAssociatedTokenAccountIdempotent"],"mappings":"AAA;OCmB;CDK"}},"type":"js/module"}]}