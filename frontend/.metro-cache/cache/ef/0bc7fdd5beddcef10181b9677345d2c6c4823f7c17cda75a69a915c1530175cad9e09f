{"dependencies":[{"name":"evp_bytestokey","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":10,"index":374},"end":{"line":7,"column":35,"index":399}}],"key":"5bbfDGzJjR/87lKVebwrznr1/UM=","exportNames":["*"]}},{"name":"browserify-aes","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":14,"index":415},"end":{"line":8,"column":39,"index":440}}],"key":"wGSnDtBSNDYVJj7EcrGHDojgmHU=","exportNames":["*"]}},{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":13,"index":455},"end":{"line":9,"column":35,"index":477}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  // adapted from https://github.com/apatil/pemstrip\n  var findProc = /Proc-Type: 4,ENCRYPTED[\\n\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\n\\r]+([0-9A-z\\n\\r+/=]+)[\\n\\r]+/m;\n  var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;\n  var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\\n\\r+/=]+)-----END \\1-----$/m;\n  var evp = require(_dependencyMap[0], \"evp_bytestokey\");\n  var ciphers = require(_dependencyMap[1], \"browserify-aes\");\n  var Buffer = require(_dependencyMap[2], \"safe-buffer\").Buffer;\n  module.exports = function (okey, password) {\n    var key = okey.toString();\n    var match = key.match(findProc);\n    var decrypted;\n    if (!match) {\n      var match2 = key.match(fullRegex);\n      decrypted = Buffer.from(match2[2].replace(/[\\r\\n]/g, ''), 'base64');\n    } else {\n      var suite = 'aes' + match[1];\n      var iv = Buffer.from(match[2], 'hex');\n      var cipherText = Buffer.from(match[3].replace(/[\\r\\n]/g, ''), 'base64');\n      var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;\n      var out = [];\n      var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);\n      out.push(cipher.update(cipherText));\n      out.push(cipher['final']());\n      decrypted = Buffer.concat(out);\n    }\n    var tag = key.match(startRegex)[1];\n    return {\n      tag: tag,\n      data: decrypted\n    };\n  };\n});","lineCount":35,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,2,4,0],[5,6,4,4,"findProc"],[5,14,4,12],[5,17,4,15],[5,136,4,134],[6,2,5,0],[6,6,5,4,"startRegex"],[6,16,5,14],[6,19,5,17],[6,64,5,62],[7,2,6,0],[7,6,6,4,"fullRegex"],[7,15,6,13],[7,18,6,16],[7,98,6,96],[8,2,7,0],[8,6,7,4,"evp"],[8,9,7,7],[8,12,7,10,"require"],[8,19,7,17],[8,20,7,17,"_dependencyMap"],[8,34,7,17],[8,55,7,34],[8,56,7,35],[9,2,8,0],[9,6,8,4,"ciphers"],[9,13,8,11],[9,16,8,14,"require"],[9,23,8,21],[9,24,8,21,"_dependencyMap"],[9,38,8,21],[9,59,8,38],[9,60,8,39],[10,2,9,0],[10,6,9,4,"Buffer"],[10,12,9,10],[10,15,9,13,"require"],[10,22,9,20],[10,23,9,20,"_dependencyMap"],[10,37,9,20],[10,55,9,34],[10,56,9,35],[10,57,9,36,"Buffer"],[10,63,9,42],[11,2,10,0,"module"],[11,8,10,6],[11,9,10,7,"exports"],[11,16,10,14],[11,19,10,17],[11,29,10,27,"okey"],[11,33,10,31],[11,35,10,33,"password"],[11,43,10,41],[11,45,10,43],[12,4,11,1],[12,8,11,5,"key"],[12,11,11,8],[12,14,11,11,"okey"],[12,18,11,15],[12,19,11,16,"toString"],[12,27,11,24],[12,28,11,25],[12,29,11,26],[13,4,12,1],[13,8,12,5,"match"],[13,13,12,10],[13,16,12,13,"key"],[13,19,12,16],[13,20,12,17,"match"],[13,25,12,22],[13,26,12,23,"findProc"],[13,34,12,31],[13,35,12,32],[14,4,13,1],[14,8,13,5,"decrypted"],[14,17,13,14],[15,4,14,1],[15,8,14,5],[15,9,14,6,"match"],[15,14,14,11],[15,16,14,13],[16,6,15,2],[16,10,15,6,"match2"],[16,16,15,12],[16,19,15,15,"key"],[16,22,15,18],[16,23,15,19,"match"],[16,28,15,24],[16,29,15,25,"fullRegex"],[16,38,15,34],[16,39,15,35],[17,6,16,2,"decrypted"],[17,15,16,11],[17,18,16,14,"Buffer"],[17,24,16,20],[17,25,16,21,"from"],[17,29,16,25],[17,30,16,26,"match2"],[17,36,16,32],[17,37,16,33],[17,38,16,34],[17,39,16,35],[17,40,16,36,"replace"],[17,47,16,43],[17,48,16,44],[17,57,16,53],[17,59,16,55],[17,61,16,57],[17,62,16,58],[17,64,16,60],[17,72,16,68],[17,73,16,69],[18,4,17,1],[18,5,17,2],[18,11,17,8],[19,6,18,2],[19,10,18,6,"suite"],[19,15,18,11],[19,18,18,14],[19,23,18,19],[19,26,18,22,"match"],[19,31,18,27],[19,32,18,28],[19,33,18,29],[19,34,18,30],[20,6,19,2],[20,10,19,6,"iv"],[20,12,19,8],[20,15,19,11,"Buffer"],[20,21,19,17],[20,22,19,18,"from"],[20,26,19,22],[20,27,19,23,"match"],[20,32,19,28],[20,33,19,29],[20,34,19,30],[20,35,19,31],[20,37,19,33],[20,42,19,38],[20,43,19,39],[21,6,20,2],[21,10,20,6,"cipherText"],[21,20,20,16],[21,23,20,19,"Buffer"],[21,29,20,25],[21,30,20,26,"from"],[21,34,20,30],[21,35,20,31,"match"],[21,40,20,36],[21,41,20,37],[21,42,20,38],[21,43,20,39],[21,44,20,40,"replace"],[21,51,20,47],[21,52,20,48],[21,61,20,57],[21,63,20,59],[21,65,20,61],[21,66,20,62],[21,68,20,64],[21,76,20,72],[21,77,20,73],[22,6,21,2],[22,10,21,6,"cipherKey"],[22,19,21,15],[22,22,21,18,"evp"],[22,25,21,21],[22,26,21,22,"password"],[22,34,21,30],[22,36,21,32,"iv"],[22,38,21,34],[22,39,21,35,"slice"],[22,44,21,40],[22,45,21,41],[22,46,21,42],[22,48,21,44],[22,49,21,45],[22,50,21,46],[22,52,21,48,"parseInt"],[22,60,21,56],[22,61,21,57,"match"],[22,66,21,62],[22,67,21,63],[22,68,21,64],[22,69,21,65],[22,71,21,67],[22,73,21,69],[22,74,21,70],[22,75,21,71],[22,76,21,72,"key"],[22,79,21,75],[23,6,22,2],[23,10,22,6,"out"],[23,13,22,9],[23,16,22,12],[23,18,22,14],[24,6,23,2],[24,10,23,6,"cipher"],[24,16,23,12],[24,19,23,15,"ciphers"],[24,26,23,22],[24,27,23,23,"createDecipheriv"],[24,43,23,39],[24,44,23,40,"suite"],[24,49,23,45],[24,51,23,47,"cipherKey"],[24,60,23,56],[24,62,23,58,"iv"],[24,64,23,60],[24,65,23,61],[25,6,24,2,"out"],[25,9,24,5],[25,10,24,6,"push"],[25,14,24,10],[25,15,24,11,"cipher"],[25,21,24,17],[25,22,24,18,"update"],[25,28,24,24],[25,29,24,25,"cipherText"],[25,39,24,35],[25,40,24,36],[25,41,24,37],[26,6,25,2,"out"],[26,9,25,5],[26,10,25,6,"push"],[26,14,25,10],[26,15,25,11,"cipher"],[26,21,25,17],[26,22,25,18],[26,29,25,25],[26,30,25,26],[26,31,25,27],[26,32,25,28],[26,33,25,29],[27,6,26,2,"decrypted"],[27,15,26,11],[27,18,26,14,"Buffer"],[27,24,26,20],[27,25,26,21,"concat"],[27,31,26,27],[27,32,26,28,"out"],[27,35,26,31],[27,36,26,32],[28,4,27,1],[29,4,28,1],[29,8,28,5,"tag"],[29,11,28,8],[29,14,28,11,"key"],[29,17,28,14],[29,18,28,15,"match"],[29,23,28,20],[29,24,28,21,"startRegex"],[29,34,28,31],[29,35,28,32],[29,36,28,33],[29,37,28,34],[29,38,28,35],[30,4,29,1],[30,11,29,8],[31,6,30,2,"tag"],[31,9,30,5],[31,11,30,7,"tag"],[31,14,30,10],[32,6,31,2,"data"],[32,10,31,6],[32,12,31,8,"decrypted"],[33,4,32,1],[33,5,32,2],[34,2,33,0],[34,3,33,1],[35,0,33,2],[35,3]],"functionMap":{"names":["<global>","module.exports"],"mappings":"AAA;iBCS;CDuB"}},"type":"js/module"}]}