{"dependencies":[{"name":"parse-asn1","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":16,"index":16},"end":{"line":1,"column":37,"index":37}}],"key":"COzMkWIbbKvXpM5KBuLue1rYJxE=","exportNames":["*"]}},{"name":"randombytes","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":18,"index":56},"end":{"line":2,"column":40,"index":78}}],"key":"HRppB8l92kfLq10/yqHPiqGAuBY=","exportNames":["*"]}},{"name":"create-hash","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":17,"index":96},"end":{"line":3,"column":39,"index":118}}],"key":"7Wxhpesb6O8KtkMXbqnF6GdF3fo=","exportNames":["*"]}},{"name":"./mgf","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":10,"index":129},"end":{"line":4,"column":26,"index":145}}],"key":"oLASPktrADryWflSrNuGCrZB31Y=","exportNames":["*"]}},{"name":"./xor","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":10,"index":156},"end":{"line":5,"column":26,"index":172}}],"key":"uacRIxk+SP/r2vTjF8sBXB2uaAQ=","exportNames":["*"]}},{"name":"bn.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":9,"index":182},"end":{"line":6,"column":25,"index":198}}],"key":"h/AEHknS6KAnKragIfqHUjGvuRM=","exportNames":["*"]}},{"name":"./withPublic","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":17,"index":216},"end":{"line":7,"column":40,"index":239}}],"key":"O+TxBUnGwgZALueMuoyKGC02+3s=","exportNames":["*"]}},{"name":"browserify-rsa","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":10,"index":250},"end":{"line":8,"column":35,"index":275}}],"key":"i91NB5S6fkkom0NK1NSlNMPM/ZQ=","exportNames":["*"]}},{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":13,"index":289},"end":{"line":9,"column":35,"index":311}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var parseKeys = require(_dependencyMap[0], \"parse-asn1\");\n  var randomBytes = require(_dependencyMap[1], \"randombytes\");\n  var createHash = require(_dependencyMap[2], \"create-hash\");\n  var mgf = require(_dependencyMap[3], \"./mgf\");\n  var xor = require(_dependencyMap[4], \"./xor\");\n  var BN = require(_dependencyMap[5], \"bn.js\");\n  var withPublic = require(_dependencyMap[6], \"./withPublic\");\n  var crt = require(_dependencyMap[7], \"browserify-rsa\");\n  var Buffer = require(_dependencyMap[8], \"safe-buffer\").Buffer;\n  module.exports = function publicEncrypt(publicKey, msg, reverse) {\n    var padding;\n    if (publicKey.padding) {\n      padding = publicKey.padding;\n    } else if (reverse) {\n      padding = 1;\n    } else {\n      padding = 4;\n    }\n    var key = parseKeys(publicKey);\n    var paddedMsg;\n    if (padding === 4) {\n      paddedMsg = oaep(key, msg);\n    } else if (padding === 1) {\n      paddedMsg = pkcs1(key, msg, reverse);\n    } else if (padding === 3) {\n      paddedMsg = new BN(msg);\n      if (paddedMsg.cmp(key.modulus) >= 0) {\n        throw new Error('data too long for modulus');\n      }\n    } else {\n      throw new Error('unknown padding');\n    }\n    if (reverse) {\n      return crt(paddedMsg, key);\n    } else {\n      return withPublic(paddedMsg, key);\n    }\n  };\n  function oaep(key, msg) {\n    var k = key.modulus.byteLength();\n    var mLen = msg.length;\n    var iHash = createHash('sha1').update(Buffer.alloc(0)).digest();\n    var hLen = iHash.length;\n    var hLen2 = 2 * hLen;\n    if (mLen > k - hLen2 - 2) {\n      throw new Error('message too long');\n    }\n    var ps = Buffer.alloc(k - mLen - hLen2 - 2);\n    var dblen = k - hLen - 1;\n    var seed = randomBytes(hLen);\n    var maskedDb = xor(Buffer.concat([iHash, ps, Buffer.alloc(1, 1), msg], dblen), mgf(seed, dblen));\n    var maskedSeed = xor(seed, mgf(maskedDb, hLen));\n    return new BN(Buffer.concat([Buffer.alloc(1), maskedSeed, maskedDb], k));\n  }\n  function pkcs1(key, msg, reverse) {\n    var mLen = msg.length;\n    var k = key.modulus.byteLength();\n    if (mLen > k - 11) {\n      throw new Error('message too long');\n    }\n    var ps;\n    if (reverse) {\n      ps = Buffer.alloc(k - mLen - 3, 0xff);\n    } else {\n      ps = nonZero(k - mLen - 3);\n    }\n    return new BN(Buffer.concat([Buffer.from([0, reverse ? 1 : 2]), ps, Buffer.alloc(1), msg], k));\n  }\n  function nonZero(len) {\n    var out = Buffer.allocUnsafe(len);\n    var i = 0;\n    var cache = randomBytes(len * 2);\n    var cur = 0;\n    var num;\n    while (i < len) {\n      if (cur === cache.length) {\n        cache = randomBytes(len * 2);\n        cur = 0;\n      }\n      num = cache[cur++];\n      if (num) {\n        out[i++] = num;\n      }\n    }\n    return out;\n  }\n});","lineCount":88,"map":[[2,2,1,0],[2,6,1,4,"parseKeys"],[2,15,1,13],[2,18,1,16,"require"],[2,25,1,23],[2,26,1,23,"_dependencyMap"],[2,40,1,23],[2,57,1,36],[2,58,1,37],[3,2,2,0],[3,6,2,4,"randomBytes"],[3,17,2,15],[3,20,2,18,"require"],[3,27,2,25],[3,28,2,25,"_dependencyMap"],[3,42,2,25],[3,60,2,39],[3,61,2,40],[4,2,3,0],[4,6,3,4,"createHash"],[4,16,3,14],[4,19,3,17,"require"],[4,26,3,24],[4,27,3,24,"_dependencyMap"],[4,41,3,24],[4,59,3,38],[4,60,3,39],[5,2,4,0],[5,6,4,4,"mgf"],[5,9,4,7],[5,12,4,10,"require"],[5,19,4,17],[5,20,4,17,"_dependencyMap"],[5,34,4,17],[5,46,4,25],[5,47,4,26],[6,2,5,0],[6,6,5,4,"xor"],[6,9,5,7],[6,12,5,10,"require"],[6,19,5,17],[6,20,5,17,"_dependencyMap"],[6,34,5,17],[6,46,5,25],[6,47,5,26],[7,2,6,0],[7,6,6,4,"BN"],[7,8,6,6],[7,11,6,9,"require"],[7,18,6,16],[7,19,6,16,"_dependencyMap"],[7,33,6,16],[7,45,6,24],[7,46,6,25],[8,2,7,0],[8,6,7,4,"withPublic"],[8,16,7,14],[8,19,7,17,"require"],[8,26,7,24],[8,27,7,24,"_dependencyMap"],[8,41,7,24],[8,60,7,39],[8,61,7,40],[9,2,8,0],[9,6,8,4,"crt"],[9,9,8,7],[9,12,8,10,"require"],[9,19,8,17],[9,20,8,17,"_dependencyMap"],[9,34,8,17],[9,55,8,34],[9,56,8,35],[10,2,9,0],[10,6,9,4,"Buffer"],[10,12,9,10],[10,15,9,13,"require"],[10,22,9,20],[10,23,9,20,"_dependencyMap"],[10,37,9,20],[10,55,9,34],[10,56,9,35],[10,57,9,36,"Buffer"],[10,63,9,42],[11,2,11,0,"module"],[11,8,11,6],[11,9,11,7,"exports"],[11,16,11,14],[11,19,11,17],[11,28,11,26,"publicEncrypt"],[11,41,11,39,"publicEncrypt"],[11,42,11,41,"publicKey"],[11,51,11,50],[11,53,11,52,"msg"],[11,56,11,55],[11,58,11,57,"reverse"],[11,65,11,64],[11,67,11,66],[12,4,12,2],[12,8,12,6,"padding"],[12,15,12,13],[13,4,13,2],[13,8,13,6,"publicKey"],[13,17,13,15],[13,18,13,16,"padding"],[13,25,13,23],[13,27,13,25],[14,6,14,4,"padding"],[14,13,14,11],[14,16,14,14,"publicKey"],[14,25,14,23],[14,26,14,24,"padding"],[14,33,14,31],[15,4,15,2],[15,5,15,3],[15,11,15,9],[15,15,15,13,"reverse"],[15,22,15,20],[15,24,15,22],[16,6,16,4,"padding"],[16,13,16,11],[16,16,16,14],[16,17,16,15],[17,4,17,2],[17,5,17,3],[17,11,17,9],[18,6,18,4,"padding"],[18,13,18,11],[18,16,18,14],[18,17,18,15],[19,4,19,2],[20,4,20,2],[20,8,20,6,"key"],[20,11,20,9],[20,14,20,12,"parseKeys"],[20,23,20,21],[20,24,20,22,"publicKey"],[20,33,20,31],[20,34,20,32],[21,4,21,2],[21,8,21,6,"paddedMsg"],[21,17,21,15],[22,4,22,2],[22,8,22,6,"padding"],[22,15,22,13],[22,20,22,18],[22,21,22,19],[22,23,22,21],[23,6,23,4,"paddedMsg"],[23,15,23,13],[23,18,23,16,"oaep"],[23,22,23,20],[23,23,23,21,"key"],[23,26,23,24],[23,28,23,26,"msg"],[23,31,23,29],[23,32,23,30],[24,4,24,2],[24,5,24,3],[24,11,24,9],[24,15,24,13,"padding"],[24,22,24,20],[24,27,24,25],[24,28,24,26],[24,30,24,28],[25,6,25,4,"paddedMsg"],[25,15,25,13],[25,18,25,16,"pkcs1"],[25,23,25,21],[25,24,25,22,"key"],[25,27,25,25],[25,29,25,27,"msg"],[25,32,25,30],[25,34,25,32,"reverse"],[25,41,25,39],[25,42,25,40],[26,4,26,2],[26,5,26,3],[26,11,26,9],[26,15,26,13,"padding"],[26,22,26,20],[26,27,26,25],[26,28,26,26],[26,30,26,28],[27,6,27,4,"paddedMsg"],[27,15,27,13],[27,18,27,16],[27,22,27,20,"BN"],[27,24,27,22],[27,25,27,23,"msg"],[27,28,27,26],[27,29,27,27],[28,6,28,4],[28,10,28,8,"paddedMsg"],[28,19,28,17],[28,20,28,18,"cmp"],[28,23,28,21],[28,24,28,22,"key"],[28,27,28,25],[28,28,28,26,"modulus"],[28,35,28,33],[28,36,28,34],[28,40,28,38],[28,41,28,39],[28,43,28,41],[29,8,29,6],[29,14,29,12],[29,18,29,16,"Error"],[29,23,29,21],[29,24,29,22],[29,51,29,49],[29,52,29,50],[30,6,30,4],[31,4,31,2],[31,5,31,3],[31,11,31,9],[32,6,32,4],[32,12,32,10],[32,16,32,14,"Error"],[32,21,32,19],[32,22,32,20],[32,39,32,37],[32,40,32,38],[33,4,33,2],[34,4,34,2],[34,8,34,6,"reverse"],[34,15,34,13],[34,17,34,15],[35,6,35,4],[35,13,35,11,"crt"],[35,16,35,14],[35,17,35,15,"paddedMsg"],[35,26,35,24],[35,28,35,26,"key"],[35,31,35,29],[35,32,35,30],[36,4,36,2],[36,5,36,3],[36,11,36,9],[37,6,37,4],[37,13,37,11,"withPublic"],[37,23,37,21],[37,24,37,22,"paddedMsg"],[37,33,37,31],[37,35,37,33,"key"],[37,38,37,36],[37,39,37,37],[38,4,38,2],[39,2,39,0],[39,3,39,1],[40,2,41,0],[40,11,41,9,"oaep"],[40,15,41,13,"oaep"],[40,16,41,15,"key"],[40,19,41,18],[40,21,41,20,"msg"],[40,24,41,23],[40,26,41,25],[41,4,42,2],[41,8,42,6,"k"],[41,9,42,7],[41,12,42,10,"key"],[41,15,42,13],[41,16,42,14,"modulus"],[41,23,42,21],[41,24,42,22,"byteLength"],[41,34,42,32],[41,35,42,33],[41,36,42,34],[42,4,43,2],[42,8,43,6,"mLen"],[42,12,43,10],[42,15,43,13,"msg"],[42,18,43,16],[42,19,43,17,"length"],[42,25,43,23],[43,4,44,2],[43,8,44,6,"iHash"],[43,13,44,11],[43,16,44,14,"createHash"],[43,26,44,24],[43,27,44,25],[43,33,44,31],[43,34,44,32],[43,35,44,33,"update"],[43,41,44,39],[43,42,44,40,"Buffer"],[43,48,44,46],[43,49,44,47,"alloc"],[43,54,44,52],[43,55,44,53],[43,56,44,54],[43,57,44,55],[43,58,44,56],[43,59,44,57,"digest"],[43,65,44,63],[43,66,44,64],[43,67,44,65],[44,4,45,2],[44,8,45,6,"hLen"],[44,12,45,10],[44,15,45,13,"iHash"],[44,20,45,18],[44,21,45,19,"length"],[44,27,45,25],[45,4,46,2],[45,8,46,6,"hLen2"],[45,13,46,11],[45,16,46,14],[45,17,46,15],[45,20,46,18,"hLen"],[45,24,46,22],[46,4,47,2],[46,8,47,6,"mLen"],[46,12,47,10],[46,15,47,13,"k"],[46,16,47,14],[46,19,47,17,"hLen2"],[46,24,47,22],[46,27,47,25],[46,28,47,26],[46,30,47,28],[47,6,48,4],[47,12,48,10],[47,16,48,14,"Error"],[47,21,48,19],[47,22,48,20],[47,40,48,38],[47,41,48,39],[48,4,49,2],[49,4,50,2],[49,8,50,6,"ps"],[49,10,50,8],[49,13,50,11,"Buffer"],[49,19,50,17],[49,20,50,18,"alloc"],[49,25,50,23],[49,26,50,24,"k"],[49,27,50,25],[49,30,50,28,"mLen"],[49,34,50,32],[49,37,50,35,"hLen2"],[49,42,50,40],[49,45,50,43],[49,46,50,44],[49,47,50,45],[50,4,51,2],[50,8,51,6,"dblen"],[50,13,51,11],[50,16,51,14,"k"],[50,17,51,15],[50,20,51,18,"hLen"],[50,24,51,22],[50,27,51,25],[50,28,51,26],[51,4,52,2],[51,8,52,6,"seed"],[51,12,52,10],[51,15,52,13,"randomBytes"],[51,26,52,24],[51,27,52,25,"hLen"],[51,31,52,29],[51,32,52,30],[52,4,53,2],[52,8,53,6,"maskedDb"],[52,16,53,14],[52,19,53,17,"xor"],[52,22,53,20],[52,23,53,21,"Buffer"],[52,29,53,27],[52,30,53,28,"concat"],[52,36,53,34],[52,37,53,35],[52,38,53,36,"iHash"],[52,43,53,41],[52,45,53,43,"ps"],[52,47,53,45],[52,49,53,47,"Buffer"],[52,55,53,53],[52,56,53,54,"alloc"],[52,61,53,59],[52,62,53,60],[52,63,53,61],[52,65,53,63],[52,66,53,64],[52,67,53,65],[52,69,53,67,"msg"],[52,72,53,70],[52,73,53,71],[52,75,53,73,"dblen"],[52,80,53,78],[52,81,53,79],[52,83,53,81,"mgf"],[52,86,53,84],[52,87,53,85,"seed"],[52,91,53,89],[52,93,53,91,"dblen"],[52,98,53,96],[52,99,53,97],[52,100,53,98],[53,4,54,2],[53,8,54,6,"maskedSeed"],[53,18,54,16],[53,21,54,19,"xor"],[53,24,54,22],[53,25,54,23,"seed"],[53,29,54,27],[53,31,54,29,"mgf"],[53,34,54,32],[53,35,54,33,"maskedDb"],[53,43,54,41],[53,45,54,43,"hLen"],[53,49,54,47],[53,50,54,48],[53,51,54,49],[54,4,55,2],[54,11,55,9],[54,15,55,13,"BN"],[54,17,55,15],[54,18,55,16,"Buffer"],[54,24,55,22],[54,25,55,23,"concat"],[54,31,55,29],[54,32,55,30],[54,33,55,31,"Buffer"],[54,39,55,37],[54,40,55,38,"alloc"],[54,45,55,43],[54,46,55,44],[54,47,55,45],[54,48,55,46],[54,50,55,48,"maskedSeed"],[54,60,55,58],[54,62,55,60,"maskedDb"],[54,70,55,68],[54,71,55,69],[54,73,55,71,"k"],[54,74,55,72],[54,75,55,73],[54,76,55,74],[55,2,56,0],[56,2,57,0],[56,11,57,9,"pkcs1"],[56,16,57,14,"pkcs1"],[56,17,57,16,"key"],[56,20,57,19],[56,22,57,21,"msg"],[56,25,57,24],[56,27,57,26,"reverse"],[56,34,57,33],[56,36,57,35],[57,4,58,2],[57,8,58,6,"mLen"],[57,12,58,10],[57,15,58,13,"msg"],[57,18,58,16],[57,19,58,17,"length"],[57,25,58,23],[58,4,59,2],[58,8,59,6,"k"],[58,9,59,7],[58,12,59,10,"key"],[58,15,59,13],[58,16,59,14,"modulus"],[58,23,59,21],[58,24,59,22,"byteLength"],[58,34,59,32],[58,35,59,33],[58,36,59,34],[59,4,60,2],[59,8,60,6,"mLen"],[59,12,60,10],[59,15,60,13,"k"],[59,16,60,14],[59,19,60,17],[59,21,60,19],[59,23,60,21],[60,6,61,4],[60,12,61,10],[60,16,61,14,"Error"],[60,21,61,19],[60,22,61,20],[60,40,61,38],[60,41,61,39],[61,4,62,2],[62,4,63,2],[62,8,63,6,"ps"],[62,10,63,8],[63,4,64,2],[63,8,64,6,"reverse"],[63,15,64,13],[63,17,64,15],[64,6,65,4,"ps"],[64,8,65,6],[64,11,65,9,"Buffer"],[64,17,65,15],[64,18,65,16,"alloc"],[64,23,65,21],[64,24,65,22,"k"],[64,25,65,23],[64,28,65,26,"mLen"],[64,32,65,30],[64,35,65,33],[64,36,65,34],[64,38,65,36],[64,42,65,40],[64,43,65,41],[65,4,66,2],[65,5,66,3],[65,11,66,9],[66,6,67,4,"ps"],[66,8,67,6],[66,11,67,9,"nonZero"],[66,18,67,16],[66,19,67,17,"k"],[66,20,67,18],[66,23,67,21,"mLen"],[66,27,67,25],[66,30,67,28],[66,31,67,29],[66,32,67,30],[67,4,68,2],[68,4,69,2],[68,11,69,9],[68,15,69,13,"BN"],[68,17,69,15],[68,18,69,16,"Buffer"],[68,24,69,22],[68,25,69,23,"concat"],[68,31,69,29],[68,32,69,30],[68,33,69,31,"Buffer"],[68,39,69,37],[68,40,69,38,"from"],[68,44,69,42],[68,45,69,43],[68,46,69,44],[68,47,69,45],[68,49,69,47,"reverse"],[68,56,69,54],[68,59,69,57],[68,60,69,58],[68,63,69,61],[68,64,69,62],[68,65,69,63],[68,66,69,64],[68,68,69,66,"ps"],[68,70,69,68],[68,72,69,70,"Buffer"],[68,78,69,76],[68,79,69,77,"alloc"],[68,84,69,82],[68,85,69,83],[68,86,69,84],[68,87,69,85],[68,89,69,87,"msg"],[68,92,69,90],[68,93,69,91],[68,95,69,93,"k"],[68,96,69,94],[68,97,69,95],[68,98,69,96],[69,2,70,0],[70,2,71,0],[70,11,71,9,"nonZero"],[70,18,71,16,"nonZero"],[70,19,71,18,"len"],[70,22,71,21],[70,24,71,23],[71,4,72,2],[71,8,72,6,"out"],[71,11,72,9],[71,14,72,12,"Buffer"],[71,20,72,18],[71,21,72,19,"allocUnsafe"],[71,32,72,30],[71,33,72,31,"len"],[71,36,72,34],[71,37,72,35],[72,4,73,2],[72,8,73,6,"i"],[72,9,73,7],[72,12,73,10],[72,13,73,11],[73,4,74,2],[73,8,74,6,"cache"],[73,13,74,11],[73,16,74,14,"randomBytes"],[73,27,74,25],[73,28,74,26,"len"],[73,31,74,29],[73,34,74,32],[73,35,74,33],[73,36,74,34],[74,4,75,2],[74,8,75,6,"cur"],[74,11,75,9],[74,14,75,12],[74,15,75,13],[75,4,76,2],[75,8,76,6,"num"],[75,11,76,9],[76,4,77,2],[76,11,77,9,"i"],[76,12,77,10],[76,15,77,13,"len"],[76,18,77,16],[76,20,77,18],[77,6,78,4],[77,10,78,8,"cur"],[77,13,78,11],[77,18,78,16,"cache"],[77,23,78,21],[77,24,78,22,"length"],[77,30,78,28],[77,32,78,30],[78,8,79,6,"cache"],[78,13,79,11],[78,16,79,14,"randomBytes"],[78,27,79,25],[78,28,79,26,"len"],[78,31,79,29],[78,34,79,32],[78,35,79,33],[78,36,79,34],[79,8,80,6,"cur"],[79,11,80,9],[79,14,80,12],[79,15,80,13],[80,6,81,4],[81,6,82,4,"num"],[81,9,82,7],[81,12,82,10,"cache"],[81,17,82,15],[81,18,82,16,"cur"],[81,21,82,19],[81,23,82,21],[81,24,82,22],[82,6,83,4],[82,10,83,8,"num"],[82,13,83,11],[82,15,83,13],[83,8,84,6,"out"],[83,11,84,9],[83,12,84,10,"i"],[83,13,84,11],[83,15,84,13],[83,16,84,14],[83,19,84,17,"num"],[83,22,84,20],[84,6,85,4],[85,4,86,2],[86,4,87,2],[86,11,87,9,"out"],[86,14,87,12],[87,2,88,0],[88,0,88,1],[88,3]],"functionMap":{"names":["<global>","publicEncrypt","oaep","pkcs1","nonZero"],"mappings":"AAA;iBCU;CD4B;AEE;CFe;AGC;CHa;AIC;CJiB"}},"type":"js/module"}]}