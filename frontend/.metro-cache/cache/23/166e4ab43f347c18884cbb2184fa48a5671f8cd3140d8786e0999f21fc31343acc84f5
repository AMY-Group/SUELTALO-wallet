{"dependencies":[{"name":"../utils.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":19,"index":404},"end":{"line":11,"column":41,"index":426}}],"key":"Yc7DmwhweSDBIC4bv+r2fO8xp6U=","exportNames":["*"]}},{"name":"./modular.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":21,"index":449},"end":{"line":12,"column":44,"index":472}}],"key":"pkHxIsiyj9LvPZma2E+OjOIbg7k=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.montgomery = montgomery;\n  /**\n   * Montgomery curve methods. It's not really whole montgomery curve,\n   * just bunch of very specific methods for X25519 / X448 from\n   * [RFC 7748](https://www.rfc-editor.org/rfc/rfc7748)\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n  const utils_ts_1 = require(_dependencyMap[0], \"../utils.js\");\n  const modular_ts_1 = require(_dependencyMap[1], \"./modular.js\");\n  const _0n = BigInt(0);\n  const _1n = BigInt(1);\n  const _2n = BigInt(2);\n  function validateOpts(curve) {\n    (0, utils_ts_1._validateObject)(curve, {\n      adjustScalarBytes: 'function',\n      powPminus2: 'function'\n    });\n    return Object.freeze({\n      ...curve\n    });\n  }\n  function montgomery(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const {\n      P,\n      type,\n      adjustScalarBytes,\n      powPminus2,\n      randomBytes: rand\n    } = CURVE;\n    const is25519 = type === 'x25519';\n    if (!is25519 && type !== 'x448') throw new Error('invalid type');\n    const randomBytes_ = rand || utils_ts_1.randomBytes;\n    const montgomeryBits = is25519 ? 255 : 448;\n    const fieldLen = is25519 ? 32 : 56;\n    const Gu = is25519 ? BigInt(9) : BigInt(5);\n    // RFC 7748 #5:\n    // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519 and\n    // (156326 - 2) / 4 = 39081 for curve448/X448\n    // const a = is25519 ? 156326n : 486662n;\n    const a24 = is25519 ? BigInt(121665) : BigInt(39081);\n    // RFC: x25519 \"the resulting integer is of the form 2^254 plus\n    // eight times a value between 0 and 2^251 - 1 (inclusive)\"\n    // x448: \"2^447 plus four times a value between 0 and 2^445 - 1 (inclusive)\"\n    const minScalar = is25519 ? _2n ** BigInt(254) : _2n ** BigInt(447);\n    const maxAdded = is25519 ? BigInt(8) * _2n ** BigInt(251) - _1n : BigInt(4) * _2n ** BigInt(445) - _1n;\n    const maxScalar = minScalar + maxAdded + _1n; // (inclusive)\n    const modP = n => (0, modular_ts_1.mod)(n, P);\n    const GuBytes = encodeU(Gu);\n    function encodeU(u) {\n      return (0, utils_ts_1.numberToBytesLE)(modP(u), fieldLen);\n    }\n    function decodeU(u) {\n      const _u = (0, utils_ts_1.ensureBytes)('u coordinate', u, fieldLen);\n      // RFC: When receiving such an array, implementations of X25519\n      // (but not X448) MUST mask the most significant bit in the final byte.\n      if (is25519) _u[31] &= 127; // 0b0111_1111\n      // RFC: Implementations MUST accept non-canonical values and process them as\n      // if they had been reduced modulo the field prime.  The non-canonical\n      // values are 2^255 - 19 through 2^255 - 1 for X25519 and 2^448 - 2^224\n      // - 1 through 2^448 - 1 for X448.\n      return modP((0, utils_ts_1.bytesToNumberLE)(_u));\n    }\n    function decodeScalar(scalar) {\n      return (0, utils_ts_1.bytesToNumberLE)(adjustScalarBytes((0, utils_ts_1.ensureBytes)('scalar', scalar, fieldLen)));\n    }\n    function scalarMult(scalar, u) {\n      const pu = montgomeryLadder(decodeU(u), decodeScalar(scalar));\n      // Some public keys are useless, of low-order. Curve author doesn't think\n      // it needs to be validated, but we do it nonetheless.\n      // https://cr.yp.to/ecdh.html#validate\n      if (pu === _0n) throw new Error('invalid private or public key received');\n      return encodeU(pu);\n    }\n    // Computes public key from private. By doing scalar multiplication of base point.\n    function scalarMultBase(scalar) {\n      return scalarMult(scalar, GuBytes);\n    }\n    // cswap from RFC7748 \"example code\"\n    function cswap(swap, x_2, x_3) {\n      // dummy = mask(swap) AND (x_2 XOR x_3)\n      // Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n      // and x_3, computed, e.g., as mask(swap) = 0 - swap.\n      const dummy = modP(swap * (x_2 - x_3));\n      x_2 = modP(x_2 - dummy); // x_2 = x_2 XOR dummy\n      x_3 = modP(x_3 + dummy); // x_3 = x_3 XOR dummy\n      return {\n        x_2,\n        x_3\n      };\n    }\n    /**\n     * Montgomery x-only multiplication ladder.\n     * @param pointU u coordinate (x) on Montgomery Curve 25519\n     * @param scalar by which the point would be multiplied\n     * @returns new Point on Montgomery curve\n     */\n    function montgomeryLadder(u, scalar) {\n      (0, utils_ts_1.aInRange)('u', u, _0n, P);\n      (0, utils_ts_1.aInRange)('scalar', scalar, minScalar, maxScalar);\n      const k = scalar;\n      const x_1 = u;\n      let x_2 = _1n;\n      let z_2 = _0n;\n      let x_3 = u;\n      let z_3 = _1n;\n      let swap = _0n;\n      for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n        const k_t = k >> t & _1n;\n        swap ^= k_t;\n        ({\n          x_2,\n          x_3\n        } = cswap(swap, x_2, x_3));\n        ({\n          x_2: z_2,\n          x_3: z_3\n        } = cswap(swap, z_2, z_3));\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = modP(A * A);\n        const B = x_2 - z_2;\n        const BB = modP(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = modP(D * A);\n        const CB = modP(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = modP(dacb * dacb);\n        z_3 = modP(x_1 * modP(da_cb * da_cb));\n        x_2 = modP(AA * BB);\n        z_2 = modP(E * (AA + modP(a24 * E)));\n      }\n      ({\n        x_2,\n        x_3\n      } = cswap(swap, x_2, x_3));\n      ({\n        x_2: z_2,\n        x_3: z_3\n      } = cswap(swap, z_2, z_3));\n      const z2 = powPminus2(z_2); // `Fp.pow(x, P - _2n)` is much slower equivalent\n      return modP(x_2 * z2); // Return x_2 * (z_2^(p - 2))\n    }\n    const lengths = {\n      secretKey: fieldLen,\n      publicKey: fieldLen,\n      seed: fieldLen\n    };\n    const randomSecretKey = (seed = randomBytes_(fieldLen)) => {\n      (0, utils_ts_1.abytes)(seed, lengths.seed);\n      return seed;\n    };\n    function keygen(seed) {\n      const secretKey = randomSecretKey(seed);\n      return {\n        secretKey,\n        publicKey: scalarMultBase(secretKey)\n      };\n    }\n    const utils = {\n      randomSecretKey,\n      randomPrivateKey: randomSecretKey\n    };\n    return {\n      keygen,\n      getSharedSecret: (secretKey, publicKey) => scalarMult(secretKey, publicKey),\n      getPublicKey: secretKey => scalarMultBase(secretKey),\n      scalarMult,\n      scalarMultBase,\n      utils,\n      GuBytes: GuBytes.slice(),\n      lengths\n    };\n  }\n});","lineCount":185,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"montgomery"],[7,20,3,18],[7,23,3,21,"montgomery"],[7,33,3,31],[8,2,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,2,10,0],[15,2,11,0],[15,8,11,6,"utils_ts_1"],[15,18,11,16],[15,21,11,19,"require"],[15,28,11,26],[15,29,11,26,"_dependencyMap"],[15,43,11,26],[15,61,11,40],[15,62,11,41],[16,2,12,0],[16,8,12,6,"modular_ts_1"],[16,20,12,18],[16,23,12,21,"require"],[16,30,12,28],[16,31,12,28,"_dependencyMap"],[16,45,12,28],[16,64,12,43],[16,65,12,44],[17,2,13,0],[17,8,13,6,"_0n"],[17,11,13,9],[17,14,13,12,"BigInt"],[17,20,13,18],[17,21,13,19],[17,22,13,20],[17,23,13,21],[18,2,14,0],[18,8,14,6,"_1n"],[18,11,14,9],[18,14,14,12,"BigInt"],[18,20,14,18],[18,21,14,19],[18,22,14,20],[18,23,14,21],[19,2,15,0],[19,8,15,6,"_2n"],[19,11,15,9],[19,14,15,12,"BigInt"],[19,20,15,18],[19,21,15,19],[19,22,15,20],[19,23,15,21],[20,2,16,0],[20,11,16,9,"validateOpts"],[20,23,16,21,"validateOpts"],[20,24,16,22,"curve"],[20,29,16,27],[20,31,16,29],[21,4,17,4],[21,5,17,5],[21,6,17,6],[21,8,17,8,"utils_ts_1"],[21,18,17,18],[21,19,17,19,"_validateObject"],[21,34,17,34],[21,36,17,36,"curve"],[21,41,17,41],[21,43,17,43],[22,6,18,8,"adjustScalarBytes"],[22,23,18,25],[22,25,18,27],[22,35,18,37],[23,6,19,8,"powPminus2"],[23,16,19,18],[23,18,19,20],[24,4,20,4],[24,5,20,5],[24,6,20,6],[25,4,21,4],[25,11,21,11,"Object"],[25,17,21,17],[25,18,21,18,"freeze"],[25,24,21,24],[25,25,21,25],[26,6,21,27],[26,9,21,30,"curve"],[27,4,21,36],[27,5,21,37],[27,6,21,38],[28,2,22,0],[29,2,23,0],[29,11,23,9,"montgomery"],[29,21,23,19,"montgomery"],[29,22,23,20,"curveDef"],[29,30,23,28],[29,32,23,30],[30,4,24,4],[30,10,24,10,"CURVE"],[30,15,24,15],[30,18,24,18,"validateOpts"],[30,30,24,30],[30,31,24,31,"curveDef"],[30,39,24,39],[30,40,24,40],[31,4,25,4],[31,10,25,10],[32,6,25,12,"P"],[32,7,25,13],[33,6,25,15,"type"],[33,10,25,19],[34,6,25,21,"adjustScalarBytes"],[34,23,25,38],[35,6,25,40,"powPminus2"],[35,16,25,50],[36,6,25,52,"randomBytes"],[36,17,25,63],[36,19,25,65,"rand"],[37,4,25,70],[37,5,25,71],[37,8,25,74,"CURVE"],[37,13,25,79],[38,4,26,4],[38,10,26,10,"is25519"],[38,17,26,17],[38,20,26,20,"type"],[38,24,26,24],[38,29,26,29],[38,37,26,37],[39,4,27,4],[39,8,27,8],[39,9,27,9,"is25519"],[39,16,27,16],[39,20,27,20,"type"],[39,24,27,24],[39,29,27,29],[39,35,27,35],[39,37,28,8],[39,43,28,14],[39,47,28,18,"Error"],[39,52,28,23],[39,53,28,24],[39,67,28,38],[39,68,28,39],[40,4,29,4],[40,10,29,10,"randomBytes_"],[40,22,29,22],[40,25,29,25,"rand"],[40,29,29,29],[40,33,29,33,"utils_ts_1"],[40,43,29,43],[40,44,29,44,"randomBytes"],[40,55,29,55],[41,4,30,4],[41,10,30,10,"montgomeryBits"],[41,24,30,24],[41,27,30,27,"is25519"],[41,34,30,34],[41,37,30,37],[41,40,30,40],[41,43,30,43],[41,46,30,46],[42,4,31,4],[42,10,31,10,"fieldLen"],[42,18,31,18],[42,21,31,21,"is25519"],[42,28,31,28],[42,31,31,31],[42,33,31,33],[42,36,31,36],[42,38,31,38],[43,4,32,4],[43,10,32,10,"Gu"],[43,12,32,12],[43,15,32,15,"is25519"],[43,22,32,22],[43,25,32,25,"BigInt"],[43,31,32,31],[43,32,32,32],[43,33,32,33],[43,34,32,34],[43,37,32,37,"BigInt"],[43,43,32,43],[43,44,32,44],[43,45,32,45],[43,46,32,46],[44,4,33,4],[45,4,34,4],[46,4,35,4],[47,4,36,4],[48,4,37,4],[48,10,37,10,"a24"],[48,13,37,13],[48,16,37,16,"is25519"],[48,23,37,23],[48,26,37,26,"BigInt"],[48,32,37,32],[48,33,37,33],[48,39,37,39],[48,40,37,40],[48,43,37,43,"BigInt"],[48,49,37,49],[48,50,37,50],[48,55,37,55],[48,56,37,56],[49,4,38,4],[50,4,39,4],[51,4,40,4],[52,4,41,4],[52,10,41,10,"minScalar"],[52,19,41,19],[52,22,41,22,"is25519"],[52,29,41,29],[52,32,41,32,"_2n"],[52,35,41,35],[52,39,41,39,"BigInt"],[52,45,41,45],[52,46,41,46],[52,49,41,49],[52,50,41,50],[52,53,41,53,"_2n"],[52,56,41,56],[52,60,41,60,"BigInt"],[52,66,41,66],[52,67,41,67],[52,70,41,70],[52,71,41,71],[53,4,42,4],[53,10,42,10,"maxAdded"],[53,18,42,18],[53,21,42,21,"is25519"],[53,28,42,28],[53,31,43,10,"BigInt"],[53,37,43,16],[53,38,43,17],[53,39,43,18],[53,40,43,19],[53,43,43,22,"_2n"],[53,46,43,25],[53,50,43,29,"BigInt"],[53,56,43,35],[53,57,43,36],[53,60,43,39],[53,61,43,40],[53,64,43,43,"_1n"],[53,67,43,46],[53,70,44,10,"BigInt"],[53,76,44,16],[53,77,44,17],[53,78,44,18],[53,79,44,19],[53,82,44,22,"_2n"],[53,85,44,25],[53,89,44,29,"BigInt"],[53,95,44,35],[53,96,44,36],[53,99,44,39],[53,100,44,40],[53,103,44,43,"_1n"],[53,106,44,46],[54,4,45,4],[54,10,45,10,"maxScalar"],[54,19,45,19],[54,22,45,22,"minScalar"],[54,31,45,31],[54,34,45,34,"maxAdded"],[54,42,45,42],[54,45,45,45,"_1n"],[54,48,45,48],[54,49,45,49],[54,50,45,50],[55,4,46,4],[55,10,46,10,"modP"],[55,14,46,14],[55,17,46,18,"n"],[55,18,46,19],[55,22,46,24],[55,23,46,25],[55,24,46,26],[55,26,46,28,"modular_ts_1"],[55,38,46,40],[55,39,46,41,"mod"],[55,42,46,44],[55,44,46,46,"n"],[55,45,46,47],[55,47,46,49,"P"],[55,48,46,50],[55,49,46,51],[56,4,47,4],[56,10,47,10,"GuBytes"],[56,17,47,17],[56,20,47,20,"encodeU"],[56,27,47,27],[56,28,47,28,"Gu"],[56,30,47,30],[56,31,47,31],[57,4,48,4],[57,13,48,13,"encodeU"],[57,20,48,20,"encodeU"],[57,21,48,21,"u"],[57,22,48,22],[57,24,48,24],[58,6,49,8],[58,13,49,15],[58,14,49,16],[58,15,49,17],[58,17,49,19,"utils_ts_1"],[58,27,49,29],[58,28,49,30,"numberToBytesLE"],[58,43,49,45],[58,45,49,47,"modP"],[58,49,49,51],[58,50,49,52,"u"],[58,51,49,53],[58,52,49,54],[58,54,49,56,"fieldLen"],[58,62,49,64],[58,63,49,65],[59,4,50,4],[60,4,51,4],[60,13,51,13,"decodeU"],[60,20,51,20,"decodeU"],[60,21,51,21,"u"],[60,22,51,22],[60,24,51,24],[61,6,52,8],[61,12,52,14,"_u"],[61,14,52,16],[61,17,52,19],[61,18,52,20],[61,19,52,21],[61,21,52,23,"utils_ts_1"],[61,31,52,33],[61,32,52,34,"ensureBytes"],[61,43,52,45],[61,45,52,47],[61,59,52,61],[61,61,52,63,"u"],[61,62,52,64],[61,64,52,66,"fieldLen"],[61,72,52,74],[61,73,52,75],[62,6,53,8],[63,6,54,8],[64,6,55,8],[64,10,55,12,"is25519"],[64,17,55,19],[64,19,56,12,"_u"],[64,21,56,14],[64,22,56,15],[64,24,56,17],[64,25,56,18],[64,29,56,22],[64,32,56,25],[64,33,56,26],[64,34,56,27],[65,6,57,8],[66,6,58,8],[67,6,59,8],[68,6,60,8],[69,6,61,8],[69,13,61,15,"modP"],[69,17,61,19],[69,18,61,20],[69,19,61,21],[69,20,61,22],[69,22,61,24,"utils_ts_1"],[69,32,61,34],[69,33,61,35,"bytesToNumberLE"],[69,48,61,50],[69,50,61,52,"_u"],[69,52,61,54],[69,53,61,55],[69,54,61,56],[70,4,62,4],[71,4,63,4],[71,13,63,13,"decodeScalar"],[71,25,63,25,"decodeScalar"],[71,26,63,26,"scalar"],[71,32,63,32],[71,34,63,34],[72,6,64,8],[72,13,64,15],[72,14,64,16],[72,15,64,17],[72,17,64,19,"utils_ts_1"],[72,27,64,29],[72,28,64,30,"bytesToNumberLE"],[72,43,64,45],[72,45,64,47,"adjustScalarBytes"],[72,62,64,64],[72,63,64,65],[72,64,64,66],[72,65,64,67],[72,67,64,69,"utils_ts_1"],[72,77,64,79],[72,78,64,80,"ensureBytes"],[72,89,64,91],[72,91,64,93],[72,99,64,101],[72,101,64,103,"scalar"],[72,107,64,109],[72,109,64,111,"fieldLen"],[72,117,64,119],[72,118,64,120],[72,119,64,121],[72,120,64,122],[73,4,65,4],[74,4,66,4],[74,13,66,13,"scalarMult"],[74,23,66,23,"scalarMult"],[74,24,66,24,"scalar"],[74,30,66,30],[74,32,66,32,"u"],[74,33,66,33],[74,35,66,35],[75,6,67,8],[75,12,67,14,"pu"],[75,14,67,16],[75,17,67,19,"montgomeryLadder"],[75,33,67,35],[75,34,67,36,"decodeU"],[75,41,67,43],[75,42,67,44,"u"],[75,43,67,45],[75,44,67,46],[75,46,67,48,"decodeScalar"],[75,58,67,60],[75,59,67,61,"scalar"],[75,65,67,67],[75,66,67,68],[75,67,67,69],[76,6,68,8],[77,6,69,8],[78,6,70,8],[79,6,71,8],[79,10,71,12,"pu"],[79,12,71,14],[79,17,71,19,"_0n"],[79,20,71,22],[79,22,72,12],[79,28,72,18],[79,32,72,22,"Error"],[79,37,72,27],[79,38,72,28],[79,78,72,68],[79,79,72,69],[80,6,73,8],[80,13,73,15,"encodeU"],[80,20,73,22],[80,21,73,23,"pu"],[80,23,73,25],[80,24,73,26],[81,4,74,4],[82,4,75,4],[83,4,76,4],[83,13,76,13,"scalarMultBase"],[83,27,76,27,"scalarMultBase"],[83,28,76,28,"scalar"],[83,34,76,34],[83,36,76,36],[84,6,77,8],[84,13,77,15,"scalarMult"],[84,23,77,25],[84,24,77,26,"scalar"],[84,30,77,32],[84,32,77,34,"GuBytes"],[84,39,77,41],[84,40,77,42],[85,4,78,4],[86,4,79,4],[87,4,80,4],[87,13,80,13,"cswap"],[87,18,80,18,"cswap"],[87,19,80,19,"swap"],[87,23,80,23],[87,25,80,25,"x_2"],[87,28,80,28],[87,30,80,30,"x_3"],[87,33,80,33],[87,35,80,35],[88,6,81,8],[89,6,82,8],[90,6,83,8],[91,6,84,8],[91,12,84,14,"dummy"],[91,17,84,19],[91,20,84,22,"modP"],[91,24,84,26],[91,25,84,27,"swap"],[91,29,84,31],[91,33,84,35,"x_2"],[91,36,84,38],[91,39,84,41,"x_3"],[91,42,84,44],[91,43,84,45],[91,44,84,46],[92,6,85,8,"x_2"],[92,9,85,11],[92,12,85,14,"modP"],[92,16,85,18],[92,17,85,19,"x_2"],[92,20,85,22],[92,23,85,25,"dummy"],[92,28,85,30],[92,29,85,31],[92,30,85,32],[92,31,85,33],[93,6,86,8,"x_3"],[93,9,86,11],[93,12,86,14,"modP"],[93,16,86,18],[93,17,86,19,"x_3"],[93,20,86,22],[93,23,86,25,"dummy"],[93,28,86,30],[93,29,86,31],[93,30,86,32],[93,31,86,33],[94,6,87,8],[94,13,87,15],[95,8,87,17,"x_2"],[95,11,87,20],[96,8,87,22,"x_3"],[97,6,87,26],[97,7,87,27],[98,4,88,4],[99,4,89,4],[100,0,90,0],[101,0,91,0],[102,0,92,0],[103,0,93,0],[104,0,94,0],[105,4,95,4],[105,13,95,13,"montgomeryLadder"],[105,29,95,29,"montgomeryLadder"],[105,30,95,30,"u"],[105,31,95,31],[105,33,95,33,"scalar"],[105,39,95,39],[105,41,95,41],[106,6,96,8],[106,7,96,9],[106,8,96,10],[106,10,96,12,"utils_ts_1"],[106,20,96,22],[106,21,96,23,"aInRange"],[106,29,96,31],[106,31,96,33],[106,34,96,36],[106,36,96,38,"u"],[106,37,96,39],[106,39,96,41,"_0n"],[106,42,96,44],[106,44,96,46,"P"],[106,45,96,47],[106,46,96,48],[107,6,97,8],[107,7,97,9],[107,8,97,10],[107,10,97,12,"utils_ts_1"],[107,20,97,22],[107,21,97,23,"aInRange"],[107,29,97,31],[107,31,97,33],[107,39,97,41],[107,41,97,43,"scalar"],[107,47,97,49],[107,49,97,51,"minScalar"],[107,58,97,60],[107,60,97,62,"maxScalar"],[107,69,97,71],[107,70,97,72],[108,6,98,8],[108,12,98,14,"k"],[108,13,98,15],[108,16,98,18,"scalar"],[108,22,98,24],[109,6,99,8],[109,12,99,14,"x_1"],[109,15,99,17],[109,18,99,20,"u"],[109,19,99,21],[110,6,100,8],[110,10,100,12,"x_2"],[110,13,100,15],[110,16,100,18,"_1n"],[110,19,100,21],[111,6,101,8],[111,10,101,12,"z_2"],[111,13,101,15],[111,16,101,18,"_0n"],[111,19,101,21],[112,6,102,8],[112,10,102,12,"x_3"],[112,13,102,15],[112,16,102,18,"u"],[112,17,102,19],[113,6,103,8],[113,10,103,12,"z_3"],[113,13,103,15],[113,16,103,18,"_1n"],[113,19,103,21],[114,6,104,8],[114,10,104,12,"swap"],[114,14,104,16],[114,17,104,19,"_0n"],[114,20,104,22],[115,6,105,8],[115,11,105,13],[115,15,105,17,"t"],[115,16,105,18],[115,19,105,21,"BigInt"],[115,25,105,27],[115,26,105,28,"montgomeryBits"],[115,40,105,42],[115,43,105,45],[115,44,105,46],[115,45,105,47],[115,47,105,49,"t"],[115,48,105,50],[115,52,105,54,"_0n"],[115,55,105,57],[115,57,105,59,"t"],[115,58,105,60],[115,60,105,62],[115,62,105,64],[116,8,106,12],[116,14,106,18,"k_t"],[116,17,106,21],[116,20,106,25,"k"],[116,21,106,26],[116,25,106,30,"t"],[116,26,106,31],[116,29,106,35,"_1n"],[116,32,106,38],[117,8,107,12,"swap"],[117,12,107,16],[117,16,107,20,"k_t"],[117,19,107,23],[118,8,108,12],[118,9,108,13],[119,10,108,15,"x_2"],[119,13,108,18],[120,10,108,20,"x_3"],[121,8,108,24],[121,9,108,25],[121,12,108,28,"cswap"],[121,17,108,33],[121,18,108,34,"swap"],[121,22,108,38],[121,24,108,40,"x_2"],[121,27,108,43],[121,29,108,45,"x_3"],[121,32,108,48],[121,33,108,49],[122,8,109,12],[122,9,109,13],[123,10,109,15,"x_2"],[123,13,109,18],[123,15,109,20,"z_2"],[123,18,109,23],[124,10,109,25,"x_3"],[124,13,109,28],[124,15,109,30,"z_3"],[125,8,109,34],[125,9,109,35],[125,12,109,38,"cswap"],[125,17,109,43],[125,18,109,44,"swap"],[125,22,109,48],[125,24,109,50,"z_2"],[125,27,109,53],[125,29,109,55,"z_3"],[125,32,109,58],[125,33,109,59],[126,8,110,12,"swap"],[126,12,110,16],[126,15,110,19,"k_t"],[126,18,110,22],[127,8,111,12],[127,14,111,18,"A"],[127,15,111,19],[127,18,111,22,"x_2"],[127,21,111,25],[127,24,111,28,"z_2"],[127,27,111,31],[128,8,112,12],[128,14,112,18,"AA"],[128,16,112,20],[128,19,112,23,"modP"],[128,23,112,27],[128,24,112,28,"A"],[128,25,112,29],[128,28,112,32,"A"],[128,29,112,33],[128,30,112,34],[129,8,113,12],[129,14,113,18,"B"],[129,15,113,19],[129,18,113,22,"x_2"],[129,21,113,25],[129,24,113,28,"z_2"],[129,27,113,31],[130,8,114,12],[130,14,114,18,"BB"],[130,16,114,20],[130,19,114,23,"modP"],[130,23,114,27],[130,24,114,28,"B"],[130,25,114,29],[130,28,114,32,"B"],[130,29,114,33],[130,30,114,34],[131,8,115,12],[131,14,115,18,"E"],[131,15,115,19],[131,18,115,22,"AA"],[131,20,115,24],[131,23,115,27,"BB"],[131,25,115,29],[132,8,116,12],[132,14,116,18,"C"],[132,15,116,19],[132,18,116,22,"x_3"],[132,21,116,25],[132,24,116,28,"z_3"],[132,27,116,31],[133,8,117,12],[133,14,117,18,"D"],[133,15,117,19],[133,18,117,22,"x_3"],[133,21,117,25],[133,24,117,28,"z_3"],[133,27,117,31],[134,8,118,12],[134,14,118,18,"DA"],[134,16,118,20],[134,19,118,23,"modP"],[134,23,118,27],[134,24,118,28,"D"],[134,25,118,29],[134,28,118,32,"A"],[134,29,118,33],[134,30,118,34],[135,8,119,12],[135,14,119,18,"CB"],[135,16,119,20],[135,19,119,23,"modP"],[135,23,119,27],[135,24,119,28,"C"],[135,25,119,29],[135,28,119,32,"B"],[135,29,119,33],[135,30,119,34],[136,8,120,12],[136,14,120,18,"dacb"],[136,18,120,22],[136,21,120,25,"DA"],[136,23,120,27],[136,26,120,30,"CB"],[136,28,120,32],[137,8,121,12],[137,14,121,18,"da_cb"],[137,19,121,23],[137,22,121,26,"DA"],[137,24,121,28],[137,27,121,31,"CB"],[137,29,121,33],[138,8,122,12,"x_3"],[138,11,122,15],[138,14,122,18,"modP"],[138,18,122,22],[138,19,122,23,"dacb"],[138,23,122,27],[138,26,122,30,"dacb"],[138,30,122,34],[138,31,122,35],[139,8,123,12,"z_3"],[139,11,123,15],[139,14,123,18,"modP"],[139,18,123,22],[139,19,123,23,"x_1"],[139,22,123,26],[139,25,123,29,"modP"],[139,29,123,33],[139,30,123,34,"da_cb"],[139,35,123,39],[139,38,123,42,"da_cb"],[139,43,123,47],[139,44,123,48],[139,45,123,49],[140,8,124,12,"x_2"],[140,11,124,15],[140,14,124,18,"modP"],[140,18,124,22],[140,19,124,23,"AA"],[140,21,124,25],[140,24,124,28,"BB"],[140,26,124,30],[140,27,124,31],[141,8,125,12,"z_2"],[141,11,125,15],[141,14,125,18,"modP"],[141,18,125,22],[141,19,125,23,"E"],[141,20,125,24],[141,24,125,28,"AA"],[141,26,125,30],[141,29,125,33,"modP"],[141,33,125,37],[141,34,125,38,"a24"],[141,37,125,41],[141,40,125,44,"E"],[141,41,125,45],[141,42,125,46],[141,43,125,47],[141,44,125,48],[142,6,126,8],[143,6,127,8],[143,7,127,9],[144,8,127,11,"x_2"],[144,11,127,14],[145,8,127,16,"x_3"],[146,6,127,20],[146,7,127,21],[146,10,127,24,"cswap"],[146,15,127,29],[146,16,127,30,"swap"],[146,20,127,34],[146,22,127,36,"x_2"],[146,25,127,39],[146,27,127,41,"x_3"],[146,30,127,44],[146,31,127,45],[147,6,128,8],[147,7,128,9],[148,8,128,11,"x_2"],[148,11,128,14],[148,13,128,16,"z_2"],[148,16,128,19],[149,8,128,21,"x_3"],[149,11,128,24],[149,13,128,26,"z_3"],[150,6,128,30],[150,7,128,31],[150,10,128,34,"cswap"],[150,15,128,39],[150,16,128,40,"swap"],[150,20,128,44],[150,22,128,46,"z_2"],[150,25,128,49],[150,27,128,51,"z_3"],[150,30,128,54],[150,31,128,55],[151,6,129,8],[151,12,129,14,"z2"],[151,14,129,16],[151,17,129,19,"powPminus2"],[151,27,129,29],[151,28,129,30,"z_2"],[151,31,129,33],[151,32,129,34],[151,33,129,35],[151,34,129,36],[152,6,130,8],[152,13,130,15,"modP"],[152,17,130,19],[152,18,130,20,"x_2"],[152,21,130,23],[152,24,130,26,"z2"],[152,26,130,28],[152,27,130,29],[152,28,130,30],[152,29,130,31],[153,4,131,4],[154,4,132,4],[154,10,132,10,"lengths"],[154,17,132,17],[154,20,132,20],[155,6,133,8,"secretKey"],[155,15,133,17],[155,17,133,19,"fieldLen"],[155,25,133,27],[156,6,134,8,"publicKey"],[156,15,134,17],[156,17,134,19,"fieldLen"],[156,25,134,27],[157,6,135,8,"seed"],[157,10,135,12],[157,12,135,14,"fieldLen"],[158,4,136,4],[158,5,136,5],[159,4,137,4],[159,10,137,10,"randomSecretKey"],[159,25,137,25],[159,28,137,28,"randomSecretKey"],[159,29,137,29,"seed"],[159,33,137,33],[159,36,137,36,"randomBytes_"],[159,48,137,48],[159,49,137,49,"fieldLen"],[159,57,137,57],[159,58,137,58],[159,63,137,63],[160,6,138,8],[160,7,138,9],[160,8,138,10],[160,10,138,12,"utils_ts_1"],[160,20,138,22],[160,21,138,23,"abytes"],[160,27,138,29],[160,29,138,31,"seed"],[160,33,138,35],[160,35,138,37,"lengths"],[160,42,138,44],[160,43,138,45,"seed"],[160,47,138,49],[160,48,138,50],[161,6,139,8],[161,13,139,15,"seed"],[161,17,139,19],[162,4,140,4],[162,5,140,5],[163,4,141,4],[163,13,141,13,"keygen"],[163,19,141,19,"keygen"],[163,20,141,20,"seed"],[163,24,141,24],[163,26,141,26],[164,6,142,8],[164,12,142,14,"secretKey"],[164,21,142,23],[164,24,142,26,"randomSecretKey"],[164,39,142,41],[164,40,142,42,"seed"],[164,44,142,46],[164,45,142,47],[165,6,143,8],[165,13,143,15],[166,8,143,17,"secretKey"],[166,17,143,26],[167,8,143,28,"publicKey"],[167,17,143,37],[167,19,143,39,"scalarMultBase"],[167,33,143,53],[167,34,143,54,"secretKey"],[167,43,143,63],[168,6,143,65],[168,7,143,66],[169,4,144,4],[170,4,145,4],[170,10,145,10,"utils"],[170,15,145,15],[170,18,145,18],[171,6,146,8,"randomSecretKey"],[171,21,146,23],[172,6,147,8,"randomPrivateKey"],[172,22,147,24],[172,24,147,26,"randomSecretKey"],[173,4,148,4],[173,5,148,5],[174,4,149,4],[174,11,149,11],[175,6,150,8,"keygen"],[175,12,150,14],[176,6,151,8,"getSharedSecret"],[176,21,151,23],[176,23,151,25,"getSharedSecret"],[176,24,151,26,"secretKey"],[176,33,151,35],[176,35,151,37,"publicKey"],[176,44,151,46],[176,49,151,51,"scalarMult"],[176,59,151,61],[176,60,151,62,"secretKey"],[176,69,151,71],[176,71,151,73,"publicKey"],[176,80,151,82],[176,81,151,83],[177,6,152,8,"getPublicKey"],[177,18,152,20],[177,20,152,23,"secretKey"],[177,29,152,32],[177,33,152,37,"scalarMultBase"],[177,47,152,51],[177,48,152,52,"secretKey"],[177,57,152,61],[177,58,152,62],[178,6,153,8,"scalarMult"],[178,16,153,18],[179,6,154,8,"scalarMultBase"],[179,20,154,22],[180,6,155,8,"utils"],[180,11,155,13],[181,6,156,8,"GuBytes"],[181,13,156,15],[181,15,156,17,"GuBytes"],[181,22,156,24],[181,23,156,25,"slice"],[181,28,156,30],[181,29,156,31],[181,30,156,32],[182,6,157,8,"lengths"],[183,4,158,4],[183,5,158,5],[184,2,159,0],[185,0,159,1],[185,3]],"functionMap":{"names":["<global>","validateOpts","montgomery","modP","encodeU","decodeU","decodeScalar","scalarMult","scalarMultBase","cswap","montgomeryLadder","randomSecretKey","keygen","getSharedSecret","getPublicKey"],"mappings":"AAA;ACe;CDM;AEC;iBCuB,kCD;IEE;KFE;IGC;KHW;IIC;KJE;IKC;KLQ;IME;KNE;IOE;KPQ;IQO;KRoC;4BSM;KTG;IUC;KVG;yBWO,0DX;sBYC,wCZ;CFO"}},"type":"js/module"}]}