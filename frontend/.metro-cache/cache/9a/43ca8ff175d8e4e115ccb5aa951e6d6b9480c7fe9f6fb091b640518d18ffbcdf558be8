{"dependencies":[{"name":"@noble/hashes/hmac.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":28,"column":0,"index":1364},"end":{"line":28,"column":58,"index":1422}}],"key":"zrcZB+Sgo3pEkBACwC1WobN28cY=","exportNames":["*"]}},{"name":"@noble/hashes/utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":29,"column":0,"index":1423},"end":{"line":29,"column":44,"index":1467}}],"key":"LflodCmyx6TWSmik3zLzLt/zP8k=","exportNames":["*"]}},{"name":"../utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":30,"column":0,"index":1468},"end":{"line":30,"column":275,"index":1743}}],"key":"dGswK136diHRCgUa8xpQUn/UMbc=","exportNames":["*"]}},{"name":"./curve.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":31,"column":0,"index":1744},"end":{"line":31,"column":103,"index":1847}}],"key":"NKqfgvbal9a/XOV6fa5X4e5VYms=","exportNames":["*"]}},{"name":"./modular.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":32,"column":0,"index":1848},"end":{"line":32,"column":111,"index":1959}}],"key":"9k+FDNYf3zXm2KDVSy5nBT9psY4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DERErr = exports.DER = void 0;\n  exports.SWUFpSqrtRatio = SWUFpSqrtRatio;\n  exports._legacyHelperEquat = _legacyHelperEquat;\n  exports._normFnElement = _normFnElement;\n  exports._splitEndoScalar = _splitEndoScalar;\n  exports.ecdh = ecdh;\n  exports.ecdsa = ecdsa;\n  exports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;\n  exports.weierstrass = weierstrass;\n  exports.weierstrassN = weierstrassN;\n  exports.weierstrassPoints = weierstrassPoints;\n  var _hmac = require(_dependencyMap[0], \"@noble/hashes/hmac.js\");\n  var _utils = require(_dependencyMap[1], \"@noble/hashes/utils\");\n  var _utils2 = require(_dependencyMap[2], \"../utils.js\");\n  var _curve = require(_dependencyMap[3], \"./curve.js\");\n  var _modular = require(_dependencyMap[4], \"./modular.js\");\n  /**\n   * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n   *\n   * ### Design rationale for types\n   *\n   * * Interaction between classes from different curves should fail:\n   *   `k256.Point.BASE.add(p256.Point.BASE)`\n   * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n   * * Different calls of `curve()` would return different classes -\n   *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n   *   it won't affect others\n   *\n   * TypeScript can't infer types for classes created inside a function. Classes is one instance\n   * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n   * unique type for every function call.\n   *\n   * We can use generic types via some param, like curve opts, but that would:\n   *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n   *     which is hard to debug.\n   *     2. Params can be generic and we can't enforce them to be constant value:\n   *     if somebody creates curve from non-constant params,\n   *     it would be allowed to interact with other curves with non-constant params\n   *\n   * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n  // We construct basis in such way that den is always positive and equals n, but num sign depends on basis (not on secret value)\n  const divNearest = (num, den) => (num + (num >= 0 ? den : -den) / _2n) / den;\n  /**\n   * Splits scalar for GLV endomorphism.\n   */\n  function _splitEndoScalar(k, basis, n) {\n    // Split scalar into two such that part is ~half bits: `abs(part) < sqrt(N)`\n    // Since part can be negative, we need to do this on point.\n    // TODO: verifyScalar function which consumes lambda\n    const [[a1, b1], [a2, b2]] = basis;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    // |k1|/|k2| is < sqrt(N), but can be negative.\n    // If we do `k1 mod N`, we'll get big scalar (`> sqrt(N)`): so, we do cheaper negation instead.\n    let k1 = k - c1 * a1 - c2 * a2;\n    let k2 = -c1 * b1 - c2 * b2;\n    const k1neg = k1 < _0n;\n    const k2neg = k2 < _0n;\n    if (k1neg) k1 = -k1;\n    if (k2neg) k2 = -k2;\n    // Double check that resulting scalar less than half bits of N: otherwise wNAF will fail.\n    // This should only happen on wrong basises. Also, math inside is too complex and I don't trust it.\n    const MAX_NUM = (0, _utils2.bitMask)(Math.ceil((0, _utils2.bitLen)(n) / 2)) + _1n; // Half bits of N\n    if (k1 < _0n || k1 >= MAX_NUM || k2 < _0n || k2 >= MAX_NUM) {\n      throw new Error('splitScalar (endomorphism): failed, k=' + k);\n    }\n    return {\n      k1neg,\n      k1,\n      k2neg,\n      k2\n    };\n  }\n  function validateSigFormat(format) {\n    if (!['compact', 'recovered', 'der'].includes(format)) throw new Error('Signature format must be \"compact\", \"recovered\", or \"der\"');\n    return format;\n  }\n  function validateSigOpts(opts, def) {\n    const optsn = {};\n    for (let optName of Object.keys(def)) {\n      // @ts-ignore\n      optsn[optName] = opts[optName] === undefined ? def[optName] : opts[optName];\n    }\n    (0, _utils2._abool2)(optsn.lowS, 'lowS');\n    (0, _utils2._abool2)(optsn.prehash, 'prehash');\n    if (optsn.format !== undefined) validateSigFormat(optsn.format);\n    return optsn;\n  }\n  class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  }\n  /**\n   * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n   *\n   *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n   *\n   * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n   */\n  exports.DERErr = DERErr;\n  const DER = exports.DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n      encode: (tag, data) => {\n        const {\n          Err: E\n        } = DER;\n        if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n        if (data.length & 1) throw new E('tlv.encode: unpadded data');\n        const dataLen = data.length / 2;\n        const len = (0, _utils2.numberToHexUnpadded)(dataLen);\n        if (len.length / 2 & 128) throw new E('tlv.encode: long form length too big');\n        // length of length with long form flag\n        const lenLen = dataLen > 127 ? (0, _utils2.numberToHexUnpadded)(len.length / 2 | 128) : '';\n        const t = (0, _utils2.numberToHexUnpadded)(tag);\n        return t + lenLen + len + data;\n      },\n      // v - value, l - left bytes (unparsed)\n      decode(tag, data) {\n        const {\n          Err: E\n        } = DER;\n        let pos = 0;\n        if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n        if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n        const first = data[pos++];\n        const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n        let length = 0;\n        if (!isLong) length = first;else {\n          // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n          const lenLen = first & 127;\n          if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n          if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n          const lengthBytes = data.subarray(pos, pos + lenLen);\n          if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n          if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n          for (const b of lengthBytes) length = length << 8 | b;\n          pos += lenLen;\n          if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n        }\n        const v = data.subarray(pos, pos + length);\n        if (v.length !== length) throw new E('tlv.decode: wrong value length');\n        return {\n          v,\n          l: data.subarray(pos + length)\n        };\n      }\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n      encode(num) {\n        const {\n          Err: E\n        } = DER;\n        if (num < _0n) throw new E('integer: negative integers are not allowed');\n        let hex = (0, _utils2.numberToHexUnpadded)(num);\n        // Pad with zero byte if negative flag is present\n        if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n        if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n        return hex;\n      },\n      decode(data) {\n        const {\n          Err: E\n        } = DER;\n        if (data[0] & 128) throw new E('invalid signature integer: negative');\n        if (data[0] === 0x00 && !(data[1] & 128)) throw new E('invalid signature integer: unnecessary leading zero');\n        return (0, _utils2.bytesToNumberBE)(data);\n      }\n    },\n    toSig(hex) {\n      // parse DER signature\n      const {\n        Err: E,\n        _int: int,\n        _tlv: tlv\n      } = DER;\n      const data = (0, _utils2.ensureBytes)('signature', hex);\n      const {\n        v: seqBytes,\n        l: seqLeftBytes\n      } = tlv.decode(0x30, data);\n      if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n      const {\n        v: rBytes,\n        l: rLeftBytes\n      } = tlv.decode(0x02, seqBytes);\n      const {\n        v: sBytes,\n        l: sLeftBytes\n      } = tlv.decode(0x02, rLeftBytes);\n      if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n      return {\n        r: int.decode(rBytes),\n        s: int.decode(sBytes)\n      };\n    },\n    hexFromSig(sig) {\n      const {\n        _tlv: tlv,\n        _int: int\n      } = DER;\n      const rs = tlv.encode(0x02, int.encode(sig.r));\n      const ss = tlv.encode(0x02, int.encode(sig.s));\n      const seq = rs + ss;\n      return tlv.encode(0x30, seq);\n    }\n  };\n  // Be friendly to bad ECMAScript parsers by not using bigint literals\n  // prettier-ignore\n  const _0n = BigInt(0),\n    _1n = BigInt(1),\n    _2n = BigInt(2),\n    _3n = BigInt(3),\n    _4n = BigInt(4);\n  function _normFnElement(Fn, key) {\n    const {\n      BYTES: expected\n    } = Fn;\n    let num;\n    if (typeof key === 'bigint') {\n      num = key;\n    } else {\n      let bytes = (0, _utils2.ensureBytes)('private key', key);\n      try {\n        num = Fn.fromBytes(bytes);\n      } catch (error) {\n        throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);\n      }\n    }\n    if (!Fn.isValidNot0(num)) throw new Error('invalid private key: out of range [1..N-1]');\n    return num;\n  }\n  /**\n   * Creates weierstrass Point constructor, based on specified curve options.\n   *\n   * @example\n  ```js\n  const opts = {\n    p: BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'),\n    n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n    h: BigInt(1),\n    a: BigInt('0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc'),\n    b: BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b'),\n    Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n    Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n  };\n  const p256_Point = weierstrass(opts);\n  ```\n   */\n  function weierstrassN(params, extraOpts = {}) {\n    const validated = (0, _curve._createCurveFields)('weierstrass', params, extraOpts);\n    const {\n      Fp,\n      Fn\n    } = validated;\n    let CURVE = validated.CURVE;\n    const {\n      h: cofactor,\n      n: CURVE_ORDER\n    } = CURVE;\n    (0, _utils2._validateObject)(extraOpts, {}, {\n      allowInfinityPoint: 'boolean',\n      clearCofactor: 'function',\n      isTorsionFree: 'function',\n      fromBytes: 'function',\n      toBytes: 'function',\n      endo: 'object',\n      wrapPrivateKey: 'boolean'\n    });\n    const {\n      endo\n    } = extraOpts;\n    if (endo) {\n      // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\n      if (!Fp.is0(CURVE.a) || typeof endo.beta !== 'bigint' || !Array.isArray(endo.basises)) {\n        throw new Error('invalid endo: expected \"beta\": bigint and \"basises\": array');\n      }\n    }\n    const lengths = getWLengths(Fp, Fn);\n    function assertCompressionIsSupported() {\n      if (!Fp.isOdd) throw new Error('compression is not supported: Field does not have .isOdd()');\n    }\n    // Implements IEEE P1363 point encoding\n    function pointToBytes(_c, point, isCompressed) {\n      const {\n        x,\n        y\n      } = point.toAffine();\n      const bx = Fp.toBytes(x);\n      (0, _utils2._abool2)(isCompressed, 'isCompressed');\n      if (isCompressed) {\n        assertCompressionIsSupported();\n        const hasEvenY = !Fp.isOdd(y);\n        return (0, _utils2.concatBytes)(pprefix(hasEvenY), bx);\n      } else {\n        return (0, _utils2.concatBytes)(Uint8Array.of(0x04), bx, Fp.toBytes(y));\n      }\n    }\n    function pointFromBytes(bytes) {\n      (0, _utils2._abytes2)(bytes, undefined, 'Point');\n      const {\n        publicKey: comp,\n        publicKeyUncompressed: uncomp\n      } = lengths; // e.g. for 32-byte: 33, 65\n      const length = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // No actual validation is done here: use .assertValidity()\n      if (length === comp && (head === 0x02 || head === 0x03)) {\n        const x = Fp.fromBytes(tail);\n        if (!Fp.isValid(x)) throw new Error('bad point: is not on curve, wrong x');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('bad point: is not on curve, sqrt error' + err);\n        }\n        assertCompressionIsSupported();\n        const isYOdd = Fp.isOdd(y); // (y & _1n) === _1n;\n        const isHeadOdd = (head & 1) === 1; // ECDSA-specific\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return {\n          x,\n          y\n        };\n      } else if (length === uncomp && head === 0x04) {\n        // TODO: more checks\n        const L = Fp.BYTES;\n        const x = Fp.fromBytes(tail.subarray(0, L));\n        const y = Fp.fromBytes(tail.subarray(L, L * 2));\n        if (!isValidXY(x, y)) throw new Error('bad point: is not on curve');\n        return {\n          x,\n          y\n        };\n      } else {\n        throw new Error(`bad point: got length ${length}, expected compressed=${comp} or uncompressed=${uncomp}`);\n      }\n    }\n    const encodePoint = extraOpts.toBytes || pointToBytes;\n    const decodePoint = extraOpts.fromBytes || pointFromBytes;\n    function weierstrassEquation(x) {\n      const x2 = Fp.sqr(x); // x * x\n      const x3 = Fp.mul(x2, x); // x² * x\n      return Fp.add(Fp.add(x3, Fp.mul(x, CURVE.a)), CURVE.b); // x³ + a * x + b\n    }\n    // TODO: move top-level\n    /** Checks whether equation holds for given x, y: y² == x³ + ax + b */\n    function isValidXY(x, y) {\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      return Fp.eql(left, right);\n    }\n    // Validate whether the passed curve params are valid.\n    // Test 1: equation y² = x³ + ax + b should work for generator point.\n    if (!isValidXY(CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\n    // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n    // Guarantees curve is genus-1, smooth (non-singular).\n    const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n    const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n    if (Fp.is0(Fp.add(_4a3, _27b2))) throw new Error('bad curve params: a or b');\n    /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\n    function acoord(title, n, banZero = false) {\n      if (!Fp.isValid(n) || banZero && Fp.is0(n)) throw new Error(`bad point coordinate ${title}`);\n      return n;\n    }\n    function aprjpoint(other) {\n      if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n    }\n    function splitEndoScalarN(k) {\n      if (!endo || !endo.basises) throw new Error('no endo');\n      return _splitEndoScalar(k, endo.basises, Fn.ORDER);\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n    const toAffineMemo = (0, _utils2.memoized)((p, iz) => {\n      const {\n        X,\n        Y,\n        Z\n      } = p;\n      // Fast-path for normalized points\n      if (Fp.eql(Z, Fp.ONE)) return {\n        x: X,\n        y: Y\n      };\n      const is0 = p.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(Z);\n      const x = Fp.mul(X, iz);\n      const y = Fp.mul(Y, iz);\n      const zz = Fp.mul(Z, iz);\n      if (is0) return {\n        x: Fp.ZERO,\n        y: Fp.ZERO\n      };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return {\n        x,\n        y\n      };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = (0, _utils2.memoized)(p => {\n      if (p.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is invalid representation of ZERO.\n        if (extraOpts.allowInfinityPoint && !Fp.is0(p.Y)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const {\n        x,\n        y\n      } = p.toAffine();\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not field elements');\n      if (!isValidXY(x, y)) throw new Error('bad point: equation left != right');\n      if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n      return true;\n    });\n    function finishEndo(endoBeta, k1p, k2p, k1neg, k2neg) {\n      k2p = new Point(Fp.mul(k2p.X, endoBeta), k2p.Y, k2p.Z);\n      k1p = (0, _curve.negateCt)(k1neg, k1p);\n      k2p = (0, _curve.negateCt)(k2neg, k2p);\n      return k1p.add(k2p);\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) ∋ (x=X/Z, y=Y/Z).\n     * Default Point works in 2d / affine coordinates: (x, y).\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n      /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n      constructor(X, Y, Z) {\n        this.X = acoord('x', X);\n        this.Y = acoord('y', Y, true);\n        this.Z = acoord('z', Z);\n        Object.freeze(this);\n      }\n      static CURVE() {\n        return CURVE;\n      }\n      /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n      static fromAffine(p) {\n        const {\n          x,\n          y\n        } = p || {};\n        if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n        if (p instanceof Point) throw new Error('projective point not allowed');\n        // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\n        if (Fp.is0(x) && Fp.is0(y)) return Point.ZERO;\n        return new Point(x, y, Fp.ONE);\n      }\n      static fromBytes(bytes) {\n        const P = Point.fromAffine(decodePoint((0, _utils2._abytes2)(bytes, undefined, 'point')));\n        P.assertValidity();\n        return P;\n      }\n      static fromHex(hex) {\n        return Point.fromBytes((0, _utils2.ensureBytes)('pointHex', hex));\n      }\n      get x() {\n        return this.toAffine().x;\n      }\n      get y() {\n        return this.toAffine().y;\n      }\n      /**\n       *\n       * @param windowSize\n       * @param isLazy true will defer table computation until the first multiplication\n       * @returns\n       */\n      precompute(windowSize = 8, isLazy = true) {\n        wnaf.createCache(this, windowSize);\n        if (!isLazy) this.multiply(_3n); // random number\n        return this;\n      }\n      // TODO: return `this`\n      /** A point on curve is valid if it conforms to equation. */\n      assertValidity() {\n        assertValidMemo(this);\n      }\n      hasEvenY() {\n        const {\n          y\n        } = this.toAffine();\n        if (!Fp.isOdd) throw new Error(\"Field doesn't support isOdd\");\n        return !Fp.isOdd(y);\n      }\n      /** Compare one point to another. */\n      equals(other) {\n        aprjpoint(other);\n        const {\n          X: X1,\n          Y: Y1,\n          Z: Z1\n        } = this;\n        const {\n          X: X2,\n          Y: Y2,\n          Z: Z2\n        } = other;\n        const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n        const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n        return U1 && U2;\n      }\n      /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n      negate() {\n        return new Point(this.X, Fp.neg(this.Y), this.Z);\n      }\n      // Renes-Costello-Batina exception-free doubling formula.\n      // There is 30% faster Jacobian formula, but it is not complete.\n      // https://eprint.iacr.org/2015/1060, algorithm 3\n      // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n      double() {\n        const {\n          a,\n          b\n        } = CURVE;\n        const b3 = Fp.mul(b, _3n);\n        const {\n          X: X1,\n          Y: Y1,\n          Z: Z1\n        } = this;\n        let X3 = Fp.ZERO,\n          Y3 = Fp.ZERO,\n          Z3 = Fp.ZERO; // prettier-ignore\n        let t0 = Fp.mul(X1, X1); // step 1\n        let t1 = Fp.mul(Y1, Y1);\n        let t2 = Fp.mul(Z1, Z1);\n        let t3 = Fp.mul(X1, Y1);\n        t3 = Fp.add(t3, t3); // step 5\n        Z3 = Fp.mul(X1, Z1);\n        Z3 = Fp.add(Z3, Z3);\n        X3 = Fp.mul(a, Z3);\n        Y3 = Fp.mul(b3, t2);\n        Y3 = Fp.add(X3, Y3); // step 10\n        X3 = Fp.sub(t1, Y3);\n        Y3 = Fp.add(t1, Y3);\n        Y3 = Fp.mul(X3, Y3);\n        X3 = Fp.mul(t3, X3);\n        Z3 = Fp.mul(b3, Z3); // step 15\n        t2 = Fp.mul(a, t2);\n        t3 = Fp.sub(t0, t2);\n        t3 = Fp.mul(a, t3);\n        t3 = Fp.add(t3, Z3);\n        Z3 = Fp.add(t0, t0); // step 20\n        t0 = Fp.add(Z3, t0);\n        t0 = Fp.add(t0, t2);\n        t0 = Fp.mul(t0, t3);\n        Y3 = Fp.add(Y3, t0);\n        t2 = Fp.mul(Y1, Z1); // step 25\n        t2 = Fp.add(t2, t2);\n        t0 = Fp.mul(t2, t3);\n        X3 = Fp.sub(X3, t0);\n        Z3 = Fp.mul(t2, t1);\n        Z3 = Fp.add(Z3, Z3); // step 30\n        Z3 = Fp.add(Z3, Z3);\n        return new Point(X3, Y3, Z3);\n      }\n      // Renes-Costello-Batina exception-free addition formula.\n      // There is 30% faster Jacobian formula, but it is not complete.\n      // https://eprint.iacr.org/2015/1060, algorithm 1\n      // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n      add(other) {\n        aprjpoint(other);\n        const {\n          X: X1,\n          Y: Y1,\n          Z: Z1\n        } = this;\n        const {\n          X: X2,\n          Y: Y2,\n          Z: Z2\n        } = other;\n        let X3 = Fp.ZERO,\n          Y3 = Fp.ZERO,\n          Z3 = Fp.ZERO; // prettier-ignore\n        const a = CURVE.a;\n        const b3 = Fp.mul(CURVE.b, _3n);\n        let t0 = Fp.mul(X1, X2); // step 1\n        let t1 = Fp.mul(Y1, Y2);\n        let t2 = Fp.mul(Z1, Z2);\n        let t3 = Fp.add(X1, Y1);\n        let t4 = Fp.add(X2, Y2); // step 5\n        t3 = Fp.mul(t3, t4);\n        t4 = Fp.add(t0, t1);\n        t3 = Fp.sub(t3, t4);\n        t4 = Fp.add(X1, Z1);\n        let t5 = Fp.add(X2, Z2); // step 10\n        t4 = Fp.mul(t4, t5);\n        t5 = Fp.add(t0, t2);\n        t4 = Fp.sub(t4, t5);\n        t5 = Fp.add(Y1, Z1);\n        X3 = Fp.add(Y2, Z2); // step 15\n        t5 = Fp.mul(t5, X3);\n        X3 = Fp.add(t1, t2);\n        t5 = Fp.sub(t5, X3);\n        Z3 = Fp.mul(a, t4);\n        X3 = Fp.mul(b3, t2); // step 20\n        Z3 = Fp.add(X3, Z3);\n        X3 = Fp.sub(t1, Z3);\n        Z3 = Fp.add(t1, Z3);\n        Y3 = Fp.mul(X3, Z3);\n        t1 = Fp.add(t0, t0); // step 25\n        t1 = Fp.add(t1, t0);\n        t2 = Fp.mul(a, t2);\n        t4 = Fp.mul(b3, t4);\n        t1 = Fp.add(t1, t2);\n        t2 = Fp.sub(t0, t2); // step 30\n        t2 = Fp.mul(a, t2);\n        t4 = Fp.add(t4, t2);\n        t0 = Fp.mul(t1, t4);\n        Y3 = Fp.add(Y3, t0);\n        t0 = Fp.mul(t5, t4); // step 35\n        X3 = Fp.mul(t3, X3);\n        X3 = Fp.sub(X3, t0);\n        t0 = Fp.mul(t3, t1);\n        Z3 = Fp.mul(t5, Z3);\n        Z3 = Fp.add(Z3, t0); // step 40\n        return new Point(X3, Y3, Z3);\n      }\n      subtract(other) {\n        return this.add(other.negate());\n      }\n      is0() {\n        return this.equals(Point.ZERO);\n      }\n      /**\n       * Constant time multiplication.\n       * Uses wNAF method. Windowed method may be 10% faster,\n       * but takes 2x longer to generate and consumes 2x memory.\n       * Uses precomputes when available.\n       * Uses endomorphism for Koblitz curves.\n       * @param scalar by which the point would be multiplied\n       * @returns New point\n       */\n      multiply(scalar) {\n        const {\n          endo\n        } = extraOpts;\n        if (!Fn.isValidNot0(scalar)) throw new Error('invalid scalar: out of range'); // 0 is invalid\n        let point, fake; // Fake point is used to const-time mult\n        const mul = n => wnaf.cached(this, n, p => (0, _curve.normalizeZ)(Point, p));\n        /** See docs for {@link EndomorphismOpts} */\n        if (endo) {\n          const {\n            k1neg,\n            k1,\n            k2neg,\n            k2\n          } = splitEndoScalarN(scalar);\n          const {\n            p: k1p,\n            f: k1f\n          } = mul(k1);\n          const {\n            p: k2p,\n            f: k2f\n          } = mul(k2);\n          fake = k1f.add(k2f);\n          point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\n        } else {\n          const {\n            p,\n            f\n          } = mul(scalar);\n          point = p;\n          fake = f;\n        }\n        // Normalize `z` for both points, but return only real one\n        return (0, _curve.normalizeZ)(Point, [point, fake])[0];\n      }\n      /**\n       * Non-constant-time multiplication. Uses double-and-add algorithm.\n       * It's faster, but should only be used when you don't care about\n       * an exposed secret key e.g. sig verification, which works over *public* keys.\n       */\n      multiplyUnsafe(sc) {\n        const {\n          endo\n        } = extraOpts;\n        const p = this;\n        if (!Fn.isValid(sc)) throw new Error('invalid scalar: out of range'); // 0 is valid\n        if (sc === _0n || p.is0()) return Point.ZERO;\n        if (sc === _1n) return p; // fast-path\n        if (wnaf.hasCache(this)) return this.multiply(sc);\n        if (endo) {\n          const {\n            k1neg,\n            k1,\n            k2neg,\n            k2\n          } = splitEndoScalarN(sc);\n          const {\n            p1,\n            p2\n          } = (0, _curve.mulEndoUnsafe)(Point, p, k1, k2); // 30% faster vs wnaf.unsafe\n          return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\n        } else {\n          return wnaf.unsafe(p, sc);\n        }\n      }\n      multiplyAndAddUnsafe(Q, a, b) {\n        const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\n        return sum.is0() ? undefined : sum;\n      }\n      /**\n       * Converts Projective point to affine (x, y) coordinates.\n       * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n       */\n      toAffine(invertedZ) {\n        return toAffineMemo(this, invertedZ);\n      }\n      /**\n       * Checks whether Point is free of torsion elements (is in prime subgroup).\n       * Always torsion-free for cofactor=1 curves.\n       */\n      isTorsionFree() {\n        const {\n          isTorsionFree\n        } = extraOpts;\n        if (cofactor === _1n) return true;\n        if (isTorsionFree) return isTorsionFree(Point, this);\n        return wnaf.unsafe(this, CURVE_ORDER).is0();\n      }\n      clearCofactor() {\n        const {\n          clearCofactor\n        } = extraOpts;\n        if (cofactor === _1n) return this; // Fast-path\n        if (clearCofactor) return clearCofactor(Point, this);\n        return this.multiplyUnsafe(cofactor);\n      }\n      isSmallOrder() {\n        // can we use this.clearCofactor()?\n        return this.multiplyUnsafe(cofactor).is0();\n      }\n      toBytes(isCompressed = true) {\n        (0, _utils2._abool2)(isCompressed, 'isCompressed');\n        this.assertValidity();\n        return encodePoint(Point, this, isCompressed);\n      }\n      toHex(isCompressed = true) {\n        return (0, _utils2.bytesToHex)(this.toBytes(isCompressed));\n      }\n      toString() {\n        return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n      }\n      // TODO: remove\n      get px() {\n        return this.X;\n      }\n      get py() {\n        return this.X;\n      }\n      get pz() {\n        return this.Z;\n      }\n      toRawBytes(isCompressed = true) {\n        return this.toBytes(isCompressed);\n      }\n      _setWindowSize(windowSize) {\n        this.precompute(windowSize);\n      }\n      static normalizeZ(points) {\n        return (0, _curve.normalizeZ)(Point, points);\n      }\n      static msm(points, scalars) {\n        return (0, _curve.pippenger)(Point, Fn, points, scalars);\n      }\n      static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(_normFnElement(Fn, privateKey));\n      }\n    }\n    // base / generator point\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    // math field\n    Point.Fp = Fp;\n    // scalar field\n    Point.Fn = Fn;\n    const bits = Fn.BITS;\n    const wnaf = new _curve.wNAF(Point, extraOpts.endo ? Math.ceil(bits / 2) : bits);\n    Point.BASE.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    return Point;\n  }\n  // Points start with byte 0x02 when y is even; otherwise 0x03\n  function pprefix(hasEvenY) {\n    return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\n  }\n  /**\n   * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n   * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n   * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n   * b = False and y = sqrt(Z * (u / v)) otherwise.\n   * @param Fp\n   * @param Z\n   * @returns\n   */\n  function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n      let tv1 = c6; // 1. tv1 = c6\n      let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n      let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n      tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n      let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n      tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n      tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n      tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n      tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n      let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n      tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n      let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n      tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n      tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n      tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n      // 17. for i in (c1, c1 - 1, ..., 2):\n      for (let i = c1; i > _1n; i--) {\n        let tv5 = i - _2n; // 18.    tv5 = i - 2\n        tv5 = _2n << tv5 - _1n; // 19.    tv5 = 2^tv5\n        let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n        const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n        tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n        tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n        tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n        tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n      }\n      return {\n        isValid: isQR,\n        value: tv3\n      };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n      // sqrt_ratio_3mod4(u, v)\n      const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n      const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n      sqrtRatio = (u, v) => {\n        let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n        const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n        tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n        let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n        y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n        const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n        const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n        const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n        let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n        return {\n          isValid: isQR,\n          value: y\n        }; // 11. return (isQR, y) isQR ? y : y*c2\n      };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n  }\n  /**\n   * Simplified Shallue-van de Woestijne-Ulas Method\n   * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n   */\n  function mapToCurveSimpleSWU(Fp, opts) {\n    (0, _modular.validateField)(Fp);\n    const {\n      A,\n      B,\n      Z\n    } = opts;\n    if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z)) throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\n    if (!Fp.isOdd) throw new Error('Field does not have .isOdd()');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return u => {\n      // prettier-ignore\n      let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n      tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n      tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\n      tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n      tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n      tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n      tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\n      tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n      tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\n      tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n      tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n      tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\n      tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n      tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n      tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n      tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\n      tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n      x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n      const {\n        isValid,\n        value\n      } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n      y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n      y = Fp.mul(y, value); // 20.   y = y * y1\n      x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n      y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n      const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n      y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n      const tv4_inv = (0, _modular.FpInvertBatch)(Fp, [tv4], true)[0];\n      x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n      return {\n        x,\n        y\n      };\n    };\n  }\n  function getWLengths(Fp, Fn) {\n    return {\n      secretKey: Fn.BYTES,\n      publicKey: 1 + Fp.BYTES,\n      publicKeyUncompressed: 1 + 2 * Fp.BYTES,\n      publicKeyHasPrefix: true,\n      signature: 2 * Fn.BYTES\n    };\n  }\n  /**\n   * Sometimes users only need getPublicKey, getSharedSecret, and secret key handling.\n   * This helper ensures no signature functionality is present. Less code, smaller bundle size.\n   */\n  function ecdh(Point, ecdhOpts = {}) {\n    const {\n      Fn\n    } = Point;\n    const randomBytes_ = ecdhOpts.randomBytes || _utils2.randomBytes;\n    const lengths = Object.assign(getWLengths(Point.Fp, Fn), {\n      seed: (0, _modular.getMinHashLength)(Fn.ORDER)\n    });\n    function isValidSecretKey(secretKey) {\n      try {\n        return !!_normFnElement(Fn, secretKey);\n      } catch (error) {\n        return false;\n      }\n    }\n    function isValidPublicKey(publicKey, isCompressed) {\n      const {\n        publicKey: comp,\n        publicKeyUncompressed\n      } = lengths;\n      try {\n        const l = publicKey.length;\n        if (isCompressed === true && l !== comp) return false;\n        if (isCompressed === false && l !== publicKeyUncompressed) return false;\n        return !!Point.fromBytes(publicKey);\n      } catch (error) {\n        return false;\n      }\n    }\n    /**\n     * Produces cryptographically secure secret key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    function randomSecretKey(seed = randomBytes_(lengths.seed)) {\n      return (0, _modular.mapHashToField)((0, _utils2._abytes2)(seed, lengths.seed, 'seed'), Fn.ORDER);\n    }\n    /**\n     * Computes public key for a secret key. Checks for validity of the secret key.\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(secretKey, isCompressed = true) {\n      return Point.BASE.multiply(_normFnElement(Fn, secretKey)).toBytes(isCompressed);\n    }\n    function keygen(seed) {\n      const secretKey = randomSecretKey(seed);\n      return {\n        secretKey,\n        publicKey: getPublicKey(secretKey)\n      };\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n      if (typeof item === 'bigint') return false;\n      if (item instanceof Point) return true;\n      const {\n        secretKey,\n        publicKey,\n        publicKeyUncompressed\n      } = lengths;\n      if (Fn.allowedLengths || secretKey === publicKey) return undefined;\n      const l = (0, _utils2.ensureBytes)('key', item).length;\n      return l === publicKey || l === publicKeyUncompressed;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from secret key A and public key B.\n     * Checks: 1) secret key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(secretKeyA, publicKeyB, isCompressed = true) {\n      if (isProbPub(secretKeyA) === true) throw new Error('first arg must be private key');\n      if (isProbPub(publicKeyB) === false) throw new Error('second arg must be public key');\n      const s = _normFnElement(Fn, secretKeyA);\n      const b = Point.fromHex(publicKeyB); // checks for being on-curve\n      return b.multiply(s).toBytes(isCompressed);\n    }\n    const utils = {\n      isValidSecretKey,\n      isValidPublicKey,\n      randomSecretKey,\n      // TODO: remove\n      isValidPrivateKey: isValidSecretKey,\n      randomPrivateKey: randomSecretKey,\n      normPrivateKeyToScalar: key => _normFnElement(Fn, key),\n      precompute(windowSize = 8, point = Point.BASE) {\n        return point.precompute(windowSize, false);\n      }\n    };\n    return Object.freeze({\n      getPublicKey,\n      getSharedSecret,\n      keygen,\n      Point,\n      utils,\n      lengths\n    });\n  }\n  /**\n   * Creates ECDSA signing interface for given elliptic curve `Point` and `hash` function.\n   * We need `hash` for 2 features:\n   * 1. Message prehash-ing. NOT used if `sign` / `verify` are called with `prehash: false`\n   * 2. k generation in `sign`, using HMAC-drbg(hash)\n   *\n   * ECDSAOpts are only rarely needed.\n   *\n   * @example\n   * ```js\n   * const p256_Point = weierstrass(...);\n   * const p256_sha256 = ecdsa(p256_Point, sha256);\n   * const p256_sha224 = ecdsa(p256_Point, sha224);\n   * const p256_sha224_r = ecdsa(p256_Point, sha224, { randomBytes: (length) => { ... } });\n   * ```\n   */\n  function ecdsa(Point, hash, ecdsaOpts = {}) {\n    (0, _utils.ahash)(hash);\n    (0, _utils2._validateObject)(ecdsaOpts, {}, {\n      hmac: 'function',\n      lowS: 'boolean',\n      randomBytes: 'function',\n      bits2int: 'function',\n      bits2int_modN: 'function'\n    });\n    const randomBytes = ecdsaOpts.randomBytes || _utils2.randomBytes;\n    const hmac = ecdsaOpts.hmac || ((key, ...msgs) => (0, _hmac.hmac)(hash, key, (0, _utils2.concatBytes)(...msgs)));\n    const {\n      Fp,\n      Fn\n    } = Point;\n    const {\n      ORDER: CURVE_ORDER,\n      BITS: fnBits\n    } = Fn;\n    const {\n      keygen,\n      getPublicKey,\n      getSharedSecret,\n      utils,\n      lengths\n    } = ecdh(Point, ecdsaOpts);\n    const defaultSigOpts = {\n      prehash: false,\n      lowS: typeof ecdsaOpts.lowS === 'boolean' ? ecdsaOpts.lowS : false,\n      format: undefined,\n      //'compact' as ECDSASigFormat,\n      extraEntropy: false\n    };\n    const defaultSigOpts_format = 'compact';\n    function isBiggerThanHalfOrder(number) {\n      const HALF = CURVE_ORDER >> _1n;\n      return number > HALF;\n    }\n    function validateRS(title, num) {\n      if (!Fn.isValidNot0(num)) throw new Error(`invalid signature ${title}: out of range 1..Point.Fn.ORDER`);\n      return num;\n    }\n    function validateSigLength(bytes, format) {\n      validateSigFormat(format);\n      const size = lengths.signature;\n      const sizer = format === 'compact' ? size : format === 'recovered' ? size + 1 : undefined;\n      return (0, _utils2._abytes2)(bytes, sizer, `${format} signature`);\n    }\n    /**\n     * ECDSA signature with its (r, s) properties. Supports compact, recovered & DER representations.\n     */\n    class Signature {\n      constructor(r, s, recovery) {\n        this.r = validateRS('r', r); // r in [1..N-1];\n        this.s = validateRS('s', s); // s in [1..N-1];\n        if (recovery != null) this.recovery = recovery;\n        Object.freeze(this);\n      }\n      static fromBytes(bytes, format = defaultSigOpts_format) {\n        validateSigLength(bytes, format);\n        let recid;\n        if (format === 'der') {\n          const {\n            r,\n            s\n          } = DER.toSig((0, _utils2._abytes2)(bytes));\n          return new Signature(r, s);\n        }\n        if (format === 'recovered') {\n          recid = bytes[0];\n          format = 'compact';\n          bytes = bytes.subarray(1);\n        }\n        const L = Fn.BYTES;\n        const r = bytes.subarray(0, L);\n        const s = bytes.subarray(L, L * 2);\n        return new Signature(Fn.fromBytes(r), Fn.fromBytes(s), recid);\n      }\n      static fromHex(hex, format) {\n        return this.fromBytes((0, _utils2.hexToBytes)(hex), format);\n      }\n      addRecoveryBit(recovery) {\n        return new Signature(this.r, this.s, recovery);\n      }\n      recoverPublicKey(messageHash) {\n        const FIELD_ORDER = Fp.ORDER;\n        const {\n          r,\n          s,\n          recovery: rec\n        } = this;\n        if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n        // ECDSA recovery is hard for cofactor > 1 curves.\n        // In sign, `r = q.x mod n`, and here we recover q.x from r.\n        // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\n        // However, for cofactor>1, r+n may not get q.x:\n        // r+n*i would need to be done instead where i is unknown.\n        // To easily get i, we either need to:\n        // a. increase amount of valid recid values (4, 5...); OR\n        // b. prohibit non-prime-order signatures (recid > 1).\n        const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\n        if (hasCofactor && rec > 1) throw new Error('recovery id is ambiguous for h>1 curve');\n        const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\n        if (!Fp.isValid(radj)) throw new Error('recovery id 2 or 3 invalid');\n        const x = Fp.toBytes(radj);\n        const R = Point.fromBytes((0, _utils2.concatBytes)(pprefix((rec & 1) === 0), x));\n        const ir = Fn.inv(radj); // r^-1\n        const h = bits2int_modN((0, _utils2.ensureBytes)('msgHash', messageHash)); // Truncate hash\n        const u1 = Fn.create(-h * ir); // -hr^-1\n        const u2 = Fn.create(s * ir); // sr^-1\n        // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\n        const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\n        if (Q.is0()) throw new Error('point at infinify');\n        Q.assertValidity();\n        return Q;\n      }\n      // Signatures should be low-s, to prevent malleability.\n      hasHighS() {\n        return isBiggerThanHalfOrder(this.s);\n      }\n      toBytes(format = defaultSigOpts_format) {\n        validateSigFormat(format);\n        if (format === 'der') return (0, _utils2.hexToBytes)(DER.hexFromSig(this));\n        const r = Fn.toBytes(this.r);\n        const s = Fn.toBytes(this.s);\n        if (format === 'recovered') {\n          if (this.recovery == null) throw new Error('recovery bit must be present');\n          return (0, _utils2.concatBytes)(Uint8Array.of(this.recovery), r, s);\n        }\n        return (0, _utils2.concatBytes)(r, s);\n      }\n      toHex(format) {\n        return (0, _utils2.bytesToHex)(this.toBytes(format));\n      }\n      // TODO: remove\n      assertValidity() {}\n      static fromCompact(hex) {\n        return Signature.fromBytes((0, _utils2.ensureBytes)('sig', hex), 'compact');\n      }\n      static fromDER(hex) {\n        return Signature.fromBytes((0, _utils2.ensureBytes)('sig', hex), 'der');\n      }\n      normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\n      }\n      toDERRawBytes() {\n        return this.toBytes('der');\n      }\n      toDERHex() {\n        return (0, _utils2.bytesToHex)(this.toBytes('der'));\n      }\n      toCompactRawBytes() {\n        return this.toBytes('compact');\n      }\n      toCompactHex() {\n        return (0, _utils2.bytesToHex)(this.toBytes('compact'));\n      }\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = ecdsaOpts.bits2int || function bits2int_def(bytes) {\n      // Our custom check \"just in case\", for protection against DoS\n      if (bytes.length > 8192) throw new Error('input is too large');\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = (0, _utils2.bytesToNumberBE)(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n    const bits2int_modN = ecdsaOpts.bits2int_modN || function bits2int_modN_def(bytes) {\n      return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n    // Pads output with zero as per spec\n    const ORDER_MASK = (0, _utils2.bitMask)(fnBits);\n    /** Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`. */\n    function int2octets(num) {\n      // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\n      (0, _utils2.aInRange)('num < 2^' + fnBits, num, _0n, ORDER_MASK);\n      return Fn.toBytes(num);\n    }\n    function validateMsgAndHash(message, prehash) {\n      (0, _utils2._abytes2)(message, undefined, 'message');\n      return prehash ? (0, _utils2._abytes2)(hash(message), undefined, 'prehashed message') : message;\n    }\n    /**\n     * Steps A, D of RFC6979 3.2.\n     * Creates RFC6979 seed; converts msg/privKey to numbers.\n     * Used only in sign, not in verify.\n     *\n     * Warning: we cannot assume here that message has same amount of bytes as curve order,\n     * this will be invalid at least for P521. Also it can be bigger for P224 + SHA256.\n     */\n    function prepSig(message, privateKey, opts) {\n      if (['recovered', 'canonical'].some(k => k in opts)) throw new Error('sign() legacy options not supported');\n      const {\n        lowS,\n        prehash,\n        extraEntropy\n      } = validateSigOpts(opts, defaultSigOpts);\n      message = validateMsgAndHash(message, prehash); // RFC6979 3.2 A: h1 = H(m)\n      // We can't later call bits2octets, since nested bits2int is broken for curves\n      // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n      // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n      const h1int = bits2int_modN(message);\n      const d = _normFnElement(Fn, privateKey); // validate secret key, convert to bigint\n      const seedArgs = [int2octets(d), int2octets(h1int)];\n      // extraEntropy. RFC6979 3.6: additional k' (optional).\n      if (extraEntropy != null && extraEntropy !== false) {\n        // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n        // gen random bytes OR pass as-is\n        const e = extraEntropy === true ? randomBytes(lengths.secretKey) : extraEntropy;\n        seedArgs.push((0, _utils2.ensureBytes)('extraEntropy', e)); // check for being bytes\n      }\n      const seed = (0, _utils2.concatBytes)(...seedArgs); // Step D of RFC6979 3.2\n      const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n      // Converts signature params into point w r/s, checks result for validity.\n      // To transform k => Signature:\n      // q = k⋅G\n      // r = q.x mod n\n      // s = k^-1(m + rd) mod n\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      function k2sig(kBytes) {\n        // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n        // Important: all mod() calls here must be done over N\n        const k = bits2int(kBytes); // mod n, not mod p\n        if (!Fn.isValidNot0(k)) return; // Valid scalars (including k) must be in 1..N-1\n        const ik = Fn.inv(k); // k^-1 mod n\n        const q = Point.BASE.multiply(k).toAffine(); // q = k⋅G\n        const r = Fn.create(q.x); // r = q.x mod n\n        if (r === _0n) return;\n        const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\n        if (s === _0n) return;\n        let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n        let normS = s;\n        if (lowS && isBiggerThanHalfOrder(s)) {\n          normS = Fn.neg(s); // if lowS was passed, ensure s is always\n          recovery ^= 1; // // in the bottom half of N\n        }\n        return new Signature(r, normS, recovery); // use normS, not s\n      }\n      return {\n        seed,\n        k2sig\n      };\n    }\n    /**\n     * Signs message hash with a secret key.\n     *\n     * ```\n     * sign(m, d) where\n     *   k = rfc6979_hmac_drbg(m, d)\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr) / k mod n\n     * ```\n     */\n    function sign(message, secretKey, opts = {}) {\n      message = (0, _utils2.ensureBytes)('message', message);\n      const {\n        seed,\n        k2sig\n      } = prepSig(message, secretKey, opts); // Steps A, D of RFC6979 3.2.\n      const drbg = (0, _utils2.createHmacDrbg)(hash.outputLen, Fn.BYTES, hmac);\n      const sig = drbg(seed, k2sig); // Steps B, C, D, E, F, G\n      return sig;\n    }\n    function tryParsingSig(sg) {\n      // Try to deduce format\n      let sig = undefined;\n      const isHex = typeof sg === 'string' || (0, _utils2.isBytes)(sg);\n      const isObj = !isHex && sg !== null && typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint';\n      if (!isHex && !isObj) throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n      if (isObj) {\n        sig = new Signature(sg.r, sg.s);\n      } else if (isHex) {\n        try {\n          sig = Signature.fromBytes((0, _utils2.ensureBytes)('sig', sg), 'der');\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n        }\n        if (!sig) {\n          try {\n            sig = Signature.fromBytes((0, _utils2.ensureBytes)('sig', sg), 'compact');\n          } catch (error) {\n            return false;\n          }\n        }\n      }\n      if (!sig) return false;\n      return sig;\n    }\n    /**\n     * Verifies a signature against message and public key.\n     * Rejects lowS signatures by default: see {@link ECDSAVerifyOpts}.\n     * Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   u1 = hs^-1 mod n\n     *   u2 = rs^-1 mod n\n     *   R = u1⋅G + u2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, message, publicKey, opts = {}) {\n      const {\n        lowS,\n        prehash,\n        format\n      } = validateSigOpts(opts, defaultSigOpts);\n      publicKey = (0, _utils2.ensureBytes)('publicKey', publicKey);\n      message = validateMsgAndHash((0, _utils2.ensureBytes)('message', message), prehash);\n      if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n      const sig = format === undefined ? tryParsingSig(signature) : Signature.fromBytes((0, _utils2.ensureBytes)('sig', signature), format);\n      if (sig === false) return false;\n      try {\n        const P = Point.fromBytes(publicKey);\n        if (lowS && sig.hasHighS()) return false;\n        const {\n          r,\n          s\n        } = sig;\n        const h = bits2int_modN(message); // mod n, not mod p\n        const is = Fn.inv(s); // s^-1 mod n\n        const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\n        const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2)); // u1⋅G + u2⋅P\n        if (R.is0()) return false;\n        const v = Fn.create(R.x); // v = r.x mod n\n        return v === r;\n      } catch (e) {\n        return false;\n      }\n    }\n    function recoverPublicKey(signature, message, opts = {}) {\n      const {\n        prehash\n      } = validateSigOpts(opts, defaultSigOpts);\n      message = validateMsgAndHash(message, prehash);\n      return Signature.fromBytes(signature, 'recovered').recoverPublicKey(message).toBytes();\n    }\n    return Object.freeze({\n      keygen,\n      getPublicKey,\n      getSharedSecret,\n      utils,\n      lengths,\n      Point,\n      sign,\n      verify,\n      recoverPublicKey,\n      Signature,\n      hash\n    });\n  }\n  /** @deprecated use `weierstrass` in newer releases */\n  function weierstrassPoints(c) {\n    const {\n      CURVE,\n      curveOpts\n    } = _weierstrass_legacy_opts_to_new(c);\n    const Point = weierstrassN(CURVE, curveOpts);\n    return _weierstrass_new_output_to_legacy(c, Point);\n  }\n  function _weierstrass_legacy_opts_to_new(c) {\n    const CURVE = {\n      a: c.a,\n      b: c.b,\n      p: c.Fp.ORDER,\n      n: c.n,\n      h: c.h,\n      Gx: c.Gx,\n      Gy: c.Gy\n    };\n    const Fp = c.Fp;\n    let allowedLengths = c.allowedPrivateKeyLengths ? Array.from(new Set(c.allowedPrivateKeyLengths.map(l => Math.ceil(l / 2)))) : undefined;\n    const Fn = (0, _modular.Field)(CURVE.n, {\n      BITS: c.nBitLength,\n      allowedLengths: allowedLengths,\n      modFromBytes: c.wrapPrivateKey\n    });\n    const curveOpts = {\n      Fp,\n      Fn,\n      allowInfinityPoint: c.allowInfinityPoint,\n      endo: c.endo,\n      isTorsionFree: c.isTorsionFree,\n      clearCofactor: c.clearCofactor,\n      fromBytes: c.fromBytes,\n      toBytes: c.toBytes\n    };\n    return {\n      CURVE,\n      curveOpts\n    };\n  }\n  function _ecdsa_legacy_opts_to_new(c) {\n    const {\n      CURVE,\n      curveOpts\n    } = _weierstrass_legacy_opts_to_new(c);\n    const ecdsaOpts = {\n      hmac: c.hmac,\n      randomBytes: c.randomBytes,\n      lowS: c.lowS,\n      bits2int: c.bits2int,\n      bits2int_modN: c.bits2int_modN\n    };\n    return {\n      CURVE,\n      curveOpts,\n      hash: c.hash,\n      ecdsaOpts\n    };\n  }\n  function _legacyHelperEquat(Fp, a, b) {\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n      const x2 = Fp.sqr(x); // x * x\n      const x3 = Fp.mul(x2, x); // x² * x\n      return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n    }\n    return weierstrassEquation;\n  }\n  function _weierstrass_new_output_to_legacy(c, Point) {\n    const {\n      Fp,\n      Fn\n    } = Point;\n    function isWithinCurveOrder(num) {\n      return (0, _utils2.inRange)(num, _1n, Fn.ORDER);\n    }\n    const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\n    return Object.assign({}, {\n      CURVE: c,\n      Point: Point,\n      ProjectivePoint: Point,\n      normPrivateKeyToScalar: key => _normFnElement(Fn, key),\n      weierstrassEquation,\n      isWithinCurveOrder\n    });\n  }\n  function _ecdsa_new_output_to_legacy(c, _ecdsa) {\n    const Point = _ecdsa.Point;\n    return Object.assign({}, _ecdsa, {\n      ProjectivePoint: Point,\n      CURVE: Object.assign({}, c, (0, _modular.nLength)(Point.Fn.ORDER, Point.Fn.BITS))\n    });\n  }\n  // _ecdsa_legacy\n  function weierstrass(c) {\n    const {\n      CURVE,\n      curveOpts,\n      hash,\n      ecdsaOpts\n    } = _ecdsa_legacy_opts_to_new(c);\n    const Point = weierstrassN(CURVE, curveOpts);\n    const signs = ecdsa(Point, hash, ecdsaOpts);\n    return _ecdsa_new_output_to_legacy(c, signs);\n  }\n});","lineCount":1555,"map":[[16,2,28,0],[16,6,28,0,"_hmac"],[16,11,28,0],[16,14,28,0,"require"],[16,21,28,0],[16,22,28,0,"_dependencyMap"],[16,36,28,0],[17,2,29,0],[17,6,29,0,"_utils"],[17,12,29,0],[17,15,29,0,"require"],[17,22,29,0],[17,23,29,0,"_dependencyMap"],[17,37,29,0],[18,2,30,0],[18,6,30,0,"_utils2"],[18,13,30,0],[18,16,30,0,"require"],[18,23,30,0],[18,24,30,0,"_dependencyMap"],[18,38,30,0],[19,2,31,0],[19,6,31,0,"_curve"],[19,12,31,0],[19,15,31,0,"require"],[19,22,31,0],[19,23,31,0,"_dependencyMap"],[19,37,31,0],[20,2,32,0],[20,6,32,0,"_modular"],[20,14,32,0],[20,17,32,0,"require"],[20,24,32,0],[20,25,32,0,"_dependencyMap"],[20,39,32,0],[21,2,1,0],[22,0,2,0],[23,0,3,0],[24,0,4,0],[25,0,5,0],[26,0,6,0],[27,0,7,0],[28,0,8,0],[29,0,9,0],[30,0,10,0],[31,0,11,0],[32,0,12,0],[33,0,13,0],[34,0,14,0],[35,0,15,0],[36,0,16,0],[37,0,17,0],[38,0,18,0],[39,0,19,0],[40,0,20,0],[41,0,21,0],[42,0,22,0],[43,0,23,0],[44,0,24,0],[45,0,25,0],[46,0,26,0],[47,2,27,0],[49,2,33,0],[50,2,34,0],[50,8,34,6,"divNearest"],[50,18,34,16],[50,21,34,19,"divNearest"],[50,22,34,20,"num"],[50,25,34,23],[50,27,34,25,"den"],[50,30,34,28],[50,35,34,33],[50,36,34,34,"num"],[50,39,34,37],[50,42,34,40],[50,43,34,41,"num"],[50,46,34,44],[50,50,34,48],[50,51,34,49],[50,54,34,52,"den"],[50,57,34,55],[50,60,34,58],[50,61,34,59,"den"],[50,64,34,62],[50,68,34,66,"_2n"],[50,71,34,69],[50,75,34,73,"den"],[50,78,34,76],[51,2,35,0],[52,0,36,0],[53,0,37,0],[54,2,38,7],[54,11,38,16,"_splitEndoScalar"],[54,27,38,32,"_splitEndoScalar"],[54,28,38,33,"k"],[54,29,38,34],[54,31,38,36,"basis"],[54,36,38,41],[54,38,38,43,"n"],[54,39,38,44],[54,41,38,46],[55,4,39,4],[56,4,40,4],[57,4,41,4],[58,4,42,4],[58,10,42,10],[58,11,42,11],[58,12,42,12,"a1"],[58,14,42,14],[58,16,42,16,"b1"],[58,18,42,18],[58,19,42,19],[58,21,42,21],[58,22,42,22,"a2"],[58,24,42,24],[58,26,42,26,"b2"],[58,28,42,28],[58,29,42,29],[58,30,42,30],[58,33,42,33,"basis"],[58,38,42,38],[59,4,43,4],[59,10,43,10,"c1"],[59,12,43,12],[59,15,43,15,"divNearest"],[59,25,43,25],[59,26,43,26,"b2"],[59,28,43,28],[59,31,43,31,"k"],[59,32,43,32],[59,34,43,34,"n"],[59,35,43,35],[59,36,43,36],[60,4,44,4],[60,10,44,10,"c2"],[60,12,44,12],[60,15,44,15,"divNearest"],[60,25,44,25],[60,26,44,26],[60,27,44,27,"b1"],[60,29,44,29],[60,32,44,32,"k"],[60,33,44,33],[60,35,44,35,"n"],[60,36,44,36],[60,37,44,37],[61,4,45,4],[62,4,46,4],[63,4,47,4],[63,8,47,8,"k1"],[63,10,47,10],[63,13,47,13,"k"],[63,14,47,14],[63,17,47,17,"c1"],[63,19,47,19],[63,22,47,22,"a1"],[63,24,47,24],[63,27,47,27,"c2"],[63,29,47,29],[63,32,47,32,"a2"],[63,34,47,34],[64,4,48,4],[64,8,48,8,"k2"],[64,10,48,10],[64,13,48,13],[64,14,48,14,"c1"],[64,16,48,16],[64,19,48,19,"b1"],[64,21,48,21],[64,24,48,24,"c2"],[64,26,48,26],[64,29,48,29,"b2"],[64,31,48,31],[65,4,49,4],[65,10,49,10,"k1neg"],[65,15,49,15],[65,18,49,18,"k1"],[65,20,49,20],[65,23,49,23,"_0n"],[65,26,49,26],[66,4,50,4],[66,10,50,10,"k2neg"],[66,15,50,15],[66,18,50,18,"k2"],[66,20,50,20],[66,23,50,23,"_0n"],[66,26,50,26],[67,4,51,4],[67,8,51,8,"k1neg"],[67,13,51,13],[67,15,52,8,"k1"],[67,17,52,10],[67,20,52,13],[67,21,52,14,"k1"],[67,23,52,16],[68,4,53,4],[68,8,53,8,"k2neg"],[68,13,53,13],[68,15,54,8,"k2"],[68,17,54,10],[68,20,54,13],[68,21,54,14,"k2"],[68,23,54,16],[69,4,55,4],[70,4,56,4],[71,4,57,4],[71,10,57,10,"MAX_NUM"],[71,17,57,17],[71,20,57,20],[71,24,57,20,"bitMask"],[71,39,57,27],[71,41,57,28,"Math"],[71,45,57,32],[71,46,57,33,"ceil"],[71,50,57,37],[71,51,57,38],[71,55,57,38,"bitLen"],[71,69,57,44],[71,71,57,45,"n"],[71,72,57,46],[71,73,57,47],[71,76,57,50],[71,77,57,51],[71,78,57,52],[71,79,57,53],[71,82,57,56,"_1n"],[71,85,57,59],[71,86,57,60],[71,87,57,61],[72,4,58,4],[72,8,58,8,"k1"],[72,10,58,10],[72,13,58,13,"_0n"],[72,16,58,16],[72,20,58,20,"k1"],[72,22,58,22],[72,26,58,26,"MAX_NUM"],[72,33,58,33],[72,37,58,37,"k2"],[72,39,58,39],[72,42,58,42,"_0n"],[72,45,58,45],[72,49,58,49,"k2"],[72,51,58,51],[72,55,58,55,"MAX_NUM"],[72,62,58,62],[72,64,58,64],[73,6,59,8],[73,12,59,14],[73,16,59,18,"Error"],[73,21,59,23],[73,22,59,24],[73,62,59,64],[73,65,59,67,"k"],[73,66,59,68],[73,67,59,69],[74,4,60,4],[75,4,61,4],[75,11,61,11],[76,6,61,13,"k1neg"],[76,11,61,18],[77,6,61,20,"k1"],[77,8,61,22],[78,6,61,24,"k2neg"],[78,11,61,29],[79,6,61,31,"k2"],[80,4,61,34],[80,5,61,35],[81,2,62,0],[82,2,63,0],[82,11,63,9,"validateSigFormat"],[82,28,63,26,"validateSigFormat"],[82,29,63,27,"format"],[82,35,63,33],[82,37,63,35],[83,4,64,4],[83,8,64,8],[83,9,64,9],[83,10,64,10],[83,19,64,19],[83,21,64,21],[83,32,64,32],[83,34,64,34],[83,39,64,39],[83,40,64,40],[83,41,64,41,"includes"],[83,49,64,49],[83,50,64,50,"format"],[83,56,64,56],[83,57,64,57],[83,59,65,8],[83,65,65,14],[83,69,65,18,"Error"],[83,74,65,23],[83,75,65,24],[83,134,65,83],[83,135,65,84],[84,4,66,4],[84,11,66,11,"format"],[84,17,66,17],[85,2,67,0],[86,2,68,0],[86,11,68,9,"validateSigOpts"],[86,26,68,24,"validateSigOpts"],[86,27,68,25,"opts"],[86,31,68,29],[86,33,68,31,"def"],[86,36,68,34],[86,38,68,36],[87,4,69,4],[87,10,69,10,"optsn"],[87,15,69,15],[87,18,69,18],[87,19,69,19],[87,20,69,20],[88,4,70,4],[88,9,70,9],[88,13,70,13,"optName"],[88,20,70,20],[88,24,70,24,"Object"],[88,30,70,30],[88,31,70,31,"keys"],[88,35,70,35],[88,36,70,36,"def"],[88,39,70,39],[88,40,70,40],[88,42,70,42],[89,6,71,8],[90,6,72,8,"optsn"],[90,11,72,13],[90,12,72,14,"optName"],[90,19,72,21],[90,20,72,22],[90,23,72,25,"opts"],[90,27,72,29],[90,28,72,30,"optName"],[90,35,72,37],[90,36,72,38],[90,41,72,43,"undefined"],[90,50,72,52],[90,53,72,55,"def"],[90,56,72,58],[90,57,72,59,"optName"],[90,64,72,66],[90,65,72,67],[90,68,72,70,"opts"],[90,72,72,74],[90,73,72,75,"optName"],[90,80,72,82],[90,81,72,83],[91,4,73,4],[92,4,74,4],[92,8,74,4,"abool"],[92,23,74,9],[92,25,74,10,"optsn"],[92,30,74,15],[92,31,74,16,"lowS"],[92,35,74,20],[92,37,74,22],[92,43,74,28],[92,44,74,29],[93,4,75,4],[93,8,75,4,"abool"],[93,23,75,9],[93,25,75,10,"optsn"],[93,30,75,15],[93,31,75,16,"prehash"],[93,38,75,23],[93,40,75,25],[93,49,75,34],[93,50,75,35],[94,4,76,4],[94,8,76,8,"optsn"],[94,13,76,13],[94,14,76,14,"format"],[94,20,76,20],[94,25,76,25,"undefined"],[94,34,76,34],[94,36,77,8,"validateSigFormat"],[94,53,77,25],[94,54,77,26,"optsn"],[94,59,77,31],[94,60,77,32,"format"],[94,66,77,38],[94,67,77,39],[95,4,78,4],[95,11,78,11,"optsn"],[95,16,78,16],[96,2,79,0],[97,2,80,7],[97,8,80,13,"DERErr"],[97,14,80,19],[97,23,80,28,"Error"],[97,28,80,33],[97,29,80,34],[98,4,81,4,"constructor"],[98,15,81,15,"constructor"],[98,16,81,16,"m"],[98,17,81,17],[98,20,81,20],[98,22,81,22],[98,24,81,24],[99,6,82,8],[99,11,82,13],[99,12,82,14,"m"],[99,13,82,15],[99,14,82,16],[100,4,83,4],[101,2,84,0],[102,2,85,0],[103,0,86,0],[104,0,87,0],[105,0,88,0],[106,0,89,0],[107,0,90,0],[108,0,91,0],[109,2,85,0,"exports"],[109,9,85,0],[109,10,85,0,"DERErr"],[109,16,85,0],[109,19,85,0,"DERErr"],[109,25,85,0],[110,2,92,7],[110,8,92,13,"DER"],[110,11,92,16],[110,14,92,16,"exports"],[110,21,92,16],[110,22,92,16,"DER"],[110,25,92,16],[110,28,92,19],[111,4,93,4],[112,4,94,4,"Err"],[112,7,94,7],[112,9,94,9,"DERErr"],[112,15,94,15],[113,4,95,4],[114,4,96,4,"_tlv"],[114,8,96,8],[114,10,96,10],[115,6,97,8,"encode"],[115,12,97,14],[115,14,97,16,"encode"],[115,15,97,17,"tag"],[115,18,97,20],[115,20,97,22,"data"],[115,24,97,26],[115,29,97,31],[116,8,98,12],[116,14,98,18],[117,10,98,20,"Err"],[117,13,98,23],[117,15,98,25,"E"],[118,8,98,27],[118,9,98,28],[118,12,98,31,"DER"],[118,15,98,34],[119,8,99,12],[119,12,99,16,"tag"],[119,15,99,19],[119,18,99,22],[119,19,99,23],[119,23,99,27,"tag"],[119,26,99,30],[119,29,99,33],[119,32,99,36],[119,34,100,16],[119,40,100,22],[119,44,100,26,"E"],[119,45,100,27],[119,46,100,28],[119,69,100,51],[119,70,100,52],[120,8,101,12],[120,12,101,16,"data"],[120,16,101,20],[120,17,101,21,"length"],[120,23,101,27],[120,26,101,30],[120,27,101,31],[120,29,102,16],[120,35,102,22],[120,39,102,26,"E"],[120,40,102,27],[120,41,102,28],[120,68,102,55],[120,69,102,56],[121,8,103,12],[121,14,103,18,"dataLen"],[121,21,103,25],[121,24,103,28,"data"],[121,28,103,32],[121,29,103,33,"length"],[121,35,103,39],[121,38,103,42],[121,39,103,43],[122,8,104,12],[122,14,104,18,"len"],[122,17,104,21],[122,20,104,24],[122,24,104,24,"numberToHexUnpadded"],[122,51,104,43],[122,53,104,44,"dataLen"],[122,60,104,51],[122,61,104,52],[123,8,105,12],[123,12,105,17,"len"],[123,15,105,20],[123,16,105,21,"length"],[123,22,105,27],[123,25,105,30],[123,26,105,31],[123,29,105,35],[123,32,105,38],[123,34,106,16],[123,40,106,22],[123,44,106,26,"E"],[123,45,106,27],[123,46,106,28],[123,84,106,66],[123,85,106,67],[124,8,107,12],[125,8,108,12],[125,14,108,18,"lenLen"],[125,20,108,24],[125,23,108,27,"dataLen"],[125,30,108,34],[125,33,108,37],[125,36,108,40],[125,39,108,43],[125,43,108,43,"numberToHexUnpadded"],[125,70,108,62],[125,72,108,64,"len"],[125,75,108,67],[125,76,108,68,"length"],[125,82,108,74],[125,85,108,77],[125,86,108,78],[125,89,108,82],[125,92,108,85],[125,93,108,86],[125,96,108,89],[125,98,108,91],[126,8,109,12],[126,14,109,18,"t"],[126,15,109,19],[126,18,109,22],[126,22,109,22,"numberToHexUnpadded"],[126,49,109,41],[126,51,109,42,"tag"],[126,54,109,45],[126,55,109,46],[127,8,110,12],[127,15,110,19,"t"],[127,16,110,20],[127,19,110,23,"lenLen"],[127,25,110,29],[127,28,110,32,"len"],[127,31,110,35],[127,34,110,38,"data"],[127,38,110,42],[128,6,111,8],[128,7,111,9],[129,6,112,8],[130,6,113,8,"decode"],[130,12,113,14,"decode"],[130,13,113,15,"tag"],[130,16,113,18],[130,18,113,20,"data"],[130,22,113,24],[130,24,113,26],[131,8,114,12],[131,14,114,18],[132,10,114,20,"Err"],[132,13,114,23],[132,15,114,25,"E"],[133,8,114,27],[133,9,114,28],[133,12,114,31,"DER"],[133,15,114,34],[134,8,115,12],[134,12,115,16,"pos"],[134,15,115,19],[134,18,115,22],[134,19,115,23],[135,8,116,12],[135,12,116,16,"tag"],[135,15,116,19],[135,18,116,22],[135,19,116,23],[135,23,116,27,"tag"],[135,26,116,30],[135,29,116,33],[135,32,116,36],[135,34,117,16],[135,40,117,22],[135,44,117,26,"E"],[135,45,117,27],[135,46,117,28],[135,69,117,51],[135,70,117,52],[136,8,118,12],[136,12,118,16,"data"],[136,16,118,20],[136,17,118,21,"length"],[136,23,118,27],[136,26,118,30],[136,27,118,31],[136,31,118,35,"data"],[136,35,118,39],[136,36,118,40,"pos"],[136,39,118,43],[136,41,118,45],[136,42,118,46],[136,47,118,51,"tag"],[136,50,118,54],[136,52,119,16],[136,58,119,22],[136,62,119,26,"E"],[136,63,119,27],[136,64,119,28],[136,87,119,51],[136,88,119,52],[137,8,120,12],[137,14,120,18,"first"],[137,19,120,23],[137,22,120,26,"data"],[137,26,120,30],[137,27,120,31,"pos"],[137,30,120,34],[137,32,120,36],[137,33,120,37],[138,8,121,12],[138,14,121,18,"isLong"],[138,20,121,24],[138,23,121,27],[138,24,121,28],[138,26,121,30,"first"],[138,31,121,35],[138,34,121,38],[138,37,121,41],[138,38,121,42],[138,39,121,43],[138,40,121,44],[139,8,122,12],[139,12,122,16,"length"],[139,18,122,22],[139,21,122,25],[139,22,122,26],[140,8,123,12],[140,12,123,16],[140,13,123,17,"isLong"],[140,19,123,23],[140,21,124,16,"length"],[140,27,124,22],[140,30,124,25,"first"],[140,35,124,30],[140,36,124,31],[140,41,125,17],[141,10,126,16],[142,10,127,16],[142,16,127,22,"lenLen"],[142,22,127,28],[142,25,127,31,"first"],[142,30,127,36],[142,33,127,39],[142,36,127,42],[143,10,128,16],[143,14,128,20],[143,15,128,21,"lenLen"],[143,21,128,27],[143,23,129,20],[143,29,129,26],[143,33,129,30,"E"],[143,34,129,31],[143,35,129,32],[143,86,129,83],[143,87,129,84],[144,10,130,16],[144,14,130,20,"lenLen"],[144,20,130,26],[144,23,130,29],[144,24,130,30],[144,26,131,20],[144,32,131,26],[144,36,131,30,"E"],[144,37,131,31],[144,38,131,32],[144,80,131,74],[144,81,131,75],[144,82,131,76],[144,83,131,77],[145,10,132,16],[145,16,132,22,"lengthBytes"],[145,27,132,33],[145,30,132,36,"data"],[145,34,132,40],[145,35,132,41,"subarray"],[145,43,132,49],[145,44,132,50,"pos"],[145,47,132,53],[145,49,132,55,"pos"],[145,52,132,58],[145,55,132,61,"lenLen"],[145,61,132,67],[145,62,132,68],[146,10,133,16],[146,14,133,20,"lengthBytes"],[146,25,133,31],[146,26,133,32,"length"],[146,32,133,38],[146,37,133,43,"lenLen"],[146,43,133,49],[146,45,134,20],[146,51,134,26],[146,55,134,30,"E"],[146,56,134,31],[146,57,134,32],[146,96,134,71],[146,97,134,72],[147,10,135,16],[147,14,135,20,"lengthBytes"],[147,25,135,31],[147,26,135,32],[147,27,135,33],[147,28,135,34],[147,33,135,39],[147,34,135,40],[147,36,136,20],[147,42,136,26],[147,46,136,30,"E"],[147,47,136,31],[147,48,136,32],[147,86,136,70],[147,87,136,71],[148,10,137,16],[148,15,137,21],[148,21,137,27,"b"],[148,22,137,28],[148,26,137,32,"lengthBytes"],[148,37,137,43],[148,39,138,20,"length"],[148,45,138,26],[148,48,138,30,"length"],[148,54,138,36],[148,58,138,40],[148,59,138,41],[148,62,138,45,"b"],[148,63,138,46],[149,10,139,16,"pos"],[149,13,139,19],[149,17,139,23,"lenLen"],[149,23,139,29],[150,10,140,16],[150,14,140,20,"length"],[150,20,140,26],[150,23,140,29],[150,26,140,32],[150,28,141,20],[150,34,141,26],[150,38,141,30,"E"],[150,39,141,31],[150,40,141,32],[150,80,141,72],[150,81,141,73],[151,8,142,12],[152,8,143,12],[152,14,143,18,"v"],[152,15,143,19],[152,18,143,22,"data"],[152,22,143,26],[152,23,143,27,"subarray"],[152,31,143,35],[152,32,143,36,"pos"],[152,35,143,39],[152,37,143,41,"pos"],[152,40,143,44],[152,43,143,47,"length"],[152,49,143,53],[152,50,143,54],[153,8,144,12],[153,12,144,16,"v"],[153,13,144,17],[153,14,144,18,"length"],[153,20,144,24],[153,25,144,29,"length"],[153,31,144,35],[153,33,145,16],[153,39,145,22],[153,43,145,26,"E"],[153,44,145,27],[153,45,145,28],[153,77,145,60],[153,78,145,61],[154,8,146,12],[154,15,146,19],[155,10,146,21,"v"],[155,11,146,22],[156,10,146,24,"l"],[156,11,146,25],[156,13,146,27,"data"],[156,17,146,31],[156,18,146,32,"subarray"],[156,26,146,40],[156,27,146,41,"pos"],[156,30,146,44],[156,33,146,47,"length"],[156,39,146,53],[157,8,146,55],[157,9,146,56],[158,6,147,8],[159,4,148,4],[159,5,148,5],[160,4,149,4],[161,4,150,4],[162,4,151,4],[163,4,152,4],[164,4,153,4,"_int"],[164,8,153,8],[164,10,153,10],[165,6,154,8,"encode"],[165,12,154,14,"encode"],[165,13,154,15,"num"],[165,16,154,18],[165,18,154,20],[166,8,155,12],[166,14,155,18],[167,10,155,20,"Err"],[167,13,155,23],[167,15,155,25,"E"],[168,8,155,27],[168,9,155,28],[168,12,155,31,"DER"],[168,15,155,34],[169,8,156,12],[169,12,156,16,"num"],[169,15,156,19],[169,18,156,22,"_0n"],[169,21,156,25],[169,23,157,16],[169,29,157,22],[169,33,157,26,"E"],[169,34,157,27],[169,35,157,28],[169,79,157,72],[169,80,157,73],[170,8,158,12],[170,12,158,16,"hex"],[170,15,158,19],[170,18,158,22],[170,22,158,22,"numberToHexUnpadded"],[170,49,158,41],[170,51,158,42,"num"],[170,54,158,45],[170,55,158,46],[171,8,159,12],[172,8,160,12],[172,12,160,16,"Number"],[172,18,160,22],[172,19,160,23,"parseInt"],[172,27,160,31],[172,28,160,32,"hex"],[172,31,160,35],[172,32,160,36],[172,33,160,37],[172,34,160,38],[172,36,160,40],[172,38,160,42],[172,39,160,43],[172,42,160,46],[172,48,160,52],[172,50,161,16,"hex"],[172,53,161,19],[172,56,161,22],[172,60,161,26],[172,63,161,29,"hex"],[172,66,161,32],[173,8,162,12],[173,12,162,16,"hex"],[173,15,162,19],[173,16,162,20,"length"],[173,22,162,26],[173,25,162,29],[173,26,162,30],[173,28,163,16],[173,34,163,22],[173,38,163,26,"E"],[173,39,163,27],[173,40,163,28],[173,88,163,76],[173,89,163,77],[174,8,164,12],[174,15,164,19,"hex"],[174,18,164,22],[175,6,165,8],[175,7,165,9],[176,6,166,8,"decode"],[176,12,166,14,"decode"],[176,13,166,15,"data"],[176,17,166,19],[176,19,166,21],[177,8,167,12],[177,14,167,18],[178,10,167,20,"Err"],[178,13,167,23],[178,15,167,25,"E"],[179,8,167,27],[179,9,167,28],[179,12,167,31,"DER"],[179,15,167,34],[180,8,168,12],[180,12,168,16,"data"],[180,16,168,20],[180,17,168,21],[180,18,168,22],[180,19,168,23],[180,22,168,26],[180,25,168,29],[180,27,169,16],[180,33,169,22],[180,37,169,26,"E"],[180,38,169,27],[180,39,169,28],[180,76,169,65],[180,77,169,66],[181,8,170,12],[181,12,170,16,"data"],[181,16,170,20],[181,17,170,21],[181,18,170,22],[181,19,170,23],[181,24,170,28],[181,28,170,32],[181,32,170,36],[181,34,170,38,"data"],[181,38,170,42],[181,39,170,43],[181,40,170,44],[181,41,170,45],[181,44,170,48],[181,47,170,51],[181,48,170,52],[181,50,171,16],[181,56,171,22],[181,60,171,26,"E"],[181,61,171,27],[181,62,171,28],[181,115,171,81],[181,116,171,82],[182,8,172,12],[182,15,172,19],[182,19,172,19,"bytesToNumberBE"],[182,42,172,34],[182,44,172,35,"data"],[182,48,172,39],[182,49,172,40],[183,6,173,8],[184,4,174,4],[184,5,174,5],[185,4,175,4,"toSig"],[185,9,175,9,"toSig"],[185,10,175,10,"hex"],[185,13,175,13],[185,15,175,15],[186,6,176,8],[187,6,177,8],[187,12,177,14],[188,8,177,16,"Err"],[188,11,177,19],[188,13,177,21,"E"],[188,14,177,22],[189,8,177,24,"_int"],[189,12,177,28],[189,14,177,30,"int"],[189,17,177,33],[190,8,177,35,"_tlv"],[190,12,177,39],[190,14,177,41,"tlv"],[191,6,177,45],[191,7,177,46],[191,10,177,49,"DER"],[191,13,177,52],[192,6,178,8],[192,12,178,14,"data"],[192,16,178,18],[192,19,178,21],[192,23,178,21,"ensureBytes"],[192,42,178,32],[192,44,178,33],[192,55,178,44],[192,57,178,46,"hex"],[192,60,178,49],[192,61,178,50],[193,6,179,8],[193,12,179,14],[194,8,179,16,"v"],[194,9,179,17],[194,11,179,19,"seqBytes"],[194,19,179,27],[195,8,179,29,"l"],[195,9,179,30],[195,11,179,32,"seqLeftBytes"],[196,6,179,45],[196,7,179,46],[196,10,179,49,"tlv"],[196,13,179,52],[196,14,179,53,"decode"],[196,20,179,59],[196,21,179,60],[196,25,179,64],[196,27,179,66,"data"],[196,31,179,70],[196,32,179,71],[197,6,180,8],[197,10,180,12,"seqLeftBytes"],[197,22,180,24],[197,23,180,25,"length"],[197,29,180,31],[197,31,181,12],[197,37,181,18],[197,41,181,22,"E"],[197,42,181,23],[197,43,181,24],[197,88,181,69],[197,89,181,70],[198,6,182,8],[198,12,182,14],[199,8,182,16,"v"],[199,9,182,17],[199,11,182,19,"rBytes"],[199,17,182,25],[200,8,182,27,"l"],[200,9,182,28],[200,11,182,30,"rLeftBytes"],[201,6,182,41],[201,7,182,42],[201,10,182,45,"tlv"],[201,13,182,48],[201,14,182,49,"decode"],[201,20,182,55],[201,21,182,56],[201,25,182,60],[201,27,182,62,"seqBytes"],[201,35,182,70],[201,36,182,71],[202,6,183,8],[202,12,183,14],[203,8,183,16,"v"],[203,9,183,17],[203,11,183,19,"sBytes"],[203,17,183,25],[204,8,183,27,"l"],[204,9,183,28],[204,11,183,30,"sLeftBytes"],[205,6,183,41],[205,7,183,42],[205,10,183,45,"tlv"],[205,13,183,48],[205,14,183,49,"decode"],[205,20,183,55],[205,21,183,56],[205,25,183,60],[205,27,183,62,"rLeftBytes"],[205,37,183,72],[205,38,183,73],[206,6,184,8],[206,10,184,12,"sLeftBytes"],[206,20,184,22],[206,21,184,23,"length"],[206,27,184,29],[206,29,185,12],[206,35,185,18],[206,39,185,22,"E"],[206,40,185,23],[206,41,185,24],[206,86,185,69],[206,87,185,70],[207,6,186,8],[207,13,186,15],[208,8,186,17,"r"],[208,9,186,18],[208,11,186,20,"int"],[208,14,186,23],[208,15,186,24,"decode"],[208,21,186,30],[208,22,186,31,"rBytes"],[208,28,186,37],[208,29,186,38],[209,8,186,40,"s"],[209,9,186,41],[209,11,186,43,"int"],[209,14,186,46],[209,15,186,47,"decode"],[209,21,186,53],[209,22,186,54,"sBytes"],[209,28,186,60],[210,6,186,62],[210,7,186,63],[211,4,187,4],[211,5,187,5],[212,4,188,4,"hexFromSig"],[212,14,188,14,"hexFromSig"],[212,15,188,15,"sig"],[212,18,188,18],[212,20,188,20],[213,6,189,8],[213,12,189,14],[214,8,189,16,"_tlv"],[214,12,189,20],[214,14,189,22,"tlv"],[214,17,189,25],[215,8,189,27,"_int"],[215,12,189,31],[215,14,189,33,"int"],[216,6,189,37],[216,7,189,38],[216,10,189,41,"DER"],[216,13,189,44],[217,6,190,8],[217,12,190,14,"rs"],[217,14,190,16],[217,17,190,19,"tlv"],[217,20,190,22],[217,21,190,23,"encode"],[217,27,190,29],[217,28,190,30],[217,32,190,34],[217,34,190,36,"int"],[217,37,190,39],[217,38,190,40,"encode"],[217,44,190,46],[217,45,190,47,"sig"],[217,48,190,50],[217,49,190,51,"r"],[217,50,190,52],[217,51,190,53],[217,52,190,54],[218,6,191,8],[218,12,191,14,"ss"],[218,14,191,16],[218,17,191,19,"tlv"],[218,20,191,22],[218,21,191,23,"encode"],[218,27,191,29],[218,28,191,30],[218,32,191,34],[218,34,191,36,"int"],[218,37,191,39],[218,38,191,40,"encode"],[218,44,191,46],[218,45,191,47,"sig"],[218,48,191,50],[218,49,191,51,"s"],[218,50,191,52],[218,51,191,53],[218,52,191,54],[219,6,192,8],[219,12,192,14,"seq"],[219,15,192,17],[219,18,192,20,"rs"],[219,20,192,22],[219,23,192,25,"ss"],[219,25,192,27],[220,6,193,8],[220,13,193,15,"tlv"],[220,16,193,18],[220,17,193,19,"encode"],[220,23,193,25],[220,24,193,26],[220,28,193,30],[220,30,193,32,"seq"],[220,33,193,35],[220,34,193,36],[221,4,194,4],[222,2,195,0],[222,3,195,1],[223,2,196,0],[224,2,197,0],[225,2,198,0],[225,8,198,6,"_0n"],[225,11,198,9],[225,14,198,12,"BigInt"],[225,20,198,18],[225,21,198,19],[225,22,198,20],[225,23,198,21],[226,4,198,23,"_1n"],[226,7,198,26],[226,10,198,29,"BigInt"],[226,16,198,35],[226,17,198,36],[226,18,198,37],[226,19,198,38],[227,4,198,40,"_2n"],[227,7,198,43],[227,10,198,46,"BigInt"],[227,16,198,52],[227,17,198,53],[227,18,198,54],[227,19,198,55],[228,4,198,57,"_3n"],[228,7,198,60],[228,10,198,63,"BigInt"],[228,16,198,69],[228,17,198,70],[228,18,198,71],[228,19,198,72],[229,4,198,74,"_4n"],[229,7,198,77],[229,10,198,80,"BigInt"],[229,16,198,86],[229,17,198,87],[229,18,198,88],[229,19,198,89],[230,2,199,7],[230,11,199,16,"_normFnElement"],[230,25,199,30,"_normFnElement"],[230,26,199,31,"Fn"],[230,28,199,33],[230,30,199,35,"key"],[230,33,199,38],[230,35,199,40],[231,4,200,4],[231,10,200,10],[232,6,200,12,"BYTES"],[232,11,200,17],[232,13,200,19,"expected"],[233,4,200,28],[233,5,200,29],[233,8,200,32,"Fn"],[233,10,200,34],[234,4,201,4],[234,8,201,8,"num"],[234,11,201,11],[235,4,202,4],[235,8,202,8],[235,15,202,15,"key"],[235,18,202,18],[235,23,202,23],[235,31,202,31],[235,33,202,33],[236,6,203,8,"num"],[236,9,203,11],[236,12,203,14,"key"],[236,15,203,17],[237,4,204,4],[237,5,204,5],[237,11,205,9],[238,6,206,8],[238,10,206,12,"bytes"],[238,15,206,17],[238,18,206,20],[238,22,206,20,"ensureBytes"],[238,41,206,31],[238,43,206,32],[238,56,206,45],[238,58,206,47,"key"],[238,61,206,50],[238,62,206,51],[239,6,207,8],[239,10,207,12],[240,8,208,12,"num"],[240,11,208,15],[240,14,208,18,"Fn"],[240,16,208,20],[240,17,208,21,"fromBytes"],[240,26,208,30],[240,27,208,31,"bytes"],[240,32,208,36],[240,33,208,37],[241,6,209,8],[241,7,209,9],[241,8,210,8],[241,15,210,15,"error"],[241,20,210,20],[241,22,210,22],[242,8,211,12],[242,14,211,18],[242,18,211,22,"Error"],[242,23,211,27],[242,24,211,28],[242,70,211,74,"expected"],[242,78,211,82],[242,87,211,91],[242,94,211,98,"key"],[242,97,211,101],[242,99,211,103],[242,100,211,104],[243,6,212,8],[244,4,213,4],[245,4,214,4],[245,8,214,8],[245,9,214,9,"Fn"],[245,11,214,11],[245,12,214,12,"isValidNot0"],[245,23,214,23],[245,24,214,24,"num"],[245,27,214,27],[245,28,214,28],[245,30,215,8],[245,36,215,14],[245,40,215,18,"Error"],[245,45,215,23],[245,46,215,24],[245,90,215,68],[245,91,215,69],[246,4,216,4],[246,11,216,11,"num"],[246,14,216,14],[247,2,217,0],[248,2,218,0],[249,0,219,0],[250,0,220,0],[251,0,221,0],[252,0,222,0],[253,0,223,0],[254,0,224,0],[255,0,225,0],[256,0,226,0],[257,0,227,0],[258,0,228,0],[259,0,229,0],[260,0,230,0],[261,0,231,0],[262,0,232,0],[263,0,233,0],[264,0,234,0],[265,2,235,7],[265,11,235,16,"weierstrassN"],[265,23,235,28,"weierstrassN"],[265,24,235,29,"params"],[265,30,235,35],[265,32,235,37,"extraOpts"],[265,41,235,46],[265,44,235,49],[265,45,235,50],[265,46,235,51],[265,48,235,53],[266,4,236,4],[266,10,236,10,"validated"],[266,19,236,19],[266,22,236,22],[266,26,236,22,"_createCurveFields"],[266,51,236,40],[266,53,236,41],[266,66,236,54],[266,68,236,56,"params"],[266,74,236,62],[266,76,236,64,"extraOpts"],[266,85,236,73],[266,86,236,74],[267,4,237,4],[267,10,237,10],[268,6,237,12,"Fp"],[268,8,237,14],[269,6,237,16,"Fn"],[270,4,237,19],[270,5,237,20],[270,8,237,23,"validated"],[270,17,237,32],[271,4,238,4],[271,8,238,8,"CURVE"],[271,13,238,13],[271,16,238,16,"validated"],[271,25,238,25],[271,26,238,26,"CURVE"],[271,31,238,31],[272,4,239,4],[272,10,239,10],[273,6,239,12,"h"],[273,7,239,13],[273,9,239,15,"cofactor"],[273,17,239,23],[274,6,239,25,"n"],[274,7,239,26],[274,9,239,28,"CURVE_ORDER"],[275,4,239,40],[275,5,239,41],[275,8,239,44,"CURVE"],[275,13,239,49],[276,4,240,4],[276,8,240,4,"_validateObject"],[276,31,240,19],[276,33,240,20,"extraOpts"],[276,42,240,29],[276,44,240,31],[276,45,240,32],[276,46,240,33],[276,48,240,35],[277,6,241,8,"allowInfinityPoint"],[277,24,241,26],[277,26,241,28],[277,35,241,37],[278,6,242,8,"clearCofactor"],[278,19,242,21],[278,21,242,23],[278,31,242,33],[279,6,243,8,"isTorsionFree"],[279,19,243,21],[279,21,243,23],[279,31,243,33],[280,6,244,8,"fromBytes"],[280,15,244,17],[280,17,244,19],[280,27,244,29],[281,6,245,8,"toBytes"],[281,13,245,15],[281,15,245,17],[281,25,245,27],[282,6,246,8,"endo"],[282,10,246,12],[282,12,246,14],[282,20,246,22],[283,6,247,8,"wrapPrivateKey"],[283,20,247,22],[283,22,247,24],[284,4,248,4],[284,5,248,5],[284,6,248,6],[285,4,249,4],[285,10,249,10],[286,6,249,12,"endo"],[287,4,249,17],[287,5,249,18],[287,8,249,21,"extraOpts"],[287,17,249,30],[288,4,250,4],[288,8,250,8,"endo"],[288,12,250,12],[288,14,250,14],[289,6,251,8],[290,6,252,8],[290,10,252,12],[290,11,252,13,"Fp"],[290,13,252,15],[290,14,252,16,"is0"],[290,17,252,19],[290,18,252,20,"CURVE"],[290,23,252,25],[290,24,252,26,"a"],[290,25,252,27],[290,26,252,28],[290,30,252,32],[290,37,252,39,"endo"],[290,41,252,43],[290,42,252,44,"beta"],[290,46,252,48],[290,51,252,53],[290,59,252,61],[290,63,252,65],[290,64,252,66,"Array"],[290,69,252,71],[290,70,252,72,"isArray"],[290,77,252,79],[290,78,252,80,"endo"],[290,82,252,84],[290,83,252,85,"basises"],[290,90,252,92],[290,91,252,93],[290,93,252,95],[291,8,253,12],[291,14,253,18],[291,18,253,22,"Error"],[291,23,253,27],[291,24,253,28],[291,84,253,88],[291,85,253,89],[292,6,254,8],[293,4,255,4],[294,4,256,4],[294,10,256,10,"lengths"],[294,17,256,17],[294,20,256,20,"getWLengths"],[294,31,256,31],[294,32,256,32,"Fp"],[294,34,256,34],[294,36,256,36,"Fn"],[294,38,256,38],[294,39,256,39],[295,4,257,4],[295,13,257,13,"assertCompressionIsSupported"],[295,41,257,41,"assertCompressionIsSupported"],[295,42,257,41],[295,44,257,44],[296,6,258,8],[296,10,258,12],[296,11,258,13,"Fp"],[296,13,258,15],[296,14,258,16,"isOdd"],[296,19,258,21],[296,21,259,12],[296,27,259,18],[296,31,259,22,"Error"],[296,36,259,27],[296,37,259,28],[296,97,259,88],[296,98,259,89],[297,4,260,4],[298,4,261,4],[299,4,262,4],[299,13,262,13,"pointToBytes"],[299,25,262,25,"pointToBytes"],[299,26,262,26,"_c"],[299,28,262,28],[299,30,262,30,"point"],[299,35,262,35],[299,37,262,37,"isCompressed"],[299,49,262,49],[299,51,262,51],[300,6,263,8],[300,12,263,14],[301,8,263,16,"x"],[301,9,263,17],[302,8,263,19,"y"],[303,6,263,21],[303,7,263,22],[303,10,263,25,"point"],[303,15,263,30],[303,16,263,31,"toAffine"],[303,24,263,39],[303,25,263,40],[303,26,263,41],[304,6,264,8],[304,12,264,14,"bx"],[304,14,264,16],[304,17,264,19,"Fp"],[304,19,264,21],[304,20,264,22,"toBytes"],[304,27,264,29],[304,28,264,30,"x"],[304,29,264,31],[304,30,264,32],[305,6,265,8],[305,10,265,8,"abool"],[305,25,265,13],[305,27,265,14,"isCompressed"],[305,39,265,26],[305,41,265,28],[305,55,265,42],[305,56,265,43],[306,6,266,8],[306,10,266,12,"isCompressed"],[306,22,266,24],[306,24,266,26],[307,8,267,12,"assertCompressionIsSupported"],[307,36,267,40],[307,37,267,41],[307,38,267,42],[308,8,268,12],[308,14,268,18,"hasEvenY"],[308,22,268,26],[308,25,268,29],[308,26,268,30,"Fp"],[308,28,268,32],[308,29,268,33,"isOdd"],[308,34,268,38],[308,35,268,39,"y"],[308,36,268,40],[308,37,268,41],[309,8,269,12],[309,15,269,19],[309,19,269,19,"concatBytes"],[309,38,269,30],[309,40,269,31,"pprefix"],[309,47,269,38],[309,48,269,39,"hasEvenY"],[309,56,269,47],[309,57,269,48],[309,59,269,50,"bx"],[309,61,269,52],[309,62,269,53],[310,6,270,8],[310,7,270,9],[310,13,271,13],[311,8,272,12],[311,15,272,19],[311,19,272,19,"concatBytes"],[311,38,272,30],[311,40,272,31,"Uint8Array"],[311,50,272,41],[311,51,272,42,"of"],[311,53,272,44],[311,54,272,45],[311,58,272,49],[311,59,272,50],[311,61,272,52,"bx"],[311,63,272,54],[311,65,272,56,"Fp"],[311,67,272,58],[311,68,272,59,"toBytes"],[311,75,272,66],[311,76,272,67,"y"],[311,77,272,68],[311,78,272,69],[311,79,272,70],[312,6,273,8],[313,4,274,4],[314,4,275,4],[314,13,275,13,"pointFromBytes"],[314,27,275,27,"pointFromBytes"],[314,28,275,28,"bytes"],[314,33,275,33],[314,35,275,35],[315,6,276,8],[315,10,276,8,"abytes"],[315,26,276,14],[315,28,276,15,"bytes"],[315,33,276,20],[315,35,276,22,"undefined"],[315,44,276,31],[315,46,276,33],[315,53,276,40],[315,54,276,41],[316,6,277,8],[316,12,277,14],[317,8,277,16,"publicKey"],[317,17,277,25],[317,19,277,27,"comp"],[317,23,277,31],[318,8,277,33,"publicKeyUncompressed"],[318,29,277,54],[318,31,277,56,"uncomp"],[319,6,277,63],[319,7,277,64],[319,10,277,67,"lengths"],[319,17,277,74],[319,18,277,75],[319,19,277,76],[320,6,278,8],[320,12,278,14,"length"],[320,18,278,20],[320,21,278,23,"bytes"],[320,26,278,28],[320,27,278,29,"length"],[320,33,278,35],[321,6,279,8],[321,12,279,14,"head"],[321,16,279,18],[321,19,279,21,"bytes"],[321,24,279,26],[321,25,279,27],[321,26,279,28],[321,27,279,29],[322,6,280,8],[322,12,280,14,"tail"],[322,16,280,18],[322,19,280,21,"bytes"],[322,24,280,26],[322,25,280,27,"subarray"],[322,33,280,35],[322,34,280,36],[322,35,280,37],[322,36,280,38],[323,6,281,8],[324,6,282,8],[324,10,282,12,"length"],[324,16,282,18],[324,21,282,23,"comp"],[324,25,282,27],[324,30,282,32,"head"],[324,34,282,36],[324,39,282,41],[324,43,282,45],[324,47,282,49,"head"],[324,51,282,53],[324,56,282,58],[324,60,282,62],[324,61,282,63],[324,63,282,65],[325,8,283,12],[325,14,283,18,"x"],[325,15,283,19],[325,18,283,22,"Fp"],[325,20,283,24],[325,21,283,25,"fromBytes"],[325,30,283,34],[325,31,283,35,"tail"],[325,35,283,39],[325,36,283,40],[326,8,284,12],[326,12,284,16],[326,13,284,17,"Fp"],[326,15,284,19],[326,16,284,20,"isValid"],[326,23,284,27],[326,24,284,28,"x"],[326,25,284,29],[326,26,284,30],[326,28,285,16],[326,34,285,22],[326,38,285,26,"Error"],[326,43,285,31],[326,44,285,32],[326,81,285,69],[326,82,285,70],[327,8,286,12],[327,14,286,18,"y2"],[327,16,286,20],[327,19,286,23,"weierstrassEquation"],[327,38,286,42],[327,39,286,43,"x"],[327,40,286,44],[327,41,286,45],[327,42,286,46],[327,43,286,47],[328,8,287,12],[328,12,287,16,"y"],[328,13,287,17],[329,8,288,12],[329,12,288,16],[330,10,289,16,"y"],[330,11,289,17],[330,14,289,20,"Fp"],[330,16,289,22],[330,17,289,23,"sqrt"],[330,21,289,27],[330,22,289,28,"y2"],[330,24,289,30],[330,25,289,31],[330,26,289,32],[330,27,289,33],[331,8,290,12],[331,9,290,13],[331,10,291,12],[331,17,291,19,"sqrtError"],[331,26,291,28],[331,28,291,30],[332,10,292,16],[332,16,292,22,"err"],[332,19,292,25],[332,22,292,28,"sqrtError"],[332,31,292,37],[332,43,292,49,"Error"],[332,48,292,54],[332,51,292,57],[332,55,292,61],[332,58,292,64,"sqrtError"],[332,67,292,73],[332,68,292,74,"message"],[332,75,292,81],[332,78,292,84],[332,80,292,86],[333,10,293,16],[333,16,293,22],[333,20,293,26,"Error"],[333,25,293,31],[333,26,293,32],[333,66,293,72],[333,69,293,75,"err"],[333,72,293,78],[333,73,293,79],[334,8,294,12],[335,8,295,12,"assertCompressionIsSupported"],[335,36,295,40],[335,37,295,41],[335,38,295,42],[336,8,296,12],[336,14,296,18,"isYOdd"],[336,20,296,24],[336,23,296,27,"Fp"],[336,25,296,29],[336,26,296,30,"isOdd"],[336,31,296,35],[336,32,296,36,"y"],[336,33,296,37],[336,34,296,38],[336,35,296,39],[336,36,296,40],[337,8,297,12],[337,14,297,18,"isHeadOdd"],[337,23,297,27],[337,26,297,30],[337,27,297,31,"head"],[337,31,297,35],[337,34,297,38],[337,35,297,39],[337,41,297,45],[337,42,297,46],[337,43,297,47],[337,44,297,48],[338,8,298,12],[338,12,298,16,"isHeadOdd"],[338,21,298,25],[338,26,298,30,"isYOdd"],[338,32,298,36],[338,34,299,16,"y"],[338,35,299,17],[338,38,299,20,"Fp"],[338,40,299,22],[338,41,299,23,"neg"],[338,44,299,26],[338,45,299,27,"y"],[338,46,299,28],[338,47,299,29],[339,8,300,12],[339,15,300,19],[340,10,300,21,"x"],[340,11,300,22],[341,10,300,24,"y"],[342,8,300,26],[342,9,300,27],[343,6,301,8],[343,7,301,9],[343,13,302,13],[343,17,302,17,"length"],[343,23,302,23],[343,28,302,28,"uncomp"],[343,34,302,34],[343,38,302,38,"head"],[343,42,302,42],[343,47,302,47],[343,51,302,51],[343,53,302,53],[344,8,303,12],[345,8,304,12],[345,14,304,18,"L"],[345,15,304,19],[345,18,304,22,"Fp"],[345,20,304,24],[345,21,304,25,"BYTES"],[345,26,304,30],[346,8,305,12],[346,14,305,18,"x"],[346,15,305,19],[346,18,305,22,"Fp"],[346,20,305,24],[346,21,305,25,"fromBytes"],[346,30,305,34],[346,31,305,35,"tail"],[346,35,305,39],[346,36,305,40,"subarray"],[346,44,305,48],[346,45,305,49],[346,46,305,50],[346,48,305,52,"L"],[346,49,305,53],[346,50,305,54],[346,51,305,55],[347,8,306,12],[347,14,306,18,"y"],[347,15,306,19],[347,18,306,22,"Fp"],[347,20,306,24],[347,21,306,25,"fromBytes"],[347,30,306,34],[347,31,306,35,"tail"],[347,35,306,39],[347,36,306,40,"subarray"],[347,44,306,48],[347,45,306,49,"L"],[347,46,306,50],[347,48,306,52,"L"],[347,49,306,53],[347,52,306,56],[347,53,306,57],[347,54,306,58],[347,55,306,59],[348,8,307,12],[348,12,307,16],[348,13,307,17,"isValidXY"],[348,22,307,26],[348,23,307,27,"x"],[348,24,307,28],[348,26,307,30,"y"],[348,27,307,31],[348,28,307,32],[348,30,308,16],[348,36,308,22],[348,40,308,26,"Error"],[348,45,308,31],[348,46,308,32],[348,74,308,60],[348,75,308,61],[349,8,309,12],[349,15,309,19],[350,10,309,21,"x"],[350,11,309,22],[351,10,309,24,"y"],[352,8,309,26],[352,9,309,27],[353,6,310,8],[353,7,310,9],[353,13,311,13],[354,8,312,12],[354,14,312,18],[354,18,312,22,"Error"],[354,23,312,27],[354,24,312,28],[354,49,312,53,"length"],[354,55,312,59],[354,80,312,84,"comp"],[354,84,312,88],[354,104,312,108,"uncomp"],[354,110,312,114],[354,112,312,116],[354,113,312,117],[355,6,313,8],[356,4,314,4],[357,4,315,4],[357,10,315,10,"encodePoint"],[357,21,315,21],[357,24,315,24,"extraOpts"],[357,33,315,33],[357,34,315,34,"toBytes"],[357,41,315,41],[357,45,315,45,"pointToBytes"],[357,57,315,57],[358,4,316,4],[358,10,316,10,"decodePoint"],[358,21,316,21],[358,24,316,24,"extraOpts"],[358,33,316,33],[358,34,316,34,"fromBytes"],[358,43,316,43],[358,47,316,47,"pointFromBytes"],[358,61,316,61],[359,4,317,4],[359,13,317,13,"weierstrassEquation"],[359,32,317,32,"weierstrassEquation"],[359,33,317,33,"x"],[359,34,317,34],[359,36,317,36],[360,6,318,8],[360,12,318,14,"x2"],[360,14,318,16],[360,17,318,19,"Fp"],[360,19,318,21],[360,20,318,22,"sqr"],[360,23,318,25],[360,24,318,26,"x"],[360,25,318,27],[360,26,318,28],[360,27,318,29],[360,28,318,30],[361,6,319,8],[361,12,319,14,"x3"],[361,14,319,16],[361,17,319,19,"Fp"],[361,19,319,21],[361,20,319,22,"mul"],[361,23,319,25],[361,24,319,26,"x2"],[361,26,319,28],[361,28,319,30,"x"],[361,29,319,31],[361,30,319,32],[361,31,319,33],[361,32,319,34],[362,6,320,8],[362,13,320,15,"Fp"],[362,15,320,17],[362,16,320,18,"add"],[362,19,320,21],[362,20,320,22,"Fp"],[362,22,320,24],[362,23,320,25,"add"],[362,26,320,28],[362,27,320,29,"x3"],[362,29,320,31],[362,31,320,33,"Fp"],[362,33,320,35],[362,34,320,36,"mul"],[362,37,320,39],[362,38,320,40,"x"],[362,39,320,41],[362,41,320,43,"CURVE"],[362,46,320,48],[362,47,320,49,"a"],[362,48,320,50],[362,49,320,51],[362,50,320,52],[362,52,320,54,"CURVE"],[362,57,320,59],[362,58,320,60,"b"],[362,59,320,61],[362,60,320,62],[362,61,320,63],[362,62,320,64],[363,4,321,4],[364,4,322,4],[365,4,323,4],[366,4,324,4],[366,13,324,13,"isValidXY"],[366,22,324,22,"isValidXY"],[366,23,324,23,"x"],[366,24,324,24],[366,26,324,26,"y"],[366,27,324,27],[366,29,324,29],[367,6,325,8],[367,12,325,14,"left"],[367,16,325,18],[367,19,325,21,"Fp"],[367,21,325,23],[367,22,325,24,"sqr"],[367,25,325,27],[367,26,325,28,"y"],[367,27,325,29],[367,28,325,30],[367,29,325,31],[367,30,325,32],[368,6,326,8],[368,12,326,14,"right"],[368,17,326,19],[368,20,326,22,"weierstrassEquation"],[368,39,326,41],[368,40,326,42,"x"],[368,41,326,43],[368,42,326,44],[368,43,326,45],[368,44,326,46],[369,6,327,8],[369,13,327,15,"Fp"],[369,15,327,17],[369,16,327,18,"eql"],[369,19,327,21],[369,20,327,22,"left"],[369,24,327,26],[369,26,327,28,"right"],[369,31,327,33],[369,32,327,34],[370,4,328,4],[371,4,329,4],[372,4,330,4],[373,4,331,4],[373,8,331,8],[373,9,331,9,"isValidXY"],[373,18,331,18],[373,19,331,19,"CURVE"],[373,24,331,24],[373,25,331,25,"Gx"],[373,27,331,27],[373,29,331,29,"CURVE"],[373,34,331,34],[373,35,331,35,"Gy"],[373,37,331,37],[373,38,331,38],[373,40,332,8],[373,46,332,14],[373,50,332,18,"Error"],[373,55,332,23],[373,56,332,24],[373,91,332,59],[373,92,332,60],[374,4,333,4],[375,4,334,4],[376,4,335,4],[376,10,335,10,"_4a3"],[376,14,335,14],[376,17,335,17,"Fp"],[376,19,335,19],[376,20,335,20,"mul"],[376,23,335,23],[376,24,335,24,"Fp"],[376,26,335,26],[376,27,335,27,"pow"],[376,30,335,30],[376,31,335,31,"CURVE"],[376,36,335,36],[376,37,335,37,"a"],[376,38,335,38],[376,40,335,40,"_3n"],[376,43,335,43],[376,44,335,44],[376,46,335,46,"_4n"],[376,49,335,49],[376,50,335,50],[377,4,336,4],[377,10,336,10,"_27b2"],[377,15,336,15],[377,18,336,18,"Fp"],[377,20,336,20],[377,21,336,21,"mul"],[377,24,336,24],[377,25,336,25,"Fp"],[377,27,336,27],[377,28,336,28,"sqr"],[377,31,336,31],[377,32,336,32,"CURVE"],[377,37,336,37],[377,38,336,38,"b"],[377,39,336,39],[377,40,336,40],[377,42,336,42,"BigInt"],[377,48,336,48],[377,49,336,49],[377,51,336,51],[377,52,336,52],[377,53,336,53],[378,4,337,4],[378,8,337,8,"Fp"],[378,10,337,10],[378,11,337,11,"is0"],[378,14,337,14],[378,15,337,15,"Fp"],[378,17,337,17],[378,18,337,18,"add"],[378,21,337,21],[378,22,337,22,"_4a3"],[378,26,337,26],[378,28,337,28,"_27b2"],[378,33,337,33],[378,34,337,34],[378,35,337,35],[378,37,338,8],[378,43,338,14],[378,47,338,18,"Error"],[378,52,338,23],[378,53,338,24],[378,79,338,50],[378,80,338,51],[379,4,339,4],[380,4,340,4],[380,13,340,13,"acoord"],[380,19,340,19,"acoord"],[380,20,340,20,"title"],[380,25,340,25],[380,27,340,27,"n"],[380,28,340,28],[380,30,340,30,"banZero"],[380,37,340,37],[380,40,340,40],[380,45,340,45],[380,47,340,47],[381,6,341,8],[381,10,341,12],[381,11,341,13,"Fp"],[381,13,341,15],[381,14,341,16,"isValid"],[381,21,341,23],[381,22,341,24,"n"],[381,23,341,25],[381,24,341,26],[381,28,341,31,"banZero"],[381,35,341,38],[381,39,341,42,"Fp"],[381,41,341,44],[381,42,341,45,"is0"],[381,45,341,48],[381,46,341,49,"n"],[381,47,341,50],[381,48,341,52],[381,50,342,12],[381,56,342,18],[381,60,342,22,"Error"],[381,65,342,27],[381,66,342,28],[381,90,342,52,"title"],[381,95,342,57],[381,97,342,59],[381,98,342,60],[382,6,343,8],[382,13,343,15,"n"],[382,14,343,16],[383,4,344,4],[384,4,345,4],[384,13,345,13,"aprjpoint"],[384,22,345,22,"aprjpoint"],[384,23,345,23,"other"],[384,28,345,28],[384,30,345,30],[385,6,346,8],[385,10,346,12],[385,12,346,14,"other"],[385,17,346,19],[385,29,346,31,"Point"],[385,34,346,36],[385,35,346,37],[385,37,347,12],[385,43,347,18],[385,47,347,22,"Error"],[385,52,347,27],[385,53,347,28],[385,79,347,54],[385,80,347,55],[386,4,348,4],[387,4,349,4],[387,13,349,13,"splitEndoScalarN"],[387,29,349,29,"splitEndoScalarN"],[387,30,349,30,"k"],[387,31,349,31],[387,33,349,33],[388,6,350,8],[388,10,350,12],[388,11,350,13,"endo"],[388,15,350,17],[388,19,350,21],[388,20,350,22,"endo"],[388,24,350,26],[388,25,350,27,"basises"],[388,32,350,34],[388,34,351,12],[388,40,351,18],[388,44,351,22,"Error"],[388,49,351,27],[388,50,351,28],[388,59,351,37],[388,60,351,38],[389,6,352,8],[389,13,352,15,"_splitEndoScalar"],[389,29,352,31],[389,30,352,32,"k"],[389,31,352,33],[389,33,352,35,"endo"],[389,37,352,39],[389,38,352,40,"basises"],[389,45,352,47],[389,47,352,49,"Fn"],[389,49,352,51],[389,50,352,52,"ORDER"],[389,55,352,57],[389,56,352,58],[390,4,353,4],[391,4,354,4],[392,4,355,4],[393,4,356,4],[394,4,357,4],[395,4,358,4],[395,10,358,10,"toAffineMemo"],[395,22,358,22],[395,25,358,25],[395,29,358,25,"memoized"],[395,45,358,33],[395,47,358,34],[395,48,358,35,"p"],[395,49,358,36],[395,51,358,38,"iz"],[395,53,358,40],[395,58,358,45],[396,6,359,8],[396,12,359,14],[397,8,359,16,"X"],[397,9,359,17],[398,8,359,19,"Y"],[398,9,359,20],[399,8,359,22,"Z"],[400,6,359,24],[400,7,359,25],[400,10,359,28,"p"],[400,11,359,29],[401,6,360,8],[402,6,361,8],[402,10,361,12,"Fp"],[402,12,361,14],[402,13,361,15,"eql"],[402,16,361,18],[402,17,361,19,"Z"],[402,18,361,20],[402,20,361,22,"Fp"],[402,22,361,24],[402,23,361,25,"ONE"],[402,26,361,28],[402,27,361,29],[402,29,362,12],[402,36,362,19],[403,8,362,21,"x"],[403,9,362,22],[403,11,362,24,"X"],[403,12,362,25],[404,8,362,27,"y"],[404,9,362,28],[404,11,362,30,"Y"],[405,6,362,32],[405,7,362,33],[406,6,363,8],[406,12,363,14,"is0"],[406,15,363,17],[406,18,363,20,"p"],[406,19,363,21],[406,20,363,22,"is0"],[406,23,363,25],[406,24,363,26],[406,25,363,27],[407,6,364,8],[408,6,365,8],[409,6,366,8],[409,10,366,12,"iz"],[409,12,366,14],[409,16,366,18],[409,20,366,22],[409,22,367,12,"iz"],[409,24,367,14],[409,27,367,17,"is0"],[409,30,367,20],[409,33,367,23,"Fp"],[409,35,367,25],[409,36,367,26,"ONE"],[409,39,367,29],[409,42,367,32,"Fp"],[409,44,367,34],[409,45,367,35,"inv"],[409,48,367,38],[409,49,367,39,"Z"],[409,50,367,40],[409,51,367,41],[410,6,368,8],[410,12,368,14,"x"],[410,13,368,15],[410,16,368,18,"Fp"],[410,18,368,20],[410,19,368,21,"mul"],[410,22,368,24],[410,23,368,25,"X"],[410,24,368,26],[410,26,368,28,"iz"],[410,28,368,30],[410,29,368,31],[411,6,369,8],[411,12,369,14,"y"],[411,13,369,15],[411,16,369,18,"Fp"],[411,18,369,20],[411,19,369,21,"mul"],[411,22,369,24],[411,23,369,25,"Y"],[411,24,369,26],[411,26,369,28,"iz"],[411,28,369,30],[411,29,369,31],[412,6,370,8],[412,12,370,14,"zz"],[412,14,370,16],[412,17,370,19,"Fp"],[412,19,370,21],[412,20,370,22,"mul"],[412,23,370,25],[412,24,370,26,"Z"],[412,25,370,27],[412,27,370,29,"iz"],[412,29,370,31],[412,30,370,32],[413,6,371,8],[413,10,371,12,"is0"],[413,13,371,15],[413,15,372,12],[413,22,372,19],[414,8,372,21,"x"],[414,9,372,22],[414,11,372,24,"Fp"],[414,13,372,26],[414,14,372,27,"ZERO"],[414,18,372,31],[415,8,372,33,"y"],[415,9,372,34],[415,11,372,36,"Fp"],[415,13,372,38],[415,14,372,39,"ZERO"],[416,6,372,44],[416,7,372,45],[417,6,373,8],[417,10,373,12],[417,11,373,13,"Fp"],[417,13,373,15],[417,14,373,16,"eql"],[417,17,373,19],[417,18,373,20,"zz"],[417,20,373,22],[417,22,373,24,"Fp"],[417,24,373,26],[417,25,373,27,"ONE"],[417,28,373,30],[417,29,373,31],[417,31,374,12],[417,37,374,18],[417,41,374,22,"Error"],[417,46,374,27],[417,47,374,28],[417,65,374,46],[417,66,374,47],[418,6,375,8],[418,13,375,15],[419,8,375,17,"x"],[419,9,375,18],[420,8,375,20,"y"],[421,6,375,22],[421,7,375,23],[422,4,376,4],[422,5,376,5],[422,6,376,6],[423,4,377,4],[424,4,378,4],[425,4,379,4],[425,10,379,10,"assertValidMemo"],[425,25,379,25],[425,28,379,28],[425,32,379,28,"memoized"],[425,48,379,36],[425,50,379,38,"p"],[425,51,379,39],[425,55,379,44],[426,6,380,8],[426,10,380,12,"p"],[426,11,380,13],[426,12,380,14,"is0"],[426,15,380,17],[426,16,380,18],[426,17,380,19],[426,19,380,21],[427,8,381,12],[428,8,382,12],[429,8,383,12],[430,8,384,12],[430,12,384,16,"extraOpts"],[430,21,384,25],[430,22,384,26,"allowInfinityPoint"],[430,40,384,44],[430,44,384,48],[430,45,384,49,"Fp"],[430,47,384,51],[430,48,384,52,"is0"],[430,51,384,55],[430,52,384,56,"p"],[430,53,384,57],[430,54,384,58,"Y"],[430,55,384,59],[430,56,384,60],[430,58,385,16],[431,8,386,12],[431,14,386,18],[431,18,386,22,"Error"],[431,23,386,27],[431,24,386,28],[431,41,386,45],[431,42,386,46],[432,6,387,8],[433,6,388,8],[434,6,389,8],[434,12,389,14],[435,8,389,16,"x"],[435,9,389,17],[436,8,389,19,"y"],[437,6,389,21],[437,7,389,22],[437,10,389,25,"p"],[437,11,389,26],[437,12,389,27,"toAffine"],[437,20,389,35],[437,21,389,36],[437,22,389,37],[438,6,390,8],[438,10,390,12],[438,11,390,13,"Fp"],[438,13,390,15],[438,14,390,16,"isValid"],[438,21,390,23],[438,22,390,24,"x"],[438,23,390,25],[438,24,390,26],[438,28,390,30],[438,29,390,31,"Fp"],[438,31,390,33],[438,32,390,34,"isValid"],[438,39,390,41],[438,40,390,42,"y"],[438,41,390,43],[438,42,390,44],[438,44,391,12],[438,50,391,18],[438,54,391,22,"Error"],[438,59,391,27],[438,60,391,28],[438,98,391,66],[438,99,391,67],[439,6,392,8],[439,10,392,12],[439,11,392,13,"isValidXY"],[439,20,392,22],[439,21,392,23,"x"],[439,22,392,24],[439,24,392,26,"y"],[439,25,392,27],[439,26,392,28],[439,28,393,12],[439,34,393,18],[439,38,393,22,"Error"],[439,43,393,27],[439,44,393,28],[439,79,393,63],[439,80,393,64],[440,6,394,8],[440,10,394,12],[440,11,394,13,"p"],[440,12,394,14],[440,13,394,15,"isTorsionFree"],[440,26,394,28],[440,27,394,29],[440,28,394,30],[440,30,395,12],[440,36,395,18],[440,40,395,22,"Error"],[440,45,395,27],[440,46,395,28],[440,86,395,68],[440,87,395,69],[441,6,396,8],[441,13,396,15],[441,17,396,19],[442,4,397,4],[442,5,397,5],[442,6,397,6],[443,4,398,4],[443,13,398,13,"finishEndo"],[443,23,398,23,"finishEndo"],[443,24,398,24,"endoBeta"],[443,32,398,32],[443,34,398,34,"k1p"],[443,37,398,37],[443,39,398,39,"k2p"],[443,42,398,42],[443,44,398,44,"k1neg"],[443,49,398,49],[443,51,398,51,"k2neg"],[443,56,398,56],[443,58,398,58],[444,6,399,8,"k2p"],[444,9,399,11],[444,12,399,14],[444,16,399,18,"Point"],[444,21,399,23],[444,22,399,24,"Fp"],[444,24,399,26],[444,25,399,27,"mul"],[444,28,399,30],[444,29,399,31,"k2p"],[444,32,399,34],[444,33,399,35,"X"],[444,34,399,36],[444,36,399,38,"endoBeta"],[444,44,399,46],[444,45,399,47],[444,47,399,49,"k2p"],[444,50,399,52],[444,51,399,53,"Y"],[444,52,399,54],[444,54,399,56,"k2p"],[444,57,399,59],[444,58,399,60,"Z"],[444,59,399,61],[444,60,399,62],[445,6,400,8,"k1p"],[445,9,400,11],[445,12,400,14],[445,16,400,14,"negateCt"],[445,31,400,22],[445,33,400,23,"k1neg"],[445,38,400,28],[445,40,400,30,"k1p"],[445,43,400,33],[445,44,400,34],[446,6,401,8,"k2p"],[446,9,401,11],[446,12,401,14],[446,16,401,14,"negateCt"],[446,31,401,22],[446,33,401,23,"k2neg"],[446,38,401,28],[446,40,401,30,"k2p"],[446,43,401,33],[446,44,401,34],[447,6,402,8],[447,13,402,15,"k1p"],[447,16,402,18],[447,17,402,19,"add"],[447,20,402,22],[447,21,402,23,"k2p"],[447,24,402,26],[447,25,402,27],[448,4,403,4],[449,4,404,4],[450,0,405,0],[451,0,406,0],[452,0,407,0],[453,0,408,0],[454,4,409,4],[454,10,409,10,"Point"],[454,15,409,15],[454,16,409,16],[455,6,410,8],[456,6,411,8,"constructor"],[456,17,411,19,"constructor"],[456,18,411,20,"X"],[456,19,411,21],[456,21,411,23,"Y"],[456,22,411,24],[456,24,411,26,"Z"],[456,25,411,27],[456,27,411,29],[457,8,412,12],[457,12,412,16],[457,13,412,17,"X"],[457,14,412,18],[457,17,412,21,"acoord"],[457,23,412,27],[457,24,412,28],[457,27,412,31],[457,29,412,33,"X"],[457,30,412,34],[457,31,412,35],[458,8,413,12],[458,12,413,16],[458,13,413,17,"Y"],[458,14,413,18],[458,17,413,21,"acoord"],[458,23,413,27],[458,24,413,28],[458,27,413,31],[458,29,413,33,"Y"],[458,30,413,34],[458,32,413,36],[458,36,413,40],[458,37,413,41],[459,8,414,12],[459,12,414,16],[459,13,414,17,"Z"],[459,14,414,18],[459,17,414,21,"acoord"],[459,23,414,27],[459,24,414,28],[459,27,414,31],[459,29,414,33,"Z"],[459,30,414,34],[459,31,414,35],[460,8,415,12,"Object"],[460,14,415,18],[460,15,415,19,"freeze"],[460,21,415,25],[460,22,415,26],[460,26,415,30],[460,27,415,31],[461,6,416,8],[462,6,417,8],[462,13,417,15,"CURVE"],[462,18,417,20,"CURVE"],[462,19,417,20],[462,21,417,23],[463,8,418,12],[463,15,418,19,"CURVE"],[463,20,418,24],[464,6,419,8],[465,6,420,8],[466,6,421,8],[466,13,421,15,"fromAffine"],[466,23,421,25,"fromAffine"],[466,24,421,26,"p"],[466,25,421,27],[466,27,421,29],[467,8,422,12],[467,14,422,18],[468,10,422,20,"x"],[468,11,422,21],[469,10,422,23,"y"],[470,8,422,25],[470,9,422,26],[470,12,422,29,"p"],[470,13,422,30],[470,17,422,34],[470,18,422,35],[470,19,422,36],[471,8,423,12],[471,12,423,16],[471,13,423,17,"p"],[471,14,423,18],[471,18,423,22],[471,19,423,23,"Fp"],[471,21,423,25],[471,22,423,26,"isValid"],[471,29,423,33],[471,30,423,34,"x"],[471,31,423,35],[471,32,423,36],[471,36,423,40],[471,37,423,41,"Fp"],[471,39,423,43],[471,40,423,44,"isValid"],[471,47,423,51],[471,48,423,52,"y"],[471,49,423,53],[471,50,423,54],[471,52,424,16],[471,58,424,22],[471,62,424,26,"Error"],[471,67,424,31],[471,68,424,32],[471,90,424,54],[471,91,424,55],[472,8,425,12],[472,12,425,16,"p"],[472,13,425,17],[472,25,425,29,"Point"],[472,30,425,34],[472,32,426,16],[472,38,426,22],[472,42,426,26,"Error"],[472,47,426,31],[472,48,426,32],[472,78,426,62],[472,79,426,63],[473,8,427,12],[474,8,428,12],[474,12,428,16,"Fp"],[474,14,428,18],[474,15,428,19,"is0"],[474,18,428,22],[474,19,428,23,"x"],[474,20,428,24],[474,21,428,25],[474,25,428,29,"Fp"],[474,27,428,31],[474,28,428,32,"is0"],[474,31,428,35],[474,32,428,36,"y"],[474,33,428,37],[474,34,428,38],[474,36,429,16],[474,43,429,23,"Point"],[474,48,429,28],[474,49,429,29,"ZERO"],[474,53,429,33],[475,8,430,12],[475,15,430,19],[475,19,430,23,"Point"],[475,24,430,28],[475,25,430,29,"x"],[475,26,430,30],[475,28,430,32,"y"],[475,29,430,33],[475,31,430,35,"Fp"],[475,33,430,37],[475,34,430,38,"ONE"],[475,37,430,41],[475,38,430,42],[476,6,431,8],[477,6,432,8],[477,13,432,15,"fromBytes"],[477,22,432,24,"fromBytes"],[477,23,432,25,"bytes"],[477,28,432,30],[477,30,432,32],[478,8,433,12],[478,14,433,18,"P"],[478,15,433,19],[478,18,433,22,"Point"],[478,23,433,27],[478,24,433,28,"fromAffine"],[478,34,433,38],[478,35,433,39,"decodePoint"],[478,46,433,50],[478,47,433,51],[478,51,433,51,"abytes"],[478,67,433,57],[478,69,433,58,"bytes"],[478,74,433,63],[478,76,433,65,"undefined"],[478,85,433,74],[478,87,433,76],[478,94,433,83],[478,95,433,84],[478,96,433,85],[478,97,433,86],[479,8,434,12,"P"],[479,9,434,13],[479,10,434,14,"assertValidity"],[479,24,434,28],[479,25,434,29],[479,26,434,30],[480,8,435,12],[480,15,435,19,"P"],[480,16,435,20],[481,6,436,8],[482,6,437,8],[482,13,437,15,"fromHex"],[482,20,437,22,"fromHex"],[482,21,437,23,"hex"],[482,24,437,26],[482,26,437,28],[483,8,438,12],[483,15,438,19,"Point"],[483,20,438,24],[483,21,438,25,"fromBytes"],[483,30,438,34],[483,31,438,35],[483,35,438,35,"ensureBytes"],[483,54,438,46],[483,56,438,47],[483,66,438,57],[483,68,438,59,"hex"],[483,71,438,62],[483,72,438,63],[483,73,438,64],[484,6,439,8],[485,6,440,8],[485,10,440,12,"x"],[485,11,440,13,"x"],[485,12,440,13],[485,14,440,16],[486,8,441,12],[486,15,441,19],[486,19,441,23],[486,20,441,24,"toAffine"],[486,28,441,32],[486,29,441,33],[486,30,441,34],[486,31,441,35,"x"],[486,32,441,36],[487,6,442,8],[488,6,443,8],[488,10,443,12,"y"],[488,11,443,13,"y"],[488,12,443,13],[488,14,443,16],[489,8,444,12],[489,15,444,19],[489,19,444,23],[489,20,444,24,"toAffine"],[489,28,444,32],[489,29,444,33],[489,30,444,34],[489,31,444,35,"y"],[489,32,444,36],[490,6,445,8],[491,6,446,8],[492,0,447,0],[493,0,448,0],[494,0,449,0],[495,0,450,0],[496,0,451,0],[497,6,452,8,"precompute"],[497,16,452,18,"precompute"],[497,17,452,19,"windowSize"],[497,27,452,29],[497,30,452,32],[497,31,452,33],[497,33,452,35,"isLazy"],[497,39,452,41],[497,42,452,44],[497,46,452,48],[497,48,452,50],[498,8,453,12,"wnaf"],[498,12,453,16],[498,13,453,17,"createCache"],[498,24,453,28],[498,25,453,29],[498,29,453,33],[498,31,453,35,"windowSize"],[498,41,453,45],[498,42,453,46],[499,8,454,12],[499,12,454,16],[499,13,454,17,"isLazy"],[499,19,454,23],[499,21,455,16],[499,25,455,20],[499,26,455,21,"multiply"],[499,34,455,29],[499,35,455,30,"_3n"],[499,38,455,33],[499,39,455,34],[499,40,455,35],[499,41,455,36],[500,8,456,12],[500,15,456,19],[500,19,456,23],[501,6,457,8],[502,6,458,8],[503,6,459,8],[504,6,460,8,"assertValidity"],[504,20,460,22,"assertValidity"],[504,21,460,22],[504,23,460,25],[505,8,461,12,"assertValidMemo"],[505,23,461,27],[505,24,461,28],[505,28,461,32],[505,29,461,33],[506,6,462,8],[507,6,463,8,"hasEvenY"],[507,14,463,16,"hasEvenY"],[507,15,463,16],[507,17,463,19],[508,8,464,12],[508,14,464,18],[509,10,464,20,"y"],[510,8,464,22],[510,9,464,23],[510,12,464,26],[510,16,464,30],[510,17,464,31,"toAffine"],[510,25,464,39],[510,26,464,40],[510,27,464,41],[511,8,465,12],[511,12,465,16],[511,13,465,17,"Fp"],[511,15,465,19],[511,16,465,20,"isOdd"],[511,21,465,25],[511,23,466,16],[511,29,466,22],[511,33,466,26,"Error"],[511,38,466,31],[511,39,466,32],[511,68,466,61],[511,69,466,62],[512,8,467,12],[512,15,467,19],[512,16,467,20,"Fp"],[512,18,467,22],[512,19,467,23,"isOdd"],[512,24,467,28],[512,25,467,29,"y"],[512,26,467,30],[512,27,467,31],[513,6,468,8],[514,6,469,8],[515,6,470,8,"equals"],[515,12,470,14,"equals"],[515,13,470,15,"other"],[515,18,470,20],[515,20,470,22],[516,8,471,12,"aprjpoint"],[516,17,471,21],[516,18,471,22,"other"],[516,23,471,27],[516,24,471,28],[517,8,472,12],[517,14,472,18],[518,10,472,20,"X"],[518,11,472,21],[518,13,472,23,"X1"],[518,15,472,25],[519,10,472,27,"Y"],[519,11,472,28],[519,13,472,30,"Y1"],[519,15,472,32],[520,10,472,34,"Z"],[520,11,472,35],[520,13,472,37,"Z1"],[521,8,472,40],[521,9,472,41],[521,12,472,44],[521,16,472,48],[522,8,473,12],[522,14,473,18],[523,10,473,20,"X"],[523,11,473,21],[523,13,473,23,"X2"],[523,15,473,25],[524,10,473,27,"Y"],[524,11,473,28],[524,13,473,30,"Y2"],[524,15,473,32],[525,10,473,34,"Z"],[525,11,473,35],[525,13,473,37,"Z2"],[526,8,473,40],[526,9,473,41],[526,12,473,44,"other"],[526,17,473,49],[527,8,474,12],[527,14,474,18,"U1"],[527,16,474,20],[527,19,474,23,"Fp"],[527,21,474,25],[527,22,474,26,"eql"],[527,25,474,29],[527,26,474,30,"Fp"],[527,28,474,32],[527,29,474,33,"mul"],[527,32,474,36],[527,33,474,37,"X1"],[527,35,474,39],[527,37,474,41,"Z2"],[527,39,474,43],[527,40,474,44],[527,42,474,46,"Fp"],[527,44,474,48],[527,45,474,49,"mul"],[527,48,474,52],[527,49,474,53,"X2"],[527,51,474,55],[527,53,474,57,"Z1"],[527,55,474,59],[527,56,474,60],[527,57,474,61],[528,8,475,12],[528,14,475,18,"U2"],[528,16,475,20],[528,19,475,23,"Fp"],[528,21,475,25],[528,22,475,26,"eql"],[528,25,475,29],[528,26,475,30,"Fp"],[528,28,475,32],[528,29,475,33,"mul"],[528,32,475,36],[528,33,475,37,"Y1"],[528,35,475,39],[528,37,475,41,"Z2"],[528,39,475,43],[528,40,475,44],[528,42,475,46,"Fp"],[528,44,475,48],[528,45,475,49,"mul"],[528,48,475,52],[528,49,475,53,"Y2"],[528,51,475,55],[528,53,475,57,"Z1"],[528,55,475,59],[528,56,475,60],[528,57,475,61],[529,8,476,12],[529,15,476,19,"U1"],[529,17,476,21],[529,21,476,25,"U2"],[529,23,476,27],[530,6,477,8],[531,6,478,8],[532,6,479,8,"negate"],[532,12,479,14,"negate"],[532,13,479,14],[532,15,479,17],[533,8,480,12],[533,15,480,19],[533,19,480,23,"Point"],[533,24,480,28],[533,25,480,29],[533,29,480,33],[533,30,480,34,"X"],[533,31,480,35],[533,33,480,37,"Fp"],[533,35,480,39],[533,36,480,40,"neg"],[533,39,480,43],[533,40,480,44],[533,44,480,48],[533,45,480,49,"Y"],[533,46,480,50],[533,47,480,51],[533,49,480,53],[533,53,480,57],[533,54,480,58,"Z"],[533,55,480,59],[533,56,480,60],[534,6,481,8],[535,6,482,8],[536,6,483,8],[537,6,484,8],[538,6,485,8],[539,6,486,8,"double"],[539,12,486,14,"double"],[539,13,486,14],[539,15,486,17],[540,8,487,12],[540,14,487,18],[541,10,487,20,"a"],[541,11,487,21],[542,10,487,23,"b"],[543,8,487,25],[543,9,487,26],[543,12,487,29,"CURVE"],[543,17,487,34],[544,8,488,12],[544,14,488,18,"b3"],[544,16,488,20],[544,19,488,23,"Fp"],[544,21,488,25],[544,22,488,26,"mul"],[544,25,488,29],[544,26,488,30,"b"],[544,27,488,31],[544,29,488,33,"_3n"],[544,32,488,36],[544,33,488,37],[545,8,489,12],[545,14,489,18],[546,10,489,20,"X"],[546,11,489,21],[546,13,489,23,"X1"],[546,15,489,25],[547,10,489,27,"Y"],[547,11,489,28],[547,13,489,30,"Y1"],[547,15,489,32],[548,10,489,34,"Z"],[548,11,489,35],[548,13,489,37,"Z1"],[549,8,489,40],[549,9,489,41],[549,12,489,44],[549,16,489,48],[550,8,490,12],[550,12,490,16,"X3"],[550,14,490,18],[550,17,490,21,"Fp"],[550,19,490,23],[550,20,490,24,"ZERO"],[550,24,490,28],[551,10,490,30,"Y3"],[551,12,490,32],[551,15,490,35,"Fp"],[551,17,490,37],[551,18,490,38,"ZERO"],[551,22,490,42],[552,10,490,44,"Z3"],[552,12,490,46],[552,15,490,49,"Fp"],[552,17,490,51],[552,18,490,52,"ZERO"],[552,22,490,56],[552,23,490,57],[552,24,490,58],[553,8,491,12],[553,12,491,16,"t0"],[553,14,491,18],[553,17,491,21,"Fp"],[553,19,491,23],[553,20,491,24,"mul"],[553,23,491,27],[553,24,491,28,"X1"],[553,26,491,30],[553,28,491,32,"X1"],[553,30,491,34],[553,31,491,35],[553,32,491,36],[553,33,491,37],[554,8,492,12],[554,12,492,16,"t1"],[554,14,492,18],[554,17,492,21,"Fp"],[554,19,492,23],[554,20,492,24,"mul"],[554,23,492,27],[554,24,492,28,"Y1"],[554,26,492,30],[554,28,492,32,"Y1"],[554,30,492,34],[554,31,492,35],[555,8,493,12],[555,12,493,16,"t2"],[555,14,493,18],[555,17,493,21,"Fp"],[555,19,493,23],[555,20,493,24,"mul"],[555,23,493,27],[555,24,493,28,"Z1"],[555,26,493,30],[555,28,493,32,"Z1"],[555,30,493,34],[555,31,493,35],[556,8,494,12],[556,12,494,16,"t3"],[556,14,494,18],[556,17,494,21,"Fp"],[556,19,494,23],[556,20,494,24,"mul"],[556,23,494,27],[556,24,494,28,"X1"],[556,26,494,30],[556,28,494,32,"Y1"],[556,30,494,34],[556,31,494,35],[557,8,495,12,"t3"],[557,10,495,14],[557,13,495,17,"Fp"],[557,15,495,19],[557,16,495,20,"add"],[557,19,495,23],[557,20,495,24,"t3"],[557,22,495,26],[557,24,495,28,"t3"],[557,26,495,30],[557,27,495,31],[557,28,495,32],[557,29,495,33],[558,8,496,12,"Z3"],[558,10,496,14],[558,13,496,17,"Fp"],[558,15,496,19],[558,16,496,20,"mul"],[558,19,496,23],[558,20,496,24,"X1"],[558,22,496,26],[558,24,496,28,"Z1"],[558,26,496,30],[558,27,496,31],[559,8,497,12,"Z3"],[559,10,497,14],[559,13,497,17,"Fp"],[559,15,497,19],[559,16,497,20,"add"],[559,19,497,23],[559,20,497,24,"Z3"],[559,22,497,26],[559,24,497,28,"Z3"],[559,26,497,30],[559,27,497,31],[560,8,498,12,"X3"],[560,10,498,14],[560,13,498,17,"Fp"],[560,15,498,19],[560,16,498,20,"mul"],[560,19,498,23],[560,20,498,24,"a"],[560,21,498,25],[560,23,498,27,"Z3"],[560,25,498,29],[560,26,498,30],[561,8,499,12,"Y3"],[561,10,499,14],[561,13,499,17,"Fp"],[561,15,499,19],[561,16,499,20,"mul"],[561,19,499,23],[561,20,499,24,"b3"],[561,22,499,26],[561,24,499,28,"t2"],[561,26,499,30],[561,27,499,31],[562,8,500,12,"Y3"],[562,10,500,14],[562,13,500,17,"Fp"],[562,15,500,19],[562,16,500,20,"add"],[562,19,500,23],[562,20,500,24,"X3"],[562,22,500,26],[562,24,500,28,"Y3"],[562,26,500,30],[562,27,500,31],[562,28,500,32],[562,29,500,33],[563,8,501,12,"X3"],[563,10,501,14],[563,13,501,17,"Fp"],[563,15,501,19],[563,16,501,20,"sub"],[563,19,501,23],[563,20,501,24,"t1"],[563,22,501,26],[563,24,501,28,"Y3"],[563,26,501,30],[563,27,501,31],[564,8,502,12,"Y3"],[564,10,502,14],[564,13,502,17,"Fp"],[564,15,502,19],[564,16,502,20,"add"],[564,19,502,23],[564,20,502,24,"t1"],[564,22,502,26],[564,24,502,28,"Y3"],[564,26,502,30],[564,27,502,31],[565,8,503,12,"Y3"],[565,10,503,14],[565,13,503,17,"Fp"],[565,15,503,19],[565,16,503,20,"mul"],[565,19,503,23],[565,20,503,24,"X3"],[565,22,503,26],[565,24,503,28,"Y3"],[565,26,503,30],[565,27,503,31],[566,8,504,12,"X3"],[566,10,504,14],[566,13,504,17,"Fp"],[566,15,504,19],[566,16,504,20,"mul"],[566,19,504,23],[566,20,504,24,"t3"],[566,22,504,26],[566,24,504,28,"X3"],[566,26,504,30],[566,27,504,31],[567,8,505,12,"Z3"],[567,10,505,14],[567,13,505,17,"Fp"],[567,15,505,19],[567,16,505,20,"mul"],[567,19,505,23],[567,20,505,24,"b3"],[567,22,505,26],[567,24,505,28,"Z3"],[567,26,505,30],[567,27,505,31],[567,28,505,32],[567,29,505,33],[568,8,506,12,"t2"],[568,10,506,14],[568,13,506,17,"Fp"],[568,15,506,19],[568,16,506,20,"mul"],[568,19,506,23],[568,20,506,24,"a"],[568,21,506,25],[568,23,506,27,"t2"],[568,25,506,29],[568,26,506,30],[569,8,507,12,"t3"],[569,10,507,14],[569,13,507,17,"Fp"],[569,15,507,19],[569,16,507,20,"sub"],[569,19,507,23],[569,20,507,24,"t0"],[569,22,507,26],[569,24,507,28,"t2"],[569,26,507,30],[569,27,507,31],[570,8,508,12,"t3"],[570,10,508,14],[570,13,508,17,"Fp"],[570,15,508,19],[570,16,508,20,"mul"],[570,19,508,23],[570,20,508,24,"a"],[570,21,508,25],[570,23,508,27,"t3"],[570,25,508,29],[570,26,508,30],[571,8,509,12,"t3"],[571,10,509,14],[571,13,509,17,"Fp"],[571,15,509,19],[571,16,509,20,"add"],[571,19,509,23],[571,20,509,24,"t3"],[571,22,509,26],[571,24,509,28,"Z3"],[571,26,509,30],[571,27,509,31],[572,8,510,12,"Z3"],[572,10,510,14],[572,13,510,17,"Fp"],[572,15,510,19],[572,16,510,20,"add"],[572,19,510,23],[572,20,510,24,"t0"],[572,22,510,26],[572,24,510,28,"t0"],[572,26,510,30],[572,27,510,31],[572,28,510,32],[572,29,510,33],[573,8,511,12,"t0"],[573,10,511,14],[573,13,511,17,"Fp"],[573,15,511,19],[573,16,511,20,"add"],[573,19,511,23],[573,20,511,24,"Z3"],[573,22,511,26],[573,24,511,28,"t0"],[573,26,511,30],[573,27,511,31],[574,8,512,12,"t0"],[574,10,512,14],[574,13,512,17,"Fp"],[574,15,512,19],[574,16,512,20,"add"],[574,19,512,23],[574,20,512,24,"t0"],[574,22,512,26],[574,24,512,28,"t2"],[574,26,512,30],[574,27,512,31],[575,8,513,12,"t0"],[575,10,513,14],[575,13,513,17,"Fp"],[575,15,513,19],[575,16,513,20,"mul"],[575,19,513,23],[575,20,513,24,"t0"],[575,22,513,26],[575,24,513,28,"t3"],[575,26,513,30],[575,27,513,31],[576,8,514,12,"Y3"],[576,10,514,14],[576,13,514,17,"Fp"],[576,15,514,19],[576,16,514,20,"add"],[576,19,514,23],[576,20,514,24,"Y3"],[576,22,514,26],[576,24,514,28,"t0"],[576,26,514,30],[576,27,514,31],[577,8,515,12,"t2"],[577,10,515,14],[577,13,515,17,"Fp"],[577,15,515,19],[577,16,515,20,"mul"],[577,19,515,23],[577,20,515,24,"Y1"],[577,22,515,26],[577,24,515,28,"Z1"],[577,26,515,30],[577,27,515,31],[577,28,515,32],[577,29,515,33],[578,8,516,12,"t2"],[578,10,516,14],[578,13,516,17,"Fp"],[578,15,516,19],[578,16,516,20,"add"],[578,19,516,23],[578,20,516,24,"t2"],[578,22,516,26],[578,24,516,28,"t2"],[578,26,516,30],[578,27,516,31],[579,8,517,12,"t0"],[579,10,517,14],[579,13,517,17,"Fp"],[579,15,517,19],[579,16,517,20,"mul"],[579,19,517,23],[579,20,517,24,"t2"],[579,22,517,26],[579,24,517,28,"t3"],[579,26,517,30],[579,27,517,31],[580,8,518,12,"X3"],[580,10,518,14],[580,13,518,17,"Fp"],[580,15,518,19],[580,16,518,20,"sub"],[580,19,518,23],[580,20,518,24,"X3"],[580,22,518,26],[580,24,518,28,"t0"],[580,26,518,30],[580,27,518,31],[581,8,519,12,"Z3"],[581,10,519,14],[581,13,519,17,"Fp"],[581,15,519,19],[581,16,519,20,"mul"],[581,19,519,23],[581,20,519,24,"t2"],[581,22,519,26],[581,24,519,28,"t1"],[581,26,519,30],[581,27,519,31],[582,8,520,12,"Z3"],[582,10,520,14],[582,13,520,17,"Fp"],[582,15,520,19],[582,16,520,20,"add"],[582,19,520,23],[582,20,520,24,"Z3"],[582,22,520,26],[582,24,520,28,"Z3"],[582,26,520,30],[582,27,520,31],[582,28,520,32],[582,29,520,33],[583,8,521,12,"Z3"],[583,10,521,14],[583,13,521,17,"Fp"],[583,15,521,19],[583,16,521,20,"add"],[583,19,521,23],[583,20,521,24,"Z3"],[583,22,521,26],[583,24,521,28,"Z3"],[583,26,521,30],[583,27,521,31],[584,8,522,12],[584,15,522,19],[584,19,522,23,"Point"],[584,24,522,28],[584,25,522,29,"X3"],[584,27,522,31],[584,29,522,33,"Y3"],[584,31,522,35],[584,33,522,37,"Z3"],[584,35,522,39],[584,36,522,40],[585,6,523,8],[586,6,524,8],[587,6,525,8],[588,6,526,8],[589,6,527,8],[590,6,528,8,"add"],[590,9,528,11,"add"],[590,10,528,12,"other"],[590,15,528,17],[590,17,528,19],[591,8,529,12,"aprjpoint"],[591,17,529,21],[591,18,529,22,"other"],[591,23,529,27],[591,24,529,28],[592,8,530,12],[592,14,530,18],[593,10,530,20,"X"],[593,11,530,21],[593,13,530,23,"X1"],[593,15,530,25],[594,10,530,27,"Y"],[594,11,530,28],[594,13,530,30,"Y1"],[594,15,530,32],[595,10,530,34,"Z"],[595,11,530,35],[595,13,530,37,"Z1"],[596,8,530,40],[596,9,530,41],[596,12,530,44],[596,16,530,48],[597,8,531,12],[597,14,531,18],[598,10,531,20,"X"],[598,11,531,21],[598,13,531,23,"X2"],[598,15,531,25],[599,10,531,27,"Y"],[599,11,531,28],[599,13,531,30,"Y2"],[599,15,531,32],[600,10,531,34,"Z"],[600,11,531,35],[600,13,531,37,"Z2"],[601,8,531,40],[601,9,531,41],[601,12,531,44,"other"],[601,17,531,49],[602,8,532,12],[602,12,532,16,"X3"],[602,14,532,18],[602,17,532,21,"Fp"],[602,19,532,23],[602,20,532,24,"ZERO"],[602,24,532,28],[603,10,532,30,"Y3"],[603,12,532,32],[603,15,532,35,"Fp"],[603,17,532,37],[603,18,532,38,"ZERO"],[603,22,532,42],[604,10,532,44,"Z3"],[604,12,532,46],[604,15,532,49,"Fp"],[604,17,532,51],[604,18,532,52,"ZERO"],[604,22,532,56],[604,23,532,57],[604,24,532,58],[605,8,533,12],[605,14,533,18,"a"],[605,15,533,19],[605,18,533,22,"CURVE"],[605,23,533,27],[605,24,533,28,"a"],[605,25,533,29],[606,8,534,12],[606,14,534,18,"b3"],[606,16,534,20],[606,19,534,23,"Fp"],[606,21,534,25],[606,22,534,26,"mul"],[606,25,534,29],[606,26,534,30,"CURVE"],[606,31,534,35],[606,32,534,36,"b"],[606,33,534,37],[606,35,534,39,"_3n"],[606,38,534,42],[606,39,534,43],[607,8,535,12],[607,12,535,16,"t0"],[607,14,535,18],[607,17,535,21,"Fp"],[607,19,535,23],[607,20,535,24,"mul"],[607,23,535,27],[607,24,535,28,"X1"],[607,26,535,30],[607,28,535,32,"X2"],[607,30,535,34],[607,31,535,35],[607,32,535,36],[607,33,535,37],[608,8,536,12],[608,12,536,16,"t1"],[608,14,536,18],[608,17,536,21,"Fp"],[608,19,536,23],[608,20,536,24,"mul"],[608,23,536,27],[608,24,536,28,"Y1"],[608,26,536,30],[608,28,536,32,"Y2"],[608,30,536,34],[608,31,536,35],[609,8,537,12],[609,12,537,16,"t2"],[609,14,537,18],[609,17,537,21,"Fp"],[609,19,537,23],[609,20,537,24,"mul"],[609,23,537,27],[609,24,537,28,"Z1"],[609,26,537,30],[609,28,537,32,"Z2"],[609,30,537,34],[609,31,537,35],[610,8,538,12],[610,12,538,16,"t3"],[610,14,538,18],[610,17,538,21,"Fp"],[610,19,538,23],[610,20,538,24,"add"],[610,23,538,27],[610,24,538,28,"X1"],[610,26,538,30],[610,28,538,32,"Y1"],[610,30,538,34],[610,31,538,35],[611,8,539,12],[611,12,539,16,"t4"],[611,14,539,18],[611,17,539,21,"Fp"],[611,19,539,23],[611,20,539,24,"add"],[611,23,539,27],[611,24,539,28,"X2"],[611,26,539,30],[611,28,539,32,"Y2"],[611,30,539,34],[611,31,539,35],[611,32,539,36],[611,33,539,37],[612,8,540,12,"t3"],[612,10,540,14],[612,13,540,17,"Fp"],[612,15,540,19],[612,16,540,20,"mul"],[612,19,540,23],[612,20,540,24,"t3"],[612,22,540,26],[612,24,540,28,"t4"],[612,26,540,30],[612,27,540,31],[613,8,541,12,"t4"],[613,10,541,14],[613,13,541,17,"Fp"],[613,15,541,19],[613,16,541,20,"add"],[613,19,541,23],[613,20,541,24,"t0"],[613,22,541,26],[613,24,541,28,"t1"],[613,26,541,30],[613,27,541,31],[614,8,542,12,"t3"],[614,10,542,14],[614,13,542,17,"Fp"],[614,15,542,19],[614,16,542,20,"sub"],[614,19,542,23],[614,20,542,24,"t3"],[614,22,542,26],[614,24,542,28,"t4"],[614,26,542,30],[614,27,542,31],[615,8,543,12,"t4"],[615,10,543,14],[615,13,543,17,"Fp"],[615,15,543,19],[615,16,543,20,"add"],[615,19,543,23],[615,20,543,24,"X1"],[615,22,543,26],[615,24,543,28,"Z1"],[615,26,543,30],[615,27,543,31],[616,8,544,12],[616,12,544,16,"t5"],[616,14,544,18],[616,17,544,21,"Fp"],[616,19,544,23],[616,20,544,24,"add"],[616,23,544,27],[616,24,544,28,"X2"],[616,26,544,30],[616,28,544,32,"Z2"],[616,30,544,34],[616,31,544,35],[616,32,544,36],[616,33,544,37],[617,8,545,12,"t4"],[617,10,545,14],[617,13,545,17,"Fp"],[617,15,545,19],[617,16,545,20,"mul"],[617,19,545,23],[617,20,545,24,"t4"],[617,22,545,26],[617,24,545,28,"t5"],[617,26,545,30],[617,27,545,31],[618,8,546,12,"t5"],[618,10,546,14],[618,13,546,17,"Fp"],[618,15,546,19],[618,16,546,20,"add"],[618,19,546,23],[618,20,546,24,"t0"],[618,22,546,26],[618,24,546,28,"t2"],[618,26,546,30],[618,27,546,31],[619,8,547,12,"t4"],[619,10,547,14],[619,13,547,17,"Fp"],[619,15,547,19],[619,16,547,20,"sub"],[619,19,547,23],[619,20,547,24,"t4"],[619,22,547,26],[619,24,547,28,"t5"],[619,26,547,30],[619,27,547,31],[620,8,548,12,"t5"],[620,10,548,14],[620,13,548,17,"Fp"],[620,15,548,19],[620,16,548,20,"add"],[620,19,548,23],[620,20,548,24,"Y1"],[620,22,548,26],[620,24,548,28,"Z1"],[620,26,548,30],[620,27,548,31],[621,8,549,12,"X3"],[621,10,549,14],[621,13,549,17,"Fp"],[621,15,549,19],[621,16,549,20,"add"],[621,19,549,23],[621,20,549,24,"Y2"],[621,22,549,26],[621,24,549,28,"Z2"],[621,26,549,30],[621,27,549,31],[621,28,549,32],[621,29,549,33],[622,8,550,12,"t5"],[622,10,550,14],[622,13,550,17,"Fp"],[622,15,550,19],[622,16,550,20,"mul"],[622,19,550,23],[622,20,550,24,"t5"],[622,22,550,26],[622,24,550,28,"X3"],[622,26,550,30],[622,27,550,31],[623,8,551,12,"X3"],[623,10,551,14],[623,13,551,17,"Fp"],[623,15,551,19],[623,16,551,20,"add"],[623,19,551,23],[623,20,551,24,"t1"],[623,22,551,26],[623,24,551,28,"t2"],[623,26,551,30],[623,27,551,31],[624,8,552,12,"t5"],[624,10,552,14],[624,13,552,17,"Fp"],[624,15,552,19],[624,16,552,20,"sub"],[624,19,552,23],[624,20,552,24,"t5"],[624,22,552,26],[624,24,552,28,"X3"],[624,26,552,30],[624,27,552,31],[625,8,553,12,"Z3"],[625,10,553,14],[625,13,553,17,"Fp"],[625,15,553,19],[625,16,553,20,"mul"],[625,19,553,23],[625,20,553,24,"a"],[625,21,553,25],[625,23,553,27,"t4"],[625,25,553,29],[625,26,553,30],[626,8,554,12,"X3"],[626,10,554,14],[626,13,554,17,"Fp"],[626,15,554,19],[626,16,554,20,"mul"],[626,19,554,23],[626,20,554,24,"b3"],[626,22,554,26],[626,24,554,28,"t2"],[626,26,554,30],[626,27,554,31],[626,28,554,32],[626,29,554,33],[627,8,555,12,"Z3"],[627,10,555,14],[627,13,555,17,"Fp"],[627,15,555,19],[627,16,555,20,"add"],[627,19,555,23],[627,20,555,24,"X3"],[627,22,555,26],[627,24,555,28,"Z3"],[627,26,555,30],[627,27,555,31],[628,8,556,12,"X3"],[628,10,556,14],[628,13,556,17,"Fp"],[628,15,556,19],[628,16,556,20,"sub"],[628,19,556,23],[628,20,556,24,"t1"],[628,22,556,26],[628,24,556,28,"Z3"],[628,26,556,30],[628,27,556,31],[629,8,557,12,"Z3"],[629,10,557,14],[629,13,557,17,"Fp"],[629,15,557,19],[629,16,557,20,"add"],[629,19,557,23],[629,20,557,24,"t1"],[629,22,557,26],[629,24,557,28,"Z3"],[629,26,557,30],[629,27,557,31],[630,8,558,12,"Y3"],[630,10,558,14],[630,13,558,17,"Fp"],[630,15,558,19],[630,16,558,20,"mul"],[630,19,558,23],[630,20,558,24,"X3"],[630,22,558,26],[630,24,558,28,"Z3"],[630,26,558,30],[630,27,558,31],[631,8,559,12,"t1"],[631,10,559,14],[631,13,559,17,"Fp"],[631,15,559,19],[631,16,559,20,"add"],[631,19,559,23],[631,20,559,24,"t0"],[631,22,559,26],[631,24,559,28,"t0"],[631,26,559,30],[631,27,559,31],[631,28,559,32],[631,29,559,33],[632,8,560,12,"t1"],[632,10,560,14],[632,13,560,17,"Fp"],[632,15,560,19],[632,16,560,20,"add"],[632,19,560,23],[632,20,560,24,"t1"],[632,22,560,26],[632,24,560,28,"t0"],[632,26,560,30],[632,27,560,31],[633,8,561,12,"t2"],[633,10,561,14],[633,13,561,17,"Fp"],[633,15,561,19],[633,16,561,20,"mul"],[633,19,561,23],[633,20,561,24,"a"],[633,21,561,25],[633,23,561,27,"t2"],[633,25,561,29],[633,26,561,30],[634,8,562,12,"t4"],[634,10,562,14],[634,13,562,17,"Fp"],[634,15,562,19],[634,16,562,20,"mul"],[634,19,562,23],[634,20,562,24,"b3"],[634,22,562,26],[634,24,562,28,"t4"],[634,26,562,30],[634,27,562,31],[635,8,563,12,"t1"],[635,10,563,14],[635,13,563,17,"Fp"],[635,15,563,19],[635,16,563,20,"add"],[635,19,563,23],[635,20,563,24,"t1"],[635,22,563,26],[635,24,563,28,"t2"],[635,26,563,30],[635,27,563,31],[636,8,564,12,"t2"],[636,10,564,14],[636,13,564,17,"Fp"],[636,15,564,19],[636,16,564,20,"sub"],[636,19,564,23],[636,20,564,24,"t0"],[636,22,564,26],[636,24,564,28,"t2"],[636,26,564,30],[636,27,564,31],[636,28,564,32],[636,29,564,33],[637,8,565,12,"t2"],[637,10,565,14],[637,13,565,17,"Fp"],[637,15,565,19],[637,16,565,20,"mul"],[637,19,565,23],[637,20,565,24,"a"],[637,21,565,25],[637,23,565,27,"t2"],[637,25,565,29],[637,26,565,30],[638,8,566,12,"t4"],[638,10,566,14],[638,13,566,17,"Fp"],[638,15,566,19],[638,16,566,20,"add"],[638,19,566,23],[638,20,566,24,"t4"],[638,22,566,26],[638,24,566,28,"t2"],[638,26,566,30],[638,27,566,31],[639,8,567,12,"t0"],[639,10,567,14],[639,13,567,17,"Fp"],[639,15,567,19],[639,16,567,20,"mul"],[639,19,567,23],[639,20,567,24,"t1"],[639,22,567,26],[639,24,567,28,"t4"],[639,26,567,30],[639,27,567,31],[640,8,568,12,"Y3"],[640,10,568,14],[640,13,568,17,"Fp"],[640,15,568,19],[640,16,568,20,"add"],[640,19,568,23],[640,20,568,24,"Y3"],[640,22,568,26],[640,24,568,28,"t0"],[640,26,568,30],[640,27,568,31],[641,8,569,12,"t0"],[641,10,569,14],[641,13,569,17,"Fp"],[641,15,569,19],[641,16,569,20,"mul"],[641,19,569,23],[641,20,569,24,"t5"],[641,22,569,26],[641,24,569,28,"t4"],[641,26,569,30],[641,27,569,31],[641,28,569,32],[641,29,569,33],[642,8,570,12,"X3"],[642,10,570,14],[642,13,570,17,"Fp"],[642,15,570,19],[642,16,570,20,"mul"],[642,19,570,23],[642,20,570,24,"t3"],[642,22,570,26],[642,24,570,28,"X3"],[642,26,570,30],[642,27,570,31],[643,8,571,12,"X3"],[643,10,571,14],[643,13,571,17,"Fp"],[643,15,571,19],[643,16,571,20,"sub"],[643,19,571,23],[643,20,571,24,"X3"],[643,22,571,26],[643,24,571,28,"t0"],[643,26,571,30],[643,27,571,31],[644,8,572,12,"t0"],[644,10,572,14],[644,13,572,17,"Fp"],[644,15,572,19],[644,16,572,20,"mul"],[644,19,572,23],[644,20,572,24,"t3"],[644,22,572,26],[644,24,572,28,"t1"],[644,26,572,30],[644,27,572,31],[645,8,573,12,"Z3"],[645,10,573,14],[645,13,573,17,"Fp"],[645,15,573,19],[645,16,573,20,"mul"],[645,19,573,23],[645,20,573,24,"t5"],[645,22,573,26],[645,24,573,28,"Z3"],[645,26,573,30],[645,27,573,31],[646,8,574,12,"Z3"],[646,10,574,14],[646,13,574,17,"Fp"],[646,15,574,19],[646,16,574,20,"add"],[646,19,574,23],[646,20,574,24,"Z3"],[646,22,574,26],[646,24,574,28,"t0"],[646,26,574,30],[646,27,574,31],[646,28,574,32],[646,29,574,33],[647,8,575,12],[647,15,575,19],[647,19,575,23,"Point"],[647,24,575,28],[647,25,575,29,"X3"],[647,27,575,31],[647,29,575,33,"Y3"],[647,31,575,35],[647,33,575,37,"Z3"],[647,35,575,39],[647,36,575,40],[648,6,576,8],[649,6,577,8,"subtract"],[649,14,577,16,"subtract"],[649,15,577,17,"other"],[649,20,577,22],[649,22,577,24],[650,8,578,12],[650,15,578,19],[650,19,578,23],[650,20,578,24,"add"],[650,23,578,27],[650,24,578,28,"other"],[650,29,578,33],[650,30,578,34,"negate"],[650,36,578,40],[650,37,578,41],[650,38,578,42],[650,39,578,43],[651,6,579,8],[652,6,580,8,"is0"],[652,9,580,11,"is0"],[652,10,580,11],[652,12,580,14],[653,8,581,12],[653,15,581,19],[653,19,581,23],[653,20,581,24,"equals"],[653,26,581,30],[653,27,581,31,"Point"],[653,32,581,36],[653,33,581,37,"ZERO"],[653,37,581,41],[653,38,581,42],[654,6,582,8],[655,6,583,8],[656,0,584,0],[657,0,585,0],[658,0,586,0],[659,0,587,0],[660,0,588,0],[661,0,589,0],[662,0,590,0],[663,0,591,0],[664,6,592,8,"multiply"],[664,14,592,16,"multiply"],[664,15,592,17,"scalar"],[664,21,592,23],[664,23,592,25],[665,8,593,12],[665,14,593,18],[666,10,593,20,"endo"],[667,8,593,25],[667,9,593,26],[667,12,593,29,"extraOpts"],[667,21,593,38],[668,8,594,12],[668,12,594,16],[668,13,594,17,"Fn"],[668,15,594,19],[668,16,594,20,"isValidNot0"],[668,27,594,31],[668,28,594,32,"scalar"],[668,34,594,38],[668,35,594,39],[668,37,595,16],[668,43,595,22],[668,47,595,26,"Error"],[668,52,595,31],[668,53,595,32],[668,83,595,62],[668,84,595,63],[668,85,595,64],[668,86,595,65],[669,8,596,12],[669,12,596,16,"point"],[669,17,596,21],[669,19,596,23,"fake"],[669,23,596,27],[669,24,596,28],[669,25,596,29],[670,8,597,12],[670,14,597,18,"mul"],[670,17,597,21],[670,20,597,25,"n"],[670,21,597,26],[670,25,597,31,"wnaf"],[670,29,597,35],[670,30,597,36,"cached"],[670,36,597,42],[670,37,597,43],[670,41,597,47],[670,43,597,49,"n"],[670,44,597,50],[670,46,597,53,"p"],[670,47,597,54],[670,51,597,59],[670,55,597,59,"normalizeZ"],[670,72,597,69],[670,74,597,70,"Point"],[670,79,597,75],[670,81,597,77,"p"],[670,82,597,78],[670,83,597,79],[670,84,597,80],[671,8,598,12],[672,8,599,12],[672,12,599,16,"endo"],[672,16,599,20],[672,18,599,22],[673,10,600,16],[673,16,600,22],[674,12,600,24,"k1neg"],[674,17,600,29],[675,12,600,31,"k1"],[675,14,600,33],[676,12,600,35,"k2neg"],[676,17,600,40],[677,12,600,42,"k2"],[678,10,600,45],[678,11,600,46],[678,14,600,49,"splitEndoScalarN"],[678,30,600,65],[678,31,600,66,"scalar"],[678,37,600,72],[678,38,600,73],[679,10,601,16],[679,16,601,22],[680,12,601,24,"p"],[680,13,601,25],[680,15,601,27,"k1p"],[680,18,601,30],[681,12,601,32,"f"],[681,13,601,33],[681,15,601,35,"k1f"],[682,10,601,39],[682,11,601,40],[682,14,601,43,"mul"],[682,17,601,46],[682,18,601,47,"k1"],[682,20,601,49],[682,21,601,50],[683,10,602,16],[683,16,602,22],[684,12,602,24,"p"],[684,13,602,25],[684,15,602,27,"k2p"],[684,18,602,30],[685,12,602,32,"f"],[685,13,602,33],[685,15,602,35,"k2f"],[686,10,602,39],[686,11,602,40],[686,14,602,43,"mul"],[686,17,602,46],[686,18,602,47,"k2"],[686,20,602,49],[686,21,602,50],[687,10,603,16,"fake"],[687,14,603,20],[687,17,603,23,"k1f"],[687,20,603,26],[687,21,603,27,"add"],[687,24,603,30],[687,25,603,31,"k2f"],[687,28,603,34],[687,29,603,35],[688,10,604,16,"point"],[688,15,604,21],[688,18,604,24,"finishEndo"],[688,28,604,34],[688,29,604,35,"endo"],[688,33,604,39],[688,34,604,40,"beta"],[688,38,604,44],[688,40,604,46,"k1p"],[688,43,604,49],[688,45,604,51,"k2p"],[688,48,604,54],[688,50,604,56,"k1neg"],[688,55,604,61],[688,57,604,63,"k2neg"],[688,62,604,68],[688,63,604,69],[689,8,605,12],[689,9,605,13],[689,15,606,17],[690,10,607,16],[690,16,607,22],[691,12,607,24,"p"],[691,13,607,25],[692,12,607,27,"f"],[693,10,607,29],[693,11,607,30],[693,14,607,33,"mul"],[693,17,607,36],[693,18,607,37,"scalar"],[693,24,607,43],[693,25,607,44],[694,10,608,16,"point"],[694,15,608,21],[694,18,608,24,"p"],[694,19,608,25],[695,10,609,16,"fake"],[695,14,609,20],[695,17,609,23,"f"],[695,18,609,24],[696,8,610,12],[697,8,611,12],[698,8,612,12],[698,15,612,19],[698,19,612,19,"normalizeZ"],[698,36,612,29],[698,38,612,30,"Point"],[698,43,612,35],[698,45,612,37],[698,46,612,38,"point"],[698,51,612,43],[698,53,612,45,"fake"],[698,57,612,49],[698,58,612,50],[698,59,612,51],[698,60,612,52],[698,61,612,53],[698,62,612,54],[699,6,613,8],[700,6,614,8],[701,0,615,0],[702,0,616,0],[703,0,617,0],[704,0,618,0],[705,6,619,8,"multiplyUnsafe"],[705,20,619,22,"multiplyUnsafe"],[705,21,619,23,"sc"],[705,23,619,25],[705,25,619,27],[706,8,620,12],[706,14,620,18],[707,10,620,20,"endo"],[708,8,620,25],[708,9,620,26],[708,12,620,29,"extraOpts"],[708,21,620,38],[709,8,621,12],[709,14,621,18,"p"],[709,15,621,19],[709,18,621,22],[709,22,621,26],[710,8,622,12],[710,12,622,16],[710,13,622,17,"Fn"],[710,15,622,19],[710,16,622,20,"isValid"],[710,23,622,27],[710,24,622,28,"sc"],[710,26,622,30],[710,27,622,31],[710,29,623,16],[710,35,623,22],[710,39,623,26,"Error"],[710,44,623,31],[710,45,623,32],[710,75,623,62],[710,76,623,63],[710,77,623,64],[710,78,623,65],[711,8,624,12],[711,12,624,16,"sc"],[711,14,624,18],[711,19,624,23,"_0n"],[711,22,624,26],[711,26,624,30,"p"],[711,27,624,31],[711,28,624,32,"is0"],[711,31,624,35],[711,32,624,36],[711,33,624,37],[711,35,625,16],[711,42,625,23,"Point"],[711,47,625,28],[711,48,625,29,"ZERO"],[711,52,625,33],[712,8,626,12],[712,12,626,16,"sc"],[712,14,626,18],[712,19,626,23,"_1n"],[712,22,626,26],[712,24,627,16],[712,31,627,23,"p"],[712,32,627,24],[712,33,627,25],[712,34,627,26],[713,8,628,12],[713,12,628,16,"wnaf"],[713,16,628,20],[713,17,628,21,"hasCache"],[713,25,628,29],[713,26,628,30],[713,30,628,34],[713,31,628,35],[713,33,629,16],[713,40,629,23],[713,44,629,27],[713,45,629,28,"multiply"],[713,53,629,36],[713,54,629,37,"sc"],[713,56,629,39],[713,57,629,40],[714,8,630,12],[714,12,630,16,"endo"],[714,16,630,20],[714,18,630,22],[715,10,631,16],[715,16,631,22],[716,12,631,24,"k1neg"],[716,17,631,29],[717,12,631,31,"k1"],[717,14,631,33],[718,12,631,35,"k2neg"],[718,17,631,40],[719,12,631,42,"k2"],[720,10,631,45],[720,11,631,46],[720,14,631,49,"splitEndoScalarN"],[720,30,631,65],[720,31,631,66,"sc"],[720,33,631,68],[720,34,631,69],[721,10,632,16],[721,16,632,22],[722,12,632,24,"p1"],[722,14,632,26],[723,12,632,28,"p2"],[724,10,632,31],[724,11,632,32],[724,14,632,35],[724,18,632,35,"mulEndoUnsafe"],[724,38,632,48],[724,40,632,49,"Point"],[724,45,632,54],[724,47,632,56,"p"],[724,48,632,57],[724,50,632,59,"k1"],[724,52,632,61],[724,54,632,63,"k2"],[724,56,632,65],[724,57,632,66],[724,58,632,67],[724,59,632,68],[725,10,633,16],[725,17,633,23,"finishEndo"],[725,27,633,33],[725,28,633,34,"endo"],[725,32,633,38],[725,33,633,39,"beta"],[725,37,633,43],[725,39,633,45,"p1"],[725,41,633,47],[725,43,633,49,"p2"],[725,45,633,51],[725,47,633,53,"k1neg"],[725,52,633,58],[725,54,633,60,"k2neg"],[725,59,633,65],[725,60,633,66],[726,8,634,12],[726,9,634,13],[726,15,635,17],[727,10,636,16],[727,17,636,23,"wnaf"],[727,21,636,27],[727,22,636,28,"unsafe"],[727,28,636,34],[727,29,636,35,"p"],[727,30,636,36],[727,32,636,38,"sc"],[727,34,636,40],[727,35,636,41],[728,8,637,12],[729,6,638,8],[730,6,639,8,"multiplyAndAddUnsafe"],[730,26,639,28,"multiplyAndAddUnsafe"],[730,27,639,29,"Q"],[730,28,639,30],[730,30,639,32,"a"],[730,31,639,33],[730,33,639,35,"b"],[730,34,639,36],[730,36,639,38],[731,8,640,12],[731,14,640,18,"sum"],[731,17,640,21],[731,20,640,24],[731,24,640,28],[731,25,640,29,"multiplyUnsafe"],[731,39,640,43],[731,40,640,44,"a"],[731,41,640,45],[731,42,640,46],[731,43,640,47,"add"],[731,46,640,50],[731,47,640,51,"Q"],[731,48,640,52],[731,49,640,53,"multiplyUnsafe"],[731,63,640,67],[731,64,640,68,"b"],[731,65,640,69],[731,66,640,70],[731,67,640,71],[732,8,641,12],[732,15,641,19,"sum"],[732,18,641,22],[732,19,641,23,"is0"],[732,22,641,26],[732,23,641,27],[732,24,641,28],[732,27,641,31,"undefined"],[732,36,641,40],[732,39,641,43,"sum"],[732,42,641,46],[733,6,642,8],[734,6,643,8],[735,0,644,0],[736,0,645,0],[737,0,646,0],[738,6,647,8,"toAffine"],[738,14,647,16,"toAffine"],[738,15,647,17,"invertedZ"],[738,24,647,26],[738,26,647,28],[739,8,648,12],[739,15,648,19,"toAffineMemo"],[739,27,648,31],[739,28,648,32],[739,32,648,36],[739,34,648,38,"invertedZ"],[739,43,648,47],[739,44,648,48],[740,6,649,8],[741,6,650,8],[742,0,651,0],[743,0,652,0],[744,0,653,0],[745,6,654,8,"isTorsionFree"],[745,19,654,21,"isTorsionFree"],[745,20,654,21],[745,22,654,24],[746,8,655,12],[746,14,655,18],[747,10,655,20,"isTorsionFree"],[748,8,655,34],[748,9,655,35],[748,12,655,38,"extraOpts"],[748,21,655,47],[749,8,656,12],[749,12,656,16,"cofactor"],[749,20,656,24],[749,25,656,29,"_1n"],[749,28,656,32],[749,30,657,16],[749,37,657,23],[749,41,657,27],[750,8,658,12],[750,12,658,16,"isTorsionFree"],[750,25,658,29],[750,27,659,16],[750,34,659,23,"isTorsionFree"],[750,47,659,36],[750,48,659,37,"Point"],[750,53,659,42],[750,55,659,44],[750,59,659,48],[750,60,659,49],[751,8,660,12],[751,15,660,19,"wnaf"],[751,19,660,23],[751,20,660,24,"unsafe"],[751,26,660,30],[751,27,660,31],[751,31,660,35],[751,33,660,37,"CURVE_ORDER"],[751,44,660,48],[751,45,660,49],[751,46,660,50,"is0"],[751,49,660,53],[751,50,660,54],[751,51,660,55],[752,6,661,8],[753,6,662,8,"clearCofactor"],[753,19,662,21,"clearCofactor"],[753,20,662,21],[753,22,662,24],[754,8,663,12],[754,14,663,18],[755,10,663,20,"clearCofactor"],[756,8,663,34],[756,9,663,35],[756,12,663,38,"extraOpts"],[756,21,663,47],[757,8,664,12],[757,12,664,16,"cofactor"],[757,20,664,24],[757,25,664,29,"_1n"],[757,28,664,32],[757,30,665,16],[757,37,665,23],[757,41,665,27],[757,42,665,28],[757,43,665,29],[758,8,666,12],[758,12,666,16,"clearCofactor"],[758,25,666,29],[758,27,667,16],[758,34,667,23,"clearCofactor"],[758,47,667,36],[758,48,667,37,"Point"],[758,53,667,42],[758,55,667,44],[758,59,667,48],[758,60,667,49],[759,8,668,12],[759,15,668,19],[759,19,668,23],[759,20,668,24,"multiplyUnsafe"],[759,34,668,38],[759,35,668,39,"cofactor"],[759,43,668,47],[759,44,668,48],[760,6,669,8],[761,6,670,8,"isSmallOrder"],[761,18,670,20,"isSmallOrder"],[761,19,670,20],[761,21,670,23],[762,8,671,12],[763,8,672,12],[763,15,672,19],[763,19,672,23],[763,20,672,24,"multiplyUnsafe"],[763,34,672,38],[763,35,672,39,"cofactor"],[763,43,672,47],[763,44,672,48],[763,45,672,49,"is0"],[763,48,672,52],[763,49,672,53],[763,50,672,54],[764,6,673,8],[765,6,674,8,"toBytes"],[765,13,674,15,"toBytes"],[765,14,674,16,"isCompressed"],[765,26,674,28],[765,29,674,31],[765,33,674,35],[765,35,674,37],[766,8,675,12],[766,12,675,12,"abool"],[766,27,675,17],[766,29,675,18,"isCompressed"],[766,41,675,30],[766,43,675,32],[766,57,675,46],[766,58,675,47],[767,8,676,12],[767,12,676,16],[767,13,676,17,"assertValidity"],[767,27,676,31],[767,28,676,32],[767,29,676,33],[768,8,677,12],[768,15,677,19,"encodePoint"],[768,26,677,30],[768,27,677,31,"Point"],[768,32,677,36],[768,34,677,38],[768,38,677,42],[768,40,677,44,"isCompressed"],[768,52,677,56],[768,53,677,57],[769,6,678,8],[770,6,679,8,"toHex"],[770,11,679,13,"toHex"],[770,12,679,14,"isCompressed"],[770,24,679,26],[770,27,679,29],[770,31,679,33],[770,33,679,35],[771,8,680,12],[771,15,680,19],[771,19,680,19,"bytesToHex"],[771,37,680,29],[771,39,680,30],[771,43,680,34],[771,44,680,35,"toBytes"],[771,51,680,42],[771,52,680,43,"isCompressed"],[771,64,680,55],[771,65,680,56],[771,66,680,57],[772,6,681,8],[773,6,682,8,"toString"],[773,14,682,16,"toString"],[773,15,682,16],[773,17,682,19],[774,8,683,12],[774,15,683,19],[774,25,683,29],[774,29,683,33],[774,30,683,34,"is0"],[774,33,683,37],[774,34,683,38],[774,35,683,39],[774,38,683,42],[774,44,683,48],[774,47,683,51],[774,51,683,55],[774,52,683,56,"toHex"],[774,57,683,61],[774,58,683,62],[774,59,683,63],[774,62,683,66],[775,6,684,8],[776,6,685,8],[777,6,686,8],[777,10,686,12,"px"],[777,12,686,14,"px"],[777,13,686,14],[777,15,686,17],[778,8,687,12],[778,15,687,19],[778,19,687,23],[778,20,687,24,"X"],[778,21,687,25],[779,6,688,8],[780,6,689,8],[780,10,689,12,"py"],[780,12,689,14,"py"],[780,13,689,14],[780,15,689,17],[781,8,690,12],[781,15,690,19],[781,19,690,23],[781,20,690,24,"X"],[781,21,690,25],[782,6,691,8],[783,6,692,8],[783,10,692,12,"pz"],[783,12,692,14,"pz"],[783,13,692,14],[783,15,692,17],[784,8,693,12],[784,15,693,19],[784,19,693,23],[784,20,693,24,"Z"],[784,21,693,25],[785,6,694,8],[786,6,695,8,"toRawBytes"],[786,16,695,18,"toRawBytes"],[786,17,695,19,"isCompressed"],[786,29,695,31],[786,32,695,34],[786,36,695,38],[786,38,695,40],[787,8,696,12],[787,15,696,19],[787,19,696,23],[787,20,696,24,"toBytes"],[787,27,696,31],[787,28,696,32,"isCompressed"],[787,40,696,44],[787,41,696,45],[788,6,697,8],[789,6,698,8,"_setWindowSize"],[789,20,698,22,"_setWindowSize"],[789,21,698,23,"windowSize"],[789,31,698,33],[789,33,698,35],[790,8,699,12],[790,12,699,16],[790,13,699,17,"precompute"],[790,23,699,27],[790,24,699,28,"windowSize"],[790,34,699,38],[790,35,699,39],[791,6,700,8],[792,6,701,8],[792,13,701,15,"normalizeZ"],[792,23,701,25,"normalizeZ"],[792,24,701,26,"points"],[792,30,701,32],[792,32,701,34],[793,8,702,12],[793,15,702,19],[793,19,702,19,"normalizeZ"],[793,36,702,29],[793,38,702,30,"Point"],[793,43,702,35],[793,45,702,37,"points"],[793,51,702,43],[793,52,702,44],[794,6,703,8],[795,6,704,8],[795,13,704,15,"msm"],[795,16,704,18,"msm"],[795,17,704,19,"points"],[795,23,704,25],[795,25,704,27,"scalars"],[795,32,704,34],[795,34,704,36],[796,8,705,12],[796,15,705,19],[796,19,705,19,"pippenger"],[796,35,705,28],[796,37,705,29,"Point"],[796,42,705,34],[796,44,705,36,"Fn"],[796,46,705,38],[796,48,705,40,"points"],[796,54,705,46],[796,56,705,48,"scalars"],[796,63,705,55],[796,64,705,56],[797,6,706,8],[798,6,707,8],[798,13,707,15,"fromPrivateKey"],[798,27,707,29,"fromPrivateKey"],[798,28,707,30,"privateKey"],[798,38,707,40],[798,40,707,42],[799,8,708,12],[799,15,708,19,"Point"],[799,20,708,24],[799,21,708,25,"BASE"],[799,25,708,29],[799,26,708,30,"multiply"],[799,34,708,38],[799,35,708,39,"_normFnElement"],[799,49,708,53],[799,50,708,54,"Fn"],[799,52,708,56],[799,54,708,58,"privateKey"],[799,64,708,68],[799,65,708,69],[799,66,708,70],[800,6,709,8],[801,4,710,4],[802,4,711,4],[803,4,712,4,"Point"],[803,9,712,9],[803,10,712,10,"BASE"],[803,14,712,14],[803,17,712,17],[803,21,712,21,"Point"],[803,26,712,26],[803,27,712,27,"CURVE"],[803,32,712,32],[803,33,712,33,"Gx"],[803,35,712,35],[803,37,712,37,"CURVE"],[803,42,712,42],[803,43,712,43,"Gy"],[803,45,712,45],[803,47,712,47,"Fp"],[803,49,712,49],[803,50,712,50,"ONE"],[803,53,712,53],[803,54,712,54],[804,4,713,4],[805,4,714,4,"Point"],[805,9,714,9],[805,10,714,10,"ZERO"],[805,14,714,14],[805,17,714,17],[805,21,714,21,"Point"],[805,26,714,26],[805,27,714,27,"Fp"],[805,29,714,29],[805,30,714,30,"ZERO"],[805,34,714,34],[805,36,714,36,"Fp"],[805,38,714,38],[805,39,714,39,"ONE"],[805,42,714,42],[805,44,714,44,"Fp"],[805,46,714,46],[805,47,714,47,"ZERO"],[805,51,714,51],[805,52,714,52],[805,53,714,53],[805,54,714,54],[806,4,715,4],[807,4,716,4,"Point"],[807,9,716,9],[807,10,716,10,"Fp"],[807,12,716,12],[807,15,716,15,"Fp"],[807,17,716,17],[808,4,717,4],[809,4,718,4,"Point"],[809,9,718,9],[809,10,718,10,"Fn"],[809,12,718,12],[809,15,718,15,"Fn"],[809,17,718,17],[810,4,719,4],[810,10,719,10,"bits"],[810,14,719,14],[810,17,719,17,"Fn"],[810,19,719,19],[810,20,719,20,"BITS"],[810,24,719,24],[811,4,720,4],[811,10,720,10,"wnaf"],[811,14,720,14],[811,17,720,17],[811,21,720,21,"wNAF"],[811,32,720,25],[811,33,720,26,"Point"],[811,38,720,31],[811,40,720,33,"extraOpts"],[811,49,720,42],[811,50,720,43,"endo"],[811,54,720,47],[811,57,720,50,"Math"],[811,61,720,54],[811,62,720,55,"ceil"],[811,66,720,59],[811,67,720,60,"bits"],[811,71,720,64],[811,74,720,67],[811,75,720,68],[811,76,720,69],[811,79,720,72,"bits"],[811,83,720,76],[811,84,720,77],[812,4,721,4,"Point"],[812,9,721,9],[812,10,721,10,"BASE"],[812,14,721,14],[812,15,721,15,"precompute"],[812,25,721,25],[812,26,721,26],[812,27,721,27],[812,28,721,28],[812,29,721,29],[812,30,721,30],[813,4,722,4],[813,11,722,11,"Point"],[813,16,722,16],[814,2,723,0],[815,2,724,0],[816,2,725,0],[816,11,725,9,"pprefix"],[816,18,725,16,"pprefix"],[816,19,725,17,"hasEvenY"],[816,27,725,25],[816,29,725,27],[817,4,726,4],[817,11,726,11,"Uint8Array"],[817,21,726,21],[817,22,726,22,"of"],[817,24,726,24],[817,25,726,25,"hasEvenY"],[817,33,726,33],[817,36,726,36],[817,40,726,40],[817,43,726,43],[817,47,726,47],[817,48,726,48],[818,2,727,0],[819,2,728,0],[820,0,729,0],[821,0,730,0],[822,0,731,0],[823,0,732,0],[824,0,733,0],[825,0,734,0],[826,0,735,0],[827,0,736,0],[828,2,737,7],[828,11,737,16,"SWUFpSqrtRatio"],[828,25,737,30,"SWUFpSqrtRatio"],[828,26,737,31,"Fp"],[828,28,737,33],[828,30,737,35,"Z"],[828,31,737,36],[828,33,737,38],[829,4,738,4],[830,4,739,4],[830,10,739,10,"q"],[830,11,739,11],[830,14,739,14,"Fp"],[830,16,739,16],[830,17,739,17,"ORDER"],[830,22,739,22],[831,4,740,4],[831,8,740,8,"l"],[831,9,740,9],[831,12,740,12,"_0n"],[831,15,740,15],[832,4,741,4],[832,9,741,9],[832,13,741,13,"o"],[832,14,741,14],[832,17,741,17,"q"],[832,18,741,18],[832,21,741,21,"_1n"],[832,24,741,24],[832,26,741,26,"o"],[832,27,741,27],[832,30,741,30,"_2n"],[832,33,741,33],[832,38,741,38,"_0n"],[832,41,741,41],[832,43,741,43,"o"],[832,44,741,44],[832,48,741,48,"_2n"],[832,51,741,51],[832,53,742,8,"l"],[832,54,742,9],[832,58,742,13,"_1n"],[832,61,742,16],[833,4,743,4],[833,10,743,10,"c1"],[833,12,743,12],[833,15,743,15,"l"],[833,16,743,16],[833,17,743,17],[833,18,743,18],[834,4,744,4],[835,4,745,4],[836,4,746,4],[836,10,746,10,"_2n_pow_c1_1"],[836,22,746,22],[836,25,746,25,"_2n"],[836,28,746,28],[836,32,746,33,"c1"],[836,34,746,35],[836,37,746,38,"_1n"],[836,40,746,41],[836,43,746,44,"_1n"],[836,46,746,48],[837,4,747,4],[837,10,747,10,"_2n_pow_c1"],[837,20,747,20],[837,23,747,23,"_2n_pow_c1_1"],[837,35,747,35],[837,38,747,38,"_2n"],[837,41,747,41],[838,4,748,4],[838,10,748,10,"c2"],[838,12,748,12],[838,15,748,15],[838,16,748,16,"q"],[838,17,748,17],[838,20,748,20,"_1n"],[838,23,748,23],[838,27,748,27,"_2n_pow_c1"],[838,37,748,37],[838,38,748,38],[838,39,748,39],[839,4,749,4],[839,10,749,10,"c3"],[839,12,749,12],[839,15,749,15],[839,16,749,16,"c2"],[839,18,749,18],[839,21,749,21,"_1n"],[839,24,749,24],[839,28,749,28,"_2n"],[839,31,749,31],[839,32,749,32],[839,33,749,33],[840,4,750,4],[840,10,750,10,"c4"],[840,12,750,12],[840,15,750,15,"_2n_pow_c1"],[840,25,750,25],[840,28,750,28,"_1n"],[840,31,750,31],[840,32,750,32],[840,33,750,33],[841,4,751,4],[841,10,751,10,"c5"],[841,12,751,12],[841,15,751,15,"_2n_pow_c1_1"],[841,27,751,27],[841,28,751,28],[841,29,751,29],[842,4,752,4],[842,10,752,10,"c6"],[842,12,752,12],[842,15,752,15,"Fp"],[842,17,752,17],[842,18,752,18,"pow"],[842,21,752,21],[842,22,752,22,"Z"],[842,23,752,23],[842,25,752,25,"c2"],[842,27,752,27],[842,28,752,28],[842,29,752,29],[842,30,752,30],[843,4,753,4],[843,10,753,10,"c7"],[843,12,753,12],[843,15,753,15,"Fp"],[843,17,753,17],[843,18,753,18,"pow"],[843,21,753,21],[843,22,753,22,"Z"],[843,23,753,23],[843,25,753,25],[843,26,753,26,"c2"],[843,28,753,28],[843,31,753,31,"_1n"],[843,34,753,34],[843,38,753,38,"_2n"],[843,41,753,41],[843,42,753,42],[843,43,753,43],[843,44,753,44],[844,4,754,4],[844,8,754,8,"sqrtRatio"],[844,17,754,17],[844,20,754,20,"sqrtRatio"],[844,21,754,21,"u"],[844,22,754,22],[844,24,754,24,"v"],[844,25,754,25],[844,30,754,30],[845,6,755,8],[845,10,755,12,"tv1"],[845,13,755,15],[845,16,755,18,"c6"],[845,18,755,20],[845,19,755,21],[845,20,755,22],[846,6,756,8],[846,10,756,12,"tv2"],[846,13,756,15],[846,16,756,18,"Fp"],[846,18,756,20],[846,19,756,21,"pow"],[846,22,756,24],[846,23,756,25,"v"],[846,24,756,26],[846,26,756,28,"c4"],[846,28,756,30],[846,29,756,31],[846,30,756,32],[846,31,756,33],[847,6,757,8],[847,10,757,12,"tv3"],[847,13,757,15],[847,16,757,18,"Fp"],[847,18,757,20],[847,19,757,21,"sqr"],[847,22,757,24],[847,23,757,25,"tv2"],[847,26,757,28],[847,27,757,29],[847,28,757,30],[847,29,757,31],[848,6,758,8,"tv3"],[848,9,758,11],[848,12,758,14,"Fp"],[848,14,758,16],[848,15,758,17,"mul"],[848,18,758,20],[848,19,758,21,"tv3"],[848,22,758,24],[848,24,758,26,"v"],[848,25,758,27],[848,26,758,28],[848,27,758,29],[848,28,758,30],[849,6,759,8],[849,10,759,12,"tv5"],[849,13,759,15],[849,16,759,18,"Fp"],[849,18,759,20],[849,19,759,21,"mul"],[849,22,759,24],[849,23,759,25,"u"],[849,24,759,26],[849,26,759,28,"tv3"],[849,29,759,31],[849,30,759,32],[849,31,759,33],[849,32,759,34],[850,6,760,8,"tv5"],[850,9,760,11],[850,12,760,14,"Fp"],[850,14,760,16],[850,15,760,17,"pow"],[850,18,760,20],[850,19,760,21,"tv5"],[850,22,760,24],[850,24,760,26,"c3"],[850,26,760,28],[850,27,760,29],[850,28,760,30],[850,29,760,31],[851,6,761,8,"tv5"],[851,9,761,11],[851,12,761,14,"Fp"],[851,14,761,16],[851,15,761,17,"mul"],[851,18,761,20],[851,19,761,21,"tv5"],[851,22,761,24],[851,24,761,26,"tv2"],[851,27,761,29],[851,28,761,30],[851,29,761,31],[851,30,761,32],[852,6,762,8,"tv2"],[852,9,762,11],[852,12,762,14,"Fp"],[852,14,762,16],[852,15,762,17,"mul"],[852,18,762,20],[852,19,762,21,"tv5"],[852,22,762,24],[852,24,762,26,"v"],[852,25,762,27],[852,26,762,28],[852,27,762,29],[852,28,762,30],[853,6,763,8,"tv3"],[853,9,763,11],[853,12,763,14,"Fp"],[853,14,763,16],[853,15,763,17,"mul"],[853,18,763,20],[853,19,763,21,"tv5"],[853,22,763,24],[853,24,763,26,"u"],[853,25,763,27],[853,26,763,28],[853,27,763,29],[853,28,763,30],[854,6,764,8],[854,10,764,12,"tv4"],[854,13,764,15],[854,16,764,18,"Fp"],[854,18,764,20],[854,19,764,21,"mul"],[854,22,764,24],[854,23,764,25,"tv3"],[854,26,764,28],[854,28,764,30,"tv2"],[854,31,764,33],[854,32,764,34],[854,33,764,35],[854,34,764,36],[855,6,765,8,"tv5"],[855,9,765,11],[855,12,765,14,"Fp"],[855,14,765,16],[855,15,765,17,"pow"],[855,18,765,20],[855,19,765,21,"tv4"],[855,22,765,24],[855,24,765,26,"c5"],[855,26,765,28],[855,27,765,29],[855,28,765,30],[855,29,765,31],[856,6,766,8],[856,10,766,12,"isQR"],[856,14,766,16],[856,17,766,19,"Fp"],[856,19,766,21],[856,20,766,22,"eql"],[856,23,766,25],[856,24,766,26,"tv5"],[856,27,766,29],[856,29,766,31,"Fp"],[856,31,766,33],[856,32,766,34,"ONE"],[856,35,766,37],[856,36,766,38],[856,37,766,39],[856,38,766,40],[857,6,767,8,"tv2"],[857,9,767,11],[857,12,767,14,"Fp"],[857,14,767,16],[857,15,767,17,"mul"],[857,18,767,20],[857,19,767,21,"tv3"],[857,22,767,24],[857,24,767,26,"c7"],[857,26,767,28],[857,27,767,29],[857,28,767,30],[857,29,767,31],[858,6,768,8,"tv5"],[858,9,768,11],[858,12,768,14,"Fp"],[858,14,768,16],[858,15,768,17,"mul"],[858,18,768,20],[858,19,768,21,"tv4"],[858,22,768,24],[858,24,768,26,"tv1"],[858,27,768,29],[858,28,768,30],[858,29,768,31],[858,30,768,32],[859,6,769,8,"tv3"],[859,9,769,11],[859,12,769,14,"Fp"],[859,14,769,16],[859,15,769,17,"cmov"],[859,19,769,21],[859,20,769,22,"tv2"],[859,23,769,25],[859,25,769,27,"tv3"],[859,28,769,30],[859,30,769,32,"isQR"],[859,34,769,36],[859,35,769,37],[859,36,769,38],[859,37,769,39],[860,6,770,8,"tv4"],[860,9,770,11],[860,12,770,14,"Fp"],[860,14,770,16],[860,15,770,17,"cmov"],[860,19,770,21],[860,20,770,22,"tv5"],[860,23,770,25],[860,25,770,27,"tv4"],[860,28,770,30],[860,30,770,32,"isQR"],[860,34,770,36],[860,35,770,37],[860,36,770,38],[860,37,770,39],[861,6,771,8],[862,6,772,8],[862,11,772,13],[862,15,772,17,"i"],[862,16,772,18],[862,19,772,21,"c1"],[862,21,772,23],[862,23,772,25,"i"],[862,24,772,26],[862,27,772,29,"_1n"],[862,30,772,32],[862,32,772,34,"i"],[862,33,772,35],[862,35,772,37],[862,37,772,39],[863,8,773,12],[863,12,773,16,"tv5"],[863,15,773,19],[863,18,773,22,"i"],[863,19,773,23],[863,22,773,26,"_2n"],[863,25,773,29],[863,26,773,30],[863,27,773,31],[864,8,774,12,"tv5"],[864,11,774,15],[864,14,774,18,"_2n"],[864,17,774,21],[864,21,774,26,"tv5"],[864,24,774,29],[864,27,774,32,"_1n"],[864,30,774,36],[864,31,774,37],[864,32,774,38],[865,8,775,12],[865,12,775,16,"tvv5"],[865,16,775,20],[865,19,775,23,"Fp"],[865,21,775,25],[865,22,775,26,"pow"],[865,25,775,29],[865,26,775,30,"tv4"],[865,29,775,33],[865,31,775,35,"tv5"],[865,34,775,38],[865,35,775,39],[865,36,775,40],[865,37,775,41],[866,8,776,12],[866,14,776,18,"e1"],[866,16,776,20],[866,19,776,23,"Fp"],[866,21,776,25],[866,22,776,26,"eql"],[866,25,776,29],[866,26,776,30,"tvv5"],[866,30,776,34],[866,32,776,36,"Fp"],[866,34,776,38],[866,35,776,39,"ONE"],[866,38,776,42],[866,39,776,43],[866,40,776,44],[866,41,776,45],[867,8,777,12,"tv2"],[867,11,777,15],[867,14,777,18,"Fp"],[867,16,777,20],[867,17,777,21,"mul"],[867,20,777,24],[867,21,777,25,"tv3"],[867,24,777,28],[867,26,777,30,"tv1"],[867,29,777,33],[867,30,777,34],[867,31,777,35],[867,32,777,36],[868,8,778,12,"tv1"],[868,11,778,15],[868,14,778,18,"Fp"],[868,16,778,20],[868,17,778,21,"mul"],[868,20,778,24],[868,21,778,25,"tv1"],[868,24,778,28],[868,26,778,30,"tv1"],[868,29,778,33],[868,30,778,34],[868,31,778,35],[868,32,778,36],[869,8,779,12,"tvv5"],[869,12,779,16],[869,15,779,19,"Fp"],[869,17,779,21],[869,18,779,22,"mul"],[869,21,779,25],[869,22,779,26,"tv4"],[869,25,779,29],[869,27,779,31,"tv1"],[869,30,779,34],[869,31,779,35],[869,32,779,36],[869,33,779,37],[870,8,780,12,"tv3"],[870,11,780,15],[870,14,780,18,"Fp"],[870,16,780,20],[870,17,780,21,"cmov"],[870,21,780,25],[870,22,780,26,"tv2"],[870,25,780,29],[870,27,780,31,"tv3"],[870,30,780,34],[870,32,780,36,"e1"],[870,34,780,38],[870,35,780,39],[870,36,780,40],[870,37,780,41],[871,8,781,12,"tv4"],[871,11,781,15],[871,14,781,18,"Fp"],[871,16,781,20],[871,17,781,21,"cmov"],[871,21,781,25],[871,22,781,26,"tvv5"],[871,26,781,30],[871,28,781,32,"tv4"],[871,31,781,35],[871,33,781,37,"e1"],[871,35,781,39],[871,36,781,40],[871,37,781,41],[871,38,781,42],[872,6,782,8],[873,6,783,8],[873,13,783,15],[874,8,783,17,"isValid"],[874,15,783,24],[874,17,783,26,"isQR"],[874,21,783,30],[875,8,783,32,"value"],[875,13,783,37],[875,15,783,39,"tv3"],[876,6,783,43],[876,7,783,44],[877,4,784,4],[877,5,784,5],[878,4,785,4],[878,8,785,8,"Fp"],[878,10,785,10],[878,11,785,11,"ORDER"],[878,16,785,16],[878,19,785,19,"_4n"],[878,22,785,22],[878,27,785,27,"_3n"],[878,30,785,30],[878,32,785,32],[879,6,786,8],[880,6,787,8],[880,12,787,14,"c1"],[880,14,787,16],[880,17,787,19],[880,18,787,20,"Fp"],[880,20,787,22],[880,21,787,23,"ORDER"],[880,26,787,28],[880,29,787,31,"_3n"],[880,32,787,34],[880,36,787,38,"_4n"],[880,39,787,41],[880,40,787,42],[880,41,787,43],[881,6,788,8],[881,12,788,14,"c2"],[881,14,788,16],[881,17,788,19,"Fp"],[881,19,788,21],[881,20,788,22,"sqrt"],[881,24,788,26],[881,25,788,27,"Fp"],[881,27,788,29],[881,28,788,30,"neg"],[881,31,788,33],[881,32,788,34,"Z"],[881,33,788,35],[881,34,788,36],[881,35,788,37],[881,36,788,38],[881,37,788,39],[882,6,789,8,"sqrtRatio"],[882,15,789,17],[882,18,789,20,"sqrtRatio"],[882,19,789,21,"u"],[882,20,789,22],[882,22,789,24,"v"],[882,23,789,25],[882,28,789,30],[883,8,790,12],[883,12,790,16,"tv1"],[883,15,790,19],[883,18,790,22,"Fp"],[883,20,790,24],[883,21,790,25,"sqr"],[883,24,790,28],[883,25,790,29,"v"],[883,26,790,30],[883,27,790,31],[883,28,790,32],[883,29,790,33],[884,8,791,12],[884,14,791,18,"tv2"],[884,17,791,21],[884,20,791,24,"Fp"],[884,22,791,26],[884,23,791,27,"mul"],[884,26,791,30],[884,27,791,31,"u"],[884,28,791,32],[884,30,791,34,"v"],[884,31,791,35],[884,32,791,36],[884,33,791,37],[884,34,791,38],[885,8,792,12,"tv1"],[885,11,792,15],[885,14,792,18,"Fp"],[885,16,792,20],[885,17,792,21,"mul"],[885,20,792,24],[885,21,792,25,"tv1"],[885,24,792,28],[885,26,792,30,"tv2"],[885,29,792,33],[885,30,792,34],[885,31,792,35],[885,32,792,36],[886,8,793,12],[886,12,793,16,"y1"],[886,14,793,18],[886,17,793,21,"Fp"],[886,19,793,23],[886,20,793,24,"pow"],[886,23,793,27],[886,24,793,28,"tv1"],[886,27,793,31],[886,29,793,33,"c1"],[886,31,793,35],[886,32,793,36],[886,33,793,37],[886,34,793,38],[887,8,794,12,"y1"],[887,10,794,14],[887,13,794,17,"Fp"],[887,15,794,19],[887,16,794,20,"mul"],[887,19,794,23],[887,20,794,24,"y1"],[887,22,794,26],[887,24,794,28,"tv2"],[887,27,794,31],[887,28,794,32],[887,29,794,33],[887,30,794,34],[888,8,795,12],[888,14,795,18,"y2"],[888,16,795,20],[888,19,795,23,"Fp"],[888,21,795,25],[888,22,795,26,"mul"],[888,25,795,29],[888,26,795,30,"y1"],[888,28,795,32],[888,30,795,34,"c2"],[888,32,795,36],[888,33,795,37],[888,34,795,38],[888,35,795,39],[889,8,796,12],[889,14,796,18,"tv3"],[889,17,796,21],[889,20,796,24,"Fp"],[889,22,796,26],[889,23,796,27,"mul"],[889,26,796,30],[889,27,796,31,"Fp"],[889,29,796,33],[889,30,796,34,"sqr"],[889,33,796,37],[889,34,796,38,"y1"],[889,36,796,40],[889,37,796,41],[889,39,796,43,"v"],[889,40,796,44],[889,41,796,45],[889,42,796,46],[889,43,796,47],[890,8,797,12],[890,14,797,18,"isQR"],[890,18,797,22],[890,21,797,25,"Fp"],[890,23,797,27],[890,24,797,28,"eql"],[890,27,797,31],[890,28,797,32,"tv3"],[890,31,797,35],[890,33,797,37,"u"],[890,34,797,38],[890,35,797,39],[890,36,797,40],[890,37,797,41],[891,8,798,12],[891,12,798,16,"y"],[891,13,798,17],[891,16,798,20,"Fp"],[891,18,798,22],[891,19,798,23,"cmov"],[891,23,798,27],[891,24,798,28,"y2"],[891,26,798,30],[891,28,798,32,"y1"],[891,30,798,34],[891,32,798,36,"isQR"],[891,36,798,40],[891,37,798,41],[891,38,798,42],[891,39,798,43],[892,8,799,12],[892,15,799,19],[893,10,799,21,"isValid"],[893,17,799,28],[893,19,799,30,"isQR"],[893,23,799,34],[894,10,799,36,"value"],[894,15,799,41],[894,17,799,43,"y"],[895,8,799,45],[895,9,799,46],[895,10,799,47],[895,11,799,48],[896,6,800,8],[896,7,800,9],[897,4,801,4],[898,4,802,4],[899,4,803,4],[900,4,804,4],[900,11,804,11,"sqrtRatio"],[900,20,804,20],[901,2,805,0],[902,2,806,0],[903,0,807,0],[904,0,808,0],[905,0,809,0],[906,2,810,7],[906,11,810,16,"mapToCurveSimpleSWU"],[906,30,810,35,"mapToCurveSimpleSWU"],[906,31,810,36,"Fp"],[906,33,810,38],[906,35,810,40,"opts"],[906,39,810,44],[906,41,810,46],[907,4,811,4],[907,8,811,4,"validateField"],[907,30,811,17],[907,32,811,18,"Fp"],[907,34,811,20],[907,35,811,21],[908,4,812,4],[908,10,812,10],[909,6,812,12,"A"],[909,7,812,13],[910,6,812,15,"B"],[910,7,812,16],[911,6,812,18,"Z"],[912,4,812,20],[912,5,812,21],[912,8,812,24,"opts"],[912,12,812,28],[913,4,813,4],[913,8,813,8],[913,9,813,9,"Fp"],[913,11,813,11],[913,12,813,12,"isValid"],[913,19,813,19],[913,20,813,20,"A"],[913,21,813,21],[913,22,813,22],[913,26,813,26],[913,27,813,27,"Fp"],[913,29,813,29],[913,30,813,30,"isValid"],[913,37,813,37],[913,38,813,38,"B"],[913,39,813,39],[913,40,813,40],[913,44,813,44],[913,45,813,45,"Fp"],[913,47,813,47],[913,48,813,48,"isValid"],[913,55,813,55],[913,56,813,56,"Z"],[913,57,813,57],[913,58,813,58],[913,60,814,8],[913,66,814,14],[913,70,814,18,"Error"],[913,75,814,23],[913,76,814,24],[913,111,814,59],[913,112,814,60],[914,4,815,4],[914,10,815,10,"sqrtRatio"],[914,19,815,19],[914,22,815,22,"SWUFpSqrtRatio"],[914,36,815,36],[914,37,815,37,"Fp"],[914,39,815,39],[914,41,815,41,"Z"],[914,42,815,42],[914,43,815,43],[915,4,816,4],[915,8,816,8],[915,9,816,9,"Fp"],[915,11,816,11],[915,12,816,12,"isOdd"],[915,17,816,17],[915,19,817,8],[915,25,817,14],[915,29,817,18,"Error"],[915,34,817,23],[915,35,817,24],[915,65,817,54],[915,66,817,55],[916,4,818,4],[917,4,819,4],[918,4,820,4],[918,11,820,12,"u"],[918,12,820,13],[918,16,820,18],[919,6,821,8],[920,6,822,8],[920,10,822,12,"tv1"],[920,13,822,15],[920,15,822,17,"tv2"],[920,18,822,20],[920,20,822,22,"tv3"],[920,23,822,25],[920,25,822,27,"tv4"],[920,28,822,30],[920,30,822,32,"tv5"],[920,33,822,35],[920,35,822,37,"tv6"],[920,38,822,40],[920,40,822,42,"x"],[920,41,822,43],[920,43,822,45,"y"],[920,44,822,46],[921,6,823,8,"tv1"],[921,9,823,11],[921,12,823,14,"Fp"],[921,14,823,16],[921,15,823,17,"sqr"],[921,18,823,20],[921,19,823,21,"u"],[921,20,823,22],[921,21,823,23],[921,22,823,24],[921,23,823,25],[922,6,824,8,"tv1"],[922,9,824,11],[922,12,824,14,"Fp"],[922,14,824,16],[922,15,824,17,"mul"],[922,18,824,20],[922,19,824,21,"tv1"],[922,22,824,24],[922,24,824,26,"Z"],[922,25,824,27],[922,26,824,28],[922,27,824,29],[922,28,824,30],[923,6,825,8,"tv2"],[923,9,825,11],[923,12,825,14,"Fp"],[923,14,825,16],[923,15,825,17,"sqr"],[923,18,825,20],[923,19,825,21,"tv1"],[923,22,825,24],[923,23,825,25],[923,24,825,26],[923,25,825,27],[924,6,826,8,"tv2"],[924,9,826,11],[924,12,826,14,"Fp"],[924,14,826,16],[924,15,826,17,"add"],[924,18,826,20],[924,19,826,21,"tv2"],[924,22,826,24],[924,24,826,26,"tv1"],[924,27,826,29],[924,28,826,30],[924,29,826,31],[924,30,826,32],[925,6,827,8,"tv3"],[925,9,827,11],[925,12,827,14,"Fp"],[925,14,827,16],[925,15,827,17,"add"],[925,18,827,20],[925,19,827,21,"tv2"],[925,22,827,24],[925,24,827,26,"Fp"],[925,26,827,28],[925,27,827,29,"ONE"],[925,30,827,32],[925,31,827,33],[925,32,827,34],[925,33,827,35],[926,6,828,8,"tv3"],[926,9,828,11],[926,12,828,14,"Fp"],[926,14,828,16],[926,15,828,17,"mul"],[926,18,828,20],[926,19,828,21,"tv3"],[926,22,828,24],[926,24,828,26,"B"],[926,25,828,27],[926,26,828,28],[926,27,828,29],[926,28,828,30],[927,6,829,8,"tv4"],[927,9,829,11],[927,12,829,14,"Fp"],[927,14,829,16],[927,15,829,17,"cmov"],[927,19,829,21],[927,20,829,22,"Z"],[927,21,829,23],[927,23,829,25,"Fp"],[927,25,829,27],[927,26,829,28,"neg"],[927,29,829,31],[927,30,829,32,"tv2"],[927,33,829,35],[927,34,829,36],[927,36,829,38],[927,37,829,39,"Fp"],[927,39,829,41],[927,40,829,42,"eql"],[927,43,829,45],[927,44,829,46,"tv2"],[927,47,829,49],[927,49,829,51,"Fp"],[927,51,829,53],[927,52,829,54,"ZERO"],[927,56,829,58],[927,57,829,59],[927,58,829,60],[927,59,829,61],[927,60,829,62],[928,6,830,8,"tv4"],[928,9,830,11],[928,12,830,14,"Fp"],[928,14,830,16],[928,15,830,17,"mul"],[928,18,830,20],[928,19,830,21,"tv4"],[928,22,830,24],[928,24,830,26,"A"],[928,25,830,27],[928,26,830,28],[928,27,830,29],[928,28,830,30],[929,6,831,8,"tv2"],[929,9,831,11],[929,12,831,14,"Fp"],[929,14,831,16],[929,15,831,17,"sqr"],[929,18,831,20],[929,19,831,21,"tv3"],[929,22,831,24],[929,23,831,25],[929,24,831,26],[929,25,831,27],[930,6,832,8,"tv6"],[930,9,832,11],[930,12,832,14,"Fp"],[930,14,832,16],[930,15,832,17,"sqr"],[930,18,832,20],[930,19,832,21,"tv4"],[930,22,832,24],[930,23,832,25],[930,24,832,26],[930,25,832,27],[931,6,833,8,"tv5"],[931,9,833,11],[931,12,833,14,"Fp"],[931,14,833,16],[931,15,833,17,"mul"],[931,18,833,20],[931,19,833,21,"tv6"],[931,22,833,24],[931,24,833,26,"A"],[931,25,833,27],[931,26,833,28],[931,27,833,29],[931,28,833,30],[932,6,834,8,"tv2"],[932,9,834,11],[932,12,834,14,"Fp"],[932,14,834,16],[932,15,834,17,"add"],[932,18,834,20],[932,19,834,21,"tv2"],[932,22,834,24],[932,24,834,26,"tv5"],[932,27,834,29],[932,28,834,30],[932,29,834,31],[932,30,834,32],[933,6,835,8,"tv2"],[933,9,835,11],[933,12,835,14,"Fp"],[933,14,835,16],[933,15,835,17,"mul"],[933,18,835,20],[933,19,835,21,"tv2"],[933,22,835,24],[933,24,835,26,"tv3"],[933,27,835,29],[933,28,835,30],[933,29,835,31],[933,30,835,32],[934,6,836,8,"tv6"],[934,9,836,11],[934,12,836,14,"Fp"],[934,14,836,16],[934,15,836,17,"mul"],[934,18,836,20],[934,19,836,21,"tv6"],[934,22,836,24],[934,24,836,26,"tv4"],[934,27,836,29],[934,28,836,30],[934,29,836,31],[934,30,836,32],[935,6,837,8,"tv5"],[935,9,837,11],[935,12,837,14,"Fp"],[935,14,837,16],[935,15,837,17,"mul"],[935,18,837,20],[935,19,837,21,"tv6"],[935,22,837,24],[935,24,837,26,"B"],[935,25,837,27],[935,26,837,28],[935,27,837,29],[935,28,837,30],[936,6,838,8,"tv2"],[936,9,838,11],[936,12,838,14,"Fp"],[936,14,838,16],[936,15,838,17,"add"],[936,18,838,20],[936,19,838,21,"tv2"],[936,22,838,24],[936,24,838,26,"tv5"],[936,27,838,29],[936,28,838,30],[936,29,838,31],[936,30,838,32],[937,6,839,8,"x"],[937,7,839,9],[937,10,839,12,"Fp"],[937,12,839,14],[937,13,839,15,"mul"],[937,16,839,18],[937,17,839,19,"tv1"],[937,20,839,22],[937,22,839,24,"tv3"],[937,25,839,27],[937,26,839,28],[937,27,839,29],[937,28,839,30],[938,6,840,8],[938,12,840,14],[939,8,840,16,"isValid"],[939,15,840,23],[940,8,840,25,"value"],[941,6,840,31],[941,7,840,32],[941,10,840,35,"sqrtRatio"],[941,19,840,44],[941,20,840,45,"tv2"],[941,23,840,48],[941,25,840,50,"tv6"],[941,28,840,53],[941,29,840,54],[941,30,840,55],[941,31,840,56],[942,6,841,8,"y"],[942,7,841,9],[942,10,841,12,"Fp"],[942,12,841,14],[942,13,841,15,"mul"],[942,16,841,18],[942,17,841,19,"tv1"],[942,20,841,22],[942,22,841,24,"u"],[942,23,841,25],[942,24,841,26],[942,25,841,27],[942,26,841,28],[943,6,842,8,"y"],[943,7,842,9],[943,10,842,12,"Fp"],[943,12,842,14],[943,13,842,15,"mul"],[943,16,842,18],[943,17,842,19,"y"],[943,18,842,20],[943,20,842,22,"value"],[943,25,842,27],[943,26,842,28],[943,27,842,29],[943,28,842,30],[944,6,843,8,"x"],[944,7,843,9],[944,10,843,12,"Fp"],[944,12,843,14],[944,13,843,15,"cmov"],[944,17,843,19],[944,18,843,20,"x"],[944,19,843,21],[944,21,843,23,"tv3"],[944,24,843,26],[944,26,843,28,"isValid"],[944,33,843,35],[944,34,843,36],[944,35,843,37],[944,36,843,38],[945,6,844,8,"y"],[945,7,844,9],[945,10,844,12,"Fp"],[945,12,844,14],[945,13,844,15,"cmov"],[945,17,844,19],[945,18,844,20,"y"],[945,19,844,21],[945,21,844,23,"value"],[945,26,844,28],[945,28,844,30,"isValid"],[945,35,844,37],[945,36,844,38],[945,37,844,39],[945,38,844,40],[946,6,845,8],[946,12,845,14,"e1"],[946,14,845,16],[946,17,845,19,"Fp"],[946,19,845,21],[946,20,845,22,"isOdd"],[946,25,845,27],[946,26,845,28,"u"],[946,27,845,29],[946,28,845,30],[946,33,845,35,"Fp"],[946,35,845,37],[946,36,845,38,"isOdd"],[946,41,845,43],[946,42,845,44,"y"],[946,43,845,45],[946,44,845,46],[946,45,845,47],[946,46,845,48],[947,6,846,8,"y"],[947,7,846,9],[947,10,846,12,"Fp"],[947,12,846,14],[947,13,846,15,"cmov"],[947,17,846,19],[947,18,846,20,"Fp"],[947,20,846,22],[947,21,846,23,"neg"],[947,24,846,26],[947,25,846,27,"y"],[947,26,846,28],[947,27,846,29],[947,29,846,31,"y"],[947,30,846,32],[947,32,846,34,"e1"],[947,34,846,36],[947,35,846,37],[947,36,846,38],[947,37,846,39],[948,6,847,8],[948,12,847,14,"tv4_inv"],[948,19,847,21],[948,22,847,24],[948,26,847,24,"FpInvertBatch"],[948,48,847,37],[948,50,847,38,"Fp"],[948,52,847,40],[948,54,847,42],[948,55,847,43,"tv4"],[948,58,847,46],[948,59,847,47],[948,61,847,49],[948,65,847,53],[948,66,847,54],[948,67,847,55],[948,68,847,56],[948,69,847,57],[949,6,848,8,"x"],[949,7,848,9],[949,10,848,12,"Fp"],[949,12,848,14],[949,13,848,15,"mul"],[949,16,848,18],[949,17,848,19,"x"],[949,18,848,20],[949,20,848,22,"tv4_inv"],[949,27,848,29],[949,28,848,30],[949,29,848,31],[949,30,848,32],[950,6,849,8],[950,13,849,15],[951,8,849,17,"x"],[951,9,849,18],[952,8,849,20,"y"],[953,6,849,22],[953,7,849,23],[954,4,850,4],[954,5,850,5],[955,2,851,0],[956,2,852,0],[956,11,852,9,"getWLengths"],[956,22,852,20,"getWLengths"],[956,23,852,21,"Fp"],[956,25,852,23],[956,27,852,25,"Fn"],[956,29,852,27],[956,31,852,29],[957,4,853,4],[957,11,853,11],[958,6,854,8,"secretKey"],[958,15,854,17],[958,17,854,19,"Fn"],[958,19,854,21],[958,20,854,22,"BYTES"],[958,25,854,27],[959,6,855,8,"publicKey"],[959,15,855,17],[959,17,855,19],[959,18,855,20],[959,21,855,23,"Fp"],[959,23,855,25],[959,24,855,26,"BYTES"],[959,29,855,31],[960,6,856,8,"publicKeyUncompressed"],[960,27,856,29],[960,29,856,31],[960,30,856,32],[960,33,856,35],[960,34,856,36],[960,37,856,39,"Fp"],[960,39,856,41],[960,40,856,42,"BYTES"],[960,45,856,47],[961,6,857,8,"publicKeyHasPrefix"],[961,24,857,26],[961,26,857,28],[961,30,857,32],[962,6,858,8,"signature"],[962,15,858,17],[962,17,858,19],[962,18,858,20],[962,21,858,23,"Fn"],[962,23,858,25],[962,24,858,26,"BYTES"],[963,4,859,4],[963,5,859,5],[964,2,860,0],[965,2,861,0],[966,0,862,0],[967,0,863,0],[968,0,864,0],[969,2,865,7],[969,11,865,16,"ecdh"],[969,15,865,20,"ecdh"],[969,16,865,21,"Point"],[969,21,865,26],[969,23,865,28,"ecdhOpts"],[969,31,865,36],[969,34,865,39],[969,35,865,40],[969,36,865,41],[969,38,865,43],[970,4,866,4],[970,10,866,10],[971,6,866,12,"Fn"],[972,4,866,15],[972,5,866,16],[972,8,866,19,"Point"],[972,13,866,24],[973,4,867,4],[973,10,867,10,"randomBytes_"],[973,22,867,22],[973,25,867,25,"ecdhOpts"],[973,33,867,33],[973,34,867,34,"randomBytes"],[973,45,867,45],[973,49,867,49,"randomBytesWeb"],[973,68,867,63],[974,4,868,4],[974,10,868,10,"lengths"],[974,17,868,17],[974,20,868,20,"Object"],[974,26,868,26],[974,27,868,27,"assign"],[974,33,868,33],[974,34,868,34,"getWLengths"],[974,45,868,45],[974,46,868,46,"Point"],[974,51,868,51],[974,52,868,52,"Fp"],[974,54,868,54],[974,56,868,56,"Fn"],[974,58,868,58],[974,59,868,59],[974,61,868,61],[975,6,868,63,"seed"],[975,10,868,67],[975,12,868,69],[975,16,868,69,"getMinHashLength"],[975,41,868,85],[975,43,868,86,"Fn"],[975,45,868,88],[975,46,868,89,"ORDER"],[975,51,868,94],[976,4,868,96],[976,5,868,97],[976,6,868,98],[977,4,869,4],[977,13,869,13,"isValidSecretKey"],[977,29,869,29,"isValidSecretKey"],[977,30,869,30,"secretKey"],[977,39,869,39],[977,41,869,41],[978,6,870,8],[978,10,870,12],[979,8,871,12],[979,15,871,19],[979,16,871,20],[979,17,871,21,"_normFnElement"],[979,31,871,35],[979,32,871,36,"Fn"],[979,34,871,38],[979,36,871,40,"secretKey"],[979,45,871,49],[979,46,871,50],[980,6,872,8],[980,7,872,9],[980,8,873,8],[980,15,873,15,"error"],[980,20,873,20],[980,22,873,22],[981,8,874,12],[981,15,874,19],[981,20,874,24],[982,6,875,8],[983,4,876,4],[984,4,877,4],[984,13,877,13,"isValidPublicKey"],[984,29,877,29,"isValidPublicKey"],[984,30,877,30,"publicKey"],[984,39,877,39],[984,41,877,41,"isCompressed"],[984,53,877,53],[984,55,877,55],[985,6,878,8],[985,12,878,14],[986,8,878,16,"publicKey"],[986,17,878,25],[986,19,878,27,"comp"],[986,23,878,31],[987,8,878,33,"publicKeyUncompressed"],[988,6,878,55],[988,7,878,56],[988,10,878,59,"lengths"],[988,17,878,66],[989,6,879,8],[989,10,879,12],[990,8,880,12],[990,14,880,18,"l"],[990,15,880,19],[990,18,880,22,"publicKey"],[990,27,880,31],[990,28,880,32,"length"],[990,34,880,38],[991,8,881,12],[991,12,881,16,"isCompressed"],[991,24,881,28],[991,29,881,33],[991,33,881,37],[991,37,881,41,"l"],[991,38,881,42],[991,43,881,47,"comp"],[991,47,881,51],[991,49,882,16],[991,56,882,23],[991,61,882,28],[992,8,883,12],[992,12,883,16,"isCompressed"],[992,24,883,28],[992,29,883,33],[992,34,883,38],[992,38,883,42,"l"],[992,39,883,43],[992,44,883,48,"publicKeyUncompressed"],[992,65,883,69],[992,67,884,16],[992,74,884,23],[992,79,884,28],[993,8,885,12],[993,15,885,19],[993,16,885,20],[993,17,885,21,"Point"],[993,22,885,26],[993,23,885,27,"fromBytes"],[993,32,885,36],[993,33,885,37,"publicKey"],[993,42,885,46],[993,43,885,47],[994,6,886,8],[994,7,886,9],[994,8,887,8],[994,15,887,15,"error"],[994,20,887,20],[994,22,887,22],[995,8,888,12],[995,15,888,19],[995,20,888,24],[996,6,889,8],[997,4,890,4],[998,4,891,4],[999,0,892,0],[1000,0,893,0],[1001,0,894,0],[1002,4,895,4],[1002,13,895,13,"randomSecretKey"],[1002,28,895,28,"randomSecretKey"],[1002,29,895,29,"seed"],[1002,33,895,33],[1002,36,895,36,"randomBytes_"],[1002,48,895,48],[1002,49,895,49,"lengths"],[1002,56,895,56],[1002,57,895,57,"seed"],[1002,61,895,61],[1002,62,895,62],[1002,64,895,64],[1003,6,896,8],[1003,13,896,15],[1003,17,896,15,"mapHashToField"],[1003,40,896,29],[1003,42,896,30],[1003,46,896,30,"abytes"],[1003,62,896,36],[1003,64,896,37,"seed"],[1003,68,896,41],[1003,70,896,43,"lengths"],[1003,77,896,50],[1003,78,896,51,"seed"],[1003,82,896,55],[1003,84,896,57],[1003,90,896,63],[1003,91,896,64],[1003,93,896,66,"Fn"],[1003,95,896,68],[1003,96,896,69,"ORDER"],[1003,101,896,74],[1003,102,896,75],[1004,4,897,4],[1005,4,898,4],[1006,0,899,0],[1007,0,900,0],[1008,0,901,0],[1009,0,902,0],[1010,4,903,4],[1010,13,903,13,"getPublicKey"],[1010,25,903,25,"getPublicKey"],[1010,26,903,26,"secretKey"],[1010,35,903,35],[1010,37,903,37,"isCompressed"],[1010,49,903,49],[1010,52,903,52],[1010,56,903,56],[1010,58,903,58],[1011,6,904,8],[1011,13,904,15,"Point"],[1011,18,904,20],[1011,19,904,21,"BASE"],[1011,23,904,25],[1011,24,904,26,"multiply"],[1011,32,904,34],[1011,33,904,35,"_normFnElement"],[1011,47,904,49],[1011,48,904,50,"Fn"],[1011,50,904,52],[1011,52,904,54,"secretKey"],[1011,61,904,63],[1011,62,904,64],[1011,63,904,65],[1011,64,904,66,"toBytes"],[1011,71,904,73],[1011,72,904,74,"isCompressed"],[1011,84,904,86],[1011,85,904,87],[1012,4,905,4],[1013,4,906,4],[1013,13,906,13,"keygen"],[1013,19,906,19,"keygen"],[1013,20,906,20,"seed"],[1013,24,906,24],[1013,26,906,26],[1014,6,907,8],[1014,12,907,14,"secretKey"],[1014,21,907,23],[1014,24,907,26,"randomSecretKey"],[1014,39,907,41],[1014,40,907,42,"seed"],[1014,44,907,46],[1014,45,907,47],[1015,6,908,8],[1015,13,908,15],[1016,8,908,17,"secretKey"],[1016,17,908,26],[1017,8,908,28,"publicKey"],[1017,17,908,37],[1017,19,908,39,"getPublicKey"],[1017,31,908,51],[1017,32,908,52,"secretKey"],[1017,41,908,61],[1018,6,908,63],[1018,7,908,64],[1019,4,909,4],[1020,4,910,4],[1021,0,911,0],[1022,0,912,0],[1023,4,913,4],[1023,13,913,13,"isProbPub"],[1023,22,913,22,"isProbPub"],[1023,23,913,23,"item"],[1023,27,913,27],[1023,29,913,29],[1024,6,914,8],[1024,10,914,12],[1024,17,914,19,"item"],[1024,21,914,23],[1024,26,914,28],[1024,34,914,36],[1024,36,915,12],[1024,43,915,19],[1024,48,915,24],[1025,6,916,8],[1025,10,916,12,"item"],[1025,14,916,16],[1025,26,916,28,"Point"],[1025,31,916,33],[1025,33,917,12],[1025,40,917,19],[1025,44,917,23],[1026,6,918,8],[1026,12,918,14],[1027,8,918,16,"secretKey"],[1027,17,918,25],[1028,8,918,27,"publicKey"],[1028,17,918,36],[1029,8,918,38,"publicKeyUncompressed"],[1030,6,918,60],[1030,7,918,61],[1030,10,918,64,"lengths"],[1030,17,918,71],[1031,6,919,8],[1031,10,919,12,"Fn"],[1031,12,919,14],[1031,13,919,15,"allowedLengths"],[1031,27,919,29],[1031,31,919,33,"secretKey"],[1031,40,919,42],[1031,45,919,47,"publicKey"],[1031,54,919,56],[1031,56,920,12],[1031,63,920,19,"undefined"],[1031,72,920,28],[1032,6,921,8],[1032,12,921,14,"l"],[1032,13,921,15],[1032,16,921,18],[1032,20,921,18,"ensureBytes"],[1032,39,921,29],[1032,41,921,30],[1032,46,921,35],[1032,48,921,37,"item"],[1032,52,921,41],[1032,53,921,42],[1032,54,921,43,"length"],[1032,60,921,49],[1033,6,922,8],[1033,13,922,15,"l"],[1033,14,922,16],[1033,19,922,21,"publicKey"],[1033,28,922,30],[1033,32,922,34,"l"],[1033,33,922,35],[1033,38,922,40,"publicKeyUncompressed"],[1033,59,922,61],[1034,4,923,4],[1035,4,924,4],[1036,0,925,0],[1037,0,926,0],[1038,0,927,0],[1039,0,928,0],[1040,0,929,0],[1041,0,930,0],[1042,0,931,0],[1043,4,932,4],[1043,13,932,13,"getSharedSecret"],[1043,28,932,28,"getSharedSecret"],[1043,29,932,29,"secretKeyA"],[1043,39,932,39],[1043,41,932,41,"publicKeyB"],[1043,51,932,51],[1043,53,932,53,"isCompressed"],[1043,65,932,65],[1043,68,932,68],[1043,72,932,72],[1043,74,932,74],[1044,6,933,8],[1044,10,933,12,"isProbPub"],[1044,19,933,21],[1044,20,933,22,"secretKeyA"],[1044,30,933,32],[1044,31,933,33],[1044,36,933,38],[1044,40,933,42],[1044,42,934,12],[1044,48,934,18],[1044,52,934,22,"Error"],[1044,57,934,27],[1044,58,934,28],[1044,89,934,59],[1044,90,934,60],[1045,6,935,8],[1045,10,935,12,"isProbPub"],[1045,19,935,21],[1045,20,935,22,"publicKeyB"],[1045,30,935,32],[1045,31,935,33],[1045,36,935,38],[1045,41,935,43],[1045,43,936,12],[1045,49,936,18],[1045,53,936,22,"Error"],[1045,58,936,27],[1045,59,936,28],[1045,90,936,59],[1045,91,936,60],[1046,6,937,8],[1046,12,937,14,"s"],[1046,13,937,15],[1046,16,937,18,"_normFnElement"],[1046,30,937,32],[1046,31,937,33,"Fn"],[1046,33,937,35],[1046,35,937,37,"secretKeyA"],[1046,45,937,47],[1046,46,937,48],[1047,6,938,8],[1047,12,938,14,"b"],[1047,13,938,15],[1047,16,938,18,"Point"],[1047,21,938,23],[1047,22,938,24,"fromHex"],[1047,29,938,31],[1047,30,938,32,"publicKeyB"],[1047,40,938,42],[1047,41,938,43],[1047,42,938,44],[1047,43,938,45],[1048,6,939,8],[1048,13,939,15,"b"],[1048,14,939,16],[1048,15,939,17,"multiply"],[1048,23,939,25],[1048,24,939,26,"s"],[1048,25,939,27],[1048,26,939,28],[1048,27,939,29,"toBytes"],[1048,34,939,36],[1048,35,939,37,"isCompressed"],[1048,47,939,49],[1048,48,939,50],[1049,4,940,4],[1050,4,941,4],[1050,10,941,10,"utils"],[1050,15,941,15],[1050,18,941,18],[1051,6,942,8,"isValidSecretKey"],[1051,22,942,24],[1052,6,943,8,"isValidPublicKey"],[1052,22,943,24],[1053,6,944,8,"randomSecretKey"],[1053,21,944,23],[1054,6,945,8],[1055,6,946,8,"isValidPrivateKey"],[1055,23,946,25],[1055,25,946,27,"isValidSecretKey"],[1055,41,946,43],[1056,6,947,8,"randomPrivateKey"],[1056,22,947,24],[1056,24,947,26,"randomSecretKey"],[1056,39,947,41],[1057,6,948,8,"normPrivateKeyToScalar"],[1057,28,948,30],[1057,30,948,33,"key"],[1057,33,948,36],[1057,37,948,41,"_normFnElement"],[1057,51,948,55],[1057,52,948,56,"Fn"],[1057,54,948,58],[1057,56,948,60,"key"],[1057,59,948,63],[1057,60,948,64],[1058,6,949,8,"precompute"],[1058,16,949,18,"precompute"],[1058,17,949,19,"windowSize"],[1058,27,949,29],[1058,30,949,32],[1058,31,949,33],[1058,33,949,35,"point"],[1058,38,949,40],[1058,41,949,43,"Point"],[1058,46,949,48],[1058,47,949,49,"BASE"],[1058,51,949,53],[1058,53,949,55],[1059,8,950,12],[1059,15,950,19,"point"],[1059,20,950,24],[1059,21,950,25,"precompute"],[1059,31,950,35],[1059,32,950,36,"windowSize"],[1059,42,950,46],[1059,44,950,48],[1059,49,950,53],[1059,50,950,54],[1060,6,951,8],[1061,4,952,4],[1061,5,952,5],[1062,4,953,4],[1062,11,953,11,"Object"],[1062,17,953,17],[1062,18,953,18,"freeze"],[1062,24,953,24],[1062,25,953,25],[1063,6,953,27,"getPublicKey"],[1063,18,953,39],[1064,6,953,41,"getSharedSecret"],[1064,21,953,56],[1065,6,953,58,"keygen"],[1065,12,953,64],[1066,6,953,66,"Point"],[1066,11,953,71],[1067,6,953,73,"utils"],[1067,11,953,78],[1068,6,953,80,"lengths"],[1069,4,953,88],[1069,5,953,89],[1069,6,953,90],[1070,2,954,0],[1071,2,955,0],[1072,0,956,0],[1073,0,957,0],[1074,0,958,0],[1075,0,959,0],[1076,0,960,0],[1077,0,961,0],[1078,0,962,0],[1079,0,963,0],[1080,0,964,0],[1081,0,965,0],[1082,0,966,0],[1083,0,967,0],[1084,0,968,0],[1085,0,969,0],[1086,0,970,0],[1087,2,971,7],[1087,11,971,16,"ecdsa"],[1087,16,971,21,"ecdsa"],[1087,17,971,22,"Point"],[1087,22,971,27],[1087,24,971,29,"hash"],[1087,28,971,33],[1087,30,971,35,"ecdsaOpts"],[1087,39,971,44],[1087,42,971,47],[1087,43,971,48],[1087,44,971,49],[1087,46,971,51],[1088,4,972,4],[1088,8,972,4,"ahash"],[1088,20,972,9],[1088,22,972,10,"hash"],[1088,26,972,14],[1088,27,972,15],[1089,4,973,4],[1089,8,973,4,"_validateObject"],[1089,31,973,19],[1089,33,973,20,"ecdsaOpts"],[1089,42,973,29],[1089,44,973,31],[1089,45,973,32],[1089,46,973,33],[1089,48,973,35],[1090,6,974,8,"hmac"],[1090,10,974,12],[1090,12,974,14],[1090,22,974,24],[1091,6,975,8,"lowS"],[1091,10,975,12],[1091,12,975,14],[1091,21,975,23],[1092,6,976,8,"randomBytes"],[1092,17,976,19],[1092,19,976,21],[1092,29,976,31],[1093,6,977,8,"bits2int"],[1093,14,977,16],[1093,16,977,18],[1093,26,977,28],[1094,6,978,8,"bits2int_modN"],[1094,19,978,21],[1094,21,978,23],[1095,4,979,4],[1095,5,979,5],[1095,6,979,6],[1096,4,980,4],[1096,10,980,10,"randomBytes"],[1096,21,980,21],[1096,24,980,24,"ecdsaOpts"],[1096,33,980,33],[1096,34,980,34,"randomBytes"],[1096,45,980,45],[1096,49,980,49,"randomBytesWeb"],[1096,68,980,63],[1097,4,981,4],[1097,10,981,10,"hmac"],[1097,14,981,14],[1097,17,981,17,"ecdsaOpts"],[1097,26,981,26],[1097,27,981,27,"hmac"],[1097,31,981,31],[1097,36,982,9],[1097,37,982,10,"key"],[1097,40,982,13],[1097,42,982,15],[1097,45,982,18,"msgs"],[1097,49,982,22],[1097,54,982,27],[1097,58,982,27,"nobleHmac"],[1097,68,982,36],[1097,70,982,37,"hash"],[1097,74,982,41],[1097,76,982,43,"key"],[1097,79,982,46],[1097,81,982,48],[1097,85,982,48,"concatBytes"],[1097,104,982,59],[1097,106,982,60],[1097,109,982,63,"msgs"],[1097,113,982,67],[1097,114,982,68],[1097,115,982,69],[1097,116,982,70],[1098,4,983,4],[1098,10,983,10],[1099,6,983,12,"Fp"],[1099,8,983,14],[1100,6,983,16,"Fn"],[1101,4,983,19],[1101,5,983,20],[1101,8,983,23,"Point"],[1101,13,983,28],[1102,4,984,4],[1102,10,984,10],[1103,6,984,12,"ORDER"],[1103,11,984,17],[1103,13,984,19,"CURVE_ORDER"],[1103,24,984,30],[1104,6,984,32,"BITS"],[1104,10,984,36],[1104,12,984,38,"fnBits"],[1105,4,984,45],[1105,5,984,46],[1105,8,984,49,"Fn"],[1105,10,984,51],[1106,4,985,4],[1106,10,985,10],[1107,6,985,12,"keygen"],[1107,12,985,18],[1108,6,985,20,"getPublicKey"],[1108,18,985,32],[1109,6,985,34,"getSharedSecret"],[1109,21,985,49],[1110,6,985,51,"utils"],[1110,11,985,56],[1111,6,985,58,"lengths"],[1112,4,985,66],[1112,5,985,67],[1112,8,985,70,"ecdh"],[1112,12,985,74],[1112,13,985,75,"Point"],[1112,18,985,80],[1112,20,985,82,"ecdsaOpts"],[1112,29,985,91],[1112,30,985,92],[1113,4,986,4],[1113,10,986,10,"defaultSigOpts"],[1113,24,986,24],[1113,27,986,27],[1114,6,987,8,"prehash"],[1114,13,987,15],[1114,15,987,17],[1114,20,987,22],[1115,6,988,8,"lowS"],[1115,10,988,12],[1115,12,988,14],[1115,19,988,21,"ecdsaOpts"],[1115,28,988,30],[1115,29,988,31,"lowS"],[1115,33,988,35],[1115,38,988,40],[1115,47,988,49],[1115,50,988,52,"ecdsaOpts"],[1115,59,988,61],[1115,60,988,62,"lowS"],[1115,64,988,66],[1115,67,988,69],[1115,72,988,74],[1116,6,989,8,"format"],[1116,12,989,14],[1116,14,989,16,"undefined"],[1116,23,989,25],[1117,6,989,27],[1118,6,990,8,"extraEntropy"],[1118,18,990,20],[1118,20,990,22],[1119,4,991,4],[1119,5,991,5],[1120,4,992,4],[1120,10,992,10,"defaultSigOpts_format"],[1120,31,992,31],[1120,34,992,34],[1120,43,992,43],[1121,4,993,4],[1121,13,993,13,"isBiggerThanHalfOrder"],[1121,34,993,34,"isBiggerThanHalfOrder"],[1121,35,993,35,"number"],[1121,41,993,41],[1121,43,993,43],[1122,6,994,8],[1122,12,994,14,"HALF"],[1122,16,994,18],[1122,19,994,21,"CURVE_ORDER"],[1122,30,994,32],[1122,34,994,36,"_1n"],[1122,37,994,39],[1123,6,995,8],[1123,13,995,15,"number"],[1123,19,995,21],[1123,22,995,24,"HALF"],[1123,26,995,28],[1124,4,996,4],[1125,4,997,4],[1125,13,997,13,"validateRS"],[1125,23,997,23,"validateRS"],[1125,24,997,24,"title"],[1125,29,997,29],[1125,31,997,31,"num"],[1125,34,997,34],[1125,36,997,36],[1126,6,998,8],[1126,10,998,12],[1126,11,998,13,"Fn"],[1126,13,998,15],[1126,14,998,16,"isValidNot0"],[1126,25,998,27],[1126,26,998,28,"num"],[1126,29,998,31],[1126,30,998,32],[1126,32,999,12],[1126,38,999,18],[1126,42,999,22,"Error"],[1126,47,999,27],[1126,48,999,28],[1126,69,999,49,"title"],[1126,74,999,54],[1126,108,999,88],[1126,109,999,89],[1127,6,1000,8],[1127,13,1000,15,"num"],[1127,16,1000,18],[1128,4,1001,4],[1129,4,1002,4],[1129,13,1002,13,"validateSigLength"],[1129,30,1002,30,"validateSigLength"],[1129,31,1002,31,"bytes"],[1129,36,1002,36],[1129,38,1002,38,"format"],[1129,44,1002,44],[1129,46,1002,46],[1130,6,1003,8,"validateSigFormat"],[1130,23,1003,25],[1130,24,1003,26,"format"],[1130,30,1003,32],[1130,31,1003,33],[1131,6,1004,8],[1131,12,1004,14,"size"],[1131,16,1004,18],[1131,19,1004,21,"lengths"],[1131,26,1004,28],[1131,27,1004,29,"signature"],[1131,36,1004,38],[1132,6,1005,8],[1132,12,1005,14,"sizer"],[1132,17,1005,19],[1132,20,1005,22,"format"],[1132,26,1005,28],[1132,31,1005,33],[1132,40,1005,42],[1132,43,1005,45,"size"],[1132,47,1005,49],[1132,50,1005,52,"format"],[1132,56,1005,58],[1132,61,1005,63],[1132,72,1005,74],[1132,75,1005,77,"size"],[1132,79,1005,81],[1132,82,1005,84],[1132,83,1005,85],[1132,86,1005,88,"undefined"],[1132,95,1005,97],[1133,6,1006,8],[1133,13,1006,15],[1133,17,1006,15,"abytes"],[1133,33,1006,21],[1133,35,1006,22,"bytes"],[1133,40,1006,27],[1133,42,1006,29,"sizer"],[1133,47,1006,34],[1133,49,1006,36],[1133,52,1006,39,"format"],[1133,58,1006,45],[1133,70,1006,57],[1133,71,1006,58],[1134,4,1007,4],[1135,4,1008,4],[1136,0,1009,0],[1137,0,1010,0],[1138,4,1011,4],[1138,10,1011,10,"Signature"],[1138,19,1011,19],[1138,20,1011,20],[1139,6,1012,8,"constructor"],[1139,17,1012,19,"constructor"],[1139,18,1012,20,"r"],[1139,19,1012,21],[1139,21,1012,23,"s"],[1139,22,1012,24],[1139,24,1012,26,"recovery"],[1139,32,1012,34],[1139,34,1012,36],[1140,8,1013,12],[1140,12,1013,16],[1140,13,1013,17,"r"],[1140,14,1013,18],[1140,17,1013,21,"validateRS"],[1140,27,1013,31],[1140,28,1013,32],[1140,31,1013,35],[1140,33,1013,37,"r"],[1140,34,1013,38],[1140,35,1013,39],[1140,36,1013,40],[1140,37,1013,41],[1141,8,1014,12],[1141,12,1014,16],[1141,13,1014,17,"s"],[1141,14,1014,18],[1141,17,1014,21,"validateRS"],[1141,27,1014,31],[1141,28,1014,32],[1141,31,1014,35],[1141,33,1014,37,"s"],[1141,34,1014,38],[1141,35,1014,39],[1141,36,1014,40],[1141,37,1014,41],[1142,8,1015,12],[1142,12,1015,16,"recovery"],[1142,20,1015,24],[1142,24,1015,28],[1142,28,1015,32],[1142,30,1016,16],[1142,34,1016,20],[1142,35,1016,21,"recovery"],[1142,43,1016,29],[1142,46,1016,32,"recovery"],[1142,54,1016,40],[1143,8,1017,12,"Object"],[1143,14,1017,18],[1143,15,1017,19,"freeze"],[1143,21,1017,25],[1143,22,1017,26],[1143,26,1017,30],[1143,27,1017,31],[1144,6,1018,8],[1145,6,1019,8],[1145,13,1019,15,"fromBytes"],[1145,22,1019,24,"fromBytes"],[1145,23,1019,25,"bytes"],[1145,28,1019,30],[1145,30,1019,32,"format"],[1145,36,1019,38],[1145,39,1019,41,"defaultSigOpts_format"],[1145,60,1019,62],[1145,62,1019,64],[1146,8,1020,12,"validateSigLength"],[1146,25,1020,29],[1146,26,1020,30,"bytes"],[1146,31,1020,35],[1146,33,1020,37,"format"],[1146,39,1020,43],[1146,40,1020,44],[1147,8,1021,12],[1147,12,1021,16,"recid"],[1147,17,1021,21],[1148,8,1022,12],[1148,12,1022,16,"format"],[1148,18,1022,22],[1148,23,1022,27],[1148,28,1022,32],[1148,30,1022,34],[1149,10,1023,16],[1149,16,1023,22],[1150,12,1023,24,"r"],[1150,13,1023,25],[1151,12,1023,27,"s"],[1152,10,1023,29],[1152,11,1023,30],[1152,14,1023,33,"DER"],[1152,17,1023,36],[1152,18,1023,37,"toSig"],[1152,23,1023,42],[1152,24,1023,43],[1152,28,1023,43,"abytes"],[1152,44,1023,49],[1152,46,1023,50,"bytes"],[1152,51,1023,55],[1152,52,1023,56],[1152,53,1023,57],[1153,10,1024,16],[1153,17,1024,23],[1153,21,1024,27,"Signature"],[1153,30,1024,36],[1153,31,1024,37,"r"],[1153,32,1024,38],[1153,34,1024,40,"s"],[1153,35,1024,41],[1153,36,1024,42],[1154,8,1025,12],[1155,8,1026,12],[1155,12,1026,16,"format"],[1155,18,1026,22],[1155,23,1026,27],[1155,34,1026,38],[1155,36,1026,40],[1156,10,1027,16,"recid"],[1156,15,1027,21],[1156,18,1027,24,"bytes"],[1156,23,1027,29],[1156,24,1027,30],[1156,25,1027,31],[1156,26,1027,32],[1157,10,1028,16,"format"],[1157,16,1028,22],[1157,19,1028,25],[1157,28,1028,34],[1158,10,1029,16,"bytes"],[1158,15,1029,21],[1158,18,1029,24,"bytes"],[1158,23,1029,29],[1158,24,1029,30,"subarray"],[1158,32,1029,38],[1158,33,1029,39],[1158,34,1029,40],[1158,35,1029,41],[1159,8,1030,12],[1160,8,1031,12],[1160,14,1031,18,"L"],[1160,15,1031,19],[1160,18,1031,22,"Fn"],[1160,20,1031,24],[1160,21,1031,25,"BYTES"],[1160,26,1031,30],[1161,8,1032,12],[1161,14,1032,18,"r"],[1161,15,1032,19],[1161,18,1032,22,"bytes"],[1161,23,1032,27],[1161,24,1032,28,"subarray"],[1161,32,1032,36],[1161,33,1032,37],[1161,34,1032,38],[1161,36,1032,40,"L"],[1161,37,1032,41],[1161,38,1032,42],[1162,8,1033,12],[1162,14,1033,18,"s"],[1162,15,1033,19],[1162,18,1033,22,"bytes"],[1162,23,1033,27],[1162,24,1033,28,"subarray"],[1162,32,1033,36],[1162,33,1033,37,"L"],[1162,34,1033,38],[1162,36,1033,40,"L"],[1162,37,1033,41],[1162,40,1033,44],[1162,41,1033,45],[1162,42,1033,46],[1163,8,1034,12],[1163,15,1034,19],[1163,19,1034,23,"Signature"],[1163,28,1034,32],[1163,29,1034,33,"Fn"],[1163,31,1034,35],[1163,32,1034,36,"fromBytes"],[1163,41,1034,45],[1163,42,1034,46,"r"],[1163,43,1034,47],[1163,44,1034,48],[1163,46,1034,50,"Fn"],[1163,48,1034,52],[1163,49,1034,53,"fromBytes"],[1163,58,1034,62],[1163,59,1034,63,"s"],[1163,60,1034,64],[1163,61,1034,65],[1163,63,1034,67,"recid"],[1163,68,1034,72],[1163,69,1034,73],[1164,6,1035,8],[1165,6,1036,8],[1165,13,1036,15,"fromHex"],[1165,20,1036,22,"fromHex"],[1165,21,1036,23,"hex"],[1165,24,1036,26],[1165,26,1036,28,"format"],[1165,32,1036,34],[1165,34,1036,36],[1166,8,1037,12],[1166,15,1037,19],[1166,19,1037,23],[1166,20,1037,24,"fromBytes"],[1166,29,1037,33],[1166,30,1037,34],[1166,34,1037,34,"hexToBytes"],[1166,52,1037,44],[1166,54,1037,45,"hex"],[1166,57,1037,48],[1166,58,1037,49],[1166,60,1037,51,"format"],[1166,66,1037,57],[1166,67,1037,58],[1167,6,1038,8],[1168,6,1039,8,"addRecoveryBit"],[1168,20,1039,22,"addRecoveryBit"],[1168,21,1039,23,"recovery"],[1168,29,1039,31],[1168,31,1039,33],[1169,8,1040,12],[1169,15,1040,19],[1169,19,1040,23,"Signature"],[1169,28,1040,32],[1169,29,1040,33],[1169,33,1040,37],[1169,34,1040,38,"r"],[1169,35,1040,39],[1169,37,1040,41],[1169,41,1040,45],[1169,42,1040,46,"s"],[1169,43,1040,47],[1169,45,1040,49,"recovery"],[1169,53,1040,57],[1169,54,1040,58],[1170,6,1041,8],[1171,6,1042,8,"recoverPublicKey"],[1171,22,1042,24,"recoverPublicKey"],[1171,23,1042,25,"messageHash"],[1171,34,1042,36],[1171,36,1042,38],[1172,8,1043,12],[1172,14,1043,18,"FIELD_ORDER"],[1172,25,1043,29],[1172,28,1043,32,"Fp"],[1172,30,1043,34],[1172,31,1043,35,"ORDER"],[1172,36,1043,40],[1173,8,1044,12],[1173,14,1044,18],[1174,10,1044,20,"r"],[1174,11,1044,21],[1175,10,1044,23,"s"],[1175,11,1044,24],[1176,10,1044,26,"recovery"],[1176,18,1044,34],[1176,20,1044,36,"rec"],[1177,8,1044,40],[1177,9,1044,41],[1177,12,1044,44],[1177,16,1044,48],[1178,8,1045,12],[1178,12,1045,16,"rec"],[1178,15,1045,19],[1178,19,1045,23],[1178,23,1045,27],[1178,27,1045,31],[1178,28,1045,32],[1178,29,1045,33],[1178,30,1045,34],[1178,32,1045,36],[1178,33,1045,37],[1178,35,1045,39],[1178,36,1045,40],[1178,38,1045,42],[1178,39,1045,43],[1178,40,1045,44],[1178,41,1045,45,"includes"],[1178,49,1045,53],[1178,50,1045,54,"rec"],[1178,53,1045,57],[1178,54,1045,58],[1178,56,1046,16],[1178,62,1046,22],[1178,66,1046,26,"Error"],[1178,71,1046,31],[1178,72,1046,32],[1178,93,1046,53],[1178,94,1046,54],[1179,8,1047,12],[1180,8,1048,12],[1181,8,1049,12],[1182,8,1050,12],[1183,8,1051,12],[1184,8,1052,12],[1185,8,1053,12],[1186,8,1054,12],[1187,8,1055,12],[1187,14,1055,18,"hasCofactor"],[1187,25,1055,29],[1187,28,1055,32,"CURVE_ORDER"],[1187,39,1055,43],[1187,42,1055,46,"_2n"],[1187,45,1055,49],[1187,48,1055,52,"FIELD_ORDER"],[1187,59,1055,63],[1188,8,1056,12],[1188,12,1056,16,"hasCofactor"],[1188,23,1056,27],[1188,27,1056,31,"rec"],[1188,30,1056,34],[1188,33,1056,37],[1188,34,1056,38],[1188,36,1057,16],[1188,42,1057,22],[1188,46,1057,26,"Error"],[1188,51,1057,31],[1188,52,1057,32],[1188,92,1057,72],[1188,93,1057,73],[1189,8,1058,12],[1189,14,1058,18,"radj"],[1189,18,1058,22],[1189,21,1058,25,"rec"],[1189,24,1058,28],[1189,29,1058,33],[1189,30,1058,34],[1189,34,1058,38,"rec"],[1189,37,1058,41],[1189,42,1058,46],[1189,43,1058,47],[1189,46,1058,50,"r"],[1189,47,1058,51],[1189,50,1058,54,"CURVE_ORDER"],[1189,61,1058,65],[1189,64,1058,68,"r"],[1189,65,1058,69],[1190,8,1059,12],[1190,12,1059,16],[1190,13,1059,17,"Fp"],[1190,15,1059,19],[1190,16,1059,20,"isValid"],[1190,23,1059,27],[1190,24,1059,28,"radj"],[1190,28,1059,32],[1190,29,1059,33],[1190,31,1060,16],[1190,37,1060,22],[1190,41,1060,26,"Error"],[1190,46,1060,31],[1190,47,1060,32],[1190,75,1060,60],[1190,76,1060,61],[1191,8,1061,12],[1191,14,1061,18,"x"],[1191,15,1061,19],[1191,18,1061,22,"Fp"],[1191,20,1061,24],[1191,21,1061,25,"toBytes"],[1191,28,1061,32],[1191,29,1061,33,"radj"],[1191,33,1061,37],[1191,34,1061,38],[1192,8,1062,12],[1192,14,1062,18,"R"],[1192,15,1062,19],[1192,18,1062,22,"Point"],[1192,23,1062,27],[1192,24,1062,28,"fromBytes"],[1192,33,1062,37],[1192,34,1062,38],[1192,38,1062,38,"concatBytes"],[1192,57,1062,49],[1192,59,1062,50,"pprefix"],[1192,66,1062,57],[1192,67,1062,58],[1192,68,1062,59,"rec"],[1192,71,1062,62],[1192,74,1062,65],[1192,75,1062,66],[1192,81,1062,72],[1192,82,1062,73],[1192,83,1062,74],[1192,85,1062,76,"x"],[1192,86,1062,77],[1192,87,1062,78],[1192,88,1062,79],[1193,8,1063,12],[1193,14,1063,18,"ir"],[1193,16,1063,20],[1193,19,1063,23,"Fn"],[1193,21,1063,25],[1193,22,1063,26,"inv"],[1193,25,1063,29],[1193,26,1063,30,"radj"],[1193,30,1063,34],[1193,31,1063,35],[1193,32,1063,36],[1193,33,1063,37],[1194,8,1064,12],[1194,14,1064,18,"h"],[1194,15,1064,19],[1194,18,1064,22,"bits2int_modN"],[1194,31,1064,35],[1194,32,1064,36],[1194,36,1064,36,"ensureBytes"],[1194,55,1064,47],[1194,57,1064,48],[1194,66,1064,57],[1194,68,1064,59,"messageHash"],[1194,79,1064,70],[1194,80,1064,71],[1194,81,1064,72],[1194,82,1064,73],[1194,83,1064,74],[1195,8,1065,12],[1195,14,1065,18,"u1"],[1195,16,1065,20],[1195,19,1065,23,"Fn"],[1195,21,1065,25],[1195,22,1065,26,"create"],[1195,28,1065,32],[1195,29,1065,33],[1195,30,1065,34,"h"],[1195,31,1065,35],[1195,34,1065,38,"ir"],[1195,36,1065,40],[1195,37,1065,41],[1195,38,1065,42],[1195,39,1065,43],[1196,8,1066,12],[1196,14,1066,18,"u2"],[1196,16,1066,20],[1196,19,1066,23,"Fn"],[1196,21,1066,25],[1196,22,1066,26,"create"],[1196,28,1066,32],[1196,29,1066,33,"s"],[1196,30,1066,34],[1196,33,1066,37,"ir"],[1196,35,1066,39],[1196,36,1066,40],[1196,37,1066,41],[1196,38,1066,42],[1197,8,1067,12],[1198,8,1068,12],[1198,14,1068,18,"Q"],[1198,15,1068,19],[1198,18,1068,22,"Point"],[1198,23,1068,27],[1198,24,1068,28,"BASE"],[1198,28,1068,32],[1198,29,1068,33,"multiplyUnsafe"],[1198,43,1068,47],[1198,44,1068,48,"u1"],[1198,46,1068,50],[1198,47,1068,51],[1198,48,1068,52,"add"],[1198,51,1068,55],[1198,52,1068,56,"R"],[1198,53,1068,57],[1198,54,1068,58,"multiplyUnsafe"],[1198,68,1068,72],[1198,69,1068,73,"u2"],[1198,71,1068,75],[1198,72,1068,76],[1198,73,1068,77],[1199,8,1069,12],[1199,12,1069,16,"Q"],[1199,13,1069,17],[1199,14,1069,18,"is0"],[1199,17,1069,21],[1199,18,1069,22],[1199,19,1069,23],[1199,21,1070,16],[1199,27,1070,22],[1199,31,1070,26,"Error"],[1199,36,1070,31],[1199,37,1070,32],[1199,56,1070,51],[1199,57,1070,52],[1200,8,1071,12,"Q"],[1200,9,1071,13],[1200,10,1071,14,"assertValidity"],[1200,24,1071,28],[1200,25,1071,29],[1200,26,1071,30],[1201,8,1072,12],[1201,15,1072,19,"Q"],[1201,16,1072,20],[1202,6,1073,8],[1203,6,1074,8],[1204,6,1075,8,"hasHighS"],[1204,14,1075,16,"hasHighS"],[1204,15,1075,16],[1204,17,1075,19],[1205,8,1076,12],[1205,15,1076,19,"isBiggerThanHalfOrder"],[1205,36,1076,40],[1205,37,1076,41],[1205,41,1076,45],[1205,42,1076,46,"s"],[1205,43,1076,47],[1205,44,1076,48],[1206,6,1077,8],[1207,6,1078,8,"toBytes"],[1207,13,1078,15,"toBytes"],[1207,14,1078,16,"format"],[1207,20,1078,22],[1207,23,1078,25,"defaultSigOpts_format"],[1207,44,1078,46],[1207,46,1078,48],[1208,8,1079,12,"validateSigFormat"],[1208,25,1079,29],[1208,26,1079,30,"format"],[1208,32,1079,36],[1208,33,1079,37],[1209,8,1080,12],[1209,12,1080,16,"format"],[1209,18,1080,22],[1209,23,1080,27],[1209,28,1080,32],[1209,30,1081,16],[1209,37,1081,23],[1209,41,1081,23,"hexToBytes"],[1209,59,1081,33],[1209,61,1081,34,"DER"],[1209,64,1081,37],[1209,65,1081,38,"hexFromSig"],[1209,75,1081,48],[1209,76,1081,49],[1209,80,1081,53],[1209,81,1081,54],[1209,82,1081,55],[1210,8,1082,12],[1210,14,1082,18,"r"],[1210,15,1082,19],[1210,18,1082,22,"Fn"],[1210,20,1082,24],[1210,21,1082,25,"toBytes"],[1210,28,1082,32],[1210,29,1082,33],[1210,33,1082,37],[1210,34,1082,38,"r"],[1210,35,1082,39],[1210,36,1082,40],[1211,8,1083,12],[1211,14,1083,18,"s"],[1211,15,1083,19],[1211,18,1083,22,"Fn"],[1211,20,1083,24],[1211,21,1083,25,"toBytes"],[1211,28,1083,32],[1211,29,1083,33],[1211,33,1083,37],[1211,34,1083,38,"s"],[1211,35,1083,39],[1211,36,1083,40],[1212,8,1084,12],[1212,12,1084,16,"format"],[1212,18,1084,22],[1212,23,1084,27],[1212,34,1084,38],[1212,36,1084,40],[1213,10,1085,16],[1213,14,1085,20],[1213,18,1085,24],[1213,19,1085,25,"recovery"],[1213,27,1085,33],[1213,31,1085,37],[1213,35,1085,41],[1213,37,1086,20],[1213,43,1086,26],[1213,47,1086,30,"Error"],[1213,52,1086,35],[1213,53,1086,36],[1213,83,1086,66],[1213,84,1086,67],[1214,10,1087,16],[1214,17,1087,23],[1214,21,1087,23,"concatBytes"],[1214,40,1087,34],[1214,42,1087,35,"Uint8Array"],[1214,52,1087,45],[1214,53,1087,46,"of"],[1214,55,1087,48],[1214,56,1087,49],[1214,60,1087,53],[1214,61,1087,54,"recovery"],[1214,69,1087,62],[1214,70,1087,63],[1214,72,1087,65,"r"],[1214,73,1087,66],[1214,75,1087,68,"s"],[1214,76,1087,69],[1214,77,1087,70],[1215,8,1088,12],[1216,8,1089,12],[1216,15,1089,19],[1216,19,1089,19,"concatBytes"],[1216,38,1089,30],[1216,40,1089,31,"r"],[1216,41,1089,32],[1216,43,1089,34,"s"],[1216,44,1089,35],[1216,45,1089,36],[1217,6,1090,8],[1218,6,1091,8,"toHex"],[1218,11,1091,13,"toHex"],[1218,12,1091,14,"format"],[1218,18,1091,20],[1218,20,1091,22],[1219,8,1092,12],[1219,15,1092,19],[1219,19,1092,19,"bytesToHex"],[1219,37,1092,29],[1219,39,1092,30],[1219,43,1092,34],[1219,44,1092,35,"toBytes"],[1219,51,1092,42],[1219,52,1092,43,"format"],[1219,58,1092,49],[1219,59,1092,50],[1219,60,1092,51],[1220,6,1093,8],[1221,6,1094,8],[1222,6,1095,8,"assertValidity"],[1222,20,1095,22,"assertValidity"],[1222,21,1095,22],[1222,23,1095,25],[1222,24,1095,27],[1223,6,1096,8],[1223,13,1096,15,"fromCompact"],[1223,24,1096,26,"fromCompact"],[1223,25,1096,27,"hex"],[1223,28,1096,30],[1223,30,1096,32],[1224,8,1097,12],[1224,15,1097,19,"Signature"],[1224,24,1097,28],[1224,25,1097,29,"fromBytes"],[1224,34,1097,38],[1224,35,1097,39],[1224,39,1097,39,"ensureBytes"],[1224,58,1097,50],[1224,60,1097,51],[1224,65,1097,56],[1224,67,1097,58,"hex"],[1224,70,1097,61],[1224,71,1097,62],[1224,73,1097,64],[1224,82,1097,73],[1224,83,1097,74],[1225,6,1098,8],[1226,6,1099,8],[1226,13,1099,15,"fromDER"],[1226,20,1099,22,"fromDER"],[1226,21,1099,23,"hex"],[1226,24,1099,26],[1226,26,1099,28],[1227,8,1100,12],[1227,15,1100,19,"Signature"],[1227,24,1100,28],[1227,25,1100,29,"fromBytes"],[1227,34,1100,38],[1227,35,1100,39],[1227,39,1100,39,"ensureBytes"],[1227,58,1100,50],[1227,60,1100,51],[1227,65,1100,56],[1227,67,1100,58,"hex"],[1227,70,1100,61],[1227,71,1100,62],[1227,73,1100,64],[1227,78,1100,69],[1227,79,1100,70],[1228,6,1101,8],[1229,6,1102,8,"normalizeS"],[1229,16,1102,18,"normalizeS"],[1229,17,1102,18],[1229,19,1102,21],[1230,8,1103,12],[1230,15,1103,19],[1230,19,1103,23],[1230,20,1103,24,"hasHighS"],[1230,28,1103,32],[1230,29,1103,33],[1230,30,1103,34],[1230,33,1103,37],[1230,37,1103,41,"Signature"],[1230,46,1103,50],[1230,47,1103,51],[1230,51,1103,55],[1230,52,1103,56,"r"],[1230,53,1103,57],[1230,55,1103,59,"Fn"],[1230,57,1103,61],[1230,58,1103,62,"neg"],[1230,61,1103,65],[1230,62,1103,66],[1230,66,1103,70],[1230,67,1103,71,"s"],[1230,68,1103,72],[1230,69,1103,73],[1230,71,1103,75],[1230,75,1103,79],[1230,76,1103,80,"recovery"],[1230,84,1103,88],[1230,85,1103,89],[1230,88,1103,92],[1230,92,1103,96],[1231,6,1104,8],[1232,6,1105,8,"toDERRawBytes"],[1232,19,1105,21,"toDERRawBytes"],[1232,20,1105,21],[1232,22,1105,24],[1233,8,1106,12],[1233,15,1106,19],[1233,19,1106,23],[1233,20,1106,24,"toBytes"],[1233,27,1106,31],[1233,28,1106,32],[1233,33,1106,37],[1233,34,1106,38],[1234,6,1107,8],[1235,6,1108,8,"toDERHex"],[1235,14,1108,16,"toDERHex"],[1235,15,1108,16],[1235,17,1108,19],[1236,8,1109,12],[1236,15,1109,19],[1236,19,1109,19,"bytesToHex"],[1236,37,1109,29],[1236,39,1109,30],[1236,43,1109,34],[1236,44,1109,35,"toBytes"],[1236,51,1109,42],[1236,52,1109,43],[1236,57,1109,48],[1236,58,1109,49],[1236,59,1109,50],[1237,6,1110,8],[1238,6,1111,8,"toCompactRawBytes"],[1238,23,1111,25,"toCompactRawBytes"],[1238,24,1111,25],[1238,26,1111,28],[1239,8,1112,12],[1239,15,1112,19],[1239,19,1112,23],[1239,20,1112,24,"toBytes"],[1239,27,1112,31],[1239,28,1112,32],[1239,37,1112,41],[1239,38,1112,42],[1240,6,1113,8],[1241,6,1114,8,"toCompactHex"],[1241,18,1114,20,"toCompactHex"],[1241,19,1114,20],[1241,21,1114,23],[1242,8,1115,12],[1242,15,1115,19],[1242,19,1115,19,"bytesToHex"],[1242,37,1115,29],[1242,39,1115,30],[1242,43,1115,34],[1242,44,1115,35,"toBytes"],[1242,51,1115,42],[1242,52,1115,43],[1242,61,1115,52],[1242,62,1115,53],[1242,63,1115,54],[1243,6,1116,8],[1244,4,1117,4],[1245,4,1118,4],[1246,4,1119,4],[1247,4,1120,4],[1248,4,1121,4],[1249,4,1122,4],[1249,10,1122,10,"bits2int"],[1249,18,1122,18],[1249,21,1122,21,"ecdsaOpts"],[1249,30,1122,30],[1249,31,1122,31,"bits2int"],[1249,39,1122,39],[1249,43,1123,8],[1249,52,1123,17,"bits2int_def"],[1249,64,1123,29,"bits2int_def"],[1249,65,1123,30,"bytes"],[1249,70,1123,35],[1249,72,1123,37],[1250,6,1124,12],[1251,6,1125,12],[1251,10,1125,16,"bytes"],[1251,15,1125,21],[1251,16,1125,22,"length"],[1251,22,1125,28],[1251,25,1125,31],[1251,29,1125,35],[1251,31,1126,16],[1251,37,1126,22],[1251,41,1126,26,"Error"],[1251,46,1126,31],[1251,47,1126,32],[1251,67,1126,52],[1251,68,1126,53],[1252,6,1127,12],[1253,6,1128,12],[1254,6,1129,12],[1254,12,1129,18,"num"],[1254,15,1129,21],[1254,18,1129,24],[1254,22,1129,24,"bytesToNumberBE"],[1254,45,1129,39],[1254,47,1129,40,"bytes"],[1254,52,1129,45],[1254,53,1129,46],[1254,54,1129,47],[1254,55,1129,48],[1255,6,1130,12],[1255,12,1130,18,"delta"],[1255,17,1130,23],[1255,20,1130,26,"bytes"],[1255,25,1130,31],[1255,26,1130,32,"length"],[1255,32,1130,38],[1255,35,1130,41],[1255,36,1130,42],[1255,39,1130,45,"fnBits"],[1255,45,1130,51],[1255,46,1130,52],[1255,47,1130,53],[1256,6,1131,12],[1256,13,1131,19,"delta"],[1256,18,1131,24],[1256,21,1131,27],[1256,22,1131,28],[1256,25,1131,31,"num"],[1256,28,1131,34],[1256,32,1131,38,"BigInt"],[1256,38,1131,44],[1256,39,1131,45,"delta"],[1256,44,1131,50],[1256,45,1131,51],[1256,48,1131,54,"num"],[1256,51,1131,57],[1257,4,1132,8],[1257,5,1132,9],[1258,4,1133,4],[1258,10,1133,10,"bits2int_modN"],[1258,23,1133,23],[1258,26,1133,26,"ecdsaOpts"],[1258,35,1133,35],[1258,36,1133,36,"bits2int_modN"],[1258,49,1133,49],[1258,53,1134,8],[1258,62,1134,17,"bits2int_modN_def"],[1258,79,1134,34,"bits2int_modN_def"],[1258,80,1134,35,"bytes"],[1258,85,1134,40],[1258,87,1134,42],[1259,6,1135,12],[1259,13,1135,19,"Fn"],[1259,15,1135,21],[1259,16,1135,22,"create"],[1259,22,1135,28],[1259,23,1135,29,"bits2int"],[1259,31,1135,37],[1259,32,1135,38,"bytes"],[1259,37,1135,43],[1259,38,1135,44],[1259,39,1135,45],[1259,40,1135,46],[1259,41,1135,47],[1260,4,1136,8],[1260,5,1136,9],[1261,4,1137,4],[1262,4,1138,4],[1262,10,1138,10,"ORDER_MASK"],[1262,20,1138,20],[1262,23,1138,23],[1262,27,1138,23,"bitMask"],[1262,42,1138,30],[1262,44,1138,31,"fnBits"],[1262,50,1138,37],[1262,51,1138,38],[1263,4,1139,4],[1264,4,1140,4],[1264,13,1140,13,"int2octets"],[1264,23,1140,23,"int2octets"],[1264,24,1140,24,"num"],[1264,27,1140,27],[1264,29,1140,29],[1265,6,1141,8],[1266,6,1142,8],[1266,10,1142,8,"aInRange"],[1266,26,1142,16],[1266,28,1142,17],[1266,38,1142,27],[1266,41,1142,30,"fnBits"],[1266,47,1142,36],[1266,49,1142,38,"num"],[1266,52,1142,41],[1266,54,1142,43,"_0n"],[1266,57,1142,46],[1266,59,1142,48,"ORDER_MASK"],[1266,69,1142,58],[1266,70,1142,59],[1267,6,1143,8],[1267,13,1143,15,"Fn"],[1267,15,1143,17],[1267,16,1143,18,"toBytes"],[1267,23,1143,25],[1267,24,1143,26,"num"],[1267,27,1143,29],[1267,28,1143,30],[1268,4,1144,4],[1269,4,1145,4],[1269,13,1145,13,"validateMsgAndHash"],[1269,31,1145,31,"validateMsgAndHash"],[1269,32,1145,32,"message"],[1269,39,1145,39],[1269,41,1145,41,"prehash"],[1269,48,1145,48],[1269,50,1145,50],[1270,6,1146,8],[1270,10,1146,8,"abytes"],[1270,26,1146,14],[1270,28,1146,15,"message"],[1270,35,1146,22],[1270,37,1146,24,"undefined"],[1270,46,1146,33],[1270,48,1146,35],[1270,57,1146,44],[1270,58,1146,45],[1271,6,1147,8],[1271,13,1147,15,"prehash"],[1271,20,1147,22],[1271,23,1147,25],[1271,27,1147,25,"abytes"],[1271,43,1147,31],[1271,45,1147,32,"hash"],[1271,49,1147,36],[1271,50,1147,37,"message"],[1271,57,1147,44],[1271,58,1147,45],[1271,60,1147,47,"undefined"],[1271,69,1147,56],[1271,71,1147,58],[1271,90,1147,77],[1271,91,1147,78],[1271,94,1147,81,"message"],[1271,101,1147,88],[1272,4,1148,4],[1273,4,1149,4],[1274,0,1150,0],[1275,0,1151,0],[1276,0,1152,0],[1277,0,1153,0],[1278,0,1154,0],[1279,0,1155,0],[1280,0,1156,0],[1281,4,1157,4],[1281,13,1157,13,"prepSig"],[1281,20,1157,20,"prepSig"],[1281,21,1157,21,"message"],[1281,28,1157,28],[1281,30,1157,30,"privateKey"],[1281,40,1157,40],[1281,42,1157,42,"opts"],[1281,46,1157,46],[1281,48,1157,48],[1282,6,1158,8],[1282,10,1158,12],[1282,11,1158,13],[1282,22,1158,24],[1282,24,1158,26],[1282,35,1158,37],[1282,36,1158,38],[1282,37,1158,39,"some"],[1282,41,1158,43],[1282,42,1158,45,"k"],[1282,43,1158,46],[1282,47,1158,51,"k"],[1282,48,1158,52],[1282,52,1158,56,"opts"],[1282,56,1158,60],[1282,57,1158,61],[1282,59,1159,12],[1282,65,1159,18],[1282,69,1159,22,"Error"],[1282,74,1159,27],[1282,75,1159,28],[1282,112,1159,65],[1282,113,1159,66],[1283,6,1160,8],[1283,12,1160,14],[1284,8,1160,16,"lowS"],[1284,12,1160,20],[1285,8,1160,22,"prehash"],[1285,15,1160,29],[1286,8,1160,31,"extraEntropy"],[1287,6,1160,44],[1287,7,1160,45],[1287,10,1160,48,"validateSigOpts"],[1287,25,1160,63],[1287,26,1160,64,"opts"],[1287,30,1160,68],[1287,32,1160,70,"defaultSigOpts"],[1287,46,1160,84],[1287,47,1160,85],[1288,6,1161,8,"message"],[1288,13,1161,15],[1288,16,1161,18,"validateMsgAndHash"],[1288,34,1161,36],[1288,35,1161,37,"message"],[1288,42,1161,44],[1288,44,1161,46,"prehash"],[1288,51,1161,53],[1288,52,1161,54],[1288,53,1161,55],[1288,54,1161,56],[1289,6,1162,8],[1290,6,1163,8],[1291,6,1164,8],[1292,6,1165,8],[1292,12,1165,14,"h1int"],[1292,17,1165,19],[1292,20,1165,22,"bits2int_modN"],[1292,33,1165,35],[1292,34,1165,36,"message"],[1292,41,1165,43],[1292,42,1165,44],[1293,6,1166,8],[1293,12,1166,14,"d"],[1293,13,1166,15],[1293,16,1166,18,"_normFnElement"],[1293,30,1166,32],[1293,31,1166,33,"Fn"],[1293,33,1166,35],[1293,35,1166,37,"privateKey"],[1293,45,1166,47],[1293,46,1166,48],[1293,47,1166,49],[1293,48,1166,50],[1294,6,1167,8],[1294,12,1167,14,"seedArgs"],[1294,20,1167,22],[1294,23,1167,25],[1294,24,1167,26,"int2octets"],[1294,34,1167,36],[1294,35,1167,37,"d"],[1294,36,1167,38],[1294,37,1167,39],[1294,39,1167,41,"int2octets"],[1294,49,1167,51],[1294,50,1167,52,"h1int"],[1294,55,1167,57],[1294,56,1167,58],[1294,57,1167,59],[1295,6,1168,8],[1296,6,1169,8],[1296,10,1169,12,"extraEntropy"],[1296,22,1169,24],[1296,26,1169,28],[1296,30,1169,32],[1296,34,1169,36,"extraEntropy"],[1296,46,1169,48],[1296,51,1169,53],[1296,56,1169,58],[1296,58,1169,60],[1297,8,1170,12],[1298,8,1171,12],[1299,8,1172,12],[1299,14,1172,18,"e"],[1299,15,1172,19],[1299,18,1172,22,"extraEntropy"],[1299,30,1172,34],[1299,35,1172,39],[1299,39,1172,43],[1299,42,1172,46,"randomBytes"],[1299,53,1172,57],[1299,54,1172,58,"lengths"],[1299,61,1172,65],[1299,62,1172,66,"secretKey"],[1299,71,1172,75],[1299,72,1172,76],[1299,75,1172,79,"extraEntropy"],[1299,87,1172,91],[1300,8,1173,12,"seedArgs"],[1300,16,1173,20],[1300,17,1173,21,"push"],[1300,21,1173,25],[1300,22,1173,26],[1300,26,1173,26,"ensureBytes"],[1300,45,1173,37],[1300,47,1173,38],[1300,61,1173,52],[1300,63,1173,54,"e"],[1300,64,1173,55],[1300,65,1173,56],[1300,66,1173,57],[1300,67,1173,58],[1300,68,1173,59],[1301,6,1174,8],[1302,6,1175,8],[1302,12,1175,14,"seed"],[1302,16,1175,18],[1302,19,1175,21],[1302,23,1175,21,"concatBytes"],[1302,42,1175,32],[1302,44,1175,33],[1302,47,1175,36,"seedArgs"],[1302,55,1175,44],[1302,56,1175,45],[1302,57,1175,46],[1302,58,1175,47],[1303,6,1176,8],[1303,12,1176,14,"m"],[1303,13,1176,15],[1303,16,1176,18,"h1int"],[1303,21,1176,23],[1303,22,1176,24],[1303,23,1176,25],[1304,6,1177,8],[1305,6,1178,8],[1306,6,1179,8],[1307,6,1180,8],[1308,6,1181,8],[1309,6,1182,8],[1310,6,1183,8],[1311,6,1184,8],[1312,6,1185,8],[1312,15,1185,17,"k2sig"],[1312,20,1185,22,"k2sig"],[1312,21,1185,23,"kBytes"],[1312,27,1185,29],[1312,29,1185,31],[1313,8,1186,12],[1314,8,1187,12],[1315,8,1188,12],[1315,14,1188,18,"k"],[1315,15,1188,19],[1315,18,1188,22,"bits2int"],[1315,26,1188,30],[1315,27,1188,31,"kBytes"],[1315,33,1188,37],[1315,34,1188,38],[1315,35,1188,39],[1315,36,1188,40],[1316,8,1189,12],[1316,12,1189,16],[1316,13,1189,17,"Fn"],[1316,15,1189,19],[1316,16,1189,20,"isValidNot0"],[1316,27,1189,31],[1316,28,1189,32,"k"],[1316,29,1189,33],[1316,30,1189,34],[1316,32,1190,16],[1316,39,1190,23],[1316,40,1190,24],[1317,8,1191,12],[1317,14,1191,18,"ik"],[1317,16,1191,20],[1317,19,1191,23,"Fn"],[1317,21,1191,25],[1317,22,1191,26,"inv"],[1317,25,1191,29],[1317,26,1191,30,"k"],[1317,27,1191,31],[1317,28,1191,32],[1317,29,1191,33],[1317,30,1191,34],[1318,8,1192,12],[1318,14,1192,18,"q"],[1318,15,1192,19],[1318,18,1192,22,"Point"],[1318,23,1192,27],[1318,24,1192,28,"BASE"],[1318,28,1192,32],[1318,29,1192,33,"multiply"],[1318,37,1192,41],[1318,38,1192,42,"k"],[1318,39,1192,43],[1318,40,1192,44],[1318,41,1192,45,"toAffine"],[1318,49,1192,53],[1318,50,1192,54],[1318,51,1192,55],[1318,52,1192,56],[1318,53,1192,57],[1319,8,1193,12],[1319,14,1193,18,"r"],[1319,15,1193,19],[1319,18,1193,22,"Fn"],[1319,20,1193,24],[1319,21,1193,25,"create"],[1319,27,1193,31],[1319,28,1193,32,"q"],[1319,29,1193,33],[1319,30,1193,34,"x"],[1319,31,1193,35],[1319,32,1193,36],[1319,33,1193,37],[1319,34,1193,38],[1320,8,1194,12],[1320,12,1194,16,"r"],[1320,13,1194,17],[1320,18,1194,22,"_0n"],[1320,21,1194,25],[1320,23,1195,16],[1321,8,1196,12],[1321,14,1196,18,"s"],[1321,15,1196,19],[1321,18,1196,22,"Fn"],[1321,20,1196,24],[1321,21,1196,25,"create"],[1321,27,1196,31],[1321,28,1196,32,"ik"],[1321,30,1196,34],[1321,33,1196,37,"Fn"],[1321,35,1196,39],[1321,36,1196,40,"create"],[1321,42,1196,46],[1321,43,1196,47,"m"],[1321,44,1196,48],[1321,47,1196,51,"r"],[1321,48,1196,52],[1321,51,1196,55,"d"],[1321,52,1196,56],[1321,53,1196,57],[1321,54,1196,58],[1321,55,1196,59],[1321,56,1196,60],[1322,8,1197,12],[1322,12,1197,16,"s"],[1322,13,1197,17],[1322,18,1197,22,"_0n"],[1322,21,1197,25],[1322,23,1198,16],[1323,8,1199,12],[1323,12,1199,16,"recovery"],[1323,20,1199,24],[1323,23,1199,27],[1323,24,1199,28,"q"],[1323,25,1199,29],[1323,26,1199,30,"x"],[1323,27,1199,31],[1323,32,1199,36,"r"],[1323,33,1199,37],[1323,36,1199,40],[1323,37,1199,41],[1323,40,1199,44],[1323,41,1199,45],[1323,45,1199,49,"Number"],[1323,51,1199,55],[1323,52,1199,56,"q"],[1323,53,1199,57],[1323,54,1199,58,"y"],[1323,55,1199,59],[1323,58,1199,62,"_1n"],[1323,61,1199,65],[1323,62,1199,66],[1323,63,1199,67],[1323,64,1199,68],[1324,8,1200,12],[1324,12,1200,16,"normS"],[1324,17,1200,21],[1324,20,1200,24,"s"],[1324,21,1200,25],[1325,8,1201,12],[1325,12,1201,16,"lowS"],[1325,16,1201,20],[1325,20,1201,24,"isBiggerThanHalfOrder"],[1325,41,1201,45],[1325,42,1201,46,"s"],[1325,43,1201,47],[1325,44,1201,48],[1325,46,1201,50],[1326,10,1202,16,"normS"],[1326,15,1202,21],[1326,18,1202,24,"Fn"],[1326,20,1202,26],[1326,21,1202,27,"neg"],[1326,24,1202,30],[1326,25,1202,31,"s"],[1326,26,1202,32],[1326,27,1202,33],[1326,28,1202,34],[1326,29,1202,35],[1327,10,1203,16,"recovery"],[1327,18,1203,24],[1327,22,1203,28],[1327,23,1203,29],[1327,24,1203,30],[1327,25,1203,31],[1328,8,1204,12],[1329,8,1205,12],[1329,15,1205,19],[1329,19,1205,23,"Signature"],[1329,28,1205,32],[1329,29,1205,33,"r"],[1329,30,1205,34],[1329,32,1205,36,"normS"],[1329,37,1205,41],[1329,39,1205,43,"recovery"],[1329,47,1205,51],[1329,48,1205,52],[1329,49,1205,53],[1329,50,1205,54],[1330,6,1206,8],[1331,6,1207,8],[1331,13,1207,15],[1332,8,1207,17,"seed"],[1332,12,1207,21],[1333,8,1207,23,"k2sig"],[1334,6,1207,29],[1334,7,1207,30],[1335,4,1208,4],[1336,4,1209,4],[1337,0,1210,0],[1338,0,1211,0],[1339,0,1212,0],[1340,0,1213,0],[1341,0,1214,0],[1342,0,1215,0],[1343,0,1216,0],[1344,0,1217,0],[1345,0,1218,0],[1346,0,1219,0],[1347,4,1220,4],[1347,13,1220,13,"sign"],[1347,17,1220,17,"sign"],[1347,18,1220,18,"message"],[1347,25,1220,25],[1347,27,1220,27,"secretKey"],[1347,36,1220,36],[1347,38,1220,38,"opts"],[1347,42,1220,42],[1347,45,1220,45],[1347,46,1220,46],[1347,47,1220,47],[1347,49,1220,49],[1348,6,1221,8,"message"],[1348,13,1221,15],[1348,16,1221,18],[1348,20,1221,18,"ensureBytes"],[1348,39,1221,29],[1348,41,1221,30],[1348,50,1221,39],[1348,52,1221,41,"message"],[1348,59,1221,48],[1348,60,1221,49],[1349,6,1222,8],[1349,12,1222,14],[1350,8,1222,16,"seed"],[1350,12,1222,20],[1351,8,1222,22,"k2sig"],[1352,6,1222,28],[1352,7,1222,29],[1352,10,1222,32,"prepSig"],[1352,17,1222,39],[1352,18,1222,40,"message"],[1352,25,1222,47],[1352,27,1222,49,"secretKey"],[1352,36,1222,58],[1352,38,1222,60,"opts"],[1352,42,1222,64],[1352,43,1222,65],[1352,44,1222,66],[1352,45,1222,67],[1353,6,1223,8],[1353,12,1223,14,"drbg"],[1353,16,1223,18],[1353,19,1223,21],[1353,23,1223,21,"createHmacDrbg"],[1353,45,1223,35],[1353,47,1223,36,"hash"],[1353,51,1223,40],[1353,52,1223,41,"outputLen"],[1353,61,1223,50],[1353,63,1223,52,"Fn"],[1353,65,1223,54],[1353,66,1223,55,"BYTES"],[1353,71,1223,60],[1353,73,1223,62,"hmac"],[1353,77,1223,66],[1353,78,1223,67],[1354,6,1224,8],[1354,12,1224,14,"sig"],[1354,15,1224,17],[1354,18,1224,20,"drbg"],[1354,22,1224,24],[1354,23,1224,25,"seed"],[1354,27,1224,29],[1354,29,1224,31,"k2sig"],[1354,34,1224,36],[1354,35,1224,37],[1354,36,1224,38],[1354,37,1224,39],[1355,6,1225,8],[1355,13,1225,15,"sig"],[1355,16,1225,18],[1356,4,1226,4],[1357,4,1227,4],[1357,13,1227,13,"tryParsingSig"],[1357,26,1227,26,"tryParsingSig"],[1357,27,1227,27,"sg"],[1357,29,1227,29],[1357,31,1227,31],[1358,6,1228,8],[1359,6,1229,8],[1359,10,1229,12,"sig"],[1359,13,1229,15],[1359,16,1229,18,"undefined"],[1359,25,1229,27],[1360,6,1230,8],[1360,12,1230,14,"isHex"],[1360,17,1230,19],[1360,20,1230,22],[1360,27,1230,29,"sg"],[1360,29,1230,31],[1360,34,1230,36],[1360,42,1230,44],[1360,46,1230,48],[1360,50,1230,48,"isBytes"],[1360,65,1230,55],[1360,67,1230,56,"sg"],[1360,69,1230,58],[1360,70,1230,59],[1361,6,1231,8],[1361,12,1231,14,"isObj"],[1361,17,1231,19],[1361,20,1231,22],[1361,21,1231,23,"isHex"],[1361,26,1231,28],[1361,30,1232,12,"sg"],[1361,32,1232,14],[1361,37,1232,19],[1361,41,1232,23],[1361,45,1233,12],[1361,52,1233,19,"sg"],[1361,54,1233,21],[1361,59,1233,26],[1361,67,1233,34],[1361,71,1234,12],[1361,78,1234,19,"sg"],[1361,80,1234,21],[1361,81,1234,22,"r"],[1361,82,1234,23],[1361,87,1234,28],[1361,95,1234,36],[1361,99,1235,12],[1361,106,1235,19,"sg"],[1361,108,1235,21],[1361,109,1235,22,"s"],[1361,110,1235,23],[1361,115,1235,28],[1361,123,1235,36],[1362,6,1236,8],[1362,10,1236,12],[1362,11,1236,13,"isHex"],[1362,16,1236,18],[1362,20,1236,22],[1362,21,1236,23,"isObj"],[1362,26,1236,28],[1362,28,1237,12],[1362,34,1237,18],[1362,38,1237,22,"Error"],[1362,43,1237,27],[1362,44,1237,28],[1362,118,1237,102],[1362,119,1237,103],[1363,6,1238,8],[1363,10,1238,12,"isObj"],[1363,15,1238,17],[1363,17,1238,19],[1364,8,1239,12,"sig"],[1364,11,1239,15],[1364,14,1239,18],[1364,18,1239,22,"Signature"],[1364,27,1239,31],[1364,28,1239,32,"sg"],[1364,30,1239,34],[1364,31,1239,35,"r"],[1364,32,1239,36],[1364,34,1239,38,"sg"],[1364,36,1239,40],[1364,37,1239,41,"s"],[1364,38,1239,42],[1364,39,1239,43],[1365,6,1240,8],[1365,7,1240,9],[1365,13,1241,13],[1365,17,1241,17,"isHex"],[1365,22,1241,22],[1365,24,1241,24],[1366,8,1242,12],[1366,12,1242,16],[1367,10,1243,16,"sig"],[1367,13,1243,19],[1367,16,1243,22,"Signature"],[1367,25,1243,31],[1367,26,1243,32,"fromBytes"],[1367,35,1243,41],[1367,36,1243,42],[1367,40,1243,42,"ensureBytes"],[1367,59,1243,53],[1367,61,1243,54],[1367,66,1243,59],[1367,68,1243,61,"sg"],[1367,70,1243,63],[1367,71,1243,64],[1367,73,1243,66],[1367,78,1243,71],[1367,79,1243,72],[1368,8,1244,12],[1368,9,1244,13],[1368,10,1245,12],[1368,17,1245,19,"derError"],[1368,25,1245,27],[1368,27,1245,29],[1369,10,1246,16],[1369,14,1246,20],[1369,16,1246,22,"derError"],[1369,24,1246,30],[1369,36,1246,42,"DER"],[1369,39,1246,45],[1369,40,1246,46,"Err"],[1369,43,1246,49],[1369,44,1246,50],[1369,46,1247,20],[1369,52,1247,26,"derError"],[1369,60,1247,34],[1370,8,1248,12],[1371,8,1249,12],[1371,12,1249,16],[1371,13,1249,17,"sig"],[1371,16,1249,20],[1371,18,1249,22],[1372,10,1250,16],[1372,14,1250,20],[1373,12,1251,20,"sig"],[1373,15,1251,23],[1373,18,1251,26,"Signature"],[1373,27,1251,35],[1373,28,1251,36,"fromBytes"],[1373,37,1251,45],[1373,38,1251,46],[1373,42,1251,46,"ensureBytes"],[1373,61,1251,57],[1373,63,1251,58],[1373,68,1251,63],[1373,70,1251,65,"sg"],[1373,72,1251,67],[1373,73,1251,68],[1373,75,1251,70],[1373,84,1251,79],[1373,85,1251,80],[1374,10,1252,16],[1374,11,1252,17],[1374,12,1253,16],[1374,19,1253,23,"error"],[1374,24,1253,28],[1374,26,1253,30],[1375,12,1254,20],[1375,19,1254,27],[1375,24,1254,32],[1376,10,1255,16],[1377,8,1256,12],[1378,6,1257,8],[1379,6,1258,8],[1379,10,1258,12],[1379,11,1258,13,"sig"],[1379,14,1258,16],[1379,16,1259,12],[1379,23,1259,19],[1379,28,1259,24],[1380,6,1260,8],[1380,13,1260,15,"sig"],[1380,16,1260,18],[1381,4,1261,4],[1382,4,1262,4],[1383,0,1263,0],[1384,0,1264,0],[1385,0,1265,0],[1386,0,1266,0],[1387,0,1267,0],[1388,0,1268,0],[1389,0,1269,0],[1390,0,1270,0],[1391,0,1271,0],[1392,0,1272,0],[1393,0,1273,0],[1394,0,1274,0],[1395,4,1275,4],[1395,13,1275,13,"verify"],[1395,19,1275,19,"verify"],[1395,20,1275,20,"signature"],[1395,29,1275,29],[1395,31,1275,31,"message"],[1395,38,1275,38],[1395,40,1275,40,"publicKey"],[1395,49,1275,49],[1395,51,1275,51,"opts"],[1395,55,1275,55],[1395,58,1275,58],[1395,59,1275,59],[1395,60,1275,60],[1395,62,1275,62],[1396,6,1276,8],[1396,12,1276,14],[1397,8,1276,16,"lowS"],[1397,12,1276,20],[1398,8,1276,22,"prehash"],[1398,15,1276,29],[1399,8,1276,31,"format"],[1400,6,1276,38],[1400,7,1276,39],[1400,10,1276,42,"validateSigOpts"],[1400,25,1276,57],[1400,26,1276,58,"opts"],[1400,30,1276,62],[1400,32,1276,64,"defaultSigOpts"],[1400,46,1276,78],[1400,47,1276,79],[1401,6,1277,8,"publicKey"],[1401,15,1277,17],[1401,18,1277,20],[1401,22,1277,20,"ensureBytes"],[1401,41,1277,31],[1401,43,1277,32],[1401,54,1277,43],[1401,56,1277,45,"publicKey"],[1401,65,1277,54],[1401,66,1277,55],[1402,6,1278,8,"message"],[1402,13,1278,15],[1402,16,1278,18,"validateMsgAndHash"],[1402,34,1278,36],[1402,35,1278,37],[1402,39,1278,37,"ensureBytes"],[1402,58,1278,48],[1402,60,1278,49],[1402,69,1278,58],[1402,71,1278,60,"message"],[1402,78,1278,67],[1402,79,1278,68],[1402,81,1278,70,"prehash"],[1402,88,1278,77],[1402,89,1278,78],[1403,6,1279,8],[1403,10,1279,12],[1403,18,1279,20],[1403,22,1279,24,"opts"],[1403,26,1279,28],[1403,28,1280,12],[1403,34,1280,18],[1403,38,1280,22,"Error"],[1403,43,1280,27],[1403,44,1280,28],[1403,80,1280,64],[1403,81,1280,65],[1404,6,1281,8],[1404,12,1281,14,"sig"],[1404,15,1281,17],[1404,18,1281,20,"format"],[1404,24,1281,26],[1404,29,1281,31,"undefined"],[1404,38,1281,40],[1404,41,1282,14,"tryParsingSig"],[1404,54,1282,27],[1404,55,1282,28,"signature"],[1404,64,1282,37],[1404,65,1282,38],[1404,68,1283,14,"Signature"],[1404,77,1283,23],[1404,78,1283,24,"fromBytes"],[1404,87,1283,33],[1404,88,1283,34],[1404,92,1283,34,"ensureBytes"],[1404,111,1283,45],[1404,113,1283,46],[1404,118,1283,51],[1404,120,1283,53,"signature"],[1404,129,1283,62],[1404,130,1283,63],[1404,132,1283,65,"format"],[1404,138,1283,71],[1404,139,1283,72],[1405,6,1284,8],[1405,10,1284,12,"sig"],[1405,13,1284,15],[1405,18,1284,20],[1405,23,1284,25],[1405,25,1285,12],[1405,32,1285,19],[1405,37,1285,24],[1406,6,1286,8],[1406,10,1286,12],[1407,8,1287,12],[1407,14,1287,18,"P"],[1407,15,1287,19],[1407,18,1287,22,"Point"],[1407,23,1287,27],[1407,24,1287,28,"fromBytes"],[1407,33,1287,37],[1407,34,1287,38,"publicKey"],[1407,43,1287,47],[1407,44,1287,48],[1408,8,1288,12],[1408,12,1288,16,"lowS"],[1408,16,1288,20],[1408,20,1288,24,"sig"],[1408,23,1288,27],[1408,24,1288,28,"hasHighS"],[1408,32,1288,36],[1408,33,1288,37],[1408,34,1288,38],[1408,36,1289,16],[1408,43,1289,23],[1408,48,1289,28],[1409,8,1290,12],[1409,14,1290,18],[1410,10,1290,20,"r"],[1410,11,1290,21],[1411,10,1290,23,"s"],[1412,8,1290,25],[1412,9,1290,26],[1412,12,1290,29,"sig"],[1412,15,1290,32],[1413,8,1291,12],[1413,14,1291,18,"h"],[1413,15,1291,19],[1413,18,1291,22,"bits2int_modN"],[1413,31,1291,35],[1413,32,1291,36,"message"],[1413,39,1291,43],[1413,40,1291,44],[1413,41,1291,45],[1413,42,1291,46],[1414,8,1292,12],[1414,14,1292,18,"is"],[1414,16,1292,20],[1414,19,1292,23,"Fn"],[1414,21,1292,25],[1414,22,1292,26,"inv"],[1414,25,1292,29],[1414,26,1292,30,"s"],[1414,27,1292,31],[1414,28,1292,32],[1414,29,1292,33],[1414,30,1292,34],[1415,8,1293,12],[1415,14,1293,18,"u1"],[1415,16,1293,20],[1415,19,1293,23,"Fn"],[1415,21,1293,25],[1415,22,1293,26,"create"],[1415,28,1293,32],[1415,29,1293,33,"h"],[1415,30,1293,34],[1415,33,1293,37,"is"],[1415,35,1293,39],[1415,36,1293,40],[1415,37,1293,41],[1415,38,1293,42],[1416,8,1294,12],[1416,14,1294,18,"u2"],[1416,16,1294,20],[1416,19,1294,23,"Fn"],[1416,21,1294,25],[1416,22,1294,26,"create"],[1416,28,1294,32],[1416,29,1294,33,"r"],[1416,30,1294,34],[1416,33,1294,37,"is"],[1416,35,1294,39],[1416,36,1294,40],[1416,37,1294,41],[1416,38,1294,42],[1417,8,1295,12],[1417,14,1295,18,"R"],[1417,15,1295,19],[1417,18,1295,22,"Point"],[1417,23,1295,27],[1417,24,1295,28,"BASE"],[1417,28,1295,32],[1417,29,1295,33,"multiplyUnsafe"],[1417,43,1295,47],[1417,44,1295,48,"u1"],[1417,46,1295,50],[1417,47,1295,51],[1417,48,1295,52,"add"],[1417,51,1295,55],[1417,52,1295,56,"P"],[1417,53,1295,57],[1417,54,1295,58,"multiplyUnsafe"],[1417,68,1295,72],[1417,69,1295,73,"u2"],[1417,71,1295,75],[1417,72,1295,76],[1417,73,1295,77],[1417,74,1295,78],[1417,75,1295,79],[1418,8,1296,12],[1418,12,1296,16,"R"],[1418,13,1296,17],[1418,14,1296,18,"is0"],[1418,17,1296,21],[1418,18,1296,22],[1418,19,1296,23],[1418,21,1297,16],[1418,28,1297,23],[1418,33,1297,28],[1419,8,1298,12],[1419,14,1298,18,"v"],[1419,15,1298,19],[1419,18,1298,22,"Fn"],[1419,20,1298,24],[1419,21,1298,25,"create"],[1419,27,1298,31],[1419,28,1298,32,"R"],[1419,29,1298,33],[1419,30,1298,34,"x"],[1419,31,1298,35],[1419,32,1298,36],[1419,33,1298,37],[1419,34,1298,38],[1420,8,1299,12],[1420,15,1299,19,"v"],[1420,16,1299,20],[1420,21,1299,25,"r"],[1420,22,1299,26],[1421,6,1300,8],[1421,7,1300,9],[1421,8,1301,8],[1421,15,1301,15,"e"],[1421,16,1301,16],[1421,18,1301,18],[1422,8,1302,12],[1422,15,1302,19],[1422,20,1302,24],[1423,6,1303,8],[1424,4,1304,4],[1425,4,1305,4],[1425,13,1305,13,"recoverPublicKey"],[1425,29,1305,29,"recoverPublicKey"],[1425,30,1305,30,"signature"],[1425,39,1305,39],[1425,41,1305,41,"message"],[1425,48,1305,48],[1425,50,1305,50,"opts"],[1425,54,1305,54],[1425,57,1305,57],[1425,58,1305,58],[1425,59,1305,59],[1425,61,1305,61],[1426,6,1306,8],[1426,12,1306,14],[1427,8,1306,16,"prehash"],[1428,6,1306,24],[1428,7,1306,25],[1428,10,1306,28,"validateSigOpts"],[1428,25,1306,43],[1428,26,1306,44,"opts"],[1428,30,1306,48],[1428,32,1306,50,"defaultSigOpts"],[1428,46,1306,64],[1428,47,1306,65],[1429,6,1307,8,"message"],[1429,13,1307,15],[1429,16,1307,18,"validateMsgAndHash"],[1429,34,1307,36],[1429,35,1307,37,"message"],[1429,42,1307,44],[1429,44,1307,46,"prehash"],[1429,51,1307,53],[1429,52,1307,54],[1430,6,1308,8],[1430,13,1308,15,"Signature"],[1430,22,1308,24],[1430,23,1308,25,"fromBytes"],[1430,32,1308,34],[1430,33,1308,35,"signature"],[1430,42,1308,44],[1430,44,1308,46],[1430,55,1308,57],[1430,56,1308,58],[1430,57,1308,59,"recoverPublicKey"],[1430,73,1308,75],[1430,74,1308,76,"message"],[1430,81,1308,83],[1430,82,1308,84],[1430,83,1308,85,"toBytes"],[1430,90,1308,92],[1430,91,1308,93],[1430,92,1308,94],[1431,4,1309,4],[1432,4,1310,4],[1432,11,1310,11,"Object"],[1432,17,1310,17],[1432,18,1310,18,"freeze"],[1432,24,1310,24],[1432,25,1310,25],[1433,6,1311,8,"keygen"],[1433,12,1311,14],[1434,6,1312,8,"getPublicKey"],[1434,18,1312,20],[1435,6,1313,8,"getSharedSecret"],[1435,21,1313,23],[1436,6,1314,8,"utils"],[1436,11,1314,13],[1437,6,1315,8,"lengths"],[1437,13,1315,15],[1438,6,1316,8,"Point"],[1438,11,1316,13],[1439,6,1317,8,"sign"],[1439,10,1317,12],[1440,6,1318,8,"verify"],[1440,12,1318,14],[1441,6,1319,8,"recoverPublicKey"],[1441,22,1319,24],[1442,6,1320,8,"Signature"],[1442,15,1320,17],[1443,6,1321,8,"hash"],[1444,4,1322,4],[1444,5,1322,5],[1444,6,1322,6],[1445,2,1323,0],[1446,2,1324,0],[1447,2,1325,7],[1447,11,1325,16,"weierstrassPoints"],[1447,28,1325,33,"weierstrassPoints"],[1447,29,1325,34,"c"],[1447,30,1325,35],[1447,32,1325,37],[1448,4,1326,4],[1448,10,1326,10],[1449,6,1326,12,"CURVE"],[1449,11,1326,17],[1450,6,1326,19,"curveOpts"],[1451,4,1326,29],[1451,5,1326,30],[1451,8,1326,33,"_weierstrass_legacy_opts_to_new"],[1451,39,1326,64],[1451,40,1326,65,"c"],[1451,41,1326,66],[1451,42,1326,67],[1452,4,1327,4],[1452,10,1327,10,"Point"],[1452,15,1327,15],[1452,18,1327,18,"weierstrassN"],[1452,30,1327,30],[1452,31,1327,31,"CURVE"],[1452,36,1327,36],[1452,38,1327,38,"curveOpts"],[1452,47,1327,47],[1452,48,1327,48],[1453,4,1328,4],[1453,11,1328,11,"_weierstrass_new_output_to_legacy"],[1453,44,1328,44],[1453,45,1328,45,"c"],[1453,46,1328,46],[1453,48,1328,48,"Point"],[1453,53,1328,53],[1453,54,1328,54],[1454,2,1329,0],[1455,2,1330,0],[1455,11,1330,9,"_weierstrass_legacy_opts_to_new"],[1455,42,1330,40,"_weierstrass_legacy_opts_to_new"],[1455,43,1330,41,"c"],[1455,44,1330,42],[1455,46,1330,44],[1456,4,1331,4],[1456,10,1331,10,"CURVE"],[1456,15,1331,15],[1456,18,1331,18],[1457,6,1332,8,"a"],[1457,7,1332,9],[1457,9,1332,11,"c"],[1457,10,1332,12],[1457,11,1332,13,"a"],[1457,12,1332,14],[1458,6,1333,8,"b"],[1458,7,1333,9],[1458,9,1333,11,"c"],[1458,10,1333,12],[1458,11,1333,13,"b"],[1458,12,1333,14],[1459,6,1334,8,"p"],[1459,7,1334,9],[1459,9,1334,11,"c"],[1459,10,1334,12],[1459,11,1334,13,"Fp"],[1459,13,1334,15],[1459,14,1334,16,"ORDER"],[1459,19,1334,21],[1460,6,1335,8,"n"],[1460,7,1335,9],[1460,9,1335,11,"c"],[1460,10,1335,12],[1460,11,1335,13,"n"],[1460,12,1335,14],[1461,6,1336,8,"h"],[1461,7,1336,9],[1461,9,1336,11,"c"],[1461,10,1336,12],[1461,11,1336,13,"h"],[1461,12,1336,14],[1462,6,1337,8,"Gx"],[1462,8,1337,10],[1462,10,1337,12,"c"],[1462,11,1337,13],[1462,12,1337,14,"Gx"],[1462,14,1337,16],[1463,6,1338,8,"Gy"],[1463,8,1338,10],[1463,10,1338,12,"c"],[1463,11,1338,13],[1463,12,1338,14,"Gy"],[1464,4,1339,4],[1464,5,1339,5],[1465,4,1340,4],[1465,10,1340,10,"Fp"],[1465,12,1340,12],[1465,15,1340,15,"c"],[1465,16,1340,16],[1465,17,1340,17,"Fp"],[1465,19,1340,19],[1466,4,1341,4],[1466,8,1341,8,"allowedLengths"],[1466,22,1341,22],[1466,25,1341,25,"c"],[1466,26,1341,26],[1466,27,1341,27,"allowedPrivateKeyLengths"],[1466,51,1341,51],[1466,54,1342,10,"Array"],[1466,59,1342,15],[1466,60,1342,16,"from"],[1466,64,1342,20],[1466,65,1342,21],[1466,69,1342,25,"Set"],[1466,72,1342,28],[1466,73,1342,29,"c"],[1466,74,1342,30],[1466,75,1342,31,"allowedPrivateKeyLengths"],[1466,99,1342,55],[1466,100,1342,56,"map"],[1466,103,1342,59],[1466,104,1342,61,"l"],[1466,105,1342,62],[1466,109,1342,67,"Math"],[1466,113,1342,71],[1466,114,1342,72,"ceil"],[1466,118,1342,76],[1466,119,1342,77,"l"],[1466,120,1342,78],[1466,123,1342,81],[1466,124,1342,82],[1466,125,1342,83],[1466,126,1342,84],[1466,127,1342,85],[1466,128,1342,86],[1466,131,1343,10,"undefined"],[1466,140,1343,19],[1467,4,1344,4],[1467,10,1344,10,"Fn"],[1467,12,1344,12],[1467,15,1344,15],[1467,19,1344,15,"Field"],[1467,33,1344,20],[1467,35,1344,21,"CURVE"],[1467,40,1344,26],[1467,41,1344,27,"n"],[1467,42,1344,28],[1467,44,1344,30],[1468,6,1345,8,"BITS"],[1468,10,1345,12],[1468,12,1345,14,"c"],[1468,13,1345,15],[1468,14,1345,16,"nBitLength"],[1468,24,1345,26],[1469,6,1346,8,"allowedLengths"],[1469,20,1346,22],[1469,22,1346,24,"allowedLengths"],[1469,36,1346,38],[1470,6,1347,8,"modFromBytes"],[1470,18,1347,20],[1470,20,1347,22,"c"],[1470,21,1347,23],[1470,22,1347,24,"wrapPrivateKey"],[1471,4,1348,4],[1471,5,1348,5],[1471,6,1348,6],[1472,4,1349,4],[1472,10,1349,10,"curveOpts"],[1472,19,1349,19],[1472,22,1349,22],[1473,6,1350,8,"Fp"],[1473,8,1350,10],[1474,6,1351,8,"Fn"],[1474,8,1351,10],[1475,6,1352,8,"allowInfinityPoint"],[1475,24,1352,26],[1475,26,1352,28,"c"],[1475,27,1352,29],[1475,28,1352,30,"allowInfinityPoint"],[1475,46,1352,48],[1476,6,1353,8,"endo"],[1476,10,1353,12],[1476,12,1353,14,"c"],[1476,13,1353,15],[1476,14,1353,16,"endo"],[1476,18,1353,20],[1477,6,1354,8,"isTorsionFree"],[1477,19,1354,21],[1477,21,1354,23,"c"],[1477,22,1354,24],[1477,23,1354,25,"isTorsionFree"],[1477,36,1354,38],[1478,6,1355,8,"clearCofactor"],[1478,19,1355,21],[1478,21,1355,23,"c"],[1478,22,1355,24],[1478,23,1355,25,"clearCofactor"],[1478,36,1355,38],[1479,6,1356,8,"fromBytes"],[1479,15,1356,17],[1479,17,1356,19,"c"],[1479,18,1356,20],[1479,19,1356,21,"fromBytes"],[1479,28,1356,30],[1480,6,1357,8,"toBytes"],[1480,13,1357,15],[1480,15,1357,17,"c"],[1480,16,1357,18],[1480,17,1357,19,"toBytes"],[1481,4,1358,4],[1481,5,1358,5],[1482,4,1359,4],[1482,11,1359,11],[1483,6,1359,13,"CURVE"],[1483,11,1359,18],[1484,6,1359,20,"curveOpts"],[1485,4,1359,30],[1485,5,1359,31],[1486,2,1360,0],[1487,2,1361,0],[1487,11,1361,9,"_ecdsa_legacy_opts_to_new"],[1487,36,1361,34,"_ecdsa_legacy_opts_to_new"],[1487,37,1361,35,"c"],[1487,38,1361,36],[1487,40,1361,38],[1488,4,1362,4],[1488,10,1362,10],[1489,6,1362,12,"CURVE"],[1489,11,1362,17],[1490,6,1362,19,"curveOpts"],[1491,4,1362,29],[1491,5,1362,30],[1491,8,1362,33,"_weierstrass_legacy_opts_to_new"],[1491,39,1362,64],[1491,40,1362,65,"c"],[1491,41,1362,66],[1491,42,1362,67],[1492,4,1363,4],[1492,10,1363,10,"ecdsaOpts"],[1492,19,1363,19],[1492,22,1363,22],[1493,6,1364,8,"hmac"],[1493,10,1364,12],[1493,12,1364,14,"c"],[1493,13,1364,15],[1493,14,1364,16,"hmac"],[1493,18,1364,20],[1494,6,1365,8,"randomBytes"],[1494,17,1365,19],[1494,19,1365,21,"c"],[1494,20,1365,22],[1494,21,1365,23,"randomBytes"],[1494,32,1365,34],[1495,6,1366,8,"lowS"],[1495,10,1366,12],[1495,12,1366,14,"c"],[1495,13,1366,15],[1495,14,1366,16,"lowS"],[1495,18,1366,20],[1496,6,1367,8,"bits2int"],[1496,14,1367,16],[1496,16,1367,18,"c"],[1496,17,1367,19],[1496,18,1367,20,"bits2int"],[1496,26,1367,28],[1497,6,1368,8,"bits2int_modN"],[1497,19,1368,21],[1497,21,1368,23,"c"],[1497,22,1368,24],[1497,23,1368,25,"bits2int_modN"],[1498,4,1369,4],[1498,5,1369,5],[1499,4,1370,4],[1499,11,1370,11],[1500,6,1370,13,"CURVE"],[1500,11,1370,18],[1501,6,1370,20,"curveOpts"],[1501,15,1370,29],[1502,6,1370,31,"hash"],[1502,10,1370,35],[1502,12,1370,37,"c"],[1502,13,1370,38],[1502,14,1370,39,"hash"],[1502,18,1370,43],[1503,6,1370,45,"ecdsaOpts"],[1504,4,1370,55],[1504,5,1370,56],[1505,2,1371,0],[1506,2,1372,7],[1506,11,1372,16,"_legacyHelperEquat"],[1506,29,1372,34,"_legacyHelperEquat"],[1506,30,1372,35,"Fp"],[1506,32,1372,37],[1506,34,1372,39,"a"],[1506,35,1372,40],[1506,37,1372,42,"b"],[1506,38,1372,43],[1506,40,1372,45],[1507,4,1373,4],[1508,0,1374,0],[1509,0,1375,0],[1510,0,1376,0],[1511,4,1377,4],[1511,13,1377,13,"weierstrassEquation"],[1511,32,1377,32,"weierstrassEquation"],[1511,33,1377,33,"x"],[1511,34,1377,34],[1511,36,1377,36],[1512,6,1378,8],[1512,12,1378,14,"x2"],[1512,14,1378,16],[1512,17,1378,19,"Fp"],[1512,19,1378,21],[1512,20,1378,22,"sqr"],[1512,23,1378,25],[1512,24,1378,26,"x"],[1512,25,1378,27],[1512,26,1378,28],[1512,27,1378,29],[1512,28,1378,30],[1513,6,1379,8],[1513,12,1379,14,"x3"],[1513,14,1379,16],[1513,17,1379,19,"Fp"],[1513,19,1379,21],[1513,20,1379,22,"mul"],[1513,23,1379,25],[1513,24,1379,26,"x2"],[1513,26,1379,28],[1513,28,1379,30,"x"],[1513,29,1379,31],[1513,30,1379,32],[1513,31,1379,33],[1513,32,1379,34],[1514,6,1380,8],[1514,13,1380,15,"Fp"],[1514,15,1380,17],[1514,16,1380,18,"add"],[1514,19,1380,21],[1514,20,1380,22,"Fp"],[1514,22,1380,24],[1514,23,1380,25,"add"],[1514,26,1380,28],[1514,27,1380,29,"x3"],[1514,29,1380,31],[1514,31,1380,33,"Fp"],[1514,33,1380,35],[1514,34,1380,36,"mul"],[1514,37,1380,39],[1514,38,1380,40,"x"],[1514,39,1380,41],[1514,41,1380,43,"a"],[1514,42,1380,44],[1514,43,1380,45],[1514,44,1380,46],[1514,46,1380,48,"b"],[1514,47,1380,49],[1514,48,1380,50],[1514,49,1380,51],[1514,50,1380,52],[1515,4,1381,4],[1516,4,1382,4],[1516,11,1382,11,"weierstrassEquation"],[1516,30,1382,30],[1517,2,1383,0],[1518,2,1384,0],[1518,11,1384,9,"_weierstrass_new_output_to_legacy"],[1518,44,1384,42,"_weierstrass_new_output_to_legacy"],[1518,45,1384,43,"c"],[1518,46,1384,44],[1518,48,1384,46,"Point"],[1518,53,1384,51],[1518,55,1384,53],[1519,4,1385,4],[1519,10,1385,10],[1520,6,1385,12,"Fp"],[1520,8,1385,14],[1521,6,1385,16,"Fn"],[1522,4,1385,19],[1522,5,1385,20],[1522,8,1385,23,"Point"],[1522,13,1385,28],[1523,4,1386,4],[1523,13,1386,13,"isWithinCurveOrder"],[1523,31,1386,31,"isWithinCurveOrder"],[1523,32,1386,32,"num"],[1523,35,1386,35],[1523,37,1386,37],[1524,6,1387,8],[1524,13,1387,15],[1524,17,1387,15,"inRange"],[1524,32,1387,22],[1524,34,1387,23,"num"],[1524,37,1387,26],[1524,39,1387,28,"_1n"],[1524,42,1387,31],[1524,44,1387,33,"Fn"],[1524,46,1387,35],[1524,47,1387,36,"ORDER"],[1524,52,1387,41],[1524,53,1387,42],[1525,4,1388,4],[1526,4,1389,4],[1526,10,1389,10,"weierstrassEquation"],[1526,29,1389,29],[1526,32,1389,32,"_legacyHelperEquat"],[1526,50,1389,50],[1526,51,1389,51,"Fp"],[1526,53,1389,53],[1526,55,1389,55,"c"],[1526,56,1389,56],[1526,57,1389,57,"a"],[1526,58,1389,58],[1526,60,1389,60,"c"],[1526,61,1389,61],[1526,62,1389,62,"b"],[1526,63,1389,63],[1526,64,1389,64],[1527,4,1390,4],[1527,11,1390,11,"Object"],[1527,17,1390,17],[1527,18,1390,18,"assign"],[1527,24,1390,24],[1527,25,1390,25],[1527,26,1390,26],[1527,27,1390,27],[1527,29,1390,29],[1528,6,1391,8,"CURVE"],[1528,11,1391,13],[1528,13,1391,15,"c"],[1528,14,1391,16],[1529,6,1392,8,"Point"],[1529,11,1392,13],[1529,13,1392,15,"Point"],[1529,18,1392,20],[1530,6,1393,8,"ProjectivePoint"],[1530,21,1393,23],[1530,23,1393,25,"Point"],[1530,28,1393,30],[1531,6,1394,8,"normPrivateKeyToScalar"],[1531,28,1394,30],[1531,30,1394,33,"key"],[1531,33,1394,36],[1531,37,1394,41,"_normFnElement"],[1531,51,1394,55],[1531,52,1394,56,"Fn"],[1531,54,1394,58],[1531,56,1394,60,"key"],[1531,59,1394,63],[1531,60,1394,64],[1532,6,1395,8,"weierstrassEquation"],[1532,25,1395,27],[1533,6,1396,8,"isWithinCurveOrder"],[1534,4,1397,4],[1534,5,1397,5],[1534,6,1397,6],[1535,2,1398,0],[1536,2,1399,0],[1536,11,1399,9,"_ecdsa_new_output_to_legacy"],[1536,38,1399,36,"_ecdsa_new_output_to_legacy"],[1536,39,1399,37,"c"],[1536,40,1399,38],[1536,42,1399,40,"_ecdsa"],[1536,48,1399,46],[1536,50,1399,48],[1537,4,1400,4],[1537,10,1400,10,"Point"],[1537,15,1400,15],[1537,18,1400,18,"_ecdsa"],[1537,24,1400,24],[1537,25,1400,25,"Point"],[1537,30,1400,30],[1538,4,1401,4],[1538,11,1401,11,"Object"],[1538,17,1401,17],[1538,18,1401,18,"assign"],[1538,24,1401,24],[1538,25,1401,25],[1538,26,1401,26],[1538,27,1401,27],[1538,29,1401,29,"_ecdsa"],[1538,35,1401,35],[1538,37,1401,37],[1539,6,1402,8,"ProjectivePoint"],[1539,21,1402,23],[1539,23,1402,25,"Point"],[1539,28,1402,30],[1540,6,1403,8,"CURVE"],[1540,11,1403,13],[1540,13,1403,15,"Object"],[1540,19,1403,21],[1540,20,1403,22,"assign"],[1540,26,1403,28],[1540,27,1403,29],[1540,28,1403,30],[1540,29,1403,31],[1540,31,1403,33,"c"],[1540,32,1403,34],[1540,34,1403,36],[1540,38,1403,36,"nLength"],[1540,54,1403,43],[1540,56,1403,44,"Point"],[1540,61,1403,49],[1540,62,1403,50,"Fn"],[1540,64,1403,52],[1540,65,1403,53,"ORDER"],[1540,70,1403,58],[1540,72,1403,60,"Point"],[1540,77,1403,65],[1540,78,1403,66,"Fn"],[1540,80,1403,68],[1540,81,1403,69,"BITS"],[1540,85,1403,73],[1540,86,1403,74],[1541,4,1404,4],[1541,5,1404,5],[1541,6,1404,6],[1542,2,1405,0],[1543,2,1406,0],[1544,2,1407,7],[1544,11,1407,16,"weierstrass"],[1544,22,1407,27,"weierstrass"],[1544,23,1407,28,"c"],[1544,24,1407,29],[1544,26,1407,31],[1545,4,1408,4],[1545,10,1408,10],[1546,6,1408,12,"CURVE"],[1546,11,1408,17],[1547,6,1408,19,"curveOpts"],[1547,15,1408,28],[1548,6,1408,30,"hash"],[1548,10,1408,34],[1549,6,1408,36,"ecdsaOpts"],[1550,4,1408,46],[1550,5,1408,47],[1550,8,1408,50,"_ecdsa_legacy_opts_to_new"],[1550,33,1408,75],[1550,34,1408,76,"c"],[1550,35,1408,77],[1550,36,1408,78],[1551,4,1409,4],[1551,10,1409,10,"Point"],[1551,15,1409,15],[1551,18,1409,18,"weierstrassN"],[1551,30,1409,30],[1551,31,1409,31,"CURVE"],[1551,36,1409,36],[1551,38,1409,38,"curveOpts"],[1551,47,1409,47],[1551,48,1409,48],[1552,4,1410,4],[1552,10,1410,10,"signs"],[1552,15,1410,15],[1552,18,1410,18,"ecdsa"],[1552,23,1410,23],[1552,24,1410,24,"Point"],[1552,29,1410,29],[1552,31,1410,31,"hash"],[1552,35,1410,35],[1552,37,1410,37,"ecdsaOpts"],[1552,46,1410,46],[1552,47,1410,47],[1553,4,1411,4],[1553,11,1411,11,"_ecdsa_new_output_to_legacy"],[1553,38,1411,38],[1553,39,1411,39,"c"],[1553,40,1411,40],[1553,42,1411,42,"signs"],[1553,47,1411,47],[1553,48,1411,48],[1554,2,1412,0],[1555,0,1412,1],[1555,3]],"functionMap":{"names":["<global>","divNearest","_splitEndoScalar","validateSigFormat","validateSigOpts","DERErr","DERErr#constructor","DER._tlv.encode","DER._tlv.decode","DER._int.encode","DER._int.decode","DER.toSig","DER.hexFromSig","_normFnElement","weierstrassN","assertCompressionIsSupported","pointToBytes","pointFromBytes","weierstrassEquation","isValidXY","acoord","aprjpoint","splitEndoScalarN","memoized$argument_0","finishEndo","Point","Point#constructor","Point.CURVE","Point.fromAffine","Point.fromBytes","Point.fromHex","Point#get__x","Point#get__y","Point#precompute","Point#assertValidity","Point#hasEvenY","Point#equals","Point#negate","Point#double","Point#add","Point#subtract","Point#is0","Point#multiply","mul","wnaf.cached$argument_2","Point#multiplyUnsafe","Point#multiplyAndAddUnsafe","Point#toAffine","Point#isTorsionFree","Point#clearCofactor","Point#isSmallOrder","Point#toBytes","Point#toHex","Point#toString","Point#get__px","Point#get__py","Point#get__pz","Point#toRawBytes","Point#_setWindowSize","Point.normalizeZ","Point.msm","Point.fromPrivateKey","pprefix","SWUFpSqrtRatio","sqrtRatio","mapToCurveSimpleSWU","<anonymous>","getWLengths","ecdh","isValidSecretKey","isValidPublicKey","randomSecretKey","getPublicKey","keygen","isProbPub","getSharedSecret","utils.normPrivateKeyToScalar","utils.precompute","ecdsa","isBiggerThanHalfOrder","validateRS","validateSigLength","Signature","Signature#constructor","Signature.fromBytes","Signature.fromHex","Signature#addRecoveryBit","Signature#recoverPublicKey","Signature#hasHighS","Signature#toBytes","Signature#toHex","Signature#assertValidity","Signature.fromCompact","Signature.fromDER","Signature#normalizeS","Signature#toDERRawBytes","Signature#toDERHex","Signature#toCompactRawBytes","Signature#toCompactHex","bits2int_def","bits2int_modN_def","int2octets","validateMsgAndHash","prepSig","some$argument_0","k2sig","sign","tryParsingSig","verify","recoverPublicKey","weierstrassPoints","_weierstrass_legacy_opts_to_new","c.allowedPrivateKeyLengths.map$argument_0","_ecdsa_legacy_opts_to_new","_legacyHelperEquat","_weierstrass_new_output_to_legacy","isWithinCurveOrder","Object.assign$argument_1.normPrivateKeyToScalar","_ecdsa_new_output_to_legacy","weierstrass"],"mappings":"AAA;mBCiC,yDD;OEI;CFwB;AGC;CHI;AIC;CJW;OKC;ICC;KDE;CLC;gBOa;SPc;QQE;SRkC;QSO;STW;QUC;SVO;IWE;KXY;IYC;KZM;OaK;CbkB;OckB;ICsB;KDG;IEE;KFY;IGC;KHuC;IIG;KJI;IKG;KLI;IMY;KNI;IOC;KPG;IQC;KRI;kCSK;KTkB;qCSG;KTkB;IUC;KVK;IWM;QCE;SDK;QEC;SFE;QGE;SHU;QIC;SJI;QKC;SLE;QMC;SNE;QOC;SPE;QQO;SRK;QSG;STE;QUC;SVK;QWE;SXO;QYE;SZE;QaK;SbqC;QcK;SdgD;QeC;SfE;QgBC;ShBE;QiBU;wBCK,4BC,2BD,CD;SjBgB;QoBM;SpBmB;QqBC;SrBG;QsBK;StBE;QuBK;SvBO;QwBC;SxBO;QyBC;SzBG;Q0BC;S1BI;Q2BC;S3BE;Q4BC;S5BE;Q6BE;S7BE;Q8BC;S9BE;Q+BC;S/BE;QgCC;ShCE;QiCC;SjCE;QkCC;SlCE;QmCC;SnCE;QoCC;SpCE;KXC;Cda;A8DE;C9DE;O+DU;oBCiB;KD8B;oBCK;SDW;C/DK;OiEK;WCU;KD8B;CjEC;AmEC;CnEQ;OoEK;ICI;KDO;IEC;KFa;IGK;KHE;IIM;KJE;IKC;KLG;IMI;KNU;IOS;KPQ;gCQQ,gCR;QSC;STE;CpEG;O8EiB;SZW,4DY;ICW;KDG;IEC;KFI;IGC;KHK;III;QCC;SDM;QEC;SFgB;QGC;SHE;QIC;SJE;QKC;SL+B;QME;SNE;QOC;SPY;QQC;SRE;QSE,oBT;QUC;SVE;QWC;SXE;QYC;SZE;QaC;SbE;QcC;SdE;QeC;SfE;QgBC;ShBE;KJC;QqBM;SrBS;QsBE;StBE;IuBI;KvBI;IwBC;KxBG;IyBS;4CCC,gBD;QE2B;SFqB;KzBE;I4BY;K5BM;I6BC;K7BkC;I8Bc;K9B6B;I+BC;K/BI;C9Ec;O8GE;C9GI;A+GC;4DCY,uBD;C/GkB;AiHC;CjHU;OkHC;IhGK;KgGI;ClHE;AmHC;ICE;KDE;gCEM,gCF;CnHI;AsHC;CtHM;OuHE;CvHK"}},"type":"js/module"}]}