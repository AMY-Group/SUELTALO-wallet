{"dependencies":[{"name":"@solana/buffer-layout","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"QwywkJpcZkKLkjXs9E7VxOaHAHQ=","exportNames":["*"]}},{"name":"@solana/buffer-layout-utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":52},"end":{"line":2,"column":62,"index":114}}],"key":"uY07c2hRI0N+OVJYRD373wbUopw=","exportNames":["*"]}},{"name":"../constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":115},"end":{"line":3,"column":51,"index":166}}],"key":"w33QN4nlqAZn5CNK6M5HKbLWgBA=","exportNames":["*"]}},{"name":"../errors.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":167},"end":{"line":4,"column":118,"index":285}}],"key":"hqwpWRawU/ruYp+nBkn/8IqEHoU=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.MultisigLayout = exports.MULTISIG_SIZE = void 0;\n  exports.getMinimumBalanceForRentExemptMultisig = getMinimumBalanceForRentExemptMultisig;\n  exports.getMultisig = getMultisig;\n  exports.unpackMultisig = unpackMultisig;\n  var _bufferLayout = require(_dependencyMap[0], \"@solana/buffer-layout\");\n  var _bufferLayoutUtils = require(_dependencyMap[1], \"@solana/buffer-layout-utils\");\n  var _constants = require(_dependencyMap[2], \"../constants.js\");\n  var _errors = require(_dependencyMap[3], \"../errors.js\");\n  /** Buffer layout for de/serializing a multisig */\n  const MultisigLayout = exports.MultisigLayout = (0, _bufferLayout.struct)([(0, _bufferLayout.u8)('m'), (0, _bufferLayout.u8)('n'), (0, _bufferLayoutUtils.bool)('isInitialized'), (0, _bufferLayoutUtils.publicKey)('signer1'), (0, _bufferLayoutUtils.publicKey)('signer2'), (0, _bufferLayoutUtils.publicKey)('signer3'), (0, _bufferLayoutUtils.publicKey)('signer4'), (0, _bufferLayoutUtils.publicKey)('signer5'), (0, _bufferLayoutUtils.publicKey)('signer6'), (0, _bufferLayoutUtils.publicKey)('signer7'), (0, _bufferLayoutUtils.publicKey)('signer8'), (0, _bufferLayoutUtils.publicKey)('signer9'), (0, _bufferLayoutUtils.publicKey)('signer10'), (0, _bufferLayoutUtils.publicKey)('signer11')]);\n  /** Byte length of a multisig */\n  const MULTISIG_SIZE = exports.MULTISIG_SIZE = MultisigLayout.span;\n  /**\n   * Retrieve information about a multisig\n   *\n   * @param connection Connection to use\n   * @param address    Multisig account\n   * @param commitment Desired level of commitment for querying the state\n   * @param programId  SPL Token program account\n   *\n   * @return Multisig information\n   */\n  async function getMultisig(connection, address, commitment, programId = _constants.TOKEN_PROGRAM_ID) {\n    const info = await connection.getAccountInfo(address, commitment);\n    return unpackMultisig(address, info, programId);\n  }\n  /**\n   * Unpack a multisig\n   *\n   * @param address   Multisig account\n   * @param info      Multisig account data\n   * @param programId SPL Token program account\n   *\n   * @return Unpacked multisig\n   */\n  function unpackMultisig(address, info, programId = _constants.TOKEN_PROGRAM_ID) {\n    if (!info) throw new _errors.TokenAccountNotFoundError();\n    if (!info.owner.equals(programId)) throw new _errors.TokenInvalidAccountOwnerError();\n    if (info.data.length != MULTISIG_SIZE) throw new _errors.TokenInvalidAccountSizeError();\n    const multisig = MultisigLayout.decode(info.data);\n    return Object.assign({\n      address\n    }, multisig);\n  }\n  /** Get the minimum lamport balance for a multisig to be rent exempt\n   *\n   * @param connection Connection to use\n   * @param commitment Desired level of commitment for querying the state\n   *\n   * @return Amount of lamports required\n   */\n  async function getMinimumBalanceForRentExemptMultisig(connection, commitment) {\n    return await connection.getMinimumBalanceForRentExemption(MULTISIG_SIZE, commitment);\n  }\n});","lineCount":59,"map":[[9,2,1,0],[9,6,1,0,"_bufferLayout"],[9,19,1,0],[9,22,1,0,"require"],[9,29,1,0],[9,30,1,0,"_dependencyMap"],[9,44,1,0],[10,2,2,0],[10,6,2,0,"_bufferLayoutUtils"],[10,24,2,0],[10,27,2,0,"require"],[10,34,2,0],[10,35,2,0,"_dependencyMap"],[10,49,2,0],[11,2,3,0],[11,6,3,0,"_constants"],[11,16,3,0],[11,19,3,0,"require"],[11,26,3,0],[11,27,3,0,"_dependencyMap"],[11,41,3,0],[12,2,4,0],[12,6,4,0,"_errors"],[12,13,4,0],[12,16,4,0,"require"],[12,23,4,0],[12,24,4,0,"_dependencyMap"],[12,38,4,0],[13,2,5,0],[14,2,6,7],[14,8,6,13,"MultisigLayout"],[14,22,6,27],[14,25,6,27,"exports"],[14,32,6,27],[14,33,6,27,"MultisigLayout"],[14,47,6,27],[14,50,6,30],[14,54,6,30,"struct"],[14,74,6,36],[14,76,6,37],[14,77,7,4],[14,81,7,4,"u8"],[14,97,7,6],[14,99,7,7],[14,102,7,10],[14,103,7,11],[14,105,8,4],[14,109,8,4,"u8"],[14,125,8,6],[14,127,8,7],[14,130,8,10],[14,131,8,11],[14,133,9,4],[14,137,9,4,"bool"],[14,160,9,8],[14,162,9,9],[14,177,9,24],[14,178,9,25],[14,180,10,4],[14,184,10,4,"publicKey"],[14,212,10,13],[14,214,10,14],[14,223,10,23],[14,224,10,24],[14,226,11,4],[14,230,11,4,"publicKey"],[14,258,11,13],[14,260,11,14],[14,269,11,23],[14,270,11,24],[14,272,12,4],[14,276,12,4,"publicKey"],[14,304,12,13],[14,306,12,14],[14,315,12,23],[14,316,12,24],[14,318,13,4],[14,322,13,4,"publicKey"],[14,350,13,13],[14,352,13,14],[14,361,13,23],[14,362,13,24],[14,364,14,4],[14,368,14,4,"publicKey"],[14,396,14,13],[14,398,14,14],[14,407,14,23],[14,408,14,24],[14,410,15,4],[14,414,15,4,"publicKey"],[14,442,15,13],[14,444,15,14],[14,453,15,23],[14,454,15,24],[14,456,16,4],[14,460,16,4,"publicKey"],[14,488,16,13],[14,490,16,14],[14,499,16,23],[14,500,16,24],[14,502,17,4],[14,506,17,4,"publicKey"],[14,534,17,13],[14,536,17,14],[14,545,17,23],[14,546,17,24],[14,548,18,4],[14,552,18,4,"publicKey"],[14,580,18,13],[14,582,18,14],[14,591,18,23],[14,592,18,24],[14,594,19,4],[14,598,19,4,"publicKey"],[14,626,19,13],[14,628,19,14],[14,638,19,24],[14,639,19,25],[14,641,20,4],[14,645,20,4,"publicKey"],[14,673,20,13],[14,675,20,14],[14,685,20,24],[14,686,20,25],[14,687,21,1],[14,688,21,2],[15,2,22,0],[16,2,23,7],[16,8,23,13,"MULTISIG_SIZE"],[16,21,23,26],[16,24,23,26,"exports"],[16,31,23,26],[16,32,23,26,"MULTISIG_SIZE"],[16,45,23,26],[16,48,23,29,"MultisigLayout"],[16,62,23,43],[16,63,23,44,"span"],[16,67,23,48],[17,2,24,0],[18,0,25,0],[19,0,26,0],[20,0,27,0],[21,0,28,0],[22,0,29,0],[23,0,30,0],[24,0,31,0],[25,0,32,0],[26,0,33,0],[27,2,34,7],[27,17,34,22,"getMultisig"],[27,28,34,33,"getMultisig"],[27,29,34,34,"connection"],[27,39,34,44],[27,41,34,46,"address"],[27,48,34,53],[27,50,34,55,"commitment"],[27,60,34,65],[27,62,34,67,"programId"],[27,71,34,76],[27,74,34,79,"TOKEN_PROGRAM_ID"],[27,101,34,95],[27,103,34,97],[28,4,35,4],[28,10,35,10,"info"],[28,14,35,14],[28,17,35,17],[28,23,35,23,"connection"],[28,33,35,33],[28,34,35,34,"getAccountInfo"],[28,48,35,48],[28,49,35,49,"address"],[28,56,35,56],[28,58,35,58,"commitment"],[28,68,35,68],[28,69,35,69],[29,4,36,4],[29,11,36,11,"unpackMultisig"],[29,25,36,25],[29,26,36,26,"address"],[29,33,36,33],[29,35,36,35,"info"],[29,39,36,39],[29,41,36,41,"programId"],[29,50,36,50],[29,51,36,51],[30,2,37,0],[31,2,38,0],[32,0,39,0],[33,0,40,0],[34,0,41,0],[35,0,42,0],[36,0,43,0],[37,0,44,0],[38,0,45,0],[39,0,46,0],[40,2,47,7],[40,11,47,16,"unpackMultisig"],[40,25,47,30,"unpackMultisig"],[40,26,47,31,"address"],[40,33,47,38],[40,35,47,40,"info"],[40,39,47,44],[40,41,47,46,"programId"],[40,50,47,55],[40,53,47,58,"TOKEN_PROGRAM_ID"],[40,80,47,74],[40,82,47,76],[41,4,48,4],[41,8,48,8],[41,9,48,9,"info"],[41,13,48,13],[41,15,49,8],[41,21,49,14],[41,25,49,18,"TokenAccountNotFoundError"],[41,58,49,43],[41,59,49,44],[41,60,49,45],[42,4,50,4],[42,8,50,8],[42,9,50,9,"info"],[42,13,50,13],[42,14,50,14,"owner"],[42,19,50,19],[42,20,50,20,"equals"],[42,26,50,26],[42,27,50,27,"programId"],[42,36,50,36],[42,37,50,37],[42,39,51,8],[42,45,51,14],[42,49,51,18,"TokenInvalidAccountOwnerError"],[42,86,51,47],[42,87,51,48],[42,88,51,49],[43,4,52,4],[43,8,52,8,"info"],[43,12,52,12],[43,13,52,13,"data"],[43,17,52,17],[43,18,52,18,"length"],[43,24,52,24],[43,28,52,28,"MULTISIG_SIZE"],[43,41,52,41],[43,43,53,8],[43,49,53,14],[43,53,53,18,"TokenInvalidAccountSizeError"],[43,89,53,46],[43,90,53,47],[43,91,53,48],[44,4,54,4],[44,10,54,10,"multisig"],[44,18,54,18],[44,21,54,21,"MultisigLayout"],[44,35,54,35],[44,36,54,36,"decode"],[44,42,54,42],[44,43,54,43,"info"],[44,47,54,47],[44,48,54,48,"data"],[44,52,54,52],[44,53,54,53],[45,4,55,4],[45,11,55,4,"Object"],[45,17,55,4],[45,18,55,4,"assign"],[45,24,55,4],[46,6,55,13,"address"],[47,4,55,20],[47,7,55,25,"multisig"],[47,15,55,33],[48,2,56,0],[49,2,57,0],[50,0,58,0],[51,0,59,0],[52,0,60,0],[53,0,61,0],[54,0,62,0],[55,0,63,0],[56,2,64,7],[56,17,64,22,"getMinimumBalanceForRentExemptMultisig"],[56,55,64,60,"getMinimumBalanceForRentExemptMultisig"],[56,56,64,61,"connection"],[56,66,64,71],[56,68,64,73,"commitment"],[56,78,64,83],[56,80,64,85],[57,4,65,4],[57,11,65,11],[57,17,65,17,"connection"],[57,27,65,27],[57,28,65,28,"getMinimumBalanceForRentExemption"],[57,61,65,61],[57,62,65,62,"MULTISIG_SIZE"],[57,75,65,75],[57,77,65,77,"commitment"],[57,87,65,87],[57,88,65,88],[58,2,66,0],[59,0,66,1],[59,3]],"functionMap":{"names":["<global>","getMultisig","unpackMultisig","getMinimumBalanceForRentExemptMultisig"],"mappings":"AAA;OCiC;CDG;OEU;CFS;OGQ;CHE"}},"type":"js/module"}]}