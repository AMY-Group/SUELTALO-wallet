{"dependencies":[{"name":"bindings","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":20,"index":125},"end":{"line":7,"column":39,"index":144}}],"key":"Il7xRPUFJal9hfHzl/gfgjFYJ4U=","exportNames":["*"],"isOptional":true}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  let converter;\n  {\n    try {\n      converter = require(_dependencyMap[0], \"bindings\")('bigint_buffer');\n    } catch (e) {\n      console.warn('bigint: Failed to load bindings, pure JS will be used (try npm run rebuild?)');\n    }\n  }\n  /**\n   * Convert a little-endian buffer into a BigInt.\n   * @param buf The little-endian buffer to convert\n   * @returns A BigInt with the little-endian representation of buf.\n   */\n  function toBigIntLE(buf) {\n    if (converter === undefined) {\n      const reversed = Buffer.from(buf);\n      reversed.reverse();\n      const hex = reversed.toString('hex');\n      if (hex.length === 0) {\n        return BigInt(0);\n      }\n      return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n  }\n  exports.toBigIntLE = toBigIntLE;\n  /**\n   * Convert a big-endian buffer into a BigInt\n   * @param buf The big-endian buffer to convert.\n   * @returns A BigInt with the big-endian representation of buf.\n   */\n  function toBigIntBE(buf) {\n    if (converter === undefined) {\n      const hex = buf.toString('hex');\n      if (hex.length === 0) {\n        return BigInt(0);\n      }\n      return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n  }\n  exports.toBigIntBE = toBigIntBE;\n  /**\n   * Convert a BigInt to a little-endian buffer.\n   * @param num   The BigInt to convert.\n   * @param width The number of bytes that the resulting buffer should be.\n   * @returns A little-endian buffer representation of num.\n   */\n  function toBufferLE(num, width) {\n    if (converter === undefined) {\n      const hex = num.toString(16);\n      const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n      buffer.reverse();\n      return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n  }\n  exports.toBufferLE = toBufferLE;\n  /**\n   * Convert a BigInt to a big-endian buffer.\n   * @param num   The BigInt to convert.\n   * @param width The number of bytes that the resulting buffer should be.\n   * @returns A big-endian buffer representation of num.\n   */\n  function toBufferBE(num, width) {\n    if (converter === undefined) {\n      const hex = num.toString(16);\n      return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n  }\n  exports.toBufferBE = toBufferBE;\n});","lineCount":80,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,3,47,"value"],[5,9,3,52],[5,11,3,54],[6,2,3,59],[6,3,3,60],[6,4,3,61],[7,2,4,0],[7,6,4,4,"converter"],[7,15,4,13],[8,2,5,0],[9,4,6,4],[9,8,6,8],[10,6,7,8,"converter"],[10,15,7,17],[10,18,7,20,"require"],[10,25,7,27],[10,26,7,27,"_dependencyMap"],[10,40,7,27],[10,55,7,38],[10,56,7,39],[10,57,7,40],[10,72,7,55],[10,73,7,56],[11,4,8,4],[11,5,8,5],[11,6,9,4],[11,13,9,11,"e"],[11,14,9,12],[11,16,9,14],[12,6,10,8,"console"],[12,13,10,15],[12,14,10,16,"warn"],[12,18,10,20],[12,19,10,21],[12,97,10,99],[12,98,10,100],[13,4,11,4],[14,2,12,0],[15,2,13,0],[16,0,14,0],[17,0,15,0],[18,0,16,0],[19,0,17,0],[20,2,18,0],[20,11,18,9,"toBigIntLE"],[20,21,18,19,"toBigIntLE"],[20,22,18,20,"buf"],[20,25,18,23],[20,27,18,25],[21,4,19,4],[21,8,19,8,"converter"],[21,17,19,17],[21,22,19,22,"undefined"],[21,31,19,31],[21,33,19,33],[22,6,20,8],[22,12,20,14,"reversed"],[22,20,20,22],[22,23,20,25,"Buffer"],[22,29,20,31],[22,30,20,32,"from"],[22,34,20,36],[22,35,20,37,"buf"],[22,38,20,40],[22,39,20,41],[23,6,21,8,"reversed"],[23,14,21,16],[23,15,21,17,"reverse"],[23,22,21,24],[23,23,21,25],[23,24,21,26],[24,6,22,8],[24,12,22,14,"hex"],[24,15,22,17],[24,18,22,20,"reversed"],[24,26,22,28],[24,27,22,29,"toString"],[24,35,22,37],[24,36,22,38],[24,41,22,43],[24,42,22,44],[25,6,23,8],[25,10,23,12,"hex"],[25,13,23,15],[25,14,23,16,"length"],[25,20,23,22],[25,25,23,27],[25,26,23,28],[25,28,23,30],[26,8,24,12],[26,15,24,19,"BigInt"],[26,21,24,25],[26,22,24,26],[26,23,24,27],[26,24,24,28],[27,6,25,8],[28,6,26,8],[28,13,26,15,"BigInt"],[28,19,26,21],[28,20,26,22],[28,25,26,27,"hex"],[28,28,26,30],[28,30,26,32],[28,31,26,33],[29,4,27,4],[30,4,28,4],[30,11,28,11,"converter"],[30,20,28,20],[30,21,28,21,"toBigInt"],[30,29,28,29],[30,30,28,30,"buf"],[30,33,28,33],[30,35,28,35],[30,40,28,40],[30,41,28,41],[31,2,29,0],[32,2,30,0,"exports"],[32,9,30,7],[32,10,30,8,"toBigIntLE"],[32,20,30,18],[32,23,30,21,"toBigIntLE"],[32,33,30,31],[33,2,31,0],[34,0,32,0],[35,0,33,0],[36,0,34,0],[37,0,35,0],[38,2,36,0],[38,11,36,9,"toBigIntBE"],[38,21,36,19,"toBigIntBE"],[38,22,36,20,"buf"],[38,25,36,23],[38,27,36,25],[39,4,37,4],[39,8,37,8,"converter"],[39,17,37,17],[39,22,37,22,"undefined"],[39,31,37,31],[39,33,37,33],[40,6,38,8],[40,12,38,14,"hex"],[40,15,38,17],[40,18,38,20,"buf"],[40,21,38,23],[40,22,38,24,"toString"],[40,30,38,32],[40,31,38,33],[40,36,38,38],[40,37,38,39],[41,6,39,8],[41,10,39,12,"hex"],[41,13,39,15],[41,14,39,16,"length"],[41,20,39,22],[41,25,39,27],[41,26,39,28],[41,28,39,30],[42,8,40,12],[42,15,40,19,"BigInt"],[42,21,40,25],[42,22,40,26],[42,23,40,27],[42,24,40,28],[43,6,41,8],[44,6,42,8],[44,13,42,15,"BigInt"],[44,19,42,21],[44,20,42,22],[44,25,42,27,"hex"],[44,28,42,30],[44,30,42,32],[44,31,42,33],[45,4,43,4],[46,4,44,4],[46,11,44,11,"converter"],[46,20,44,20],[46,21,44,21,"toBigInt"],[46,29,44,29],[46,30,44,30,"buf"],[46,33,44,33],[46,35,44,35],[46,39,44,39],[46,40,44,40],[47,2,45,0],[48,2,46,0,"exports"],[48,9,46,7],[48,10,46,8,"toBigIntBE"],[48,20,46,18],[48,23,46,21,"toBigIntBE"],[48,33,46,31],[49,2,47,0],[50,0,48,0],[51,0,49,0],[52,0,50,0],[53,0,51,0],[54,0,52,0],[55,2,53,0],[55,11,53,9,"toBufferLE"],[55,21,53,19,"toBufferLE"],[55,22,53,20,"num"],[55,25,53,23],[55,27,53,25,"width"],[55,32,53,30],[55,34,53,32],[56,4,54,4],[56,8,54,8,"converter"],[56,17,54,17],[56,22,54,22,"undefined"],[56,31,54,31],[56,33,54,33],[57,6,55,8],[57,12,55,14,"hex"],[57,15,55,17],[57,18,55,20,"num"],[57,21,55,23],[57,22,55,24,"toString"],[57,30,55,32],[57,31,55,33],[57,33,55,35],[57,34,55,36],[58,6,56,8],[58,12,56,14,"buffer"],[58,18,56,20],[58,21,56,23,"Buffer"],[58,27,56,29],[58,28,56,30,"from"],[58,32,56,34],[58,33,56,35,"hex"],[58,36,56,38],[58,37,56,39,"padStart"],[58,45,56,47],[58,46,56,48,"width"],[58,51,56,53],[58,54,56,56],[58,55,56,57],[58,57,56,59],[58,60,56,62],[58,61,56,63],[58,62,56,64,"slice"],[58,67,56,69],[58,68,56,70],[58,69,56,71],[58,71,56,73,"width"],[58,76,56,78],[58,79,56,81],[58,80,56,82],[58,81,56,83],[58,83,56,85],[58,88,56,90],[58,89,56,91],[59,6,57,8,"buffer"],[59,12,57,14],[59,13,57,15,"reverse"],[59,20,57,22],[59,21,57,23],[59,22,57,24],[60,6,58,8],[60,13,58,15,"buffer"],[60,19,58,21],[61,4,59,4],[62,4,60,4],[63,4,61,4],[63,11,61,11,"converter"],[63,20,61,20],[63,21,61,21,"fromBigInt"],[63,31,61,31],[63,32,61,32,"num"],[63,35,61,35],[63,37,61,37,"Buffer"],[63,43,61,43],[63,44,61,44,"allocUnsafe"],[63,55,61,55],[63,56,61,56,"width"],[63,61,61,61],[63,62,61,62],[63,64,61,64],[63,69,61,69],[63,70,61,70],[64,2,62,0],[65,2,63,0,"exports"],[65,9,63,7],[65,10,63,8,"toBufferLE"],[65,20,63,18],[65,23,63,21,"toBufferLE"],[65,33,63,31],[66,2,64,0],[67,0,65,0],[68,0,66,0],[69,0,67,0],[70,0,68,0],[71,0,69,0],[72,2,70,0],[72,11,70,9,"toBufferBE"],[72,21,70,19,"toBufferBE"],[72,22,70,20,"num"],[72,25,70,23],[72,27,70,25,"width"],[72,32,70,30],[72,34,70,32],[73,4,71,4],[73,8,71,8,"converter"],[73,17,71,17],[73,22,71,22,"undefined"],[73,31,71,31],[73,33,71,33],[74,6,72,8],[74,12,72,14,"hex"],[74,15,72,17],[74,18,72,20,"num"],[74,21,72,23],[74,22,72,24,"toString"],[74,30,72,32],[74,31,72,33],[74,33,72,35],[74,34,72,36],[75,6,73,8],[75,13,73,15,"Buffer"],[75,19,73,21],[75,20,73,22,"from"],[75,24,73,26],[75,25,73,27,"hex"],[75,28,73,30],[75,29,73,31,"padStart"],[75,37,73,39],[75,38,73,40,"width"],[75,43,73,45],[75,46,73,48],[75,47,73,49],[75,49,73,51],[75,52,73,54],[75,53,73,55],[75,54,73,56,"slice"],[75,59,73,61],[75,60,73,62],[75,61,73,63],[75,63,73,65,"width"],[75,68,73,70],[75,71,73,73],[75,72,73,74],[75,73,73,75],[75,75,73,77],[75,80,73,82],[75,81,73,83],[76,4,74,4],[77,4,75,4],[77,11,75,11,"converter"],[77,20,75,20],[77,21,75,21,"fromBigInt"],[77,31,75,31],[77,32,75,32,"num"],[77,35,75,35],[77,37,75,37,"Buffer"],[77,43,75,43],[77,44,75,44,"allocUnsafe"],[77,55,75,55],[77,56,75,56,"width"],[77,61,75,61],[77,62,75,62],[77,64,75,64],[77,68,75,68],[77,69,75,69],[78,2,76,0],[79,2,77,0,"exports"],[79,9,77,7],[79,10,77,8,"toBufferBE"],[79,20,77,18],[79,23,77,21,"toBufferBE"],[79,33,77,31],[80,0,77,32],[80,3]],"functionMap":{"names":["<global>","toBigIntLE","toBigIntBE","toBufferLE","toBufferBE"],"mappings":"AAA;ACiB;CDW;AEO;CFS;AGQ;CHS;AIQ;CJM"}},"type":"js/module"}]}