{"dependencies":[{"name":"@solana/buffer-layout","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"QwywkJpcZkKLkjXs9E7VxOaHAHQ=","exportNames":["*"]}},{"name":"@solana/buffer-layout-utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":52},"end":{"line":2,"column":56,"index":108}}],"key":"uY07c2hRI0N+OVJYRD373wbUopw=","exportNames":["*"]}},{"name":"@solana/web3.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":109},"end":{"line":3,"column":77,"index":186}}],"key":"hVqIgOgXAH1+S7mu7qk6LJzdVc8=","exportNames":["*"]}},{"name":"../constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":187},"end":{"line":4,"column":51,"index":238}}],"key":"w33QN4nlqAZn5CNK6M5HKbLWgBA=","exportNames":["*"]}},{"name":"../errors.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":239},"end":{"line":5,"column":170,"index":409}}],"key":"hqwpWRawU/ruYp+nBkn/8IqEHoU=","exportNames":["*"]}},{"name":"./types.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":410},"end":{"line":6,"column":46,"index":456}}],"key":"yJvqu7zVoaSgx/LOxsKU/6eppkQ=","exportNames":["*"]}},{"name":"../serialization.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":457},"end":{"line":7,"column":61,"index":518}}],"key":"levm6odmRGOGV1wbjXTCeUtq0fk=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createInitializeMintInstruction = createInitializeMintInstruction;\n  exports.decodeInitializeMintInstruction = decodeInitializeMintInstruction;\n  exports.decodeInitializeMintInstructionUnchecked = decodeInitializeMintInstructionUnchecked;\n  exports.initializeMintInstructionData = void 0;\n  var _bufferLayout = require(_dependencyMap[0], \"@solana/buffer-layout\");\n  var _bufferLayoutUtils = require(_dependencyMap[1], \"@solana/buffer-layout-utils\");\n  var _web = require(_dependencyMap[2], \"@solana/web3.js\");\n  var _constants = require(_dependencyMap[3], \"../constants.js\");\n  var _errors = require(_dependencyMap[4], \"../errors.js\");\n  var _types = require(_dependencyMap[5], \"./types.js\");\n  var _serialization = require(_dependencyMap[6], \"../serialization.js\");\n  /** TODO: docs */\n  const initializeMintInstructionData = exports.initializeMintInstructionData = (0, _bufferLayout.struct)([(0, _bufferLayout.u8)('instruction'), (0, _bufferLayout.u8)('decimals'), (0, _bufferLayoutUtils.publicKey)('mintAuthority'), new _serialization.COptionPublicKeyLayout('freezeAuthority')]);\n  /**\n   * Construct an InitializeMint instruction\n   *\n   * @param mint            Token mint account\n   * @param decimals        Number of decimals in token account amounts\n   * @param mintAuthority   Minting authority\n   * @param freezeAuthority Optional authority that can freeze token accounts\n   * @param programId       SPL Token program account\n   *\n   * @return Instruction to add to a transaction\n   */\n  function createInitializeMintInstruction(mint, decimals, mintAuthority, freezeAuthority, programId = _constants.TOKEN_PROGRAM_ID) {\n    const keys = [{\n      pubkey: mint,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: _web.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n    const data = Buffer.alloc(67); // worst-case size\n    initializeMintInstructionData.encode({\n      instruction: _types.TokenInstruction.InitializeMint,\n      decimals,\n      mintAuthority,\n      freezeAuthority\n    }, data);\n    return new _web.TransactionInstruction({\n      keys,\n      programId,\n      data: data.subarray(0, initializeMintInstructionData.getSpan(data))\n    });\n  }\n  /**\n   * Decode an InitializeMint instruction and validate it\n   *\n   * @param instruction Transaction instruction to decode\n   * @param programId   SPL Token program account\n   *\n   * @return Decoded, valid instruction\n   */\n  function decodeInitializeMintInstruction(instruction, programId = _constants.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId)) throw new _errors.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== initializeMintInstructionData.getSpan(instruction.data)) throw new _errors.TokenInvalidInstructionDataError();\n    const {\n      keys: {\n        mint,\n        rent\n      },\n      data\n    } = decodeInitializeMintInstructionUnchecked(instruction);\n    if (data.instruction !== _types.TokenInstruction.InitializeMint) throw new _errors.TokenInvalidInstructionTypeError();\n    if (!mint || !rent) throw new _errors.TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n      programId,\n      keys: {\n        mint,\n        rent\n      },\n      data\n    };\n  }\n  /**\n   * Decode an InitializeMint instruction without validating it\n   *\n   * @param instruction Transaction instruction to decode\n   *\n   * @return Decoded, non-validated instruction\n   */\n  function decodeInitializeMintInstructionUnchecked({\n    programId,\n    keys: [mint, rent],\n    data\n  }) {\n    const {\n      instruction,\n      decimals,\n      mintAuthority,\n      freezeAuthority\n    } = initializeMintInstructionData.decode(data);\n    return {\n      programId,\n      keys: {\n        mint,\n        rent\n      },\n      data: {\n        instruction,\n        decimals,\n        mintAuthority,\n        freezeAuthority\n      }\n    };\n  }\n});","lineCount":114,"map":[[9,2,1,0],[9,6,1,0,"_bufferLayout"],[9,19,1,0],[9,22,1,0,"require"],[9,29,1,0],[9,30,1,0,"_dependencyMap"],[9,44,1,0],[10,2,2,0],[10,6,2,0,"_bufferLayoutUtils"],[10,24,2,0],[10,27,2,0,"require"],[10,34,2,0],[10,35,2,0,"_dependencyMap"],[10,49,2,0],[11,2,3,0],[11,6,3,0,"_web"],[11,10,3,0],[11,13,3,0,"require"],[11,20,3,0],[11,21,3,0,"_dependencyMap"],[11,35,3,0],[12,2,4,0],[12,6,4,0,"_constants"],[12,16,4,0],[12,19,4,0,"require"],[12,26,4,0],[12,27,4,0,"_dependencyMap"],[12,41,4,0],[13,2,5,0],[13,6,5,0,"_errors"],[13,13,5,0],[13,16,5,0,"require"],[13,23,5,0],[13,24,5,0,"_dependencyMap"],[13,38,5,0],[14,2,6,0],[14,6,6,0,"_types"],[14,12,6,0],[14,15,6,0,"require"],[14,22,6,0],[14,23,6,0,"_dependencyMap"],[14,37,6,0],[15,2,7,0],[15,6,7,0,"_serialization"],[15,20,7,0],[15,23,7,0,"require"],[15,30,7,0],[15,31,7,0,"_dependencyMap"],[15,45,7,0],[16,2,8,0],[17,2,9,7],[17,8,9,13,"initializeMintInstructionData"],[17,37,9,42],[17,40,9,42,"exports"],[17,47,9,42],[17,48,9,42,"initializeMintInstructionData"],[17,77,9,42],[17,80,9,45],[17,84,9,45,"struct"],[17,104,9,51],[17,106,9,52],[17,107,10,4],[17,111,10,4,"u8"],[17,127,10,6],[17,129,10,7],[17,142,10,20],[17,143,10,21],[17,145,11,4],[17,149,11,4,"u8"],[17,165,11,6],[17,167,11,7],[17,177,11,17],[17,178,11,18],[17,180,12,4],[17,184,12,4,"publicKey"],[17,212,12,13],[17,214,12,14],[17,229,12,29],[17,230,12,30],[17,232,13,4],[17,236,13,8,"COptionPublicKeyLayout"],[17,273,13,30],[17,274,13,31],[17,291,13,48],[17,292,13,49],[17,293,14,1],[17,294,14,2],[18,2,15,0],[19,0,16,0],[20,0,17,0],[21,0,18,0],[22,0,19,0],[23,0,20,0],[24,0,21,0],[25,0,22,0],[26,0,23,0],[27,0,24,0],[28,0,25,0],[29,2,26,7],[29,11,26,16,"createInitializeMintInstruction"],[29,42,26,47,"createInitializeMintInstruction"],[29,43,26,48,"mint"],[29,47,26,52],[29,49,26,54,"decimals"],[29,57,26,62],[29,59,26,64,"mintAuthority"],[29,72,26,77],[29,74,26,79,"freezeAuthority"],[29,89,26,94],[29,91,26,96,"programId"],[29,100,26,105],[29,103,26,108,"TOKEN_PROGRAM_ID"],[29,130,26,124],[29,132,26,126],[30,4,27,4],[30,10,27,10,"keys"],[30,14,27,14],[30,17,27,17],[30,18,28,8],[31,6,28,10,"pubkey"],[31,12,28,16],[31,14,28,18,"mint"],[31,18,28,22],[32,6,28,24,"isSigner"],[32,14,28,32],[32,16,28,34],[32,21,28,39],[33,6,28,41,"isWritable"],[33,16,28,51],[33,18,28,53],[34,4,28,58],[34,5,28,59],[34,7,29,8],[35,6,29,10,"pubkey"],[35,12,29,16],[35,14,29,18,"SYSVAR_RENT_PUBKEY"],[35,37,29,36],[36,6,29,38,"isSigner"],[36,14,29,46],[36,16,29,48],[36,21,29,53],[37,6,29,55,"isWritable"],[37,16,29,65],[37,18,29,67],[38,4,29,73],[38,5,29,74],[38,6,30,5],[39,4,31,4],[39,10,31,10,"data"],[39,14,31,14],[39,17,31,17,"Buffer"],[39,23,31,23],[39,24,31,24,"alloc"],[39,29,31,29],[39,30,31,30],[39,32,31,32],[39,33,31,33],[39,34,31,34],[39,35,31,35],[40,4,32,4,"initializeMintInstructionData"],[40,33,32,33],[40,34,32,34,"encode"],[40,40,32,40],[40,41,32,41],[41,6,33,8,"instruction"],[41,17,33,19],[41,19,33,21,"TokenInstruction"],[41,42,33,37],[41,43,33,38,"InitializeMint"],[41,57,33,52],[42,6,34,8,"decimals"],[42,14,34,16],[43,6,35,8,"mintAuthority"],[43,19,35,21],[44,6,36,8,"freezeAuthority"],[45,4,37,4],[45,5,37,5],[45,7,37,7,"data"],[45,11,37,11],[45,12,37,12],[46,4,38,4],[46,11,38,11],[46,15,38,15,"TransactionInstruction"],[46,42,38,37],[46,43,38,38],[47,6,39,8,"keys"],[47,10,39,12],[48,6,40,8,"programId"],[48,15,40,17],[49,6,41,8,"data"],[49,10,41,12],[49,12,41,14,"data"],[49,16,41,18],[49,17,41,19,"subarray"],[49,25,41,27],[49,26,41,28],[49,27,41,29],[49,29,41,31,"initializeMintInstructionData"],[49,58,41,60],[49,59,41,61,"getSpan"],[49,66,41,68],[49,67,41,69,"data"],[49,71,41,73],[49,72,41,74],[50,4,42,4],[50,5,42,5],[50,6,42,6],[51,2,43,0],[52,2,44,0],[53,0,45,0],[54,0,46,0],[55,0,47,0],[56,0,48,0],[57,0,49,0],[58,0,50,0],[59,0,51,0],[60,2,52,7],[60,11,52,16,"decodeInitializeMintInstruction"],[60,42,52,47,"decodeInitializeMintInstruction"],[60,43,52,48,"instruction"],[60,54,52,59],[60,56,52,61,"programId"],[60,65,52,70],[60,68,52,73,"TOKEN_PROGRAM_ID"],[60,95,52,89],[60,97,52,91],[61,4,53,4],[61,8,53,8],[61,9,53,9,"instruction"],[61,20,53,20],[61,21,53,21,"programId"],[61,30,53,30],[61,31,53,31,"equals"],[61,37,53,37],[61,38,53,38,"programId"],[61,47,53,47],[61,48,53,48],[61,50,54,8],[61,56,54,14],[61,60,54,18,"TokenInvalidInstructionProgramError"],[61,103,54,53],[61,104,54,54],[61,105,54,55],[62,4,55,4],[62,8,55,8,"instruction"],[62,19,55,19],[62,20,55,20,"data"],[62,24,55,24],[62,25,55,25,"length"],[62,31,55,31],[62,36,55,36,"initializeMintInstructionData"],[62,65,55,65],[62,66,55,66,"getSpan"],[62,73,55,73],[62,74,55,74,"instruction"],[62,85,55,85],[62,86,55,86,"data"],[62,90,55,90],[62,91,55,91],[62,93,56,8],[62,99,56,14],[62,103,56,18,"TokenInvalidInstructionDataError"],[62,143,56,50],[62,144,56,51],[62,145,56,52],[63,4,57,4],[63,10,57,10],[64,6,57,12,"keys"],[64,10,57,16],[64,12,57,18],[65,8,57,20,"mint"],[65,12,57,24],[66,8,57,26,"rent"],[67,6,57,31],[67,7,57,32],[68,6,57,34,"data"],[69,4,57,40],[69,5,57,41],[69,8,57,44,"decodeInitializeMintInstructionUnchecked"],[69,48,57,84],[69,49,57,85,"instruction"],[69,60,57,96],[69,61,57,97],[70,4,58,4],[70,8,58,8,"data"],[70,12,58,12],[70,13,58,13,"instruction"],[70,24,58,24],[70,29,58,29,"TokenInstruction"],[70,52,58,45],[70,53,58,46,"InitializeMint"],[70,67,58,60],[70,69,59,8],[70,75,59,14],[70,79,59,18,"TokenInvalidInstructionTypeError"],[70,119,59,50],[70,120,59,51],[70,121,59,52],[71,4,60,4],[71,8,60,8],[71,9,60,9,"mint"],[71,13,60,13],[71,17,60,17],[71,18,60,18,"rent"],[71,22,60,22],[71,24,61,8],[71,30,61,14],[71,34,61,18,"TokenInvalidInstructionKeysError"],[71,74,61,50],[71,75,61,51],[71,76,61,52],[72,4,62,4],[73,4,63,4],[73,11,63,11],[74,6,64,8,"programId"],[74,15,64,17],[75,6,65,8,"keys"],[75,10,65,12],[75,12,65,14],[76,8,66,12,"mint"],[76,12,66,16],[77,8,67,12,"rent"],[78,6,68,8],[78,7,68,9],[79,6,69,8,"data"],[80,4,70,4],[80,5,70,5],[81,2,71,0],[82,2,72,0],[83,0,73,0],[84,0,74,0],[85,0,75,0],[86,0,76,0],[87,0,77,0],[88,0,78,0],[89,2,79,7],[89,11,79,16,"decodeInitializeMintInstructionUnchecked"],[89,51,79,56,"decodeInitializeMintInstructionUnchecked"],[89,52,79,57],[90,4,79,59,"programId"],[90,13,79,68],[91,4,79,70,"keys"],[91,8,79,74],[91,10,79,76],[91,11,79,77,"mint"],[91,15,79,81],[91,17,79,83,"rent"],[91,21,79,87],[91,22,79,88],[92,4,79,90,"data"],[93,2,79,96],[93,3,79,97],[93,5,79,99],[94,4,80,4],[94,10,80,10],[95,6,80,12,"instruction"],[95,17,80,23],[96,6,80,25,"decimals"],[96,14,80,33],[97,6,80,35,"mintAuthority"],[97,19,80,48],[98,6,80,50,"freezeAuthority"],[99,4,80,66],[99,5,80,67],[99,8,80,70,"initializeMintInstructionData"],[99,37,80,99],[99,38,80,100,"decode"],[99,44,80,106],[99,45,80,107,"data"],[99,49,80,111],[99,50,80,112],[100,4,81,4],[100,11,81,11],[101,6,82,8,"programId"],[101,15,82,17],[102,6,83,8,"keys"],[102,10,83,12],[102,12,83,14],[103,8,84,12,"mint"],[103,12,84,16],[104,8,85,12,"rent"],[105,6,86,8],[105,7,86,9],[106,6,87,8,"data"],[106,10,87,12],[106,12,87,14],[107,8,88,12,"instruction"],[107,19,88,23],[108,8,89,12,"decimals"],[108,16,89,20],[109,8,90,12,"mintAuthority"],[109,21,90,25],[110,8,91,12,"freezeAuthority"],[111,6,92,8],[112,4,93,4],[112,5,93,5],[113,2,94,0],[114,0,94,1],[114,3]],"functionMap":{"names":["<global>","createInitializeMintInstruction","decodeInitializeMintInstruction","decodeInitializeMintInstructionUnchecked"],"mappings":"AAA;OCyB;CDiB;OES;CFmB;OGQ;CHe"}},"type":"js/module"}]}