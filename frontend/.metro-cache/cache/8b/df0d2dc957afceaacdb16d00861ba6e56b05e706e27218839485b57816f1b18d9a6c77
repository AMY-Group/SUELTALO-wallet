{"dependencies":[{"name":"events","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":21,"index":137},"end":{"line":5,"column":38,"index":154}}],"key":"JsYPPZbiyTKGtgYi4nFi37XasmQ=","exportNames":["*"]}},{"name":"http","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":13,"index":169},"end":{"line":6,"column":28,"index":184}}],"key":"yxqbxLTX0paWNp+looPTDqSlUdI=","exportNames":["*"]}},{"name":"stream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":19,"index":205},"end":{"line":7,"column":36,"index":222}}],"key":"ywjhWBPQUrHXIfwGsbgNg7Szt/A=","exportNames":["*"]}},{"name":"crypto","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":23,"index":247},"end":{"line":8,"column":40,"index":264}}],"key":"qkQHogusroKbdlr5of4h1Mv5pUg=","exportNames":["*"]}},{"name":"./extension","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":18,"index":285},"end":{"line":10,"column":40,"index":307}}],"key":"j9VWPq7/dbuGxKTZLdSJJsd9Szs=","exportNames":["*"]}},{"name":"./permessage-deflate","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":26,"index":335},"end":{"line":11,"column":57,"index":366}}],"key":"Q2Pva8QskhgfG9XaS7nBCDBdIDE=","exportNames":["*"]}},{"name":"./subprotocol","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":20,"index":388},"end":{"line":12,"column":44,"index":412}}],"key":"KMLfux5H1PsSLbU84XlKzaDVUSA=","exportNames":["*"]}},{"name":"./websocket","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":18,"index":432},"end":{"line":13,"column":40,"index":454}}],"key":"Z9tk37I35leCkp6BqPC1DlwoIEg=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":14,"column":29,"index":485},"end":{"line":14,"column":51,"index":507}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex$\", \"caughtErrors\": \"none\" }] */\n\n  'use strict';\n\n  const EventEmitter = require(_dependencyMap[0], \"events\");\n  const http = require(_dependencyMap[1], \"http\");\n  const {\n    Duplex\n  } = require(_dependencyMap[2], \"stream\");\n  const {\n    createHash\n  } = require(_dependencyMap[3], \"crypto\");\n  const extension = require(_dependencyMap[4], \"./extension\");\n  const PerMessageDeflate = require(_dependencyMap[5], \"./permessage-deflate\");\n  const subprotocol = require(_dependencyMap[6], \"./subprotocol\");\n  const WebSocket = require(_dependencyMap[7], \"./websocket\");\n  const {\n    GUID,\n    kWebSocket\n  } = require(_dependencyMap[8], \"./constants\");\n  const keyRegex = /^[+/0-9A-Za-z]{22}==$/;\n  const RUNNING = 0;\n  const CLOSING = 1;\n  const CLOSED = 2;\n\n  /**\n   * Class representing a WebSocket server.\n   *\n   * @extends EventEmitter\n   */\n  class WebSocketServer extends EventEmitter {\n    /**\n     * Create a `WebSocketServer` instance.\n     *\n     * @param {Object} options Configuration options\n     * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether\n     *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n     *     multiple times in the same tick\n     * @param {Boolean} [options.autoPong=true] Specifies whether or not to\n     *     automatically send a pong in response to a ping\n     * @param {Number} [options.backlog=511] The maximum length of the queue of\n     *     pending connections\n     * @param {Boolean} [options.clientTracking=true] Specifies whether or not to\n     *     track clients\n     * @param {Function} [options.handleProtocols] A hook to handle protocols\n     * @param {String} [options.host] The hostname where to bind the server\n     * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n     *     size\n     * @param {Boolean} [options.noServer=false] Enable no server mode\n     * @param {String} [options.path] Accept only connections matching this path\n     * @param {(Boolean|Object)} [options.perMessageDeflate=false] Enable/disable\n     *     permessage-deflate\n     * @param {Number} [options.port] The port where to bind the server\n     * @param {(http.Server|https.Server)} [options.server] A pre-created HTTP/S\n     *     server to use\n     * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n     *     not to skip UTF-8 validation for text and close messages\n     * @param {Function} [options.verifyClient] A hook to reject connections\n     * @param {Function} [options.WebSocket=WebSocket] Specifies the `WebSocket`\n     *     class to use. It must be the `WebSocket` class or class that extends it\n     * @param {Function} [callback] A listener for the `listening` event\n     */\n    constructor(options, callback) {\n      super();\n      options = {\n        allowSynchronousEvents: true,\n        autoPong: true,\n        maxPayload: 100 * 1024 * 1024,\n        skipUTF8Validation: false,\n        perMessageDeflate: false,\n        handleProtocols: null,\n        clientTracking: true,\n        verifyClient: null,\n        noServer: false,\n        backlog: null,\n        // use default (511 as implemented in net.js)\n        server: null,\n        host: null,\n        path: null,\n        port: null,\n        WebSocket,\n        ...options\n      };\n      if (options.port == null && !options.server && !options.noServer || options.port != null && (options.server || options.noServer) || options.server && options.noServer) {\n        throw new TypeError('One and only one of the \"port\", \"server\", or \"noServer\" options ' + 'must be specified');\n      }\n      if (options.port != null) {\n        this._server = http.createServer((req, res) => {\n          const body = http.STATUS_CODES[426];\n          res.writeHead(426, {\n            'Content-Length': body.length,\n            'Content-Type': 'text/plain'\n          });\n          res.end(body);\n        });\n        this._server.listen(options.port, options.host, options.backlog, callback);\n      } else if (options.server) {\n        this._server = options.server;\n      }\n      if (this._server) {\n        const emitConnection = this.emit.bind(this, 'connection');\n        this._removeListeners = addListeners(this._server, {\n          listening: this.emit.bind(this, 'listening'),\n          error: this.emit.bind(this, 'error'),\n          upgrade: (req, socket, head) => {\n            this.handleUpgrade(req, socket, head, emitConnection);\n          }\n        });\n      }\n      if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n      if (options.clientTracking) {\n        this.clients = new Set();\n        this._shouldEmitClose = false;\n      }\n      this.options = options;\n      this._state = RUNNING;\n    }\n\n    /**\n     * Returns the bound address, the address family name, and port of the server\n     * as reported by the operating system if listening on an IP socket.\n     * If the server is listening on a pipe or UNIX domain socket, the name is\n     * returned as a string.\n     *\n     * @return {(Object|String|null)} The address of the server\n     * @public\n     */\n    address() {\n      if (this.options.noServer) {\n        throw new Error('The server is operating in \"noServer\" mode');\n      }\n      if (!this._server) return null;\n      return this._server.address();\n    }\n\n    /**\n     * Stop the server from accepting new connections and emit the `'close'` event\n     * when all existing connections are closed.\n     *\n     * @param {Function} [cb] A one-time listener for the `'close'` event\n     * @public\n     */\n    close(cb) {\n      if (this._state === CLOSED) {\n        if (cb) {\n          this.once('close', () => {\n            cb(new Error('The server is not running'));\n          });\n        }\n        process.nextTick(emitClose, this);\n        return;\n      }\n      if (cb) this.once('close', cb);\n      if (this._state === CLOSING) return;\n      this._state = CLOSING;\n      if (this.options.noServer || this.options.server) {\n        if (this._server) {\n          this._removeListeners();\n          this._removeListeners = this._server = null;\n        }\n        if (this.clients) {\n          if (!this.clients.size) {\n            process.nextTick(emitClose, this);\n          } else {\n            this._shouldEmitClose = true;\n          }\n        } else {\n          process.nextTick(emitClose, this);\n        }\n      } else {\n        const server = this._server;\n        this._removeListeners();\n        this._removeListeners = this._server = null;\n\n        //\n        // The HTTP/S server was created internally. Close it, and rely on its\n        // `'close'` event.\n        //\n        server.close(() => {\n          emitClose(this);\n        });\n      }\n    }\n\n    /**\n     * See if a given request should be handled by this server instance.\n     *\n     * @param {http.IncomingMessage} req Request object to inspect\n     * @return {Boolean} `true` if the request is valid, else `false`\n     * @public\n     */\n    shouldHandle(req) {\n      if (this.options.path) {\n        const index = req.url.indexOf('?');\n        const pathname = index !== -1 ? req.url.slice(0, index) : req.url;\n        if (pathname !== this.options.path) return false;\n      }\n      return true;\n    }\n\n    /**\n     * Handle a HTTP Upgrade request.\n     *\n     * @param {http.IncomingMessage} req The request object\n     * @param {Duplex} socket The network socket between the server and client\n     * @param {Buffer} head The first packet of the upgraded stream\n     * @param {Function} cb Callback\n     * @public\n     */\n    handleUpgrade(req, socket, head, cb) {\n      socket.on('error', socketOnError);\n      const key = req.headers['sec-websocket-key'];\n      const upgrade = req.headers.upgrade;\n      const version = +req.headers['sec-websocket-version'];\n      if (req.method !== 'GET') {\n        const message = 'Invalid HTTP method';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 405, message);\n        return;\n      }\n      if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {\n        const message = 'Invalid Upgrade header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n      if (key === undefined || !keyRegex.test(key)) {\n        const message = 'Missing or invalid Sec-WebSocket-Key header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n        return;\n      }\n      if (version !== 13 && version !== 8) {\n        const message = 'Missing or invalid Sec-WebSocket-Version header';\n        abortHandshakeOrEmitwsClientError(this, req, socket, 400, message, {\n          'Sec-WebSocket-Version': '13, 8'\n        });\n        return;\n      }\n      if (!this.shouldHandle(req)) {\n        abortHandshake(socket, 400);\n        return;\n      }\n      const secWebSocketProtocol = req.headers['sec-websocket-protocol'];\n      let protocols = new Set();\n      if (secWebSocketProtocol !== undefined) {\n        try {\n          protocols = subprotocol.parse(secWebSocketProtocol);\n        } catch (err) {\n          const message = 'Invalid Sec-WebSocket-Protocol header';\n          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n          return;\n        }\n      }\n      const secWebSocketExtensions = req.headers['sec-websocket-extensions'];\n      const extensions = {};\n      if (this.options.perMessageDeflate && secWebSocketExtensions !== undefined) {\n        const perMessageDeflate = new PerMessageDeflate(this.options.perMessageDeflate, true, this.options.maxPayload);\n        try {\n          const offers = extension.parse(secWebSocketExtensions);\n          if (offers[PerMessageDeflate.extensionName]) {\n            perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n            extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n          }\n        } catch (err) {\n          const message = 'Invalid or unacceptable Sec-WebSocket-Extensions header';\n          abortHandshakeOrEmitwsClientError(this, req, socket, 400, message);\n          return;\n        }\n      }\n\n      //\n      // Optionally call external client verification handler.\n      //\n      if (this.options.verifyClient) {\n        const info = {\n          origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n          secure: !!(req.socket.authorized || req.socket.encrypted),\n          req\n        };\n        if (this.options.verifyClient.length === 2) {\n          this.options.verifyClient(info, (verified, code, message, headers) => {\n            if (!verified) {\n              return abortHandshake(socket, code || 401, message, headers);\n            }\n            this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n          });\n          return;\n        }\n        if (!this.options.verifyClient(info)) return abortHandshake(socket, 401);\n      }\n      this.completeUpgrade(extensions, key, protocols, req, socket, head, cb);\n    }\n\n    /**\n     * Upgrade the connection to WebSocket.\n     *\n     * @param {Object} extensions The accepted extensions\n     * @param {String} key The value of the `Sec-WebSocket-Key` header\n     * @param {Set} protocols The subprotocols\n     * @param {http.IncomingMessage} req The request object\n     * @param {Duplex} socket The network socket between the server and client\n     * @param {Buffer} head The first packet of the upgraded stream\n     * @param {Function} cb Callback\n     * @throws {Error} If called more than once with the same socket\n     * @private\n     */\n    completeUpgrade(extensions, key, protocols, req, socket, head, cb) {\n      //\n      // Destroy the socket if the client has already sent a FIN packet.\n      //\n      if (!socket.readable || !socket.writable) return socket.destroy();\n      if (socket[kWebSocket]) {\n        throw new Error('server.handleUpgrade() was called more than once with the same ' + 'socket, possibly due to a misconfiguration');\n      }\n      if (this._state > RUNNING) return abortHandshake(socket, 503);\n      const digest = createHash('sha1').update(key + GUID).digest('base64');\n      const headers = ['HTTP/1.1 101 Switching Protocols', 'Upgrade: websocket', 'Connection: Upgrade', `Sec-WebSocket-Accept: ${digest}`];\n      const ws = new this.options.WebSocket(null, undefined, this.options);\n      if (protocols.size) {\n        //\n        // Optionally call external protocol selection handler.\n        //\n        const protocol = this.options.handleProtocols ? this.options.handleProtocols(protocols, req) : protocols.values().next().value;\n        if (protocol) {\n          headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n          ws._protocol = protocol;\n        }\n      }\n      if (extensions[PerMessageDeflate.extensionName]) {\n        const params = extensions[PerMessageDeflate.extensionName].params;\n        const value = extension.format({\n          [PerMessageDeflate.extensionName]: [params]\n        });\n        headers.push(`Sec-WebSocket-Extensions: ${value}`);\n        ws._extensions = extensions;\n      }\n\n      //\n      // Allow external modification/inspection of handshake headers.\n      //\n      this.emit('headers', headers, req);\n      socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n      socket.removeListener('error', socketOnError);\n      ws.setSocket(socket, head, {\n        allowSynchronousEvents: this.options.allowSynchronousEvents,\n        maxPayload: this.options.maxPayload,\n        skipUTF8Validation: this.options.skipUTF8Validation\n      });\n      if (this.clients) {\n        this.clients.add(ws);\n        ws.on('close', () => {\n          this.clients.delete(ws);\n          if (this._shouldEmitClose && !this.clients.size) {\n            process.nextTick(emitClose, this);\n          }\n        });\n      }\n      cb(ws, req);\n    }\n  }\n  module.exports = WebSocketServer;\n\n  /**\n   * Add event listeners on an `EventEmitter` using a map of <event, listener>\n   * pairs.\n   *\n   * @param {EventEmitter} server The event emitter\n   * @param {Object.<String, Function>} map The listeners to add\n   * @return {Function} A function that will remove the added listeners when\n   *     called\n   * @private\n   */\n  function addListeners(server, map) {\n    for (const event of Object.keys(map)) server.on(event, map[event]);\n    return function removeListeners() {\n      for (const event of Object.keys(map)) {\n        server.removeListener(event, map[event]);\n      }\n    };\n  }\n\n  /**\n   * Emit a `'close'` event on an `EventEmitter`.\n   *\n   * @param {EventEmitter} server The event emitter\n   * @private\n   */\n  function emitClose(server) {\n    server._state = CLOSED;\n    server.emit('close');\n  }\n\n  /**\n   * Handle socket errors.\n   *\n   * @private\n   */\n  function socketOnError() {\n    this.destroy();\n  }\n\n  /**\n   * Close the connection when preconditions are not fulfilled.\n   *\n   * @param {Duplex} socket The socket of the upgrade request\n   * @param {Number} code The HTTP response status code\n   * @param {String} [message] The HTTP response body\n   * @param {Object} [headers] Additional HTTP response headers\n   * @private\n   */\n  function abortHandshake(socket, code, message, headers) {\n    //\n    // The socket is writable unless the user destroyed or ended it before calling\n    // `server.handleUpgrade()` or in the `verifyClient` function, which is a user\n    // error. Handling this does not make much sense as the worst that can happen\n    // is that some of the data written by the user might be discarded due to the\n    // call to `socket.end()` below, which triggers an `'error'` event that in\n    // turn causes the socket to be destroyed.\n    //\n    message = message || http.STATUS_CODES[code];\n    headers = {\n      Connection: 'close',\n      'Content-Type': 'text/html',\n      'Content-Length': Buffer.byteLength(message),\n      ...headers\n    };\n    socket.once('finish', socket.destroy);\n    socket.end(`HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` + Object.keys(headers).map(h => `${h}: ${headers[h]}`).join('\\r\\n') + '\\r\\n\\r\\n' + message);\n  }\n\n  /**\n   * Emit a `'wsClientError'` event on a `WebSocketServer` if there is at least\n   * one listener for it, otherwise call `abortHandshake()`.\n   *\n   * @param {WebSocketServer} server The WebSocket server\n   * @param {http.IncomingMessage} req The request object\n   * @param {Duplex} socket The socket of the upgrade request\n   * @param {Number} code The HTTP response status code\n   * @param {String} message The HTTP response body\n   * @param {Object} [headers] The HTTP response headers\n   * @private\n   */\n  function abortHandshakeOrEmitwsClientError(server, req, socket, code, message, headers) {\n    if (server.listenerCount('wsClientError')) {\n      const err = new Error(message);\n      Error.captureStackTrace(err, abortHandshakeOrEmitwsClientError);\n      server.emit('wsClientError', err, socket, req);\n    } else {\n      abortHandshake(socket, code, message, headers);\n    }\n  }\n});","lineCount":451,"map":[[2,2,1,0],[4,2,3,0],[4,14,3,12],[6,2,5,0],[6,8,5,6,"EventEmitter"],[6,20,5,18],[6,23,5,21,"require"],[6,30,5,28],[6,31,5,28,"_dependencyMap"],[6,45,5,28],[6,58,5,37],[6,59,5,38],[7,2,6,0],[7,8,6,6,"http"],[7,12,6,10],[7,15,6,13,"require"],[7,22,6,20],[7,23,6,20,"_dependencyMap"],[7,37,6,20],[7,48,6,27],[7,49,6,28],[8,2,7,0],[8,8,7,6],[9,4,7,8,"Duplex"],[10,2,7,15],[10,3,7,16],[10,6,7,19,"require"],[10,13,7,26],[10,14,7,26,"_dependencyMap"],[10,28,7,26],[10,41,7,35],[10,42,7,36],[11,2,8,0],[11,8,8,6],[12,4,8,8,"createHash"],[13,2,8,19],[13,3,8,20],[13,6,8,23,"require"],[13,13,8,30],[13,14,8,30,"_dependencyMap"],[13,28,8,30],[13,41,8,39],[13,42,8,40],[14,2,10,0],[14,8,10,6,"extension"],[14,17,10,15],[14,20,10,18,"require"],[14,27,10,25],[14,28,10,25,"_dependencyMap"],[14,42,10,25],[14,60,10,39],[14,61,10,40],[15,2,11,0],[15,8,11,6,"PerMessageDeflate"],[15,25,11,23],[15,28,11,26,"require"],[15,35,11,33],[15,36,11,33,"_dependencyMap"],[15,50,11,33],[15,77,11,56],[15,78,11,57],[16,2,12,0],[16,8,12,6,"subprotocol"],[16,19,12,17],[16,22,12,20,"require"],[16,29,12,27],[16,30,12,27,"_dependencyMap"],[16,44,12,27],[16,64,12,43],[16,65,12,44],[17,2,13,0],[17,8,13,6,"WebSocket"],[17,17,13,15],[17,20,13,18,"require"],[17,27,13,25],[17,28,13,25,"_dependencyMap"],[17,42,13,25],[17,60,13,39],[17,61,13,40],[18,2,14,0],[18,8,14,6],[19,4,14,8,"GUID"],[19,8,14,12],[20,4,14,14,"kWebSocket"],[21,2,14,25],[21,3,14,26],[21,6,14,29,"require"],[21,13,14,36],[21,14,14,36,"_dependencyMap"],[21,28,14,36],[21,46,14,50],[21,47,14,51],[22,2,16,0],[22,8,16,6,"keyRegex"],[22,16,16,14],[22,19,16,17],[22,42,16,40],[23,2,18,0],[23,8,18,6,"RUNNING"],[23,15,18,13],[23,18,18,16],[23,19,18,17],[24,2,19,0],[24,8,19,6,"CLOSING"],[24,15,19,13],[24,18,19,16],[24,19,19,17],[25,2,20,0],[25,8,20,6,"CLOSED"],[25,14,20,12],[25,17,20,15],[25,18,20,16],[27,2,22,0],[28,0,23,0],[29,0,24,0],[30,0,25,0],[31,0,26,0],[32,2,27,0],[32,8,27,6,"WebSocketServer"],[32,23,27,21],[32,32,27,30,"EventEmitter"],[32,44,27,42],[32,45,27,43],[33,4,28,2],[34,0,29,0],[35,0,30,0],[36,0,31,0],[37,0,32,0],[38,0,33,0],[39,0,34,0],[40,0,35,0],[41,0,36,0],[42,0,37,0],[43,0,38,0],[44,0,39,0],[45,0,40,0],[46,0,41,0],[47,0,42,0],[48,0,43,0],[49,0,44,0],[50,0,45,0],[51,0,46,0],[52,0,47,0],[53,0,48,0],[54,0,49,0],[55,0,50,0],[56,0,51,0],[57,0,52,0],[58,0,53,0],[59,0,54,0],[60,0,55,0],[61,0,56,0],[62,0,57,0],[63,0,58,0],[64,4,59,2,"constructor"],[64,15,59,13,"constructor"],[64,16,59,14,"options"],[64,23,59,21],[64,25,59,23,"callback"],[64,33,59,31],[64,35,59,33],[65,6,60,4],[65,11,60,9],[65,12,60,10],[65,13,60,11],[66,6,62,4,"options"],[66,13,62,11],[66,16,62,14],[67,8,63,6,"allowSynchronousEvents"],[67,30,63,28],[67,32,63,30],[67,36,63,34],[68,8,64,6,"autoPong"],[68,16,64,14],[68,18,64,16],[68,22,64,20],[69,8,65,6,"maxPayload"],[69,18,65,16],[69,20,65,18],[69,23,65,21],[69,26,65,24],[69,30,65,28],[69,33,65,31],[69,37,65,35],[70,8,66,6,"skipUTF8Validation"],[70,26,66,24],[70,28,66,26],[70,33,66,31],[71,8,67,6,"perMessageDeflate"],[71,25,67,23],[71,27,67,25],[71,32,67,30],[72,8,68,6,"handleProtocols"],[72,23,68,21],[72,25,68,23],[72,29,68,27],[73,8,69,6,"clientTracking"],[73,22,69,20],[73,24,69,22],[73,28,69,26],[74,8,70,6,"verifyClient"],[74,20,70,18],[74,22,70,20],[74,26,70,24],[75,8,71,6,"noServer"],[75,16,71,14],[75,18,71,16],[75,23,71,21],[76,8,72,6,"backlog"],[76,15,72,13],[76,17,72,15],[76,21,72,19],[77,8,72,21],[78,8,73,6,"server"],[78,14,73,12],[78,16,73,14],[78,20,73,18],[79,8,74,6,"host"],[79,12,74,10],[79,14,74,12],[79,18,74,16],[80,8,75,6,"path"],[80,12,75,10],[80,14,75,12],[80,18,75,16],[81,8,76,6,"port"],[81,12,76,10],[81,14,76,12],[81,18,76,16],[82,8,77,6,"WebSocket"],[82,17,77,15],[83,8,78,6],[83,11,78,9,"options"],[84,6,79,4],[84,7,79,5],[85,6,81,4],[85,10,82,7,"options"],[85,17,82,14],[85,18,82,15,"port"],[85,22,82,19],[85,26,82,23],[85,30,82,27],[85,34,82,31],[85,35,82,32,"options"],[85,42,82,39],[85,43,82,40,"server"],[85,49,82,46],[85,53,82,50],[85,54,82,51,"options"],[85,61,82,58],[85,62,82,59,"noServer"],[85,70,82,67],[85,74,83,7,"options"],[85,81,83,14],[85,82,83,15,"port"],[85,86,83,19],[85,90,83,23],[85,94,83,27],[85,99,83,32,"options"],[85,106,83,39],[85,107,83,40,"server"],[85,113,83,46],[85,117,83,50,"options"],[85,124,83,57],[85,125,83,58,"noServer"],[85,133,83,66],[85,134,83,68],[85,138,84,7,"options"],[85,145,84,14],[85,146,84,15,"server"],[85,152,84,21],[85,156,84,25,"options"],[85,163,84,32],[85,164,84,33,"noServer"],[85,172,84,42],[85,174,85,6],[86,8,86,6],[86,14,86,12],[86,18,86,16,"TypeError"],[86,27,86,25],[86,28,87,8],[86,94,87,74],[86,97,88,10],[86,116,89,6],[86,117,89,7],[87,6,90,4],[88,6,92,4],[88,10,92,8,"options"],[88,17,92,15],[88,18,92,16,"port"],[88,22,92,20],[88,26,92,24],[88,30,92,28],[88,32,92,30],[89,8,93,6],[89,12,93,10],[89,13,93,11,"_server"],[89,20,93,18],[89,23,93,21,"http"],[89,27,93,25],[89,28,93,26,"createServer"],[89,40,93,38],[89,41,93,39],[89,42,93,40,"req"],[89,45,93,43],[89,47,93,45,"res"],[89,50,93,48],[89,55,93,53],[90,10,94,8],[90,16,94,14,"body"],[90,20,94,18],[90,23,94,21,"http"],[90,27,94,25],[90,28,94,26,"STATUS_CODES"],[90,40,94,38],[90,41,94,39],[90,44,94,42],[90,45,94,43],[91,10,96,8,"res"],[91,13,96,11],[91,14,96,12,"writeHead"],[91,23,96,21],[91,24,96,22],[91,27,96,25],[91,29,96,27],[92,12,97,10],[92,28,97,26],[92,30,97,28,"body"],[92,34,97,32],[92,35,97,33,"length"],[92,41,97,39],[93,12,98,10],[93,26,98,24],[93,28,98,26],[94,10,99,8],[94,11,99,9],[94,12,99,10],[95,10,100,8,"res"],[95,13,100,11],[95,14,100,12,"end"],[95,17,100,15],[95,18,100,16,"body"],[95,22,100,20],[95,23,100,21],[96,8,101,6],[96,9,101,7],[96,10,101,8],[97,8,102,6],[97,12,102,10],[97,13,102,11,"_server"],[97,20,102,18],[97,21,102,19,"listen"],[97,27,102,25],[97,28,103,8,"options"],[97,35,103,15],[97,36,103,16,"port"],[97,40,103,20],[97,42,104,8,"options"],[97,49,104,15],[97,50,104,16,"host"],[97,54,104,20],[97,56,105,8,"options"],[97,63,105,15],[97,64,105,16,"backlog"],[97,71,105,23],[97,73,106,8,"callback"],[97,81,107,6],[97,82,107,7],[98,6,108,4],[98,7,108,5],[98,13,108,11],[98,17,108,15,"options"],[98,24,108,22],[98,25,108,23,"server"],[98,31,108,29],[98,33,108,31],[99,8,109,6],[99,12,109,10],[99,13,109,11,"_server"],[99,20,109,18],[99,23,109,21,"options"],[99,30,109,28],[99,31,109,29,"server"],[99,37,109,35],[100,6,110,4],[101,6,112,4],[101,10,112,8],[101,14,112,12],[101,15,112,13,"_server"],[101,22,112,20],[101,24,112,22],[102,8,113,6],[102,14,113,12,"emitConnection"],[102,28,113,26],[102,31,113,29],[102,35,113,33],[102,36,113,34,"emit"],[102,40,113,38],[102,41,113,39,"bind"],[102,45,113,43],[102,46,113,44],[102,50,113,48],[102,52,113,50],[102,64,113,62],[102,65,113,63],[103,8,115,6],[103,12,115,10],[103,13,115,11,"_removeListeners"],[103,29,115,27],[103,32,115,30,"addListeners"],[103,44,115,42],[103,45,115,43],[103,49,115,47],[103,50,115,48,"_server"],[103,57,115,55],[103,59,115,57],[104,10,116,8,"listening"],[104,19,116,17],[104,21,116,19],[104,25,116,23],[104,26,116,24,"emit"],[104,30,116,28],[104,31,116,29,"bind"],[104,35,116,33],[104,36,116,34],[104,40,116,38],[104,42,116,40],[104,53,116,51],[104,54,116,52],[105,10,117,8,"error"],[105,15,117,13],[105,17,117,15],[105,21,117,19],[105,22,117,20,"emit"],[105,26,117,24],[105,27,117,25,"bind"],[105,31,117,29],[105,32,117,30],[105,36,117,34],[105,38,117,36],[105,45,117,43],[105,46,117,44],[106,10,118,8,"upgrade"],[106,17,118,15],[106,19,118,17,"upgrade"],[106,20,118,18,"req"],[106,23,118,21],[106,25,118,23,"socket"],[106,31,118,29],[106,33,118,31,"head"],[106,37,118,35],[106,42,118,40],[107,12,119,10],[107,16,119,14],[107,17,119,15,"handleUpgrade"],[107,30,119,28],[107,31,119,29,"req"],[107,34,119,32],[107,36,119,34,"socket"],[107,42,119,40],[107,44,119,42,"head"],[107,48,119,46],[107,50,119,48,"emitConnection"],[107,64,119,62],[107,65,119,63],[108,10,120,8],[109,8,121,6],[109,9,121,7],[109,10,121,8],[110,6,122,4],[111,6,124,4],[111,10,124,8,"options"],[111,17,124,15],[111,18,124,16,"perMessageDeflate"],[111,35,124,33],[111,40,124,38],[111,44,124,42],[111,46,124,44,"options"],[111,53,124,51],[111,54,124,52,"perMessageDeflate"],[111,71,124,69],[111,74,124,72],[111,75,124,73],[111,76,124,74],[112,6,125,4],[112,10,125,8,"options"],[112,17,125,15],[112,18,125,16,"clientTracking"],[112,32,125,30],[112,34,125,32],[113,8,126,6],[113,12,126,10],[113,13,126,11,"clients"],[113,20,126,18],[113,23,126,21],[113,27,126,25,"Set"],[113,30,126,28],[113,31,126,29],[113,32,126,30],[114,8,127,6],[114,12,127,10],[114,13,127,11,"_shouldEmitClose"],[114,29,127,27],[114,32,127,30],[114,37,127,35],[115,6,128,4],[116,6,130,4],[116,10,130,8],[116,11,130,9,"options"],[116,18,130,16],[116,21,130,19,"options"],[116,28,130,26],[117,6,131,4],[117,10,131,8],[117,11,131,9,"_state"],[117,17,131,15],[117,20,131,18,"RUNNING"],[117,27,131,25],[118,4,132,2],[120,4,134,2],[121,0,135,0],[122,0,136,0],[123,0,137,0],[124,0,138,0],[125,0,139,0],[126,0,140,0],[127,0,141,0],[128,0,142,0],[129,4,143,2,"address"],[129,11,143,9,"address"],[129,12,143,9],[129,14,143,12],[130,6,144,4],[130,10,144,8],[130,14,144,12],[130,15,144,13,"options"],[130,22,144,20],[130,23,144,21,"noServer"],[130,31,144,29],[130,33,144,31],[131,8,145,6],[131,14,145,12],[131,18,145,16,"Error"],[131,23,145,21],[131,24,145,22],[131,68,145,66],[131,69,145,67],[132,6,146,4],[133,6,148,4],[133,10,148,8],[133,11,148,9],[133,15,148,13],[133,16,148,14,"_server"],[133,23,148,21],[133,25,148,23],[133,32,148,30],[133,36,148,34],[134,6,149,4],[134,13,149,11],[134,17,149,15],[134,18,149,16,"_server"],[134,25,149,23],[134,26,149,24,"address"],[134,33,149,31],[134,34,149,32],[134,35,149,33],[135,4,150,2],[137,4,152,2],[138,0,153,0],[139,0,154,0],[140,0,155,0],[141,0,156,0],[142,0,157,0],[143,0,158,0],[144,4,159,2,"close"],[144,9,159,7,"close"],[144,10,159,8,"cb"],[144,12,159,10],[144,14,159,12],[145,6,160,4],[145,10,160,8],[145,14,160,12],[145,15,160,13,"_state"],[145,21,160,19],[145,26,160,24,"CLOSED"],[145,32,160,30],[145,34,160,32],[146,8,161,6],[146,12,161,10,"cb"],[146,14,161,12],[146,16,161,14],[147,10,162,8],[147,14,162,12],[147,15,162,13,"once"],[147,19,162,17],[147,20,162,18],[147,27,162,25],[147,29,162,27],[147,35,162,33],[148,12,163,10,"cb"],[148,14,163,12],[148,15,163,13],[148,19,163,17,"Error"],[148,24,163,22],[148,25,163,23],[148,52,163,50],[148,53,163,51],[148,54,163,52],[149,10,164,8],[149,11,164,9],[149,12,164,10],[150,8,165,6],[151,8,167,6,"process"],[151,15,167,13],[151,16,167,14,"nextTick"],[151,24,167,22],[151,25,167,23,"emitClose"],[151,34,167,32],[151,36,167,34],[151,40,167,38],[151,41,167,39],[152,8,168,6],[153,6,169,4],[154,6,171,4],[154,10,171,8,"cb"],[154,12,171,10],[154,14,171,12],[154,18,171,16],[154,19,171,17,"once"],[154,23,171,21],[154,24,171,22],[154,31,171,29],[154,33,171,31,"cb"],[154,35,171,33],[154,36,171,34],[155,6,173,4],[155,10,173,8],[155,14,173,12],[155,15,173,13,"_state"],[155,21,173,19],[155,26,173,24,"CLOSING"],[155,33,173,31],[155,35,173,33],[156,6,174,4],[156,10,174,8],[156,11,174,9,"_state"],[156,17,174,15],[156,20,174,18,"CLOSING"],[156,27,174,25],[157,6,176,4],[157,10,176,8],[157,14,176,12],[157,15,176,13,"options"],[157,22,176,20],[157,23,176,21,"noServer"],[157,31,176,29],[157,35,176,33],[157,39,176,37],[157,40,176,38,"options"],[157,47,176,45],[157,48,176,46,"server"],[157,54,176,52],[157,56,176,54],[158,8,177,6],[158,12,177,10],[158,16,177,14],[158,17,177,15,"_server"],[158,24,177,22],[158,26,177,24],[159,10,178,8],[159,14,178,12],[159,15,178,13,"_removeListeners"],[159,31,178,29],[159,32,178,30],[159,33,178,31],[160,10,179,8],[160,14,179,12],[160,15,179,13,"_removeListeners"],[160,31,179,29],[160,34,179,32],[160,38,179,36],[160,39,179,37,"_server"],[160,46,179,44],[160,49,179,47],[160,53,179,51],[161,8,180,6],[162,8,182,6],[162,12,182,10],[162,16,182,14],[162,17,182,15,"clients"],[162,24,182,22],[162,26,182,24],[163,10,183,8],[163,14,183,12],[163,15,183,13],[163,19,183,17],[163,20,183,18,"clients"],[163,27,183,25],[163,28,183,26,"size"],[163,32,183,30],[163,34,183,32],[164,12,184,10,"process"],[164,19,184,17],[164,20,184,18,"nextTick"],[164,28,184,26],[164,29,184,27,"emitClose"],[164,38,184,36],[164,40,184,38],[164,44,184,42],[164,45,184,43],[165,10,185,8],[165,11,185,9],[165,17,185,15],[166,12,186,10],[166,16,186,14],[166,17,186,15,"_shouldEmitClose"],[166,33,186,31],[166,36,186,34],[166,40,186,38],[167,10,187,8],[168,8,188,6],[168,9,188,7],[168,15,188,13],[169,10,189,8,"process"],[169,17,189,15],[169,18,189,16,"nextTick"],[169,26,189,24],[169,27,189,25,"emitClose"],[169,36,189,34],[169,38,189,36],[169,42,189,40],[169,43,189,41],[170,8,190,6],[171,6,191,4],[171,7,191,5],[171,13,191,11],[172,8,192,6],[172,14,192,12,"server"],[172,20,192,18],[172,23,192,21],[172,27,192,25],[172,28,192,26,"_server"],[172,35,192,33],[173,8,194,6],[173,12,194,10],[173,13,194,11,"_removeListeners"],[173,29,194,27],[173,30,194,28],[173,31,194,29],[174,8,195,6],[174,12,195,10],[174,13,195,11,"_removeListeners"],[174,29,195,27],[174,32,195,30],[174,36,195,34],[174,37,195,35,"_server"],[174,44,195,42],[174,47,195,45],[174,51,195,49],[176,8,197,6],[177,8,198,6],[178,8,199,6],[179,8,200,6],[180,8,201,6,"server"],[180,14,201,12],[180,15,201,13,"close"],[180,20,201,18],[180,21,201,19],[180,27,201,25],[181,10,202,8,"emitClose"],[181,19,202,17],[181,20,202,18],[181,24,202,22],[181,25,202,23],[182,8,203,6],[182,9,203,7],[182,10,203,8],[183,6,204,4],[184,4,205,2],[186,4,207,2],[187,0,208,0],[188,0,209,0],[189,0,210,0],[190,0,211,0],[191,0,212,0],[192,0,213,0],[193,4,214,2,"shouldHandle"],[193,16,214,14,"shouldHandle"],[193,17,214,15,"req"],[193,20,214,18],[193,22,214,20],[194,6,215,4],[194,10,215,8],[194,14,215,12],[194,15,215,13,"options"],[194,22,215,20],[194,23,215,21,"path"],[194,27,215,25],[194,29,215,27],[195,8,216,6],[195,14,216,12,"index"],[195,19,216,17],[195,22,216,20,"req"],[195,25,216,23],[195,26,216,24,"url"],[195,29,216,27],[195,30,216,28,"indexOf"],[195,37,216,35],[195,38,216,36],[195,41,216,39],[195,42,216,40],[196,8,217,6],[196,14,217,12,"pathname"],[196,22,217,20],[196,25,217,23,"index"],[196,30,217,28],[196,35,217,33],[196,36,217,34],[196,37,217,35],[196,40,217,38,"req"],[196,43,217,41],[196,44,217,42,"url"],[196,47,217,45],[196,48,217,46,"slice"],[196,53,217,51],[196,54,217,52],[196,55,217,53],[196,57,217,55,"index"],[196,62,217,60],[196,63,217,61],[196,66,217,64,"req"],[196,69,217,67],[196,70,217,68,"url"],[196,73,217,71],[197,8,219,6],[197,12,219,10,"pathname"],[197,20,219,18],[197,25,219,23],[197,29,219,27],[197,30,219,28,"options"],[197,37,219,35],[197,38,219,36,"path"],[197,42,219,40],[197,44,219,42],[197,51,219,49],[197,56,219,54],[198,6,220,4],[199,6,222,4],[199,13,222,11],[199,17,222,15],[200,4,223,2],[202,4,225,2],[203,0,226,0],[204,0,227,0],[205,0,228,0],[206,0,229,0],[207,0,230,0],[208,0,231,0],[209,0,232,0],[210,0,233,0],[211,4,234,2,"handleUpgrade"],[211,17,234,15,"handleUpgrade"],[211,18,234,16,"req"],[211,21,234,19],[211,23,234,21,"socket"],[211,29,234,27],[211,31,234,29,"head"],[211,35,234,33],[211,37,234,35,"cb"],[211,39,234,37],[211,41,234,39],[212,6,235,4,"socket"],[212,12,235,10],[212,13,235,11,"on"],[212,15,235,13],[212,16,235,14],[212,23,235,21],[212,25,235,23,"socketOnError"],[212,38,235,36],[212,39,235,37],[213,6,237,4],[213,12,237,10,"key"],[213,15,237,13],[213,18,237,16,"req"],[213,21,237,19],[213,22,237,20,"headers"],[213,29,237,27],[213,30,237,28],[213,49,237,47],[213,50,237,48],[214,6,238,4],[214,12,238,10,"upgrade"],[214,19,238,17],[214,22,238,20,"req"],[214,25,238,23],[214,26,238,24,"headers"],[214,33,238,31],[214,34,238,32,"upgrade"],[214,41,238,39],[215,6,239,4],[215,12,239,10,"version"],[215,19,239,17],[215,22,239,20],[215,23,239,21,"req"],[215,26,239,24],[215,27,239,25,"headers"],[215,34,239,32],[215,35,239,33],[215,58,239,56],[215,59,239,57],[216,6,241,4],[216,10,241,8,"req"],[216,13,241,11],[216,14,241,12,"method"],[216,20,241,18],[216,25,241,23],[216,30,241,28],[216,32,241,30],[217,8,242,6],[217,14,242,12,"message"],[217,21,242,19],[217,24,242,22],[217,45,242,43],[218,8,243,6,"abortHandshakeOrEmitwsClientError"],[218,41,243,39],[218,42,243,40],[218,46,243,44],[218,48,243,46,"req"],[218,51,243,49],[218,53,243,51,"socket"],[218,59,243,57],[218,61,243,59],[218,64,243,62],[218,66,243,64,"message"],[218,73,243,71],[218,74,243,72],[219,8,244,6],[220,6,245,4],[221,6,247,4],[221,10,247,8,"upgrade"],[221,17,247,15],[221,22,247,20,"undefined"],[221,31,247,29],[221,35,247,33,"upgrade"],[221,42,247,40],[221,43,247,41,"toLowerCase"],[221,54,247,52],[221,55,247,53],[221,56,247,54],[221,61,247,59],[221,72,247,70],[221,74,247,72],[222,8,248,6],[222,14,248,12,"message"],[222,21,248,19],[222,24,248,22],[222,48,248,46],[223,8,249,6,"abortHandshakeOrEmitwsClientError"],[223,41,249,39],[223,42,249,40],[223,46,249,44],[223,48,249,46,"req"],[223,51,249,49],[223,53,249,51,"socket"],[223,59,249,57],[223,61,249,59],[223,64,249,62],[223,66,249,64,"message"],[223,73,249,71],[223,74,249,72],[224,8,250,6],[225,6,251,4],[226,6,253,4],[226,10,253,8,"key"],[226,13,253,11],[226,18,253,16,"undefined"],[226,27,253,25],[226,31,253,29],[226,32,253,30,"keyRegex"],[226,40,253,38],[226,41,253,39,"test"],[226,45,253,43],[226,46,253,44,"key"],[226,49,253,47],[226,50,253,48],[226,52,253,50],[227,8,254,6],[227,14,254,12,"message"],[227,21,254,19],[227,24,254,22],[227,69,254,67],[228,8,255,6,"abortHandshakeOrEmitwsClientError"],[228,41,255,39],[228,42,255,40],[228,46,255,44],[228,48,255,46,"req"],[228,51,255,49],[228,53,255,51,"socket"],[228,59,255,57],[228,61,255,59],[228,64,255,62],[228,66,255,64,"message"],[228,73,255,71],[228,74,255,72],[229,8,256,6],[230,6,257,4],[231,6,259,4],[231,10,259,8,"version"],[231,17,259,15],[231,22,259,20],[231,24,259,22],[231,28,259,26,"version"],[231,35,259,33],[231,40,259,38],[231,41,259,39],[231,43,259,41],[232,8,260,6],[232,14,260,12,"message"],[232,21,260,19],[232,24,260,22],[232,73,260,71],[233,8,261,6,"abortHandshakeOrEmitwsClientError"],[233,41,261,39],[233,42,261,40],[233,46,261,44],[233,48,261,46,"req"],[233,51,261,49],[233,53,261,51,"socket"],[233,59,261,57],[233,61,261,59],[233,64,261,62],[233,66,261,64,"message"],[233,73,261,71],[233,75,261,73],[234,10,262,8],[234,33,262,31],[234,35,262,33],[235,8,263,6],[235,9,263,7],[235,10,263,8],[236,8,264,6],[237,6,265,4],[238,6,267,4],[238,10,267,8],[238,11,267,9],[238,15,267,13],[238,16,267,14,"shouldHandle"],[238,28,267,26],[238,29,267,27,"req"],[238,32,267,30],[238,33,267,31],[238,35,267,33],[239,8,268,6,"abortHandshake"],[239,22,268,20],[239,23,268,21,"socket"],[239,29,268,27],[239,31,268,29],[239,34,268,32],[239,35,268,33],[240,8,269,6],[241,6,270,4],[242,6,272,4],[242,12,272,10,"secWebSocketProtocol"],[242,32,272,30],[242,35,272,33,"req"],[242,38,272,36],[242,39,272,37,"headers"],[242,46,272,44],[242,47,272,45],[242,71,272,69],[242,72,272,70],[243,6,273,4],[243,10,273,8,"protocols"],[243,19,273,17],[243,22,273,20],[243,26,273,24,"Set"],[243,29,273,27],[243,30,273,28],[243,31,273,29],[244,6,275,4],[244,10,275,8,"secWebSocketProtocol"],[244,30,275,28],[244,35,275,33,"undefined"],[244,44,275,42],[244,46,275,44],[245,8,276,6],[245,12,276,10],[246,10,277,8,"protocols"],[246,19,277,17],[246,22,277,20,"subprotocol"],[246,33,277,31],[246,34,277,32,"parse"],[246,39,277,37],[246,40,277,38,"secWebSocketProtocol"],[246,60,277,58],[246,61,277,59],[247,8,278,6],[247,9,278,7],[247,10,278,8],[247,17,278,15,"err"],[247,20,278,18],[247,22,278,20],[248,10,279,8],[248,16,279,14,"message"],[248,23,279,21],[248,26,279,24],[248,65,279,63],[249,10,280,8,"abortHandshakeOrEmitwsClientError"],[249,43,280,41],[249,44,280,42],[249,48,280,46],[249,50,280,48,"req"],[249,53,280,51],[249,55,280,53,"socket"],[249,61,280,59],[249,63,280,61],[249,66,280,64],[249,68,280,66,"message"],[249,75,280,73],[249,76,280,74],[250,10,281,8],[251,8,282,6],[252,6,283,4],[253,6,285,4],[253,12,285,10,"secWebSocketExtensions"],[253,34,285,32],[253,37,285,35,"req"],[253,40,285,38],[253,41,285,39,"headers"],[253,48,285,46],[253,49,285,47],[253,75,285,73],[253,76,285,74],[254,6,286,4],[254,12,286,10,"extensions"],[254,22,286,20],[254,25,286,23],[254,26,286,24],[254,27,286,25],[255,6,288,4],[255,10,289,6],[255,14,289,10],[255,15,289,11,"options"],[255,22,289,18],[255,23,289,19,"perMessageDeflate"],[255,40,289,36],[255,44,290,6,"secWebSocketExtensions"],[255,66,290,28],[255,71,290,33,"undefined"],[255,80,290,42],[255,82,291,6],[256,8,292,6],[256,14,292,12,"perMessageDeflate"],[256,31,292,29],[256,34,292,32],[256,38,292,36,"PerMessageDeflate"],[256,55,292,53],[256,56,293,8],[256,60,293,12],[256,61,293,13,"options"],[256,68,293,20],[256,69,293,21,"perMessageDeflate"],[256,86,293,38],[256,88,294,8],[256,92,294,12],[256,94,295,8],[256,98,295,12],[256,99,295,13,"options"],[256,106,295,20],[256,107,295,21,"maxPayload"],[256,117,296,6],[256,118,296,7],[257,8,298,6],[257,12,298,10],[258,10,299,8],[258,16,299,14,"offers"],[258,22,299,20],[258,25,299,23,"extension"],[258,34,299,32],[258,35,299,33,"parse"],[258,40,299,38],[258,41,299,39,"secWebSocketExtensions"],[258,63,299,61],[258,64,299,62],[259,10,301,8],[259,14,301,12,"offers"],[259,20,301,18],[259,21,301,19,"PerMessageDeflate"],[259,38,301,36],[259,39,301,37,"extensionName"],[259,52,301,50],[259,53,301,51],[259,55,301,53],[260,12,302,10,"perMessageDeflate"],[260,29,302,27],[260,30,302,28,"accept"],[260,36,302,34],[260,37,302,35,"offers"],[260,43,302,41],[260,44,302,42,"PerMessageDeflate"],[260,61,302,59],[260,62,302,60,"extensionName"],[260,75,302,73],[260,76,302,74],[260,77,302,75],[261,12,303,10,"extensions"],[261,22,303,20],[261,23,303,21,"PerMessageDeflate"],[261,40,303,38],[261,41,303,39,"extensionName"],[261,54,303,52],[261,55,303,53],[261,58,303,56,"perMessageDeflate"],[261,75,303,73],[262,10,304,8],[263,8,305,6],[263,9,305,7],[263,10,305,8],[263,17,305,15,"err"],[263,20,305,18],[263,22,305,20],[264,10,306,8],[264,16,306,14,"message"],[264,23,306,21],[264,26,307,10],[264,83,307,67],[265,10,308,8,"abortHandshakeOrEmitwsClientError"],[265,43,308,41],[265,44,308,42],[265,48,308,46],[265,50,308,48,"req"],[265,53,308,51],[265,55,308,53,"socket"],[265,61,308,59],[265,63,308,61],[265,66,308,64],[265,68,308,66,"message"],[265,75,308,73],[265,76,308,74],[266,10,309,8],[267,8,310,6],[268,6,311,4],[270,6,313,4],[271,6,314,4],[272,6,315,4],[273,6,316,4],[273,10,316,8],[273,14,316,12],[273,15,316,13,"options"],[273,22,316,20],[273,23,316,21,"verifyClient"],[273,35,316,33],[273,37,316,35],[274,8,317,6],[274,14,317,12,"info"],[274,18,317,16],[274,21,317,19],[275,10,318,8,"origin"],[275,16,318,14],[275,18,319,10,"req"],[275,21,319,13],[275,22,319,14,"headers"],[275,29,319,21],[275,30,319,22],[275,33,319,25,"version"],[275,40,319,32],[275,45,319,37],[275,46,319,38],[275,49,319,41],[275,71,319,63],[275,74,319,66],[275,82,319,74],[275,84,319,76],[275,85,319,77],[276,10,320,8,"secure"],[276,16,320,14],[276,18,320,16],[276,19,320,17],[276,21,320,19,"req"],[276,24,320,22],[276,25,320,23,"socket"],[276,31,320,29],[276,32,320,30,"authorized"],[276,42,320,40],[276,46,320,44,"req"],[276,49,320,47],[276,50,320,48,"socket"],[276,56,320,54],[276,57,320,55,"encrypted"],[276,66,320,64],[276,67,320,65],[277,10,321,8,"req"],[278,8,322,6],[278,9,322,7],[279,8,324,6],[279,12,324,10],[279,16,324,14],[279,17,324,15,"options"],[279,24,324,22],[279,25,324,23,"verifyClient"],[279,37,324,35],[279,38,324,36,"length"],[279,44,324,42],[279,49,324,47],[279,50,324,48],[279,52,324,50],[280,10,325,8],[280,14,325,12],[280,15,325,13,"options"],[280,22,325,20],[280,23,325,21,"verifyClient"],[280,35,325,33],[280,36,325,34,"info"],[280,40,325,38],[280,42,325,40],[280,43,325,41,"verified"],[280,51,325,49],[280,53,325,51,"code"],[280,57,325,55],[280,59,325,57,"message"],[280,66,325,64],[280,68,325,66,"headers"],[280,75,325,73],[280,80,325,78],[281,12,326,10],[281,16,326,14],[281,17,326,15,"verified"],[281,25,326,23],[281,27,326,25],[282,14,327,12],[282,21,327,19,"abortHandshake"],[282,35,327,33],[282,36,327,34,"socket"],[282,42,327,40],[282,44,327,42,"code"],[282,48,327,46],[282,52,327,50],[282,55,327,53],[282,57,327,55,"message"],[282,64,327,62],[282,66,327,64,"headers"],[282,73,327,71],[282,74,327,72],[283,12,328,10],[284,12,330,10],[284,16,330,14],[284,17,330,15,"completeUpgrade"],[284,32,330,30],[284,33,331,12,"extensions"],[284,43,331,22],[284,45,332,12,"key"],[284,48,332,15],[284,50,333,12,"protocols"],[284,59,333,21],[284,61,334,12,"req"],[284,64,334,15],[284,66,335,12,"socket"],[284,72,335,18],[284,74,336,12,"head"],[284,78,336,16],[284,80,337,12,"cb"],[284,82,338,10],[284,83,338,11],[285,10,339,8],[285,11,339,9],[285,12,339,10],[286,10,340,8],[287,8,341,6],[288,8,343,6],[288,12,343,10],[288,13,343,11],[288,17,343,15],[288,18,343,16,"options"],[288,25,343,23],[288,26,343,24,"verifyClient"],[288,38,343,36],[288,39,343,37,"info"],[288,43,343,41],[288,44,343,42],[288,46,343,44],[288,53,343,51,"abortHandshake"],[288,67,343,65],[288,68,343,66,"socket"],[288,74,343,72],[288,76,343,74],[288,79,343,77],[288,80,343,78],[289,6,344,4],[290,6,346,4],[290,10,346,8],[290,11,346,9,"completeUpgrade"],[290,26,346,24],[290,27,346,25,"extensions"],[290,37,346,35],[290,39,346,37,"key"],[290,42,346,40],[290,44,346,42,"protocols"],[290,53,346,51],[290,55,346,53,"req"],[290,58,346,56],[290,60,346,58,"socket"],[290,66,346,64],[290,68,346,66,"head"],[290,72,346,70],[290,74,346,72,"cb"],[290,76,346,74],[290,77,346,75],[291,4,347,2],[293,4,349,2],[294,0,350,0],[295,0,351,0],[296,0,352,0],[297,0,353,0],[298,0,354,0],[299,0,355,0],[300,0,356,0],[301,0,357,0],[302,0,358,0],[303,0,359,0],[304,0,360,0],[305,0,361,0],[306,4,362,2,"completeUpgrade"],[306,19,362,17,"completeUpgrade"],[306,20,362,18,"extensions"],[306,30,362,28],[306,32,362,30,"key"],[306,35,362,33],[306,37,362,35,"protocols"],[306,46,362,44],[306,48,362,46,"req"],[306,51,362,49],[306,53,362,51,"socket"],[306,59,362,57],[306,61,362,59,"head"],[306,65,362,63],[306,67,362,65,"cb"],[306,69,362,67],[306,71,362,69],[307,6,363,4],[308,6,364,4],[309,6,365,4],[310,6,366,4],[310,10,366,8],[310,11,366,9,"socket"],[310,17,366,15],[310,18,366,16,"readable"],[310,26,366,24],[310,30,366,28],[310,31,366,29,"socket"],[310,37,366,35],[310,38,366,36,"writable"],[310,46,366,44],[310,48,366,46],[310,55,366,53,"socket"],[310,61,366,59],[310,62,366,60,"destroy"],[310,69,366,67],[310,70,366,68],[310,71,366,69],[311,6,368,4],[311,10,368,8,"socket"],[311,16,368,14],[311,17,368,15,"kWebSocket"],[311,27,368,25],[311,28,368,26],[311,30,368,28],[312,8,369,6],[312,14,369,12],[312,18,369,16,"Error"],[312,23,369,21],[312,24,370,8],[312,89,370,73],[312,92,371,10],[312,136,372,6],[312,137,372,7],[313,6,373,4],[314,6,375,4],[314,10,375,8],[314,14,375,12],[314,15,375,13,"_state"],[314,21,375,19],[314,24,375,22,"RUNNING"],[314,31,375,29],[314,33,375,31],[314,40,375,38,"abortHandshake"],[314,54,375,52],[314,55,375,53,"socket"],[314,61,375,59],[314,63,375,61],[314,66,375,64],[314,67,375,65],[315,6,377,4],[315,12,377,10,"digest"],[315,18,377,16],[315,21,377,19,"createHash"],[315,31,377,29],[315,32,377,30],[315,38,377,36],[315,39,377,37],[315,40,378,7,"update"],[315,46,378,13],[315,47,378,14,"key"],[315,50,378,17],[315,53,378,20,"GUID"],[315,57,378,24],[315,58,378,25],[315,59,379,7,"digest"],[315,65,379,13],[315,66,379,14],[315,74,379,22],[315,75,379,23],[316,6,381,4],[316,12,381,10,"headers"],[316,19,381,17],[316,22,381,20],[316,23,382,6],[316,57,382,40],[316,59,383,6],[316,79,383,26],[316,81,384,6],[316,102,384,27],[316,104,385,6],[316,129,385,31,"digest"],[316,135,385,37],[316,137,385,39],[316,138,386,5],[317,6,388,4],[317,12,388,10,"ws"],[317,14,388,12],[317,17,388,15],[317,21,388,19],[317,25,388,23],[317,26,388,24,"options"],[317,33,388,31],[317,34,388,32,"WebSocket"],[317,43,388,41],[317,44,388,42],[317,48,388,46],[317,50,388,48,"undefined"],[317,59,388,57],[317,61,388,59],[317,65,388,63],[317,66,388,64,"options"],[317,73,388,71],[317,74,388,72],[318,6,390,4],[318,10,390,8,"protocols"],[318,19,390,17],[318,20,390,18,"size"],[318,24,390,22],[318,26,390,24],[319,8,391,6],[320,8,392,6],[321,8,393,6],[322,8,394,6],[322,14,394,12,"protocol"],[322,22,394,20],[322,25,394,23],[322,29,394,27],[322,30,394,28,"options"],[322,37,394,35],[322,38,394,36,"handleProtocols"],[322,53,394,51],[322,56,395,10],[322,60,395,14],[322,61,395,15,"options"],[322,68,395,22],[322,69,395,23,"handleProtocols"],[322,84,395,38],[322,85,395,39,"protocols"],[322,94,395,48],[322,96,395,50,"req"],[322,99,395,53],[322,100,395,54],[322,103,396,10,"protocols"],[322,112,396,19],[322,113,396,20,"values"],[322,119,396,26],[322,120,396,27],[322,121,396,28],[322,122,396,29,"next"],[322,126,396,33],[322,127,396,34],[322,128,396,35],[322,129,396,36,"value"],[322,134,396,41],[323,8,398,6],[323,12,398,10,"protocol"],[323,20,398,18],[323,22,398,20],[324,10,399,8,"headers"],[324,17,399,15],[324,18,399,16,"push"],[324,22,399,20],[324,23,399,21],[324,50,399,48,"protocol"],[324,58,399,56],[324,60,399,58],[324,61,399,59],[325,10,400,8,"ws"],[325,12,400,10],[325,13,400,11,"_protocol"],[325,22,400,20],[325,25,400,23,"protocol"],[325,33,400,31],[326,8,401,6],[327,6,402,4],[328,6,404,4],[328,10,404,8,"extensions"],[328,20,404,18],[328,21,404,19,"PerMessageDeflate"],[328,38,404,36],[328,39,404,37,"extensionName"],[328,52,404,50],[328,53,404,51],[328,55,404,53],[329,8,405,6],[329,14,405,12,"params"],[329,20,405,18],[329,23,405,21,"extensions"],[329,33,405,31],[329,34,405,32,"PerMessageDeflate"],[329,51,405,49],[329,52,405,50,"extensionName"],[329,65,405,63],[329,66,405,64],[329,67,405,65,"params"],[329,73,405,71],[330,8,406,6],[330,14,406,12,"value"],[330,19,406,17],[330,22,406,20,"extension"],[330,31,406,29],[330,32,406,30,"format"],[330,38,406,36],[330,39,406,37],[331,10,407,8],[331,11,407,9,"PerMessageDeflate"],[331,28,407,26],[331,29,407,27,"extensionName"],[331,42,407,40],[331,45,407,43],[331,46,407,44,"params"],[331,52,407,50],[332,8,408,6],[332,9,408,7],[332,10,408,8],[333,8,409,6,"headers"],[333,15,409,13],[333,16,409,14,"push"],[333,20,409,18],[333,21,409,19],[333,50,409,48,"value"],[333,55,409,53],[333,57,409,55],[333,58,409,56],[334,8,410,6,"ws"],[334,10,410,8],[334,11,410,9,"_extensions"],[334,22,410,20],[334,25,410,23,"extensions"],[334,35,410,33],[335,6,411,4],[337,6,413,4],[338,6,414,4],[339,6,415,4],[340,6,416,4],[340,10,416,8],[340,11,416,9,"emit"],[340,15,416,13],[340,16,416,14],[340,25,416,23],[340,27,416,25,"headers"],[340,34,416,32],[340,36,416,34,"req"],[340,39,416,37],[340,40,416,38],[341,6,418,4,"socket"],[341,12,418,10],[341,13,418,11,"write"],[341,18,418,16],[341,19,418,17,"headers"],[341,26,418,24],[341,27,418,25,"concat"],[341,33,418,31],[341,34,418,32],[341,40,418,38],[341,41,418,39],[341,42,418,40,"join"],[341,46,418,44],[341,47,418,45],[341,53,418,51],[341,54,418,52],[341,55,418,53],[342,6,419,4,"socket"],[342,12,419,10],[342,13,419,11,"removeListener"],[342,27,419,25],[342,28,419,26],[342,35,419,33],[342,37,419,35,"socketOnError"],[342,50,419,48],[342,51,419,49],[343,6,421,4,"ws"],[343,8,421,6],[343,9,421,7,"setSocket"],[343,18,421,16],[343,19,421,17,"socket"],[343,25,421,23],[343,27,421,25,"head"],[343,31,421,29],[343,33,421,31],[344,8,422,6,"allowSynchronousEvents"],[344,30,422,28],[344,32,422,30],[344,36,422,34],[344,37,422,35,"options"],[344,44,422,42],[344,45,422,43,"allowSynchronousEvents"],[344,67,422,65],[345,8,423,6,"maxPayload"],[345,18,423,16],[345,20,423,18],[345,24,423,22],[345,25,423,23,"options"],[345,32,423,30],[345,33,423,31,"maxPayload"],[345,43,423,41],[346,8,424,6,"skipUTF8Validation"],[346,26,424,24],[346,28,424,26],[346,32,424,30],[346,33,424,31,"options"],[346,40,424,38],[346,41,424,39,"skipUTF8Validation"],[347,6,425,4],[347,7,425,5],[347,8,425,6],[348,6,427,4],[348,10,427,8],[348,14,427,12],[348,15,427,13,"clients"],[348,22,427,20],[348,24,427,22],[349,8,428,6],[349,12,428,10],[349,13,428,11,"clients"],[349,20,428,18],[349,21,428,19,"add"],[349,24,428,22],[349,25,428,23,"ws"],[349,27,428,25],[349,28,428,26],[350,8,429,6,"ws"],[350,10,429,8],[350,11,429,9,"on"],[350,13,429,11],[350,14,429,12],[350,21,429,19],[350,23,429,21],[350,29,429,27],[351,10,430,8],[351,14,430,12],[351,15,430,13,"clients"],[351,22,430,20],[351,23,430,21,"delete"],[351,29,430,27],[351,30,430,28,"ws"],[351,32,430,30],[351,33,430,31],[352,10,432,8],[352,14,432,12],[352,18,432,16],[352,19,432,17,"_shouldEmitClose"],[352,35,432,33],[352,39,432,37],[352,40,432,38],[352,44,432,42],[352,45,432,43,"clients"],[352,52,432,50],[352,53,432,51,"size"],[352,57,432,55],[352,59,432,57],[353,12,433,10,"process"],[353,19,433,17],[353,20,433,18,"nextTick"],[353,28,433,26],[353,29,433,27,"emitClose"],[353,38,433,36],[353,40,433,38],[353,44,433,42],[353,45,433,43],[354,10,434,8],[355,8,435,6],[355,9,435,7],[355,10,435,8],[356,6,436,4],[357,6,438,4,"cb"],[357,8,438,6],[357,9,438,7,"ws"],[357,11,438,9],[357,13,438,11,"req"],[357,16,438,14],[357,17,438,15],[358,4,439,2],[359,2,440,0],[360,2,442,0,"module"],[360,8,442,6],[360,9,442,7,"exports"],[360,16,442,14],[360,19,442,17,"WebSocketServer"],[360,34,442,32],[362,2,444,0],[363,0,445,0],[364,0,446,0],[365,0,447,0],[366,0,448,0],[367,0,449,0],[368,0,450,0],[369,0,451,0],[370,0,452,0],[371,0,453,0],[372,2,454,0],[372,11,454,9,"addListeners"],[372,23,454,21,"addListeners"],[372,24,454,22,"server"],[372,30,454,28],[372,32,454,30,"map"],[372,35,454,33],[372,37,454,35],[373,4,455,2],[373,9,455,7],[373,15,455,13,"event"],[373,20,455,18],[373,24,455,22,"Object"],[373,30,455,28],[373,31,455,29,"keys"],[373,35,455,33],[373,36,455,34,"map"],[373,39,455,37],[373,40,455,38],[373,42,455,40,"server"],[373,48,455,46],[373,49,455,47,"on"],[373,51,455,49],[373,52,455,50,"event"],[373,57,455,55],[373,59,455,57,"map"],[373,62,455,60],[373,63,455,61,"event"],[373,68,455,66],[373,69,455,67],[373,70,455,68],[374,4,457,2],[374,11,457,9],[374,20,457,18,"removeListeners"],[374,35,457,33,"removeListeners"],[374,36,457,33],[374,38,457,36],[375,6,458,4],[375,11,458,9],[375,17,458,15,"event"],[375,22,458,20],[375,26,458,24,"Object"],[375,32,458,30],[375,33,458,31,"keys"],[375,37,458,35],[375,38,458,36,"map"],[375,41,458,39],[375,42,458,40],[375,44,458,42],[376,8,459,6,"server"],[376,14,459,12],[376,15,459,13,"removeListener"],[376,29,459,27],[376,30,459,28,"event"],[376,35,459,33],[376,37,459,35,"map"],[376,40,459,38],[376,41,459,39,"event"],[376,46,459,44],[376,47,459,45],[376,48,459,46],[377,6,460,4],[378,4,461,2],[378,5,461,3],[379,2,462,0],[381,2,464,0],[382,0,465,0],[383,0,466,0],[384,0,467,0],[385,0,468,0],[386,0,469,0],[387,2,470,0],[387,11,470,9,"emitClose"],[387,20,470,18,"emitClose"],[387,21,470,19,"server"],[387,27,470,25],[387,29,470,27],[388,4,471,2,"server"],[388,10,471,8],[388,11,471,9,"_state"],[388,17,471,15],[388,20,471,18,"CLOSED"],[388,26,471,24],[389,4,472,2,"server"],[389,10,472,8],[389,11,472,9,"emit"],[389,15,472,13],[389,16,472,14],[389,23,472,21],[389,24,472,22],[390,2,473,0],[392,2,475,0],[393,0,476,0],[394,0,477,0],[395,0,478,0],[396,0,479,0],[397,2,480,0],[397,11,480,9,"socketOnError"],[397,24,480,22,"socketOnError"],[397,25,480,22],[397,27,480,25],[398,4,481,2],[398,8,481,6],[398,9,481,7,"destroy"],[398,16,481,14],[398,17,481,15],[398,18,481,16],[399,2,482,0],[401,2,484,0],[402,0,485,0],[403,0,486,0],[404,0,487,0],[405,0,488,0],[406,0,489,0],[407,0,490,0],[408,0,491,0],[409,0,492,0],[410,2,493,0],[410,11,493,9,"abortHandshake"],[410,25,493,23,"abortHandshake"],[410,26,493,24,"socket"],[410,32,493,30],[410,34,493,32,"code"],[410,38,493,36],[410,40,493,38,"message"],[410,47,493,45],[410,49,493,47,"headers"],[410,56,493,54],[410,58,493,56],[411,4,494,2],[412,4,495,2],[413,4,496,2],[414,4,497,2],[415,4,498,2],[416,4,499,2],[417,4,500,2],[418,4,501,2],[419,4,502,2,"message"],[419,11,502,9],[419,14,502,12,"message"],[419,21,502,19],[419,25,502,23,"http"],[419,29,502,27],[419,30,502,28,"STATUS_CODES"],[419,42,502,40],[419,43,502,41,"code"],[419,47,502,45],[419,48,502,46],[420,4,503,2,"headers"],[420,11,503,9],[420,14,503,12],[421,6,504,4,"Connection"],[421,16,504,14],[421,18,504,16],[421,25,504,23],[422,6,505,4],[422,20,505,18],[422,22,505,20],[422,33,505,31],[423,6,506,4],[423,22,506,20],[423,24,506,22,"Buffer"],[423,30,506,28],[423,31,506,29,"byteLength"],[423,41,506,39],[423,42,506,40,"message"],[423,49,506,47],[423,50,506,48],[424,6,507,4],[424,9,507,7,"headers"],[425,4,508,2],[425,5,508,3],[426,4,510,2,"socket"],[426,10,510,8],[426,11,510,9,"once"],[426,15,510,13],[426,16,510,14],[426,24,510,22],[426,26,510,24,"socket"],[426,32,510,30],[426,33,510,31,"destroy"],[426,40,510,38],[426,41,510,39],[427,4,512,2,"socket"],[427,10,512,8],[427,11,512,9,"end"],[427,14,512,12],[427,15,513,4],[427,27,513,16,"code"],[427,31,513,20],[427,35,513,24,"http"],[427,39,513,28],[427,40,513,29,"STATUS_CODES"],[427,52,513,41],[427,53,513,42,"code"],[427,57,513,46],[427,58,513,47],[427,64,513,53],[427,67,514,6,"Object"],[427,73,514,12],[427,74,514,13,"keys"],[427,78,514,17],[427,79,514,18,"headers"],[427,86,514,25],[427,87,514,26],[427,88,515,9,"map"],[427,91,515,12],[427,92,515,14,"h"],[427,93,515,15],[427,97,515,20],[427,100,515,23,"h"],[427,101,515,24],[427,106,515,29,"headers"],[427,113,515,36],[427,114,515,37,"h"],[427,115,515,38],[427,116,515,39],[427,118,515,41],[427,119,515,42],[427,120,516,9,"join"],[427,124,516,13],[427,125,516,14],[427,131,516,20],[427,132,516,21],[427,135,517,6],[427,145,517,16],[427,148,518,6,"message"],[427,155,519,2],[427,156,519,3],[428,2,520,0],[430,2,522,0],[431,0,523,0],[432,0,524,0],[433,0,525,0],[434,0,526,0],[435,0,527,0],[436,0,528,0],[437,0,529,0],[438,0,530,0],[439,0,531,0],[440,0,532,0],[441,0,533,0],[442,2,534,0],[442,11,534,9,"abortHandshakeOrEmitwsClientError"],[442,44,534,42,"abortHandshakeOrEmitwsClientError"],[442,45,535,2,"server"],[442,51,535,8],[442,53,536,2,"req"],[442,56,536,5],[442,58,537,2,"socket"],[442,64,537,8],[442,66,538,2,"code"],[442,70,538,6],[442,72,539,2,"message"],[442,79,539,9],[442,81,540,2,"headers"],[442,88,540,9],[442,90,541,2],[443,4,542,2],[443,8,542,6,"server"],[443,14,542,12],[443,15,542,13,"listenerCount"],[443,28,542,26],[443,29,542,27],[443,44,542,42],[443,45,542,43],[443,47,542,45],[444,6,543,4],[444,12,543,10,"err"],[444,15,543,13],[444,18,543,16],[444,22,543,20,"Error"],[444,27,543,25],[444,28,543,26,"message"],[444,35,543,33],[444,36,543,34],[445,6,544,4,"Error"],[445,11,544,9],[445,12,544,10,"captureStackTrace"],[445,29,544,27],[445,30,544,28,"err"],[445,33,544,31],[445,35,544,33,"abortHandshakeOrEmitwsClientError"],[445,68,544,66],[445,69,544,67],[446,6,546,4,"server"],[446,12,546,10],[446,13,546,11,"emit"],[446,17,546,15],[446,18,546,16],[446,33,546,31],[446,35,546,33,"err"],[446,38,546,36],[446,40,546,38,"socket"],[446,46,546,44],[446,48,546,46,"req"],[446,51,546,49],[446,52,546,50],[447,4,547,2],[447,5,547,3],[447,11,547,9],[448,6,548,4,"abortHandshake"],[448,20,548,18],[448,21,548,19,"socket"],[448,27,548,25],[448,29,548,27,"code"],[448,33,548,31],[448,35,548,33,"message"],[448,42,548,40],[448,44,548,42,"headers"],[448,51,548,49],[448,52,548,50],[449,4,549,2],[450,2,550,0],[451,0,550,1],[451,3]],"functionMap":{"names":["<global>","WebSocketServer","WebSocketServer#constructor","http.createServer$argument_0","addListeners$argument_1.upgrade","WebSocketServer#address","WebSocketServer#close","once$argument_1","server.close$argument_0","WebSocketServer#shouldHandle","WebSocketServer#handleUpgrade","options.verifyClient$argument_1","WebSocketServer#completeUpgrade","ws.on$argument_1","addListeners","removeListeners","emitClose","socketOnError","abortHandshake","Object.keys.map$argument_0","abortHandshakeOrEmitwsClientError"],"mappings":"AAA;AC0B;ECgC;uCCkC;ODQ;iBEiB;SFE;GDY;EIW;GJO;EKS;2BCG;SDE;mBEqC;OFE;GLE;EQS;GRS;ESW;wCC2F;SDc;GTQ;EWe;qBCmE;ODM;GXI;CDC;Acc;SCG;GDI;CdC;AgBQ;ChBG;AiBO;CjBE;AkBW;aCsB,4BD;ClBK;AoBc;CpBgB"}},"type":"js/module"}]}