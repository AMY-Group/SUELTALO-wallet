{"dependencies":[{"name":"buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":18,"index":55},"end":{"line":2,"column":35,"index":72}}],"key":"kYC7RadcB7k9ZEYd5zOmBbv1F14=","exportNames":["*"]}},{"name":"sjcl","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":11,"index":94},"end":{"line":5,"column":26,"index":109}}],"key":"jRNDJALht80zMntoDWTg6JEXBOk=","exportNames":["*"]}},{"name":"react-native","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":20,"index":130},"end":{"line":6,"column":43,"index":153}}],"key":"lGv6jwyWtmgghjjYvCX5yhM2Jt0=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.randomBytes = randomBytes;\n  exports.seedSJCL = seedSJCL;\n  if (typeof Buffer === 'undefined') {\n    global.Buffer = require(_dependencyMap[0], \"buffer\").Buffer;\n  }\n  let sjcl = require(_dependencyMap[1], \"sjcl\");\n  let RNRandomBytes = require(_dependencyMap[2], \"react-native\").NativeModules.RNRandomBytes;\n  function noop() {}\n  function toBuffer(nativeStr) {\n    return new Buffer(nativeStr, 'base64');\n  }\n  function init() {\n    if (RNRandomBytes.seed) {\n      let seedBuffer = toBuffer(RNRandomBytes.seed);\n      addEntropy(seedBuffer);\n    } else {\n      seedSJCL();\n    }\n  }\n  function addEntropy(entropyBuf) {\n    let hexString = entropyBuf.toString('hex');\n    let stanfordSeed = sjcl.codec.hex.toBits(hexString);\n    sjcl.random.addEntropy(stanfordSeed);\n  }\n  function seedSJCL(cb) {\n    cb = cb || noop;\n    randomBytes(4096, function (err, buffer) {\n      if (err) return cb(err);\n      addEntropy(buffer);\n    });\n  }\n  function randomBytes(length, cb) {\n    if (!cb) {\n      let size = length;\n      let wordCount = Math.ceil(size * 0.25);\n      let randomBytes = sjcl.random.randomWords(wordCount, 10);\n      let hexString = sjcl.codec.hex.fromBits(randomBytes);\n      hexString = hexString.substr(0, size * 2);\n      return new Buffer(hexString, 'hex');\n    }\n    RNRandomBytes.randomBytes(length, function (err, base64String) {\n      if (err) {\n        cb(err);\n      } else {\n        cb(null, toBuffer(base64String));\n      }\n    });\n  }\n  init();\n});","lineCount":54,"map":[[7,2,1,0],[7,6,1,4],[7,13,1,11,"Buffer"],[7,19,1,17],[7,24,1,22],[7,35,1,33],[7,37,1,35],[8,4,2,2,"global"],[8,10,2,8],[8,11,2,9,"Buffer"],[8,17,2,15],[8,20,2,18,"require"],[8,27,2,25],[8,28,2,25,"_dependencyMap"],[8,42,2,25],[8,55,2,34],[8,56,2,35],[8,57,2,36,"Buffer"],[8,63,2,42],[9,2,3,0],[10,2,5,0],[10,6,5,4,"sjcl"],[10,10,5,8],[10,13,5,11,"require"],[10,20,5,18],[10,21,5,18,"_dependencyMap"],[10,35,5,18],[10,46,5,25],[10,47,5,26],[11,2,6,0],[11,6,6,4,"RNRandomBytes"],[11,19,6,17],[11,22,6,20,"require"],[11,29,6,27],[11,30,6,27,"_dependencyMap"],[11,44,6,27],[11,63,6,42],[11,64,6,43],[11,65,6,44,"NativeModules"],[11,78,6,57],[11,79,6,58,"RNRandomBytes"],[11,92,6,71],[12,2,8,0],[12,11,8,9,"noop"],[12,15,8,13,"noop"],[12,16,8,13],[12,18,8,17],[12,19,8,18],[13,2,10,0],[13,11,10,9,"toBuffer"],[13,19,10,17,"toBuffer"],[13,20,10,19,"nativeStr"],[13,29,10,28],[13,31,10,30],[14,4,11,2],[14,11,11,9],[14,15,11,13,"Buffer"],[14,21,11,19],[14,22,11,20,"nativeStr"],[14,31,11,29],[14,33,11,31],[14,41,11,39],[14,42,11,40],[15,2,12,0],[16,2,14,0],[16,11,14,9,"init"],[16,15,14,13,"init"],[16,16,14,13],[16,18,14,17],[17,4,15,2],[17,8,15,6,"RNRandomBytes"],[17,21,15,19],[17,22,15,20,"seed"],[17,26,15,24],[17,28,15,26],[18,6,16,4],[18,10,16,8,"seedBuffer"],[18,20,16,18],[18,23,16,21,"toBuffer"],[18,31,16,29],[18,32,16,30,"RNRandomBytes"],[18,45,16,43],[18,46,16,44,"seed"],[18,50,16,48],[18,51,16,49],[19,6,17,4,"addEntropy"],[19,16,17,14],[19,17,17,15,"seedBuffer"],[19,27,17,25],[19,28,17,26],[20,4,18,2],[20,5,18,3],[20,11,18,9],[21,6,19,4,"seedSJCL"],[21,14,19,12],[21,15,19,13],[21,16,19,14],[22,4,20,2],[23,2,21,0],[24,2,23,0],[24,11,23,9,"addEntropy"],[24,21,23,19,"addEntropy"],[24,22,23,21,"entropyBuf"],[24,32,23,31],[24,34,23,33],[25,4,24,2],[25,8,24,6,"hexString"],[25,17,24,15],[25,20,24,18,"entropyBuf"],[25,30,24,28],[25,31,24,29,"toString"],[25,39,24,37],[25,40,24,38],[25,45,24,43],[25,46,24,44],[26,4,25,2],[26,8,25,6,"stanfordSeed"],[26,20,25,18],[26,23,25,21,"sjcl"],[26,27,25,25],[26,28,25,26,"codec"],[26,33,25,31],[26,34,25,32,"hex"],[26,37,25,35],[26,38,25,36,"toBits"],[26,44,25,42],[26,45,25,43,"hexString"],[26,54,25,52],[26,55,25,53],[27,4,26,2,"sjcl"],[27,8,26,6],[27,9,26,7,"random"],[27,15,26,13],[27,16,26,14,"addEntropy"],[27,26,26,24],[27,27,26,25,"stanfordSeed"],[27,39,26,37],[27,40,26,38],[28,2,27,0],[29,2,29,7],[29,11,29,16,"seedSJCL"],[29,19,29,24,"seedSJCL"],[29,20,29,26,"cb"],[29,22,29,28],[29,24,29,30],[30,4,30,2,"cb"],[30,6,30,4],[30,9,30,7,"cb"],[30,11,30,9],[30,15,30,13,"noop"],[30,19,30,17],[31,4,31,2,"randomBytes"],[31,15,31,13],[31,16,31,14],[31,20,31,18],[31,22,31,20],[31,32,31,30,"err"],[31,35,31,33],[31,37,31,35,"buffer"],[31,43,31,41],[31,45,31,43],[32,6,32,4],[32,10,32,8,"err"],[32,13,32,11],[32,15,32,13],[32,22,32,20,"cb"],[32,24,32,22],[32,25,32,23,"err"],[32,28,32,26],[32,29,32,27],[33,6,34,4,"addEntropy"],[33,16,34,14],[33,17,34,15,"buffer"],[33,23,34,21],[33,24,34,22],[34,4,35,2],[34,5,35,3],[34,6,35,4],[35,2,36,0],[36,2,38,7],[36,11,38,16,"randomBytes"],[36,22,38,27,"randomBytes"],[36,23,38,29,"length"],[36,29,38,35],[36,31,38,37,"cb"],[36,33,38,39],[36,35,38,41],[37,4,39,2],[37,8,39,6],[37,9,39,7,"cb"],[37,11,39,9],[37,13,39,11],[38,6,40,4],[38,10,40,8,"size"],[38,14,40,12],[38,17,40,15,"length"],[38,23,40,21],[39,6,41,4],[39,10,41,8,"wordCount"],[39,19,41,17],[39,22,41,20,"Math"],[39,26,41,24],[39,27,41,25,"ceil"],[39,31,41,29],[39,32,41,30,"size"],[39,36,41,34],[39,39,41,37],[39,43,41,41],[39,44,41,42],[40,6,42,4],[40,10,42,8,"randomBytes"],[40,21,42,19],[40,24,42,22,"sjcl"],[40,28,42,26],[40,29,42,27,"random"],[40,35,42,33],[40,36,42,34,"randomWords"],[40,47,42,45],[40,48,42,46,"wordCount"],[40,57,42,55],[40,59,42,57],[40,61,42,59],[40,62,42,60],[41,6,43,4],[41,10,43,8,"hexString"],[41,19,43,17],[41,22,43,20,"sjcl"],[41,26,43,24],[41,27,43,25,"codec"],[41,32,43,30],[41,33,43,31,"hex"],[41,36,43,34],[41,37,43,35,"fromBits"],[41,45,43,43],[41,46,43,44,"randomBytes"],[41,57,43,55],[41,58,43,56],[42,6,44,4,"hexString"],[42,15,44,13],[42,18,44,16,"hexString"],[42,27,44,25],[42,28,44,26,"substr"],[42,34,44,32],[42,35,44,33],[42,36,44,34],[42,38,44,36,"size"],[42,42,44,40],[42,45,44,43],[42,46,44,44],[42,47,44,45],[43,6,45,4],[43,13,45,11],[43,17,45,15,"Buffer"],[43,23,45,21],[43,24,45,22,"hexString"],[43,33,45,31],[43,35,45,33],[43,40,45,38],[43,41,45,39],[44,4,46,2],[45,4,48,2,"RNRandomBytes"],[45,17,48,15],[45,18,48,16,"randomBytes"],[45,29,48,27],[45,30,48,28,"length"],[45,36,48,34],[45,38,48,36],[45,48,48,45,"err"],[45,51,48,48],[45,53,48,50,"base64String"],[45,65,48,62],[45,67,48,64],[46,6,49,4],[46,10,49,8,"err"],[46,13,49,11],[46,15,49,13],[47,8,50,6,"cb"],[47,10,50,8],[47,11,50,9,"err"],[47,14,50,12],[47,15,50,13],[48,6,51,4],[48,7,51,5],[48,13,51,11],[49,8,52,6,"cb"],[49,10,52,8],[49,11,52,9],[49,15,52,13],[49,17,52,15,"toBuffer"],[49,25,52,23],[49,26,52,24,"base64String"],[49,38,52,36],[49,39,52,37],[49,40,52,38],[50,6,53,4],[51,4,54,2],[51,5,54,3],[51,6,54,4],[52,2,55,0],[53,2,57,0,"init"],[53,6,57,4],[53,7,57,5],[53,8,57,6],[54,0,57,6],[54,3]],"functionMap":{"names":["<global>","noop","toBuffer","init","addEntropy","seedSJCL","randomBytes$argument_1","randomBytes","RNRandomBytes.randomBytes$argument_1"],"mappings":"AAA;ACO,mBD;AEE;CFE;AGE;CHO;AIE;CJI;OKE;oBCE;GDI;CLC;OOE;oCCU;GDM;CPC"}},"type":"js/module"}]}