{"dependencies":[{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":13,"index":28},"end":{"line":3,"column":35,"index":50}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI=","exportNames":["*"]}},{"name":"stream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":16,"index":75},"end":{"line":4,"column":33,"index":92}}],"key":"ywjhWBPQUrHXIfwGsbgNg7Szt/A=","exportNames":["*"]}},{"name":"string_decoder","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":20,"index":124},"end":{"line":5,"column":45,"index":149}}],"key":"Czn9Pd3w4g4vQh6KJoZw1JzHmic=","exportNames":["*"]}},{"name":"inherits","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":15,"index":180},"end":{"line":6,"column":34,"index":199}}],"key":"UFs2L1Ma7NUz/WYD3lQMkA8Bn/s=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var Buffer = require(_dependencyMap[0], \"safe-buffer\").Buffer;\n  var Transform = require(_dependencyMap[1], \"stream\").Transform;\n  var StringDecoder = require(_dependencyMap[2], \"string_decoder\").StringDecoder;\n  var inherits = require(_dependencyMap[3], \"inherits\");\n  function CipherBase(hashMode) {\n    Transform.call(this);\n    this.hashMode = typeof hashMode === 'string';\n    if (this.hashMode) {\n      this[hashMode] = this._finalOrDigest;\n    } else {\n      this['final'] = this._finalOrDigest;\n    }\n    if (this._final) {\n      this.__final = this._final;\n      this._final = null;\n    }\n    this._decoder = null;\n    this._encoding = null;\n  }\n  inherits(CipherBase, Transform);\n  var useUint8Array = typeof Uint8Array !== 'undefined';\n  var useArrayBuffer = typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && ArrayBuffer.isView && (Buffer.prototype instanceof Uint8Array || Buffer.TYPED_ARRAY_SUPPORT);\n  function toBuffer(data, encoding) {\n    /*\n     * No need to do anything for exact instance\n     * This is only valid when safe-buffer.Buffer === buffer.Buffer, i.e. when Buffer.from/Buffer.alloc existed\n     */\n    if (data instanceof Buffer) {\n      return data;\n    }\n\n    // Convert strings to Buffer\n    if (typeof data === 'string') {\n      return Buffer.from(data, encoding);\n    }\n\n    /*\n     * Wrap any TypedArray instances and DataViews\n     * Makes sense only on engines with full TypedArray support -- let Buffer detect that\n     */\n    if (useArrayBuffer && ArrayBuffer.isView(data)) {\n      // Bug in Node.js <6.3.1, which treats this as out-of-bounds\n      if (data.byteLength === 0) {\n        return Buffer.alloc(0);\n      }\n      var res = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n      /*\n       * Recheck result size, as offset/length doesn't work on Node.js <5.10\n       * We just go to Uint8Array case if this fails\n       */\n      if (res.byteLength === data.byteLength) {\n        return res;\n      }\n    }\n\n    /*\n     * Uint8Array in engines where Buffer.from might not work with ArrayBuffer, just copy over\n     * Doesn't make sense with other TypedArray instances\n     */\n    if (useUint8Array && data instanceof Uint8Array) {\n      return Buffer.from(data);\n    }\n\n    /*\n     * Old Buffer polyfill on an engine that doesn't have TypedArray support\n     * Also, this is from a different Buffer polyfill implementation then we have, as instanceof check failed\n     * Convert to our current Buffer implementation\n     */\n    if (Buffer.isBuffer(data) && data.constructor && typeof data.constructor.isBuffer === 'function' && data.constructor.isBuffer(data)) {\n      return Buffer.from(data);\n    }\n    throw new TypeError('The \"data\" argument must be of type string or an instance of Buffer, TypedArray, or DataView.');\n  }\n  CipherBase.prototype.update = function (data, inputEnc, outputEnc) {\n    var bufferData = toBuffer(data, inputEnc); // asserts correct input type\n    var outData = this._update(bufferData);\n    if (this.hashMode) {\n      return this;\n    }\n    if (outputEnc) {\n      outData = this._toString(outData, outputEnc);\n    }\n    return outData;\n  };\n  CipherBase.prototype.setAutoPadding = function () {};\n  CipherBase.prototype.getAuthTag = function () {\n    throw new Error('trying to get auth tag in unsupported state');\n  };\n  CipherBase.prototype.setAuthTag = function () {\n    throw new Error('trying to set auth tag in unsupported state');\n  };\n  CipherBase.prototype.setAAD = function () {\n    throw new Error('trying to set aad in unsupported state');\n  };\n  CipherBase.prototype._transform = function (data, _, next) {\n    var err;\n    try {\n      if (this.hashMode) {\n        this._update(data);\n      } else {\n        this.push(this._update(data));\n      }\n    } catch (e) {\n      err = e;\n    } finally {\n      next(err);\n    }\n  };\n  CipherBase.prototype._flush = function (done) {\n    var err;\n    try {\n      this.push(this.__final());\n    } catch (e) {\n      err = e;\n    }\n    done(err);\n  };\n  CipherBase.prototype._finalOrDigest = function (outputEnc) {\n    var outData = this.__final() || Buffer.alloc(0);\n    if (outputEnc) {\n      outData = this._toString(outData, outputEnc, true);\n    }\n    return outData;\n  };\n  CipherBase.prototype._toString = function (value, enc, fin) {\n    if (!this._decoder) {\n      this._decoder = new StringDecoder(enc);\n      this._encoding = enc;\n    }\n    if (this._encoding !== enc) {\n      throw new Error('canâ€™t switch encodings');\n    }\n    var out = this._decoder.write(value);\n    if (fin) {\n      out += this._decoder.end();\n    }\n    return out;\n  };\n  module.exports = CipherBase;\n});","lineCount":143,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"Buffer"],[4,12,3,10],[4,15,3,13,"require"],[4,22,3,20],[4,23,3,20,"_dependencyMap"],[4,37,3,20],[4,55,3,34],[4,56,3,35],[4,57,3,36,"Buffer"],[4,63,3,42],[5,2,4,0],[5,6,4,4,"Transform"],[5,15,4,13],[5,18,4,16,"require"],[5,25,4,23],[5,26,4,23,"_dependencyMap"],[5,40,4,23],[5,53,4,32],[5,54,4,33],[5,55,4,34,"Transform"],[5,64,4,43],[6,2,5,0],[6,6,5,4,"StringDecoder"],[6,19,5,17],[6,22,5,20,"require"],[6,29,5,27],[6,30,5,27,"_dependencyMap"],[6,44,5,27],[6,65,5,44],[6,66,5,45],[6,67,5,46,"StringDecoder"],[6,80,5,59],[7,2,6,0],[7,6,6,4,"inherits"],[7,14,6,12],[7,17,6,15,"require"],[7,24,6,22],[7,25,6,22,"_dependencyMap"],[7,39,6,22],[7,54,6,33],[7,55,6,34],[8,2,8,0],[8,11,8,9,"CipherBase"],[8,21,8,19,"CipherBase"],[8,22,8,20,"hashMode"],[8,30,8,28],[8,32,8,30],[9,4,9,1,"Transform"],[9,13,9,10],[9,14,9,11,"call"],[9,18,9,15],[9,19,9,16],[9,23,9,20],[9,24,9,21],[10,4,10,1],[10,8,10,5],[10,9,10,6,"hashMode"],[10,17,10,14],[10,20,10,17],[10,27,10,24,"hashMode"],[10,35,10,32],[10,40,10,37],[10,48,10,45],[11,4,11,1],[11,8,11,5],[11,12,11,9],[11,13,11,10,"hashMode"],[11,21,11,18],[11,23,11,20],[12,6,12,2],[12,10,12,6],[12,11,12,7,"hashMode"],[12,19,12,15],[12,20,12,16],[12,23,12,19],[12,27,12,23],[12,28,12,24,"_finalOrDigest"],[12,42,12,38],[13,4,13,1],[13,5,13,2],[13,11,13,8],[14,6,14,2],[14,10,14,6],[14,11,14,7],[14,18,14,14],[14,19,14,15],[14,22,14,18],[14,26,14,22],[14,27,14,23,"_finalOrDigest"],[14,41,14,37],[15,4,15,1],[16,4,16,1],[16,8,16,5],[16,12,16,9],[16,13,16,10,"_final"],[16,19,16,16],[16,21,16,18],[17,6,17,2],[17,10,17,6],[17,11,17,7,"__final"],[17,18,17,14],[17,21,17,17],[17,25,17,21],[17,26,17,22,"_final"],[17,32,17,28],[18,6,18,2],[18,10,18,6],[18,11,18,7,"_final"],[18,17,18,13],[18,20,18,16],[18,24,18,20],[19,4,19,1],[20,4,20,1],[20,8,20,5],[20,9,20,6,"_decoder"],[20,17,20,14],[20,20,20,17],[20,24,20,21],[21,4,21,1],[21,8,21,5],[21,9,21,6,"_encoding"],[21,18,21,15],[21,21,21,18],[21,25,21,22],[22,2,22,0],[23,2,23,0,"inherits"],[23,10,23,8],[23,11,23,9,"CipherBase"],[23,21,23,19],[23,23,23,21,"Transform"],[23,32,23,30],[23,33,23,31],[24,2,25,0],[24,6,25,4,"useUint8Array"],[24,19,25,17],[24,22,25,20],[24,29,25,27,"Uint8Array"],[24,39,25,37],[24,44,25,42],[24,55,25,53],[25,2,26,0],[25,6,26,4,"useArrayBuffer"],[25,20,26,18],[25,23,26,21],[25,30,26,28,"ArrayBuffer"],[25,41,26,39],[25,46,26,44],[25,57,26,55],[25,61,27,4],[25,68,27,11,"Uint8Array"],[25,78,27,21],[25,83,27,26],[25,94,27,37],[25,98,28,4,"ArrayBuffer"],[25,109,28,15],[25,110,28,16,"isView"],[25,116,28,22],[25,121,29,5,"Buffer"],[25,127,29,11],[25,128,29,12,"prototype"],[25,137,29,21],[25,149,29,33,"Uint8Array"],[25,159,29,43],[25,163,29,47,"Buffer"],[25,169,29,53],[25,170,29,54,"TYPED_ARRAY_SUPPORT"],[25,189,29,73],[25,190,29,74],[26,2,31,0],[26,11,31,9,"toBuffer"],[26,19,31,17,"toBuffer"],[26,20,31,18,"data"],[26,24,31,22],[26,26,31,24,"encoding"],[26,34,31,32],[26,36,31,34],[27,4,32,1],[28,0,33,0],[29,0,34,0],[30,0,35,0],[31,4,36,1],[31,8,36,5,"data"],[31,12,36,9],[31,24,36,21,"Buffer"],[31,30,36,27],[31,32,36,29],[32,6,37,2],[32,13,37,9,"data"],[32,17,37,13],[33,4,38,1],[35,4,40,1],[36,4,41,1],[36,8,41,5],[36,15,41,12,"data"],[36,19,41,16],[36,24,41,21],[36,32,41,29],[36,34,41,31],[37,6,42,2],[37,13,42,9,"Buffer"],[37,19,42,15],[37,20,42,16,"from"],[37,24,42,20],[37,25,42,21,"data"],[37,29,42,25],[37,31,42,27,"encoding"],[37,39,42,35],[37,40,42,36],[38,4,43,1],[40,4,45,1],[41,0,46,0],[42,0,47,0],[43,0,48,0],[44,4,49,1],[44,8,49,5,"useArrayBuffer"],[44,22,49,19],[44,26,49,23,"ArrayBuffer"],[44,37,49,34],[44,38,49,35,"isView"],[44,44,49,41],[44,45,49,42,"data"],[44,49,49,46],[44,50,49,47],[44,52,49,49],[45,6,50,2],[46,6,51,2],[46,10,51,6,"data"],[46,14,51,10],[46,15,51,11,"byteLength"],[46,25,51,21],[46,30,51,26],[46,31,51,27],[46,33,51,29],[47,8,52,3],[47,15,52,10,"Buffer"],[47,21,52,16],[47,22,52,17,"alloc"],[47,27,52,22],[47,28,52,23],[47,29,52,24],[47,30,52,25],[48,6,53,2],[49,6,55,2],[49,10,55,6,"res"],[49,13,55,9],[49,16,55,12,"Buffer"],[49,22,55,18],[49,23,55,19,"from"],[49,27,55,23],[49,28,55,24,"data"],[49,32,55,28],[49,33,55,29,"buffer"],[49,39,55,35],[49,41,55,37,"data"],[49,45,55,41],[49,46,55,42,"byteOffset"],[49,56,55,52],[49,58,55,54,"data"],[49,62,55,58],[49,63,55,59,"byteLength"],[49,73,55,69],[49,74,55,70],[50,6,56,2],[51,0,57,0],[52,0,58,0],[53,0,59,0],[54,6,60,2],[54,10,60,6,"res"],[54,13,60,9],[54,14,60,10,"byteLength"],[54,24,60,20],[54,29,60,25,"data"],[54,33,60,29],[54,34,60,30,"byteLength"],[54,44,60,40],[54,46,60,42],[55,8,61,3],[55,15,61,10,"res"],[55,18,61,13],[56,6,62,2],[57,4,63,1],[59,4,65,1],[60,0,66,0],[61,0,67,0],[62,0,68,0],[63,4,69,1],[63,8,69,5,"useUint8Array"],[63,21,69,18],[63,25,69,22,"data"],[63,29,69,26],[63,41,69,38,"Uint8Array"],[63,51,69,48],[63,53,69,50],[64,6,70,2],[64,13,70,9,"Buffer"],[64,19,70,15],[64,20,70,16,"from"],[64,24,70,20],[64,25,70,21,"data"],[64,29,70,25],[64,30,70,26],[65,4,71,1],[67,4,73,1],[68,0,74,0],[69,0,75,0],[70,0,76,0],[71,0,77,0],[72,4,78,1],[72,8,79,2,"Buffer"],[72,14,79,8],[72,15,79,9,"isBuffer"],[72,23,79,17],[72,24,79,18,"data"],[72,28,79,22],[72,29,79,23],[72,33,80,6,"data"],[72,37,80,10],[72,38,80,11,"constructor"],[72,49,80,22],[72,53,81,6],[72,60,81,13,"data"],[72,64,81,17],[72,65,81,18,"constructor"],[72,76,81,29],[72,77,81,30,"isBuffer"],[72,85,81,38],[72,90,81,43],[72,100,81,53],[72,104,82,6,"data"],[72,108,82,10],[72,109,82,11,"constructor"],[72,120,82,22],[72,121,82,23,"isBuffer"],[72,129,82,31],[72,130,82,32,"data"],[72,134,82,36],[72,135,82,37],[72,137,83,3],[73,6,84,2],[73,13,84,9,"Buffer"],[73,19,84,15],[73,20,84,16,"from"],[73,24,84,20],[73,25,84,21,"data"],[73,29,84,25],[73,30,84,26],[74,4,85,1],[75,4,87,1],[75,10,87,7],[75,14,87,11,"TypeError"],[75,23,87,20],[75,24,87,21],[75,119,87,116],[75,120,87,117],[76,2,88,0],[77,2,90,0,"CipherBase"],[77,12,90,10],[77,13,90,11,"prototype"],[77,22,90,20],[77,23,90,21,"update"],[77,29,90,27],[77,32,90,30],[77,42,90,40,"data"],[77,46,90,44],[77,48,90,46,"inputEnc"],[77,56,90,54],[77,58,90,56,"outputEnc"],[77,67,90,65],[77,69,90,67],[78,4,91,1],[78,8,91,5,"bufferData"],[78,18,91,15],[78,21,91,18,"toBuffer"],[78,29,91,26],[78,30,91,27,"data"],[78,34,91,31],[78,36,91,33,"inputEnc"],[78,44,91,41],[78,45,91,42],[78,46,91,43],[78,47,91,44],[79,4,92,1],[79,8,92,5,"outData"],[79,15,92,12],[79,18,92,15],[79,22,92,19],[79,23,92,20,"_update"],[79,30,92,27],[79,31,92,28,"bufferData"],[79,41,92,38],[79,42,92,39],[80,4,93,1],[80,8,93,5],[80,12,93,9],[80,13,93,10,"hashMode"],[80,21,93,18],[80,23,93,20],[81,6,94,2],[81,13,94,9],[81,17,94,13],[82,4,95,1],[83,4,97,1],[83,8,97,5,"outputEnc"],[83,17,97,14],[83,19,97,16],[84,6,98,2,"outData"],[84,13,98,9],[84,16,98,12],[84,20,98,16],[84,21,98,17,"_toString"],[84,30,98,26],[84,31,98,27,"outData"],[84,38,98,34],[84,40,98,36,"outputEnc"],[84,49,98,45],[84,50,98,46],[85,4,99,1],[86,4,101,1],[86,11,101,8,"outData"],[86,18,101,15],[87,2,102,0],[87,3,102,1],[88,2,104,0,"CipherBase"],[88,12,104,10],[88,13,104,11,"prototype"],[88,22,104,20],[88,23,104,21,"setAutoPadding"],[88,37,104,35],[88,40,104,38],[88,52,104,50],[88,53,104,51],[88,54,104,52],[89,2,105,0,"CipherBase"],[89,12,105,10],[89,13,105,11,"prototype"],[89,22,105,20],[89,23,105,21,"getAuthTag"],[89,33,105,31],[89,36,105,34],[89,48,105,46],[90,4,106,1],[90,10,106,7],[90,14,106,11,"Error"],[90,19,106,16],[90,20,106,17],[90,65,106,62],[90,66,106,63],[91,2,107,0],[91,3,107,1],[92,2,109,0,"CipherBase"],[92,12,109,10],[92,13,109,11,"prototype"],[92,22,109,20],[92,23,109,21,"setAuthTag"],[92,33,109,31],[92,36,109,34],[92,48,109,46],[93,4,110,1],[93,10,110,7],[93,14,110,11,"Error"],[93,19,110,16],[93,20,110,17],[93,65,110,62],[93,66,110,63],[94,2,111,0],[94,3,111,1],[95,2,113,0,"CipherBase"],[95,12,113,10],[95,13,113,11,"prototype"],[95,22,113,20],[95,23,113,21,"setAAD"],[95,29,113,27],[95,32,113,30],[95,44,113,42],[96,4,114,1],[96,10,114,7],[96,14,114,11,"Error"],[96,19,114,16],[96,20,114,17],[96,60,114,57],[96,61,114,58],[97,2,115,0],[97,3,115,1],[98,2,117,0,"CipherBase"],[98,12,117,10],[98,13,117,11,"prototype"],[98,22,117,20],[98,23,117,21,"_transform"],[98,33,117,31],[98,36,117,34],[98,46,117,44,"data"],[98,50,117,48],[98,52,117,50,"_"],[98,53,117,51],[98,55,117,53,"next"],[98,59,117,57],[98,61,117,59],[99,4,118,1],[99,8,118,5,"err"],[99,11,118,8],[100,4,119,1],[100,8,119,5],[101,6,120,2],[101,10,120,6],[101,14,120,10],[101,15,120,11,"hashMode"],[101,23,120,19],[101,25,120,21],[102,8,121,3],[102,12,121,7],[102,13,121,8,"_update"],[102,20,121,15],[102,21,121,16,"data"],[102,25,121,20],[102,26,121,21],[103,6,122,2],[103,7,122,3],[103,13,122,9],[104,8,123,3],[104,12,123,7],[104,13,123,8,"push"],[104,17,123,12],[104,18,123,13],[104,22,123,17],[104,23,123,18,"_update"],[104,30,123,25],[104,31,123,26,"data"],[104,35,123,30],[104,36,123,31],[104,37,123,32],[105,6,124,2],[106,4,125,1],[106,5,125,2],[106,6,125,3],[106,13,125,10,"e"],[106,14,125,11],[106,16,125,13],[107,6,126,2,"err"],[107,9,126,5],[107,12,126,8,"e"],[107,13,126,9],[108,4,127,1],[108,5,127,2],[108,14,127,11],[109,6,128,2,"next"],[109,10,128,6],[109,11,128,7,"err"],[109,14,128,10],[109,15,128,11],[110,4,129,1],[111,2,130,0],[111,3,130,1],[112,2,131,0,"CipherBase"],[112,12,131,10],[112,13,131,11,"prototype"],[112,22,131,20],[112,23,131,21,"_flush"],[112,29,131,27],[112,32,131,30],[112,42,131,40,"done"],[112,46,131,44],[112,48,131,46],[113,4,132,1],[113,8,132,5,"err"],[113,11,132,8],[114,4,133,1],[114,8,133,5],[115,6,134,2],[115,10,134,6],[115,11,134,7,"push"],[115,15,134,11],[115,16,134,12],[115,20,134,16],[115,21,134,17,"__final"],[115,28,134,24],[115,29,134,25],[115,30,134,26],[115,31,134,27],[116,4,135,1],[116,5,135,2],[116,6,135,3],[116,13,135,10,"e"],[116,14,135,11],[116,16,135,13],[117,6,136,2,"err"],[117,9,136,5],[117,12,136,8,"e"],[117,13,136,9],[118,4,137,1],[119,4,139,1,"done"],[119,8,139,5],[119,9,139,6,"err"],[119,12,139,9],[119,13,139,10],[120,2,140,0],[120,3,140,1],[121,2,141,0,"CipherBase"],[121,12,141,10],[121,13,141,11,"prototype"],[121,22,141,20],[121,23,141,21,"_finalOrDigest"],[121,37,141,35],[121,40,141,38],[121,50,141,48,"outputEnc"],[121,59,141,57],[121,61,141,59],[122,4,142,1],[122,8,142,5,"outData"],[122,15,142,12],[122,18,142,15],[122,22,142,19],[122,23,142,20,"__final"],[122,30,142,27],[122,31,142,28],[122,32,142,29],[122,36,142,33,"Buffer"],[122,42,142,39],[122,43,142,40,"alloc"],[122,48,142,45],[122,49,142,46],[122,50,142,47],[122,51,142,48],[123,4,143,1],[123,8,143,5,"outputEnc"],[123,17,143,14],[123,19,143,16],[124,6,144,2,"outData"],[124,13,144,9],[124,16,144,12],[124,20,144,16],[124,21,144,17,"_toString"],[124,30,144,26],[124,31,144,27,"outData"],[124,38,144,34],[124,40,144,36,"outputEnc"],[124,49,144,45],[124,51,144,47],[124,55,144,51],[124,56,144,52],[125,4,145,1],[126,4,146,1],[126,11,146,8,"outData"],[126,18,146,15],[127,2,147,0],[127,3,147,1],[128,2,149,0,"CipherBase"],[128,12,149,10],[128,13,149,11,"prototype"],[128,22,149,20],[128,23,149,21,"_toString"],[128,32,149,30],[128,35,149,33],[128,45,149,43,"value"],[128,50,149,48],[128,52,149,50,"enc"],[128,55,149,53],[128,57,149,55,"fin"],[128,60,149,58],[128,62,149,60],[129,4,150,1],[129,8,150,5],[129,9,150,6],[129,13,150,10],[129,14,150,11,"_decoder"],[129,22,150,19],[129,24,150,21],[130,6,151,2],[130,10,151,6],[130,11,151,7,"_decoder"],[130,19,151,15],[130,22,151,18],[130,26,151,22,"StringDecoder"],[130,39,151,35],[130,40,151,36,"enc"],[130,43,151,39],[130,44,151,40],[131,6,152,2],[131,10,152,6],[131,11,152,7,"_encoding"],[131,20,152,16],[131,23,152,19,"enc"],[131,26,152,22],[132,4,153,1],[133,4,155,1],[133,8,155,5],[133,12,155,9],[133,13,155,10,"_encoding"],[133,22,155,19],[133,27,155,24,"enc"],[133,30,155,27],[133,32,155,29],[134,6,156,2],[134,12,156,8],[134,16,156,12,"Error"],[134,21,156,17],[134,22,156,18],[134,46,156,42],[134,47,156,43],[135,4,157,1],[136,4,159,1],[136,8,159,5,"out"],[136,11,159,8],[136,14,159,11],[136,18,159,15],[136,19,159,16,"_decoder"],[136,27,159,24],[136,28,159,25,"write"],[136,33,159,30],[136,34,159,31,"value"],[136,39,159,36],[136,40,159,37],[137,4,160,1],[137,8,160,5,"fin"],[137,11,160,8],[137,13,160,10],[138,6,161,2,"out"],[138,9,161,5],[138,13,161,9],[138,17,161,13],[138,18,161,14,"_decoder"],[138,26,161,22],[138,27,161,23,"end"],[138,30,161,26],[138,31,161,27],[138,32,161,28],[139,4,162,1],[140,4,164,1],[140,11,164,8,"out"],[140,14,164,11],[141,2,165,0],[141,3,165,1],[142,2,167,0,"module"],[142,8,167,6],[142,9,167,7,"exports"],[142,16,167,14],[142,19,167,17,"CipherBase"],[142,29,167,27],[143,0,167,28],[143,3]],"functionMap":{"names":["<global>","CipherBase","toBuffer","CipherBase.prototype.update","CipherBase.prototype.setAutoPadding","CipherBase.prototype.getAuthTag","CipherBase.prototype.setAuthTag","CipherBase.prototype.setAAD","CipherBase.prototype._transform","CipherBase.prototype._flush","CipherBase.prototype._finalOrDigest","CipherBase.prototype._toString"],"mappings":"AAA;ACO;CDc;AES;CFyD;8BGE;CHY;sCIE,cJ;kCKC;CLE;kCME;CNE;8BOE;CPE;kCQE;CRa;8BSC;CTS;sCUC;CVM;iCWE;CXgB"}},"type":"js/module"}]}