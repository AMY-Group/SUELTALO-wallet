{"dependencies":[{"name":"./websocket","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":18,"index":112},"end":{"line":4,"column":40,"index":134}}],"key":"Z9tk37I35leCkp6BqPC1DlwoIEg=","exportNames":["*"]}},{"name":"stream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":19,"index":155},"end":{"line":5,"column":36,"index":172}}],"key":"ywjhWBPQUrHXIfwGsbgNg7Szt/A=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^WebSocket$\" }] */\n  'use strict';\n\n  const WebSocket = require(_dependencyMap[0], \"./websocket\");\n  const {\n    Duplex\n  } = require(_dependencyMap[1], \"stream\");\n\n  /**\n   * Emits the `'close'` event on a stream.\n   *\n   * @param {Duplex} stream The stream.\n   * @private\n   */\n  function emitClose(stream) {\n    stream.emit('close');\n  }\n\n  /**\n   * The listener of the `'end'` event.\n   *\n   * @private\n   */\n  function duplexOnEnd() {\n    if (!this.destroyed && this._writableState.finished) {\n      this.destroy();\n    }\n  }\n\n  /**\n   * The listener of the `'error'` event.\n   *\n   * @param {Error} err The error\n   * @private\n   */\n  function duplexOnError(err) {\n    this.removeListener('error', duplexOnError);\n    this.destroy();\n    if (this.listenerCount('error') === 0) {\n      // Do not suppress the throwing behavior.\n      this.emit('error', err);\n    }\n  }\n\n  /**\n   * Wraps a `WebSocket` in a duplex stream.\n   *\n   * @param {WebSocket} ws The `WebSocket` to wrap\n   * @param {Object} [options] The options for the `Duplex` constructor\n   * @return {Duplex} The duplex stream\n   * @public\n   */\n  function createWebSocketStream(ws, options) {\n    let terminateOnDestroy = true;\n    const duplex = new Duplex({\n      ...options,\n      autoDestroy: false,\n      emitClose: false,\n      objectMode: false,\n      writableObjectMode: false\n    });\n    ws.on('message', function message(msg, isBinary) {\n      const data = !isBinary && duplex._readableState.objectMode ? msg.toString() : msg;\n      if (!duplex.push(data)) ws.pause();\n    });\n    ws.once('error', function error(err) {\n      if (duplex.destroyed) return;\n\n      // Prevent `ws.terminate()` from being called by `duplex._destroy()`.\n      //\n      // - If the `'error'` event is emitted before the `'open'` event, then\n      //   `ws.terminate()` is a noop as no socket is assigned.\n      // - Otherwise, the error is re-emitted by the listener of the `'error'`\n      //   event of the `Receiver` object. The listener already closes the\n      //   connection by calling `ws.close()`. This allows a close frame to be\n      //   sent to the other peer. If `ws.terminate()` is called right after this,\n      //   then the close frame might not be sent.\n      terminateOnDestroy = false;\n      duplex.destroy(err);\n    });\n    ws.once('close', function close() {\n      if (duplex.destroyed) return;\n      duplex.push(null);\n    });\n    duplex._destroy = function (err, callback) {\n      if (ws.readyState === ws.CLOSED) {\n        callback(err);\n        process.nextTick(emitClose, duplex);\n        return;\n      }\n      let called = false;\n      ws.once('error', function error(err) {\n        called = true;\n        callback(err);\n      });\n      ws.once('close', function close() {\n        if (!called) callback(err);\n        process.nextTick(emitClose, duplex);\n      });\n      if (terminateOnDestroy) ws.terminate();\n    };\n    duplex._final = function (callback) {\n      if (ws.readyState === ws.CONNECTING) {\n        ws.once('open', function open() {\n          duplex._final(callback);\n        });\n        return;\n      }\n\n      // If the value of the `_socket` property is `null` it means that `ws` is a\n      // client websocket and the handshake failed. In fact, when this happens, a\n      // socket is never assigned to the websocket. Wait for the `'error'` event\n      // that will be emitted by the websocket.\n      if (ws._socket === null) return;\n      if (ws._socket._writableState.finished) {\n        callback();\n        if (duplex._readableState.endEmitted) duplex.destroy();\n      } else {\n        ws._socket.once('finish', function finish() {\n          // `duplex` is not destroyed here because the `'end'` event will be\n          // emitted on `duplex` after this `'finish'` event. The EOF signaling\n          // `null` chunk is, in fact, pushed when the websocket emits `'close'`.\n          callback();\n        });\n        ws.close();\n      }\n    };\n    duplex._read = function () {\n      if (ws.isPaused) ws.resume();\n    };\n    duplex._write = function (chunk, encoding, callback) {\n      if (ws.readyState === ws.CONNECTING) {\n        ws.once('open', function open() {\n          duplex._write(chunk, encoding, callback);\n        });\n        return;\n      }\n      ws.send(chunk, callback);\n    };\n    duplex.on('end', duplexOnEnd);\n    duplex.on('error', duplexOnError);\n    return duplex;\n  }\n  module.exports = createWebSocketStream;\n});","lineCount":146,"map":[[2,2,1,0],[3,2,2,0],[3,14,2,12],[5,2,4,0],[5,8,4,6,"WebSocket"],[5,17,4,15],[5,20,4,18,"require"],[5,27,4,25],[5,28,4,25,"_dependencyMap"],[5,42,4,25],[5,60,4,39],[5,61,4,40],[6,2,5,0],[6,8,5,6],[7,4,5,8,"Duplex"],[8,2,5,15],[8,3,5,16],[8,6,5,19,"require"],[8,13,5,26],[8,14,5,26,"_dependencyMap"],[8,28,5,26],[8,41,5,35],[8,42,5,36],[10,2,7,0],[11,0,8,0],[12,0,9,0],[13,0,10,0],[14,0,11,0],[15,0,12,0],[16,2,13,0],[16,11,13,9,"emitClose"],[16,20,13,18,"emitClose"],[16,21,13,19,"stream"],[16,27,13,25],[16,29,13,27],[17,4,14,2,"stream"],[17,10,14,8],[17,11,14,9,"emit"],[17,15,14,13],[17,16,14,14],[17,23,14,21],[17,24,14,22],[18,2,15,0],[20,2,17,0],[21,0,18,0],[22,0,19,0],[23,0,20,0],[24,0,21,0],[25,2,22,0],[25,11,22,9,"duplexOnEnd"],[25,22,22,20,"duplexOnEnd"],[25,23,22,20],[25,25,22,23],[26,4,23,2],[26,8,23,6],[26,9,23,7],[26,13,23,11],[26,14,23,12,"destroyed"],[26,23,23,21],[26,27,23,25],[26,31,23,29],[26,32,23,30,"_writableState"],[26,46,23,44],[26,47,23,45,"finished"],[26,55,23,53],[26,57,23,55],[27,6,24,4],[27,10,24,8],[27,11,24,9,"destroy"],[27,18,24,16],[27,19,24,17],[27,20,24,18],[28,4,25,2],[29,2,26,0],[31,2,28,0],[32,0,29,0],[33,0,30,0],[34,0,31,0],[35,0,32,0],[36,0,33,0],[37,2,34,0],[37,11,34,9,"duplexOnError"],[37,24,34,22,"duplexOnError"],[37,25,34,23,"err"],[37,28,34,26],[37,30,34,28],[38,4,35,2],[38,8,35,6],[38,9,35,7,"removeListener"],[38,23,35,21],[38,24,35,22],[38,31,35,29],[38,33,35,31,"duplexOnError"],[38,46,35,44],[38,47,35,45],[39,4,36,2],[39,8,36,6],[39,9,36,7,"destroy"],[39,16,36,14],[39,17,36,15],[39,18,36,16],[40,4,37,2],[40,8,37,6],[40,12,37,10],[40,13,37,11,"listenerCount"],[40,26,37,24],[40,27,37,25],[40,34,37,32],[40,35,37,33],[40,40,37,38],[40,41,37,39],[40,43,37,41],[41,6,38,4],[42,6,39,4],[42,10,39,8],[42,11,39,9,"emit"],[42,15,39,13],[42,16,39,14],[42,23,39,21],[42,25,39,23,"err"],[42,28,39,26],[42,29,39,27],[43,4,40,2],[44,2,41,0],[46,2,43,0],[47,0,44,0],[48,0,45,0],[49,0,46,0],[50,0,47,0],[51,0,48,0],[52,0,49,0],[53,0,50,0],[54,2,51,0],[54,11,51,9,"createWebSocketStream"],[54,32,51,30,"createWebSocketStream"],[54,33,51,31,"ws"],[54,35,51,33],[54,37,51,35,"options"],[54,44,51,42],[54,46,51,44],[55,4,52,2],[55,8,52,6,"terminateOnDestroy"],[55,26,52,24],[55,29,52,27],[55,33,52,31],[56,4,54,2],[56,10,54,8,"duplex"],[56,16,54,14],[56,19,54,17],[56,23,54,21,"Duplex"],[56,29,54,27],[56,30,54,28],[57,6,55,4],[57,9,55,7,"options"],[57,16,55,14],[58,6,56,4,"autoDestroy"],[58,17,56,15],[58,19,56,17],[58,24,56,22],[59,6,57,4,"emitClose"],[59,15,57,13],[59,17,57,15],[59,22,57,20],[60,6,58,4,"objectMode"],[60,16,58,14],[60,18,58,16],[60,23,58,21],[61,6,59,4,"writableObjectMode"],[61,24,59,22],[61,26,59,24],[62,4,60,2],[62,5,60,3],[62,6,60,4],[63,4,62,2,"ws"],[63,6,62,4],[63,7,62,5,"on"],[63,9,62,7],[63,10,62,8],[63,19,62,17],[63,21,62,19],[63,30,62,28,"message"],[63,37,62,35,"message"],[63,38,62,36,"msg"],[63,41,62,39],[63,43,62,41,"isBinary"],[63,51,62,49],[63,53,62,51],[64,6,63,4],[64,12,63,10,"data"],[64,16,63,14],[64,19,64,6],[64,20,64,7,"isBinary"],[64,28,64,15],[64,32,64,19,"duplex"],[64,38,64,25],[64,39,64,26,"_readableState"],[64,53,64,40],[64,54,64,41,"objectMode"],[64,64,64,51],[64,67,64,54,"msg"],[64,70,64,57],[64,71,64,58,"toString"],[64,79,64,66],[64,80,64,67],[64,81,64,68],[64,84,64,71,"msg"],[64,87,64,74],[65,6,66,4],[65,10,66,8],[65,11,66,9,"duplex"],[65,17,66,15],[65,18,66,16,"push"],[65,22,66,20],[65,23,66,21,"data"],[65,27,66,25],[65,28,66,26],[65,30,66,28,"ws"],[65,32,66,30],[65,33,66,31,"pause"],[65,38,66,36],[65,39,66,37],[65,40,66,38],[66,4,67,2],[66,5,67,3],[66,6,67,4],[67,4,69,2,"ws"],[67,6,69,4],[67,7,69,5,"once"],[67,11,69,9],[67,12,69,10],[67,19,69,17],[67,21,69,19],[67,30,69,28,"error"],[67,35,69,33,"error"],[67,36,69,34,"err"],[67,39,69,37],[67,41,69,39],[68,6,70,4],[68,10,70,8,"duplex"],[68,16,70,14],[68,17,70,15,"destroyed"],[68,26,70,24],[68,28,70,26],[70,6,72,4],[71,6,73,4],[72,6,74,4],[73,6,75,4],[74,6,76,4],[75,6,77,4],[76,6,78,4],[77,6,79,4],[78,6,80,4],[79,6,81,4,"terminateOnDestroy"],[79,24,81,22],[79,27,81,25],[79,32,81,30],[80,6,82,4,"duplex"],[80,12,82,10],[80,13,82,11,"destroy"],[80,20,82,18],[80,21,82,19,"err"],[80,24,82,22],[80,25,82,23],[81,4,83,2],[81,5,83,3],[81,6,83,4],[82,4,85,2,"ws"],[82,6,85,4],[82,7,85,5,"once"],[82,11,85,9],[82,12,85,10],[82,19,85,17],[82,21,85,19],[82,30,85,28,"close"],[82,35,85,33,"close"],[82,36,85,33],[82,38,85,36],[83,6,86,4],[83,10,86,8,"duplex"],[83,16,86,14],[83,17,86,15,"destroyed"],[83,26,86,24],[83,28,86,26],[84,6,88,4,"duplex"],[84,12,88,10],[84,13,88,11,"push"],[84,17,88,15],[84,18,88,16],[84,22,88,20],[84,23,88,21],[85,4,89,2],[85,5,89,3],[85,6,89,4],[86,4,91,2,"duplex"],[86,10,91,8],[86,11,91,9,"_destroy"],[86,19,91,17],[86,22,91,20],[86,32,91,30,"err"],[86,35,91,33],[86,37,91,35,"callback"],[86,45,91,43],[86,47,91,45],[87,6,92,4],[87,10,92,8,"ws"],[87,12,92,10],[87,13,92,11,"readyState"],[87,23,92,21],[87,28,92,26,"ws"],[87,30,92,28],[87,31,92,29,"CLOSED"],[87,37,92,35],[87,39,92,37],[88,8,93,6,"callback"],[88,16,93,14],[88,17,93,15,"err"],[88,20,93,18],[88,21,93,19],[89,8,94,6,"process"],[89,15,94,13],[89,16,94,14,"nextTick"],[89,24,94,22],[89,25,94,23,"emitClose"],[89,34,94,32],[89,36,94,34,"duplex"],[89,42,94,40],[89,43,94,41],[90,8,95,6],[91,6,96,4],[92,6,98,4],[92,10,98,8,"called"],[92,16,98,14],[92,19,98,17],[92,24,98,22],[93,6,100,4,"ws"],[93,8,100,6],[93,9,100,7,"once"],[93,13,100,11],[93,14,100,12],[93,21,100,19],[93,23,100,21],[93,32,100,30,"error"],[93,37,100,35,"error"],[93,38,100,36,"err"],[93,41,100,39],[93,43,100,41],[94,8,101,6,"called"],[94,14,101,12],[94,17,101,15],[94,21,101,19],[95,8,102,6,"callback"],[95,16,102,14],[95,17,102,15,"err"],[95,20,102,18],[95,21,102,19],[96,6,103,4],[96,7,103,5],[96,8,103,6],[97,6,105,4,"ws"],[97,8,105,6],[97,9,105,7,"once"],[97,13,105,11],[97,14,105,12],[97,21,105,19],[97,23,105,21],[97,32,105,30,"close"],[97,37,105,35,"close"],[97,38,105,35],[97,40,105,38],[98,8,106,6],[98,12,106,10],[98,13,106,11,"called"],[98,19,106,17],[98,21,106,19,"callback"],[98,29,106,27],[98,30,106,28,"err"],[98,33,106,31],[98,34,106,32],[99,8,107,6,"process"],[99,15,107,13],[99,16,107,14,"nextTick"],[99,24,107,22],[99,25,107,23,"emitClose"],[99,34,107,32],[99,36,107,34,"duplex"],[99,42,107,40],[99,43,107,41],[100,6,108,4],[100,7,108,5],[100,8,108,6],[101,6,110,4],[101,10,110,8,"terminateOnDestroy"],[101,28,110,26],[101,30,110,28,"ws"],[101,32,110,30],[101,33,110,31,"terminate"],[101,42,110,40],[101,43,110,41],[101,44,110,42],[102,4,111,2],[102,5,111,3],[103,4,113,2,"duplex"],[103,10,113,8],[103,11,113,9,"_final"],[103,17,113,15],[103,20,113,18],[103,30,113,28,"callback"],[103,38,113,36],[103,40,113,38],[104,6,114,4],[104,10,114,8,"ws"],[104,12,114,10],[104,13,114,11,"readyState"],[104,23,114,21],[104,28,114,26,"ws"],[104,30,114,28],[104,31,114,29,"CONNECTING"],[104,41,114,39],[104,43,114,41],[105,8,115,6,"ws"],[105,10,115,8],[105,11,115,9,"once"],[105,15,115,13],[105,16,115,14],[105,22,115,20],[105,24,115,22],[105,33,115,31,"open"],[105,37,115,35,"open"],[105,38,115,35],[105,40,115,38],[106,10,116,8,"duplex"],[106,16,116,14],[106,17,116,15,"_final"],[106,23,116,21],[106,24,116,22,"callback"],[106,32,116,30],[106,33,116,31],[107,8,117,6],[107,9,117,7],[107,10,117,8],[108,8,118,6],[109,6,119,4],[111,6,121,4],[112,6,122,4],[113,6,123,4],[114,6,124,4],[115,6,125,4],[115,10,125,8,"ws"],[115,12,125,10],[115,13,125,11,"_socket"],[115,20,125,18],[115,25,125,23],[115,29,125,27],[115,31,125,29],[116,6,127,4],[116,10,127,8,"ws"],[116,12,127,10],[116,13,127,11,"_socket"],[116,20,127,18],[116,21,127,19,"_writableState"],[116,35,127,33],[116,36,127,34,"finished"],[116,44,127,42],[116,46,127,44],[117,8,128,6,"callback"],[117,16,128,14],[117,17,128,15],[117,18,128,16],[118,8,129,6],[118,12,129,10,"duplex"],[118,18,129,16],[118,19,129,17,"_readableState"],[118,33,129,31],[118,34,129,32,"endEmitted"],[118,44,129,42],[118,46,129,44,"duplex"],[118,52,129,50],[118,53,129,51,"destroy"],[118,60,129,58],[118,61,129,59],[118,62,129,60],[119,6,130,4],[119,7,130,5],[119,13,130,11],[120,8,131,6,"ws"],[120,10,131,8],[120,11,131,9,"_socket"],[120,18,131,16],[120,19,131,17,"once"],[120,23,131,21],[120,24,131,22],[120,32,131,30],[120,34,131,32],[120,43,131,41,"finish"],[120,49,131,47,"finish"],[120,50,131,47],[120,52,131,50],[121,10,132,8],[122,10,133,8],[123,10,134,8],[124,10,135,8,"callback"],[124,18,135,16],[124,19,135,17],[124,20,135,18],[125,8,136,6],[125,9,136,7],[125,10,136,8],[126,8,137,6,"ws"],[126,10,137,8],[126,11,137,9,"close"],[126,16,137,14],[126,17,137,15],[126,18,137,16],[127,6,138,4],[128,4,139,2],[128,5,139,3],[129,4,141,2,"duplex"],[129,10,141,8],[129,11,141,9,"_read"],[129,16,141,14],[129,19,141,17],[129,31,141,29],[130,6,142,4],[130,10,142,8,"ws"],[130,12,142,10],[130,13,142,11,"isPaused"],[130,21,142,19],[130,23,142,21,"ws"],[130,25,142,23],[130,26,142,24,"resume"],[130,32,142,30],[130,33,142,31],[130,34,142,32],[131,4,143,2],[131,5,143,3],[132,4,145,2,"duplex"],[132,10,145,8],[132,11,145,9,"_write"],[132,17,145,15],[132,20,145,18],[132,30,145,28,"chunk"],[132,35,145,33],[132,37,145,35,"encoding"],[132,45,145,43],[132,47,145,45,"callback"],[132,55,145,53],[132,57,145,55],[133,6,146,4],[133,10,146,8,"ws"],[133,12,146,10],[133,13,146,11,"readyState"],[133,23,146,21],[133,28,146,26,"ws"],[133,30,146,28],[133,31,146,29,"CONNECTING"],[133,41,146,39],[133,43,146,41],[134,8,147,6,"ws"],[134,10,147,8],[134,11,147,9,"once"],[134,15,147,13],[134,16,147,14],[134,22,147,20],[134,24,147,22],[134,33,147,31,"open"],[134,37,147,35,"open"],[134,38,147,35],[134,40,147,38],[135,10,148,8,"duplex"],[135,16,148,14],[135,17,148,15,"_write"],[135,23,148,21],[135,24,148,22,"chunk"],[135,29,148,27],[135,31,148,29,"encoding"],[135,39,148,37],[135,41,148,39,"callback"],[135,49,148,47],[135,50,148,48],[136,8,149,6],[136,9,149,7],[136,10,149,8],[137,8,150,6],[138,6,151,4],[139,6,153,4,"ws"],[139,8,153,6],[139,9,153,7,"send"],[139,13,153,11],[139,14,153,12,"chunk"],[139,19,153,17],[139,21,153,19,"callback"],[139,29,153,27],[139,30,153,28],[140,4,154,2],[140,5,154,3],[141,4,156,2,"duplex"],[141,10,156,8],[141,11,156,9,"on"],[141,13,156,11],[141,14,156,12],[141,19,156,17],[141,21,156,19,"duplexOnEnd"],[141,32,156,30],[141,33,156,31],[142,4,157,2,"duplex"],[142,10,157,8],[142,11,157,9,"on"],[142,13,157,11],[142,14,157,12],[142,21,157,19],[142,23,157,21,"duplexOnError"],[142,36,157,34],[142,37,157,35],[143,4,158,2],[143,11,158,9,"duplex"],[143,17,158,15],[144,2,159,0],[145,2,161,0,"module"],[145,8,161,6],[145,9,161,7,"exports"],[145,16,161,14],[145,19,161,17,"createWebSocketStream"],[145,40,161,38],[146,0,161,39],[146,3]],"functionMap":{"names":["<global>","emitClose","duplexOnEnd","duplexOnError","createWebSocketStream","message","error","close","duplex._destroy","duplex._final","open","finish","duplex._read","duplex._write"],"mappings":"AAA;ACY;CDE;AEO;CFI;AGQ;CHO;AIU;mBCW;GDK;mBEE;GFc;mBGE;GHI;oBIE;qBFS;KEG;qBDE;KCG;GJG;kBKE;sBCE;ODE;gCEc;OFK;GLG;iBQE;GRE;kBSE;sBHE;OGE;GTK;CJK"}},"type":"js/module"}]}