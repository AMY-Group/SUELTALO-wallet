{"dependencies":[{"name":"../utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":275},"end":{"line":8,"column":125,"index":400}}],"key":"dGswK136diHRCgUa8xpQUn/UMbc=","exportNames":["*"]}},{"name":"./modular.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":401},"end":{"line":9,"column":35,"index":436}}],"key":"9k+FDNYf3zXm2KDVSy5nBT9psY4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.montgomery = montgomery;\n  var _utils = require(_dependencyMap[0], \"../utils.js\");\n  var _modular = require(_dependencyMap[1], \"./modular.js\");\n  /**\n   * Montgomery curve methods. It's not really whole montgomery curve,\n   * just bunch of very specific methods for X25519 / X448 from\n   * [RFC 7748](https://www.rfc-editor.org/rfc/rfc7748)\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n  const _0n = BigInt(0);\n  const _1n = BigInt(1);\n  const _2n = BigInt(2);\n  function validateOpts(curve) {\n    (0, _utils._validateObject)(curve, {\n      adjustScalarBytes: 'function',\n      powPminus2: 'function'\n    });\n    return Object.freeze(Object.assign({}, curve));\n  }\n  function montgomery(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const {\n      P,\n      type,\n      adjustScalarBytes,\n      powPminus2,\n      randomBytes: rand\n    } = CURVE;\n    const is25519 = type === 'x25519';\n    if (!is25519 && type !== 'x448') throw new Error('invalid type');\n    const randomBytes_ = rand || _utils.randomBytes;\n    const montgomeryBits = is25519 ? 255 : 448;\n    const fieldLen = is25519 ? 32 : 56;\n    const Gu = is25519 ? BigInt(9) : BigInt(5);\n    // RFC 7748 #5:\n    // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519 and\n    // (156326 - 2) / 4 = 39081 for curve448/X448\n    // const a = is25519 ? 156326n : 486662n;\n    const a24 = is25519 ? BigInt(121665) : BigInt(39081);\n    // RFC: x25519 \"the resulting integer is of the form 2^254 plus\n    // eight times a value between 0 and 2^251 - 1 (inclusive)\"\n    // x448: \"2^447 plus four times a value between 0 and 2^445 - 1 (inclusive)\"\n    const minScalar = is25519 ? _2n ** BigInt(254) : _2n ** BigInt(447);\n    const maxAdded = is25519 ? BigInt(8) * _2n ** BigInt(251) - _1n : BigInt(4) * _2n ** BigInt(445) - _1n;\n    const maxScalar = minScalar + maxAdded + _1n; // (inclusive)\n    const modP = n => (0, _modular.mod)(n, P);\n    const GuBytes = encodeU(Gu);\n    function encodeU(u) {\n      return (0, _utils.numberToBytesLE)(modP(u), fieldLen);\n    }\n    function decodeU(u) {\n      const _u = (0, _utils.ensureBytes)('u coordinate', u, fieldLen);\n      // RFC: When receiving such an array, implementations of X25519\n      // (but not X448) MUST mask the most significant bit in the final byte.\n      if (is25519) _u[31] &= 127; // 0b0111_1111\n      // RFC: Implementations MUST accept non-canonical values and process them as\n      // if they had been reduced modulo the field prime.  The non-canonical\n      // values are 2^255 - 19 through 2^255 - 1 for X25519 and 2^448 - 2^224\n      // - 1 through 2^448 - 1 for X448.\n      return modP((0, _utils.bytesToNumberLE)(_u));\n    }\n    function decodeScalar(scalar) {\n      return (0, _utils.bytesToNumberLE)(adjustScalarBytes((0, _utils.ensureBytes)('scalar', scalar, fieldLen)));\n    }\n    function scalarMult(scalar, u) {\n      const pu = montgomeryLadder(decodeU(u), decodeScalar(scalar));\n      // Some public keys are useless, of low-order. Curve author doesn't think\n      // it needs to be validated, but we do it nonetheless.\n      // https://cr.yp.to/ecdh.html#validate\n      if (pu === _0n) throw new Error('invalid private or public key received');\n      return encodeU(pu);\n    }\n    // Computes public key from private. By doing scalar multiplication of base point.\n    function scalarMultBase(scalar) {\n      return scalarMult(scalar, GuBytes);\n    }\n    // cswap from RFC7748 \"example code\"\n    function cswap(swap, x_2, x_3) {\n      // dummy = mask(swap) AND (x_2 XOR x_3)\n      // Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n      // and x_3, computed, e.g., as mask(swap) = 0 - swap.\n      const dummy = modP(swap * (x_2 - x_3));\n      x_2 = modP(x_2 - dummy); // x_2 = x_2 XOR dummy\n      x_3 = modP(x_3 + dummy); // x_3 = x_3 XOR dummy\n      return {\n        x_2,\n        x_3\n      };\n    }\n    /**\n     * Montgomery x-only multiplication ladder.\n     * @param pointU u coordinate (x) on Montgomery Curve 25519\n     * @param scalar by which the point would be multiplied\n     * @returns new Point on Montgomery curve\n     */\n    function montgomeryLadder(u, scalar) {\n      (0, _utils.aInRange)('u', u, _0n, P);\n      (0, _utils.aInRange)('scalar', scalar, minScalar, maxScalar);\n      const k = scalar;\n      const x_1 = u;\n      let x_2 = _1n;\n      let z_2 = _0n;\n      let x_3 = u;\n      let z_3 = _1n;\n      let swap = _0n;\n      for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n        const k_t = k >> t & _1n;\n        swap ^= k_t;\n        ({\n          x_2,\n          x_3\n        } = cswap(swap, x_2, x_3));\n        ({\n          x_2: z_2,\n          x_3: z_3\n        } = cswap(swap, z_2, z_3));\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = modP(A * A);\n        const B = x_2 - z_2;\n        const BB = modP(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = modP(D * A);\n        const CB = modP(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = modP(dacb * dacb);\n        z_3 = modP(x_1 * modP(da_cb * da_cb));\n        x_2 = modP(AA * BB);\n        z_2 = modP(E * (AA + modP(a24 * E)));\n      }\n      ({\n        x_2,\n        x_3\n      } = cswap(swap, x_2, x_3));\n      ({\n        x_2: z_2,\n        x_3: z_3\n      } = cswap(swap, z_2, z_3));\n      const z2 = powPminus2(z_2); // `Fp.pow(x, P - _2n)` is much slower equivalent\n      return modP(x_2 * z2); // Return x_2 * (z_2^(p - 2))\n    }\n    const lengths = {\n      secretKey: fieldLen,\n      publicKey: fieldLen,\n      seed: fieldLen\n    };\n    const randomSecretKey = (seed = randomBytes_(fieldLen)) => {\n      (0, _utils.abytes)(seed, lengths.seed);\n      return seed;\n    };\n    function keygen(seed) {\n      const secretKey = randomSecretKey(seed);\n      return {\n        secretKey,\n        publicKey: scalarMultBase(secretKey)\n      };\n    }\n    const utils = {\n      randomSecretKey,\n      randomPrivateKey: randomSecretKey\n    };\n    return {\n      keygen,\n      getSharedSecret: (secretKey, publicKey) => scalarMult(secretKey, publicKey),\n      getPublicKey: secretKey => scalarMultBase(secretKey),\n      scalarMult,\n      scalarMultBase,\n      utils,\n      GuBytes: GuBytes.slice(),\n      lengths\n    };\n  }\n});","lineCount":182,"map":[[6,2,8,0],[6,6,8,0,"_utils"],[6,12,8,0],[6,15,8,0,"require"],[6,22,8,0],[6,23,8,0,"_dependencyMap"],[6,37,8,0],[7,2,9,0],[7,6,9,0,"_modular"],[7,14,9,0],[7,17,9,0,"require"],[7,24,9,0],[7,25,9,0,"_dependencyMap"],[7,39,9,0],[8,2,1,0],[9,0,2,0],[10,0,3,0],[11,0,4,0],[12,0,5,0],[13,0,6,0],[14,2,7,0],[16,2,10,0],[16,8,10,6,"_0n"],[16,11,10,9],[16,14,10,12,"BigInt"],[16,20,10,18],[16,21,10,19],[16,22,10,20],[16,23,10,21],[17,2,11,0],[17,8,11,6,"_1n"],[17,11,11,9],[17,14,11,12,"BigInt"],[17,20,11,18],[17,21,11,19],[17,22,11,20],[17,23,11,21],[18,2,12,0],[18,8,12,6,"_2n"],[18,11,12,9],[18,14,12,12,"BigInt"],[18,20,12,18],[18,21,12,19],[18,22,12,20],[18,23,12,21],[19,2,13,0],[19,11,13,9,"validateOpts"],[19,23,13,21,"validateOpts"],[19,24,13,22,"curve"],[19,29,13,27],[19,31,13,29],[20,4,14,4],[20,8,14,4,"_validateObject"],[20,30,14,19],[20,32,14,20,"curve"],[20,37,14,25],[20,39,14,27],[21,6,15,8,"adjustScalarBytes"],[21,23,15,25],[21,25,15,27],[21,35,15,37],[22,6,16,8,"powPminus2"],[22,16,16,18],[22,18,16,20],[23,4,17,4],[23,5,17,5],[23,6,17,6],[24,4,18,4],[24,11,18,11,"Object"],[24,17,18,17],[24,18,18,18,"freeze"],[24,24,18,24],[24,25,18,24,"Object"],[24,31,18,24],[24,32,18,24,"assign"],[24,38,18,24],[24,43,18,30,"curve"],[24,48,18,35],[24,49,18,37],[24,50,18,38],[25,2,19,0],[26,2,20,7],[26,11,20,16,"montgomery"],[26,21,20,26,"montgomery"],[26,22,20,27,"curveDef"],[26,30,20,35],[26,32,20,37],[27,4,21,4],[27,10,21,10,"CURVE"],[27,15,21,15],[27,18,21,18,"validateOpts"],[27,30,21,30],[27,31,21,31,"curveDef"],[27,39,21,39],[27,40,21,40],[28,4,22,4],[28,10,22,10],[29,6,22,12,"P"],[29,7,22,13],[30,6,22,15,"type"],[30,10,22,19],[31,6,22,21,"adjustScalarBytes"],[31,23,22,38],[32,6,22,40,"powPminus2"],[32,16,22,50],[33,6,22,52,"randomBytes"],[33,17,22,63],[33,19,22,65,"rand"],[34,4,22,70],[34,5,22,71],[34,8,22,74,"CURVE"],[34,13,22,79],[35,4,23,4],[35,10,23,10,"is25519"],[35,17,23,17],[35,20,23,20,"type"],[35,24,23,24],[35,29,23,29],[35,37,23,37],[36,4,24,4],[36,8,24,8],[36,9,24,9,"is25519"],[36,16,24,16],[36,20,24,20,"type"],[36,24,24,24],[36,29,24,29],[36,35,24,35],[36,37,25,8],[36,43,25,14],[36,47,25,18,"Error"],[36,52,25,23],[36,53,25,24],[36,67,25,38],[36,68,25,39],[37,4,26,4],[37,10,26,10,"randomBytes_"],[37,22,26,22],[37,25,26,25,"rand"],[37,29,26,29],[37,33,26,33,"randomBytes"],[37,51,26,44],[38,4,27,4],[38,10,27,10,"montgomeryBits"],[38,24,27,24],[38,27,27,27,"is25519"],[38,34,27,34],[38,37,27,37],[38,40,27,40],[38,43,27,43],[38,46,27,46],[39,4,28,4],[39,10,28,10,"fieldLen"],[39,18,28,18],[39,21,28,21,"is25519"],[39,28,28,28],[39,31,28,31],[39,33,28,33],[39,36,28,36],[39,38,28,38],[40,4,29,4],[40,10,29,10,"Gu"],[40,12,29,12],[40,15,29,15,"is25519"],[40,22,29,22],[40,25,29,25,"BigInt"],[40,31,29,31],[40,32,29,32],[40,33,29,33],[40,34,29,34],[40,37,29,37,"BigInt"],[40,43,29,43],[40,44,29,44],[40,45,29,45],[40,46,29,46],[41,4,30,4],[42,4,31,4],[43,4,32,4],[44,4,33,4],[45,4,34,4],[45,10,34,10,"a24"],[45,13,34,13],[45,16,34,16,"is25519"],[45,23,34,23],[45,26,34,26,"BigInt"],[45,32,34,32],[45,33,34,33],[45,39,34,39],[45,40,34,40],[45,43,34,43,"BigInt"],[45,49,34,49],[45,50,34,50],[45,55,34,55],[45,56,34,56],[46,4,35,4],[47,4,36,4],[48,4,37,4],[49,4,38,4],[49,10,38,10,"minScalar"],[49,19,38,19],[49,22,38,22,"is25519"],[49,29,38,29],[49,32,38,32,"_2n"],[49,35,38,35],[49,39,38,39,"BigInt"],[49,45,38,45],[49,46,38,46],[49,49,38,49],[49,50,38,50],[49,53,38,53,"_2n"],[49,56,38,56],[49,60,38,60,"BigInt"],[49,66,38,66],[49,67,38,67],[49,70,38,70],[49,71,38,71],[50,4,39,4],[50,10,39,10,"maxAdded"],[50,18,39,18],[50,21,39,21,"is25519"],[50,28,39,28],[50,31,40,10,"BigInt"],[50,37,40,16],[50,38,40,17],[50,39,40,18],[50,40,40,19],[50,43,40,22,"_2n"],[50,46,40,25],[50,50,40,29,"BigInt"],[50,56,40,35],[50,57,40,36],[50,60,40,39],[50,61,40,40],[50,64,40,43,"_1n"],[50,67,40,46],[50,70,41,10,"BigInt"],[50,76,41,16],[50,77,41,17],[50,78,41,18],[50,79,41,19],[50,82,41,22,"_2n"],[50,85,41,25],[50,89,41,29,"BigInt"],[50,95,41,35],[50,96,41,36],[50,99,41,39],[50,100,41,40],[50,103,41,43,"_1n"],[50,106,41,46],[51,4,42,4],[51,10,42,10,"maxScalar"],[51,19,42,19],[51,22,42,22,"minScalar"],[51,31,42,31],[51,34,42,34,"maxAdded"],[51,42,42,42],[51,45,42,45,"_1n"],[51,48,42,48],[51,49,42,49],[51,50,42,50],[52,4,43,4],[52,10,43,10,"modP"],[52,14,43,14],[52,17,43,18,"n"],[52,18,43,19],[52,22,43,24],[52,26,43,24,"mod"],[52,38,43,27],[52,40,43,28,"n"],[52,41,43,29],[52,43,43,31,"P"],[52,44,43,32],[52,45,43,33],[53,4,44,4],[53,10,44,10,"GuBytes"],[53,17,44,17],[53,20,44,20,"encodeU"],[53,27,44,27],[53,28,44,28,"Gu"],[53,30,44,30],[53,31,44,31],[54,4,45,4],[54,13,45,13,"encodeU"],[54,20,45,20,"encodeU"],[54,21,45,21,"u"],[54,22,45,22],[54,24,45,24],[55,6,46,8],[55,13,46,15],[55,17,46,15,"numberToBytesLE"],[55,39,46,30],[55,41,46,31,"modP"],[55,45,46,35],[55,46,46,36,"u"],[55,47,46,37],[55,48,46,38],[55,50,46,40,"fieldLen"],[55,58,46,48],[55,59,46,49],[56,4,47,4],[57,4,48,4],[57,13,48,13,"decodeU"],[57,20,48,20,"decodeU"],[57,21,48,21,"u"],[57,22,48,22],[57,24,48,24],[58,6,49,8],[58,12,49,14,"_u"],[58,14,49,16],[58,17,49,19],[58,21,49,19,"ensureBytes"],[58,39,49,30],[58,41,49,31],[58,55,49,45],[58,57,49,47,"u"],[58,58,49,48],[58,60,49,50,"fieldLen"],[58,68,49,58],[58,69,49,59],[59,6,50,8],[60,6,51,8],[61,6,52,8],[61,10,52,12,"is25519"],[61,17,52,19],[61,19,53,12,"_u"],[61,21,53,14],[61,22,53,15],[61,24,53,17],[61,25,53,18],[61,29,53,22],[61,32,53,25],[61,33,53,26],[61,34,53,27],[62,6,54,8],[63,6,55,8],[64,6,56,8],[65,6,57,8],[66,6,58,8],[66,13,58,15,"modP"],[66,17,58,19],[66,18,58,20],[66,22,58,20,"bytesToNumberLE"],[66,44,58,35],[66,46,58,36,"_u"],[66,48,58,38],[66,49,58,39],[66,50,58,40],[67,4,59,4],[68,4,60,4],[68,13,60,13,"decodeScalar"],[68,25,60,25,"decodeScalar"],[68,26,60,26,"scalar"],[68,32,60,32],[68,34,60,34],[69,6,61,8],[69,13,61,15],[69,17,61,15,"bytesToNumberLE"],[69,39,61,30],[69,41,61,31,"adjustScalarBytes"],[69,58,61,48],[69,59,61,49],[69,63,61,49,"ensureBytes"],[69,81,61,60],[69,83,61,61],[69,91,61,69],[69,93,61,71,"scalar"],[69,99,61,77],[69,101,61,79,"fieldLen"],[69,109,61,87],[69,110,61,88],[69,111,61,89],[69,112,61,90],[70,4,62,4],[71,4,63,4],[71,13,63,13,"scalarMult"],[71,23,63,23,"scalarMult"],[71,24,63,24,"scalar"],[71,30,63,30],[71,32,63,32,"u"],[71,33,63,33],[71,35,63,35],[72,6,64,8],[72,12,64,14,"pu"],[72,14,64,16],[72,17,64,19,"montgomeryLadder"],[72,33,64,35],[72,34,64,36,"decodeU"],[72,41,64,43],[72,42,64,44,"u"],[72,43,64,45],[72,44,64,46],[72,46,64,48,"decodeScalar"],[72,58,64,60],[72,59,64,61,"scalar"],[72,65,64,67],[72,66,64,68],[72,67,64,69],[73,6,65,8],[74,6,66,8],[75,6,67,8],[76,6,68,8],[76,10,68,12,"pu"],[76,12,68,14],[76,17,68,19,"_0n"],[76,20,68,22],[76,22,69,12],[76,28,69,18],[76,32,69,22,"Error"],[76,37,69,27],[76,38,69,28],[76,78,69,68],[76,79,69,69],[77,6,70,8],[77,13,70,15,"encodeU"],[77,20,70,22],[77,21,70,23,"pu"],[77,23,70,25],[77,24,70,26],[78,4,71,4],[79,4,72,4],[80,4,73,4],[80,13,73,13,"scalarMultBase"],[80,27,73,27,"scalarMultBase"],[80,28,73,28,"scalar"],[80,34,73,34],[80,36,73,36],[81,6,74,8],[81,13,74,15,"scalarMult"],[81,23,74,25],[81,24,74,26,"scalar"],[81,30,74,32],[81,32,74,34,"GuBytes"],[81,39,74,41],[81,40,74,42],[82,4,75,4],[83,4,76,4],[84,4,77,4],[84,13,77,13,"cswap"],[84,18,77,18,"cswap"],[84,19,77,19,"swap"],[84,23,77,23],[84,25,77,25,"x_2"],[84,28,77,28],[84,30,77,30,"x_3"],[84,33,77,33],[84,35,77,35],[85,6,78,8],[86,6,79,8],[87,6,80,8],[88,6,81,8],[88,12,81,14,"dummy"],[88,17,81,19],[88,20,81,22,"modP"],[88,24,81,26],[88,25,81,27,"swap"],[88,29,81,31],[88,33,81,35,"x_2"],[88,36,81,38],[88,39,81,41,"x_3"],[88,42,81,44],[88,43,81,45],[88,44,81,46],[89,6,82,8,"x_2"],[89,9,82,11],[89,12,82,14,"modP"],[89,16,82,18],[89,17,82,19,"x_2"],[89,20,82,22],[89,23,82,25,"dummy"],[89,28,82,30],[89,29,82,31],[89,30,82,32],[89,31,82,33],[90,6,83,8,"x_3"],[90,9,83,11],[90,12,83,14,"modP"],[90,16,83,18],[90,17,83,19,"x_3"],[90,20,83,22],[90,23,83,25,"dummy"],[90,28,83,30],[90,29,83,31],[90,30,83,32],[90,31,83,33],[91,6,84,8],[91,13,84,15],[92,8,84,17,"x_2"],[92,11,84,20],[93,8,84,22,"x_3"],[94,6,84,26],[94,7,84,27],[95,4,85,4],[96,4,86,4],[97,0,87,0],[98,0,88,0],[99,0,89,0],[100,0,90,0],[101,0,91,0],[102,4,92,4],[102,13,92,13,"montgomeryLadder"],[102,29,92,29,"montgomeryLadder"],[102,30,92,30,"u"],[102,31,92,31],[102,33,92,33,"scalar"],[102,39,92,39],[102,41,92,41],[103,6,93,8],[103,10,93,8,"aInRange"],[103,25,93,16],[103,27,93,17],[103,30,93,20],[103,32,93,22,"u"],[103,33,93,23],[103,35,93,25,"_0n"],[103,38,93,28],[103,40,93,30,"P"],[103,41,93,31],[103,42,93,32],[104,6,94,8],[104,10,94,8,"aInRange"],[104,25,94,16],[104,27,94,17],[104,35,94,25],[104,37,94,27,"scalar"],[104,43,94,33],[104,45,94,35,"minScalar"],[104,54,94,44],[104,56,94,46,"maxScalar"],[104,65,94,55],[104,66,94,56],[105,6,95,8],[105,12,95,14,"k"],[105,13,95,15],[105,16,95,18,"scalar"],[105,22,95,24],[106,6,96,8],[106,12,96,14,"x_1"],[106,15,96,17],[106,18,96,20,"u"],[106,19,96,21],[107,6,97,8],[107,10,97,12,"x_2"],[107,13,97,15],[107,16,97,18,"_1n"],[107,19,97,21],[108,6,98,8],[108,10,98,12,"z_2"],[108,13,98,15],[108,16,98,18,"_0n"],[108,19,98,21],[109,6,99,8],[109,10,99,12,"x_3"],[109,13,99,15],[109,16,99,18,"u"],[109,17,99,19],[110,6,100,8],[110,10,100,12,"z_3"],[110,13,100,15],[110,16,100,18,"_1n"],[110,19,100,21],[111,6,101,8],[111,10,101,12,"swap"],[111,14,101,16],[111,17,101,19,"_0n"],[111,20,101,22],[112,6,102,8],[112,11,102,13],[112,15,102,17,"t"],[112,16,102,18],[112,19,102,21,"BigInt"],[112,25,102,27],[112,26,102,28,"montgomeryBits"],[112,40,102,42],[112,43,102,45],[112,44,102,46],[112,45,102,47],[112,47,102,49,"t"],[112,48,102,50],[112,52,102,54,"_0n"],[112,55,102,57],[112,57,102,59,"t"],[112,58,102,60],[112,60,102,62],[112,62,102,64],[113,8,103,12],[113,14,103,18,"k_t"],[113,17,103,21],[113,20,103,25,"k"],[113,21,103,26],[113,25,103,30,"t"],[113,26,103,31],[113,29,103,35,"_1n"],[113,32,103,38],[114,8,104,12,"swap"],[114,12,104,16],[114,16,104,20,"k_t"],[114,19,104,23],[115,8,105,12],[115,9,105,13],[116,10,105,15,"x_2"],[116,13,105,18],[117,10,105,20,"x_3"],[118,8,105,24],[118,9,105,25],[118,12,105,28,"cswap"],[118,17,105,33],[118,18,105,34,"swap"],[118,22,105,38],[118,24,105,40,"x_2"],[118,27,105,43],[118,29,105,45,"x_3"],[118,32,105,48],[118,33,105,49],[119,8,106,12],[119,9,106,13],[120,10,106,15,"x_2"],[120,13,106,18],[120,15,106,20,"z_2"],[120,18,106,23],[121,10,106,25,"x_3"],[121,13,106,28],[121,15,106,30,"z_3"],[122,8,106,34],[122,9,106,35],[122,12,106,38,"cswap"],[122,17,106,43],[122,18,106,44,"swap"],[122,22,106,48],[122,24,106,50,"z_2"],[122,27,106,53],[122,29,106,55,"z_3"],[122,32,106,58],[122,33,106,59],[123,8,107,12,"swap"],[123,12,107,16],[123,15,107,19,"k_t"],[123,18,107,22],[124,8,108,12],[124,14,108,18,"A"],[124,15,108,19],[124,18,108,22,"x_2"],[124,21,108,25],[124,24,108,28,"z_2"],[124,27,108,31],[125,8,109,12],[125,14,109,18,"AA"],[125,16,109,20],[125,19,109,23,"modP"],[125,23,109,27],[125,24,109,28,"A"],[125,25,109,29],[125,28,109,32,"A"],[125,29,109,33],[125,30,109,34],[126,8,110,12],[126,14,110,18,"B"],[126,15,110,19],[126,18,110,22,"x_2"],[126,21,110,25],[126,24,110,28,"z_2"],[126,27,110,31],[127,8,111,12],[127,14,111,18,"BB"],[127,16,111,20],[127,19,111,23,"modP"],[127,23,111,27],[127,24,111,28,"B"],[127,25,111,29],[127,28,111,32,"B"],[127,29,111,33],[127,30,111,34],[128,8,112,12],[128,14,112,18,"E"],[128,15,112,19],[128,18,112,22,"AA"],[128,20,112,24],[128,23,112,27,"BB"],[128,25,112,29],[129,8,113,12],[129,14,113,18,"C"],[129,15,113,19],[129,18,113,22,"x_3"],[129,21,113,25],[129,24,113,28,"z_3"],[129,27,113,31],[130,8,114,12],[130,14,114,18,"D"],[130,15,114,19],[130,18,114,22,"x_3"],[130,21,114,25],[130,24,114,28,"z_3"],[130,27,114,31],[131,8,115,12],[131,14,115,18,"DA"],[131,16,115,20],[131,19,115,23,"modP"],[131,23,115,27],[131,24,115,28,"D"],[131,25,115,29],[131,28,115,32,"A"],[131,29,115,33],[131,30,115,34],[132,8,116,12],[132,14,116,18,"CB"],[132,16,116,20],[132,19,116,23,"modP"],[132,23,116,27],[132,24,116,28,"C"],[132,25,116,29],[132,28,116,32,"B"],[132,29,116,33],[132,30,116,34],[133,8,117,12],[133,14,117,18,"dacb"],[133,18,117,22],[133,21,117,25,"DA"],[133,23,117,27],[133,26,117,30,"CB"],[133,28,117,32],[134,8,118,12],[134,14,118,18,"da_cb"],[134,19,118,23],[134,22,118,26,"DA"],[134,24,118,28],[134,27,118,31,"CB"],[134,29,118,33],[135,8,119,12,"x_3"],[135,11,119,15],[135,14,119,18,"modP"],[135,18,119,22],[135,19,119,23,"dacb"],[135,23,119,27],[135,26,119,30,"dacb"],[135,30,119,34],[135,31,119,35],[136,8,120,12,"z_3"],[136,11,120,15],[136,14,120,18,"modP"],[136,18,120,22],[136,19,120,23,"x_1"],[136,22,120,26],[136,25,120,29,"modP"],[136,29,120,33],[136,30,120,34,"da_cb"],[136,35,120,39],[136,38,120,42,"da_cb"],[136,43,120,47],[136,44,120,48],[136,45,120,49],[137,8,121,12,"x_2"],[137,11,121,15],[137,14,121,18,"modP"],[137,18,121,22],[137,19,121,23,"AA"],[137,21,121,25],[137,24,121,28,"BB"],[137,26,121,30],[137,27,121,31],[138,8,122,12,"z_2"],[138,11,122,15],[138,14,122,18,"modP"],[138,18,122,22],[138,19,122,23,"E"],[138,20,122,24],[138,24,122,28,"AA"],[138,26,122,30],[138,29,122,33,"modP"],[138,33,122,37],[138,34,122,38,"a24"],[138,37,122,41],[138,40,122,44,"E"],[138,41,122,45],[138,42,122,46],[138,43,122,47],[138,44,122,48],[139,6,123,8],[140,6,124,8],[140,7,124,9],[141,8,124,11,"x_2"],[141,11,124,14],[142,8,124,16,"x_3"],[143,6,124,20],[143,7,124,21],[143,10,124,24,"cswap"],[143,15,124,29],[143,16,124,30,"swap"],[143,20,124,34],[143,22,124,36,"x_2"],[143,25,124,39],[143,27,124,41,"x_3"],[143,30,124,44],[143,31,124,45],[144,6,125,8],[144,7,125,9],[145,8,125,11,"x_2"],[145,11,125,14],[145,13,125,16,"z_2"],[145,16,125,19],[146,8,125,21,"x_3"],[146,11,125,24],[146,13,125,26,"z_3"],[147,6,125,30],[147,7,125,31],[147,10,125,34,"cswap"],[147,15,125,39],[147,16,125,40,"swap"],[147,20,125,44],[147,22,125,46,"z_2"],[147,25,125,49],[147,27,125,51,"z_3"],[147,30,125,54],[147,31,125,55],[148,6,126,8],[148,12,126,14,"z2"],[148,14,126,16],[148,17,126,19,"powPminus2"],[148,27,126,29],[148,28,126,30,"z_2"],[148,31,126,33],[148,32,126,34],[148,33,126,35],[148,34,126,36],[149,6,127,8],[149,13,127,15,"modP"],[149,17,127,19],[149,18,127,20,"x_2"],[149,21,127,23],[149,24,127,26,"z2"],[149,26,127,28],[149,27,127,29],[149,28,127,30],[149,29,127,31],[150,4,128,4],[151,4,129,4],[151,10,129,10,"lengths"],[151,17,129,17],[151,20,129,20],[152,6,130,8,"secretKey"],[152,15,130,17],[152,17,130,19,"fieldLen"],[152,25,130,27],[153,6,131,8,"publicKey"],[153,15,131,17],[153,17,131,19,"fieldLen"],[153,25,131,27],[154,6,132,8,"seed"],[154,10,132,12],[154,12,132,14,"fieldLen"],[155,4,133,4],[155,5,133,5],[156,4,134,4],[156,10,134,10,"randomSecretKey"],[156,25,134,25],[156,28,134,28,"randomSecretKey"],[156,29,134,29,"seed"],[156,33,134,33],[156,36,134,36,"randomBytes_"],[156,48,134,48],[156,49,134,49,"fieldLen"],[156,57,134,57],[156,58,134,58],[156,63,134,63],[157,6,135,8],[157,10,135,8,"abytes"],[157,23,135,14],[157,25,135,15,"seed"],[157,29,135,19],[157,31,135,21,"lengths"],[157,38,135,28],[157,39,135,29,"seed"],[157,43,135,33],[157,44,135,34],[158,6,136,8],[158,13,136,15,"seed"],[158,17,136,19],[159,4,137,4],[159,5,137,5],[160,4,138,4],[160,13,138,13,"keygen"],[160,19,138,19,"keygen"],[160,20,138,20,"seed"],[160,24,138,24],[160,26,138,26],[161,6,139,8],[161,12,139,14,"secretKey"],[161,21,139,23],[161,24,139,26,"randomSecretKey"],[161,39,139,41],[161,40,139,42,"seed"],[161,44,139,46],[161,45,139,47],[162,6,140,8],[162,13,140,15],[163,8,140,17,"secretKey"],[163,17,140,26],[164,8,140,28,"publicKey"],[164,17,140,37],[164,19,140,39,"scalarMultBase"],[164,33,140,53],[164,34,140,54,"secretKey"],[164,43,140,63],[165,6,140,65],[165,7,140,66],[166,4,141,4],[167,4,142,4],[167,10,142,10,"utils"],[167,15,142,15],[167,18,142,18],[168,6,143,8,"randomSecretKey"],[168,21,143,23],[169,6,144,8,"randomPrivateKey"],[169,22,144,24],[169,24,144,26,"randomSecretKey"],[170,4,145,4],[170,5,145,5],[171,4,146,4],[171,11,146,11],[172,6,147,8,"keygen"],[172,12,147,14],[173,6,148,8,"getSharedSecret"],[173,21,148,23],[173,23,148,25,"getSharedSecret"],[173,24,148,26,"secretKey"],[173,33,148,35],[173,35,148,37,"publicKey"],[173,44,148,46],[173,49,148,51,"scalarMult"],[173,59,148,61],[173,60,148,62,"secretKey"],[173,69,148,71],[173,71,148,73,"publicKey"],[173,80,148,82],[173,81,148,83],[174,6,149,8,"getPublicKey"],[174,18,149,20],[174,20,149,23,"secretKey"],[174,29,149,32],[174,33,149,37,"scalarMultBase"],[174,47,149,51],[174,48,149,52,"secretKey"],[174,57,149,61],[174,58,149,62],[175,6,150,8,"scalarMult"],[175,16,150,18],[176,6,151,8,"scalarMultBase"],[176,20,151,22],[177,6,152,8,"utils"],[177,11,152,13],[178,6,153,8,"GuBytes"],[178,13,153,15],[178,15,153,17,"GuBytes"],[178,22,153,24],[178,23,153,25,"slice"],[178,28,153,30],[178,29,153,31],[178,30,153,32],[179,6,154,8,"lengths"],[180,4,155,4],[180,5,155,5],[181,2,156,0],[182,0,156,1],[182,3]],"functionMap":{"names":["<global>","validateOpts","montgomery","modP","encodeU","decodeU","decodeScalar","scalarMult","scalarMultBase","cswap","montgomeryLadder","randomSecretKey","keygen","getSharedSecret","getPublicKey"],"mappings":"AAA;ACY;CDM;OEC;iBCuB,gBD;IEE;KFE;IGC;KHW;IIC;KJE;IKC;KLQ;IME;KNE;IOE;KPQ;IQO;KRoC;4BSM;KTG;IUC;KVG;yBWO,0DX;sBYC,wCZ;CFO"}},"type":"js/module"}]}