{"dependencies":[{"name":"../utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":115,"index":115}}],"key":"dGswK136diHRCgUa8xpQUn/UMbc=","exportNames":["*"]}},{"name":"./modular.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":116},"end":{"line":2,"column":50,"index":166}}],"key":"9k+FDNYf3zXm2KDVSy5nBT9psY4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports._DST_scalar = void 0;\n  exports.createHasher = createHasher;\n  exports.expand_message_xmd = expand_message_xmd;\n  exports.expand_message_xof = expand_message_xof;\n  exports.hash_to_field = hash_to_field;\n  exports.isogenyMap = isogenyMap;\n  var _utils = require(_dependencyMap[0], \"../utils.js\");\n  var _modular = require(_dependencyMap[1], \"./modular.js\");\n  // Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\n  const os2ip = _utils.bytesToNumberBE;\n  // Integer to Octet Stream (numberToBytesBE)\n  function i2osp(value, length) {\n    anum(value);\n    anum(length);\n    if (value < 0 || value >= 1 << 8 * length) throw new Error('invalid I2OSP input: ' + value);\n    const res = Array.from({\n      length\n    }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n      res[i] = value & 0xff;\n      value >>>= 8;\n    }\n    return new Uint8Array(res);\n  }\n  function strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n      arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n  }\n  function anum(item) {\n    if (!Number.isSafeInteger(item)) throw new Error('number expected');\n  }\n  function normDST(DST) {\n    if (!(0, _utils.isBytes)(DST) && typeof DST !== 'string') throw new Error('DST must be Uint8Array or string');\n    return typeof DST === 'string' ? (0, _utils.utf8ToBytes)(DST) : DST;\n  }\n  /**\n   * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n   * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n   */\n  function expand_message_xmd(msg, DST, lenInBytes, H) {\n    (0, _utils.abytes)(msg);\n    anum(lenInBytes);\n    DST = normDST(DST);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255) DST = H((0, _utils.concatBytes)((0, _utils.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));\n    const {\n      outputLen: b_in_bytes,\n      blockLen: r_in_bytes\n    } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (lenInBytes > 65535 || ell > 255) throw new Error('expand_message_xmd: invalid lenInBytes');\n    const DST_prime = (0, _utils.concatBytes)(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H((0, _utils.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H((0, _utils.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n      const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n      b[i] = H((0, _utils.concatBytes)(...args));\n    }\n    const pseudo_random_bytes = (0, _utils.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n  }\n  /**\n   * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n   * 1. The collision resistance of H MUST be at least k bits.\n   * 2. H MUST be an XOF that has been proved indifferentiable from\n   *    a random oracle under a reasonable cryptographic assumption.\n   * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n   */\n  function expand_message_xof(msg, DST, lenInBytes, k, H) {\n    (0, _utils.abytes)(msg);\n    anum(lenInBytes);\n    DST = normDST(DST);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n      const dkLen = Math.ceil(2 * k / 8);\n      DST = H.create({\n        dkLen\n      }).update((0, _utils.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255) throw new Error('expand_message_xof: invalid lenInBytes');\n    return H.create({\n      dkLen: lenInBytes\n    }).update(msg).update(i2osp(lenInBytes, 2))\n    // 2. DST_prime = DST || I2OSP(len(DST), 1)\n    .update(DST).update(i2osp(DST.length, 1)).digest();\n  }\n  /**\n   * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n   * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n   * @param msg a byte string containing the message to hash\n   * @param count the number of elements of F to output\n   * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n   * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n   */\n  function hash_to_field(msg, count, options) {\n    (0, _utils._validateObject)(options, {\n      p: 'bigint',\n      m: 'number',\n      k: 'number',\n      hash: 'function'\n    });\n    const {\n      p,\n      k,\n      m,\n      hash,\n      expand,\n      DST\n    } = options;\n    if (!(0, _utils.isHash)(options.hash)) throw new Error('expected valid hash');\n    (0, _utils.abytes)(msg);\n    anum(count);\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n      prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    } else if (expand === 'xof') {\n      prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    } else if (expand === '_internal_pass') {\n      // for internal tests only\n      prb = msg;\n    } else {\n      throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n      const e = new Array(m);\n      for (let j = 0; j < m; j++) {\n        const elm_offset = L * (j + i * m);\n        const tv = prb.subarray(elm_offset, elm_offset + L);\n        e[j] = (0, _modular.mod)(os2ip(tv), p);\n      }\n      u[i] = e;\n    }\n    return u;\n  }\n  function isogenyMap(field, map) {\n    // Make same order as in spec\n    const coeff = map.map(i => Array.from(i).reverse());\n    return (x, y) => {\n      const [xn, xd, yn, yd] = coeff.map(val => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n      // 6.6.3\n      // Exceptional cases of iso_map are inputs that cause the denominator of\n      // either rational function to evaluate to zero; such cases MUST return\n      // the identity point on E.\n      const [xd_inv, yd_inv] = (0, _modular.FpInvertBatch)(field, [xd, yd], true);\n      x = field.mul(xn, xd_inv); // xNum / xDen\n      y = field.mul(y, field.mul(yn, yd_inv)); // y * (yNum / yDev)\n      return {\n        x,\n        y\n      };\n    };\n  }\n  const _DST_scalar = exports._DST_scalar = (0, _utils.utf8ToBytes)('HashToScalar-');\n  /** Creates hash-to-curve methods from EC Point and mapToCurve function. See {@link H2CHasher}. */\n  function createHasher(Point, mapToCurve, defaults) {\n    if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n    function map(num) {\n      return Point.fromAffine(mapToCurve(num));\n    }\n    function clear(initial) {\n      const P = initial.clearCofactor();\n      if (P.equals(Point.ZERO)) return Point.ZERO; // zero will throw in assert\n      P.assertValidity();\n      return P;\n    }\n    return {\n      defaults,\n      hashToCurve(msg, options) {\n        const opts = Object.assign({}, defaults, options);\n        const u = hash_to_field(msg, 2, opts);\n        const u0 = map(u[0]);\n        const u1 = map(u[1]);\n        return clear(u0.add(u1));\n      },\n      encodeToCurve(msg, options) {\n        const optsDst = defaults.encodeDST ? {\n          DST: defaults.encodeDST\n        } : {};\n        const opts = Object.assign({}, defaults, optsDst, options);\n        const u = hash_to_field(msg, 1, opts);\n        const u0 = map(u[0]);\n        return clear(u0);\n      },\n      /** See {@link H2CHasher} */\n      mapToCurve(scalars) {\n        if (!Array.isArray(scalars)) throw new Error('expected array of bigints');\n        for (const i of scalars) if (typeof i !== 'bigint') throw new Error('expected array of bigints');\n        return clear(map(scalars));\n      },\n      // hash_to_scalar can produce 0: https://www.rfc-editor.org/errata/eid8393\n      // RFC 9380, draft-irtf-cfrg-bbs-signatures-08\n      hashToScalar(msg, options) {\n        // @ts-ignore\n        const N = Point.Fn.ORDER;\n        const opts = Object.assign({}, defaults, {\n          p: N,\n          m: 1,\n          DST: _DST_scalar\n        }, options);\n        return hash_to_field(msg, 1, opts)[0][0];\n      }\n    };\n  }\n});","lineCount":219,"map":[[11,2,1,0],[11,6,1,0,"_utils"],[11,12,1,0],[11,15,1,0,"require"],[11,22,1,0],[11,23,1,0,"_dependencyMap"],[11,37,1,0],[12,2,2,0],[12,6,2,0,"_modular"],[12,14,2,0],[12,17,2,0,"require"],[12,24,2,0],[12,25,2,0,"_dependencyMap"],[12,39,2,0],[13,2,3,0],[14,2,4,0],[14,8,4,6,"os2ip"],[14,13,4,11],[14,16,4,14,"bytesToNumberBE"],[14,38,4,29],[15,2,5,0],[16,2,6,0],[16,11,6,9,"i2osp"],[16,16,6,14,"i2osp"],[16,17,6,15,"value"],[16,22,6,20],[16,24,6,22,"length"],[16,30,6,28],[16,32,6,30],[17,4,7,4,"anum"],[17,8,7,8],[17,9,7,9,"value"],[17,14,7,14],[17,15,7,15],[18,4,8,4,"anum"],[18,8,8,8],[18,9,8,9,"length"],[18,15,8,15],[18,16,8,16],[19,4,9,4],[19,8,9,8,"value"],[19,13,9,13],[19,16,9,16],[19,17,9,17],[19,21,9,21,"value"],[19,26,9,26],[19,30,9,30],[19,31,9,31],[19,35,9,36],[19,36,9,37],[19,39,9,40,"length"],[19,45,9,47],[19,47,10,8],[19,53,10,14],[19,57,10,18,"Error"],[19,62,10,23],[19,63,10,24],[19,86,10,47],[19,89,10,50,"value"],[19,94,10,55],[19,95,10,56],[20,4,11,4],[20,10,11,10,"res"],[20,13,11,13],[20,16,11,16,"Array"],[20,21,11,21],[20,22,11,22,"from"],[20,26,11,26],[20,27,11,27],[21,6,11,29,"length"],[22,4,11,36],[22,5,11,37],[22,6,11,38],[22,7,11,39,"fill"],[22,11,11,43],[22,12,11,44],[22,13,11,45],[22,14,11,46],[23,4,12,4],[23,9,12,9],[23,13,12,13,"i"],[23,14,12,14],[23,17,12,17,"length"],[23,23,12,23],[23,26,12,26],[23,27,12,27],[23,29,12,29,"i"],[23,30,12,30],[23,34,12,34],[23,35,12,35],[23,37,12,37,"i"],[23,38,12,38],[23,40,12,40],[23,42,12,42],[24,6,13,8,"res"],[24,9,13,11],[24,10,13,12,"i"],[24,11,13,13],[24,12,13,14],[24,15,13,17,"value"],[24,20,13,22],[24,23,13,25],[24,27,13,29],[25,6,14,8,"value"],[25,11,14,13],[25,17,14,19],[25,18,14,20],[26,4,15,4],[27,4,16,4],[27,11,16,11],[27,15,16,15,"Uint8Array"],[27,25,16,25],[27,26,16,26,"res"],[27,29,16,29],[27,30,16,30],[28,2,17,0],[29,2,18,0],[29,11,18,9,"strxor"],[29,17,18,15,"strxor"],[29,18,18,16,"a"],[29,19,18,17],[29,21,18,19,"b"],[29,22,18,20],[29,24,18,22],[30,4,19,4],[30,10,19,10,"arr"],[30,13,19,13],[30,16,19,16],[30,20,19,20,"Uint8Array"],[30,30,19,30],[30,31,19,31,"a"],[30,32,19,32],[30,33,19,33,"length"],[30,39,19,39],[30,40,19,40],[31,4,20,4],[31,9,20,9],[31,13,20,13,"i"],[31,14,20,14],[31,17,20,17],[31,18,20,18],[31,20,20,20,"i"],[31,21,20,21],[31,24,20,24,"a"],[31,25,20,25],[31,26,20,26,"length"],[31,32,20,32],[31,34,20,34,"i"],[31,35,20,35],[31,37,20,37],[31,39,20,39],[32,6,21,8,"arr"],[32,9,21,11],[32,10,21,12,"i"],[32,11,21,13],[32,12,21,14],[32,15,21,17,"a"],[32,16,21,18],[32,17,21,19,"i"],[32,18,21,20],[32,19,21,21],[32,22,21,24,"b"],[32,23,21,25],[32,24,21,26,"i"],[32,25,21,27],[32,26,21,28],[33,4,22,4],[34,4,23,4],[34,11,23,11,"arr"],[34,14,23,14],[35,2,24,0],[36,2,25,0],[36,11,25,9,"anum"],[36,15,25,13,"anum"],[36,16,25,14,"item"],[36,20,25,18],[36,22,25,20],[37,4,26,4],[37,8,26,8],[37,9,26,9,"Number"],[37,15,26,15],[37,16,26,16,"isSafeInteger"],[37,29,26,29],[37,30,26,30,"item"],[37,34,26,34],[37,35,26,35],[37,37,27,8],[37,43,27,14],[37,47,27,18,"Error"],[37,52,27,23],[37,53,27,24],[37,70,27,41],[37,71,27,42],[38,2,28,0],[39,2,29,0],[39,11,29,9,"normDST"],[39,18,29,16,"normDST"],[39,19,29,17,"DST"],[39,22,29,20],[39,24,29,22],[40,4,30,4],[40,8,30,8],[40,9,30,9],[40,13,30,9,"isBytes"],[40,27,30,16],[40,29,30,17,"DST"],[40,32,30,20],[40,33,30,21],[40,37,30,25],[40,44,30,32,"DST"],[40,47,30,35],[40,52,30,40],[40,60,30,48],[40,62,31,8],[40,68,31,14],[40,72,31,18,"Error"],[40,77,31,23],[40,78,31,24],[40,112,31,58],[40,113,31,59],[41,4,32,4],[41,11,32,11],[41,18,32,18,"DST"],[41,21,32,21],[41,26,32,26],[41,34,32,34],[41,37,32,37],[41,41,32,37,"utf8ToBytes"],[41,59,32,48],[41,61,32,49,"DST"],[41,64,32,52],[41,65,32,53],[41,68,32,56,"DST"],[41,71,32,59],[42,2,33,0],[43,2,34,0],[44,0,35,0],[45,0,36,0],[46,0,37,0],[47,2,38,7],[47,11,38,16,"expand_message_xmd"],[47,29,38,34,"expand_message_xmd"],[47,30,38,35,"msg"],[47,33,38,38],[47,35,38,40,"DST"],[47,38,38,43],[47,40,38,45,"lenInBytes"],[47,50,38,55],[47,52,38,57,"H"],[47,53,38,58],[47,55,38,60],[48,4,39,4],[48,8,39,4,"abytes"],[48,21,39,10],[48,23,39,11,"msg"],[48,26,39,14],[48,27,39,15],[49,4,40,4,"anum"],[49,8,40,8],[49,9,40,9,"lenInBytes"],[49,19,40,19],[49,20,40,20],[50,4,41,4,"DST"],[50,7,41,7],[50,10,41,10,"normDST"],[50,17,41,17],[50,18,41,18,"DST"],[50,21,41,21],[50,22,41,22],[51,4,42,4],[52,4,43,4],[52,8,43,8,"DST"],[52,11,43,11],[52,12,43,12,"length"],[52,18,43,18],[52,21,43,21],[52,24,43,24],[52,26,44,8,"DST"],[52,29,44,11],[52,32,44,14,"H"],[52,33,44,15],[52,34,44,16],[52,38,44,16,"concatBytes"],[52,56,44,27],[52,58,44,28],[52,62,44,28,"utf8ToBytes"],[52,80,44,39],[52,82,44,40],[52,101,44,59],[52,102,44,60],[52,104,44,62,"DST"],[52,107,44,65],[52,108,44,66],[52,109,44,67],[53,4,45,4],[53,10,45,10],[54,6,45,12,"outputLen"],[54,15,45,21],[54,17,45,23,"b_in_bytes"],[54,27,45,33],[55,6,45,35,"blockLen"],[55,14,45,43],[55,16,45,45,"r_in_bytes"],[56,4,45,56],[56,5,45,57],[56,8,45,60,"H"],[56,9,45,61],[57,4,46,4],[57,10,46,10,"ell"],[57,13,46,13],[57,16,46,16,"Math"],[57,20,46,20],[57,21,46,21,"ceil"],[57,25,46,25],[57,26,46,26,"lenInBytes"],[57,36,46,36],[57,39,46,39,"b_in_bytes"],[57,49,46,49],[57,50,46,50],[58,4,47,4],[58,8,47,8,"lenInBytes"],[58,18,47,18],[58,21,47,21],[58,26,47,26],[58,30,47,30,"ell"],[58,33,47,33],[58,36,47,36],[58,39,47,39],[58,41,48,8],[58,47,48,14],[58,51,48,18,"Error"],[58,56,48,23],[58,57,48,24],[58,97,48,64],[58,98,48,65],[59,4,49,4],[59,10,49,10,"DST_prime"],[59,19,49,19],[59,22,49,22],[59,26,49,22,"concatBytes"],[59,44,49,33],[59,46,49,34,"DST"],[59,49,49,37],[59,51,49,39,"i2osp"],[59,56,49,44],[59,57,49,45,"DST"],[59,60,49,48],[59,61,49,49,"length"],[59,67,49,55],[59,69,49,57],[59,70,49,58],[59,71,49,59],[59,72,49,60],[60,4,50,4],[60,10,50,10,"Z_pad"],[60,15,50,15],[60,18,50,18,"i2osp"],[60,23,50,23],[60,24,50,24],[60,25,50,25],[60,27,50,27,"r_in_bytes"],[60,37,50,37],[60,38,50,38],[61,4,51,4],[61,10,51,10,"l_i_b_str"],[61,19,51,19],[61,22,51,22,"i2osp"],[61,27,51,27],[61,28,51,28,"lenInBytes"],[61,38,51,38],[61,40,51,40],[61,41,51,41],[61,42,51,42],[61,43,51,43],[61,44,51,44],[62,4,52,4],[62,10,52,10,"b"],[62,11,52,11],[62,14,52,14],[62,18,52,18,"Array"],[62,23,52,23],[62,24,52,24,"ell"],[62,27,52,27],[62,28,52,28],[63,4,53,4],[63,10,53,10,"b_0"],[63,13,53,13],[63,16,53,16,"H"],[63,17,53,17],[63,18,53,18],[63,22,53,18,"concatBytes"],[63,40,53,29],[63,42,53,30,"Z_pad"],[63,47,53,35],[63,49,53,37,"msg"],[63,52,53,40],[63,54,53,42,"l_i_b_str"],[63,63,53,51],[63,65,53,53,"i2osp"],[63,70,53,58],[63,71,53,59],[63,72,53,60],[63,74,53,62],[63,75,53,63],[63,76,53,64],[63,78,53,66,"DST_prime"],[63,87,53,75],[63,88,53,76],[63,89,53,77],[64,4,54,4,"b"],[64,5,54,5],[64,6,54,6],[64,7,54,7],[64,8,54,8],[64,11,54,11,"H"],[64,12,54,12],[64,13,54,13],[64,17,54,13,"concatBytes"],[64,35,54,24],[64,37,54,25,"b_0"],[64,40,54,28],[64,42,54,30,"i2osp"],[64,47,54,35],[64,48,54,36],[64,49,54,37],[64,51,54,39],[64,52,54,40],[64,53,54,41],[64,55,54,43,"DST_prime"],[64,64,54,52],[64,65,54,53],[64,66,54,54],[65,4,55,4],[65,9,55,9],[65,13,55,13,"i"],[65,14,55,14],[65,17,55,17],[65,18,55,18],[65,20,55,20,"i"],[65,21,55,21],[65,25,55,25,"ell"],[65,28,55,28],[65,30,55,30,"i"],[65,31,55,31],[65,33,55,33],[65,35,55,35],[66,6,56,8],[66,12,56,14,"args"],[66,16,56,18],[66,19,56,21],[66,20,56,22,"strxor"],[66,26,56,28],[66,27,56,29,"b_0"],[66,30,56,32],[66,32,56,34,"b"],[66,33,56,35],[66,34,56,36,"i"],[66,35,56,37],[66,38,56,40],[66,39,56,41],[66,40,56,42],[66,41,56,43],[66,43,56,45,"i2osp"],[66,48,56,50],[66,49,56,51,"i"],[66,50,56,52],[66,53,56,55],[66,54,56,56],[66,56,56,58],[66,57,56,59],[66,58,56,60],[66,60,56,62,"DST_prime"],[66,69,56,71],[66,70,56,72],[67,6,57,8,"b"],[67,7,57,9],[67,8,57,10,"i"],[67,9,57,11],[67,10,57,12],[67,13,57,15,"H"],[67,14,57,16],[67,15,57,17],[67,19,57,17,"concatBytes"],[67,37,57,28],[67,39,57,29],[67,42,57,32,"args"],[67,46,57,36],[67,47,57,37],[67,48,57,38],[68,4,58,4],[69,4,59,4],[69,10,59,10,"pseudo_random_bytes"],[69,29,59,29],[69,32,59,32],[69,36,59,32,"concatBytes"],[69,54,59,43],[69,56,59,44],[69,59,59,47,"b"],[69,60,59,48],[69,61,59,49],[70,4,60,4],[70,11,60,11,"pseudo_random_bytes"],[70,30,60,30],[70,31,60,31,"slice"],[70,36,60,36],[70,37,60,37],[70,38,60,38],[70,40,60,40,"lenInBytes"],[70,50,60,50],[70,51,60,51],[71,2,61,0],[72,2,62,0],[73,0,63,0],[74,0,64,0],[75,0,65,0],[76,0,66,0],[77,0,67,0],[78,0,68,0],[79,2,69,7],[79,11,69,16,"expand_message_xof"],[79,29,69,34,"expand_message_xof"],[79,30,69,35,"msg"],[79,33,69,38],[79,35,69,40,"DST"],[79,38,69,43],[79,40,69,45,"lenInBytes"],[79,50,69,55],[79,52,69,57,"k"],[79,53,69,58],[79,55,69,60,"H"],[79,56,69,61],[79,58,69,63],[80,4,70,4],[80,8,70,4,"abytes"],[80,21,70,10],[80,23,70,11,"msg"],[80,26,70,14],[80,27,70,15],[81,4,71,4,"anum"],[81,8,71,8],[81,9,71,9,"lenInBytes"],[81,19,71,19],[81,20,71,20],[82,4,72,4,"DST"],[82,7,72,7],[82,10,72,10,"normDST"],[82,17,72,17],[82,18,72,18,"DST"],[82,21,72,21],[82,22,72,22],[83,4,73,4],[84,4,74,4],[85,4,75,4],[85,8,75,8,"DST"],[85,11,75,11],[85,12,75,12,"length"],[85,18,75,18],[85,21,75,21],[85,24,75,24],[85,26,75,26],[86,6,76,8],[86,12,76,14,"dkLen"],[86,17,76,19],[86,20,76,22,"Math"],[86,24,76,26],[86,25,76,27,"ceil"],[86,29,76,31],[86,30,76,33],[86,31,76,34],[86,34,76,37,"k"],[86,35,76,38],[86,38,76,42],[86,39,76,43],[86,40,76,44],[87,6,77,8,"DST"],[87,9,77,11],[87,12,77,14,"H"],[87,13,77,15],[87,14,77,16,"create"],[87,20,77,22],[87,21,77,23],[88,8,77,25,"dkLen"],[89,6,77,31],[89,7,77,32],[89,8,77,33],[89,9,77,34,"update"],[89,15,77,40],[89,16,77,41],[89,20,77,41,"utf8ToBytes"],[89,38,77,52],[89,40,77,53],[89,59,77,72],[89,60,77,73],[89,61,77,74],[89,62,77,75,"update"],[89,68,77,81],[89,69,77,82,"DST"],[89,72,77,85],[89,73,77,86],[89,74,77,87,"digest"],[89,80,77,93],[89,81,77,94],[89,82,77,95],[90,4,78,4],[91,4,79,4],[91,8,79,8,"lenInBytes"],[91,18,79,18],[91,21,79,21],[91,26,79,26],[91,30,79,30,"DST"],[91,33,79,33],[91,34,79,34,"length"],[91,40,79,40],[91,43,79,43],[91,46,79,46],[91,48,80,8],[91,54,80,14],[91,58,80,18,"Error"],[91,63,80,23],[91,64,80,24],[91,104,80,64],[91,105,80,65],[92,4,81,4],[92,11,81,12,"H"],[92,12,81,13],[92,13,81,14,"create"],[92,19,81,20],[92,20,81,21],[93,6,81,23,"dkLen"],[93,11,81,28],[93,13,81,30,"lenInBytes"],[94,4,81,41],[94,5,81,42],[94,6,81,43],[94,7,82,9,"update"],[94,13,82,15],[94,14,82,16,"msg"],[94,17,82,19],[94,18,82,20],[94,19,83,9,"update"],[94,25,83,15],[94,26,83,16,"i2osp"],[94,31,83,21],[94,32,83,22,"lenInBytes"],[94,42,83,32],[94,44,83,34],[94,45,83,35],[94,46,83,36],[95,4,84,8],[96,4,84,8],[96,5,85,9,"update"],[96,11,85,15],[96,12,85,16,"DST"],[96,15,85,19],[96,16,85,20],[96,17,86,9,"update"],[96,23,86,15],[96,24,86,16,"i2osp"],[96,29,86,21],[96,30,86,22,"DST"],[96,33,86,25],[96,34,86,26,"length"],[96,40,86,32],[96,42,86,34],[96,43,86,35],[96,44,86,36],[96,45,86,37],[96,46,87,9,"digest"],[96,52,87,15],[96,53,87,16],[96,54,87,17],[97,2,88,0],[98,2,89,0],[99,0,90,0],[100,0,91,0],[101,0,92,0],[102,0,93,0],[103,0,94,0],[104,0,95,0],[105,0,96,0],[106,2,97,7],[106,11,97,16,"hash_to_field"],[106,24,97,29,"hash_to_field"],[106,25,97,30,"msg"],[106,28,97,33],[106,30,97,35,"count"],[106,35,97,40],[106,37,97,42,"options"],[106,44,97,49],[106,46,97,51],[107,4,98,4],[107,8,98,4,"_validateObject"],[107,30,98,19],[107,32,98,20,"options"],[107,39,98,27],[107,41,98,29],[108,6,99,8,"p"],[108,7,99,9],[108,9,99,11],[108,17,99,19],[109,6,100,8,"m"],[109,7,100,9],[109,9,100,11],[109,17,100,19],[110,6,101,8,"k"],[110,7,101,9],[110,9,101,11],[110,17,101,19],[111,6,102,8,"hash"],[111,10,102,12],[111,12,102,14],[112,4,103,4],[112,5,103,5],[112,6,103,6],[113,4,104,4],[113,10,104,10],[114,6,104,12,"p"],[114,7,104,13],[115,6,104,15,"k"],[115,7,104,16],[116,6,104,18,"m"],[116,7,104,19],[117,6,104,21,"hash"],[117,10,104,25],[118,6,104,27,"expand"],[118,12,104,33],[119,6,104,35,"DST"],[120,4,104,39],[120,5,104,40],[120,8,104,43,"options"],[120,15,104,50],[121,4,105,4],[121,8,105,8],[121,9,105,9],[121,13,105,9,"isHash"],[121,26,105,15],[121,28,105,16,"options"],[121,35,105,23],[121,36,105,24,"hash"],[121,40,105,28],[121,41,105,29],[121,43,106,8],[121,49,106,14],[121,53,106,18,"Error"],[121,58,106,23],[121,59,106,24],[121,80,106,45],[121,81,106,46],[122,4,107,4],[122,8,107,4,"abytes"],[122,21,107,10],[122,23,107,11,"msg"],[122,26,107,14],[122,27,107,15],[123,4,108,4,"anum"],[123,8,108,8],[123,9,108,9,"count"],[123,14,108,14],[123,15,108,15],[124,4,109,4],[124,10,109,10,"log2p"],[124,15,109,15],[124,18,109,18,"p"],[124,19,109,19],[124,20,109,20,"toString"],[124,28,109,28],[124,29,109,29],[124,30,109,30],[124,31,109,31],[124,32,109,32,"length"],[124,38,109,38],[125,4,110,4],[125,10,110,10,"L"],[125,11,110,11],[125,14,110,14,"Math"],[125,18,110,18],[125,19,110,19,"ceil"],[125,23,110,23],[125,24,110,24],[125,25,110,25,"log2p"],[125,30,110,30],[125,33,110,33,"k"],[125,34,110,34],[125,38,110,38],[125,39,110,39],[125,40,110,40],[125,41,110,41],[125,42,110,42],[126,4,111,4],[126,10,111,10,"len_in_bytes"],[126,22,111,22],[126,25,111,25,"count"],[126,30,111,30],[126,33,111,33,"m"],[126,34,111,34],[126,37,111,37,"L"],[126,38,111,38],[127,4,112,4],[127,8,112,8,"prb"],[127,11,112,11],[127,12,112,12],[127,13,112,13],[128,4,113,4],[128,8,113,8,"expand"],[128,14,113,14],[128,19,113,19],[128,24,113,24],[128,26,113,26],[129,6,114,8,"prb"],[129,9,114,11],[129,12,114,14,"expand_message_xmd"],[129,30,114,32],[129,31,114,33,"msg"],[129,34,114,36],[129,36,114,38,"DST"],[129,39,114,41],[129,41,114,43,"len_in_bytes"],[129,53,114,55],[129,55,114,57,"hash"],[129,59,114,61],[129,60,114,62],[130,4,115,4],[130,5,115,5],[130,11,116,9],[130,15,116,13,"expand"],[130,21,116,19],[130,26,116,24],[130,31,116,29],[130,33,116,31],[131,6,117,8,"prb"],[131,9,117,11],[131,12,117,14,"expand_message_xof"],[131,30,117,32],[131,31,117,33,"msg"],[131,34,117,36],[131,36,117,38,"DST"],[131,39,117,41],[131,41,117,43,"len_in_bytes"],[131,53,117,55],[131,55,117,57,"k"],[131,56,117,58],[131,58,117,60,"hash"],[131,62,117,64],[131,63,117,65],[132,4,118,4],[132,5,118,5],[132,11,119,9],[132,15,119,13,"expand"],[132,21,119,19],[132,26,119,24],[132,42,119,40],[132,44,119,42],[133,6,120,8],[134,6,121,8,"prb"],[134,9,121,11],[134,12,121,14,"msg"],[134,15,121,17],[135,4,122,4],[135,5,122,5],[135,11,123,9],[136,6,124,8],[136,12,124,14],[136,16,124,18,"Error"],[136,21,124,23],[136,22,124,24],[136,53,124,55],[136,54,124,56],[137,4,125,4],[138,4,126,4],[138,10,126,10,"u"],[138,11,126,11],[138,14,126,14],[138,18,126,18,"Array"],[138,23,126,23],[138,24,126,24,"count"],[138,29,126,29],[138,30,126,30],[139,4,127,4],[139,9,127,9],[139,13,127,13,"i"],[139,14,127,14],[139,17,127,17],[139,18,127,18],[139,20,127,20,"i"],[139,21,127,21],[139,24,127,24,"count"],[139,29,127,29],[139,31,127,31,"i"],[139,32,127,32],[139,34,127,34],[139,36,127,36],[140,6,128,8],[140,12,128,14,"e"],[140,13,128,15],[140,16,128,18],[140,20,128,22,"Array"],[140,25,128,27],[140,26,128,28,"m"],[140,27,128,29],[140,28,128,30],[141,6,129,8],[141,11,129,13],[141,15,129,17,"j"],[141,16,129,18],[141,19,129,21],[141,20,129,22],[141,22,129,24,"j"],[141,23,129,25],[141,26,129,28,"m"],[141,27,129,29],[141,29,129,31,"j"],[141,30,129,32],[141,32,129,34],[141,34,129,36],[142,8,130,12],[142,14,130,18,"elm_offset"],[142,24,130,28],[142,27,130,31,"L"],[142,28,130,32],[142,32,130,36,"j"],[142,33,130,37],[142,36,130,40,"i"],[142,37,130,41],[142,40,130,44,"m"],[142,41,130,45],[142,42,130,46],[143,8,131,12],[143,14,131,18,"tv"],[143,16,131,20],[143,19,131,23,"prb"],[143,22,131,26],[143,23,131,27,"subarray"],[143,31,131,35],[143,32,131,36,"elm_offset"],[143,42,131,46],[143,44,131,48,"elm_offset"],[143,54,131,58],[143,57,131,61,"L"],[143,58,131,62],[143,59,131,63],[144,8,132,12,"e"],[144,9,132,13],[144,10,132,14,"j"],[144,11,132,15],[144,12,132,16],[144,15,132,19],[144,19,132,19,"mod"],[144,31,132,22],[144,33,132,23,"os2ip"],[144,38,132,28],[144,39,132,29,"tv"],[144,41,132,31],[144,42,132,32],[144,44,132,34,"p"],[144,45,132,35],[144,46,132,36],[145,6,133,8],[146,6,134,8,"u"],[146,7,134,9],[146,8,134,10,"i"],[146,9,134,11],[146,10,134,12],[146,13,134,15,"e"],[146,14,134,16],[147,4,135,4],[148,4,136,4],[148,11,136,11,"u"],[148,12,136,12],[149,2,137,0],[150,2,138,7],[150,11,138,16,"isogenyMap"],[150,21,138,26,"isogenyMap"],[150,22,138,27,"field"],[150,27,138,32],[150,29,138,34,"map"],[150,32,138,37],[150,34,138,39],[151,4,139,4],[152,4,140,4],[152,10,140,10,"coeff"],[152,15,140,15],[152,18,140,18,"map"],[152,21,140,21],[152,22,140,22,"map"],[152,25,140,25],[152,26,140,27,"i"],[152,27,140,28],[152,31,140,33,"Array"],[152,36,140,38],[152,37,140,39,"from"],[152,41,140,43],[152,42,140,44,"i"],[152,43,140,45],[152,44,140,46],[152,45,140,47,"reverse"],[152,52,140,54],[152,53,140,55],[152,54,140,56],[152,55,140,57],[153,4,141,4],[153,11,141,11],[153,12,141,12,"x"],[153,13,141,13],[153,15,141,15,"y"],[153,16,141,16],[153,21,141,21],[154,6,142,8],[154,12,142,14],[154,13,142,15,"xn"],[154,15,142,17],[154,17,142,19,"xd"],[154,19,142,21],[154,21,142,23,"yn"],[154,23,142,25],[154,25,142,27,"yd"],[154,27,142,29],[154,28,142,30],[154,31,142,33,"coeff"],[154,36,142,38],[154,37,142,39,"map"],[154,40,142,42],[154,41,142,44,"val"],[154,44,142,47],[154,48,142,52,"val"],[154,51,142,55],[154,52,142,56,"reduce"],[154,58,142,62],[154,59,142,63],[154,60,142,64,"acc"],[154,63,142,67],[154,65,142,69,"i"],[154,66,142,70],[154,71,142,75,"field"],[154,76,142,80],[154,77,142,81,"add"],[154,80,142,84],[154,81,142,85,"field"],[154,86,142,90],[154,87,142,91,"mul"],[154,90,142,94],[154,91,142,95,"acc"],[154,94,142,98],[154,96,142,100,"x"],[154,97,142,101],[154,98,142,102],[154,100,142,104,"i"],[154,101,142,105],[154,102,142,106],[154,103,142,107],[154,104,142,108],[155,6,143,8],[156,6,144,8],[157,6,145,8],[158,6,146,8],[159,6,147,8],[159,12,147,14],[159,13,147,15,"xd_inv"],[159,19,147,21],[159,21,147,23,"yd_inv"],[159,27,147,29],[159,28,147,30],[159,31,147,33],[159,35,147,33,"FpInvertBatch"],[159,57,147,46],[159,59,147,47,"field"],[159,64,147,52],[159,66,147,54],[159,67,147,55,"xd"],[159,69,147,57],[159,71,147,59,"yd"],[159,73,147,61],[159,74,147,62],[159,76,147,64],[159,80,147,68],[159,81,147,69],[160,6,148,8,"x"],[160,7,148,9],[160,10,148,12,"field"],[160,15,148,17],[160,16,148,18,"mul"],[160,19,148,21],[160,20,148,22,"xn"],[160,22,148,24],[160,24,148,26,"xd_inv"],[160,30,148,32],[160,31,148,33],[160,32,148,34],[160,33,148,35],[161,6,149,8,"y"],[161,7,149,9],[161,10,149,12,"field"],[161,15,149,17],[161,16,149,18,"mul"],[161,19,149,21],[161,20,149,22,"y"],[161,21,149,23],[161,23,149,25,"field"],[161,28,149,30],[161,29,149,31,"mul"],[161,32,149,34],[161,33,149,35,"yn"],[161,35,149,37],[161,37,149,39,"yd_inv"],[161,43,149,45],[161,44,149,46],[161,45,149,47],[161,46,149,48],[161,47,149,49],[162,6,150,8],[162,13,150,15],[163,8,150,17,"x"],[163,9,150,18],[164,8,150,20,"y"],[165,6,150,22],[165,7,150,23],[166,4,151,4],[166,5,151,5],[167,2,152,0],[168,2,153,7],[168,8,153,13,"_DST_scalar"],[168,19,153,24],[168,22,153,24,"exports"],[168,29,153,24],[168,30,153,24,"_DST_scalar"],[168,41,153,24],[168,44,153,27],[168,48,153,27,"utf8ToBytes"],[168,66,153,38],[168,68,153,39],[168,83,153,54],[168,84,153,55],[169,2,154,0],[170,2,155,7],[170,11,155,16,"createHasher"],[170,23,155,28,"createHasher"],[170,24,155,29,"Point"],[170,29,155,34],[170,31,155,36,"mapToCurve"],[170,41,155,46],[170,43,155,48,"defaults"],[170,51,155,56],[170,53,155,58],[171,4,156,4],[171,8,156,8],[171,15,156,15,"mapToCurve"],[171,25,156,25],[171,30,156,30],[171,40,156,40],[171,42,157,8],[171,48,157,14],[171,52,157,18,"Error"],[171,57,157,23],[171,58,157,24],[171,88,157,54],[171,89,157,55],[172,4,158,4],[172,13,158,13,"map"],[172,16,158,16,"map"],[172,17,158,17,"num"],[172,20,158,20],[172,22,158,22],[173,6,159,8],[173,13,159,15,"Point"],[173,18,159,20],[173,19,159,21,"fromAffine"],[173,29,159,31],[173,30,159,32,"mapToCurve"],[173,40,159,42],[173,41,159,43,"num"],[173,44,159,46],[173,45,159,47],[173,46,159,48],[174,4,160,4],[175,4,161,4],[175,13,161,13,"clear"],[175,18,161,18,"clear"],[175,19,161,19,"initial"],[175,26,161,26],[175,28,161,28],[176,6,162,8],[176,12,162,14,"P"],[176,13,162,15],[176,16,162,18,"initial"],[176,23,162,25],[176,24,162,26,"clearCofactor"],[176,37,162,39],[176,38,162,40],[176,39,162,41],[177,6,163,8],[177,10,163,12,"P"],[177,11,163,13],[177,12,163,14,"equals"],[177,18,163,20],[177,19,163,21,"Point"],[177,24,163,26],[177,25,163,27,"ZERO"],[177,29,163,31],[177,30,163,32],[177,32,164,12],[177,39,164,19,"Point"],[177,44,164,24],[177,45,164,25,"ZERO"],[177,49,164,29],[177,50,164,30],[177,51,164,31],[178,6,165,8,"P"],[178,7,165,9],[178,8,165,10,"assertValidity"],[178,22,165,24],[178,23,165,25],[178,24,165,26],[179,6,166,8],[179,13,166,15,"P"],[179,14,166,16],[180,4,167,4],[181,4,168,4],[181,11,168,11],[182,6,169,8,"defaults"],[182,14,169,16],[183,6,170,8,"hashToCurve"],[183,17,170,19,"hashToCurve"],[183,18,170,20,"msg"],[183,21,170,23],[183,23,170,25,"options"],[183,30,170,32],[183,32,170,34],[184,8,171,12],[184,14,171,18,"opts"],[184,18,171,22],[184,21,171,25,"Object"],[184,27,171,31],[184,28,171,32,"assign"],[184,34,171,38],[184,35,171,39],[184,36,171,40],[184,37,171,41],[184,39,171,43,"defaults"],[184,47,171,51],[184,49,171,53,"options"],[184,56,171,60],[184,57,171,61],[185,8,172,12],[185,14,172,18,"u"],[185,15,172,19],[185,18,172,22,"hash_to_field"],[185,31,172,35],[185,32,172,36,"msg"],[185,35,172,39],[185,37,172,41],[185,38,172,42],[185,40,172,44,"opts"],[185,44,172,48],[185,45,172,49],[186,8,173,12],[186,14,173,18,"u0"],[186,16,173,20],[186,19,173,23,"map"],[186,22,173,26],[186,23,173,27,"u"],[186,24,173,28],[186,25,173,29],[186,26,173,30],[186,27,173,31],[186,28,173,32],[187,8,174,12],[187,14,174,18,"u1"],[187,16,174,20],[187,19,174,23,"map"],[187,22,174,26],[187,23,174,27,"u"],[187,24,174,28],[187,25,174,29],[187,26,174,30],[187,27,174,31],[187,28,174,32],[188,8,175,12],[188,15,175,19,"clear"],[188,20,175,24],[188,21,175,25,"u0"],[188,23,175,27],[188,24,175,28,"add"],[188,27,175,31],[188,28,175,32,"u1"],[188,30,175,34],[188,31,175,35],[188,32,175,36],[189,6,176,8],[189,7,176,9],[190,6,177,8,"encodeToCurve"],[190,19,177,21,"encodeToCurve"],[190,20,177,22,"msg"],[190,23,177,25],[190,25,177,27,"options"],[190,32,177,34],[190,34,177,36],[191,8,178,12],[191,14,178,18,"optsDst"],[191,21,178,25],[191,24,178,28,"defaults"],[191,32,178,36],[191,33,178,37,"encodeDST"],[191,42,178,46],[191,45,178,49],[192,10,178,51,"DST"],[192,13,178,54],[192,15,178,56,"defaults"],[192,23,178,64],[192,24,178,65,"encodeDST"],[193,8,178,75],[193,9,178,76],[193,12,178,79],[193,13,178,80],[193,14,178,81],[194,8,179,12],[194,14,179,18,"opts"],[194,18,179,22],[194,21,179,25,"Object"],[194,27,179,31],[194,28,179,32,"assign"],[194,34,179,38],[194,35,179,39],[194,36,179,40],[194,37,179,41],[194,39,179,43,"defaults"],[194,47,179,51],[194,49,179,53,"optsDst"],[194,56,179,60],[194,58,179,62,"options"],[194,65,179,69],[194,66,179,70],[195,8,180,12],[195,14,180,18,"u"],[195,15,180,19],[195,18,180,22,"hash_to_field"],[195,31,180,35],[195,32,180,36,"msg"],[195,35,180,39],[195,37,180,41],[195,38,180,42],[195,40,180,44,"opts"],[195,44,180,48],[195,45,180,49],[196,8,181,12],[196,14,181,18,"u0"],[196,16,181,20],[196,19,181,23,"map"],[196,22,181,26],[196,23,181,27,"u"],[196,24,181,28],[196,25,181,29],[196,26,181,30],[196,27,181,31],[196,28,181,32],[197,8,182,12],[197,15,182,19,"clear"],[197,20,182,24],[197,21,182,25,"u0"],[197,23,182,27],[197,24,182,28],[198,6,183,8],[198,7,183,9],[199,6,184,8],[200,6,185,8,"mapToCurve"],[200,16,185,18,"mapToCurve"],[200,17,185,19,"scalars"],[200,24,185,26],[200,26,185,28],[201,8,186,12],[201,12,186,16],[201,13,186,17,"Array"],[201,18,186,22],[201,19,186,23,"isArray"],[201,26,186,30],[201,27,186,31,"scalars"],[201,34,186,38],[201,35,186,39],[201,37,187,16],[201,43,187,22],[201,47,187,26,"Error"],[201,52,187,31],[201,53,187,32],[201,80,187,59],[201,81,187,60],[202,8,188,12],[202,13,188,17],[202,19,188,23,"i"],[202,20,188,24],[202,24,188,28,"scalars"],[202,31,188,35],[202,33,189,16],[202,37,189,20],[202,44,189,27,"i"],[202,45,189,28],[202,50,189,33],[202,58,189,41],[202,60,190,20],[202,66,190,26],[202,70,190,30,"Error"],[202,75,190,35],[202,76,190,36],[202,103,190,63],[202,104,190,64],[203,8,191,12],[203,15,191,19,"clear"],[203,20,191,24],[203,21,191,25,"map"],[203,24,191,28],[203,25,191,29,"scalars"],[203,32,191,36],[203,33,191,37],[203,34,191,38],[204,6,192,8],[204,7,192,9],[205,6,193,8],[206,6,194,8],[207,6,195,8,"hashToScalar"],[207,18,195,20,"hashToScalar"],[207,19,195,21,"msg"],[207,22,195,24],[207,24,195,26,"options"],[207,31,195,33],[207,33,195,35],[208,8,196,12],[209,8,197,12],[209,14,197,18,"N"],[209,15,197,19],[209,18,197,22,"Point"],[209,23,197,27],[209,24,197,28,"Fn"],[209,26,197,30],[209,27,197,31,"ORDER"],[209,32,197,36],[210,8,198,12],[210,14,198,18,"opts"],[210,18,198,22],[210,21,198,25,"Object"],[210,27,198,31],[210,28,198,32,"assign"],[210,34,198,38],[210,35,198,39],[210,36,198,40],[210,37,198,41],[210,39,198,43,"defaults"],[210,47,198,51],[210,49,198,53],[211,10,198,55,"p"],[211,11,198,56],[211,13,198,58,"N"],[211,14,198,59],[212,10,198,61,"m"],[212,11,198,62],[212,13,198,64],[212,14,198,65],[213,10,198,67,"DST"],[213,13,198,70],[213,15,198,72,"_DST_scalar"],[214,8,198,84],[214,9,198,85],[214,11,198,87,"options"],[214,18,198,94],[214,19,198,95],[215,8,199,12],[215,15,199,19,"hash_to_field"],[215,28,199,32],[215,29,199,33,"msg"],[215,32,199,36],[215,34,199,38],[215,35,199,39],[215,37,199,41,"opts"],[215,41,199,45],[215,42,199,46],[215,43,199,47],[215,44,199,48],[215,45,199,49],[215,46,199,50],[215,47,199,51],[215,48,199,52],[216,6,200,8],[217,4,201,4],[217,5,201,5],[218,2,202,0],[219,0,202,1],[219,3]],"functionMap":{"names":["<global>","i2osp","strxor","anum","normDST","expand_message_xmd","expand_message_xof","hash_to_field","isogenyMap","map.map$argument_0","<anonymous>","coeff.map$argument_0","val.reduce$argument_0","createHasher","map","clear","hashToCurve","encodeToCurve","mapToCurve","hashToScalar"],"mappings":"AAA;ACK;CDW;AEC;CFM;AGC;CHG;AIC;CJI;OKK;CLuB;OMQ;CNmB;OOS;CPwC;OQC;0BCE,8BD;WEC;2CCC,oBC,2CD,CD;KFS;CRC;OaG;ICG;KDE;IEC;KFM;QGG;SHM;QIC;SJM;QKE;SLO;QMG;SNK;CbE"}},"type":"js/module"}]}