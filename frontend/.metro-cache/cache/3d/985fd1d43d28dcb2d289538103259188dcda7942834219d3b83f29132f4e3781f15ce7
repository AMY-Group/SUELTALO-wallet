{"dependencies":[{"name":"bn.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":9,"index":45},"end":{"line":4,"column":25,"index":61}}],"key":"h/AEHknS6KAnKragIfqHUjGvuRM=","exportNames":["*"]}},{"name":"minimalistic-assert","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":16,"index":79},"end":{"line":5,"column":46,"index":109}}],"key":"NsVgU1mG0s9I57g2YSlMlpAh3pM=","exportNames":["*"]}},{"name":"minimalistic-crypto-utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":15,"index":126},"end":{"line":6,"column":51,"index":162}}],"key":"LxQwbyF4lUQg/qW6zaXeo9xbNJM=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var utils = exports;\n  var BN = require(_dependencyMap[0], \"bn.js\");\n  var minAssert = require(_dependencyMap[1], \"minimalistic-assert\");\n  var minUtils = require(_dependencyMap[2], \"minimalistic-crypto-utils\");\n  utils.assert = minAssert;\n  utils.toArray = minUtils.toArray;\n  utils.zero2 = minUtils.zero2;\n  utils.toHex = minUtils.toHex;\n  utils.encode = minUtils.encode;\n\n  // Represent num in a w-NAF form\n  function getNAF(num, w, bits) {\n    var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n    var i;\n    for (i = 0; i < naf.length; i += 1) {\n      naf[i] = 0;\n    }\n    var ws = 1 << w + 1;\n    var k = num.clone();\n    for (i = 0; i < naf.length; i++) {\n      var z;\n      var mod = k.andln(ws - 1);\n      if (k.isOdd()) {\n        if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;\n        k.isubn(z);\n      } else {\n        z = 0;\n      }\n      naf[i] = z;\n      k.iushrn(1);\n    }\n    return naf;\n  }\n  utils.getNAF = getNAF;\n\n  // Represent k1, k2 in a Joint Sparse Form\n  function getJSF(k1, k2) {\n    var jsf = [[], []];\n    k1 = k1.clone();\n    k2 = k2.clone();\n    var d1 = 0;\n    var d2 = 0;\n    var m8;\n    while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n      // First phase\n      var m14 = k1.andln(3) + d1 & 3;\n      var m24 = k2.andln(3) + d2 & 3;\n      if (m14 === 3) m14 = -1;\n      if (m24 === 3) m24 = -1;\n      var u1;\n      if ((m14 & 1) === 0) {\n        u1 = 0;\n      } else {\n        m8 = k1.andln(7) + d1 & 7;\n        if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;\n      }\n      jsf[0].push(u1);\n      var u2;\n      if ((m24 & 1) === 0) {\n        u2 = 0;\n      } else {\n        m8 = k2.andln(7) + d2 & 7;\n        if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;\n      }\n      jsf[1].push(u2);\n\n      // Second phase\n      if (2 * d1 === u1 + 1) d1 = 1 - d1;\n      if (2 * d2 === u2 + 1) d2 = 1 - d2;\n      k1.iushrn(1);\n      k2.iushrn(1);\n    }\n    return jsf;\n  }\n  utils.getJSF = getJSF;\n  function cachedProperty(obj, name, computer) {\n    var key = '_' + name;\n    obj.prototype[name] = function cachedProperty() {\n      return this[key] !== undefined ? this[key] : this[key] = computer.call(this);\n    };\n  }\n  utils.cachedProperty = cachedProperty;\n  function parseBytes(bytes) {\n    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;\n  }\n  utils.parseBytes = parseBytes;\n  function intFromLE(bytes) {\n    return new BN(bytes, 'hex', 'le');\n  }\n  utils.intFromLE = intFromLE;\n});","lineCount":94,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"utils"],[4,11,3,9],[4,14,3,12,"exports"],[4,21,3,19],[5,2,4,0],[5,6,4,4,"BN"],[5,8,4,6],[5,11,4,9,"require"],[5,18,4,16],[5,19,4,16,"_dependencyMap"],[5,33,4,16],[5,45,4,24],[5,46,4,25],[6,2,5,0],[6,6,5,4,"minAssert"],[6,15,5,13],[6,18,5,16,"require"],[6,25,5,23],[6,26,5,23,"_dependencyMap"],[6,40,5,23],[6,66,5,45],[6,67,5,46],[7,2,6,0],[7,6,6,4,"minUtils"],[7,14,6,12],[7,17,6,15,"require"],[7,24,6,22],[7,25,6,22,"_dependencyMap"],[7,39,6,22],[7,71,6,50],[7,72,6,51],[8,2,8,0,"utils"],[8,7,8,5],[8,8,8,6,"assert"],[8,14,8,12],[8,17,8,15,"minAssert"],[8,26,8,24],[9,2,9,0,"utils"],[9,7,9,5],[9,8,9,6,"toArray"],[9,15,9,13],[9,18,9,16,"minUtils"],[9,26,9,24],[9,27,9,25,"toArray"],[9,34,9,32],[10,2,10,0,"utils"],[10,7,10,5],[10,8,10,6,"zero2"],[10,13,10,11],[10,16,10,14,"minUtils"],[10,24,10,22],[10,25,10,23,"zero2"],[10,30,10,28],[11,2,11,0,"utils"],[11,7,11,5],[11,8,11,6,"toHex"],[11,13,11,11],[11,16,11,14,"minUtils"],[11,24,11,22],[11,25,11,23,"toHex"],[11,30,11,28],[12,2,12,0,"utils"],[12,7,12,5],[12,8,12,6,"encode"],[12,14,12,12],[12,17,12,15,"minUtils"],[12,25,12,23],[12,26,12,24,"encode"],[12,32,12,30],[14,2,14,0],[15,2,15,0],[15,11,15,9,"getNAF"],[15,17,15,15,"getNAF"],[15,18,15,16,"num"],[15,21,15,19],[15,23,15,21,"w"],[15,24,15,22],[15,26,15,24,"bits"],[15,30,15,28],[15,32,15,30],[16,4,16,2],[16,8,16,6,"naf"],[16,11,16,9],[16,14,16,12],[16,18,16,16,"Array"],[16,23,16,21],[16,24,16,22,"Math"],[16,28,16,26],[16,29,16,27,"max"],[16,32,16,30],[16,33,16,31,"num"],[16,36,16,34],[16,37,16,35,"bitLength"],[16,46,16,44],[16,47,16,45],[16,48,16,46],[16,50,16,48,"bits"],[16,54,16,52],[16,55,16,53],[16,58,16,56],[16,59,16,57],[16,60,16,58],[17,4,17,2],[17,8,17,6,"i"],[17,9,17,7],[18,4,18,2],[18,9,18,7,"i"],[18,10,18,8],[18,13,18,11],[18,14,18,12],[18,16,18,14,"i"],[18,17,18,15],[18,20,18,18,"naf"],[18,23,18,21],[18,24,18,22,"length"],[18,30,18,28],[18,32,18,30,"i"],[18,33,18,31],[18,37,18,35],[18,38,18,36],[18,40,18,38],[19,6,19,4,"naf"],[19,9,19,7],[19,10,19,8,"i"],[19,11,19,9],[19,12,19,10],[19,15,19,13],[19,16,19,14],[20,4,20,2],[21,4,22,2],[21,8,22,6,"ws"],[21,10,22,8],[21,13,22,11],[21,14,22,12],[21,18,22,17,"w"],[21,19,22,18],[21,22,22,21],[21,23,22,23],[22,4,23,2],[22,8,23,6,"k"],[22,9,23,7],[22,12,23,10,"num"],[22,15,23,13],[22,16,23,14,"clone"],[22,21,23,19],[22,22,23,20],[22,23,23,21],[23,4,25,2],[23,9,25,7,"i"],[23,10,25,8],[23,13,25,11],[23,14,25,12],[23,16,25,14,"i"],[23,17,25,15],[23,20,25,18,"naf"],[23,23,25,21],[23,24,25,22,"length"],[23,30,25,28],[23,32,25,30,"i"],[23,33,25,31],[23,35,25,33],[23,37,25,35],[24,6,26,4],[24,10,26,8,"z"],[24,11,26,9],[25,6,27,4],[25,10,27,8,"mod"],[25,13,27,11],[25,16,27,14,"k"],[25,17,27,15],[25,18,27,16,"andln"],[25,23,27,21],[25,24,27,22,"ws"],[25,26,27,24],[25,29,27,27],[25,30,27,28],[25,31,27,29],[26,6,28,4],[26,10,28,8,"k"],[26,11,28,9],[26,12,28,10,"isOdd"],[26,17,28,15],[26,18,28,16],[26,19,28,17],[26,21,28,19],[27,8,29,6],[27,12,29,10,"mod"],[27,15,29,13],[27,18,29,16],[27,19,29,17,"ws"],[27,21,29,19],[27,25,29,23],[27,26,29,24],[27,30,29,28],[27,31,29,29],[27,33,30,8,"z"],[27,34,30,9],[27,37,30,12],[27,38,30,13,"ws"],[27,40,30,15],[27,44,30,19],[27,45,30,20],[27,49,30,24,"mod"],[27,52,30,27],[27,53,30,28],[27,58,32,8,"z"],[27,59,32,9],[27,62,32,12,"mod"],[27,65,32,15],[28,8,33,6,"k"],[28,9,33,7],[28,10,33,8,"isubn"],[28,15,33,13],[28,16,33,14,"z"],[28,17,33,15],[28,18,33,16],[29,6,34,4],[29,7,34,5],[29,13,34,11],[30,8,35,6,"z"],[30,9,35,7],[30,12,35,10],[30,13,35,11],[31,6,36,4],[32,6,38,4,"naf"],[32,9,38,7],[32,10,38,8,"i"],[32,11,38,9],[32,12,38,10],[32,15,38,13,"z"],[32,16,38,14],[33,6,39,4,"k"],[33,7,39,5],[33,8,39,6,"iushrn"],[33,14,39,12],[33,15,39,13],[33,16,39,14],[33,17,39,15],[34,4,40,2],[35,4,42,2],[35,11,42,9,"naf"],[35,14,42,12],[36,2,43,0],[37,2,44,0,"utils"],[37,7,44,5],[37,8,44,6,"getNAF"],[37,14,44,12],[37,17,44,15,"getNAF"],[37,23,44,21],[39,2,46,0],[40,2,47,0],[40,11,47,9,"getJSF"],[40,17,47,15,"getJSF"],[40,18,47,16,"k1"],[40,20,47,18],[40,22,47,20,"k2"],[40,24,47,22],[40,26,47,24],[41,4,48,2],[41,8,48,6,"jsf"],[41,11,48,9],[41,14,48,12],[41,15,49,4],[41,17,49,6],[41,19,50,4],[41,21,50,6],[41,22,51,3],[42,4,53,2,"k1"],[42,6,53,4],[42,9,53,7,"k1"],[42,11,53,9],[42,12,53,10,"clone"],[42,17,53,15],[42,18,53,16],[42,19,53,17],[43,4,54,2,"k2"],[43,6,54,4],[43,9,54,7,"k2"],[43,11,54,9],[43,12,54,10,"clone"],[43,17,54,15],[43,18,54,16],[43,19,54,17],[44,4,55,2],[44,8,55,6,"d1"],[44,10,55,8],[44,13,55,11],[44,14,55,12],[45,4,56,2],[45,8,56,6,"d2"],[45,10,56,8],[45,13,56,11],[45,14,56,12],[46,4,57,2],[46,8,57,6,"m8"],[46,10,57,8],[47,4,58,2],[47,11,58,9,"k1"],[47,13,58,11],[47,14,58,12,"cmpn"],[47,18,58,16],[47,19,58,17],[47,20,58,18,"d1"],[47,22,58,20],[47,23,58,21],[47,26,58,24],[47,27,58,25],[47,31,58,29,"k2"],[47,33,58,31],[47,34,58,32,"cmpn"],[47,38,58,36],[47,39,58,37],[47,40,58,38,"d2"],[47,42,58,40],[47,43,58,41],[47,46,58,44],[47,47,58,45],[47,49,58,47],[48,6,59,4],[49,6,60,4],[49,10,60,8,"m14"],[49,13,60,11],[49,16,60,15,"k1"],[49,18,60,17],[49,19,60,18,"andln"],[49,24,60,23],[49,25,60,24],[49,26,60,25],[49,27,60,26],[49,30,60,29,"d1"],[49,32,60,31],[49,35,60,35],[49,36,60,36],[50,6,61,4],[50,10,61,8,"m24"],[50,13,61,11],[50,16,61,15,"k2"],[50,18,61,17],[50,19,61,18,"andln"],[50,24,61,23],[50,25,61,24],[50,26,61,25],[50,27,61,26],[50,30,61,29,"d2"],[50,32,61,31],[50,35,61,35],[50,36,61,36],[51,6,62,4],[51,10,62,8,"m14"],[51,13,62,11],[51,18,62,16],[51,19,62,17],[51,21,63,6,"m14"],[51,24,63,9],[51,27,63,12],[51,28,63,13],[51,29,63,14],[52,6,64,4],[52,10,64,8,"m24"],[52,13,64,11],[52,18,64,16],[52,19,64,17],[52,21,65,6,"m24"],[52,24,65,9],[52,27,65,12],[52,28,65,13],[52,29,65,14],[53,6,66,4],[53,10,66,8,"u1"],[53,12,66,10],[54,6,67,4],[54,10,67,8],[54,11,67,9,"m14"],[54,14,67,12],[54,17,67,15],[54,18,67,16],[54,24,67,22],[54,25,67,23],[54,27,67,25],[55,8,68,6,"u1"],[55,10,68,8],[55,13,68,11],[55,14,68,12],[56,6,69,4],[56,7,69,5],[56,13,69,11],[57,8,70,6,"m8"],[57,10,70,8],[57,13,70,12,"k1"],[57,15,70,14],[57,16,70,15,"andln"],[57,21,70,20],[57,22,70,21],[57,23,70,22],[57,24,70,23],[57,27,70,26,"d1"],[57,29,70,28],[57,32,70,32],[57,33,70,33],[58,8,71,6],[58,12,71,10],[58,13,71,11,"m8"],[58,15,71,13],[58,20,71,18],[58,21,71,19],[58,25,71,23,"m8"],[58,27,71,25],[58,32,71,30],[58,33,71,31],[58,38,71,36,"m24"],[58,41,71,39],[58,46,71,44],[58,47,71,45],[58,49,72,8,"u1"],[58,51,72,10],[58,54,72,13],[58,55,72,14,"m14"],[58,58,72,17],[58,59,72,18],[58,64,74,8,"u1"],[58,66,74,10],[58,69,74,13,"m14"],[58,72,74,16],[59,6,75,4],[60,6,76,4,"jsf"],[60,9,76,7],[60,10,76,8],[60,11,76,9],[60,12,76,10],[60,13,76,11,"push"],[60,17,76,15],[60,18,76,16,"u1"],[60,20,76,18],[60,21,76,19],[61,6,78,4],[61,10,78,8,"u2"],[61,12,78,10],[62,6,79,4],[62,10,79,8],[62,11,79,9,"m24"],[62,14,79,12],[62,17,79,15],[62,18,79,16],[62,24,79,22],[62,25,79,23],[62,27,79,25],[63,8,80,6,"u2"],[63,10,80,8],[63,13,80,11],[63,14,80,12],[64,6,81,4],[64,7,81,5],[64,13,81,11],[65,8,82,6,"m8"],[65,10,82,8],[65,13,82,12,"k2"],[65,15,82,14],[65,16,82,15,"andln"],[65,21,82,20],[65,22,82,21],[65,23,82,22],[65,24,82,23],[65,27,82,26,"d2"],[65,29,82,28],[65,32,82,32],[65,33,82,33],[66,8,83,6],[66,12,83,10],[66,13,83,11,"m8"],[66,15,83,13],[66,20,83,18],[66,21,83,19],[66,25,83,23,"m8"],[66,27,83,25],[66,32,83,30],[66,33,83,31],[66,38,83,36,"m14"],[66,41,83,39],[66,46,83,44],[66,47,83,45],[66,49,84,8,"u2"],[66,51,84,10],[66,54,84,13],[66,55,84,14,"m24"],[66,58,84,17],[66,59,84,18],[66,64,86,8,"u2"],[66,66,86,10],[66,69,86,13,"m24"],[66,72,86,16],[67,6,87,4],[68,6,88,4,"jsf"],[68,9,88,7],[68,10,88,8],[68,11,88,9],[68,12,88,10],[68,13,88,11,"push"],[68,17,88,15],[68,18,88,16,"u2"],[68,20,88,18],[68,21,88,19],[70,6,90,4],[71,6,91,4],[71,10,91,8],[71,11,91,9],[71,14,91,12,"d1"],[71,16,91,14],[71,21,91,19,"u1"],[71,23,91,21],[71,26,91,24],[71,27,91,25],[71,29,92,6,"d1"],[71,31,92,8],[71,34,92,11],[71,35,92,12],[71,38,92,15,"d1"],[71,40,92,17],[72,6,93,4],[72,10,93,8],[72,11,93,9],[72,14,93,12,"d2"],[72,16,93,14],[72,21,93,19,"u2"],[72,23,93,21],[72,26,93,24],[72,27,93,25],[72,29,94,6,"d2"],[72,31,94,8],[72,34,94,11],[72,35,94,12],[72,38,94,15,"d2"],[72,40,94,17],[73,6,95,4,"k1"],[73,8,95,6],[73,9,95,7,"iushrn"],[73,15,95,13],[73,16,95,14],[73,17,95,15],[73,18,95,16],[74,6,96,4,"k2"],[74,8,96,6],[74,9,96,7,"iushrn"],[74,15,96,13],[74,16,96,14],[74,17,96,15],[74,18,96,16],[75,4,97,2],[76,4,99,2],[76,11,99,9,"jsf"],[76,14,99,12],[77,2,100,0],[78,2,101,0,"utils"],[78,7,101,5],[78,8,101,6,"getJSF"],[78,14,101,12],[78,17,101,15,"getJSF"],[78,23,101,21],[79,2,103,0],[79,11,103,9,"cachedProperty"],[79,25,103,23,"cachedProperty"],[79,26,103,24,"obj"],[79,29,103,27],[79,31,103,29,"name"],[79,35,103,33],[79,37,103,35,"computer"],[79,45,103,43],[79,47,103,45],[80,4,104,2],[80,8,104,6,"key"],[80,11,104,9],[80,14,104,12],[80,17,104,15],[80,20,104,18,"name"],[80,24,104,22],[81,4,105,2,"obj"],[81,7,105,5],[81,8,105,6,"prototype"],[81,17,105,15],[81,18,105,16,"name"],[81,22,105,20],[81,23,105,21],[81,26,105,24],[81,35,105,33,"cachedProperty"],[81,49,105,47,"cachedProperty"],[81,50,105,47],[81,52,105,50],[82,6,106,4],[82,13,106,11],[82,17,106,15],[82,18,106,16,"key"],[82,21,106,19],[82,22,106,20],[82,27,106,25,"undefined"],[82,36,106,34],[82,39,106,37],[82,43,106,41],[82,44,106,42,"key"],[82,47,106,45],[82,48,106,46],[82,51,107,6],[82,55,107,10],[82,56,107,11,"key"],[82,59,107,14],[82,60,107,15],[82,63,107,18,"computer"],[82,71,107,26],[82,72,107,27,"call"],[82,76,107,31],[82,77,107,32],[82,81,107,36],[82,82,107,37],[83,4,108,2],[83,5,108,3],[84,2,109,0],[85,2,110,0,"utils"],[85,7,110,5],[85,8,110,6,"cachedProperty"],[85,22,110,20],[85,25,110,23,"cachedProperty"],[85,39,110,37],[86,2,112,0],[86,11,112,9,"parseBytes"],[86,21,112,19,"parseBytes"],[86,22,112,20,"bytes"],[86,27,112,25],[86,29,112,27],[87,4,113,2],[87,11,113,9],[87,18,113,16,"bytes"],[87,23,113,21],[87,28,113,26],[87,36,113,34],[87,39,113,37,"utils"],[87,44,113,42],[87,45,113,43,"toArray"],[87,52,113,50],[87,53,113,51,"bytes"],[87,58,113,56],[87,60,113,58],[87,65,113,63],[87,66,113,64],[87,69,114,4,"bytes"],[87,74,114,9],[88,2,115,0],[89,2,116,0,"utils"],[89,7,116,5],[89,8,116,6,"parseBytes"],[89,18,116,16],[89,21,116,19,"parseBytes"],[89,31,116,29],[90,2,118,0],[90,11,118,9,"intFromLE"],[90,20,118,18,"intFromLE"],[90,21,118,19,"bytes"],[90,26,118,24],[90,28,118,26],[91,4,119,2],[91,11,119,9],[91,15,119,13,"BN"],[91,17,119,15],[91,18,119,16,"bytes"],[91,23,119,21],[91,25,119,23],[91,30,119,28],[91,32,119,30],[91,36,119,34],[91,37,119,35],[92,2,120,0],[93,2,121,0,"utils"],[93,7,121,5],[93,8,121,6,"intFromLE"],[93,17,121,15],[93,20,121,18,"intFromLE"],[93,29,121,27],[94,0,121,28],[94,3]],"functionMap":{"names":["<global>","getNAF","getJSF","cachedProperty","parseBytes","intFromLE"],"mappings":"AAA;ACc;CD4B;AEI;CFqD;AGG;CHM;AIG;CJG;AKG;CLE"}},"type":"js/module"}]}