{"dependencies":[{"name":"@solana/web3.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":73,"index":73}}],"key":"hVqIgOgXAH1+S7mu7qk6LJzdVc8=","exportNames":["*"]}},{"name":"../constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":74},"end":{"line":2,"column":80,"index":154}}],"key":"w33QN4nlqAZn5CNK6M5HKbLWgBA=","exportNames":["*"]}},{"name":"../errors.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":155},"end":{"line":3,"column":136,"index":291}}],"key":"hqwpWRawU/ruYp+nBkn/8IqEHoU=","exportNames":["*"]}},{"name":"../instructions/associatedTokenAccount.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":292},"end":{"line":4,"column":100,"index":392}}],"key":"0KInrlWvwWYIf/F6QtBqaQdI9AA=","exportNames":["*"]}},{"name":"../state/account.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":393},"end":{"line":5,"column":49,"index":442}}],"key":"q9NSgqd/wd0qBGy7V2cKVlmP46E=","exportNames":["*"]}},{"name":"../state/mint.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":443},"end":{"line":6,"column":65,"index":508}}],"key":"v3pX84XwBjgEzA16Wj3LfwCi9fI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getOrCreateAssociatedTokenAccount = getOrCreateAssociatedTokenAccount;\n  var _web = require(_dependencyMap[0], \"@solana/web3.js\");\n  var _constants = require(_dependencyMap[1], \"../constants.js\");\n  var _errors = require(_dependencyMap[2], \"../errors.js\");\n  var _associatedTokenAccount = require(_dependencyMap[3], \"../instructions/associatedTokenAccount.js\");\n  var _account = require(_dependencyMap[4], \"../state/account.js\");\n  var _mint = require(_dependencyMap[5], \"../state/mint.js\");\n  /**\n   * Retrieve the associated token account, or create it if it doesn't exist\n   *\n   * @param connection               Connection to use\n   * @param payer                    Payer of the transaction and initialization fees\n   * @param mint                     Mint associated with the account to set or verify\n   * @param owner                    Owner of the account to set or verify\n   * @param allowOwnerOffCurve       Allow the owner account to be a PDA (Program Derived Address)\n   * @param commitment               Desired level of commitment for querying the state\n   * @param confirmOptions           Options for confirming the transaction\n   * @param programId                SPL Token program account\n   * @param associatedTokenProgramId SPL Associated Token program account\n   *\n   * @return Address of the new associated token account\n   */\n  async function getOrCreateAssociatedTokenAccount(connection, payer, mint, owner, allowOwnerOffCurve = false, commitment, confirmOptions, programId = _constants.TOKEN_PROGRAM_ID, associatedTokenProgramId = _constants.ASSOCIATED_TOKEN_PROGRAM_ID) {\n    const associatedToken = (0, _mint.getAssociatedTokenAddressSync)(mint, owner, allowOwnerOffCurve, programId, associatedTokenProgramId);\n    // This is the optimal logic, considering TX fee, client-side computation, RPC roundtrips and guaranteed idempotent.\n    // Sadly we can't do this atomically.\n    let account;\n    try {\n      account = await (0, _account.getAccount)(connection, associatedToken, commitment, programId);\n    } catch (error) {\n      // TokenAccountNotFoundError can be possible if the associated address has already received some lamports,\n      // becoming a system account. Assuming program derived addressing is safe, this is the only case for the\n      // TokenInvalidAccountOwnerError in this code path.\n      if (error instanceof _errors.TokenAccountNotFoundError || error instanceof _errors.TokenInvalidAccountOwnerError) {\n        // As this isn't atomic, it's possible others can create associated accounts meanwhile.\n        try {\n          const transaction = new _web.Transaction().add((0, _associatedTokenAccount.createAssociatedTokenAccountInstruction)(payer.publicKey, associatedToken, owner, mint, programId, associatedTokenProgramId));\n          await (0, _web.sendAndConfirmTransaction)(connection, transaction, [payer], confirmOptions);\n        } catch (error) {\n          // Ignore all errors; for now there is no API-compatible way to selectively ignore the expected\n          // instruction error if the associated account exists already.\n        }\n        // Now this should always succeed\n        account = await (0, _account.getAccount)(connection, associatedToken, commitment, programId);\n      } else {\n        throw error;\n      }\n    }\n    if (!account.mint.equals(mint)) throw new _errors.TokenInvalidMintError();\n    if (!account.owner.equals(owner)) throw new _errors.TokenInvalidOwnerError();\n    return account;\n  }\n});","lineCount":57,"map":[[6,2,1,0],[6,6,1,0,"_web"],[6,10,1,0],[6,13,1,0,"require"],[6,20,1,0],[6,21,1,0,"_dependencyMap"],[6,35,1,0],[7,2,2,0],[7,6,2,0,"_constants"],[7,16,2,0],[7,19,2,0,"require"],[7,26,2,0],[7,27,2,0,"_dependencyMap"],[7,41,2,0],[8,2,3,0],[8,6,3,0,"_errors"],[8,13,3,0],[8,16,3,0,"require"],[8,23,3,0],[8,24,3,0,"_dependencyMap"],[8,38,3,0],[9,2,4,0],[9,6,4,0,"_associatedTokenAccount"],[9,29,4,0],[9,32,4,0,"require"],[9,39,4,0],[9,40,4,0,"_dependencyMap"],[9,54,4,0],[10,2,5,0],[10,6,5,0,"_account"],[10,14,5,0],[10,17,5,0,"require"],[10,24,5,0],[10,25,5,0,"_dependencyMap"],[10,39,5,0],[11,2,6,0],[11,6,6,0,"_mint"],[11,11,6,0],[11,14,6,0,"require"],[11,21,6,0],[11,22,6,0,"_dependencyMap"],[11,36,6,0],[12,2,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,0,20,0],[26,0,21,0],[27,2,22,7],[27,17,22,22,"getOrCreateAssociatedTokenAccount"],[27,50,22,55,"getOrCreateAssociatedTokenAccount"],[27,51,22,56,"connection"],[27,61,22,66],[27,63,22,68,"payer"],[27,68,22,73],[27,70,22,75,"mint"],[27,74,22,79],[27,76,22,81,"owner"],[27,81,22,86],[27,83,22,88,"allowOwnerOffCurve"],[27,101,22,106],[27,104,22,109],[27,109,22,114],[27,111,22,116,"commitment"],[27,121,22,126],[27,123,22,128,"confirmOptions"],[27,137,22,142],[27,139,22,144,"programId"],[27,148,22,153],[27,151,22,156,"TOKEN_PROGRAM_ID"],[27,178,22,172],[27,180,22,174,"associatedTokenProgramId"],[27,204,22,198],[27,207,22,201,"ASSOCIATED_TOKEN_PROGRAM_ID"],[27,245,22,228],[27,247,22,230],[28,4,23,4],[28,10,23,10,"associatedToken"],[28,25,23,25],[28,28,23,28],[28,32,23,28,"getAssociatedTokenAddressSync"],[28,67,23,57],[28,69,23,58,"mint"],[28,73,23,62],[28,75,23,64,"owner"],[28,80,23,69],[28,82,23,71,"allowOwnerOffCurve"],[28,100,23,89],[28,102,23,91,"programId"],[28,111,23,100],[28,113,23,102,"associatedTokenProgramId"],[28,137,23,126],[28,138,23,127],[29,4,24,4],[30,4,25,4],[31,4,26,4],[31,8,26,8,"account"],[31,15,26,15],[32,4,27,4],[32,8,27,8],[33,6,28,8,"account"],[33,13,28,15],[33,16,28,18],[33,22,28,24],[33,26,28,24,"getAccount"],[33,45,28,34],[33,47,28,35,"connection"],[33,57,28,45],[33,59,28,47,"associatedToken"],[33,74,28,62],[33,76,28,64,"commitment"],[33,86,28,74],[33,88,28,76,"programId"],[33,97,28,85],[33,98,28,86],[34,4,29,4],[34,5,29,5],[34,6,30,4],[34,13,30,11,"error"],[34,18,30,16],[34,20,30,18],[35,6,31,8],[36,6,32,8],[37,6,33,8],[38,6,34,8],[38,10,34,12,"error"],[38,15,34,17],[38,27,34,29,"TokenAccountNotFoundError"],[38,60,34,54],[38,64,34,58,"error"],[38,69,34,63],[38,81,34,75,"TokenInvalidAccountOwnerError"],[38,118,34,104],[38,120,34,106],[39,8,35,12],[40,8,36,12],[40,12,36,16],[41,10,37,16],[41,16,37,22,"transaction"],[41,27,37,33],[41,30,37,36],[41,34,37,40,"Transaction"],[41,50,37,51],[41,51,37,52],[41,52,37,53],[41,53,37,54,"add"],[41,56,37,57],[41,57,37,58],[41,61,37,58,"createAssociatedTokenAccountInstruction"],[41,124,37,97],[41,126,37,98,"payer"],[41,131,37,103],[41,132,37,104,"publicKey"],[41,141,37,113],[41,143,37,115,"associatedToken"],[41,158,37,130],[41,160,37,132,"owner"],[41,165,37,137],[41,167,37,139,"mint"],[41,171,37,143],[41,173,37,145,"programId"],[41,182,37,154],[41,184,37,156,"associatedTokenProgramId"],[41,208,37,180],[41,209,37,181],[41,210,37,182],[42,10,38,16],[42,16,38,22],[42,20,38,22,"sendAndConfirmTransaction"],[42,50,38,47],[42,52,38,48,"connection"],[42,62,38,58],[42,64,38,60,"transaction"],[42,75,38,71],[42,77,38,73],[42,78,38,74,"payer"],[42,83,38,79],[42,84,38,80],[42,86,38,82,"confirmOptions"],[42,100,38,96],[42,101,38,97],[43,8,39,12],[43,9,39,13],[43,10,40,12],[43,17,40,19,"error"],[43,22,40,24],[43,24,40,26],[44,10,41,16],[45,10,42,16],[46,8,42,16],[47,8,44,12],[48,8,45,12,"account"],[48,15,45,19],[48,18,45,22],[48,24,45,28],[48,28,45,28,"getAccount"],[48,47,45,38],[48,49,45,39,"connection"],[48,59,45,49],[48,61,45,51,"associatedToken"],[48,76,45,66],[48,78,45,68,"commitment"],[48,88,45,78],[48,90,45,80,"programId"],[48,99,45,89],[48,100,45,90],[49,6,46,8],[49,7,46,9],[49,13,47,13],[50,8,48,12],[50,14,48,18,"error"],[50,19,48,23],[51,6,49,8],[52,4,50,4],[53,4,51,4],[53,8,51,8],[53,9,51,9,"account"],[53,16,51,16],[53,17,51,17,"mint"],[53,21,51,21],[53,22,51,22,"equals"],[53,28,51,28],[53,29,51,29,"mint"],[53,33,51,33],[53,34,51,34],[53,36,52,8],[53,42,52,14],[53,46,52,18,"TokenInvalidMintError"],[53,75,52,39],[53,76,52,40],[53,77,52,41],[54,4,53,4],[54,8,53,8],[54,9,53,9,"account"],[54,16,53,16],[54,17,53,17,"owner"],[54,22,53,22],[54,23,53,23,"equals"],[54,29,53,29],[54,30,53,30,"owner"],[54,35,53,35],[54,36,53,36],[54,38,54,8],[54,44,54,14],[54,48,54,18,"TokenInvalidOwnerError"],[54,78,54,40],[54,79,54,41],[54,80,54,42],[55,4,55,4],[55,11,55,11,"account"],[55,18,55,18],[56,2,56,0],[57,0,56,1],[57,3]],"functionMap":{"names":["<global>","getOrCreateAssociatedTokenAccount"],"mappings":"AAA;OCqB;CDkC"}},"type":"js/module"}]}