{"dependencies":[{"name":"../utils.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":14,"column":19,"index":540},"end":{"line":14,"column":41,"index":562}}],"key":"Yc7DmwhweSDBIC4bv+r2fO8xp6U=","exportNames":["*"]}},{"name":"./curve.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":15,"column":19,"index":583},"end":{"line":15,"column":40,"index":604}}],"key":"D2lpvogjUpmMFXMnxIh5QgGQVQM=","exportNames":["*"]}},{"name":"./modular.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":21,"index":627},"end":{"line":16,"column":44,"index":650}}],"key":"pkHxIsiyj9LvPZma2E+OjOIbg7k=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.PrimeEdwardsPoint = void 0;\n  exports.edwards = edwards;\n  exports.eddsa = eddsa;\n  exports.twistedEdwards = twistedEdwards;\n  /**\n   * Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y².\n   * For design rationale of types / exports, see weierstrass module documentation.\n   * Untwisted Edwards curves exist, but they aren't used in real-world protocols.\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n  const utils_ts_1 = require(_dependencyMap[0], \"../utils.js\");\n  const curve_ts_1 = require(_dependencyMap[1], \"./curve.js\");\n  const modular_ts_1 = require(_dependencyMap[2], \"./modular.js\");\n  // Be friendly to bad ECMAScript parsers by not using bigint literals\n  // prettier-ignore\n  const _0n = BigInt(0),\n    _1n = BigInt(1),\n    _2n = BigInt(2),\n    _8n = BigInt(8);\n  function isEdValidXY(Fp, CURVE, x, y) {\n    const x2 = Fp.sqr(x);\n    const y2 = Fp.sqr(y);\n    const left = Fp.add(Fp.mul(CURVE.a, x2), y2);\n    const right = Fp.add(Fp.ONE, Fp.mul(CURVE.d, Fp.mul(x2, y2)));\n    return Fp.eql(left, right);\n  }\n  function edwards(params, extraOpts = {}) {\n    const validated = (0, curve_ts_1._createCurveFields)('edwards', params, extraOpts, extraOpts.FpFnLE);\n    const {\n      Fp,\n      Fn\n    } = validated;\n    let CURVE = validated.CURVE;\n    const {\n      h: cofactor\n    } = CURVE;\n    (0, utils_ts_1._validateObject)(extraOpts, {}, {\n      uvRatio: 'function'\n    });\n    // Important:\n    // There are some places where Fp.BYTES is used instead of nByteLength.\n    // So far, everything has been tested with curves of Fp.BYTES == nByteLength.\n    // TODO: test and find curves which behave otherwise.\n    const MASK = _2n << BigInt(Fn.BYTES * 8) - _1n;\n    const modP = n => Fp.create(n); // Function overrides\n    // sqrt(u/v)\n    const uvRatio = extraOpts.uvRatio || ((u, v) => {\n      try {\n        return {\n          isValid: true,\n          value: Fp.sqrt(Fp.div(u, v))\n        };\n      } catch (e) {\n        return {\n          isValid: false,\n          value: _0n\n        };\n      }\n    });\n    // Validate whether the passed curve params are valid.\n    // equation ax² + y² = 1 + dx²y² should work for generator point.\n    if (!isEdValidXY(Fp, CURVE, CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\n    /**\n     * Asserts coordinate is valid: 0 <= n < MASK.\n     * Coordinates >= Fp.ORDER are allowed for zip215.\n     */\n    function acoord(title, n, banZero = false) {\n      const min = banZero ? _1n : _0n;\n      (0, utils_ts_1.aInRange)('coordinate ' + title, n, min, MASK);\n      return n;\n    }\n    function aextpoint(other) {\n      if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n    }\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    const toAffineMemo = (0, utils_ts_1.memoized)((p, iz) => {\n      const {\n        X,\n        Y,\n        Z\n      } = p;\n      const is0 = p.is0();\n      if (iz == null) iz = is0 ? _8n : Fp.inv(Z); // 8 was chosen arbitrarily\n      const x = modP(X * iz);\n      const y = modP(Y * iz);\n      const zz = Fp.mul(Z, iz);\n      if (is0) return {\n        x: _0n,\n        y: _1n\n      };\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return {\n        x,\n        y\n      };\n    });\n    const assertValidMemo = (0, utils_ts_1.memoized)(p => {\n      const {\n        a,\n        d\n      } = CURVE;\n      if (p.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n      // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n      // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n      const {\n        X,\n        Y,\n        Z,\n        T\n      } = p;\n      const X2 = modP(X * X); // X²\n      const Y2 = modP(Y * Y); // Y²\n      const Z2 = modP(Z * Z); // Z²\n      const Z4 = modP(Z2 * Z2); // Z⁴\n      const aX2 = modP(X2 * a); // aX²\n      const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n      const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n      if (left !== right) throw new Error('bad point: equation left != right (1)');\n      // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n      const XY = modP(X * Y);\n      const ZT = modP(Z * T);\n      if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n      return true;\n    });\n    // Extended Point works in extended coordinates: (X, Y, Z, T) ∋ (x=X/Z, y=Y/Z, T=xy).\n    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n    class Point {\n      constructor(X, Y, Z, T) {\n        this.X = acoord('x', X);\n        this.Y = acoord('y', Y);\n        this.Z = acoord('z', Z, true);\n        this.T = acoord('t', T);\n        Object.freeze(this);\n      }\n      static CURVE() {\n        return CURVE;\n      }\n      static fromAffine(p) {\n        if (p instanceof Point) throw new Error('extended point not allowed');\n        const {\n          x,\n          y\n        } = p || {};\n        acoord('x', x);\n        acoord('y', y);\n        return new Point(x, y, _1n, modP(x * y));\n      }\n      // Uses algo from RFC8032 5.1.3.\n      static fromBytes(bytes, zip215 = false) {\n        const len = Fp.BYTES;\n        const {\n          a,\n          d\n        } = CURVE;\n        bytes = (0, utils_ts_1.copyBytes)((0, utils_ts_1._abytes2)(bytes, len, 'point'));\n        (0, utils_ts_1._abool2)(zip215, 'zip215');\n        const normed = (0, utils_ts_1.copyBytes)(bytes); // copy again, we'll manipulate it\n        const lastByte = bytes[len - 1]; // select last byte\n        normed[len - 1] = lastByte & ~0x80; // clear last bit\n        const y = (0, utils_ts_1.bytesToNumberLE)(normed);\n        // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n        // RFC8032 prohibits >= p, but ZIP215 doesn't\n        // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n        // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n        const max = zip215 ? MASK : Fp.ORDER;\n        (0, utils_ts_1.aInRange)('point.y', y, _0n, max);\n        // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n        // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n        const y2 = modP(y * y); // denominator is always non-0 mod p.\n        const u = modP(y2 - _1n); // u = y² - 1\n        const v = modP(d * y2 - a); // v = d y² + 1.\n        let {\n          isValid,\n          value: x\n        } = uvRatio(u, v); // √(u/v)\n        if (!isValid) throw new Error('bad point: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n        const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n        if (!zip215 && x === _0n && isLastByteOdd)\n          // if x=0 and x_0 = 1, fail\n          throw new Error('bad point: x=0 and x_0=1');\n        if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n        return Point.fromAffine({\n          x,\n          y\n        });\n      }\n      static fromHex(bytes, zip215 = false) {\n        return Point.fromBytes((0, utils_ts_1.ensureBytes)('point', bytes), zip215);\n      }\n      get x() {\n        return this.toAffine().x;\n      }\n      get y() {\n        return this.toAffine().y;\n      }\n      precompute(windowSize = 8, isLazy = true) {\n        wnaf.createCache(this, windowSize);\n        if (!isLazy) this.multiply(_2n); // random number\n        return this;\n      }\n      // Useful in fromAffine() - not for fromBytes(), which always created valid points.\n      assertValidity() {\n        assertValidMemo(this);\n      }\n      // Compare one point to another.\n      equals(other) {\n        aextpoint(other);\n        const {\n          X: X1,\n          Y: Y1,\n          Z: Z1\n        } = this;\n        const {\n          X: X2,\n          Y: Y2,\n          Z: Z2\n        } = other;\n        const X1Z2 = modP(X1 * Z2);\n        const X2Z1 = modP(X2 * Z1);\n        const Y1Z2 = modP(Y1 * Z2);\n        const Y2Z1 = modP(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n      }\n      is0() {\n        return this.equals(Point.ZERO);\n      }\n      negate() {\n        // Flips point sign to a negative one (-x, y in affine coords)\n        return new Point(modP(-this.X), this.Y, this.Z, modP(-this.T));\n      }\n      // Fast algo for doubling Extended Point.\n      // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n      // Cost: 4M + 4S + 1*a + 6add + 1*2.\n      double() {\n        const {\n          a\n        } = CURVE;\n        const {\n          X: X1,\n          Y: Y1,\n          Z: Z1\n        } = this;\n        const A = modP(X1 * X1); // A = X12\n        const B = modP(Y1 * Y1); // B = Y12\n        const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n        const D = modP(a * A); // D = a*A\n        const x1y1 = X1 + Y1;\n        const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n        const G = D + B; // G = D+B\n        const F = G - C; // F = G-C\n        const H = D - B; // H = D-B\n        const X3 = modP(E * F); // X3 = E*F\n        const Y3 = modP(G * H); // Y3 = G*H\n        const T3 = modP(E * H); // T3 = E*H\n        const Z3 = modP(F * G); // Z3 = F*G\n        return new Point(X3, Y3, Z3, T3);\n      }\n      // Fast algo for adding 2 Extended Points.\n      // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n      // Cost: 9M + 1*a + 1*d + 7add.\n      add(other) {\n        aextpoint(other);\n        const {\n          a,\n          d\n        } = CURVE;\n        const {\n          X: X1,\n          Y: Y1,\n          Z: Z1,\n          T: T1\n        } = this;\n        const {\n          X: X2,\n          Y: Y2,\n          Z: Z2,\n          T: T2\n        } = other;\n        const A = modP(X1 * X2); // A = X1*X2\n        const B = modP(Y1 * Y2); // B = Y1*Y2\n        const C = modP(T1 * d * T2); // C = T1*d*T2\n        const D = modP(Z1 * Z2); // D = Z1*Z2\n        const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n        const F = D - C; // F = D-C\n        const G = D + C; // G = D+C\n        const H = modP(B - a * A); // H = B-a*A\n        const X3 = modP(E * F); // X3 = E*F\n        const Y3 = modP(G * H); // Y3 = G*H\n        const T3 = modP(E * H); // T3 = E*H\n        const Z3 = modP(F * G); // Z3 = F*G\n        return new Point(X3, Y3, Z3, T3);\n      }\n      subtract(other) {\n        return this.add(other.negate());\n      }\n      // Constant-time multiplication.\n      multiply(scalar) {\n        // 1 <= scalar < L\n        if (!Fn.isValidNot0(scalar)) throw new Error('invalid scalar: expected 1 <= sc < curve.n');\n        const {\n          p,\n          f\n        } = wnaf.cached(this, scalar, p => (0, curve_ts_1.normalizeZ)(Point, p));\n        return (0, curve_ts_1.normalizeZ)(Point, [p, f])[0];\n      }\n      // Non-constant-time multiplication. Uses double-and-add algorithm.\n      // It's faster, but should only be used when you don't care about\n      // an exposed private key e.g. sig verification.\n      // Does NOT allow scalars higher than CURVE.n.\n      // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n      multiplyUnsafe(scalar, acc = Point.ZERO) {\n        // 0 <= scalar < L\n        if (!Fn.isValid(scalar)) throw new Error('invalid scalar: expected 0 <= sc < curve.n');\n        if (scalar === _0n) return Point.ZERO;\n        if (this.is0() || scalar === _1n) return this;\n        return wnaf.unsafe(this, scalar, p => (0, curve_ts_1.normalizeZ)(Point, p), acc);\n      }\n      // Checks if point is of small order.\n      // If you add something to small order point, you will have \"dirty\"\n      // point with torsion component.\n      // Multiplies point by cofactor and checks if the result is 0.\n      isSmallOrder() {\n        return this.multiplyUnsafe(cofactor).is0();\n      }\n      // Multiplies point by curve order and checks if the result is 0.\n      // Returns `false` is the point is dirty.\n      isTorsionFree() {\n        return wnaf.unsafe(this, CURVE.n).is0();\n      }\n      // Converts Extended point to default (x, y) coordinates.\n      // Can accept precomputed Z^-1 - for example, from invertBatch.\n      toAffine(invertedZ) {\n        return toAffineMemo(this, invertedZ);\n      }\n      clearCofactor() {\n        if (cofactor === _1n) return this;\n        return this.multiplyUnsafe(cofactor);\n      }\n      toBytes() {\n        const {\n          x,\n          y\n        } = this.toAffine();\n        // Fp.toBytes() allows non-canonical encoding of y (>= p).\n        const bytes = Fp.toBytes(y);\n        // Each y has 2 valid points: (x, y), (x,-y).\n        // When compressing, it's enough to store y and use the last byte to encode sign of x\n        bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0;\n        return bytes;\n      }\n      toHex() {\n        return (0, utils_ts_1.bytesToHex)(this.toBytes());\n      }\n      toString() {\n        return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n      }\n      // TODO: remove\n      get ex() {\n        return this.X;\n      }\n      get ey() {\n        return this.Y;\n      }\n      get ez() {\n        return this.Z;\n      }\n      get et() {\n        return this.T;\n      }\n      static normalizeZ(points) {\n        return (0, curve_ts_1.normalizeZ)(Point, points);\n      }\n      static msm(points, scalars) {\n        return (0, curve_ts_1.pippenger)(Point, Fn, points, scalars);\n      }\n      _setWindowSize(windowSize) {\n        this.precompute(windowSize);\n      }\n      toRawBytes() {\n        return this.toBytes();\n      }\n    }\n    // base / generator point\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    // zero / infinity / identity point\n    Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    // math field\n    Point.Fp = Fp;\n    // scalar field\n    Point.Fn = Fn;\n    const wnaf = new curve_ts_1.wNAF(Point, Fn.BITS);\n    Point.BASE.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    return Point;\n  }\n  /**\n   * Base class for prime-order points like Ristretto255 and Decaf448.\n   * These points eliminate cofactor issues by representing equivalence classes\n   * of Edwards curve points.\n   */\n  class PrimeEdwardsPoint {\n    constructor(ep) {\n      this.ep = ep;\n    }\n    // Static methods that must be implemented by subclasses\n    static fromBytes(_bytes) {\n      (0, utils_ts_1.notImplemented)();\n    }\n    static fromHex(_hex) {\n      (0, utils_ts_1.notImplemented)();\n    }\n    get x() {\n      return this.toAffine().x;\n    }\n    get y() {\n      return this.toAffine().y;\n    }\n    // Common implementations\n    clearCofactor() {\n      // no-op for prime-order groups\n      return this;\n    }\n    assertValidity() {\n      this.ep.assertValidity();\n    }\n    toAffine(invertedZ) {\n      return this.ep.toAffine(invertedZ);\n    }\n    toHex() {\n      return (0, utils_ts_1.bytesToHex)(this.toBytes());\n    }\n    toString() {\n      return this.toHex();\n    }\n    isTorsionFree() {\n      return true;\n    }\n    isSmallOrder() {\n      return false;\n    }\n    add(other) {\n      this.assertSame(other);\n      return this.init(this.ep.add(other.ep));\n    }\n    subtract(other) {\n      this.assertSame(other);\n      return this.init(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n      return this.init(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n      return this.init(this.ep.multiplyUnsafe(scalar));\n    }\n    double() {\n      return this.init(this.ep.double());\n    }\n    negate() {\n      return this.init(this.ep.negate());\n    }\n    precompute(windowSize, isLazy) {\n      return this.init(this.ep.precompute(windowSize, isLazy));\n    }\n    /** @deprecated use `toBytes` */\n    toRawBytes() {\n      return this.toBytes();\n    }\n  }\n  exports.PrimeEdwardsPoint = PrimeEdwardsPoint;\n  /**\n   * Initializes EdDSA signatures over given Edwards curve.\n   */\n  function eddsa(Point, cHash, eddsaOpts = {}) {\n    if (typeof cHash !== 'function') throw new Error('\"hash\" function param is required');\n    (0, utils_ts_1._validateObject)(eddsaOpts, {}, {\n      adjustScalarBytes: 'function',\n      randomBytes: 'function',\n      domain: 'function',\n      prehash: 'function',\n      mapToCurve: 'function'\n    });\n    const {\n      prehash\n    } = eddsaOpts;\n    const {\n      BASE,\n      Fp,\n      Fn\n    } = Point;\n    const randomBytes = eddsaOpts.randomBytes || utils_ts_1.randomBytes;\n    const adjustScalarBytes = eddsaOpts.adjustScalarBytes || (bytes => bytes);\n    const domain = eddsaOpts.domain || ((data, ctx, phflag) => {\n      (0, utils_ts_1._abool2)(phflag, 'phflag');\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n    // Little-endian SHA512 with modulo n\n    function modN_LE(hash) {\n      return Fn.create((0, utils_ts_1.bytesToNumberLE)(hash)); // Not Fn.fromBytes: it has length limit\n    }\n    // Get the hashed private scalar per RFC8032 5.1.5\n    function getPrivateScalar(key) {\n      const len = lengths.secretKey;\n      key = (0, utils_ts_1.ensureBytes)('private key', key, len);\n      // Hash private key with curve's hash function to produce uniformingly random input\n      // Check byte lengths: ensure(64, h(ensure(32, key)))\n      const hashed = (0, utils_ts_1.ensureBytes)('hashed private key', cHash(key), 2 * len);\n      const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n      const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n      const scalar = modN_LE(head); // The actual private scalar\n      return {\n        head,\n        prefix,\n        scalar\n      };\n    }\n    /** Convenience method that creates public key from scalar. RFC8032 5.1.5 */\n    function getExtendedPublicKey(secretKey) {\n      const {\n        head,\n        prefix,\n        scalar\n      } = getPrivateScalar(secretKey);\n      const point = BASE.multiply(scalar); // Point on Edwards curve aka public key\n      const pointBytes = point.toBytes();\n      return {\n        head,\n        prefix,\n        scalar,\n        point,\n        pointBytes\n      };\n    }\n    /** Calculates EdDSA pub key. RFC8032 5.1.5. */\n    function getPublicKey(secretKey) {\n      return getExtendedPublicKey(secretKey).pointBytes;\n    }\n    // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n    function hashDomainToScalar(context = Uint8Array.of(), ...msgs) {\n      const msg = (0, utils_ts_1.concatBytes)(...msgs);\n      return modN_LE(cHash(domain(msg, (0, utils_ts_1.ensureBytes)('context', context), !!prehash)));\n    }\n    /** Signs message with privateKey. RFC8032 5.1.6 */\n    function sign(msg, secretKey, options = {}) {\n      msg = (0, utils_ts_1.ensureBytes)('message', msg);\n      if (prehash) msg = prehash(msg); // for ed25519ph etc.\n      const {\n        prefix,\n        scalar,\n        pointBytes\n      } = getExtendedPublicKey(secretKey);\n      const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n      const R = BASE.multiply(r).toBytes(); // R = rG\n      const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n      const s = Fn.create(r + k * scalar); // S = (r + k * s) mod L\n      if (!Fn.isValid(s)) throw new Error('sign failed: invalid s'); // 0 <= s < L\n      const rs = (0, utils_ts_1.concatBytes)(R, Fn.toBytes(s));\n      return (0, utils_ts_1._abytes2)(rs, lengths.signature, 'result');\n    }\n    // verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\n    const verifyOpts = {\n      zip215: true\n    };\n    /**\n     * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n     * An extended group equation is checked.\n     */\n    function verify(sig, msg, publicKey, options = verifyOpts) {\n      const {\n        context,\n        zip215\n      } = options;\n      const len = lengths.signature;\n      sig = (0, utils_ts_1.ensureBytes)('signature', sig, len);\n      msg = (0, utils_ts_1.ensureBytes)('message', msg);\n      publicKey = (0, utils_ts_1.ensureBytes)('publicKey', publicKey, lengths.publicKey);\n      if (zip215 !== undefined) (0, utils_ts_1._abool2)(zip215, 'zip215');\n      if (prehash) msg = prehash(msg); // for ed25519ph, etc\n      const mid = len / 2;\n      const r = sig.subarray(0, mid);\n      const s = (0, utils_ts_1.bytesToNumberLE)(sig.subarray(mid, len));\n      let A, R, SB;\n      try {\n        // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n        // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n        // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n        A = Point.fromBytes(publicKey, zip215);\n        R = Point.fromBytes(r, zip215);\n        SB = BASE.multiplyUnsafe(s); // 0 <= s < l is done inside\n      } catch (error) {\n        return false;\n      }\n      if (!zip215 && A.isSmallOrder()) return false; // zip215 allows public keys of small order\n      const k = hashDomainToScalar(context, R.toBytes(), A.toBytes(), msg);\n      const RkA = R.add(A.multiplyUnsafe(k));\n      // Extended group equation\n      // [8][S]B = [8]R + [8][k]A'\n      return RkA.subtract(SB).clearCofactor().is0();\n    }\n    const _size = Fp.BYTES; // 32 for ed25519, 57 for ed448\n    const lengths = {\n      secretKey: _size,\n      publicKey: _size,\n      signature: 2 * _size,\n      seed: _size\n    };\n    function randomSecretKey(seed = randomBytes(lengths.seed)) {\n      return (0, utils_ts_1._abytes2)(seed, lengths.seed, 'seed');\n    }\n    function keygen(seed) {\n      const secretKey = utils.randomSecretKey(seed);\n      return {\n        secretKey,\n        publicKey: getPublicKey(secretKey)\n      };\n    }\n    function isValidSecretKey(key) {\n      return (0, utils_ts_1.isBytes)(key) && key.length === Fn.BYTES;\n    }\n    function isValidPublicKey(key, zip215) {\n      try {\n        return !!Point.fromBytes(key, zip215);\n      } catch (error) {\n        return false;\n      }\n    }\n    const utils = {\n      getExtendedPublicKey,\n      randomSecretKey,\n      isValidSecretKey,\n      isValidPublicKey,\n      /**\n       * Converts ed public key to x public key. Uses formula:\n       * - ed25519:\n       *   - `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n       *   - `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n       * - ed448:\n       *   - `(u, v) = ((y-1)/(y+1), sqrt(156324)*u/x)`\n       *   - `(x, y) = (sqrt(156324)*u/v, (1+u)/(1-u))`\n       */\n      toMontgomery(publicKey) {\n        const {\n          y\n        } = Point.fromBytes(publicKey);\n        const size = lengths.publicKey;\n        const is25519 = size === 32;\n        if (!is25519 && size !== 57) throw new Error('only defined for 25519 and 448');\n        const u = is25519 ? Fp.div(_1n + y, _1n - y) : Fp.div(y - _1n, y + _1n);\n        return Fp.toBytes(u);\n      },\n      toMontgomerySecret(secretKey) {\n        const size = lengths.secretKey;\n        (0, utils_ts_1._abytes2)(secretKey, size);\n        const hashed = cHash(secretKey.subarray(0, size));\n        return adjustScalarBytes(hashed).subarray(0, size);\n      },\n      /** @deprecated */\n      randomPrivateKey: randomSecretKey,\n      /** @deprecated */\n      precompute(windowSize = 8, point = Point.BASE) {\n        return point.precompute(windowSize, false);\n      }\n    };\n    return Object.freeze({\n      keygen,\n      getPublicKey,\n      sign,\n      verify,\n      utils,\n      Point,\n      lengths\n    });\n  }\n  function _eddsa_legacy_opts_to_new(c) {\n    const CURVE = {\n      a: c.a,\n      d: c.d,\n      p: c.Fp.ORDER,\n      n: c.n,\n      h: c.h,\n      Gx: c.Gx,\n      Gy: c.Gy\n    };\n    const Fp = c.Fp;\n    const Fn = (0, modular_ts_1.Field)(CURVE.n, c.nBitLength, true);\n    const curveOpts = {\n      Fp,\n      Fn,\n      uvRatio: c.uvRatio\n    };\n    const eddsaOpts = {\n      randomBytes: c.randomBytes,\n      adjustScalarBytes: c.adjustScalarBytes,\n      domain: c.domain,\n      prehash: c.prehash,\n      mapToCurve: c.mapToCurve\n    };\n    return {\n      CURVE,\n      curveOpts,\n      hash: c.hash,\n      eddsaOpts\n    };\n  }\n  function _eddsa_new_output_to_legacy(c, eddsa) {\n    const Point = eddsa.Point;\n    const legacy = Object.assign({}, eddsa, {\n      ExtendedPoint: Point,\n      CURVE: c,\n      nBitLength: Point.Fn.BITS,\n      nByteLength: Point.Fn.BYTES\n    });\n    return legacy;\n  }\n  // TODO: remove. Use eddsa\n  function twistedEdwards(c) {\n    const {\n      CURVE,\n      curveOpts,\n      hash,\n      eddsaOpts\n    } = _eddsa_legacy_opts_to_new(c);\n    const Point = edwards(CURVE, curveOpts);\n    const EDDSA = eddsa(Point, hash, eddsaOpts);\n    return _eddsa_new_output_to_legacy(c, EDDSA);\n  }\n});","lineCount":735,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"PrimeEdwardsPoint"],[7,27,3,25],[7,30,3,28],[7,35,3,33],[7,36,3,34],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"edwards"],[8,17,4,15],[8,20,4,18,"edwards"],[8,27,4,25],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"eddsa"],[9,15,5,13],[9,18,5,16,"eddsa"],[9,23,5,21],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"twistedEdwards"],[10,24,6,22],[10,27,6,25,"twistedEdwards"],[10,41,6,39],[11,2,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,0,11,0],[16,0,12,0],[17,2,13,0],[18,2,14,0],[18,8,14,6,"utils_ts_1"],[18,18,14,16],[18,21,14,19,"require"],[18,28,14,26],[18,29,14,26,"_dependencyMap"],[18,43,14,26],[18,61,14,40],[18,62,14,41],[19,2,15,0],[19,8,15,6,"curve_ts_1"],[19,18,15,16],[19,21,15,19,"require"],[19,28,15,26],[19,29,15,26,"_dependencyMap"],[19,43,15,26],[19,60,15,39],[19,61,15,40],[20,2,16,0],[20,8,16,6,"modular_ts_1"],[20,20,16,18],[20,23,16,21,"require"],[20,30,16,28],[20,31,16,28,"_dependencyMap"],[20,45,16,28],[20,64,16,43],[20,65,16,44],[21,2,17,0],[22,2,18,0],[23,2,19,0],[23,8,19,6,"_0n"],[23,11,19,9],[23,14,19,12,"BigInt"],[23,20,19,18],[23,21,19,19],[23,22,19,20],[23,23,19,21],[24,4,19,23,"_1n"],[24,7,19,26],[24,10,19,29,"BigInt"],[24,16,19,35],[24,17,19,36],[24,18,19,37],[24,19,19,38],[25,4,19,40,"_2n"],[25,7,19,43],[25,10,19,46,"BigInt"],[25,16,19,52],[25,17,19,53],[25,18,19,54],[25,19,19,55],[26,4,19,57,"_8n"],[26,7,19,60],[26,10,19,63,"BigInt"],[26,16,19,69],[26,17,19,70],[26,18,19,71],[26,19,19,72],[27,2,20,0],[27,11,20,9,"isEdValidXY"],[27,22,20,20,"isEdValidXY"],[27,23,20,21,"Fp"],[27,25,20,23],[27,27,20,25,"CURVE"],[27,32,20,30],[27,34,20,32,"x"],[27,35,20,33],[27,37,20,35,"y"],[27,38,20,36],[27,40,20,38],[28,4,21,4],[28,10,21,10,"x2"],[28,12,21,12],[28,15,21,15,"Fp"],[28,17,21,17],[28,18,21,18,"sqr"],[28,21,21,21],[28,22,21,22,"x"],[28,23,21,23],[28,24,21,24],[29,4,22,4],[29,10,22,10,"y2"],[29,12,22,12],[29,15,22,15,"Fp"],[29,17,22,17],[29,18,22,18,"sqr"],[29,21,22,21],[29,22,22,22,"y"],[29,23,22,23],[29,24,22,24],[30,4,23,4],[30,10,23,10,"left"],[30,14,23,14],[30,17,23,17,"Fp"],[30,19,23,19],[30,20,23,20,"add"],[30,23,23,23],[30,24,23,24,"Fp"],[30,26,23,26],[30,27,23,27,"mul"],[30,30,23,30],[30,31,23,31,"CURVE"],[30,36,23,36],[30,37,23,37,"a"],[30,38,23,38],[30,40,23,40,"x2"],[30,42,23,42],[30,43,23,43],[30,45,23,45,"y2"],[30,47,23,47],[30,48,23,48],[31,4,24,4],[31,10,24,10,"right"],[31,15,24,15],[31,18,24,18,"Fp"],[31,20,24,20],[31,21,24,21,"add"],[31,24,24,24],[31,25,24,25,"Fp"],[31,27,24,27],[31,28,24,28,"ONE"],[31,31,24,31],[31,33,24,33,"Fp"],[31,35,24,35],[31,36,24,36,"mul"],[31,39,24,39],[31,40,24,40,"CURVE"],[31,45,24,45],[31,46,24,46,"d"],[31,47,24,47],[31,49,24,49,"Fp"],[31,51,24,51],[31,52,24,52,"mul"],[31,55,24,55],[31,56,24,56,"x2"],[31,58,24,58],[31,60,24,60,"y2"],[31,62,24,62],[31,63,24,63],[31,64,24,64],[31,65,24,65],[32,4,25,4],[32,11,25,11,"Fp"],[32,13,25,13],[32,14,25,14,"eql"],[32,17,25,17],[32,18,25,18,"left"],[32,22,25,22],[32,24,25,24,"right"],[32,29,25,29],[32,30,25,30],[33,2,26,0],[34,2,27,0],[34,11,27,9,"edwards"],[34,18,27,16,"edwards"],[34,19,27,17,"params"],[34,25,27,23],[34,27,27,25,"extraOpts"],[34,36,27,34],[34,39,27,37],[34,40,27,38],[34,41,27,39],[34,43,27,41],[35,4,28,4],[35,10,28,10,"validated"],[35,19,28,19],[35,22,28,22],[35,23,28,23],[35,24,28,24],[35,26,28,26,"curve_ts_1"],[35,36,28,36],[35,37,28,37,"_createCurveFields"],[35,55,28,55],[35,57,28,57],[35,66,28,66],[35,68,28,68,"params"],[35,74,28,74],[35,76,28,76,"extraOpts"],[35,85,28,85],[35,87,28,87,"extraOpts"],[35,96,28,96],[35,97,28,97,"FpFnLE"],[35,103,28,103],[35,104,28,104],[36,4,29,4],[36,10,29,10],[37,6,29,12,"Fp"],[37,8,29,14],[38,6,29,16,"Fn"],[39,4,29,19],[39,5,29,20],[39,8,29,23,"validated"],[39,17,29,32],[40,4,30,4],[40,8,30,8,"CURVE"],[40,13,30,13],[40,16,30,16,"validated"],[40,25,30,25],[40,26,30,26,"CURVE"],[40,31,30,31],[41,4,31,4],[41,10,31,10],[42,6,31,12,"h"],[42,7,31,13],[42,9,31,15,"cofactor"],[43,4,31,24],[43,5,31,25],[43,8,31,28,"CURVE"],[43,13,31,33],[44,4,32,4],[44,5,32,5],[44,6,32,6],[44,8,32,8,"utils_ts_1"],[44,18,32,18],[44,19,32,19,"_validateObject"],[44,34,32,34],[44,36,32,36,"extraOpts"],[44,45,32,45],[44,47,32,47],[44,48,32,48],[44,49,32,49],[44,51,32,51],[45,6,32,53,"uvRatio"],[45,13,32,60],[45,15,32,62],[46,4,32,73],[46,5,32,74],[46,6,32,75],[47,4,33,4],[48,4,34,4],[49,4,35,4],[50,4,36,4],[51,4,37,4],[51,10,37,10,"MASK"],[51,14,37,14],[51,17,37,17,"_2n"],[51,20,37,20],[51,24,37,25,"BigInt"],[51,30,37,31],[51,31,37,32,"Fn"],[51,33,37,34],[51,34,37,35,"BYTES"],[51,39,37,40],[51,42,37,43],[51,43,37,44],[51,44,37,45],[51,47,37,48,"_1n"],[51,50,37,52],[52,4,38,4],[52,10,38,10,"modP"],[52,14,38,14],[52,17,38,18,"n"],[52,18,38,19],[52,22,38,24,"Fp"],[52,24,38,26],[52,25,38,27,"create"],[52,31,38,33],[52,32,38,34,"n"],[52,33,38,35],[52,34,38,36],[52,35,38,37],[52,36,38,38],[53,4,39,4],[54,4,40,4],[54,10,40,10,"uvRatio"],[54,17,40,17],[54,20,40,20,"extraOpts"],[54,29,40,29],[54,30,40,30,"uvRatio"],[54,37,40,37],[54,42,41,9],[54,43,41,10,"u"],[54,44,41,11],[54,46,41,13,"v"],[54,47,41,14],[54,52,41,19],[55,6,42,12],[55,10,42,16],[56,8,43,16],[56,15,43,23],[57,10,43,25,"isValid"],[57,17,43,32],[57,19,43,34],[57,23,43,38],[58,10,43,40,"value"],[58,15,43,45],[58,17,43,47,"Fp"],[58,19,43,49],[58,20,43,50,"sqrt"],[58,24,43,54],[58,25,43,55,"Fp"],[58,27,43,57],[58,28,43,58,"div"],[58,31,43,61],[58,32,43,62,"u"],[58,33,43,63],[58,35,43,65,"v"],[58,36,43,66],[58,37,43,67],[59,8,43,69],[59,9,43,70],[60,6,44,12],[60,7,44,13],[60,8,45,12],[60,15,45,19,"e"],[60,16,45,20],[60,18,45,22],[61,8,46,16],[61,15,46,23],[62,10,46,25,"isValid"],[62,17,46,32],[62,19,46,34],[62,24,46,39],[63,10,46,41,"value"],[63,15,46,46],[63,17,46,48,"_0n"],[64,8,46,52],[64,9,46,53],[65,6,47,12],[66,4,48,8],[66,5,48,9],[66,6,48,10],[67,4,49,4],[68,4,50,4],[69,4,51,4],[69,8,51,8],[69,9,51,9,"isEdValidXY"],[69,20,51,20],[69,21,51,21,"Fp"],[69,23,51,23],[69,25,51,25,"CURVE"],[69,30,51,30],[69,32,51,32,"CURVE"],[69,37,51,37],[69,38,51,38,"Gx"],[69,40,51,40],[69,42,51,42,"CURVE"],[69,47,51,47],[69,48,51,48,"Gy"],[69,50,51,50],[69,51,51,51],[69,53,52,8],[69,59,52,14],[69,63,52,18,"Error"],[69,68,52,23],[69,69,52,24],[69,104,52,59],[69,105,52,60],[70,4,53,4],[71,0,54,0],[72,0,55,0],[73,0,56,0],[74,4,57,4],[74,13,57,13,"acoord"],[74,19,57,19,"acoord"],[74,20,57,20,"title"],[74,25,57,25],[74,27,57,27,"n"],[74,28,57,28],[74,30,57,30,"banZero"],[74,37,57,37],[74,40,57,40],[74,45,57,45],[74,47,57,47],[75,6,58,8],[75,12,58,14,"min"],[75,15,58,17],[75,18,58,20,"banZero"],[75,25,58,27],[75,28,58,30,"_1n"],[75,31,58,33],[75,34,58,36,"_0n"],[75,37,58,39],[76,6,59,8],[76,7,59,9],[76,8,59,10],[76,10,59,12,"utils_ts_1"],[76,20,59,22],[76,21,59,23,"aInRange"],[76,29,59,31],[76,31,59,33],[76,44,59,46],[76,47,59,49,"title"],[76,52,59,54],[76,54,59,56,"n"],[76,55,59,57],[76,57,59,59,"min"],[76,60,59,62],[76,62,59,64,"MASK"],[76,66,59,68],[76,67,59,69],[77,6,60,8],[77,13,60,15,"n"],[77,14,60,16],[78,4,61,4],[79,4,62,4],[79,13,62,13,"aextpoint"],[79,22,62,22,"aextpoint"],[79,23,62,23,"other"],[79,28,62,28],[79,30,62,30],[80,6,63,8],[80,10,63,12],[80,12,63,14,"other"],[80,17,63,19],[80,29,63,31,"Point"],[80,34,63,36],[80,35,63,37],[80,37,64,12],[80,43,64,18],[80,47,64,22,"Error"],[80,52,64,27],[80,53,64,28],[80,77,64,52],[80,78,64,53],[81,4,65,4],[82,4,66,4],[83,4,67,4],[84,4,68,4],[84,10,68,10,"toAffineMemo"],[84,22,68,22],[84,25,68,25],[84,26,68,26],[84,27,68,27],[84,29,68,29,"utils_ts_1"],[84,39,68,39],[84,40,68,40,"memoized"],[84,48,68,48],[84,50,68,50],[84,51,68,51,"p"],[84,52,68,52],[84,54,68,54,"iz"],[84,56,68,56],[84,61,68,61],[85,6,69,8],[85,12,69,14],[86,8,69,16,"X"],[86,9,69,17],[87,8,69,19,"Y"],[87,9,69,20],[88,8,69,22,"Z"],[89,6,69,24],[89,7,69,25],[89,10,69,28,"p"],[89,11,69,29],[90,6,70,8],[90,12,70,14,"is0"],[90,15,70,17],[90,18,70,20,"p"],[90,19,70,21],[90,20,70,22,"is0"],[90,23,70,25],[90,24,70,26],[90,25,70,27],[91,6,71,8],[91,10,71,12,"iz"],[91,12,71,14],[91,16,71,18],[91,20,71,22],[91,22,72,12,"iz"],[91,24,72,14],[91,27,72,17,"is0"],[91,30,72,20],[91,33,72,23,"_8n"],[91,36,72,26],[91,39,72,29,"Fp"],[91,41,72,31],[91,42,72,32,"inv"],[91,45,72,35],[91,46,72,36,"Z"],[91,47,72,37],[91,48,72,38],[91,49,72,39],[91,50,72,40],[92,6,73,8],[92,12,73,14,"x"],[92,13,73,15],[92,16,73,18,"modP"],[92,20,73,22],[92,21,73,23,"X"],[92,22,73,24],[92,25,73,27,"iz"],[92,27,73,29],[92,28,73,30],[93,6,74,8],[93,12,74,14,"y"],[93,13,74,15],[93,16,74,18,"modP"],[93,20,74,22],[93,21,74,23,"Y"],[93,22,74,24],[93,25,74,27,"iz"],[93,27,74,29],[93,28,74,30],[94,6,75,8],[94,12,75,14,"zz"],[94,14,75,16],[94,17,75,19,"Fp"],[94,19,75,21],[94,20,75,22,"mul"],[94,23,75,25],[94,24,75,26,"Z"],[94,25,75,27],[94,27,75,29,"iz"],[94,29,75,31],[94,30,75,32],[95,6,76,8],[95,10,76,12,"is0"],[95,13,76,15],[95,15,77,12],[95,22,77,19],[96,8,77,21,"x"],[96,9,77,22],[96,11,77,24,"_0n"],[96,14,77,27],[97,8,77,29,"y"],[97,9,77,30],[97,11,77,32,"_1n"],[98,6,77,36],[98,7,77,37],[99,6,78,8],[99,10,78,12,"zz"],[99,12,78,14],[99,17,78,19,"_1n"],[99,20,78,22],[99,22,79,12],[99,28,79,18],[99,32,79,22,"Error"],[99,37,79,27],[99,38,79,28],[99,56,79,46],[99,57,79,47],[100,6,80,8],[100,13,80,15],[101,8,80,17,"x"],[101,9,80,18],[102,8,80,20,"y"],[103,6,80,22],[103,7,80,23],[104,4,81,4],[104,5,81,5],[104,6,81,6],[105,4,82,4],[105,10,82,10,"assertValidMemo"],[105,25,82,25],[105,28,82,28],[105,29,82,29],[105,30,82,30],[105,32,82,32,"utils_ts_1"],[105,42,82,42],[105,43,82,43,"memoized"],[105,51,82,51],[105,53,82,54,"p"],[105,54,82,55],[105,58,82,60],[106,6,83,8],[106,12,83,14],[107,8,83,16,"a"],[107,9,83,17],[108,8,83,19,"d"],[109,6,83,21],[109,7,83,22],[109,10,83,25,"CURVE"],[109,15,83,30],[110,6,84,8],[110,10,84,12,"p"],[110,11,84,13],[110,12,84,14,"is0"],[110,15,84,17],[110,16,84,18],[110,17,84,19],[110,19,85,12],[110,25,85,18],[110,29,85,22,"Error"],[110,34,85,27],[110,35,85,28],[110,52,85,45],[110,53,85,46],[110,54,85,47],[110,55,85,48],[111,6,86,8],[112,6,87,8],[113,6,88,8],[113,12,88,14],[114,8,88,16,"X"],[114,9,88,17],[115,8,88,19,"Y"],[115,9,88,20],[116,8,88,22,"Z"],[116,9,88,23],[117,8,88,25,"T"],[118,6,88,27],[118,7,88,28],[118,10,88,31,"p"],[118,11,88,32],[119,6,89,8],[119,12,89,14,"X2"],[119,14,89,16],[119,17,89,19,"modP"],[119,21,89,23],[119,22,89,24,"X"],[119,23,89,25],[119,26,89,28,"X"],[119,27,89,29],[119,28,89,30],[119,29,89,31],[119,30,89,32],[120,6,90,8],[120,12,90,14,"Y2"],[120,14,90,16],[120,17,90,19,"modP"],[120,21,90,23],[120,22,90,24,"Y"],[120,23,90,25],[120,26,90,28,"Y"],[120,27,90,29],[120,28,90,30],[120,29,90,31],[120,30,90,32],[121,6,91,8],[121,12,91,14,"Z2"],[121,14,91,16],[121,17,91,19,"modP"],[121,21,91,23],[121,22,91,24,"Z"],[121,23,91,25],[121,26,91,28,"Z"],[121,27,91,29],[121,28,91,30],[121,29,91,31],[121,30,91,32],[122,6,92,8],[122,12,92,14,"Z4"],[122,14,92,16],[122,17,92,19,"modP"],[122,21,92,23],[122,22,92,24,"Z2"],[122,24,92,26],[122,27,92,29,"Z2"],[122,29,92,31],[122,30,92,32],[122,31,92,33],[122,32,92,34],[123,6,93,8],[123,12,93,14,"aX2"],[123,15,93,17],[123,18,93,20,"modP"],[123,22,93,24],[123,23,93,25,"X2"],[123,25,93,27],[123,28,93,30,"a"],[123,29,93,31],[123,30,93,32],[123,31,93,33],[123,32,93,34],[124,6,94,8],[124,12,94,14,"left"],[124,16,94,18],[124,19,94,21,"modP"],[124,23,94,25],[124,24,94,26,"Z2"],[124,26,94,28],[124,29,94,31,"modP"],[124,33,94,35],[124,34,94,36,"aX2"],[124,37,94,39],[124,40,94,42,"Y2"],[124,42,94,44],[124,43,94,45],[124,44,94,46],[124,45,94,47],[124,46,94,48],[125,6,95,8],[125,12,95,14,"right"],[125,17,95,19],[125,20,95,22,"modP"],[125,24,95,26],[125,25,95,27,"Z4"],[125,27,95,29],[125,30,95,32,"modP"],[125,34,95,36],[125,35,95,37,"d"],[125,36,95,38],[125,39,95,41,"modP"],[125,43,95,45],[125,44,95,46,"X2"],[125,46,95,48],[125,49,95,51,"Y2"],[125,51,95,53],[125,52,95,54],[125,53,95,55],[125,54,95,56],[125,55,95,57],[125,56,95,58],[126,6,96,8],[126,10,96,12,"left"],[126,14,96,16],[126,19,96,21,"right"],[126,24,96,26],[126,26,97,12],[126,32,97,18],[126,36,97,22,"Error"],[126,41,97,27],[126,42,97,28],[126,81,97,67],[126,82,97,68],[127,6,98,8],[128,6,99,8],[128,12,99,14,"XY"],[128,14,99,16],[128,17,99,19,"modP"],[128,21,99,23],[128,22,99,24,"X"],[128,23,99,25],[128,26,99,28,"Y"],[128,27,99,29],[128,28,99,30],[129,6,100,8],[129,12,100,14,"ZT"],[129,14,100,16],[129,17,100,19,"modP"],[129,21,100,23],[129,22,100,24,"Z"],[129,23,100,25],[129,26,100,28,"T"],[129,27,100,29],[129,28,100,30],[130,6,101,8],[130,10,101,12,"XY"],[130,12,101,14],[130,17,101,19,"ZT"],[130,19,101,21],[130,21,102,12],[130,27,102,18],[130,31,102,22,"Error"],[130,36,102,27],[130,37,102,28],[130,76,102,67],[130,77,102,68],[131,6,103,8],[131,13,103,15],[131,17,103,19],[132,4,104,4],[132,5,104,5],[132,6,104,6],[133,4,105,4],[134,4,106,4],[135,4,107,4],[135,10,107,10,"Point"],[135,15,107,15],[135,16,107,16],[136,6,108,8,"constructor"],[136,17,108,19,"constructor"],[136,18,108,20,"X"],[136,19,108,21],[136,21,108,23,"Y"],[136,22,108,24],[136,24,108,26,"Z"],[136,25,108,27],[136,27,108,29,"T"],[136,28,108,30],[136,30,108,32],[137,8,109,12],[137,12,109,16],[137,13,109,17,"X"],[137,14,109,18],[137,17,109,21,"acoord"],[137,23,109,27],[137,24,109,28],[137,27,109,31],[137,29,109,33,"X"],[137,30,109,34],[137,31,109,35],[138,8,110,12],[138,12,110,16],[138,13,110,17,"Y"],[138,14,110,18],[138,17,110,21,"acoord"],[138,23,110,27],[138,24,110,28],[138,27,110,31],[138,29,110,33,"Y"],[138,30,110,34],[138,31,110,35],[139,8,111,12],[139,12,111,16],[139,13,111,17,"Z"],[139,14,111,18],[139,17,111,21,"acoord"],[139,23,111,27],[139,24,111,28],[139,27,111,31],[139,29,111,33,"Z"],[139,30,111,34],[139,32,111,36],[139,36,111,40],[139,37,111,41],[140,8,112,12],[140,12,112,16],[140,13,112,17,"T"],[140,14,112,18],[140,17,112,21,"acoord"],[140,23,112,27],[140,24,112,28],[140,27,112,31],[140,29,112,33,"T"],[140,30,112,34],[140,31,112,35],[141,8,113,12,"Object"],[141,14,113,18],[141,15,113,19,"freeze"],[141,21,113,25],[141,22,113,26],[141,26,113,30],[141,27,113,31],[142,6,114,8],[143,6,115,8],[143,13,115,15,"CURVE"],[143,18,115,20,"CURVE"],[143,19,115,20],[143,21,115,23],[144,8,116,12],[144,15,116,19,"CURVE"],[144,20,116,24],[145,6,117,8],[146,6,118,8],[146,13,118,15,"fromAffine"],[146,23,118,25,"fromAffine"],[146,24,118,26,"p"],[146,25,118,27],[146,27,118,29],[147,8,119,12],[147,12,119,16,"p"],[147,13,119,17],[147,25,119,29,"Point"],[147,30,119,34],[147,32,120,16],[147,38,120,22],[147,42,120,26,"Error"],[147,47,120,31],[147,48,120,32],[147,76,120,60],[147,77,120,61],[148,8,121,12],[148,14,121,18],[149,10,121,20,"x"],[149,11,121,21],[150,10,121,23,"y"],[151,8,121,25],[151,9,121,26],[151,12,121,29,"p"],[151,13,121,30],[151,17,121,34],[151,18,121,35],[151,19,121,36],[152,8,122,12,"acoord"],[152,14,122,18],[152,15,122,19],[152,18,122,22],[152,20,122,24,"x"],[152,21,122,25],[152,22,122,26],[153,8,123,12,"acoord"],[153,14,123,18],[153,15,123,19],[153,18,123,22],[153,20,123,24,"y"],[153,21,123,25],[153,22,123,26],[154,8,124,12],[154,15,124,19],[154,19,124,23,"Point"],[154,24,124,28],[154,25,124,29,"x"],[154,26,124,30],[154,28,124,32,"y"],[154,29,124,33],[154,31,124,35,"_1n"],[154,34,124,38],[154,36,124,40,"modP"],[154,40,124,44],[154,41,124,45,"x"],[154,42,124,46],[154,45,124,49,"y"],[154,46,124,50],[154,47,124,51],[154,48,124,52],[155,6,125,8],[156,6,126,8],[157,6,127,8],[157,13,127,15,"fromBytes"],[157,22,127,24,"fromBytes"],[157,23,127,25,"bytes"],[157,28,127,30],[157,30,127,32,"zip215"],[157,36,127,38],[157,39,127,41],[157,44,127,46],[157,46,127,48],[158,8,128,12],[158,14,128,18,"len"],[158,17,128,21],[158,20,128,24,"Fp"],[158,22,128,26],[158,23,128,27,"BYTES"],[158,28,128,32],[159,8,129,12],[159,14,129,18],[160,10,129,20,"a"],[160,11,129,21],[161,10,129,23,"d"],[162,8,129,25],[162,9,129,26],[162,12,129,29,"CURVE"],[162,17,129,34],[163,8,130,12,"bytes"],[163,13,130,17],[163,16,130,20],[163,17,130,21],[163,18,130,22],[163,20,130,24,"utils_ts_1"],[163,30,130,34],[163,31,130,35,"copyBytes"],[163,40,130,44],[163,42,130,46],[163,43,130,47],[163,44,130,48],[163,46,130,50,"utils_ts_1"],[163,56,130,60],[163,57,130,61,"_abytes2"],[163,65,130,69],[163,67,130,71,"bytes"],[163,72,130,76],[163,74,130,78,"len"],[163,77,130,81],[163,79,130,83],[163,86,130,90],[163,87,130,91],[163,88,130,92],[164,8,131,12],[164,9,131,13],[164,10,131,14],[164,12,131,16,"utils_ts_1"],[164,22,131,26],[164,23,131,27,"_abool2"],[164,30,131,34],[164,32,131,36,"zip215"],[164,38,131,42],[164,40,131,44],[164,48,131,52],[164,49,131,53],[165,8,132,12],[165,14,132,18,"normed"],[165,20,132,24],[165,23,132,27],[165,24,132,28],[165,25,132,29],[165,27,132,31,"utils_ts_1"],[165,37,132,41],[165,38,132,42,"copyBytes"],[165,47,132,51],[165,49,132,53,"bytes"],[165,54,132,58],[165,55,132,59],[165,56,132,60],[165,57,132,61],[166,8,133,12],[166,14,133,18,"lastByte"],[166,22,133,26],[166,25,133,29,"bytes"],[166,30,133,34],[166,31,133,35,"len"],[166,34,133,38],[166,37,133,41],[166,38,133,42],[166,39,133,43],[166,40,133,44],[166,41,133,45],[167,8,134,12,"normed"],[167,14,134,18],[167,15,134,19,"len"],[167,18,134,22],[167,21,134,25],[167,22,134,26],[167,23,134,27],[167,26,134,30,"lastByte"],[167,34,134,38],[167,37,134,41],[167,38,134,42],[167,42,134,46],[167,43,134,47],[167,44,134,48],[168,8,135,12],[168,14,135,18,"y"],[168,15,135,19],[168,18,135,22],[168,19,135,23],[168,20,135,24],[168,22,135,26,"utils_ts_1"],[168,32,135,36],[168,33,135,37,"bytesToNumberLE"],[168,48,135,52],[168,50,135,54,"normed"],[168,56,135,60],[168,57,135,61],[169,8,136,12],[170,8,137,12],[171,8,138,12],[172,8,139,12],[173,8,140,12],[173,14,140,18,"max"],[173,17,140,21],[173,20,140,24,"zip215"],[173,26,140,30],[173,29,140,33,"MASK"],[173,33,140,37],[173,36,140,40,"Fp"],[173,38,140,42],[173,39,140,43,"ORDER"],[173,44,140,48],[174,8,141,12],[174,9,141,13],[174,10,141,14],[174,12,141,16,"utils_ts_1"],[174,22,141,26],[174,23,141,27,"aInRange"],[174,31,141,35],[174,33,141,37],[174,42,141,46],[174,44,141,48,"y"],[174,45,141,49],[174,47,141,51,"_0n"],[174,50,141,54],[174,52,141,56,"max"],[174,55,141,59],[174,56,141,60],[175,8,142,12],[176,8,143,12],[177,8,144,12],[177,14,144,18,"y2"],[177,16,144,20],[177,19,144,23,"modP"],[177,23,144,27],[177,24,144,28,"y"],[177,25,144,29],[177,28,144,32,"y"],[177,29,144,33],[177,30,144,34],[177,31,144,35],[177,32,144,36],[178,8,145,12],[178,14,145,18,"u"],[178,15,145,19],[178,18,145,22,"modP"],[178,22,145,26],[178,23,145,27,"y2"],[178,25,145,29],[178,28,145,32,"_1n"],[178,31,145,35],[178,32,145,36],[178,33,145,37],[178,34,145,38],[179,8,146,12],[179,14,146,18,"v"],[179,15,146,19],[179,18,146,22,"modP"],[179,22,146,26],[179,23,146,27,"d"],[179,24,146,28],[179,27,146,31,"y2"],[179,29,146,33],[179,32,146,36,"a"],[179,33,146,37],[179,34,146,38],[179,35,146,39],[179,36,146,40],[180,8,147,12],[180,12,147,16],[181,10,147,18,"isValid"],[181,17,147,25],[182,10,147,27,"value"],[182,15,147,32],[182,17,147,34,"x"],[183,8,147,36],[183,9,147,37],[183,12,147,40,"uvRatio"],[183,19,147,47],[183,20,147,48,"u"],[183,21,147,49],[183,23,147,51,"v"],[183,24,147,52],[183,25,147,53],[183,26,147,54],[183,27,147,55],[184,8,148,12],[184,12,148,16],[184,13,148,17,"isValid"],[184,20,148,24],[184,22,149,16],[184,28,149,22],[184,32,149,26,"Error"],[184,37,149,31],[184,38,149,32],[184,71,149,65],[184,72,149,66],[185,8,150,12],[185,14,150,18,"isXOdd"],[185,20,150,24],[185,23,150,27],[185,24,150,28,"x"],[185,25,150,29],[185,28,150,32,"_1n"],[185,31,150,35],[185,37,150,41,"_1n"],[185,40,150,44],[185,41,150,45],[185,42,150,46],[186,8,151,12],[186,14,151,18,"isLastByteOdd"],[186,27,151,31],[186,30,151,34],[186,31,151,35,"lastByte"],[186,39,151,43],[186,42,151,46],[186,46,151,50],[186,52,151,56],[186,53,151,57],[186,54,151,58],[186,55,151,59],[187,8,152,12],[187,12,152,16],[187,13,152,17,"zip215"],[187,19,152,23],[187,23,152,27,"x"],[187,24,152,28],[187,29,152,33,"_0n"],[187,32,152,36],[187,36,152,40,"isLastByteOdd"],[187,49,152,53],[188,10,153,16],[189,10,154,16],[189,16,154,22],[189,20,154,26,"Error"],[189,25,154,31],[189,26,154,32],[189,52,154,58],[189,53,154,59],[190,8,155,12],[190,12,155,16,"isLastByteOdd"],[190,25,155,29],[190,30,155,34,"isXOdd"],[190,36,155,40],[190,38,156,16,"x"],[190,39,156,17],[190,42,156,20,"modP"],[190,46,156,24],[190,47,156,25],[190,48,156,26,"x"],[190,49,156,27],[190,50,156,28],[190,51,156,29],[190,52,156,30],[191,8,157,12],[191,15,157,19,"Point"],[191,20,157,24],[191,21,157,25,"fromAffine"],[191,31,157,35],[191,32,157,36],[192,10,157,38,"x"],[192,11,157,39],[193,10,157,41,"y"],[194,8,157,43],[194,9,157,44],[194,10,157,45],[195,6,158,8],[196,6,159,8],[196,13,159,15,"fromHex"],[196,20,159,22,"fromHex"],[196,21,159,23,"bytes"],[196,26,159,28],[196,28,159,30,"zip215"],[196,34,159,36],[196,37,159,39],[196,42,159,44],[196,44,159,46],[197,8,160,12],[197,15,160,19,"Point"],[197,20,160,24],[197,21,160,25,"fromBytes"],[197,30,160,34],[197,31,160,35],[197,32,160,36],[197,33,160,37],[197,35,160,39,"utils_ts_1"],[197,45,160,49],[197,46,160,50,"ensureBytes"],[197,57,160,61],[197,59,160,63],[197,66,160,70],[197,68,160,72,"bytes"],[197,73,160,77],[197,74,160,78],[197,76,160,80,"zip215"],[197,82,160,86],[197,83,160,87],[198,6,161,8],[199,6,162,8],[199,10,162,12,"x"],[199,11,162,13,"x"],[199,12,162,13],[199,14,162,16],[200,8,163,12],[200,15,163,19],[200,19,163,23],[200,20,163,24,"toAffine"],[200,28,163,32],[200,29,163,33],[200,30,163,34],[200,31,163,35,"x"],[200,32,163,36],[201,6,164,8],[202,6,165,8],[202,10,165,12,"y"],[202,11,165,13,"y"],[202,12,165,13],[202,14,165,16],[203,8,166,12],[203,15,166,19],[203,19,166,23],[203,20,166,24,"toAffine"],[203,28,166,32],[203,29,166,33],[203,30,166,34],[203,31,166,35,"y"],[203,32,166,36],[204,6,167,8],[205,6,168,8,"precompute"],[205,16,168,18,"precompute"],[205,17,168,19,"windowSize"],[205,27,168,29],[205,30,168,32],[205,31,168,33],[205,33,168,35,"isLazy"],[205,39,168,41],[205,42,168,44],[205,46,168,48],[205,48,168,50],[206,8,169,12,"wnaf"],[206,12,169,16],[206,13,169,17,"createCache"],[206,24,169,28],[206,25,169,29],[206,29,169,33],[206,31,169,35,"windowSize"],[206,41,169,45],[206,42,169,46],[207,8,170,12],[207,12,170,16],[207,13,170,17,"isLazy"],[207,19,170,23],[207,21,171,16],[207,25,171,20],[207,26,171,21,"multiply"],[207,34,171,29],[207,35,171,30,"_2n"],[207,38,171,33],[207,39,171,34],[207,40,171,35],[207,41,171,36],[208,8,172,12],[208,15,172,19],[208,19,172,23],[209,6,173,8],[210,6,174,8],[211,6,175,8,"assertValidity"],[211,20,175,22,"assertValidity"],[211,21,175,22],[211,23,175,25],[212,8,176,12,"assertValidMemo"],[212,23,176,27],[212,24,176,28],[212,28,176,32],[212,29,176,33],[213,6,177,8],[214,6,178,8],[215,6,179,8,"equals"],[215,12,179,14,"equals"],[215,13,179,15,"other"],[215,18,179,20],[215,20,179,22],[216,8,180,12,"aextpoint"],[216,17,180,21],[216,18,180,22,"other"],[216,23,180,27],[216,24,180,28],[217,8,181,12],[217,14,181,18],[218,10,181,20,"X"],[218,11,181,21],[218,13,181,23,"X1"],[218,15,181,25],[219,10,181,27,"Y"],[219,11,181,28],[219,13,181,30,"Y1"],[219,15,181,32],[220,10,181,34,"Z"],[220,11,181,35],[220,13,181,37,"Z1"],[221,8,181,40],[221,9,181,41],[221,12,181,44],[221,16,181,48],[222,8,182,12],[222,14,182,18],[223,10,182,20,"X"],[223,11,182,21],[223,13,182,23,"X2"],[223,15,182,25],[224,10,182,27,"Y"],[224,11,182,28],[224,13,182,30,"Y2"],[224,15,182,32],[225,10,182,34,"Z"],[225,11,182,35],[225,13,182,37,"Z2"],[226,8,182,40],[226,9,182,41],[226,12,182,44,"other"],[226,17,182,49],[227,8,183,12],[227,14,183,18,"X1Z2"],[227,18,183,22],[227,21,183,25,"modP"],[227,25,183,29],[227,26,183,30,"X1"],[227,28,183,32],[227,31,183,35,"Z2"],[227,33,183,37],[227,34,183,38],[228,8,184,12],[228,14,184,18,"X2Z1"],[228,18,184,22],[228,21,184,25,"modP"],[228,25,184,29],[228,26,184,30,"X2"],[228,28,184,32],[228,31,184,35,"Z1"],[228,33,184,37],[228,34,184,38],[229,8,185,12],[229,14,185,18,"Y1Z2"],[229,18,185,22],[229,21,185,25,"modP"],[229,25,185,29],[229,26,185,30,"Y1"],[229,28,185,32],[229,31,185,35,"Z2"],[229,33,185,37],[229,34,185,38],[230,8,186,12],[230,14,186,18,"Y2Z1"],[230,18,186,22],[230,21,186,25,"modP"],[230,25,186,29],[230,26,186,30,"Y2"],[230,28,186,32],[230,31,186,35,"Z1"],[230,33,186,37],[230,34,186,38],[231,8,187,12],[231,15,187,19,"X1Z2"],[231,19,187,23],[231,24,187,28,"X2Z1"],[231,28,187,32],[231,32,187,36,"Y1Z2"],[231,36,187,40],[231,41,187,45,"Y2Z1"],[231,45,187,49],[232,6,188,8],[233,6,189,8,"is0"],[233,9,189,11,"is0"],[233,10,189,11],[233,12,189,14],[234,8,190,12],[234,15,190,19],[234,19,190,23],[234,20,190,24,"equals"],[234,26,190,30],[234,27,190,31,"Point"],[234,32,190,36],[234,33,190,37,"ZERO"],[234,37,190,41],[234,38,190,42],[235,6,191,8],[236,6,192,8,"negate"],[236,12,192,14,"negate"],[236,13,192,14],[236,15,192,17],[237,8,193,12],[238,8,194,12],[238,15,194,19],[238,19,194,23,"Point"],[238,24,194,28],[238,25,194,29,"modP"],[238,29,194,33],[238,30,194,34],[238,31,194,35],[238,35,194,39],[238,36,194,40,"X"],[238,37,194,41],[238,38,194,42],[238,40,194,44],[238,44,194,48],[238,45,194,49,"Y"],[238,46,194,50],[238,48,194,52],[238,52,194,56],[238,53,194,57,"Z"],[238,54,194,58],[238,56,194,60,"modP"],[238,60,194,64],[238,61,194,65],[238,62,194,66],[238,66,194,70],[238,67,194,71,"T"],[238,68,194,72],[238,69,194,73],[238,70,194,74],[239,6,195,8],[240,6,196,8],[241,6,197,8],[242,6,198,8],[243,6,199,8,"double"],[243,12,199,14,"double"],[243,13,199,14],[243,15,199,17],[244,8,200,12],[244,14,200,18],[245,10,200,20,"a"],[246,8,200,22],[246,9,200,23],[246,12,200,26,"CURVE"],[246,17,200,31],[247,8,201,12],[247,14,201,18],[248,10,201,20,"X"],[248,11,201,21],[248,13,201,23,"X1"],[248,15,201,25],[249,10,201,27,"Y"],[249,11,201,28],[249,13,201,30,"Y1"],[249,15,201,32],[250,10,201,34,"Z"],[250,11,201,35],[250,13,201,37,"Z1"],[251,8,201,40],[251,9,201,41],[251,12,201,44],[251,16,201,48],[252,8,202,12],[252,14,202,18,"A"],[252,15,202,19],[252,18,202,22,"modP"],[252,22,202,26],[252,23,202,27,"X1"],[252,25,202,29],[252,28,202,32,"X1"],[252,30,202,34],[252,31,202,35],[252,32,202,36],[252,33,202,37],[253,8,203,12],[253,14,203,18,"B"],[253,15,203,19],[253,18,203,22,"modP"],[253,22,203,26],[253,23,203,27,"Y1"],[253,25,203,29],[253,28,203,32,"Y1"],[253,30,203,34],[253,31,203,35],[253,32,203,36],[253,33,203,37],[254,8,204,12],[254,14,204,18,"C"],[254,15,204,19],[254,18,204,22,"modP"],[254,22,204,26],[254,23,204,27,"_2n"],[254,26,204,30],[254,29,204,33,"modP"],[254,33,204,37],[254,34,204,38,"Z1"],[254,36,204,40],[254,39,204,43,"Z1"],[254,41,204,45],[254,42,204,46],[254,43,204,47],[254,44,204,48],[254,45,204,49],[255,8,205,12],[255,14,205,18,"D"],[255,15,205,19],[255,18,205,22,"modP"],[255,22,205,26],[255,23,205,27,"a"],[255,24,205,28],[255,27,205,31,"A"],[255,28,205,32],[255,29,205,33],[255,30,205,34],[255,31,205,35],[256,8,206,12],[256,14,206,18,"x1y1"],[256,18,206,22],[256,21,206,25,"X1"],[256,23,206,27],[256,26,206,30,"Y1"],[256,28,206,32],[257,8,207,12],[257,14,207,18,"E"],[257,15,207,19],[257,18,207,22,"modP"],[257,22,207,26],[257,23,207,27,"modP"],[257,27,207,31],[257,28,207,32,"x1y1"],[257,32,207,36],[257,35,207,39,"x1y1"],[257,39,207,43],[257,40,207,44],[257,43,207,47,"A"],[257,44,207,48],[257,47,207,51,"B"],[257,48,207,52],[257,49,207,53],[257,50,207,54],[257,51,207,55],[258,8,208,12],[258,14,208,18,"G"],[258,15,208,19],[258,18,208,22,"D"],[258,19,208,23],[258,22,208,26,"B"],[258,23,208,27],[258,24,208,28],[258,25,208,29],[259,8,209,12],[259,14,209,18,"F"],[259,15,209,19],[259,18,209,22,"G"],[259,19,209,23],[259,22,209,26,"C"],[259,23,209,27],[259,24,209,28],[259,25,209,29],[260,8,210,12],[260,14,210,18,"H"],[260,15,210,19],[260,18,210,22,"D"],[260,19,210,23],[260,22,210,26,"B"],[260,23,210,27],[260,24,210,28],[260,25,210,29],[261,8,211,12],[261,14,211,18,"X3"],[261,16,211,20],[261,19,211,23,"modP"],[261,23,211,27],[261,24,211,28,"E"],[261,25,211,29],[261,28,211,32,"F"],[261,29,211,33],[261,30,211,34],[261,31,211,35],[261,32,211,36],[262,8,212,12],[262,14,212,18,"Y3"],[262,16,212,20],[262,19,212,23,"modP"],[262,23,212,27],[262,24,212,28,"G"],[262,25,212,29],[262,28,212,32,"H"],[262,29,212,33],[262,30,212,34],[262,31,212,35],[262,32,212,36],[263,8,213,12],[263,14,213,18,"T3"],[263,16,213,20],[263,19,213,23,"modP"],[263,23,213,27],[263,24,213,28,"E"],[263,25,213,29],[263,28,213,32,"H"],[263,29,213,33],[263,30,213,34],[263,31,213,35],[263,32,213,36],[264,8,214,12],[264,14,214,18,"Z3"],[264,16,214,20],[264,19,214,23,"modP"],[264,23,214,27],[264,24,214,28,"F"],[264,25,214,29],[264,28,214,32,"G"],[264,29,214,33],[264,30,214,34],[264,31,214,35],[264,32,214,36],[265,8,215,12],[265,15,215,19],[265,19,215,23,"Point"],[265,24,215,28],[265,25,215,29,"X3"],[265,27,215,31],[265,29,215,33,"Y3"],[265,31,215,35],[265,33,215,37,"Z3"],[265,35,215,39],[265,37,215,41,"T3"],[265,39,215,43],[265,40,215,44],[266,6,216,8],[267,6,217,8],[268,6,218,8],[269,6,219,8],[270,6,220,8,"add"],[270,9,220,11,"add"],[270,10,220,12,"other"],[270,15,220,17],[270,17,220,19],[271,8,221,12,"aextpoint"],[271,17,221,21],[271,18,221,22,"other"],[271,23,221,27],[271,24,221,28],[272,8,222,12],[272,14,222,18],[273,10,222,20,"a"],[273,11,222,21],[274,10,222,23,"d"],[275,8,222,25],[275,9,222,26],[275,12,222,29,"CURVE"],[275,17,222,34],[276,8,223,12],[276,14,223,18],[277,10,223,20,"X"],[277,11,223,21],[277,13,223,23,"X1"],[277,15,223,25],[278,10,223,27,"Y"],[278,11,223,28],[278,13,223,30,"Y1"],[278,15,223,32],[279,10,223,34,"Z"],[279,11,223,35],[279,13,223,37,"Z1"],[279,15,223,39],[280,10,223,41,"T"],[280,11,223,42],[280,13,223,44,"T1"],[281,8,223,47],[281,9,223,48],[281,12,223,51],[281,16,223,55],[282,8,224,12],[282,14,224,18],[283,10,224,20,"X"],[283,11,224,21],[283,13,224,23,"X2"],[283,15,224,25],[284,10,224,27,"Y"],[284,11,224,28],[284,13,224,30,"Y2"],[284,15,224,32],[285,10,224,34,"Z"],[285,11,224,35],[285,13,224,37,"Z2"],[285,15,224,39],[286,10,224,41,"T"],[286,11,224,42],[286,13,224,44,"T2"],[287,8,224,47],[287,9,224,48],[287,12,224,51,"other"],[287,17,224,56],[288,8,225,12],[288,14,225,18,"A"],[288,15,225,19],[288,18,225,22,"modP"],[288,22,225,26],[288,23,225,27,"X1"],[288,25,225,29],[288,28,225,32,"X2"],[288,30,225,34],[288,31,225,35],[288,32,225,36],[288,33,225,37],[289,8,226,12],[289,14,226,18,"B"],[289,15,226,19],[289,18,226,22,"modP"],[289,22,226,26],[289,23,226,27,"Y1"],[289,25,226,29],[289,28,226,32,"Y2"],[289,30,226,34],[289,31,226,35],[289,32,226,36],[289,33,226,37],[290,8,227,12],[290,14,227,18,"C"],[290,15,227,19],[290,18,227,22,"modP"],[290,22,227,26],[290,23,227,27,"T1"],[290,25,227,29],[290,28,227,32,"d"],[290,29,227,33],[290,32,227,36,"T2"],[290,34,227,38],[290,35,227,39],[290,36,227,40],[290,37,227,41],[291,8,228,12],[291,14,228,18,"D"],[291,15,228,19],[291,18,228,22,"modP"],[291,22,228,26],[291,23,228,27,"Z1"],[291,25,228,29],[291,28,228,32,"Z2"],[291,30,228,34],[291,31,228,35],[291,32,228,36],[291,33,228,37],[292,8,229,12],[292,14,229,18,"E"],[292,15,229,19],[292,18,229,22,"modP"],[292,22,229,26],[292,23,229,27],[292,24,229,28,"X1"],[292,26,229,30],[292,29,229,33,"Y1"],[292,31,229,35],[292,36,229,40,"X2"],[292,38,229,42],[292,41,229,45,"Y2"],[292,43,229,47],[292,44,229,48],[292,47,229,51,"A"],[292,48,229,52],[292,51,229,55,"B"],[292,52,229,56],[292,53,229,57],[292,54,229,58],[292,55,229,59],[293,8,230,12],[293,14,230,18,"F"],[293,15,230,19],[293,18,230,22,"D"],[293,19,230,23],[293,22,230,26,"C"],[293,23,230,27],[293,24,230,28],[293,25,230,29],[294,8,231,12],[294,14,231,18,"G"],[294,15,231,19],[294,18,231,22,"D"],[294,19,231,23],[294,22,231,26,"C"],[294,23,231,27],[294,24,231,28],[294,25,231,29],[295,8,232,12],[295,14,232,18,"H"],[295,15,232,19],[295,18,232,22,"modP"],[295,22,232,26],[295,23,232,27,"B"],[295,24,232,28],[295,27,232,31,"a"],[295,28,232,32],[295,31,232,35,"A"],[295,32,232,36],[295,33,232,37],[295,34,232,38],[295,35,232,39],[296,8,233,12],[296,14,233,18,"X3"],[296,16,233,20],[296,19,233,23,"modP"],[296,23,233,27],[296,24,233,28,"E"],[296,25,233,29],[296,28,233,32,"F"],[296,29,233,33],[296,30,233,34],[296,31,233,35],[296,32,233,36],[297,8,234,12],[297,14,234,18,"Y3"],[297,16,234,20],[297,19,234,23,"modP"],[297,23,234,27],[297,24,234,28,"G"],[297,25,234,29],[297,28,234,32,"H"],[297,29,234,33],[297,30,234,34],[297,31,234,35],[297,32,234,36],[298,8,235,12],[298,14,235,18,"T3"],[298,16,235,20],[298,19,235,23,"modP"],[298,23,235,27],[298,24,235,28,"E"],[298,25,235,29],[298,28,235,32,"H"],[298,29,235,33],[298,30,235,34],[298,31,235,35],[298,32,235,36],[299,8,236,12],[299,14,236,18,"Z3"],[299,16,236,20],[299,19,236,23,"modP"],[299,23,236,27],[299,24,236,28,"F"],[299,25,236,29],[299,28,236,32,"G"],[299,29,236,33],[299,30,236,34],[299,31,236,35],[299,32,236,36],[300,8,237,12],[300,15,237,19],[300,19,237,23,"Point"],[300,24,237,28],[300,25,237,29,"X3"],[300,27,237,31],[300,29,237,33,"Y3"],[300,31,237,35],[300,33,237,37,"Z3"],[300,35,237,39],[300,37,237,41,"T3"],[300,39,237,43],[300,40,237,44],[301,6,238,8],[302,6,239,8,"subtract"],[302,14,239,16,"subtract"],[302,15,239,17,"other"],[302,20,239,22],[302,22,239,24],[303,8,240,12],[303,15,240,19],[303,19,240,23],[303,20,240,24,"add"],[303,23,240,27],[303,24,240,28,"other"],[303,29,240,33],[303,30,240,34,"negate"],[303,36,240,40],[303,37,240,41],[303,38,240,42],[303,39,240,43],[304,6,241,8],[305,6,242,8],[306,6,243,8,"multiply"],[306,14,243,16,"multiply"],[306,15,243,17,"scalar"],[306,21,243,23],[306,23,243,25],[307,8,244,12],[308,8,245,12],[308,12,245,16],[308,13,245,17,"Fn"],[308,15,245,19],[308,16,245,20,"isValidNot0"],[308,27,245,31],[308,28,245,32,"scalar"],[308,34,245,38],[308,35,245,39],[308,37,246,16],[308,43,246,22],[308,47,246,26,"Error"],[308,52,246,31],[308,53,246,32],[308,97,246,76],[308,98,246,77],[309,8,247,12],[309,14,247,18],[310,10,247,20,"p"],[310,11,247,21],[311,10,247,23,"f"],[312,8,247,25],[312,9,247,26],[312,12,247,29,"wnaf"],[312,16,247,33],[312,17,247,34,"cached"],[312,23,247,40],[312,24,247,41],[312,28,247,45],[312,30,247,47,"scalar"],[312,36,247,53],[312,38,247,56,"p"],[312,39,247,57],[312,43,247,62],[312,44,247,63],[312,45,247,64],[312,47,247,66,"curve_ts_1"],[312,57,247,76],[312,58,247,77,"normalizeZ"],[312,68,247,87],[312,70,247,89,"Point"],[312,75,247,94],[312,77,247,96,"p"],[312,78,247,97],[312,79,247,98],[312,80,247,99],[313,8,248,12],[313,15,248,19],[313,16,248,20],[313,17,248,21],[313,19,248,23,"curve_ts_1"],[313,29,248,33],[313,30,248,34,"normalizeZ"],[313,40,248,44],[313,42,248,46,"Point"],[313,47,248,51],[313,49,248,53],[313,50,248,54,"p"],[313,51,248,55],[313,53,248,57,"f"],[313,54,248,58],[313,55,248,59],[313,56,248,60],[313,57,248,61],[313,58,248,62],[313,59,248,63],[314,6,249,8],[315,6,250,8],[316,6,251,8],[317,6,252,8],[318,6,253,8],[319,6,254,8],[320,6,255,8,"multiplyUnsafe"],[320,20,255,22,"multiplyUnsafe"],[320,21,255,23,"scalar"],[320,27,255,29],[320,29,255,31,"acc"],[320,32,255,34],[320,35,255,37,"Point"],[320,40,255,42],[320,41,255,43,"ZERO"],[320,45,255,47],[320,47,255,49],[321,8,256,12],[322,8,257,12],[322,12,257,16],[322,13,257,17,"Fn"],[322,15,257,19],[322,16,257,20,"isValid"],[322,23,257,27],[322,24,257,28,"scalar"],[322,30,257,34],[322,31,257,35],[322,33,258,16],[322,39,258,22],[322,43,258,26,"Error"],[322,48,258,31],[322,49,258,32],[322,93,258,76],[322,94,258,77],[323,8,259,12],[323,12,259,16,"scalar"],[323,18,259,22],[323,23,259,27,"_0n"],[323,26,259,30],[323,28,260,16],[323,35,260,23,"Point"],[323,40,260,28],[323,41,260,29,"ZERO"],[323,45,260,33],[324,8,261,12],[324,12,261,16],[324,16,261,20],[324,17,261,21,"is0"],[324,20,261,24],[324,21,261,25],[324,22,261,26],[324,26,261,30,"scalar"],[324,32,261,36],[324,37,261,41,"_1n"],[324,40,261,44],[324,42,262,16],[324,49,262,23],[324,53,262,27],[325,8,263,12],[325,15,263,19,"wnaf"],[325,19,263,23],[325,20,263,24,"unsafe"],[325,26,263,30],[325,27,263,31],[325,31,263,35],[325,33,263,37,"scalar"],[325,39,263,43],[325,41,263,46,"p"],[325,42,263,47],[325,46,263,52],[325,47,263,53],[325,48,263,54],[325,50,263,56,"curve_ts_1"],[325,60,263,66],[325,61,263,67,"normalizeZ"],[325,71,263,77],[325,73,263,79,"Point"],[325,78,263,84],[325,80,263,86,"p"],[325,81,263,87],[325,82,263,88],[325,84,263,90,"acc"],[325,87,263,93],[325,88,263,94],[326,6,264,8],[327,6,265,8],[328,6,266,8],[329,6,267,8],[330,6,268,8],[331,6,269,8,"isSmallOrder"],[331,18,269,20,"isSmallOrder"],[331,19,269,20],[331,21,269,23],[332,8,270,12],[332,15,270,19],[332,19,270,23],[332,20,270,24,"multiplyUnsafe"],[332,34,270,38],[332,35,270,39,"cofactor"],[332,43,270,47],[332,44,270,48],[332,45,270,49,"is0"],[332,48,270,52],[332,49,270,53],[332,50,270,54],[333,6,271,8],[334,6,272,8],[335,6,273,8],[336,6,274,8,"isTorsionFree"],[336,19,274,21,"isTorsionFree"],[336,20,274,21],[336,22,274,24],[337,8,275,12],[337,15,275,19,"wnaf"],[337,19,275,23],[337,20,275,24,"unsafe"],[337,26,275,30],[337,27,275,31],[337,31,275,35],[337,33,275,37,"CURVE"],[337,38,275,42],[337,39,275,43,"n"],[337,40,275,44],[337,41,275,45],[337,42,275,46,"is0"],[337,45,275,49],[337,46,275,50],[337,47,275,51],[338,6,276,8],[339,6,277,8],[340,6,278,8],[341,6,279,8,"toAffine"],[341,14,279,16,"toAffine"],[341,15,279,17,"invertedZ"],[341,24,279,26],[341,26,279,28],[342,8,280,12],[342,15,280,19,"toAffineMemo"],[342,27,280,31],[342,28,280,32],[342,32,280,36],[342,34,280,38,"invertedZ"],[342,43,280,47],[342,44,280,48],[343,6,281,8],[344,6,282,8,"clearCofactor"],[344,19,282,21,"clearCofactor"],[344,20,282,21],[344,22,282,24],[345,8,283,12],[345,12,283,16,"cofactor"],[345,20,283,24],[345,25,283,29,"_1n"],[345,28,283,32],[345,30,284,16],[345,37,284,23],[345,41,284,27],[346,8,285,12],[346,15,285,19],[346,19,285,23],[346,20,285,24,"multiplyUnsafe"],[346,34,285,38],[346,35,285,39,"cofactor"],[346,43,285,47],[346,44,285,48],[347,6,286,8],[348,6,287,8,"toBytes"],[348,13,287,15,"toBytes"],[348,14,287,15],[348,16,287,18],[349,8,288,12],[349,14,288,18],[350,10,288,20,"x"],[350,11,288,21],[351,10,288,23,"y"],[352,8,288,25],[352,9,288,26],[352,12,288,29],[352,16,288,33],[352,17,288,34,"toAffine"],[352,25,288,42],[352,26,288,43],[352,27,288,44],[353,8,289,12],[354,8,290,12],[354,14,290,18,"bytes"],[354,19,290,23],[354,22,290,26,"Fp"],[354,24,290,28],[354,25,290,29,"toBytes"],[354,32,290,36],[354,33,290,37,"y"],[354,34,290,38],[354,35,290,39],[355,8,291,12],[356,8,292,12],[357,8,293,12,"bytes"],[357,13,293,17],[357,14,293,18,"bytes"],[357,19,293,23],[357,20,293,24,"length"],[357,26,293,30],[357,29,293,33],[357,30,293,34],[357,31,293,35],[357,35,293,39,"x"],[357,36,293,40],[357,39,293,43,"_1n"],[357,42,293,46],[357,45,293,49],[357,49,293,53],[357,52,293,56],[357,53,293,57],[358,8,294,12],[358,15,294,19,"bytes"],[358,20,294,24],[359,6,295,8],[360,6,296,8,"toHex"],[360,11,296,13,"toHex"],[360,12,296,13],[360,14,296,16],[361,8,297,12],[361,15,297,19],[361,16,297,20],[361,17,297,21],[361,19,297,23,"utils_ts_1"],[361,29,297,33],[361,30,297,34,"bytesToHex"],[361,40,297,44],[361,42,297,46],[361,46,297,50],[361,47,297,51,"toBytes"],[361,54,297,58],[361,55,297,59],[361,56,297,60],[361,57,297,61],[362,6,298,8],[363,6,299,8,"toString"],[363,14,299,16,"toString"],[363,15,299,16],[363,17,299,19],[364,8,300,12],[364,15,300,19],[364,25,300,29],[364,29,300,33],[364,30,300,34,"is0"],[364,33,300,37],[364,34,300,38],[364,35,300,39],[364,38,300,42],[364,44,300,48],[364,47,300,51],[364,51,300,55],[364,52,300,56,"toHex"],[364,57,300,61],[364,58,300,62],[364,59,300,63],[364,62,300,66],[365,6,301,8],[366,6,302,8],[367,6,303,8],[367,10,303,12,"ex"],[367,12,303,14,"ex"],[367,13,303,14],[367,15,303,17],[368,8,304,12],[368,15,304,19],[368,19,304,23],[368,20,304,24,"X"],[368,21,304,25],[369,6,305,8],[370,6,306,8],[370,10,306,12,"ey"],[370,12,306,14,"ey"],[370,13,306,14],[370,15,306,17],[371,8,307,12],[371,15,307,19],[371,19,307,23],[371,20,307,24,"Y"],[371,21,307,25],[372,6,308,8],[373,6,309,8],[373,10,309,12,"ez"],[373,12,309,14,"ez"],[373,13,309,14],[373,15,309,17],[374,8,310,12],[374,15,310,19],[374,19,310,23],[374,20,310,24,"Z"],[374,21,310,25],[375,6,311,8],[376,6,312,8],[376,10,312,12,"et"],[376,12,312,14,"et"],[376,13,312,14],[376,15,312,17],[377,8,313,12],[377,15,313,19],[377,19,313,23],[377,20,313,24,"T"],[377,21,313,25],[378,6,314,8],[379,6,315,8],[379,13,315,15,"normalizeZ"],[379,23,315,25,"normalizeZ"],[379,24,315,26,"points"],[379,30,315,32],[379,32,315,34],[380,8,316,12],[380,15,316,19],[380,16,316,20],[380,17,316,21],[380,19,316,23,"curve_ts_1"],[380,29,316,33],[380,30,316,34,"normalizeZ"],[380,40,316,44],[380,42,316,46,"Point"],[380,47,316,51],[380,49,316,53,"points"],[380,55,316,59],[380,56,316,60],[381,6,317,8],[382,6,318,8],[382,13,318,15,"msm"],[382,16,318,18,"msm"],[382,17,318,19,"points"],[382,23,318,25],[382,25,318,27,"scalars"],[382,32,318,34],[382,34,318,36],[383,8,319,12],[383,15,319,19],[383,16,319,20],[383,17,319,21],[383,19,319,23,"curve_ts_1"],[383,29,319,33],[383,30,319,34,"pippenger"],[383,39,319,43],[383,41,319,45,"Point"],[383,46,319,50],[383,48,319,52,"Fn"],[383,50,319,54],[383,52,319,56,"points"],[383,58,319,62],[383,60,319,64,"scalars"],[383,67,319,71],[383,68,319,72],[384,6,320,8],[385,6,321,8,"_setWindowSize"],[385,20,321,22,"_setWindowSize"],[385,21,321,23,"windowSize"],[385,31,321,33],[385,33,321,35],[386,8,322,12],[386,12,322,16],[386,13,322,17,"precompute"],[386,23,322,27],[386,24,322,28,"windowSize"],[386,34,322,38],[386,35,322,39],[387,6,323,8],[388,6,324,8,"toRawBytes"],[388,16,324,18,"toRawBytes"],[388,17,324,18],[388,19,324,21],[389,8,325,12],[389,15,325,19],[389,19,325,23],[389,20,325,24,"toBytes"],[389,27,325,31],[389,28,325,32],[389,29,325,33],[390,6,326,8],[391,4,327,4],[392,4,328,4],[393,4,329,4,"Point"],[393,9,329,9],[393,10,329,10,"BASE"],[393,14,329,14],[393,17,329,17],[393,21,329,21,"Point"],[393,26,329,26],[393,27,329,27,"CURVE"],[393,32,329,32],[393,33,329,33,"Gx"],[393,35,329,35],[393,37,329,37,"CURVE"],[393,42,329,42],[393,43,329,43,"Gy"],[393,45,329,45],[393,47,329,47,"_1n"],[393,50,329,50],[393,52,329,52,"modP"],[393,56,329,56],[393,57,329,57,"CURVE"],[393,62,329,62],[393,63,329,63,"Gx"],[393,65,329,65],[393,68,329,68,"CURVE"],[393,73,329,73],[393,74,329,74,"Gy"],[393,76,329,76],[393,77,329,77],[393,78,329,78],[394,4,330,4],[395,4,331,4,"Point"],[395,9,331,9],[395,10,331,10,"ZERO"],[395,14,331,14],[395,17,331,17],[395,21,331,21,"Point"],[395,26,331,26],[395,27,331,27,"_0n"],[395,30,331,30],[395,32,331,32,"_1n"],[395,35,331,35],[395,37,331,37,"_1n"],[395,40,331,40],[395,42,331,42,"_0n"],[395,45,331,45],[395,46,331,46],[395,47,331,47],[395,48,331,48],[396,4,332,4],[397,4,333,4,"Point"],[397,9,333,9],[397,10,333,10,"Fp"],[397,12,333,12],[397,15,333,15,"Fp"],[397,17,333,17],[398,4,334,4],[399,4,335,4,"Point"],[399,9,335,9],[399,10,335,10,"Fn"],[399,12,335,12],[399,15,335,15,"Fn"],[399,17,335,17],[400,4,336,4],[400,10,336,10,"wnaf"],[400,14,336,14],[400,17,336,17],[400,21,336,21,"curve_ts_1"],[400,31,336,31],[400,32,336,32,"wNAF"],[400,36,336,36],[400,37,336,37,"Point"],[400,42,336,42],[400,44,336,44,"Fn"],[400,46,336,46],[400,47,336,47,"BITS"],[400,51,336,51],[400,52,336,52],[401,4,337,4,"Point"],[401,9,337,9],[401,10,337,10,"BASE"],[401,14,337,14],[401,15,337,15,"precompute"],[401,25,337,25],[401,26,337,26],[401,27,337,27],[401,28,337,28],[401,29,337,29],[401,30,337,30],[402,4,338,4],[402,11,338,11,"Point"],[402,16,338,16],[403,2,339,0],[404,2,340,0],[405,0,341,0],[406,0,342,0],[407,0,343,0],[408,0,344,0],[409,2,345,0],[409,8,345,6,"PrimeEdwardsPoint"],[409,25,345,23],[409,26,345,24],[410,4,346,4,"constructor"],[410,15,346,15,"constructor"],[410,16,346,16,"ep"],[410,18,346,18],[410,20,346,20],[411,6,347,8],[411,10,347,12],[411,11,347,13,"ep"],[411,13,347,15],[411,16,347,18,"ep"],[411,18,347,20],[412,4,348,4],[413,4,349,4],[414,4,350,4],[414,11,350,11,"fromBytes"],[414,20,350,20,"fromBytes"],[414,21,350,21,"_bytes"],[414,27,350,27],[414,29,350,29],[415,6,351,8],[415,7,351,9],[415,8,351,10],[415,10,351,12,"utils_ts_1"],[415,20,351,22],[415,21,351,23,"notImplemented"],[415,35,351,37],[415,37,351,39],[415,38,351,40],[416,4,352,4],[417,4,353,4],[417,11,353,11,"fromHex"],[417,18,353,18,"fromHex"],[417,19,353,19,"_hex"],[417,23,353,23],[417,25,353,25],[418,6,354,8],[418,7,354,9],[418,8,354,10],[418,10,354,12,"utils_ts_1"],[418,20,354,22],[418,21,354,23,"notImplemented"],[418,35,354,37],[418,37,354,39],[418,38,354,40],[419,4,355,4],[420,4,356,4],[420,8,356,8,"x"],[420,9,356,9,"x"],[420,10,356,9],[420,12,356,12],[421,6,357,8],[421,13,357,15],[421,17,357,19],[421,18,357,20,"toAffine"],[421,26,357,28],[421,27,357,29],[421,28,357,30],[421,29,357,31,"x"],[421,30,357,32],[422,4,358,4],[423,4,359,4],[423,8,359,8,"y"],[423,9,359,9,"y"],[423,10,359,9],[423,12,359,12],[424,6,360,8],[424,13,360,15],[424,17,360,19],[424,18,360,20,"toAffine"],[424,26,360,28],[424,27,360,29],[424,28,360,30],[424,29,360,31,"y"],[424,30,360,32],[425,4,361,4],[426,4,362,4],[427,4,363,4,"clearCofactor"],[427,17,363,17,"clearCofactor"],[427,18,363,17],[427,20,363,20],[428,6,364,8],[429,6,365,8],[429,13,365,15],[429,17,365,19],[430,4,366,4],[431,4,367,4,"assertValidity"],[431,18,367,18,"assertValidity"],[431,19,367,18],[431,21,367,21],[432,6,368,8],[432,10,368,12],[432,11,368,13,"ep"],[432,13,368,15],[432,14,368,16,"assertValidity"],[432,28,368,30],[432,29,368,31],[432,30,368,32],[433,4,369,4],[434,4,370,4,"toAffine"],[434,12,370,12,"toAffine"],[434,13,370,13,"invertedZ"],[434,22,370,22],[434,24,370,24],[435,6,371,8],[435,13,371,15],[435,17,371,19],[435,18,371,20,"ep"],[435,20,371,22],[435,21,371,23,"toAffine"],[435,29,371,31],[435,30,371,32,"invertedZ"],[435,39,371,41],[435,40,371,42],[436,4,372,4],[437,4,373,4,"toHex"],[437,9,373,9,"toHex"],[437,10,373,9],[437,12,373,12],[438,6,374,8],[438,13,374,15],[438,14,374,16],[438,15,374,17],[438,17,374,19,"utils_ts_1"],[438,27,374,29],[438,28,374,30,"bytesToHex"],[438,38,374,40],[438,40,374,42],[438,44,374,46],[438,45,374,47,"toBytes"],[438,52,374,54],[438,53,374,55],[438,54,374,56],[438,55,374,57],[439,4,375,4],[440,4,376,4,"toString"],[440,12,376,12,"toString"],[440,13,376,12],[440,15,376,15],[441,6,377,8],[441,13,377,15],[441,17,377,19],[441,18,377,20,"toHex"],[441,23,377,25],[441,24,377,26],[441,25,377,27],[442,4,378,4],[443,4,379,4,"isTorsionFree"],[443,17,379,17,"isTorsionFree"],[443,18,379,17],[443,20,379,20],[444,6,380,8],[444,13,380,15],[444,17,380,19],[445,4,381,4],[446,4,382,4,"isSmallOrder"],[446,16,382,16,"isSmallOrder"],[446,17,382,16],[446,19,382,19],[447,6,383,8],[447,13,383,15],[447,18,383,20],[448,4,384,4],[449,4,385,4,"add"],[449,7,385,7,"add"],[449,8,385,8,"other"],[449,13,385,13],[449,15,385,15],[450,6,386,8],[450,10,386,12],[450,11,386,13,"assertSame"],[450,21,386,23],[450,22,386,24,"other"],[450,27,386,29],[450,28,386,30],[451,6,387,8],[451,13,387,15],[451,17,387,19],[451,18,387,20,"init"],[451,22,387,24],[451,23,387,25],[451,27,387,29],[451,28,387,30,"ep"],[451,30,387,32],[451,31,387,33,"add"],[451,34,387,36],[451,35,387,37,"other"],[451,40,387,42],[451,41,387,43,"ep"],[451,43,387,45],[451,44,387,46],[451,45,387,47],[452,4,388,4],[453,4,389,4,"subtract"],[453,12,389,12,"subtract"],[453,13,389,13,"other"],[453,18,389,18],[453,20,389,20],[454,6,390,8],[454,10,390,12],[454,11,390,13,"assertSame"],[454,21,390,23],[454,22,390,24,"other"],[454,27,390,29],[454,28,390,30],[455,6,391,8],[455,13,391,15],[455,17,391,19],[455,18,391,20,"init"],[455,22,391,24],[455,23,391,25],[455,27,391,29],[455,28,391,30,"ep"],[455,30,391,32],[455,31,391,33,"subtract"],[455,39,391,41],[455,40,391,42,"other"],[455,45,391,47],[455,46,391,48,"ep"],[455,48,391,50],[455,49,391,51],[455,50,391,52],[456,4,392,4],[457,4,393,4,"multiply"],[457,12,393,12,"multiply"],[457,13,393,13,"scalar"],[457,19,393,19],[457,21,393,21],[458,6,394,8],[458,13,394,15],[458,17,394,19],[458,18,394,20,"init"],[458,22,394,24],[458,23,394,25],[458,27,394,29],[458,28,394,30,"ep"],[458,30,394,32],[458,31,394,33,"multiply"],[458,39,394,41],[458,40,394,42,"scalar"],[458,46,394,48],[458,47,394,49],[458,48,394,50],[459,4,395,4],[460,4,396,4,"multiplyUnsafe"],[460,18,396,18,"multiplyUnsafe"],[460,19,396,19,"scalar"],[460,25,396,25],[460,27,396,27],[461,6,397,8],[461,13,397,15],[461,17,397,19],[461,18,397,20,"init"],[461,22,397,24],[461,23,397,25],[461,27,397,29],[461,28,397,30,"ep"],[461,30,397,32],[461,31,397,33,"multiplyUnsafe"],[461,45,397,47],[461,46,397,48,"scalar"],[461,52,397,54],[461,53,397,55],[461,54,397,56],[462,4,398,4],[463,4,399,4,"double"],[463,10,399,10,"double"],[463,11,399,10],[463,13,399,13],[464,6,400,8],[464,13,400,15],[464,17,400,19],[464,18,400,20,"init"],[464,22,400,24],[464,23,400,25],[464,27,400,29],[464,28,400,30,"ep"],[464,30,400,32],[464,31,400,33,"double"],[464,37,400,39],[464,38,400,40],[464,39,400,41],[464,40,400,42],[465,4,401,4],[466,4,402,4,"negate"],[466,10,402,10,"negate"],[466,11,402,10],[466,13,402,13],[467,6,403,8],[467,13,403,15],[467,17,403,19],[467,18,403,20,"init"],[467,22,403,24],[467,23,403,25],[467,27,403,29],[467,28,403,30,"ep"],[467,30,403,32],[467,31,403,33,"negate"],[467,37,403,39],[467,38,403,40],[467,39,403,41],[467,40,403,42],[468,4,404,4],[469,4,405,4,"precompute"],[469,14,405,14,"precompute"],[469,15,405,15,"windowSize"],[469,25,405,25],[469,27,405,27,"isLazy"],[469,33,405,33],[469,35,405,35],[470,6,406,8],[470,13,406,15],[470,17,406,19],[470,18,406,20,"init"],[470,22,406,24],[470,23,406,25],[470,27,406,29],[470,28,406,30,"ep"],[470,30,406,32],[470,31,406,33,"precompute"],[470,41,406,43],[470,42,406,44,"windowSize"],[470,52,406,54],[470,54,406,56,"isLazy"],[470,60,406,62],[470,61,406,63],[470,62,406,64],[471,4,407,4],[472,4,408,4],[473,4,409,4,"toRawBytes"],[473,14,409,14,"toRawBytes"],[473,15,409,14],[473,17,409,17],[474,6,410,8],[474,13,410,15],[474,17,410,19],[474,18,410,20,"toBytes"],[474,25,410,27],[474,26,410,28],[474,27,410,29],[475,4,411,4],[476,2,412,0],[477,2,413,0,"exports"],[477,9,413,7],[477,10,413,8,"PrimeEdwardsPoint"],[477,27,413,25],[477,30,413,28,"PrimeEdwardsPoint"],[477,47,413,45],[478,2,414,0],[479,0,415,0],[480,0,416,0],[481,2,417,0],[481,11,417,9,"eddsa"],[481,16,417,14,"eddsa"],[481,17,417,15,"Point"],[481,22,417,20],[481,24,417,22,"cHash"],[481,29,417,27],[481,31,417,29,"eddsaOpts"],[481,40,417,38],[481,43,417,41],[481,44,417,42],[481,45,417,43],[481,47,417,45],[482,4,418,4],[482,8,418,8],[482,15,418,15,"cHash"],[482,20,418,20],[482,25,418,25],[482,35,418,35],[482,37,419,8],[482,43,419,14],[482,47,419,18,"Error"],[482,52,419,23],[482,53,419,24],[482,88,419,59],[482,89,419,60],[483,4,420,4],[483,5,420,5],[483,6,420,6],[483,8,420,8,"utils_ts_1"],[483,18,420,18],[483,19,420,19,"_validateObject"],[483,34,420,34],[483,36,420,36,"eddsaOpts"],[483,45,420,45],[483,47,420,47],[483,48,420,48],[483,49,420,49],[483,51,420,51],[484,6,421,8,"adjustScalarBytes"],[484,23,421,25],[484,25,421,27],[484,35,421,37],[485,6,422,8,"randomBytes"],[485,17,422,19],[485,19,422,21],[485,29,422,31],[486,6,423,8,"domain"],[486,12,423,14],[486,14,423,16],[486,24,423,26],[487,6,424,8,"prehash"],[487,13,424,15],[487,15,424,17],[487,25,424,27],[488,6,425,8,"mapToCurve"],[488,16,425,18],[488,18,425,20],[489,4,426,4],[489,5,426,5],[489,6,426,6],[490,4,427,4],[490,10,427,10],[491,6,427,12,"prehash"],[492,4,427,20],[492,5,427,21],[492,8,427,24,"eddsaOpts"],[492,17,427,33],[493,4,428,4],[493,10,428,10],[494,6,428,12,"BASE"],[494,10,428,16],[495,6,428,18,"Fp"],[495,8,428,20],[496,6,428,22,"Fn"],[497,4,428,25],[497,5,428,26],[497,8,428,29,"Point"],[497,13,428,34],[498,4,429,4],[498,10,429,10,"randomBytes"],[498,21,429,21],[498,24,429,24,"eddsaOpts"],[498,33,429,33],[498,34,429,34,"randomBytes"],[498,45,429,45],[498,49,429,49,"utils_ts_1"],[498,59,429,59],[498,60,429,60,"randomBytes"],[498,71,429,71],[499,4,430,4],[499,10,430,10,"adjustScalarBytes"],[499,27,430,27],[499,30,430,30,"eddsaOpts"],[499,39,430,39],[499,40,430,40,"adjustScalarBytes"],[499,57,430,57],[499,62,430,63,"bytes"],[499,67,430,68],[499,71,430,73,"bytes"],[499,76,430,78],[499,77,430,79],[500,4,431,4],[500,10,431,10,"domain"],[500,16,431,16],[500,19,431,19,"eddsaOpts"],[500,28,431,28],[500,29,431,29,"domain"],[500,35,431,35],[500,40,432,9],[500,41,432,10,"data"],[500,45,432,14],[500,47,432,16,"ctx"],[500,50,432,19],[500,52,432,21,"phflag"],[500,58,432,27],[500,63,432,32],[501,6,433,12],[501,7,433,13],[501,8,433,14],[501,10,433,16,"utils_ts_1"],[501,20,433,26],[501,21,433,27,"_abool2"],[501,28,433,34],[501,30,433,36,"phflag"],[501,36,433,42],[501,38,433,44],[501,46,433,52],[501,47,433,53],[502,6,434,12],[502,10,434,16,"ctx"],[502,13,434,19],[502,14,434,20,"length"],[502,20,434,26],[502,24,434,30,"phflag"],[502,30,434,36],[502,32,435,16],[502,38,435,22],[502,42,435,26,"Error"],[502,47,435,31],[502,48,435,32],[502,85,435,69],[502,86,435,70],[503,6,436,12],[503,13,436,19,"data"],[503,17,436,23],[504,4,437,8],[504,5,437,9],[504,6,437,10],[504,7,437,11],[504,8,437,12],[505,4,438,4],[506,4,439,4],[506,13,439,13,"modN_LE"],[506,20,439,20,"modN_LE"],[506,21,439,21,"hash"],[506,25,439,25],[506,27,439,27],[507,6,440,8],[507,13,440,15,"Fn"],[507,15,440,17],[507,16,440,18,"create"],[507,22,440,24],[507,23,440,25],[507,24,440,26],[507,25,440,27],[507,27,440,29,"utils_ts_1"],[507,37,440,39],[507,38,440,40,"bytesToNumberLE"],[507,53,440,55],[507,55,440,57,"hash"],[507,59,440,61],[507,60,440,62],[507,61,440,63],[507,62,440,64],[507,63,440,65],[508,4,441,4],[509,4,442,4],[510,4,443,4],[510,13,443,13,"getPrivateScalar"],[510,29,443,29,"getPrivateScalar"],[510,30,443,30,"key"],[510,33,443,33],[510,35,443,35],[511,6,444,8],[511,12,444,14,"len"],[511,15,444,17],[511,18,444,20,"lengths"],[511,25,444,27],[511,26,444,28,"secretKey"],[511,35,444,37],[512,6,445,8,"key"],[512,9,445,11],[512,12,445,14],[512,13,445,15],[512,14,445,16],[512,16,445,18,"utils_ts_1"],[512,26,445,28],[512,27,445,29,"ensureBytes"],[512,38,445,40],[512,40,445,42],[512,53,445,55],[512,55,445,57,"key"],[512,58,445,60],[512,60,445,62,"len"],[512,63,445,65],[512,64,445,66],[513,6,446,8],[514,6,447,8],[515,6,448,8],[515,12,448,14,"hashed"],[515,18,448,20],[515,21,448,23],[515,22,448,24],[515,23,448,25],[515,25,448,27,"utils_ts_1"],[515,35,448,37],[515,36,448,38,"ensureBytes"],[515,47,448,49],[515,49,448,51],[515,69,448,71],[515,71,448,73,"cHash"],[515,76,448,78],[515,77,448,79,"key"],[515,80,448,82],[515,81,448,83],[515,83,448,85],[515,84,448,86],[515,87,448,89,"len"],[515,90,448,92],[515,91,448,93],[516,6,449,8],[516,12,449,14,"head"],[516,16,449,18],[516,19,449,21,"adjustScalarBytes"],[516,36,449,38],[516,37,449,39,"hashed"],[516,43,449,45],[516,44,449,46,"slice"],[516,49,449,51],[516,50,449,52],[516,51,449,53],[516,53,449,55,"len"],[516,56,449,58],[516,57,449,59],[516,58,449,60],[516,59,449,61],[516,60,449,62],[517,6,450,8],[517,12,450,14,"prefix"],[517,18,450,20],[517,21,450,23,"hashed"],[517,27,450,29],[517,28,450,30,"slice"],[517,33,450,35],[517,34,450,36,"len"],[517,37,450,39],[517,39,450,41],[517,40,450,42],[517,43,450,45,"len"],[517,46,450,48],[517,47,450,49],[517,48,450,50],[517,49,450,51],[518,6,451,8],[518,12,451,14,"scalar"],[518,18,451,20],[518,21,451,23,"modN_LE"],[518,28,451,30],[518,29,451,31,"head"],[518,33,451,35],[518,34,451,36],[518,35,451,37],[518,36,451,38],[519,6,452,8],[519,13,452,15],[520,8,452,17,"head"],[520,12,452,21],[521,8,452,23,"prefix"],[521,14,452,29],[522,8,452,31,"scalar"],[523,6,452,38],[523,7,452,39],[524,4,453,4],[525,4,454,4],[526,4,455,4],[526,13,455,13,"getExtendedPublicKey"],[526,33,455,33,"getExtendedPublicKey"],[526,34,455,34,"secretKey"],[526,43,455,43],[526,45,455,45],[527,6,456,8],[527,12,456,14],[528,8,456,16,"head"],[528,12,456,20],[529,8,456,22,"prefix"],[529,14,456,28],[530,8,456,30,"scalar"],[531,6,456,37],[531,7,456,38],[531,10,456,41,"getPrivateScalar"],[531,26,456,57],[531,27,456,58,"secretKey"],[531,36,456,67],[531,37,456,68],[532,6,457,8],[532,12,457,14,"point"],[532,17,457,19],[532,20,457,22,"BASE"],[532,24,457,26],[532,25,457,27,"multiply"],[532,33,457,35],[532,34,457,36,"scalar"],[532,40,457,42],[532,41,457,43],[532,42,457,44],[532,43,457,45],[533,6,458,8],[533,12,458,14,"pointBytes"],[533,22,458,24],[533,25,458,27,"point"],[533,30,458,32],[533,31,458,33,"toBytes"],[533,38,458,40],[533,39,458,41],[533,40,458,42],[534,6,459,8],[534,13,459,15],[535,8,459,17,"head"],[535,12,459,21],[536,8,459,23,"prefix"],[536,14,459,29],[537,8,459,31,"scalar"],[537,14,459,37],[538,8,459,39,"point"],[538,13,459,44],[539,8,459,46,"pointBytes"],[540,6,459,57],[540,7,459,58],[541,4,460,4],[542,4,461,4],[543,4,462,4],[543,13,462,13,"getPublicKey"],[543,25,462,25,"getPublicKey"],[543,26,462,26,"secretKey"],[543,35,462,35],[543,37,462,37],[544,6,463,8],[544,13,463,15,"getExtendedPublicKey"],[544,33,463,35],[544,34,463,36,"secretKey"],[544,43,463,45],[544,44,463,46],[544,45,463,47,"pointBytes"],[544,55,463,57],[545,4,464,4],[546,4,465,4],[547,4,466,4],[547,13,466,13,"hashDomainToScalar"],[547,31,466,31,"hashDomainToScalar"],[547,32,466,32,"context"],[547,39,466,39],[547,42,466,42,"Uint8Array"],[547,52,466,52],[547,53,466,53,"of"],[547,55,466,55],[547,56,466,56],[547,57,466,57],[547,59,466,59],[547,62,466,62,"msgs"],[547,66,466,66],[547,68,466,68],[548,6,467,8],[548,12,467,14,"msg"],[548,15,467,17],[548,18,467,20],[548,19,467,21],[548,20,467,22],[548,22,467,24,"utils_ts_1"],[548,32,467,34],[548,33,467,35,"concatBytes"],[548,44,467,46],[548,46,467,48],[548,49,467,51,"msgs"],[548,53,467,55],[548,54,467,56],[549,6,468,8],[549,13,468,15,"modN_LE"],[549,20,468,22],[549,21,468,23,"cHash"],[549,26,468,28],[549,27,468,29,"domain"],[549,33,468,35],[549,34,468,36,"msg"],[549,37,468,39],[549,39,468,41],[549,40,468,42],[549,41,468,43],[549,43,468,45,"utils_ts_1"],[549,53,468,55],[549,54,468,56,"ensureBytes"],[549,65,468,67],[549,67,468,69],[549,76,468,78],[549,78,468,80,"context"],[549,85,468,87],[549,86,468,88],[549,88,468,90],[549,89,468,91],[549,90,468,92,"prehash"],[549,97,468,99],[549,98,468,100],[549,99,468,101],[549,100,468,102],[550,4,469,4],[551,4,470,4],[552,4,471,4],[552,13,471,13,"sign"],[552,17,471,17,"sign"],[552,18,471,18,"msg"],[552,21,471,21],[552,23,471,23,"secretKey"],[552,32,471,32],[552,34,471,34,"options"],[552,41,471,41],[552,44,471,44],[552,45,471,45],[552,46,471,46],[552,48,471,48],[553,6,472,8,"msg"],[553,9,472,11],[553,12,472,14],[553,13,472,15],[553,14,472,16],[553,16,472,18,"utils_ts_1"],[553,26,472,28],[553,27,472,29,"ensureBytes"],[553,38,472,40],[553,40,472,42],[553,49,472,51],[553,51,472,53,"msg"],[553,54,472,56],[553,55,472,57],[554,6,473,8],[554,10,473,12,"prehash"],[554,17,473,19],[554,19,474,12,"msg"],[554,22,474,15],[554,25,474,18,"prehash"],[554,32,474,25],[554,33,474,26,"msg"],[554,36,474,29],[554,37,474,30],[554,38,474,31],[554,39,474,32],[555,6,475,8],[555,12,475,14],[556,8,475,16,"prefix"],[556,14,475,22],[557,8,475,24,"scalar"],[557,14,475,30],[558,8,475,32,"pointBytes"],[559,6,475,43],[559,7,475,44],[559,10,475,47,"getExtendedPublicKey"],[559,30,475,67],[559,31,475,68,"secretKey"],[559,40,475,77],[559,41,475,78],[560,6,476,8],[560,12,476,14,"r"],[560,13,476,15],[560,16,476,18,"hashDomainToScalar"],[560,34,476,36],[560,35,476,37,"options"],[560,42,476,44],[560,43,476,45,"context"],[560,50,476,52],[560,52,476,54,"prefix"],[560,58,476,60],[560,60,476,62,"msg"],[560,63,476,65],[560,64,476,66],[560,65,476,67],[560,66,476,68],[561,6,477,8],[561,12,477,14,"R"],[561,13,477,15],[561,16,477,18,"BASE"],[561,20,477,22],[561,21,477,23,"multiply"],[561,29,477,31],[561,30,477,32,"r"],[561,31,477,33],[561,32,477,34],[561,33,477,35,"toBytes"],[561,40,477,42],[561,41,477,43],[561,42,477,44],[561,43,477,45],[561,44,477,46],[562,6,478,8],[562,12,478,14,"k"],[562,13,478,15],[562,16,478,18,"hashDomainToScalar"],[562,34,478,36],[562,35,478,37,"options"],[562,42,478,44],[562,43,478,45,"context"],[562,50,478,52],[562,52,478,54,"R"],[562,53,478,55],[562,55,478,57,"pointBytes"],[562,65,478,67],[562,67,478,69,"msg"],[562,70,478,72],[562,71,478,73],[562,72,478,74],[562,73,478,75],[563,6,479,8],[563,12,479,14,"s"],[563,13,479,15],[563,16,479,18,"Fn"],[563,18,479,20],[563,19,479,21,"create"],[563,25,479,27],[563,26,479,28,"r"],[563,27,479,29],[563,30,479,32,"k"],[563,31,479,33],[563,34,479,36,"scalar"],[563,40,479,42],[563,41,479,43],[563,42,479,44],[563,43,479,45],[564,6,480,8],[564,10,480,12],[564,11,480,13,"Fn"],[564,13,480,15],[564,14,480,16,"isValid"],[564,21,480,23],[564,22,480,24,"s"],[564,23,480,25],[564,24,480,26],[564,26,481,12],[564,32,481,18],[564,36,481,22,"Error"],[564,41,481,27],[564,42,481,28],[564,66,481,52],[564,67,481,53],[564,68,481,54],[564,69,481,55],[565,6,482,8],[565,12,482,14,"rs"],[565,14,482,16],[565,17,482,19],[565,18,482,20],[565,19,482,21],[565,21,482,23,"utils_ts_1"],[565,31,482,33],[565,32,482,34,"concatBytes"],[565,43,482,45],[565,45,482,47,"R"],[565,46,482,48],[565,48,482,50,"Fn"],[565,50,482,52],[565,51,482,53,"toBytes"],[565,58,482,60],[565,59,482,61,"s"],[565,60,482,62],[565,61,482,63],[565,62,482,64],[566,6,483,8],[566,13,483,15],[566,14,483,16],[566,15,483,17],[566,17,483,19,"utils_ts_1"],[566,27,483,29],[566,28,483,30,"_abytes2"],[566,36,483,38],[566,38,483,40,"rs"],[566,40,483,42],[566,42,483,44,"lengths"],[566,49,483,51],[566,50,483,52,"signature"],[566,59,483,61],[566,61,483,63],[566,69,483,71],[566,70,483,72],[567,4,484,4],[568,4,485,4],[569,4,486,4],[569,10,486,10,"verifyOpts"],[569,20,486,20],[569,23,486,23],[570,6,486,25,"zip215"],[570,12,486,31],[570,14,486,33],[571,4,486,38],[571,5,486,39],[572,4,487,4],[573,0,488,0],[574,0,489,0],[575,0,490,0],[576,4,491,4],[576,13,491,13,"verify"],[576,19,491,19,"verify"],[576,20,491,20,"sig"],[576,23,491,23],[576,25,491,25,"msg"],[576,28,491,28],[576,30,491,30,"publicKey"],[576,39,491,39],[576,41,491,41,"options"],[576,48,491,48],[576,51,491,51,"verifyOpts"],[576,61,491,61],[576,63,491,63],[577,6,492,8],[577,12,492,14],[578,8,492,16,"context"],[578,15,492,23],[579,8,492,25,"zip215"],[580,6,492,32],[580,7,492,33],[580,10,492,36,"options"],[580,17,492,43],[581,6,493,8],[581,12,493,14,"len"],[581,15,493,17],[581,18,493,20,"lengths"],[581,25,493,27],[581,26,493,28,"signature"],[581,35,493,37],[582,6,494,8,"sig"],[582,9,494,11],[582,12,494,14],[582,13,494,15],[582,14,494,16],[582,16,494,18,"utils_ts_1"],[582,26,494,28],[582,27,494,29,"ensureBytes"],[582,38,494,40],[582,40,494,42],[582,51,494,53],[582,53,494,55,"sig"],[582,56,494,58],[582,58,494,60,"len"],[582,61,494,63],[582,62,494,64],[583,6,495,8,"msg"],[583,9,495,11],[583,12,495,14],[583,13,495,15],[583,14,495,16],[583,16,495,18,"utils_ts_1"],[583,26,495,28],[583,27,495,29,"ensureBytes"],[583,38,495,40],[583,40,495,42],[583,49,495,51],[583,51,495,53,"msg"],[583,54,495,56],[583,55,495,57],[584,6,496,8,"publicKey"],[584,15,496,17],[584,18,496,20],[584,19,496,21],[584,20,496,22],[584,22,496,24,"utils_ts_1"],[584,32,496,34],[584,33,496,35,"ensureBytes"],[584,44,496,46],[584,46,496,48],[584,57,496,59],[584,59,496,61,"publicKey"],[584,68,496,70],[584,70,496,72,"lengths"],[584,77,496,79],[584,78,496,80,"publicKey"],[584,87,496,89],[584,88,496,90],[585,6,497,8],[585,10,497,12,"zip215"],[585,16,497,18],[585,21,497,23,"undefined"],[585,30,497,32],[585,32,498,12],[585,33,498,13],[585,34,498,14],[585,36,498,16,"utils_ts_1"],[585,46,498,26],[585,47,498,27,"_abool2"],[585,54,498,34],[585,56,498,36,"zip215"],[585,62,498,42],[585,64,498,44],[585,72,498,52],[585,73,498,53],[586,6,499,8],[586,10,499,12,"prehash"],[586,17,499,19],[586,19,500,12,"msg"],[586,22,500,15],[586,25,500,18,"prehash"],[586,32,500,25],[586,33,500,26,"msg"],[586,36,500,29],[586,37,500,30],[586,38,500,31],[586,39,500,32],[587,6,501,8],[587,12,501,14,"mid"],[587,15,501,17],[587,18,501,20,"len"],[587,21,501,23],[587,24,501,26],[587,25,501,27],[588,6,502,8],[588,12,502,14,"r"],[588,13,502,15],[588,16,502,18,"sig"],[588,19,502,21],[588,20,502,22,"subarray"],[588,28,502,30],[588,29,502,31],[588,30,502,32],[588,32,502,34,"mid"],[588,35,502,37],[588,36,502,38],[589,6,503,8],[589,12,503,14,"s"],[589,13,503,15],[589,16,503,18],[589,17,503,19],[589,18,503,20],[589,20,503,22,"utils_ts_1"],[589,30,503,32],[589,31,503,33,"bytesToNumberLE"],[589,46,503,48],[589,48,503,50,"sig"],[589,51,503,53],[589,52,503,54,"subarray"],[589,60,503,62],[589,61,503,63,"mid"],[589,64,503,66],[589,66,503,68,"len"],[589,69,503,71],[589,70,503,72],[589,71,503,73],[590,6,504,8],[590,10,504,12,"A"],[590,11,504,13],[590,13,504,15,"R"],[590,14,504,16],[590,16,504,18,"SB"],[590,18,504,20],[591,6,505,8],[591,10,505,12],[592,8,506,12],[593,8,507,12],[594,8,508,12],[595,8,509,12,"A"],[595,9,509,13],[595,12,509,16,"Point"],[595,17,509,21],[595,18,509,22,"fromBytes"],[595,27,509,31],[595,28,509,32,"publicKey"],[595,37,509,41],[595,39,509,43,"zip215"],[595,45,509,49],[595,46,509,50],[596,8,510,12,"R"],[596,9,510,13],[596,12,510,16,"Point"],[596,17,510,21],[596,18,510,22,"fromBytes"],[596,27,510,31],[596,28,510,32,"r"],[596,29,510,33],[596,31,510,35,"zip215"],[596,37,510,41],[596,38,510,42],[597,8,511,12,"SB"],[597,10,511,14],[597,13,511,17,"BASE"],[597,17,511,21],[597,18,511,22,"multiplyUnsafe"],[597,32,511,36],[597,33,511,37,"s"],[597,34,511,38],[597,35,511,39],[597,36,511,40],[597,37,511,41],[598,6,512,8],[598,7,512,9],[598,8,513,8],[598,15,513,15,"error"],[598,20,513,20],[598,22,513,22],[599,8,514,12],[599,15,514,19],[599,20,514,24],[600,6,515,8],[601,6,516,8],[601,10,516,12],[601,11,516,13,"zip215"],[601,17,516,19],[601,21,516,23,"A"],[601,22,516,24],[601,23,516,25,"isSmallOrder"],[601,35,516,37],[601,36,516,38],[601,37,516,39],[601,39,517,12],[601,46,517,19],[601,51,517,24],[601,52,517,25],[601,53,517,26],[602,6,518,8],[602,12,518,14,"k"],[602,13,518,15],[602,16,518,18,"hashDomainToScalar"],[602,34,518,36],[602,35,518,37,"context"],[602,42,518,44],[602,44,518,46,"R"],[602,45,518,47],[602,46,518,48,"toBytes"],[602,53,518,55],[602,54,518,56],[602,55,518,57],[602,57,518,59,"A"],[602,58,518,60],[602,59,518,61,"toBytes"],[602,66,518,68],[602,67,518,69],[602,68,518,70],[602,70,518,72,"msg"],[602,73,518,75],[602,74,518,76],[603,6,519,8],[603,12,519,14,"RkA"],[603,15,519,17],[603,18,519,20,"R"],[603,19,519,21],[603,20,519,22,"add"],[603,23,519,25],[603,24,519,26,"A"],[603,25,519,27],[603,26,519,28,"multiplyUnsafe"],[603,40,519,42],[603,41,519,43,"k"],[603,42,519,44],[603,43,519,45],[603,44,519,46],[604,6,520,8],[605,6,521,8],[606,6,522,8],[606,13,522,15,"RkA"],[606,16,522,18],[606,17,522,19,"subtract"],[606,25,522,27],[606,26,522,28,"SB"],[606,28,522,30],[606,29,522,31],[606,30,522,32,"clearCofactor"],[606,43,522,45],[606,44,522,46],[606,45,522,47],[606,46,522,48,"is0"],[606,49,522,51],[606,50,522,52],[606,51,522,53],[607,4,523,4],[608,4,524,4],[608,10,524,10,"_size"],[608,15,524,15],[608,18,524,18,"Fp"],[608,20,524,20],[608,21,524,21,"BYTES"],[608,26,524,26],[608,27,524,27],[608,28,524,28],[609,4,525,4],[609,10,525,10,"lengths"],[609,17,525,17],[609,20,525,20],[610,6,526,8,"secretKey"],[610,15,526,17],[610,17,526,19,"_size"],[610,22,526,24],[611,6,527,8,"publicKey"],[611,15,527,17],[611,17,527,19,"_size"],[611,22,527,24],[612,6,528,8,"signature"],[612,15,528,17],[612,17,528,19],[612,18,528,20],[612,21,528,23,"_size"],[612,26,528,28],[613,6,529,8,"seed"],[613,10,529,12],[613,12,529,14,"_size"],[614,4,530,4],[614,5,530,5],[615,4,531,4],[615,13,531,13,"randomSecretKey"],[615,28,531,28,"randomSecretKey"],[615,29,531,29,"seed"],[615,33,531,33],[615,36,531,36,"randomBytes"],[615,47,531,47],[615,48,531,48,"lengths"],[615,55,531,55],[615,56,531,56,"seed"],[615,60,531,60],[615,61,531,61],[615,63,531,63],[616,6,532,8],[616,13,532,15],[616,14,532,16],[616,15,532,17],[616,17,532,19,"utils_ts_1"],[616,27,532,29],[616,28,532,30,"_abytes2"],[616,36,532,38],[616,38,532,40,"seed"],[616,42,532,44],[616,44,532,46,"lengths"],[616,51,532,53],[616,52,532,54,"seed"],[616,56,532,58],[616,58,532,60],[616,64,532,66],[616,65,532,67],[617,4,533,4],[618,4,534,4],[618,13,534,13,"keygen"],[618,19,534,19,"keygen"],[618,20,534,20,"seed"],[618,24,534,24],[618,26,534,26],[619,6,535,8],[619,12,535,14,"secretKey"],[619,21,535,23],[619,24,535,26,"utils"],[619,29,535,31],[619,30,535,32,"randomSecretKey"],[619,45,535,47],[619,46,535,48,"seed"],[619,50,535,52],[619,51,535,53],[620,6,536,8],[620,13,536,15],[621,8,536,17,"secretKey"],[621,17,536,26],[622,8,536,28,"publicKey"],[622,17,536,37],[622,19,536,39,"getPublicKey"],[622,31,536,51],[622,32,536,52,"secretKey"],[622,41,536,61],[623,6,536,63],[623,7,536,64],[624,4,537,4],[625,4,538,4],[625,13,538,13,"isValidSecretKey"],[625,29,538,29,"isValidSecretKey"],[625,30,538,30,"key"],[625,33,538,33],[625,35,538,35],[626,6,539,8],[626,13,539,15],[626,14,539,16],[626,15,539,17],[626,17,539,19,"utils_ts_1"],[626,27,539,29],[626,28,539,30,"isBytes"],[626,35,539,37],[626,37,539,39,"key"],[626,40,539,42],[626,41,539,43],[626,45,539,47,"key"],[626,48,539,50],[626,49,539,51,"length"],[626,55,539,57],[626,60,539,62,"Fn"],[626,62,539,64],[626,63,539,65,"BYTES"],[626,68,539,70],[627,4,540,4],[628,4,541,4],[628,13,541,13,"isValidPublicKey"],[628,29,541,29,"isValidPublicKey"],[628,30,541,30,"key"],[628,33,541,33],[628,35,541,35,"zip215"],[628,41,541,41],[628,43,541,43],[629,6,542,8],[629,10,542,12],[630,8,543,12],[630,15,543,19],[630,16,543,20],[630,17,543,21,"Point"],[630,22,543,26],[630,23,543,27,"fromBytes"],[630,32,543,36],[630,33,543,37,"key"],[630,36,543,40],[630,38,543,42,"zip215"],[630,44,543,48],[630,45,543,49],[631,6,544,8],[631,7,544,9],[631,8,545,8],[631,15,545,15,"error"],[631,20,545,20],[631,22,545,22],[632,8,546,12],[632,15,546,19],[632,20,546,24],[633,6,547,8],[634,4,548,4],[635,4,549,4],[635,10,549,10,"utils"],[635,15,549,15],[635,18,549,18],[636,6,550,8,"getExtendedPublicKey"],[636,26,550,28],[637,6,551,8,"randomSecretKey"],[637,21,551,23],[638,6,552,8,"isValidSecretKey"],[638,22,552,24],[639,6,553,8,"isValidPublicKey"],[639,22,553,24],[640,6,554,8],[641,0,555,0],[642,0,556,0],[643,0,557,0],[644,0,558,0],[645,0,559,0],[646,0,560,0],[647,0,561,0],[648,0,562,0],[649,6,563,8,"toMontgomery"],[649,18,563,20,"toMontgomery"],[649,19,563,21,"publicKey"],[649,28,563,30],[649,30,563,32],[650,8,564,12],[650,14,564,18],[651,10,564,20,"y"],[652,8,564,22],[652,9,564,23],[652,12,564,26,"Point"],[652,17,564,31],[652,18,564,32,"fromBytes"],[652,27,564,41],[652,28,564,42,"publicKey"],[652,37,564,51],[652,38,564,52],[653,8,565,12],[653,14,565,18,"size"],[653,18,565,22],[653,21,565,25,"lengths"],[653,28,565,32],[653,29,565,33,"publicKey"],[653,38,565,42],[654,8,566,12],[654,14,566,18,"is25519"],[654,21,566,25],[654,24,566,28,"size"],[654,28,566,32],[654,33,566,37],[654,35,566,39],[655,8,567,12],[655,12,567,16],[655,13,567,17,"is25519"],[655,20,567,24],[655,24,567,28,"size"],[655,28,567,32],[655,33,567,37],[655,35,567,39],[655,37,568,16],[655,43,568,22],[655,47,568,26,"Error"],[655,52,568,31],[655,53,568,32],[655,85,568,64],[655,86,568,65],[656,8,569,12],[656,14,569,18,"u"],[656,15,569,19],[656,18,569,22,"is25519"],[656,25,569,29],[656,28,569,32,"Fp"],[656,30,569,34],[656,31,569,35,"div"],[656,34,569,38],[656,35,569,39,"_1n"],[656,38,569,42],[656,41,569,45,"y"],[656,42,569,46],[656,44,569,48,"_1n"],[656,47,569,51],[656,50,569,54,"y"],[656,51,569,55],[656,52,569,56],[656,55,569,59,"Fp"],[656,57,569,61],[656,58,569,62,"div"],[656,61,569,65],[656,62,569,66,"y"],[656,63,569,67],[656,66,569,70,"_1n"],[656,69,569,73],[656,71,569,75,"y"],[656,72,569,76],[656,75,569,79,"_1n"],[656,78,569,82],[656,79,569,83],[657,8,570,12],[657,15,570,19,"Fp"],[657,17,570,21],[657,18,570,22,"toBytes"],[657,25,570,29],[657,26,570,30,"u"],[657,27,570,31],[657,28,570,32],[658,6,571,8],[658,7,571,9],[659,6,572,8,"toMontgomerySecret"],[659,24,572,26,"toMontgomerySecret"],[659,25,572,27,"secretKey"],[659,34,572,36],[659,36,572,38],[660,8,573,12],[660,14,573,18,"size"],[660,18,573,22],[660,21,573,25,"lengths"],[660,28,573,32],[660,29,573,33,"secretKey"],[660,38,573,42],[661,8,574,12],[661,9,574,13],[661,10,574,14],[661,12,574,16,"utils_ts_1"],[661,22,574,26],[661,23,574,27,"_abytes2"],[661,31,574,35],[661,33,574,37,"secretKey"],[661,42,574,46],[661,44,574,48,"size"],[661,48,574,52],[661,49,574,53],[662,8,575,12],[662,14,575,18,"hashed"],[662,20,575,24],[662,23,575,27,"cHash"],[662,28,575,32],[662,29,575,33,"secretKey"],[662,38,575,42],[662,39,575,43,"subarray"],[662,47,575,51],[662,48,575,52],[662,49,575,53],[662,51,575,55,"size"],[662,55,575,59],[662,56,575,60],[662,57,575,61],[663,8,576,12],[663,15,576,19,"adjustScalarBytes"],[663,32,576,36],[663,33,576,37,"hashed"],[663,39,576,43],[663,40,576,44],[663,41,576,45,"subarray"],[663,49,576,53],[663,50,576,54],[663,51,576,55],[663,53,576,57,"size"],[663,57,576,61],[663,58,576,62],[664,6,577,8],[664,7,577,9],[665,6,578,8],[666,6,579,8,"randomPrivateKey"],[666,22,579,24],[666,24,579,26,"randomSecretKey"],[666,39,579,41],[667,6,580,8],[668,6,581,8,"precompute"],[668,16,581,18,"precompute"],[668,17,581,19,"windowSize"],[668,27,581,29],[668,30,581,32],[668,31,581,33],[668,33,581,35,"point"],[668,38,581,40],[668,41,581,43,"Point"],[668,46,581,48],[668,47,581,49,"BASE"],[668,51,581,53],[668,53,581,55],[669,8,582,12],[669,15,582,19,"point"],[669,20,582,24],[669,21,582,25,"precompute"],[669,31,582,35],[669,32,582,36,"windowSize"],[669,42,582,46],[669,44,582,48],[669,49,582,53],[669,50,582,54],[670,6,583,8],[671,4,584,4],[671,5,584,5],[672,4,585,4],[672,11,585,11,"Object"],[672,17,585,17],[672,18,585,18,"freeze"],[672,24,585,24],[672,25,585,25],[673,6,586,8,"keygen"],[673,12,586,14],[674,6,587,8,"getPublicKey"],[674,18,587,20],[675,6,588,8,"sign"],[675,10,588,12],[676,6,589,8,"verify"],[676,12,589,14],[677,6,590,8,"utils"],[677,11,590,13],[678,6,591,8,"Point"],[678,11,591,13],[679,6,592,8,"lengths"],[680,4,593,4],[680,5,593,5],[680,6,593,6],[681,2,594,0],[682,2,595,0],[682,11,595,9,"_eddsa_legacy_opts_to_new"],[682,36,595,34,"_eddsa_legacy_opts_to_new"],[682,37,595,35,"c"],[682,38,595,36],[682,40,595,38],[683,4,596,4],[683,10,596,10,"CURVE"],[683,15,596,15],[683,18,596,18],[684,6,597,8,"a"],[684,7,597,9],[684,9,597,11,"c"],[684,10,597,12],[684,11,597,13,"a"],[684,12,597,14],[685,6,598,8,"d"],[685,7,598,9],[685,9,598,11,"c"],[685,10,598,12],[685,11,598,13,"d"],[685,12,598,14],[686,6,599,8,"p"],[686,7,599,9],[686,9,599,11,"c"],[686,10,599,12],[686,11,599,13,"Fp"],[686,13,599,15],[686,14,599,16,"ORDER"],[686,19,599,21],[687,6,600,8,"n"],[687,7,600,9],[687,9,600,11,"c"],[687,10,600,12],[687,11,600,13,"n"],[687,12,600,14],[688,6,601,8,"h"],[688,7,601,9],[688,9,601,11,"c"],[688,10,601,12],[688,11,601,13,"h"],[688,12,601,14],[689,6,602,8,"Gx"],[689,8,602,10],[689,10,602,12,"c"],[689,11,602,13],[689,12,602,14,"Gx"],[689,14,602,16],[690,6,603,8,"Gy"],[690,8,603,10],[690,10,603,12,"c"],[690,11,603,13],[690,12,603,14,"Gy"],[691,4,604,4],[691,5,604,5],[692,4,605,4],[692,10,605,10,"Fp"],[692,12,605,12],[692,15,605,15,"c"],[692,16,605,16],[692,17,605,17,"Fp"],[692,19,605,19],[693,4,606,4],[693,10,606,10,"Fn"],[693,12,606,12],[693,15,606,15],[693,16,606,16],[693,17,606,17],[693,19,606,19,"modular_ts_1"],[693,31,606,31],[693,32,606,32,"Field"],[693,37,606,37],[693,39,606,39,"CURVE"],[693,44,606,44],[693,45,606,45,"n"],[693,46,606,46],[693,48,606,48,"c"],[693,49,606,49],[693,50,606,50,"nBitLength"],[693,60,606,60],[693,62,606,62],[693,66,606,66],[693,67,606,67],[694,4,607,4],[694,10,607,10,"curveOpts"],[694,19,607,19],[694,22,607,22],[695,6,607,24,"Fp"],[695,8,607,26],[696,6,607,28,"Fn"],[696,8,607,30],[697,6,607,32,"uvRatio"],[697,13,607,39],[697,15,607,41,"c"],[697,16,607,42],[697,17,607,43,"uvRatio"],[698,4,607,51],[698,5,607,52],[699,4,608,4],[699,10,608,10,"eddsaOpts"],[699,19,608,19],[699,22,608,22],[700,6,609,8,"randomBytes"],[700,17,609,19],[700,19,609,21,"c"],[700,20,609,22],[700,21,609,23,"randomBytes"],[700,32,609,34],[701,6,610,8,"adjustScalarBytes"],[701,23,610,25],[701,25,610,27,"c"],[701,26,610,28],[701,27,610,29,"adjustScalarBytes"],[701,44,610,46],[702,6,611,8,"domain"],[702,12,611,14],[702,14,611,16,"c"],[702,15,611,17],[702,16,611,18,"domain"],[702,22,611,24],[703,6,612,8,"prehash"],[703,13,612,15],[703,15,612,17,"c"],[703,16,612,18],[703,17,612,19,"prehash"],[703,24,612,26],[704,6,613,8,"mapToCurve"],[704,16,613,18],[704,18,613,20,"c"],[704,19,613,21],[704,20,613,22,"mapToCurve"],[705,4,614,4],[705,5,614,5],[706,4,615,4],[706,11,615,11],[707,6,615,13,"CURVE"],[707,11,615,18],[708,6,615,20,"curveOpts"],[708,15,615,29],[709,6,615,31,"hash"],[709,10,615,35],[709,12,615,37,"c"],[709,13,615,38],[709,14,615,39,"hash"],[709,18,615,43],[710,6,615,45,"eddsaOpts"],[711,4,615,55],[711,5,615,56],[712,2,616,0],[713,2,617,0],[713,11,617,9,"_eddsa_new_output_to_legacy"],[713,38,617,36,"_eddsa_new_output_to_legacy"],[713,39,617,37,"c"],[713,40,617,38],[713,42,617,40,"eddsa"],[713,47,617,45],[713,49,617,47],[714,4,618,4],[714,10,618,10,"Point"],[714,15,618,15],[714,18,618,18,"eddsa"],[714,23,618,23],[714,24,618,24,"Point"],[714,29,618,29],[715,4,619,4],[715,10,619,10,"legacy"],[715,16,619,16],[715,19,619,19,"Object"],[715,25,619,25],[715,26,619,26,"assign"],[715,32,619,32],[715,33,619,33],[715,34,619,34],[715,35,619,35],[715,37,619,37,"eddsa"],[715,42,619,42],[715,44,619,44],[716,6,620,8,"ExtendedPoint"],[716,19,620,21],[716,21,620,23,"Point"],[716,26,620,28],[717,6,621,8,"CURVE"],[717,11,621,13],[717,13,621,15,"c"],[717,14,621,16],[718,6,622,8,"nBitLength"],[718,16,622,18],[718,18,622,20,"Point"],[718,23,622,25],[718,24,622,26,"Fn"],[718,26,622,28],[718,27,622,29,"BITS"],[718,31,622,33],[719,6,623,8,"nByteLength"],[719,17,623,19],[719,19,623,21,"Point"],[719,24,623,26],[719,25,623,27,"Fn"],[719,27,623,29],[719,28,623,30,"BYTES"],[720,4,624,4],[720,5,624,5],[720,6,624,6],[721,4,625,4],[721,11,625,11,"legacy"],[721,17,625,17],[722,2,626,0],[723,2,627,0],[724,2,628,0],[724,11,628,9,"twistedEdwards"],[724,25,628,23,"twistedEdwards"],[724,26,628,24,"c"],[724,27,628,25],[724,29,628,27],[725,4,629,4],[725,10,629,10],[726,6,629,12,"CURVE"],[726,11,629,17],[727,6,629,19,"curveOpts"],[727,15,629,28],[728,6,629,30,"hash"],[728,10,629,34],[729,6,629,36,"eddsaOpts"],[730,4,629,46],[730,5,629,47],[730,8,629,50,"_eddsa_legacy_opts_to_new"],[730,33,629,75],[730,34,629,76,"c"],[730,35,629,77],[730,36,629,78],[731,4,630,4],[731,10,630,10,"Point"],[731,15,630,15],[731,18,630,18,"edwards"],[731,25,630,25],[731,26,630,26,"CURVE"],[731,31,630,31],[731,33,630,33,"curveOpts"],[731,42,630,42],[731,43,630,43],[732,4,631,4],[732,10,631,10,"EDDSA"],[732,15,631,15],[732,18,631,18,"eddsa"],[732,23,631,23],[732,24,631,24,"Point"],[732,29,631,29],[732,31,631,31,"hash"],[732,35,631,35],[732,37,631,37,"eddsaOpts"],[732,46,631,46],[732,47,631,47],[733,4,632,4],[733,11,632,11,"_eddsa_new_output_to_legacy"],[733,38,632,38],[733,39,632,39,"c"],[733,40,632,40],[733,42,632,42,"EDDSA"],[733,47,632,47],[733,48,632,48],[734,2,633,0],[735,0,633,1],[735,3]],"functionMap":{"names":["<global>","isEdValidXY","edwards","modP","<anonymous>","acoord","aextpoint","Point","Point#constructor","Point.CURVE","Point.fromAffine","Point.fromBytes","Point.fromHex","Point#get__x","Point#get__y","Point#precompute","Point#assertValidity","Point#equals","Point#is0","Point#negate","Point#double","Point#add","Point#subtract","Point#multiply","wnaf.cached$argument_2","Point#multiplyUnsafe","wnaf.unsafe$argument_2","Point#isSmallOrder","Point#isTorsionFree","Point#toAffine","Point#clearCofactor","Point#toBytes","Point#toHex","Point#toString","Point#get__ex","Point#get__ey","Point#get__ez","Point#get__et","Point.normalizeZ","Point.msm","Point#_setWindowSize","Point#toRawBytes","PrimeEdwardsPoint","PrimeEdwardsPoint#constructor","PrimeEdwardsPoint.fromBytes","PrimeEdwardsPoint.fromHex","PrimeEdwardsPoint#get__x","PrimeEdwardsPoint#get__y","PrimeEdwardsPoint#clearCofactor","PrimeEdwardsPoint#assertValidity","PrimeEdwardsPoint#toAffine","PrimeEdwardsPoint#toHex","PrimeEdwardsPoint#toString","PrimeEdwardsPoint#isTorsionFree","PrimeEdwardsPoint#isSmallOrder","PrimeEdwardsPoint#add","PrimeEdwardsPoint#subtract","PrimeEdwardsPoint#multiply","PrimeEdwardsPoint#multiplyUnsafe","PrimeEdwardsPoint#double","PrimeEdwardsPoint#negate","PrimeEdwardsPoint#precompute","PrimeEdwardsPoint#toRawBytes","eddsa","modN_LE","getPrivateScalar","getExtendedPublicKey","getPublicKey","hashDomainToScalar","sign","verify","randomSecretKey","keygen","isValidSecretKey","isValidPublicKey","utils.toMontgomery","utils.toMontgomerySecret","utils.precompute","_eddsa_legacy_opts_to_new","_eddsa_new_output_to_legacy","twistedEdwards"],"mappings":"AAA;ACmB;CDM;AEC;iBCW,mBD;SEG;SFO;IGS;KHI;IIC;KJG;kDEG;KFa;qDEC;KFsB;IKG;QCC;SDM;QEC;SFE;QGC;SHO;QIE;SJ+B;QKC;SLE;QMC;SNE;QOC;SPE;QQC;SRK;QSE;STE;QUE;SVS;QWC;SXE;QYC;SZG;QaI;SbiB;QcI;SdkB;QeC;SfE;QgBE;uDCI,2CD;ShBE;QkBM;6CCQ,2CD;SlBC;QoBK;SpBE;QqBG;SrBE;QsBG;StBE;QuBC;SvBI;QwBC;SxBQ;QyBC;SzBE;Q0BC;S1BE;Q2BE;S3BE;Q4BC;S5BE;Q6BC;S7BE;Q8BC;S9BE;Q+BC;S/BE;QgCC;ShCE;QiCC;SjCE;QkCC;SlCE;KLC;CFY;A0CM;ICC;KDE;IEE;KFE;IGC;KHE;IIC;KJE;IKC;KLE;IME;KNG;IOC;KPE;IQC;KRE;ISC;KTE;IUC;KVE;IWC;KXE;IYC;KZE;IaC;KbG;IcC;KdG;IeC;KfE;IgBC;KhBE;IiBC;KjBE;IkBC;KlBE;ImBC;KnBE;IoBE;KpBE;C1CC;A+DK;8D3Da,gB2D;S3DE;S2DK;ICE;KDE;IEE;KFU;IGE;KHK;IIE;KJE;IKE;KLG;IME;KNa;IOO;KPgC;IQQ;KRE;ISC;KTG;IUC;KVE;IWC;KXO;QYe;SZQ;QaC;SbK;QcI;SdE;C/DW;A8EC;C9EqB;A+EC;C/ES;AgFE;ChFK"}},"type":"js/module"}]}