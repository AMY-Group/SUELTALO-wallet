{"dependencies":[{"name":"../utils.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":17,"column":19,"index":566},"end":{"line":17,"column":41,"index":588}}],"key":"Yc7DmwhweSDBIC4bv+r2fO8xp6U=","exportNames":["*"]}},{"name":"./modular.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":18,"column":21,"index":611},"end":{"line":18,"column":44,"index":634}}],"key":"pkHxIsiyj9LvPZma2E+OjOIbg7k=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.wNAF = void 0;\n  exports.negateCt = negateCt;\n  exports.normalizeZ = normalizeZ;\n  exports.mulEndoUnsafe = mulEndoUnsafe;\n  exports.pippenger = pippenger;\n  exports.precomputeMSMUnsafe = precomputeMSMUnsafe;\n  exports.validateBasic = validateBasic;\n  exports._createCurveFields = _createCurveFields;\n  /**\n   * Methods for elliptic curve multiplication by scalars.\n   * Contains wNAF, pippenger.\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n  const utils_ts_1 = require(_dependencyMap[0], \"../utils.js\");\n  const modular_ts_1 = require(_dependencyMap[1], \"./modular.js\");\n  const _0n = BigInt(0);\n  const _1n = BigInt(1);\n  function negateCt(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n  }\n  /**\n   * Takes a bunch of Projective Points but executes only one\n   * inversion on all of them. Inversion is very slow operation,\n   * so this improves performance massively.\n   * Optimization: converts a list of projective points to a list of identical points with Z=1.\n   */\n  function normalizeZ(c, points) {\n    const invertedZs = (0, modular_ts_1.FpInvertBatch)(c.Fp, points.map(p => p.Z));\n    return points.map((p, i) => c.fromAffine(p.toAffine(invertedZs[i])));\n  }\n  function validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits) throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n  }\n  function calcWOpts(W, scalarBits) {\n    validateW(W, scalarBits);\n    const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n    const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n    const maxNumber = 2 ** W; // W=8 256\n    const mask = (0, utils_ts_1.bitMask)(W); // W=8 255 == mask 0b11111111\n    const shiftBy = BigInt(W); // W=8 8\n    return {\n      windows,\n      windowSize,\n      mask,\n      maxNumber,\n      shiftBy\n    };\n  }\n  function calcOffsets(n, window, wOpts) {\n    const {\n      windowSize,\n      mask,\n      maxNumber,\n      shiftBy\n    } = wOpts;\n    let wbits = Number(n & mask); // extract W bits.\n    let nextN = n >> shiftBy; // shift number by W bits.\n    // What actually happens here:\n    // const highestBit = Number(mask ^ (mask >> 1n));\n    // let wbits2 = wbits - 1; // skip zero\n    // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n    // split if bits > max: +224 => 256-32\n    if (wbits > windowSize) {\n      // we skip zero, which means instead of `>= size-1`, we do `> size`\n      wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n      nextN += _1n; // +256 (carry)\n    }\n    const offsetStart = window * windowSize;\n    const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n    const isZero = wbits === 0; // is current window slice a 0?\n    const isNeg = wbits < 0; // is current window slice negative?\n    const isNegF = window % 2 !== 0; // fake random statement for noise\n    const offsetF = offsetStart; // fake offset for noise\n    return {\n      nextN,\n      offset,\n      isZero,\n      isNeg,\n      isNegF,\n      offsetF\n    };\n  }\n  function validateMSMPoints(points, c) {\n    if (!Array.isArray(points)) throw new Error('array expected');\n    points.forEach((p, i) => {\n      if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\n    });\n  }\n  function validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\n    scalars.forEach((s, i) => {\n      if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\n    });\n  }\n  // Since points in different groups cannot be equal (different object constructor),\n  // we can have single place to store precomputes.\n  // Allows to make points frozen / immutable.\n  const pointPrecomputes = new WeakMap();\n  const pointWindowSizes = new WeakMap();\n  function getW(P) {\n    // To disable precomputes:\n    // return 1;\n    return pointWindowSizes.get(P) || 1;\n  }\n  function assert0(n) {\n    if (n !== _0n) throw new Error('invalid wNAF');\n  }\n  /**\n   * Elliptic curve multiplication of Point by scalar. Fragile.\n   * Table generation takes **30MB of ram and 10ms on high-end CPU**,\n   * but may take much longer on slow devices. Actual generation will happen on\n   * first call of `multiply()`. By default, `BASE` point is precomputed.\n   *\n   * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n   * Creates precomputation tables for fast multiplication:\n   * - private scalar is split by fixed size windows of W bits\n   * - every window point is collected from window's table & added to accumulator\n   * - since windows are different, same point inside tables won't be accessed more than once per calc\n   * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n   * - +1 window is neccessary for wNAF\n   * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n   *\n   * @todo Research returning 2d JS array of windows, instead of a single window.\n   * This would allow windows to be in different memory locations\n   */\n  class wNAF {\n    // Parametrized with a given Point class (not individual point)\n    constructor(Point, bits) {\n      this.BASE = Point.BASE;\n      this.ZERO = Point.ZERO;\n      this.Fn = Point.Fn;\n      this.bits = bits;\n    }\n    // non-const time multiplication ladder\n    _unsafeLadder(elm, n, p = this.ZERO) {\n      let d = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    }\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @param point Point instance\n     * @param W window size\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(point, W) {\n      const {\n        windows,\n        windowSize\n      } = calcWOpts(W, this.bits);\n      const points = [];\n      let p = point;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // i=1, bc we skip 0\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    }\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * More compact implementation:\n     * https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W, precomputes, n) {\n      // Scalar should be smaller than field order\n      if (!this.Fn.isValid(n)) throw new Error('invalid scalar');\n      // Accumulators\n      let p = this.ZERO;\n      let f = this.BASE;\n      // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n      // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n      // there is negate now: it is possible that negated element from low value\n      // would be the same as high element, which will create carry into next window.\n      // It's not obvious how this can fail, but still worth investigating later.\n      const wo = calcWOpts(W, this.bits);\n      for (let window = 0; window < wo.windows; window++) {\n        // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n        const {\n          nextN,\n          offset,\n          isZero,\n          isNeg,\n          isNegF,\n          offsetF\n        } = calcOffsets(n, window, wo);\n        n = nextN;\n        if (isZero) {\n          // bits are 0: add garbage to fake point\n          // Important part for const-time getPublicKey: add random \"noise\" point to f.\n          f = f.add(negateCt(isNegF, precomputes[offsetF]));\n        } else {\n          // bits are 1: add to result point\n          p = p.add(negateCt(isNeg, precomputes[offset]));\n        }\n      }\n      assert0(n);\n      // Return both real and fake points: JIT won't eliminate f.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return {\n        p,\n        f\n      };\n    }\n    /**\n     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param acc accumulator point to add result of multiplication\n     * @returns point\n     */\n    wNAFUnsafe(W, precomputes, n, acc = this.ZERO) {\n      const wo = calcWOpts(W, this.bits);\n      for (let window = 0; window < wo.windows; window++) {\n        if (n === _0n) break; // Early-exit, skip 0 value\n        const {\n          nextN,\n          offset,\n          isZero,\n          isNeg\n        } = calcOffsets(n, window, wo);\n        n = nextN;\n        if (isZero) {\n          // Window bits are 0: skip processing.\n          // Move to next window.\n          continue;\n        } else {\n          const item = precomputes[offset];\n          acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n        }\n      }\n      assert0(n);\n      return acc;\n    }\n    getPrecomputes(W, point, transform) {\n      // Calculate precomputes on a first run, reuse them after\n      let comp = pointPrecomputes.get(point);\n      if (!comp) {\n        comp = this.precomputeWindow(point, W);\n        if (W !== 1) {\n          // Doing transform outside of if brings 15% perf hit\n          if (typeof transform === 'function') comp = transform(comp);\n          pointPrecomputes.set(point, comp);\n        }\n      }\n      return comp;\n    }\n    cached(point, scalar, transform) {\n      const W = getW(point);\n      return this.wNAF(W, this.getPrecomputes(W, point, transform), scalar);\n    }\n    unsafe(point, scalar, transform, prev) {\n      const W = getW(point);\n      if (W === 1) return this._unsafeLadder(point, scalar, prev); // For W=1 ladder is ~x2 faster\n      return this.wNAFUnsafe(W, this.getPrecomputes(W, point, transform), scalar, prev);\n    }\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    createCache(P, W) {\n      validateW(W, this.bits);\n      pointWindowSizes.set(P, W);\n      pointPrecomputes.delete(P);\n    }\n    hasCache(elm) {\n      return getW(elm) !== 1;\n    }\n  }\n  exports.wNAF = wNAF;\n  /**\n   * Endomorphism-specific multiplication for Koblitz curves.\n   * Cost: 128 dbl, 0-256 adds.\n   */\n  function mulEndoUnsafe(Point, point, k1, k2) {\n    let acc = point;\n    let p1 = Point.ZERO;\n    let p2 = Point.ZERO;\n    while (k1 > _0n || k2 > _0n) {\n      if (k1 & _1n) p1 = p1.add(acc);\n      if (k2 & _1n) p2 = p2.add(acc);\n      acc = acc.double();\n      k1 >>= _1n;\n      k2 >>= _1n;\n    }\n    return {\n      p1,\n      p2\n    };\n  }\n  /**\n   * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n   * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n   * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n   * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n   * @param c Curve Point constructor\n   * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n   * @param points array of L curve points\n   * @param scalars array of L scalars (aka secret keys / bigints)\n   */\n  function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    const plength = points.length;\n    const slength = scalars.length;\n    if (plength !== slength) throw new Error('arrays of points and scalars must have equal length');\n    // if (plength === 0) throw new Error('array must be of length >= 2');\n    const zero = c.ZERO;\n    const wbits = (0, utils_ts_1.bitLen)(BigInt(plength));\n    let windowSize = 1; // bits\n    if (wbits > 12) windowSize = wbits - 3;else if (wbits > 4) windowSize = wbits - 2;else if (wbits > 0) windowSize = 2;\n    const MASK = (0, utils_ts_1.bitMask)(windowSize);\n    const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n      buckets.fill(zero);\n      for (let j = 0; j < slength; j++) {\n        const scalar = scalars[j];\n        const wbits = Number(scalar >> BigInt(i) & MASK);\n        buckets[wbits] = buckets[wbits].add(points[j]);\n      }\n      let resI = zero; // not using this will do small speed-up, but will lose ct\n      // Skip first bucket, because it is zero\n      for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n        sumI = sumI.add(buckets[j]);\n        resI = resI.add(sumI);\n      }\n      sum = sum.add(resI);\n      if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n    }\n    return sum;\n  }\n  /**\n   * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n   * @param c Curve Point constructor\n   * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n   * @param points array of L curve points\n   * @returns function which multiplies points with scaars\n   */\n  function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar × 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 × 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */\n    validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = (0, utils_ts_1.bitMask)(windowSize);\n    const tables = points.map(p => {\n      const res = [];\n      for (let i = 0, acc = p; i < tableSize; i++) {\n        res.push(acc);\n        acc = acc.add(p);\n      }\n      return res;\n    });\n    return scalars => {\n      validateMSMScalars(scalars, fieldN);\n      if (scalars.length > points.length) throw new Error('array of scalars must be smaller than array of points');\n      let res = zero;\n      for (let i = 0; i < chunks; i++) {\n        // No need to double if accumulator is still zero.\n        if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\n        const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n        for (let j = 0; j < scalars.length; j++) {\n          const n = scalars[j];\n          const curr = Number(n >> shiftBy & MASK);\n          if (!curr) continue; // skip zero scalars chunks\n          res = res.add(tables[j][curr - 1]);\n        }\n      }\n      return res;\n    };\n  }\n  // TODO: remove\n  /** @deprecated */\n  function validateBasic(curve) {\n    (0, modular_ts_1.validateField)(curve.Fp);\n    (0, utils_ts_1.validateObject)(curve, {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field'\n    }, {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger'\n    });\n    // Set defaults\n    return Object.freeze({\n      ...(0, modular_ts_1.nLength)(curve.n, curve.nBitLength),\n      ...curve,\n      ...{\n        p: curve.Fp.ORDER\n      }\n    });\n  }\n  function createField(order, field, isLE) {\n    if (field) {\n      if (field.ORDER !== order) throw new Error('Field.ORDER must match order: Fp == p, Fn == n');\n      (0, modular_ts_1.validateField)(field);\n      return field;\n    } else {\n      return (0, modular_ts_1.Field)(order, {\n        isLE\n      });\n    }\n  }\n  /** Validates CURVE opts and creates fields */\n  function _createCurveFields(type, CURVE, curveOpts = {}, FpFnLE) {\n    if (FpFnLE === undefined) FpFnLE = type === 'edwards';\n    if (!CURVE || typeof CURVE !== 'object') throw new Error(`expected valid ${type} CURVE object`);\n    for (const p of ['p', 'n', 'h']) {\n      const val = CURVE[p];\n      if (!(typeof val === 'bigint' && val > _0n)) throw new Error(`CURVE.${p} must be positive bigint`);\n    }\n    const Fp = createField(CURVE.p, curveOpts.Fp, FpFnLE);\n    const Fn = createField(CURVE.n, curveOpts.Fn, FpFnLE);\n    const _b = type === 'weierstrass' ? 'b' : 'd';\n    const params = ['Gx', 'Gy', 'a', _b];\n    for (const p of params) {\n      // @ts-ignore\n      if (!Fp.isValid(CURVE[p])) throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);\n    }\n    CURVE = Object.freeze(Object.assign({}, CURVE));\n    return {\n      CURVE,\n      Fp,\n      Fn\n    };\n  }\n});","lineCount":494,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"wNAF"],[7,14,3,12],[7,17,3,15],[7,22,3,20],[7,23,3,21],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"negateCt"],[8,18,4,16],[8,21,4,19,"negateCt"],[8,29,4,27],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"normalizeZ"],[9,20,5,18],[9,23,5,21,"normalizeZ"],[9,33,5,31],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"mulEndoUnsafe"],[10,23,6,21],[10,26,6,24,"mulEndoUnsafe"],[10,39,6,37],[11,2,7,0,"exports"],[11,9,7,7],[11,10,7,8,"pippenger"],[11,19,7,17],[11,22,7,20,"pippenger"],[11,31,7,29],[12,2,8,0,"exports"],[12,9,8,7],[12,10,8,8,"precomputeMSMUnsafe"],[12,29,8,27],[12,32,8,30,"precomputeMSMUnsafe"],[12,51,8,49],[13,2,9,0,"exports"],[13,9,9,7],[13,10,9,8,"validateBasic"],[13,23,9,21],[13,26,9,24,"validateBasic"],[13,39,9,37],[14,2,10,0,"exports"],[14,9,10,7],[14,10,10,8,"_createCurveFields"],[14,28,10,26],[14,31,10,29,"_createCurveFields"],[14,49,10,47],[15,2,11,0],[16,0,12,0],[17,0,13,0],[18,0,14,0],[19,0,15,0],[20,2,16,0],[21,2,17,0],[21,8,17,6,"utils_ts_1"],[21,18,17,16],[21,21,17,19,"require"],[21,28,17,26],[21,29,17,26,"_dependencyMap"],[21,43,17,26],[21,61,17,40],[21,62,17,41],[22,2,18,0],[22,8,18,6,"modular_ts_1"],[22,20,18,18],[22,23,18,21,"require"],[22,30,18,28],[22,31,18,28,"_dependencyMap"],[22,45,18,28],[22,64,18,43],[22,65,18,44],[23,2,19,0],[23,8,19,6,"_0n"],[23,11,19,9],[23,14,19,12,"BigInt"],[23,20,19,18],[23,21,19,19],[23,22,19,20],[23,23,19,21],[24,2,20,0],[24,8,20,6,"_1n"],[24,11,20,9],[24,14,20,12,"BigInt"],[24,20,20,18],[24,21,20,19],[24,22,20,20],[24,23,20,21],[25,2,21,0],[25,11,21,9,"negateCt"],[25,19,21,17,"negateCt"],[25,20,21,18,"condition"],[25,29,21,27],[25,31,21,29,"item"],[25,35,21,33],[25,37,21,35],[26,4,22,4],[26,10,22,10,"neg"],[26,13,22,13],[26,16,22,16,"item"],[26,20,22,20],[26,21,22,21,"negate"],[26,27,22,27],[26,28,22,28],[26,29,22,29],[27,4,23,4],[27,11,23,11,"condition"],[27,20,23,20],[27,23,23,23,"neg"],[27,26,23,26],[27,29,23,29,"item"],[27,33,23,33],[28,2,24,0],[29,2,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,0,29,0],[34,0,30,0],[35,2,31,0],[35,11,31,9,"normalizeZ"],[35,21,31,19,"normalizeZ"],[35,22,31,20,"c"],[35,23,31,21],[35,25,31,23,"points"],[35,31,31,29],[35,33,31,31],[36,4,32,4],[36,10,32,10,"invertedZs"],[36,20,32,20],[36,23,32,23],[36,24,32,24],[36,25,32,25],[36,27,32,27,"modular_ts_1"],[36,39,32,39],[36,40,32,40,"FpInvertBatch"],[36,53,32,53],[36,55,32,55,"c"],[36,56,32,56],[36,57,32,57,"Fp"],[36,59,32,59],[36,61,32,61,"points"],[36,67,32,67],[36,68,32,68,"map"],[36,71,32,71],[36,72,32,73,"p"],[36,73,32,74],[36,77,32,79,"p"],[36,78,32,80],[36,79,32,81,"Z"],[36,80,32,82],[36,81,32,83],[36,82,32,84],[37,4,33,4],[37,11,33,11,"points"],[37,17,33,17],[37,18,33,18,"map"],[37,21,33,21],[37,22,33,22],[37,23,33,23,"p"],[37,24,33,24],[37,26,33,26,"i"],[37,27,33,27],[37,32,33,32,"c"],[37,33,33,33],[37,34,33,34,"fromAffine"],[37,44,33,44],[37,45,33,45,"p"],[37,46,33,46],[37,47,33,47,"toAffine"],[37,55,33,55],[37,56,33,56,"invertedZs"],[37,66,33,66],[37,67,33,67,"i"],[37,68,33,68],[37,69,33,69],[37,70,33,70],[37,71,33,71],[37,72,33,72],[38,2,34,0],[39,2,35,0],[39,11,35,9,"validateW"],[39,20,35,18,"validateW"],[39,21,35,19,"W"],[39,22,35,20],[39,24,35,22,"bits"],[39,28,35,26],[39,30,35,28],[40,4,36,4],[40,8,36,8],[40,9,36,9,"Number"],[40,15,36,15],[40,16,36,16,"isSafeInteger"],[40,29,36,29],[40,30,36,30,"W"],[40,31,36,31],[40,32,36,32],[40,36,36,36,"W"],[40,37,36,37],[40,41,36,41],[40,42,36,42],[40,46,36,46,"W"],[40,47,36,47],[40,50,36,50,"bits"],[40,54,36,54],[40,56,37,8],[40,62,37,14],[40,66,37,18,"Error"],[40,71,37,23],[40,72,37,24],[40,108,37,60],[40,111,37,63,"bits"],[40,115,37,67],[40,118,37,70],[40,129,37,81],[40,132,37,84,"W"],[40,133,37,85],[40,134,37,86],[41,2,38,0],[42,2,39,0],[42,11,39,9,"calcWOpts"],[42,20,39,18,"calcWOpts"],[42,21,39,19,"W"],[42,22,39,20],[42,24,39,22,"scalarBits"],[42,34,39,32],[42,36,39,34],[43,4,40,4,"validateW"],[43,13,40,13],[43,14,40,14,"W"],[43,15,40,15],[43,17,40,17,"scalarBits"],[43,27,40,27],[43,28,40,28],[44,4,41,4],[44,10,41,10,"windows"],[44,17,41,17],[44,20,41,20,"Math"],[44,24,41,24],[44,25,41,25,"ceil"],[44,29,41,29],[44,30,41,30,"scalarBits"],[44,40,41,40],[44,43,41,43,"W"],[44,44,41,44],[44,45,41,45],[44,48,41,48],[44,49,41,49],[44,50,41,50],[44,51,41,51],[45,4,42,4],[45,10,42,10,"windowSize"],[45,20,42,20],[45,23,42,23],[45,24,42,24],[45,29,42,29,"W"],[45,30,42,30],[45,33,42,33],[45,34,42,34],[45,35,42,35],[45,36,42,36],[45,37,42,37],[46,4,43,4],[46,10,43,10,"maxNumber"],[46,19,43,19],[46,22,43,22],[46,23,43,23],[46,27,43,27,"W"],[46,28,43,28],[46,29,43,29],[46,30,43,30],[47,4,44,4],[47,10,44,10,"mask"],[47,14,44,14],[47,17,44,17],[47,18,44,18],[47,19,44,19],[47,21,44,21,"utils_ts_1"],[47,31,44,31],[47,32,44,32,"bitMask"],[47,39,44,39],[47,41,44,41,"W"],[47,42,44,42],[47,43,44,43],[47,44,44,44],[47,45,44,45],[48,4,45,4],[48,10,45,10,"shiftBy"],[48,17,45,17],[48,20,45,20,"BigInt"],[48,26,45,26],[48,27,45,27,"W"],[48,28,45,28],[48,29,45,29],[48,30,45,30],[48,31,45,31],[49,4,46,4],[49,11,46,11],[50,6,46,13,"windows"],[50,13,46,20],[51,6,46,22,"windowSize"],[51,16,46,32],[52,6,46,34,"mask"],[52,10,46,38],[53,6,46,40,"maxNumber"],[53,15,46,49],[54,6,46,51,"shiftBy"],[55,4,46,59],[55,5,46,60],[56,2,47,0],[57,2,48,0],[57,11,48,9,"calcOffsets"],[57,22,48,20,"calcOffsets"],[57,23,48,21,"n"],[57,24,48,22],[57,26,48,24,"window"],[57,32,48,30],[57,34,48,32,"wOpts"],[57,39,48,37],[57,41,48,39],[58,4,49,4],[58,10,49,10],[59,6,49,12,"windowSize"],[59,16,49,22],[60,6,49,24,"mask"],[60,10,49,28],[61,6,49,30,"maxNumber"],[61,15,49,39],[62,6,49,41,"shiftBy"],[63,4,49,49],[63,5,49,50],[63,8,49,53,"wOpts"],[63,13,49,58],[64,4,50,4],[64,8,50,8,"wbits"],[64,13,50,13],[64,16,50,16,"Number"],[64,22,50,22],[64,23,50,23,"n"],[64,24,50,24],[64,27,50,27,"mask"],[64,31,50,31],[64,32,50,32],[64,33,50,33],[64,34,50,34],[65,4,51,4],[65,8,51,8,"nextN"],[65,13,51,13],[65,16,51,16,"n"],[65,17,51,17],[65,21,51,21,"shiftBy"],[65,28,51,28],[65,29,51,29],[65,30,51,30],[66,4,52,4],[67,4,53,4],[68,4,54,4],[69,4,55,4],[70,4,56,4],[71,4,57,4],[71,8,57,8,"wbits"],[71,13,57,13],[71,16,57,16,"windowSize"],[71,26,57,26],[71,28,57,28],[72,6,58,8],[73,6,59,8,"wbits"],[73,11,59,13],[73,15,59,17,"maxNumber"],[73,24,59,26],[73,25,59,27],[73,26,59,28],[74,6,60,8,"nextN"],[74,11,60,13],[74,15,60,17,"_1n"],[74,18,60,20],[74,19,60,21],[74,20,60,22],[75,4,61,4],[76,4,62,4],[76,10,62,10,"offsetStart"],[76,21,62,21],[76,24,62,24,"window"],[76,30,62,30],[76,33,62,33,"windowSize"],[76,43,62,43],[77,4,63,4],[77,10,63,10,"offset"],[77,16,63,16],[77,19,63,19,"offsetStart"],[77,30,63,30],[77,33,63,33,"Math"],[77,37,63,37],[77,38,63,38,"abs"],[77,41,63,41],[77,42,63,42,"wbits"],[77,47,63,47],[77,48,63,48],[77,51,63,51],[77,52,63,52],[77,53,63,53],[77,54,63,54],[78,4,64,4],[78,10,64,10,"isZero"],[78,16,64,16],[78,19,64,19,"wbits"],[78,24,64,24],[78,29,64,29],[78,30,64,30],[78,31,64,31],[78,32,64,32],[79,4,65,4],[79,10,65,10,"isNeg"],[79,15,65,15],[79,18,65,18,"wbits"],[79,23,65,23],[79,26,65,26],[79,27,65,27],[79,28,65,28],[79,29,65,29],[80,4,66,4],[80,10,66,10,"isNegF"],[80,16,66,16],[80,19,66,19,"window"],[80,25,66,25],[80,28,66,28],[80,29,66,29],[80,34,66,34],[80,35,66,35],[80,36,66,36],[80,37,66,37],[81,4,67,4],[81,10,67,10,"offsetF"],[81,17,67,17],[81,20,67,20,"offsetStart"],[81,31,67,31],[81,32,67,32],[81,33,67,33],[82,4,68,4],[82,11,68,11],[83,6,68,13,"nextN"],[83,11,68,18],[84,6,68,20,"offset"],[84,12,68,26],[85,6,68,28,"isZero"],[85,12,68,34],[86,6,68,36,"isNeg"],[86,11,68,41],[87,6,68,43,"isNegF"],[87,12,68,49],[88,6,68,51,"offsetF"],[89,4,68,59],[89,5,68,60],[90,2,69,0],[91,2,70,0],[91,11,70,9,"validateMSMPoints"],[91,28,70,26,"validateMSMPoints"],[91,29,70,27,"points"],[91,35,70,33],[91,37,70,35,"c"],[91,38,70,36],[91,40,70,38],[92,4,71,4],[92,8,71,8],[92,9,71,9,"Array"],[92,14,71,14],[92,15,71,15,"isArray"],[92,22,71,22],[92,23,71,23,"points"],[92,29,71,29],[92,30,71,30],[92,32,72,8],[92,38,72,14],[92,42,72,18,"Error"],[92,47,72,23],[92,48,72,24],[92,64,72,40],[92,65,72,41],[93,4,73,4,"points"],[93,10,73,10],[93,11,73,11,"forEach"],[93,18,73,18],[93,19,73,19],[93,20,73,20,"p"],[93,21,73,21],[93,23,73,23,"i"],[93,24,73,24],[93,29,73,29],[94,6,74,8],[94,10,74,12],[94,12,74,14,"p"],[94,13,74,15],[94,25,74,27,"c"],[94,26,74,28],[94,27,74,29],[94,29,75,12],[94,35,75,18],[94,39,75,22,"Error"],[94,44,75,27],[94,45,75,28],[94,70,75,53],[94,73,75,56,"i"],[94,74,75,57],[94,75,75,58],[95,4,76,4],[95,5,76,5],[95,6,76,6],[96,2,77,0],[97,2,78,0],[97,11,78,9,"validateMSMScalars"],[97,29,78,27,"validateMSMScalars"],[97,30,78,28,"scalars"],[97,37,78,35],[97,39,78,37,"field"],[97,44,78,42],[97,46,78,44],[98,4,79,4],[98,8,79,8],[98,9,79,9,"Array"],[98,14,79,14],[98,15,79,15,"isArray"],[98,22,79,22],[98,23,79,23,"scalars"],[98,30,79,30],[98,31,79,31],[98,33,80,8],[98,39,80,14],[98,43,80,18,"Error"],[98,48,80,23],[98,49,80,24],[98,76,80,51],[98,77,80,52],[99,4,81,4,"scalars"],[99,11,81,11],[99,12,81,12,"forEach"],[99,19,81,19],[99,20,81,20],[99,21,81,21,"s"],[99,22,81,22],[99,24,81,24,"i"],[99,25,81,25],[99,30,81,30],[100,6,82,8],[100,10,82,12],[100,11,82,13,"field"],[100,16,82,18],[100,17,82,19,"isValid"],[100,24,82,26],[100,25,82,27,"s"],[100,26,82,28],[100,27,82,29],[100,29,83,12],[100,35,83,18],[100,39,83,22,"Error"],[100,44,83,27],[100,45,83,28],[100,71,83,54],[100,74,83,57,"i"],[100,75,83,58],[100,76,83,59],[101,4,84,4],[101,5,84,5],[101,6,84,6],[102,2,85,0],[103,2,86,0],[104,2,87,0],[105,2,88,0],[106,2,89,0],[106,8,89,6,"pointPrecomputes"],[106,24,89,22],[106,27,89,25],[106,31,89,29,"WeakMap"],[106,38,89,36],[106,39,89,37],[106,40,89,38],[107,2,90,0],[107,8,90,6,"pointWindowSizes"],[107,24,90,22],[107,27,90,25],[107,31,90,29,"WeakMap"],[107,38,90,36],[107,39,90,37],[107,40,90,38],[108,2,91,0],[108,11,91,9,"getW"],[108,15,91,13,"getW"],[108,16,91,14,"P"],[108,17,91,15],[108,19,91,17],[109,4,92,4],[110,4,93,4],[111,4,94,4],[111,11,94,11,"pointWindowSizes"],[111,27,94,27],[111,28,94,28,"get"],[111,31,94,31],[111,32,94,32,"P"],[111,33,94,33],[111,34,94,34],[111,38,94,38],[111,39,94,39],[112,2,95,0],[113,2,96,0],[113,11,96,9,"assert0"],[113,18,96,16,"assert0"],[113,19,96,17,"n"],[113,20,96,18],[113,22,96,20],[114,4,97,4],[114,8,97,8,"n"],[114,9,97,9],[114,14,97,14,"_0n"],[114,17,97,17],[114,19,98,8],[114,25,98,14],[114,29,98,18,"Error"],[114,34,98,23],[114,35,98,24],[114,49,98,38],[114,50,98,39],[115,2,99,0],[116,2,100,0],[117,0,101,0],[118,0,102,0],[119,0,103,0],[120,0,104,0],[121,0,105,0],[122,0,106,0],[123,0,107,0],[124,0,108,0],[125,0,109,0],[126,0,110,0],[127,0,111,0],[128,0,112,0],[129,0,113,0],[130,0,114,0],[131,0,115,0],[132,0,116,0],[133,0,117,0],[134,2,118,0],[134,8,118,6,"wNAF"],[134,12,118,10],[134,13,118,11],[135,4,119,4],[136,4,120,4,"constructor"],[136,15,120,15,"constructor"],[136,16,120,16,"Point"],[136,21,120,21],[136,23,120,23,"bits"],[136,27,120,27],[136,29,120,29],[137,6,121,8],[137,10,121,12],[137,11,121,13,"BASE"],[137,15,121,17],[137,18,121,20,"Point"],[137,23,121,25],[137,24,121,26,"BASE"],[137,28,121,30],[138,6,122,8],[138,10,122,12],[138,11,122,13,"ZERO"],[138,15,122,17],[138,18,122,20,"Point"],[138,23,122,25],[138,24,122,26,"ZERO"],[138,28,122,30],[139,6,123,8],[139,10,123,12],[139,11,123,13,"Fn"],[139,13,123,15],[139,16,123,18,"Point"],[139,21,123,23],[139,22,123,24,"Fn"],[139,24,123,26],[140,6,124,8],[140,10,124,12],[140,11,124,13,"bits"],[140,15,124,17],[140,18,124,20,"bits"],[140,22,124,24],[141,4,125,4],[142,4,126,4],[143,4,127,4,"_unsafeLadder"],[143,17,127,17,"_unsafeLadder"],[143,18,127,18,"elm"],[143,21,127,21],[143,23,127,23,"n"],[143,24,127,24],[143,26,127,26,"p"],[143,27,127,27],[143,30,127,30],[143,34,127,34],[143,35,127,35,"ZERO"],[143,39,127,39],[143,41,127,41],[144,6,128,8],[144,10,128,12,"d"],[144,11,128,13],[144,14,128,16,"elm"],[144,17,128,19],[145,6,129,8],[145,13,129,15,"n"],[145,14,129,16],[145,17,129,19,"_0n"],[145,20,129,22],[145,22,129,24],[146,8,130,12],[146,12,130,16,"n"],[146,13,130,17],[146,16,130,20,"_1n"],[146,19,130,23],[146,21,131,16,"p"],[146,22,131,17],[146,25,131,20,"p"],[146,26,131,21],[146,27,131,22,"add"],[146,30,131,25],[146,31,131,26,"d"],[146,32,131,27],[146,33,131,28],[147,8,132,12,"d"],[147,9,132,13],[147,12,132,16,"d"],[147,13,132,17],[147,14,132,18,"double"],[147,20,132,24],[147,21,132,25],[147,22,132,26],[148,8,133,12,"n"],[148,9,133,13],[148,14,133,18,"_1n"],[148,17,133,21],[149,6,134,8],[150,6,135,8],[150,13,135,15,"p"],[150,14,135,16],[151,4,136,4],[152,4,137,4],[153,0,138,0],[154,0,139,0],[155,0,140,0],[156,0,141,0],[157,0,142,0],[158,0,143,0],[159,0,144,0],[160,0,145,0],[161,0,146,0],[162,0,147,0],[163,0,148,0],[164,4,149,4,"precomputeWindow"],[164,20,149,20,"precomputeWindow"],[164,21,149,21,"point"],[164,26,149,26],[164,28,149,28,"W"],[164,29,149,29],[164,31,149,31],[165,6,150,8],[165,12,150,14],[166,8,150,16,"windows"],[166,15,150,23],[167,8,150,25,"windowSize"],[168,6,150,36],[168,7,150,37],[168,10,150,40,"calcWOpts"],[168,19,150,49],[168,20,150,50,"W"],[168,21,150,51],[168,23,150,53],[168,27,150,57],[168,28,150,58,"bits"],[168,32,150,62],[168,33,150,63],[169,6,151,8],[169,12,151,14,"points"],[169,18,151,20],[169,21,151,23],[169,23,151,25],[170,6,152,8],[170,10,152,12,"p"],[170,11,152,13],[170,14,152,16,"point"],[170,19,152,21],[171,6,153,8],[171,10,153,12,"base"],[171,14,153,16],[171,17,153,19,"p"],[171,18,153,20],[172,6,154,8],[172,11,154,13],[172,15,154,17,"window"],[172,21,154,23],[172,24,154,26],[172,25,154,27],[172,27,154,29,"window"],[172,33,154,35],[172,36,154,38,"windows"],[172,43,154,45],[172,45,154,47,"window"],[172,51,154,53],[172,53,154,55],[172,55,154,57],[173,8,155,12,"base"],[173,12,155,16],[173,15,155,19,"p"],[173,16,155,20],[174,8,156,12,"points"],[174,14,156,18],[174,15,156,19,"push"],[174,19,156,23],[174,20,156,24,"base"],[174,24,156,28],[174,25,156,29],[175,8,157,12],[176,8,158,12],[176,13,158,17],[176,17,158,21,"i"],[176,18,158,22],[176,21,158,25],[176,22,158,26],[176,24,158,28,"i"],[176,25,158,29],[176,28,158,32,"windowSize"],[176,38,158,42],[176,40,158,44,"i"],[176,41,158,45],[176,43,158,47],[176,45,158,49],[177,10,159,16,"base"],[177,14,159,20],[177,17,159,23,"base"],[177,21,159,27],[177,22,159,28,"add"],[177,25,159,31],[177,26,159,32,"p"],[177,27,159,33],[177,28,159,34],[178,10,160,16,"points"],[178,16,160,22],[178,17,160,23,"push"],[178,21,160,27],[178,22,160,28,"base"],[178,26,160,32],[178,27,160,33],[179,8,161,12],[180,8,162,12,"p"],[180,9,162,13],[180,12,162,16,"base"],[180,16,162,20],[180,17,162,21,"double"],[180,23,162,27],[180,24,162,28],[180,25,162,29],[181,6,163,8],[182,6,164,8],[182,13,164,15,"points"],[182,19,164,21],[183,4,165,4],[184,4,166,4],[185,0,167,0],[186,0,168,0],[187,0,169,0],[188,0,170,0],[189,0,171,0],[190,4,172,4,"wNAF"],[190,8,172,8,"wNAF"],[190,9,172,9,"W"],[190,10,172,10],[190,12,172,12,"precomputes"],[190,23,172,23],[190,25,172,25,"n"],[190,26,172,26],[190,28,172,28],[191,6,173,8],[192,6,174,8],[192,10,174,12],[192,11,174,13],[192,15,174,17],[192,16,174,18,"Fn"],[192,18,174,20],[192,19,174,21,"isValid"],[192,26,174,28],[192,27,174,29,"n"],[192,28,174,30],[192,29,174,31],[192,31,175,12],[192,37,175,18],[192,41,175,22,"Error"],[192,46,175,27],[192,47,175,28],[192,63,175,44],[192,64,175,45],[193,6,176,8],[194,6,177,8],[194,10,177,12,"p"],[194,11,177,13],[194,14,177,16],[194,18,177,20],[194,19,177,21,"ZERO"],[194,23,177,25],[195,6,178,8],[195,10,178,12,"f"],[195,11,178,13],[195,14,178,16],[195,18,178,20],[195,19,178,21,"BASE"],[195,23,178,25],[196,6,179,8],[197,6,180,8],[198,6,181,8],[199,6,182,8],[200,6,183,8],[201,6,184,8],[201,12,184,14,"wo"],[201,14,184,16],[201,17,184,19,"calcWOpts"],[201,26,184,28],[201,27,184,29,"W"],[201,28,184,30],[201,30,184,32],[201,34,184,36],[201,35,184,37,"bits"],[201,39,184,41],[201,40,184,42],[202,6,185,8],[202,11,185,13],[202,15,185,17,"window"],[202,21,185,23],[202,24,185,26],[202,25,185,27],[202,27,185,29,"window"],[202,33,185,35],[202,36,185,38,"wo"],[202,38,185,40],[202,39,185,41,"windows"],[202,46,185,48],[202,48,185,50,"window"],[202,54,185,56],[202,56,185,58],[202,58,185,60],[203,8,186,12],[204,8,187,12],[204,14,187,18],[205,10,187,20,"nextN"],[205,15,187,25],[206,10,187,27,"offset"],[206,16,187,33],[207,10,187,35,"isZero"],[207,16,187,41],[208,10,187,43,"isNeg"],[208,15,187,48],[209,10,187,50,"isNegF"],[209,16,187,56],[210,10,187,58,"offsetF"],[211,8,187,66],[211,9,187,67],[211,12,187,70,"calcOffsets"],[211,23,187,81],[211,24,187,82,"n"],[211,25,187,83],[211,27,187,85,"window"],[211,33,187,91],[211,35,187,93,"wo"],[211,37,187,95],[211,38,187,96],[212,8,188,12,"n"],[212,9,188,13],[212,12,188,16,"nextN"],[212,17,188,21],[213,8,189,12],[213,12,189,16,"isZero"],[213,18,189,22],[213,20,189,24],[214,10,190,16],[215,10,191,16],[216,10,192,16,"f"],[216,11,192,17],[216,14,192,20,"f"],[216,15,192,21],[216,16,192,22,"add"],[216,19,192,25],[216,20,192,26,"negateCt"],[216,28,192,34],[216,29,192,35,"isNegF"],[216,35,192,41],[216,37,192,43,"precomputes"],[216,48,192,54],[216,49,192,55,"offsetF"],[216,56,192,62],[216,57,192,63],[216,58,192,64],[216,59,192,65],[217,8,193,12],[217,9,193,13],[217,15,194,17],[218,10,195,16],[219,10,196,16,"p"],[219,11,196,17],[219,14,196,20,"p"],[219,15,196,21],[219,16,196,22,"add"],[219,19,196,25],[219,20,196,26,"negateCt"],[219,28,196,34],[219,29,196,35,"isNeg"],[219,34,196,40],[219,36,196,42,"precomputes"],[219,47,196,53],[219,48,196,54,"offset"],[219,54,196,60],[219,55,196,61],[219,56,196,62],[219,57,196,63],[220,8,197,12],[221,6,198,8],[222,6,199,8,"assert0"],[222,13,199,15],[222,14,199,16,"n"],[222,15,199,17],[222,16,199,18],[223,6,200,8],[224,6,201,8],[225,6,202,8],[226,6,203,8],[226,13,203,15],[227,8,203,17,"p"],[227,9,203,18],[228,8,203,20,"f"],[229,6,203,22],[229,7,203,23],[230,4,204,4],[231,4,205,4],[232,0,206,0],[233,0,207,0],[234,0,208,0],[235,0,209,0],[236,4,210,4,"wNAFUnsafe"],[236,14,210,14,"wNAFUnsafe"],[236,15,210,15,"W"],[236,16,210,16],[236,18,210,18,"precomputes"],[236,29,210,29],[236,31,210,31,"n"],[236,32,210,32],[236,34,210,34,"acc"],[236,37,210,37],[236,40,210,40],[236,44,210,44],[236,45,210,45,"ZERO"],[236,49,210,49],[236,51,210,51],[237,6,211,8],[237,12,211,14,"wo"],[237,14,211,16],[237,17,211,19,"calcWOpts"],[237,26,211,28],[237,27,211,29,"W"],[237,28,211,30],[237,30,211,32],[237,34,211,36],[237,35,211,37,"bits"],[237,39,211,41],[237,40,211,42],[238,6,212,8],[238,11,212,13],[238,15,212,17,"window"],[238,21,212,23],[238,24,212,26],[238,25,212,27],[238,27,212,29,"window"],[238,33,212,35],[238,36,212,38,"wo"],[238,38,212,40],[238,39,212,41,"windows"],[238,46,212,48],[238,48,212,50,"window"],[238,54,212,56],[238,56,212,58],[238,58,212,60],[239,8,213,12],[239,12,213,16,"n"],[239,13,213,17],[239,18,213,22,"_0n"],[239,21,213,25],[239,23,214,16],[239,29,214,22],[239,30,214,23],[240,8,215,12],[240,14,215,18],[241,10,215,20,"nextN"],[241,15,215,25],[242,10,215,27,"offset"],[242,16,215,33],[243,10,215,35,"isZero"],[243,16,215,41],[244,10,215,43,"isNeg"],[245,8,215,49],[245,9,215,50],[245,12,215,53,"calcOffsets"],[245,23,215,64],[245,24,215,65,"n"],[245,25,215,66],[245,27,215,68,"window"],[245,33,215,74],[245,35,215,76,"wo"],[245,37,215,78],[245,38,215,79],[246,8,216,12,"n"],[246,9,216,13],[246,12,216,16,"nextN"],[246,17,216,21],[247,8,217,12],[247,12,217,16,"isZero"],[247,18,217,22],[247,20,217,24],[248,10,218,16],[249,10,219,16],[250,10,220,16],[251,8,221,12],[251,9,221,13],[251,15,222,17],[252,10,223,16],[252,16,223,22,"item"],[252,20,223,26],[252,23,223,29,"precomputes"],[252,34,223,40],[252,35,223,41,"offset"],[252,41,223,47],[252,42,223,48],[253,10,224,16,"acc"],[253,13,224,19],[253,16,224,22,"acc"],[253,19,224,25],[253,20,224,26,"add"],[253,23,224,29],[253,24,224,30,"isNeg"],[253,29,224,35],[253,32,224,38,"item"],[253,36,224,42],[253,37,224,43,"negate"],[253,43,224,49],[253,44,224,50],[253,45,224,51],[253,48,224,54,"item"],[253,52,224,58],[253,53,224,59],[253,54,224,60],[253,55,224,61],[254,8,225,12],[255,6,226,8],[256,6,227,8,"assert0"],[256,13,227,15],[256,14,227,16,"n"],[256,15,227,17],[256,16,227,18],[257,6,228,8],[257,13,228,15,"acc"],[257,16,228,18],[258,4,229,4],[259,4,230,4,"getPrecomputes"],[259,18,230,18,"getPrecomputes"],[259,19,230,19,"W"],[259,20,230,20],[259,22,230,22,"point"],[259,27,230,27],[259,29,230,29,"transform"],[259,38,230,38],[259,40,230,40],[260,6,231,8],[261,6,232,8],[261,10,232,12,"comp"],[261,14,232,16],[261,17,232,19,"pointPrecomputes"],[261,33,232,35],[261,34,232,36,"get"],[261,37,232,39],[261,38,232,40,"point"],[261,43,232,45],[261,44,232,46],[262,6,233,8],[262,10,233,12],[262,11,233,13,"comp"],[262,15,233,17],[262,17,233,19],[263,8,234,12,"comp"],[263,12,234,16],[263,15,234,19],[263,19,234,23],[263,20,234,24,"precomputeWindow"],[263,36,234,40],[263,37,234,41,"point"],[263,42,234,46],[263,44,234,48,"W"],[263,45,234,49],[263,46,234,50],[264,8,235,12],[264,12,235,16,"W"],[264,13,235,17],[264,18,235,22],[264,19,235,23],[264,21,235,25],[265,10,236,16],[266,10,237,16],[266,14,237,20],[266,21,237,27,"transform"],[266,30,237,36],[266,35,237,41],[266,45,237,51],[266,47,238,20,"comp"],[266,51,238,24],[266,54,238,27,"transform"],[266,63,238,36],[266,64,238,37,"comp"],[266,68,238,41],[266,69,238,42],[267,10,239,16,"pointPrecomputes"],[267,26,239,32],[267,27,239,33,"set"],[267,30,239,36],[267,31,239,37,"point"],[267,36,239,42],[267,38,239,44,"comp"],[267,42,239,48],[267,43,239,49],[268,8,240,12],[269,6,241,8],[270,6,242,8],[270,13,242,15,"comp"],[270,17,242,19],[271,4,243,4],[272,4,244,4,"cached"],[272,10,244,10,"cached"],[272,11,244,11,"point"],[272,16,244,16],[272,18,244,18,"scalar"],[272,24,244,24],[272,26,244,26,"transform"],[272,35,244,35],[272,37,244,37],[273,6,245,8],[273,12,245,14,"W"],[273,13,245,15],[273,16,245,18,"getW"],[273,20,245,22],[273,21,245,23,"point"],[273,26,245,28],[273,27,245,29],[274,6,246,8],[274,13,246,15],[274,17,246,19],[274,18,246,20,"wNAF"],[274,22,246,24],[274,23,246,25,"W"],[274,24,246,26],[274,26,246,28],[274,30,246,32],[274,31,246,33,"getPrecomputes"],[274,45,246,47],[274,46,246,48,"W"],[274,47,246,49],[274,49,246,51,"point"],[274,54,246,56],[274,56,246,58,"transform"],[274,65,246,67],[274,66,246,68],[274,68,246,70,"scalar"],[274,74,246,76],[274,75,246,77],[275,4,247,4],[276,4,248,4,"unsafe"],[276,10,248,10,"unsafe"],[276,11,248,11,"point"],[276,16,248,16],[276,18,248,18,"scalar"],[276,24,248,24],[276,26,248,26,"transform"],[276,35,248,35],[276,37,248,37,"prev"],[276,41,248,41],[276,43,248,43],[277,6,249,8],[277,12,249,14,"W"],[277,13,249,15],[277,16,249,18,"getW"],[277,20,249,22],[277,21,249,23,"point"],[277,26,249,28],[277,27,249,29],[278,6,250,8],[278,10,250,12,"W"],[278,11,250,13],[278,16,250,18],[278,17,250,19],[278,19,251,12],[278,26,251,19],[278,30,251,23],[278,31,251,24,"_unsafeLadder"],[278,44,251,37],[278,45,251,38,"point"],[278,50,251,43],[278,52,251,45,"scalar"],[278,58,251,51],[278,60,251,53,"prev"],[278,64,251,57],[278,65,251,58],[278,66,251,59],[278,67,251,60],[279,6,252,8],[279,13,252,15],[279,17,252,19],[279,18,252,20,"wNAFUnsafe"],[279,28,252,30],[279,29,252,31,"W"],[279,30,252,32],[279,32,252,34],[279,36,252,38],[279,37,252,39,"getPrecomputes"],[279,51,252,53],[279,52,252,54,"W"],[279,53,252,55],[279,55,252,57,"point"],[279,60,252,62],[279,62,252,64,"transform"],[279,71,252,73],[279,72,252,74],[279,74,252,76,"scalar"],[279,80,252,82],[279,82,252,84,"prev"],[279,86,252,88],[279,87,252,89],[280,4,253,4],[281,4,254,4],[282,4,255,4],[283,4,256,4],[284,4,257,4,"createCache"],[284,15,257,15,"createCache"],[284,16,257,16,"P"],[284,17,257,17],[284,19,257,19,"W"],[284,20,257,20],[284,22,257,22],[285,6,258,8,"validateW"],[285,15,258,17],[285,16,258,18,"W"],[285,17,258,19],[285,19,258,21],[285,23,258,25],[285,24,258,26,"bits"],[285,28,258,30],[285,29,258,31],[286,6,259,8,"pointWindowSizes"],[286,22,259,24],[286,23,259,25,"set"],[286,26,259,28],[286,27,259,29,"P"],[286,28,259,30],[286,30,259,32,"W"],[286,31,259,33],[286,32,259,34],[287,6,260,8,"pointPrecomputes"],[287,22,260,24],[287,23,260,25,"delete"],[287,29,260,31],[287,30,260,32,"P"],[287,31,260,33],[287,32,260,34],[288,4,261,4],[289,4,262,4,"hasCache"],[289,12,262,12,"hasCache"],[289,13,262,13,"elm"],[289,16,262,16],[289,18,262,18],[290,6,263,8],[290,13,263,15,"getW"],[290,17,263,19],[290,18,263,20,"elm"],[290,21,263,23],[290,22,263,24],[290,27,263,29],[290,28,263,30],[291,4,264,4],[292,2,265,0],[293,2,266,0,"exports"],[293,9,266,7],[293,10,266,8,"wNAF"],[293,14,266,12],[293,17,266,15,"wNAF"],[293,21,266,19],[294,2,267,0],[295,0,268,0],[296,0,269,0],[297,0,270,0],[298,2,271,0],[298,11,271,9,"mulEndoUnsafe"],[298,24,271,22,"mulEndoUnsafe"],[298,25,271,23,"Point"],[298,30,271,28],[298,32,271,30,"point"],[298,37,271,35],[298,39,271,37,"k1"],[298,41,271,39],[298,43,271,41,"k2"],[298,45,271,43],[298,47,271,45],[299,4,272,4],[299,8,272,8,"acc"],[299,11,272,11],[299,14,272,14,"point"],[299,19,272,19],[300,4,273,4],[300,8,273,8,"p1"],[300,10,273,10],[300,13,273,13,"Point"],[300,18,273,18],[300,19,273,19,"ZERO"],[300,23,273,23],[301,4,274,4],[301,8,274,8,"p2"],[301,10,274,10],[301,13,274,13,"Point"],[301,18,274,18],[301,19,274,19,"ZERO"],[301,23,274,23],[302,4,275,4],[302,11,275,11,"k1"],[302,13,275,13],[302,16,275,16,"_0n"],[302,19,275,19],[302,23,275,23,"k2"],[302,25,275,25],[302,28,275,28,"_0n"],[302,31,275,31],[302,33,275,33],[303,6,276,8],[303,10,276,12,"k1"],[303,12,276,14],[303,15,276,17,"_1n"],[303,18,276,20],[303,20,277,12,"p1"],[303,22,277,14],[303,25,277,17,"p1"],[303,27,277,19],[303,28,277,20,"add"],[303,31,277,23],[303,32,277,24,"acc"],[303,35,277,27],[303,36,277,28],[304,6,278,8],[304,10,278,12,"k2"],[304,12,278,14],[304,15,278,17,"_1n"],[304,18,278,20],[304,20,279,12,"p2"],[304,22,279,14],[304,25,279,17,"p2"],[304,27,279,19],[304,28,279,20,"add"],[304,31,279,23],[304,32,279,24,"acc"],[304,35,279,27],[304,36,279,28],[305,6,280,8,"acc"],[305,9,280,11],[305,12,280,14,"acc"],[305,15,280,17],[305,16,280,18,"double"],[305,22,280,24],[305,23,280,25],[305,24,280,26],[306,6,281,8,"k1"],[306,8,281,10],[306,13,281,15,"_1n"],[306,16,281,18],[307,6,282,8,"k2"],[307,8,282,10],[307,13,282,15,"_1n"],[307,16,282,18],[308,4,283,4],[309,4,284,4],[309,11,284,11],[310,6,284,13,"p1"],[310,8,284,15],[311,6,284,17,"p2"],[312,4,284,20],[312,5,284,21],[313,2,285,0],[314,2,286,0],[315,0,287,0],[316,0,288,0],[317,0,289,0],[318,0,290,0],[319,0,291,0],[320,0,292,0],[321,0,293,0],[322,0,294,0],[323,0,295,0],[324,2,296,0],[324,11,296,9,"pippenger"],[324,20,296,18,"pippenger"],[324,21,296,19,"c"],[324,22,296,20],[324,24,296,22,"fieldN"],[324,30,296,28],[324,32,296,30,"points"],[324,38,296,36],[324,40,296,38,"scalars"],[324,47,296,45],[324,49,296,47],[325,4,297,4],[326,4,298,4],[327,4,299,4],[328,4,300,4],[329,4,301,4],[330,4,302,4],[331,4,303,4,"validateMSMPoints"],[331,21,303,21],[331,22,303,22,"points"],[331,28,303,28],[331,30,303,30,"c"],[331,31,303,31],[331,32,303,32],[332,4,304,4,"validateMSMScalars"],[332,22,304,22],[332,23,304,23,"scalars"],[332,30,304,30],[332,32,304,32,"fieldN"],[332,38,304,38],[332,39,304,39],[333,4,305,4],[333,10,305,10,"plength"],[333,17,305,17],[333,20,305,20,"points"],[333,26,305,26],[333,27,305,27,"length"],[333,33,305,33],[334,4,306,4],[334,10,306,10,"slength"],[334,17,306,17],[334,20,306,20,"scalars"],[334,27,306,27],[334,28,306,28,"length"],[334,34,306,34],[335,4,307,4],[335,8,307,8,"plength"],[335,15,307,15],[335,20,307,20,"slength"],[335,27,307,27],[335,29,308,8],[335,35,308,14],[335,39,308,18,"Error"],[335,44,308,23],[335,45,308,24],[335,98,308,77],[335,99,308,78],[336,4,309,4],[337,4,310,4],[337,10,310,10,"zero"],[337,14,310,14],[337,17,310,17,"c"],[337,18,310,18],[337,19,310,19,"ZERO"],[337,23,310,23],[338,4,311,4],[338,10,311,10,"wbits"],[338,15,311,15],[338,18,311,18],[338,19,311,19],[338,20,311,20],[338,22,311,22,"utils_ts_1"],[338,32,311,32],[338,33,311,33,"bitLen"],[338,39,311,39],[338,41,311,41,"BigInt"],[338,47,311,47],[338,48,311,48,"plength"],[338,55,311,55],[338,56,311,56],[338,57,311,57],[339,4,312,4],[339,8,312,8,"windowSize"],[339,18,312,18],[339,21,312,21],[339,22,312,22],[339,23,312,23],[339,24,312,24],[340,4,313,4],[340,8,313,8,"wbits"],[340,13,313,13],[340,16,313,16],[340,18,313,18],[340,20,314,8,"windowSize"],[340,30,314,18],[340,33,314,21,"wbits"],[340,38,314,26],[340,41,314,29],[340,42,314,30],[340,43,314,31],[340,48,315,9],[340,52,315,13,"wbits"],[340,57,315,18],[340,60,315,21],[340,61,315,22],[340,63,316,8,"windowSize"],[340,73,316,18],[340,76,316,21,"wbits"],[340,81,316,26],[340,84,316,29],[340,85,316,30],[340,86,316,31],[340,91,317,9],[340,95,317,13,"wbits"],[340,100,317,18],[340,103,317,21],[340,104,317,22],[340,106,318,8,"windowSize"],[340,116,318,18],[340,119,318,21],[340,120,318,22],[341,4,319,4],[341,10,319,10,"MASK"],[341,14,319,14],[341,17,319,17],[341,18,319,18],[341,19,319,19],[341,21,319,21,"utils_ts_1"],[341,31,319,31],[341,32,319,32,"bitMask"],[341,39,319,39],[341,41,319,41,"windowSize"],[341,51,319,51],[341,52,319,52],[342,4,320,4],[342,10,320,10,"buckets"],[342,17,320,17],[342,20,320,20],[342,24,320,24,"Array"],[342,29,320,29],[342,30,320,30,"Number"],[342,36,320,36],[342,37,320,37,"MASK"],[342,41,320,41],[342,42,320,42],[342,45,320,45],[342,46,320,46],[342,47,320,47],[342,48,320,48,"fill"],[342,52,320,52],[342,53,320,53,"zero"],[342,57,320,57],[342,58,320,58],[342,59,320,59],[342,60,320,60],[343,4,321,4],[343,10,321,10,"lastBits"],[343,18,321,18],[343,21,321,21,"Math"],[343,25,321,25],[343,26,321,26,"floor"],[343,31,321,31],[343,32,321,32],[343,33,321,33,"fieldN"],[343,39,321,39],[343,40,321,40,"BITS"],[343,44,321,44],[343,47,321,47],[343,48,321,48],[343,52,321,52,"windowSize"],[343,62,321,62],[343,63,321,63],[343,66,321,66,"windowSize"],[343,76,321,76],[344,4,322,4],[344,8,322,8,"sum"],[344,11,322,11],[344,14,322,14,"zero"],[344,18,322,18],[345,4,323,4],[345,9,323,9],[345,13,323,13,"i"],[345,14,323,14],[345,17,323,17,"lastBits"],[345,25,323,25],[345,27,323,27,"i"],[345,28,323,28],[345,32,323,32],[345,33,323,33],[345,35,323,35,"i"],[345,36,323,36],[345,40,323,40,"windowSize"],[345,50,323,50],[345,52,323,52],[346,6,324,8,"buckets"],[346,13,324,15],[346,14,324,16,"fill"],[346,18,324,20],[346,19,324,21,"zero"],[346,23,324,25],[346,24,324,26],[347,6,325,8],[347,11,325,13],[347,15,325,17,"j"],[347,16,325,18],[347,19,325,21],[347,20,325,22],[347,22,325,24,"j"],[347,23,325,25],[347,26,325,28,"slength"],[347,33,325,35],[347,35,325,37,"j"],[347,36,325,38],[347,38,325,40],[347,40,325,42],[348,8,326,12],[348,14,326,18,"scalar"],[348,20,326,24],[348,23,326,27,"scalars"],[348,30,326,34],[348,31,326,35,"j"],[348,32,326,36],[348,33,326,37],[349,8,327,12],[349,14,327,18,"wbits"],[349,19,327,23],[349,22,327,26,"Number"],[349,28,327,32],[349,29,327,34,"scalar"],[349,35,327,40],[349,39,327,44,"BigInt"],[349,45,327,50],[349,46,327,51,"i"],[349,47,327,52],[349,48,327,53],[349,51,327,57,"MASK"],[349,55,327,61],[349,56,327,62],[350,8,328,12,"buckets"],[350,15,328,19],[350,16,328,20,"wbits"],[350,21,328,25],[350,22,328,26],[350,25,328,29,"buckets"],[350,32,328,36],[350,33,328,37,"wbits"],[350,38,328,42],[350,39,328,43],[350,40,328,44,"add"],[350,43,328,47],[350,44,328,48,"points"],[350,50,328,54],[350,51,328,55,"j"],[350,52,328,56],[350,53,328,57],[350,54,328,58],[351,6,329,8],[352,6,330,8],[352,10,330,12,"resI"],[352,14,330,16],[352,17,330,19,"zero"],[352,21,330,23],[352,22,330,24],[352,23,330,25],[353,6,331,8],[354,6,332,8],[354,11,332,13],[354,15,332,17,"j"],[354,16,332,18],[354,19,332,21,"buckets"],[354,26,332,28],[354,27,332,29,"length"],[354,33,332,35],[354,36,332,38],[354,37,332,39],[354,39,332,41,"sumI"],[354,43,332,45],[354,46,332,48,"zero"],[354,50,332,52],[354,52,332,54,"j"],[354,53,332,55],[354,56,332,58],[354,57,332,59],[354,59,332,61,"j"],[354,60,332,62],[354,62,332,64],[354,64,332,66],[355,8,333,12,"sumI"],[355,12,333,16],[355,15,333,19,"sumI"],[355,19,333,23],[355,20,333,24,"add"],[355,23,333,27],[355,24,333,28,"buckets"],[355,31,333,35],[355,32,333,36,"j"],[355,33,333,37],[355,34,333,38],[355,35,333,39],[356,8,334,12,"resI"],[356,12,334,16],[356,15,334,19,"resI"],[356,19,334,23],[356,20,334,24,"add"],[356,23,334,27],[356,24,334,28,"sumI"],[356,28,334,32],[356,29,334,33],[357,6,335,8],[358,6,336,8,"sum"],[358,9,336,11],[358,12,336,14,"sum"],[358,15,336,17],[358,16,336,18,"add"],[358,19,336,21],[358,20,336,22,"resI"],[358,24,336,26],[358,25,336,27],[359,6,337,8],[359,10,337,12,"i"],[359,11,337,13],[359,16,337,18],[359,17,337,19],[359,19,338,12],[359,24,338,17],[359,28,338,21,"j"],[359,29,338,22],[359,32,338,25],[359,33,338,26],[359,35,338,28,"j"],[359,36,338,29],[359,39,338,32,"windowSize"],[359,49,338,42],[359,51,338,44,"j"],[359,52,338,45],[359,54,338,47],[359,56,339,16,"sum"],[359,59,339,19],[359,62,339,22,"sum"],[359,65,339,25],[359,66,339,26,"double"],[359,72,339,32],[359,73,339,33],[359,74,339,34],[360,4,340,4],[361,4,341,4],[361,11,341,11,"sum"],[361,14,341,14],[362,2,342,0],[363,2,343,0],[364,0,344,0],[365,0,345,0],[366,0,346,0],[367,0,347,0],[368,0,348,0],[369,0,349,0],[370,2,350,0],[370,11,350,9,"precomputeMSMUnsafe"],[370,30,350,28,"precomputeMSMUnsafe"],[370,31,350,29,"c"],[370,32,350,30],[370,34,350,32,"fieldN"],[370,40,350,38],[370,42,350,40,"points"],[370,48,350,46],[370,50,350,48,"windowSize"],[370,60,350,58],[370,62,350,60],[371,4,351,4],[372,0,352,0],[373,0,353,0],[374,0,354,0],[375,0,355,0],[376,0,356,0],[377,0,357,0],[378,0,358,0],[379,0,359,0],[380,0,360,0],[381,0,361,0],[382,0,362,0],[383,0,363,0],[384,0,364,0],[385,0,365,0],[386,0,366,0],[387,0,367,0],[388,0,368,0],[389,0,369,0],[390,0,370,0],[391,0,371,0],[392,0,372,0],[393,0,373,0],[394,0,374,0],[395,0,375,0],[396,0,376,0],[397,0,377,0],[398,0,378,0],[399,0,379,0],[400,0,380,0],[401,0,381,0],[402,0,382,0],[403,0,383,0],[404,0,384,0],[405,0,385,0],[406,4,386,4,"validateW"],[406,13,386,13],[406,14,386,14,"windowSize"],[406,24,386,24],[406,26,386,26,"fieldN"],[406,32,386,32],[406,33,386,33,"BITS"],[406,37,386,37],[406,38,386,38],[407,4,387,4,"validateMSMPoints"],[407,21,387,21],[407,22,387,22,"points"],[407,28,387,28],[407,30,387,30,"c"],[407,31,387,31],[407,32,387,32],[408,4,388,4],[408,10,388,10,"zero"],[408,14,388,14],[408,17,388,17,"c"],[408,18,388,18],[408,19,388,19,"ZERO"],[408,23,388,23],[409,4,389,4],[409,10,389,10,"tableSize"],[409,19,389,19],[409,22,389,22],[409,23,389,23],[409,27,389,27,"windowSize"],[409,37,389,37],[409,40,389,40],[409,41,389,41],[409,42,389,42],[409,43,389,43],[410,4,390,4],[410,10,390,10,"chunks"],[410,16,390,16],[410,19,390,19,"Math"],[410,23,390,23],[410,24,390,24,"ceil"],[410,28,390,28],[410,29,390,29,"fieldN"],[410,35,390,35],[410,36,390,36,"BITS"],[410,40,390,40],[410,43,390,43,"windowSize"],[410,53,390,53],[410,54,390,54],[410,55,390,55],[410,56,390,56],[411,4,391,4],[411,10,391,10,"MASK"],[411,14,391,14],[411,17,391,17],[411,18,391,18],[411,19,391,19],[411,21,391,21,"utils_ts_1"],[411,31,391,31],[411,32,391,32,"bitMask"],[411,39,391,39],[411,41,391,41,"windowSize"],[411,51,391,51],[411,52,391,52],[412,4,392,4],[412,10,392,10,"tables"],[412,16,392,16],[412,19,392,19,"points"],[412,25,392,25],[412,26,392,26,"map"],[412,29,392,29],[412,30,392,31,"p"],[412,31,392,32],[412,35,392,37],[413,6,393,8],[413,12,393,14,"res"],[413,15,393,17],[413,18,393,20],[413,20,393,22],[414,6,394,8],[414,11,394,13],[414,15,394,17,"i"],[414,16,394,18],[414,19,394,21],[414,20,394,22],[414,22,394,24,"acc"],[414,25,394,27],[414,28,394,30,"p"],[414,29,394,31],[414,31,394,33,"i"],[414,32,394,34],[414,35,394,37,"tableSize"],[414,44,394,46],[414,46,394,48,"i"],[414,47,394,49],[414,49,394,51],[414,51,394,53],[415,8,395,12,"res"],[415,11,395,15],[415,12,395,16,"push"],[415,16,395,20],[415,17,395,21,"acc"],[415,20,395,24],[415,21,395,25],[416,8,396,12,"acc"],[416,11,396,15],[416,14,396,18,"acc"],[416,17,396,21],[416,18,396,22,"add"],[416,21,396,25],[416,22,396,26,"p"],[416,23,396,27],[416,24,396,28],[417,6,397,8],[418,6,398,8],[418,13,398,15,"res"],[418,16,398,18],[419,4,399,4],[419,5,399,5],[419,6,399,6],[420,4,400,4],[420,11,400,12,"scalars"],[420,18,400,19],[420,22,400,24],[421,6,401,8,"validateMSMScalars"],[421,24,401,26],[421,25,401,27,"scalars"],[421,32,401,34],[421,34,401,36,"fieldN"],[421,40,401,42],[421,41,401,43],[422,6,402,8],[422,10,402,12,"scalars"],[422,17,402,19],[422,18,402,20,"length"],[422,24,402,26],[422,27,402,29,"points"],[422,33,402,35],[422,34,402,36,"length"],[422,40,402,42],[422,42,403,12],[422,48,403,18],[422,52,403,22,"Error"],[422,57,403,27],[422,58,403,28],[422,113,403,83],[422,114,403,84],[423,6,404,8],[423,10,404,12,"res"],[423,13,404,15],[423,16,404,18,"zero"],[423,20,404,22],[424,6,405,8],[424,11,405,13],[424,15,405,17,"i"],[424,16,405,18],[424,19,405,21],[424,20,405,22],[424,22,405,24,"i"],[424,23,405,25],[424,26,405,28,"chunks"],[424,32,405,34],[424,34,405,36,"i"],[424,35,405,37],[424,37,405,39],[424,39,405,41],[425,8,406,12],[426,8,407,12],[426,12,407,16,"res"],[426,15,407,19],[426,20,407,24,"zero"],[426,24,407,28],[426,26,408,16],[426,31,408,21],[426,35,408,25,"j"],[426,36,408,26],[426,39,408,29],[426,40,408,30],[426,42,408,32,"j"],[426,43,408,33],[426,46,408,36,"windowSize"],[426,56,408,46],[426,58,408,48,"j"],[426,59,408,49],[426,61,408,51],[426,63,409,20,"res"],[426,66,409,23],[426,69,409,26,"res"],[426,72,409,29],[426,73,409,30,"double"],[426,79,409,36],[426,80,409,37],[426,81,409,38],[427,8,410,12],[427,14,410,18,"shiftBy"],[427,21,410,25],[427,24,410,28,"BigInt"],[427,30,410,34],[427,31,410,35,"chunks"],[427,37,410,41],[427,40,410,44,"windowSize"],[427,50,410,54],[427,53,410,57],[427,54,410,58,"i"],[427,55,410,59],[427,58,410,62],[427,59,410,63],[427,63,410,67,"windowSize"],[427,73,410,77],[427,74,410,78],[428,8,411,12],[428,13,411,17],[428,17,411,21,"j"],[428,18,411,22],[428,21,411,25],[428,22,411,26],[428,24,411,28,"j"],[428,25,411,29],[428,28,411,32,"scalars"],[428,35,411,39],[428,36,411,40,"length"],[428,42,411,46],[428,44,411,48,"j"],[428,45,411,49],[428,47,411,51],[428,49,411,53],[429,10,412,16],[429,16,412,22,"n"],[429,17,412,23],[429,20,412,26,"scalars"],[429,27,412,33],[429,28,412,34,"j"],[429,29,412,35],[429,30,412,36],[430,10,413,16],[430,16,413,22,"curr"],[430,20,413,26],[430,23,413,29,"Number"],[430,29,413,35],[430,30,413,37,"n"],[430,31,413,38],[430,35,413,42,"shiftBy"],[430,42,413,49],[430,45,413,53,"MASK"],[430,49,413,57],[430,50,413,58],[431,10,414,16],[431,14,414,20],[431,15,414,21,"curr"],[431,19,414,25],[431,21,415,20],[431,30,415,29],[431,31,415,30],[432,10,416,16,"res"],[432,13,416,19],[432,16,416,22,"res"],[432,19,416,25],[432,20,416,26,"add"],[432,23,416,29],[432,24,416,30,"tables"],[432,30,416,36],[432,31,416,37,"j"],[432,32,416,38],[432,33,416,39],[432,34,416,40,"curr"],[432,38,416,44],[432,41,416,47],[432,42,416,48],[432,43,416,49],[432,44,416,50],[433,8,417,12],[434,6,418,8],[435,6,419,8],[435,13,419,15,"res"],[435,16,419,18],[436,4,420,4],[436,5,420,5],[437,2,421,0],[438,2,422,0],[439,2,423,0],[440,2,424,0],[440,11,424,9,"validateBasic"],[440,24,424,22,"validateBasic"],[440,25,424,23,"curve"],[440,30,424,28],[440,32,424,30],[441,4,425,4],[441,5,425,5],[441,6,425,6],[441,8,425,8,"modular_ts_1"],[441,20,425,20],[441,21,425,21,"validateField"],[441,34,425,34],[441,36,425,36,"curve"],[441,41,425,41],[441,42,425,42,"Fp"],[441,44,425,44],[441,45,425,45],[442,4,426,4],[442,5,426,5],[442,6,426,6],[442,8,426,8,"utils_ts_1"],[442,18,426,18],[442,19,426,19,"validateObject"],[442,33,426,33],[442,35,426,35,"curve"],[442,40,426,40],[442,42,426,42],[443,6,427,8,"n"],[443,7,427,9],[443,9,427,11],[443,17,427,19],[444,6,428,8,"h"],[444,7,428,9],[444,9,428,11],[444,17,428,19],[445,6,429,8,"Gx"],[445,8,429,10],[445,10,429,12],[445,17,429,19],[446,6,430,8,"Gy"],[446,8,430,10],[446,10,430,12],[447,4,431,4],[447,5,431,5],[447,7,431,7],[448,6,432,8,"nBitLength"],[448,16,432,18],[448,18,432,20],[448,33,432,35],[449,6,433,8,"nByteLength"],[449,17,433,19],[449,19,433,21],[450,4,434,4],[450,5,434,5],[450,6,434,6],[451,4,435,4],[452,4,436,4],[452,11,436,11,"Object"],[452,17,436,17],[452,18,436,18,"freeze"],[452,24,436,24],[452,25,436,25],[453,6,437,8],[453,9,437,11],[453,10,437,12],[453,11,437,13],[453,13,437,15,"modular_ts_1"],[453,25,437,27],[453,26,437,28,"nLength"],[453,33,437,35],[453,35,437,37,"curve"],[453,40,437,42],[453,41,437,43,"n"],[453,42,437,44],[453,44,437,46,"curve"],[453,49,437,51],[453,50,437,52,"nBitLength"],[453,60,437,62],[453,61,437,63],[454,6,438,8],[454,9,438,11,"curve"],[454,14,438,16],[455,6,439,8],[455,9,439,11],[456,8,439,13,"p"],[456,9,439,14],[456,11,439,16,"curve"],[456,16,439,21],[456,17,439,22,"Fp"],[456,19,439,24],[456,20,439,25,"ORDER"],[457,6,439,31],[458,4,440,4],[458,5,440,5],[458,6,440,6],[459,2,441,0],[460,2,442,0],[460,11,442,9,"createField"],[460,22,442,20,"createField"],[460,23,442,21,"order"],[460,28,442,26],[460,30,442,28,"field"],[460,35,442,33],[460,37,442,35,"isLE"],[460,41,442,39],[460,43,442,41],[461,4,443,4],[461,8,443,8,"field"],[461,13,443,13],[461,15,443,15],[462,6,444,8],[462,10,444,12,"field"],[462,15,444,17],[462,16,444,18,"ORDER"],[462,21,444,23],[462,26,444,28,"order"],[462,31,444,33],[462,33,445,12],[462,39,445,18],[462,43,445,22,"Error"],[462,48,445,27],[462,49,445,28],[462,97,445,76],[462,98,445,77],[463,6,446,8],[463,7,446,9],[463,8,446,10],[463,10,446,12,"modular_ts_1"],[463,22,446,24],[463,23,446,25,"validateField"],[463,36,446,38],[463,38,446,40,"field"],[463,43,446,45],[463,44,446,46],[464,6,447,8],[464,13,447,15,"field"],[464,18,447,20],[465,4,448,4],[465,5,448,5],[465,11,449,9],[466,6,450,8],[466,13,450,15],[466,14,450,16],[466,15,450,17],[466,17,450,19,"modular_ts_1"],[466,29,450,31],[466,30,450,32,"Field"],[466,35,450,37],[466,37,450,39,"order"],[466,42,450,44],[466,44,450,46],[467,8,450,48,"isLE"],[468,6,450,53],[468,7,450,54],[468,8,450,55],[469,4,451,4],[470,2,452,0],[471,2,453,0],[472,2,454,0],[472,11,454,9,"_createCurveFields"],[472,29,454,27,"_createCurveFields"],[472,30,454,28,"type"],[472,34,454,32],[472,36,454,34,"CURVE"],[472,41,454,39],[472,43,454,41,"curveOpts"],[472,52,454,50],[472,55,454,53],[472,56,454,54],[472,57,454,55],[472,59,454,57,"FpFnLE"],[472,65,454,63],[472,67,454,65],[473,4,455,4],[473,8,455,8,"FpFnLE"],[473,14,455,14],[473,19,455,19,"undefined"],[473,28,455,28],[473,30,456,8,"FpFnLE"],[473,36,456,14],[473,39,456,17,"type"],[473,43,456,21],[473,48,456,26],[473,57,456,35],[474,4,457,4],[474,8,457,8],[474,9,457,9,"CURVE"],[474,14,457,14],[474,18,457,18],[474,25,457,25,"CURVE"],[474,30,457,30],[474,35,457,35],[474,43,457,43],[474,45,458,8],[474,51,458,14],[474,55,458,18,"Error"],[474,60,458,23],[474,61,458,24],[474,79,458,42,"type"],[474,83,458,46],[474,98,458,61],[474,99,458,62],[475,4,459,4],[475,9,459,9],[475,15,459,15,"p"],[475,16,459,16],[475,20,459,20],[475,21,459,21],[475,24,459,24],[475,26,459,26],[475,29,459,29],[475,31,459,31],[475,34,459,34],[475,35,459,35],[475,37,459,37],[476,6,460,8],[476,12,460,14,"val"],[476,15,460,17],[476,18,460,20,"CURVE"],[476,23,460,25],[476,24,460,26,"p"],[476,25,460,27],[476,26,460,28],[477,6,461,8],[477,10,461,12],[477,12,461,14],[477,19,461,21,"val"],[477,22,461,24],[477,27,461,29],[477,35,461,37],[477,39,461,41,"val"],[477,42,461,44],[477,45,461,47,"_0n"],[477,48,461,50],[477,49,461,51],[477,51,462,12],[477,57,462,18],[477,61,462,22,"Error"],[477,66,462,27],[477,67,462,28],[477,76,462,37,"p"],[477,77,462,38],[477,103,462,64],[477,104,462,65],[478,4,463,4],[479,4,464,4],[479,10,464,10,"Fp"],[479,12,464,12],[479,15,464,15,"createField"],[479,26,464,26],[479,27,464,27,"CURVE"],[479,32,464,32],[479,33,464,33,"p"],[479,34,464,34],[479,36,464,36,"curveOpts"],[479,45,464,45],[479,46,464,46,"Fp"],[479,48,464,48],[479,50,464,50,"FpFnLE"],[479,56,464,56],[479,57,464,57],[480,4,465,4],[480,10,465,10,"Fn"],[480,12,465,12],[480,15,465,15,"createField"],[480,26,465,26],[480,27,465,27,"CURVE"],[480,32,465,32],[480,33,465,33,"n"],[480,34,465,34],[480,36,465,36,"curveOpts"],[480,45,465,45],[480,46,465,46,"Fn"],[480,48,465,48],[480,50,465,50,"FpFnLE"],[480,56,465,56],[480,57,465,57],[481,4,466,4],[481,10,466,10,"_b"],[481,12,466,12],[481,15,466,15,"type"],[481,19,466,19],[481,24,466,24],[481,37,466,37],[481,40,466,40],[481,43,466,43],[481,46,466,46],[481,49,466,49],[482,4,467,4],[482,10,467,10,"params"],[482,16,467,16],[482,19,467,19],[482,20,467,20],[482,24,467,24],[482,26,467,26],[482,30,467,30],[482,32,467,32],[482,35,467,35],[482,37,467,37,"_b"],[482,39,467,39],[482,40,467,40],[483,4,468,4],[483,9,468,9],[483,15,468,15,"p"],[483,16,468,16],[483,20,468,20,"params"],[483,26,468,26],[483,28,468,28],[484,6,469,8],[485,6,470,8],[485,10,470,12],[485,11,470,13,"Fp"],[485,13,470,15],[485,14,470,16,"isValid"],[485,21,470,23],[485,22,470,24,"CURVE"],[485,27,470,29],[485,28,470,30,"p"],[485,29,470,31],[485,30,470,32],[485,31,470,33],[485,33,471,12],[485,39,471,18],[485,43,471,22,"Error"],[485,48,471,27],[485,49,471,28],[485,58,471,37,"p"],[485,59,471,38],[485,101,471,80],[485,102,471,81],[486,4,472,4],[487,4,473,4,"CURVE"],[487,9,473,9],[487,12,473,12,"Object"],[487,18,473,18],[487,19,473,19,"freeze"],[487,25,473,25],[487,26,473,26,"Object"],[487,32,473,32],[487,33,473,33,"assign"],[487,39,473,39],[487,40,473,40],[487,41,473,41],[487,42,473,42],[487,44,473,44,"CURVE"],[487,49,473,49],[487,50,473,50],[487,51,473,51],[488,4,474,4],[488,11,474,11],[489,6,474,13,"CURVE"],[489,11,474,18],[490,6,474,20,"Fp"],[490,8,474,22],[491,6,474,24,"Fn"],[492,4,474,27],[492,5,474,28],[493,2,475,0],[494,0,475,1],[494,3]],"functionMap":{"names":["<global>","negateCt","normalizeZ","points.map$argument_0","validateW","calcWOpts","calcOffsets","validateMSMPoints","points.forEach$argument_0","validateMSMScalars","scalars.forEach$argument_0","getW","assert0","wNAF","wNAF#constructor","wNAF#_unsafeLadder","wNAF#precomputeWindow","wNAF#wNAF","wNAF#wNAFUnsafe","wNAF#getPrecomputes","wNAF#cached","wNAF#unsafe","wNAF#createCache","wNAF#hasCache","mulEndoUnsafe","pippenger","precomputeMSMUnsafe","<anonymous>","validateBasic","createField","_createCurveFields"],"mappings":"AAA;ACoB;CDG;AEO;wECC,UD;sBCC,iDD;CFC;AIC;CJG;AKC;CLQ;AMC;CNqB;AOC;mBCG;KDG;CPC;ASC;oBCG;KDG;CTC;AWM;CXI;AYC;CZG;AamB;ICE;KDK;IEE;KFS;IGa;KHgB;IIO;KJgC;IKM;KLmB;IMC;KNa;IOC;KPG;IQC;KRK;ISI;KTI;IUC;KVE;CbC;AwBM;CxBc;AyBW;CzB8C;A0BQ;8BvB0C;KuBO;WCC;KDoB;C1BC;A4BG;C5BiB;A6BC;C7BU;A8BE;C9BqB"}},"type":"js/module"}]}