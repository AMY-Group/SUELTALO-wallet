{"dependencies":[{"name":"stream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":19,"index":110},"end":{"line":5,"column":36,"index":127}}],"key":"ywjhWBPQUrHXIfwGsbgNg7Szt/A=","exportNames":["*"]}},{"name":"crypto","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":27,"index":156},"end":{"line":6,"column":44,"index":173}}],"key":"qkQHogusroKbdlr5of4h1Mv5pUg=","exportNames":["*"]}},{"name":"./permessage-deflate","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":26,"index":202},"end":{"line":8,"column":57,"index":233}}],"key":"Q2Pva8QskhgfG9XaS7nBCDBdIDE=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":43,"index":278},"end":{"line":9,"column":65,"index":300}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"]}},{"name":"./validation","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":38,"index":340},"end":{"line":10,"column":61,"index":363}}],"key":"DtGlBq654swJEbIf2z6Mk/R87pk=","exportNames":["*"]}},{"name":"./buffer-util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":38,"index":403},"end":{"line":11,"column":62,"index":427}}],"key":"FKD7Yg4fnu7BzoYB+P98shiBLdA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex\" }] */\n\n  'use strict';\n\n  const {\n    Duplex\n  } = require(_dependencyMap[0], \"stream\");\n  const {\n    randomFillSync\n  } = require(_dependencyMap[1], \"crypto\");\n  const PerMessageDeflate = require(_dependencyMap[2], \"./permessage-deflate\");\n  const {\n    EMPTY_BUFFER,\n    kWebSocket,\n    NOOP\n  } = require(_dependencyMap[3], \"./constants\");\n  const {\n    isBlob,\n    isValidStatusCode\n  } = require(_dependencyMap[4], \"./validation\");\n  const {\n    mask: applyMask,\n    toBuffer\n  } = require(_dependencyMap[5], \"./buffer-util\");\n  const kByteLength = Symbol('kByteLength');\n  const maskBuffer = Buffer.alloc(4);\n  const RANDOM_POOL_SIZE = 8 * 1024;\n  let randomPool;\n  let randomPoolPointer = RANDOM_POOL_SIZE;\n  const DEFAULT = 0;\n  const DEFLATING = 1;\n  const GET_BLOB_DATA = 2;\n\n  /**\n   * HyBi Sender implementation.\n   */\n  class Sender {\n    /**\n     * Creates a Sender instance.\n     *\n     * @param {Duplex} socket The connection socket\n     * @param {Object} [extensions] An object containing the negotiated extensions\n     * @param {Function} [generateMask] The function used to generate the masking\n     *     key\n     */\n    constructor(socket, extensions, generateMask) {\n      this._extensions = extensions || {};\n      if (generateMask) {\n        this._generateMask = generateMask;\n        this._maskBuffer = Buffer.alloc(4);\n      }\n      this._socket = socket;\n      this._firstFragment = true;\n      this._compress = false;\n      this._bufferedBytes = 0;\n      this._queue = [];\n      this._state = DEFAULT;\n      this.onerror = NOOP;\n      this[kWebSocket] = undefined;\n    }\n\n    /**\n     * Frames a piece of data according to the HyBi WebSocket protocol.\n     *\n     * @param {(Buffer|String)} data The data to frame\n     * @param {Object} options Options object\n     * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n     *     FIN bit\n     * @param {Function} [options.generateMask] The function used to generate the\n     *     masking key\n     * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n     *     `data`\n     * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n     *     key\n     * @param {Number} options.opcode The opcode\n     * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n     *     modified\n     * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n     *     RSV1 bit\n     * @return {(Buffer|String)[]} The framed data\n     * @public\n     */\n    static frame(data, options) {\n      let mask;\n      let merge = false;\n      let offset = 2;\n      let skipMasking = false;\n      if (options.mask) {\n        mask = options.maskBuffer || maskBuffer;\n        if (options.generateMask) {\n          options.generateMask(mask);\n        } else {\n          if (randomPoolPointer === RANDOM_POOL_SIZE) {\n            /* istanbul ignore else  */\n            if (randomPool === undefined) {\n              //\n              // This is lazily initialized because server-sent frames must not\n              // be masked so it may never be used.\n              //\n              randomPool = Buffer.alloc(RANDOM_POOL_SIZE);\n            }\n            randomFillSync(randomPool, 0, RANDOM_POOL_SIZE);\n            randomPoolPointer = 0;\n          }\n          mask[0] = randomPool[randomPoolPointer++];\n          mask[1] = randomPool[randomPoolPointer++];\n          mask[2] = randomPool[randomPoolPointer++];\n          mask[3] = randomPool[randomPoolPointer++];\n        }\n        skipMasking = (mask[0] | mask[1] | mask[2] | mask[3]) === 0;\n        offset = 6;\n      }\n      let dataLength;\n      if (typeof data === 'string') {\n        if ((!options.mask || skipMasking) && options[kByteLength] !== undefined) {\n          dataLength = options[kByteLength];\n        } else {\n          data = Buffer.from(data);\n          dataLength = data.length;\n        }\n      } else {\n        dataLength = data.length;\n        merge = options.mask && options.readOnly && !skipMasking;\n      }\n      let payloadLength = dataLength;\n      if (dataLength >= 65536) {\n        offset += 8;\n        payloadLength = 127;\n      } else if (dataLength > 125) {\n        offset += 2;\n        payloadLength = 126;\n      }\n      const target = Buffer.allocUnsafe(merge ? dataLength + offset : offset);\n      target[0] = options.fin ? options.opcode | 0x80 : options.opcode;\n      if (options.rsv1) target[0] |= 0x40;\n      target[1] = payloadLength;\n      if (payloadLength === 126) {\n        target.writeUInt16BE(dataLength, 2);\n      } else if (payloadLength === 127) {\n        target[2] = target[3] = 0;\n        target.writeUIntBE(dataLength, 4, 6);\n      }\n      if (!options.mask) return [target, data];\n      target[1] |= 0x80;\n      target[offset - 4] = mask[0];\n      target[offset - 3] = mask[1];\n      target[offset - 2] = mask[2];\n      target[offset - 1] = mask[3];\n      if (skipMasking) return [target, data];\n      if (merge) {\n        applyMask(data, mask, target, offset, dataLength);\n        return [target];\n      }\n      applyMask(data, mask, data, 0, dataLength);\n      return [target, data];\n    }\n\n    /**\n     * Sends a close message to the other peer.\n     *\n     * @param {Number} [code] The status code component of the body\n     * @param {(String|Buffer)} [data] The message component of the body\n     * @param {Boolean} [mask=false] Specifies whether or not to mask the message\n     * @param {Function} [cb] Callback\n     * @public\n     */\n    close(code, data, mask, cb) {\n      let buf;\n      if (code === undefined) {\n        buf = EMPTY_BUFFER;\n      } else if (typeof code !== 'number' || !isValidStatusCode(code)) {\n        throw new TypeError('First argument must be a valid error code number');\n      } else if (data === undefined || !data.length) {\n        buf = Buffer.allocUnsafe(2);\n        buf.writeUInt16BE(code, 0);\n      } else {\n        const length = Buffer.byteLength(data);\n        if (length > 123) {\n          throw new RangeError('The message must not be greater than 123 bytes');\n        }\n        buf = Buffer.allocUnsafe(2 + length);\n        buf.writeUInt16BE(code, 0);\n        if (typeof data === 'string') {\n          buf.write(data, 2);\n        } else {\n          buf.set(data, 2);\n        }\n      }\n      const options = {\n        [kByteLength]: buf.length,\n        fin: true,\n        generateMask: this._generateMask,\n        mask,\n        maskBuffer: this._maskBuffer,\n        opcode: 0x08,\n        readOnly: false,\n        rsv1: false\n      };\n      if (this._state !== DEFAULT) {\n        this.enqueue([this.dispatch, buf, false, options, cb]);\n      } else {\n        this.sendFrame(Sender.frame(buf, options), cb);\n      }\n    }\n\n    /**\n     * Sends a ping message to the other peer.\n     *\n     * @param {*} data The message to send\n     * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n     * @param {Function} [cb] Callback\n     * @public\n     */\n    ping(data, mask, cb) {\n      let byteLength;\n      let readOnly;\n      if (typeof data === 'string') {\n        byteLength = Buffer.byteLength(data);\n        readOnly = false;\n      } else if (isBlob(data)) {\n        byteLength = data.size;\n        readOnly = false;\n      } else {\n        data = toBuffer(data);\n        byteLength = data.length;\n        readOnly = toBuffer.readOnly;\n      }\n      if (byteLength > 125) {\n        throw new RangeError('The data size must not be greater than 125 bytes');\n      }\n      const options = {\n        [kByteLength]: byteLength,\n        fin: true,\n        generateMask: this._generateMask,\n        mask,\n        maskBuffer: this._maskBuffer,\n        opcode: 0x09,\n        readOnly,\n        rsv1: false\n      };\n      if (isBlob(data)) {\n        if (this._state !== DEFAULT) {\n          this.enqueue([this.getBlobData, data, false, options, cb]);\n        } else {\n          this.getBlobData(data, false, options, cb);\n        }\n      } else if (this._state !== DEFAULT) {\n        this.enqueue([this.dispatch, data, false, options, cb]);\n      } else {\n        this.sendFrame(Sender.frame(data, options), cb);\n      }\n    }\n\n    /**\n     * Sends a pong message to the other peer.\n     *\n     * @param {*} data The message to send\n     * @param {Boolean} [mask=false] Specifies whether or not to mask `data`\n     * @param {Function} [cb] Callback\n     * @public\n     */\n    pong(data, mask, cb) {\n      let byteLength;\n      let readOnly;\n      if (typeof data === 'string') {\n        byteLength = Buffer.byteLength(data);\n        readOnly = false;\n      } else if (isBlob(data)) {\n        byteLength = data.size;\n        readOnly = false;\n      } else {\n        data = toBuffer(data);\n        byteLength = data.length;\n        readOnly = toBuffer.readOnly;\n      }\n      if (byteLength > 125) {\n        throw new RangeError('The data size must not be greater than 125 bytes');\n      }\n      const options = {\n        [kByteLength]: byteLength,\n        fin: true,\n        generateMask: this._generateMask,\n        mask,\n        maskBuffer: this._maskBuffer,\n        opcode: 0x0a,\n        readOnly,\n        rsv1: false\n      };\n      if (isBlob(data)) {\n        if (this._state !== DEFAULT) {\n          this.enqueue([this.getBlobData, data, false, options, cb]);\n        } else {\n          this.getBlobData(data, false, options, cb);\n        }\n      } else if (this._state !== DEFAULT) {\n        this.enqueue([this.dispatch, data, false, options, cb]);\n      } else {\n        this.sendFrame(Sender.frame(data, options), cb);\n      }\n    }\n\n    /**\n     * Sends a data message to the other peer.\n     *\n     * @param {*} data The message to send\n     * @param {Object} options Options object\n     * @param {Boolean} [options.binary=false] Specifies whether `data` is binary\n     *     or text\n     * @param {Boolean} [options.compress=false] Specifies whether or not to\n     *     compress `data`\n     * @param {Boolean} [options.fin=false] Specifies whether the fragment is the\n     *     last one\n     * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n     *     `data`\n     * @param {Function} [cb] Callback\n     * @public\n     */\n    send(data, options, cb) {\n      const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n      let opcode = options.binary ? 2 : 1;\n      let rsv1 = options.compress;\n      let byteLength;\n      let readOnly;\n      if (typeof data === 'string') {\n        byteLength = Buffer.byteLength(data);\n        readOnly = false;\n      } else if (isBlob(data)) {\n        byteLength = data.size;\n        readOnly = false;\n      } else {\n        data = toBuffer(data);\n        byteLength = data.length;\n        readOnly = toBuffer.readOnly;\n      }\n      if (this._firstFragment) {\n        this._firstFragment = false;\n        if (rsv1 && perMessageDeflate && perMessageDeflate.params[perMessageDeflate._isServer ? 'server_no_context_takeover' : 'client_no_context_takeover']) {\n          rsv1 = byteLength >= perMessageDeflate._threshold;\n        }\n        this._compress = rsv1;\n      } else {\n        rsv1 = false;\n        opcode = 0;\n      }\n      if (options.fin) this._firstFragment = true;\n      const opts = {\n        [kByteLength]: byteLength,\n        fin: options.fin,\n        generateMask: this._generateMask,\n        mask: options.mask,\n        maskBuffer: this._maskBuffer,\n        opcode,\n        readOnly,\n        rsv1\n      };\n      if (isBlob(data)) {\n        if (this._state !== DEFAULT) {\n          this.enqueue([this.getBlobData, data, this._compress, opts, cb]);\n        } else {\n          this.getBlobData(data, this._compress, opts, cb);\n        }\n      } else if (this._state !== DEFAULT) {\n        this.enqueue([this.dispatch, data, this._compress, opts, cb]);\n      } else {\n        this.dispatch(data, this._compress, opts, cb);\n      }\n    }\n\n    /**\n     * Gets the contents of a blob as binary data.\n     *\n     * @param {Blob} blob The blob\n     * @param {Boolean} [compress=false] Specifies whether or not to compress\n     *     the data\n     * @param {Object} options Options object\n     * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n     *     FIN bit\n     * @param {Function} [options.generateMask] The function used to generate the\n     *     masking key\n     * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n     *     `data`\n     * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n     *     key\n     * @param {Number} options.opcode The opcode\n     * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n     *     modified\n     * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n     *     RSV1 bit\n     * @param {Function} [cb] Callback\n     * @private\n     */\n    getBlobData(blob, compress, options, cb) {\n      this._bufferedBytes += options[kByteLength];\n      this._state = GET_BLOB_DATA;\n      blob.arrayBuffer().then(arrayBuffer => {\n        if (this._socket.destroyed) {\n          const err = new Error('The socket was closed while the blob was being read');\n\n          //\n          // `callCallbacks` is called in the next tick to ensure that errors\n          // that might be thrown in the callbacks behave like errors thrown\n          // outside the promise chain.\n          //\n          process.nextTick(callCallbacks, this, err, cb);\n          return;\n        }\n        this._bufferedBytes -= options[kByteLength];\n        const data = toBuffer(arrayBuffer);\n        if (!compress) {\n          this._state = DEFAULT;\n          this.sendFrame(Sender.frame(data, options), cb);\n          this.dequeue();\n        } else {\n          this.dispatch(data, compress, options, cb);\n        }\n      }).catch(err => {\n        //\n        // `onError` is called in the next tick for the same reason that\n        // `callCallbacks` above is.\n        //\n        process.nextTick(onError, this, err, cb);\n      });\n    }\n\n    /**\n     * Dispatches a message.\n     *\n     * @param {(Buffer|String)} data The message to send\n     * @param {Boolean} [compress=false] Specifies whether or not to compress\n     *     `data`\n     * @param {Object} options Options object\n     * @param {Boolean} [options.fin=false] Specifies whether or not to set the\n     *     FIN bit\n     * @param {Function} [options.generateMask] The function used to generate the\n     *     masking key\n     * @param {Boolean} [options.mask=false] Specifies whether or not to mask\n     *     `data`\n     * @param {Buffer} [options.maskBuffer] The buffer used to store the masking\n     *     key\n     * @param {Number} options.opcode The opcode\n     * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be\n     *     modified\n     * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the\n     *     RSV1 bit\n     * @param {Function} [cb] Callback\n     * @private\n     */\n    dispatch(data, compress, options, cb) {\n      if (!compress) {\n        this.sendFrame(Sender.frame(data, options), cb);\n        return;\n      }\n      const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n      this._bufferedBytes += options[kByteLength];\n      this._state = DEFLATING;\n      perMessageDeflate.compress(data, options.fin, (_, buf) => {\n        if (this._socket.destroyed) {\n          const err = new Error('The socket was closed while data was being compressed');\n          callCallbacks(this, err, cb);\n          return;\n        }\n        this._bufferedBytes -= options[kByteLength];\n        this._state = DEFAULT;\n        options.readOnly = false;\n        this.sendFrame(Sender.frame(buf, options), cb);\n        this.dequeue();\n      });\n    }\n\n    /**\n     * Executes queued send operations.\n     *\n     * @private\n     */\n    dequeue() {\n      while (this._state === DEFAULT && this._queue.length) {\n        const params = this._queue.shift();\n        this._bufferedBytes -= params[3][kByteLength];\n        Reflect.apply(params[0], this, params.slice(1));\n      }\n    }\n\n    /**\n     * Enqueues a send operation.\n     *\n     * @param {Array} params Send operation parameters.\n     * @private\n     */\n    enqueue(params) {\n      this._bufferedBytes += params[3][kByteLength];\n      this._queue.push(params);\n    }\n\n    /**\n     * Sends a frame.\n     *\n     * @param {(Buffer | String)[]} list The frame to send\n     * @param {Function} [cb] Callback\n     * @private\n     */\n    sendFrame(list, cb) {\n      if (list.length === 2) {\n        this._socket.cork();\n        this._socket.write(list[0]);\n        this._socket.write(list[1], cb);\n        this._socket.uncork();\n      } else {\n        this._socket.write(list[0], cb);\n      }\n    }\n  }\n  module.exports = Sender;\n\n  /**\n   * Calls queued callbacks with an error.\n   *\n   * @param {Sender} sender The `Sender` instance\n   * @param {Error} err The error to call the callbacks with\n   * @param {Function} [cb] The first callback\n   * @private\n   */\n  function callCallbacks(sender, err, cb) {\n    if (typeof cb === 'function') cb(err);\n    for (let i = 0; i < sender._queue.length; i++) {\n      const params = sender._queue[i];\n      const callback = params[params.length - 1];\n      if (typeof callback === 'function') callback(err);\n    }\n  }\n\n  /**\n   * Handles a `Sender` error.\n   *\n   * @param {Sender} sender The `Sender` instance\n   * @param {Error} err The error\n   * @param {Function} [cb] The first pending callback\n   * @private\n   */\n  function onError(sender, err, cb) {\n    callCallbacks(sender, err, cb);\n    sender.onerror(err);\n  }\n});","lineCount":544,"map":[[2,2,1,0],[4,2,3,0],[4,14,3,12],[6,2,5,0],[6,8,5,6],[7,4,5,8,"Duplex"],[8,2,5,15],[8,3,5,16],[8,6,5,19,"require"],[8,13,5,26],[8,14,5,26,"_dependencyMap"],[8,28,5,26],[8,41,5,35],[8,42,5,36],[9,2,6,0],[9,8,6,6],[10,4,6,8,"randomFillSync"],[11,2,6,23],[11,3,6,24],[11,6,6,27,"require"],[11,13,6,34],[11,14,6,34,"_dependencyMap"],[11,28,6,34],[11,41,6,43],[11,42,6,44],[12,2,8,0],[12,8,8,6,"PerMessageDeflate"],[12,25,8,23],[12,28,8,26,"require"],[12,35,8,33],[12,36,8,33,"_dependencyMap"],[12,50,8,33],[12,77,8,56],[12,78,8,57],[13,2,9,0],[13,8,9,6],[14,4,9,8,"EMPTY_BUFFER"],[14,16,9,20],[15,4,9,22,"kWebSocket"],[15,14,9,32],[16,4,9,34,"NOOP"],[17,2,9,39],[17,3,9,40],[17,6,9,43,"require"],[17,13,9,50],[17,14,9,50,"_dependencyMap"],[17,28,9,50],[17,46,9,64],[17,47,9,65],[18,2,10,0],[18,8,10,6],[19,4,10,8,"isBlob"],[19,10,10,14],[20,4,10,16,"isValidStatusCode"],[21,2,10,34],[21,3,10,35],[21,6,10,38,"require"],[21,13,10,45],[21,14,10,45,"_dependencyMap"],[21,28,10,45],[21,47,10,60],[21,48,10,61],[22,2,11,0],[22,8,11,6],[23,4,11,8,"mask"],[23,8,11,12],[23,10,11,14,"applyMask"],[23,19,11,23],[24,4,11,25,"toBuffer"],[25,2,11,34],[25,3,11,35],[25,6,11,38,"require"],[25,13,11,45],[25,14,11,45,"_dependencyMap"],[25,28,11,45],[25,48,11,61],[25,49,11,62],[26,2,13,0],[26,8,13,6,"kByteLength"],[26,19,13,17],[26,22,13,20,"Symbol"],[26,28,13,26],[26,29,13,27],[26,42,13,40],[26,43,13,41],[27,2,14,0],[27,8,14,6,"maskBuffer"],[27,18,14,16],[27,21,14,19,"Buffer"],[27,27,14,25],[27,28,14,26,"alloc"],[27,33,14,31],[27,34,14,32],[27,35,14,33],[27,36,14,34],[28,2,15,0],[28,8,15,6,"RANDOM_POOL_SIZE"],[28,24,15,22],[28,27,15,25],[28,28,15,26],[28,31,15,29],[28,35,15,33],[29,2,16,0],[29,6,16,4,"randomPool"],[29,16,16,14],[30,2,17,0],[30,6,17,4,"randomPoolPointer"],[30,23,17,21],[30,26,17,24,"RANDOM_POOL_SIZE"],[30,42,17,40],[31,2,19,0],[31,8,19,6,"DEFAULT"],[31,15,19,13],[31,18,19,16],[31,19,19,17],[32,2,20,0],[32,8,20,6,"DEFLATING"],[32,17,20,15],[32,20,20,18],[32,21,20,19],[33,2,21,0],[33,8,21,6,"GET_BLOB_DATA"],[33,21,21,19],[33,24,21,22],[33,25,21,23],[35,2,23,0],[36,0,24,0],[37,0,25,0],[38,2,26,0],[38,8,26,6,"Sender"],[38,14,26,12],[38,15,26,13],[39,4,27,2],[40,0,28,0],[41,0,29,0],[42,0,30,0],[43,0,31,0],[44,0,32,0],[45,0,33,0],[46,0,34,0],[47,4,35,2,"constructor"],[47,15,35,13,"constructor"],[47,16,35,14,"socket"],[47,22,35,20],[47,24,35,22,"extensions"],[47,34,35,32],[47,36,35,34,"generateMask"],[47,48,35,46],[47,50,35,48],[48,6,36,4],[48,10,36,8],[48,11,36,9,"_extensions"],[48,22,36,20],[48,25,36,23,"extensions"],[48,35,36,33],[48,39,36,37],[48,40,36,38],[48,41,36,39],[49,6,38,4],[49,10,38,8,"generateMask"],[49,22,38,20],[49,24,38,22],[50,8,39,6],[50,12,39,10],[50,13,39,11,"_generateMask"],[50,26,39,24],[50,29,39,27,"generateMask"],[50,41,39,39],[51,8,40,6],[51,12,40,10],[51,13,40,11,"_maskBuffer"],[51,24,40,22],[51,27,40,25,"Buffer"],[51,33,40,31],[51,34,40,32,"alloc"],[51,39,40,37],[51,40,40,38],[51,41,40,39],[51,42,40,40],[52,6,41,4],[53,6,43,4],[53,10,43,8],[53,11,43,9,"_socket"],[53,18,43,16],[53,21,43,19,"socket"],[53,27,43,25],[54,6,45,4],[54,10,45,8],[54,11,45,9,"_firstFragment"],[54,25,45,23],[54,28,45,26],[54,32,45,30],[55,6,46,4],[55,10,46,8],[55,11,46,9,"_compress"],[55,20,46,18],[55,23,46,21],[55,28,46,26],[56,6,48,4],[56,10,48,8],[56,11,48,9,"_bufferedBytes"],[56,25,48,23],[56,28,48,26],[56,29,48,27],[57,6,49,4],[57,10,49,8],[57,11,49,9,"_queue"],[57,17,49,15],[57,20,49,18],[57,22,49,20],[58,6,50,4],[58,10,50,8],[58,11,50,9,"_state"],[58,17,50,15],[58,20,50,18,"DEFAULT"],[58,27,50,25],[59,6,51,4],[59,10,51,8],[59,11,51,9,"onerror"],[59,18,51,16],[59,21,51,19,"NOOP"],[59,25,51,23],[60,6,52,4],[60,10,52,8],[60,11,52,9,"kWebSocket"],[60,21,52,19],[60,22,52,20],[60,25,52,23,"undefined"],[60,34,52,32],[61,4,53,2],[63,4,55,2],[64,0,56,0],[65,0,57,0],[66,0,58,0],[67,0,59,0],[68,0,60,0],[69,0,61,0],[70,0,62,0],[71,0,63,0],[72,0,64,0],[73,0,65,0],[74,0,66,0],[75,0,67,0],[76,0,68,0],[77,0,69,0],[78,0,70,0],[79,0,71,0],[80,0,72,0],[81,0,73,0],[82,0,74,0],[83,0,75,0],[84,4,76,2],[84,11,76,9,"frame"],[84,16,76,14,"frame"],[84,17,76,15,"data"],[84,21,76,19],[84,23,76,21,"options"],[84,30,76,28],[84,32,76,30],[85,6,77,4],[85,10,77,8,"mask"],[85,14,77,12],[86,6,78,4],[86,10,78,8,"merge"],[86,15,78,13],[86,18,78,16],[86,23,78,21],[87,6,79,4],[87,10,79,8,"offset"],[87,16,79,14],[87,19,79,17],[87,20,79,18],[88,6,80,4],[88,10,80,8,"skipMasking"],[88,21,80,19],[88,24,80,22],[88,29,80,27],[89,6,82,4],[89,10,82,8,"options"],[89,17,82,15],[89,18,82,16,"mask"],[89,22,82,20],[89,24,82,22],[90,8,83,6,"mask"],[90,12,83,10],[90,15,83,13,"options"],[90,22,83,20],[90,23,83,21,"maskBuffer"],[90,33,83,31],[90,37,83,35,"maskBuffer"],[90,47,83,45],[91,8,85,6],[91,12,85,10,"options"],[91,19,85,17],[91,20,85,18,"generateMask"],[91,32,85,30],[91,34,85,32],[92,10,86,8,"options"],[92,17,86,15],[92,18,86,16,"generateMask"],[92,30,86,28],[92,31,86,29,"mask"],[92,35,86,33],[92,36,86,34],[93,8,87,6],[93,9,87,7],[93,15,87,13],[94,10,88,8],[94,14,88,12,"randomPoolPointer"],[94,31,88,29],[94,36,88,34,"RANDOM_POOL_SIZE"],[94,52,88,50],[94,54,88,52],[95,12,89,10],[96,12,90,10],[96,16,90,14,"randomPool"],[96,26,90,24],[96,31,90,29,"undefined"],[96,40,90,38],[96,42,90,40],[97,14,91,12],[98,14,92,12],[99,14,93,12],[100,14,94,12],[101,14,95,12,"randomPool"],[101,24,95,22],[101,27,95,25,"Buffer"],[101,33,95,31],[101,34,95,32,"alloc"],[101,39,95,37],[101,40,95,38,"RANDOM_POOL_SIZE"],[101,56,95,54],[101,57,95,55],[102,12,96,10],[103,12,98,10,"randomFillSync"],[103,26,98,24],[103,27,98,25,"randomPool"],[103,37,98,35],[103,39,98,37],[103,40,98,38],[103,42,98,40,"RANDOM_POOL_SIZE"],[103,58,98,56],[103,59,98,57],[104,12,99,10,"randomPoolPointer"],[104,29,99,27],[104,32,99,30],[104,33,99,31],[105,10,100,8],[106,10,102,8,"mask"],[106,14,102,12],[106,15,102,13],[106,16,102,14],[106,17,102,15],[106,20,102,18,"randomPool"],[106,30,102,28],[106,31,102,29,"randomPoolPointer"],[106,48,102,46],[106,50,102,48],[106,51,102,49],[107,10,103,8,"mask"],[107,14,103,12],[107,15,103,13],[107,16,103,14],[107,17,103,15],[107,20,103,18,"randomPool"],[107,30,103,28],[107,31,103,29,"randomPoolPointer"],[107,48,103,46],[107,50,103,48],[107,51,103,49],[108,10,104,8,"mask"],[108,14,104,12],[108,15,104,13],[108,16,104,14],[108,17,104,15],[108,20,104,18,"randomPool"],[108,30,104,28],[108,31,104,29,"randomPoolPointer"],[108,48,104,46],[108,50,104,48],[108,51,104,49],[109,10,105,8,"mask"],[109,14,105,12],[109,15,105,13],[109,16,105,14],[109,17,105,15],[109,20,105,18,"randomPool"],[109,30,105,28],[109,31,105,29,"randomPoolPointer"],[109,48,105,46],[109,50,105,48],[109,51,105,49],[110,8,106,6],[111,8,108,6,"skipMasking"],[111,19,108,17],[111,22,108,20],[111,23,108,21,"mask"],[111,27,108,25],[111,28,108,26],[111,29,108,27],[111,30,108,28],[111,33,108,31,"mask"],[111,37,108,35],[111,38,108,36],[111,39,108,37],[111,40,108,38],[111,43,108,41,"mask"],[111,47,108,45],[111,48,108,46],[111,49,108,47],[111,50,108,48],[111,53,108,51,"mask"],[111,57,108,55],[111,58,108,56],[111,59,108,57],[111,60,108,58],[111,66,108,64],[111,67,108,65],[112,8,109,6,"offset"],[112,14,109,12],[112,17,109,15],[112,18,109,16],[113,6,110,4],[114,6,112,4],[114,10,112,8,"dataLength"],[114,20,112,18],[115,6,114,4],[115,10,114,8],[115,17,114,15,"data"],[115,21,114,19],[115,26,114,24],[115,34,114,32],[115,36,114,34],[116,8,115,6],[116,12,116,8],[116,13,116,9],[116,14,116,10,"options"],[116,21,116,17],[116,22,116,18,"mask"],[116,26,116,22],[116,30,116,26,"skipMasking"],[116,41,116,37],[116,46,117,8,"options"],[116,53,117,15],[116,54,117,16,"kByteLength"],[116,65,117,27],[116,66,117,28],[116,71,117,33,"undefined"],[116,80,117,42],[116,82,118,8],[117,10,119,8,"dataLength"],[117,20,119,18],[117,23,119,21,"options"],[117,30,119,28],[117,31,119,29,"kByteLength"],[117,42,119,40],[117,43,119,41],[118,8,120,6],[118,9,120,7],[118,15,120,13],[119,10,121,8,"data"],[119,14,121,12],[119,17,121,15,"Buffer"],[119,23,121,21],[119,24,121,22,"from"],[119,28,121,26],[119,29,121,27,"data"],[119,33,121,31],[119,34,121,32],[120,10,122,8,"dataLength"],[120,20,122,18],[120,23,122,21,"data"],[120,27,122,25],[120,28,122,26,"length"],[120,34,122,32],[121,8,123,6],[122,6,124,4],[122,7,124,5],[122,13,124,11],[123,8,125,6,"dataLength"],[123,18,125,16],[123,21,125,19,"data"],[123,25,125,23],[123,26,125,24,"length"],[123,32,125,30],[124,8,126,6,"merge"],[124,13,126,11],[124,16,126,14,"options"],[124,23,126,21],[124,24,126,22,"mask"],[124,28,126,26],[124,32,126,30,"options"],[124,39,126,37],[124,40,126,38,"readOnly"],[124,48,126,46],[124,52,126,50],[124,53,126,51,"skipMasking"],[124,64,126,62],[125,6,127,4],[126,6,129,4],[126,10,129,8,"payloadLength"],[126,23,129,21],[126,26,129,24,"dataLength"],[126,36,129,34],[127,6,131,4],[127,10,131,8,"dataLength"],[127,20,131,18],[127,24,131,22],[127,29,131,27],[127,31,131,29],[128,8,132,6,"offset"],[128,14,132,12],[128,18,132,16],[128,19,132,17],[129,8,133,6,"payloadLength"],[129,21,133,19],[129,24,133,22],[129,27,133,25],[130,6,134,4],[130,7,134,5],[130,13,134,11],[130,17,134,15,"dataLength"],[130,27,134,25],[130,30,134,28],[130,33,134,31],[130,35,134,33],[131,8,135,6,"offset"],[131,14,135,12],[131,18,135,16],[131,19,135,17],[132,8,136,6,"payloadLength"],[132,21,136,19],[132,24,136,22],[132,27,136,25],[133,6,137,4],[134,6,139,4],[134,12,139,10,"target"],[134,18,139,16],[134,21,139,19,"Buffer"],[134,27,139,25],[134,28,139,26,"allocUnsafe"],[134,39,139,37],[134,40,139,38,"merge"],[134,45,139,43],[134,48,139,46,"dataLength"],[134,58,139,56],[134,61,139,59,"offset"],[134,67,139,65],[134,70,139,68,"offset"],[134,76,139,74],[134,77,139,75],[135,6,141,4,"target"],[135,12,141,10],[135,13,141,11],[135,14,141,12],[135,15,141,13],[135,18,141,16,"options"],[135,25,141,23],[135,26,141,24,"fin"],[135,29,141,27],[135,32,141,30,"options"],[135,39,141,37],[135,40,141,38,"opcode"],[135,46,141,44],[135,49,141,47],[135,53,141,51],[135,56,141,54,"options"],[135,63,141,61],[135,64,141,62,"opcode"],[135,70,141,68],[136,6,142,4],[136,10,142,8,"options"],[136,17,142,15],[136,18,142,16,"rsv1"],[136,22,142,20],[136,24,142,22,"target"],[136,30,142,28],[136,31,142,29],[136,32,142,30],[136,33,142,31],[136,37,142,35],[136,41,142,39],[137,6,144,4,"target"],[137,12,144,10],[137,13,144,11],[137,14,144,12],[137,15,144,13],[137,18,144,16,"payloadLength"],[137,31,144,29],[138,6,146,4],[138,10,146,8,"payloadLength"],[138,23,146,21],[138,28,146,26],[138,31,146,29],[138,33,146,31],[139,8,147,6,"target"],[139,14,147,12],[139,15,147,13,"writeUInt16BE"],[139,28,147,26],[139,29,147,27,"dataLength"],[139,39,147,37],[139,41,147,39],[139,42,147,40],[139,43,147,41],[140,6,148,4],[140,7,148,5],[140,13,148,11],[140,17,148,15,"payloadLength"],[140,30,148,28],[140,35,148,33],[140,38,148,36],[140,40,148,38],[141,8,149,6,"target"],[141,14,149,12],[141,15,149,13],[141,16,149,14],[141,17,149,15],[141,20,149,18,"target"],[141,26,149,24],[141,27,149,25],[141,28,149,26],[141,29,149,27],[141,32,149,30],[141,33,149,31],[142,8,150,6,"target"],[142,14,150,12],[142,15,150,13,"writeUIntBE"],[142,26,150,24],[142,27,150,25,"dataLength"],[142,37,150,35],[142,39,150,37],[142,40,150,38],[142,42,150,40],[142,43,150,41],[142,44,150,42],[143,6,151,4],[144,6,153,4],[144,10,153,8],[144,11,153,9,"options"],[144,18,153,16],[144,19,153,17,"mask"],[144,23,153,21],[144,25,153,23],[144,32,153,30],[144,33,153,31,"target"],[144,39,153,37],[144,41,153,39,"data"],[144,45,153,43],[144,46,153,44],[145,6,155,4,"target"],[145,12,155,10],[145,13,155,11],[145,14,155,12],[145,15,155,13],[145,19,155,17],[145,23,155,21],[146,6,156,4,"target"],[146,12,156,10],[146,13,156,11,"offset"],[146,19,156,17],[146,22,156,20],[146,23,156,21],[146,24,156,22],[146,27,156,25,"mask"],[146,31,156,29],[146,32,156,30],[146,33,156,31],[146,34,156,32],[147,6,157,4,"target"],[147,12,157,10],[147,13,157,11,"offset"],[147,19,157,17],[147,22,157,20],[147,23,157,21],[147,24,157,22],[147,27,157,25,"mask"],[147,31,157,29],[147,32,157,30],[147,33,157,31],[147,34,157,32],[148,6,158,4,"target"],[148,12,158,10],[148,13,158,11,"offset"],[148,19,158,17],[148,22,158,20],[148,23,158,21],[148,24,158,22],[148,27,158,25,"mask"],[148,31,158,29],[148,32,158,30],[148,33,158,31],[148,34,158,32],[149,6,159,4,"target"],[149,12,159,10],[149,13,159,11,"offset"],[149,19,159,17],[149,22,159,20],[149,23,159,21],[149,24,159,22],[149,27,159,25,"mask"],[149,31,159,29],[149,32,159,30],[149,33,159,31],[149,34,159,32],[150,6,161,4],[150,10,161,8,"skipMasking"],[150,21,161,19],[150,23,161,21],[150,30,161,28],[150,31,161,29,"target"],[150,37,161,35],[150,39,161,37,"data"],[150,43,161,41],[150,44,161,42],[151,6,163,4],[151,10,163,8,"merge"],[151,15,163,13],[151,17,163,15],[152,8,164,6,"applyMask"],[152,17,164,15],[152,18,164,16,"data"],[152,22,164,20],[152,24,164,22,"mask"],[152,28,164,26],[152,30,164,28,"target"],[152,36,164,34],[152,38,164,36,"offset"],[152,44,164,42],[152,46,164,44,"dataLength"],[152,56,164,54],[152,57,164,55],[153,8,165,6],[153,15,165,13],[153,16,165,14,"target"],[153,22,165,20],[153,23,165,21],[154,6,166,4],[155,6,168,4,"applyMask"],[155,15,168,13],[155,16,168,14,"data"],[155,20,168,18],[155,22,168,20,"mask"],[155,26,168,24],[155,28,168,26,"data"],[155,32,168,30],[155,34,168,32],[155,35,168,33],[155,37,168,35,"dataLength"],[155,47,168,45],[155,48,168,46],[156,6,169,4],[156,13,169,11],[156,14,169,12,"target"],[156,20,169,18],[156,22,169,20,"data"],[156,26,169,24],[156,27,169,25],[157,4,170,2],[159,4,172,2],[160,0,173,0],[161,0,174,0],[162,0,175,0],[163,0,176,0],[164,0,177,0],[165,0,178,0],[166,0,179,0],[167,0,180,0],[168,4,181,2,"close"],[168,9,181,7,"close"],[168,10,181,8,"code"],[168,14,181,12],[168,16,181,14,"data"],[168,20,181,18],[168,22,181,20,"mask"],[168,26,181,24],[168,28,181,26,"cb"],[168,30,181,28],[168,32,181,30],[169,6,182,4],[169,10,182,8,"buf"],[169,13,182,11],[170,6,184,4],[170,10,184,8,"code"],[170,14,184,12],[170,19,184,17,"undefined"],[170,28,184,26],[170,30,184,28],[171,8,185,6,"buf"],[171,11,185,9],[171,14,185,12,"EMPTY_BUFFER"],[171,26,185,24],[172,6,186,4],[172,7,186,5],[172,13,186,11],[172,17,186,15],[172,24,186,22,"code"],[172,28,186,26],[172,33,186,31],[172,41,186,39],[172,45,186,43],[172,46,186,44,"isValidStatusCode"],[172,63,186,61],[172,64,186,62,"code"],[172,68,186,66],[172,69,186,67],[172,71,186,69],[173,8,187,6],[173,14,187,12],[173,18,187,16,"TypeError"],[173,27,187,25],[173,28,187,26],[173,78,187,76],[173,79,187,77],[174,6,188,4],[174,7,188,5],[174,13,188,11],[174,17,188,15,"data"],[174,21,188,19],[174,26,188,24,"undefined"],[174,35,188,33],[174,39,188,37],[174,40,188,38,"data"],[174,44,188,42],[174,45,188,43,"length"],[174,51,188,49],[174,53,188,51],[175,8,189,6,"buf"],[175,11,189,9],[175,14,189,12,"Buffer"],[175,20,189,18],[175,21,189,19,"allocUnsafe"],[175,32,189,30],[175,33,189,31],[175,34,189,32],[175,35,189,33],[176,8,190,6,"buf"],[176,11,190,9],[176,12,190,10,"writeUInt16BE"],[176,25,190,23],[176,26,190,24,"code"],[176,30,190,28],[176,32,190,30],[176,33,190,31],[176,34,190,32],[177,6,191,4],[177,7,191,5],[177,13,191,11],[178,8,192,6],[178,14,192,12,"length"],[178,20,192,18],[178,23,192,21,"Buffer"],[178,29,192,27],[178,30,192,28,"byteLength"],[178,40,192,38],[178,41,192,39,"data"],[178,45,192,43],[178,46,192,44],[179,8,194,6],[179,12,194,10,"length"],[179,18,194,16],[179,21,194,19],[179,24,194,22],[179,26,194,24],[180,10,195,8],[180,16,195,14],[180,20,195,18,"RangeError"],[180,30,195,28],[180,31,195,29],[180,79,195,77],[180,80,195,78],[181,8,196,6],[182,8,198,6,"buf"],[182,11,198,9],[182,14,198,12,"Buffer"],[182,20,198,18],[182,21,198,19,"allocUnsafe"],[182,32,198,30],[182,33,198,31],[182,34,198,32],[182,37,198,35,"length"],[182,43,198,41],[182,44,198,42],[183,8,199,6,"buf"],[183,11,199,9],[183,12,199,10,"writeUInt16BE"],[183,25,199,23],[183,26,199,24,"code"],[183,30,199,28],[183,32,199,30],[183,33,199,31],[183,34,199,32],[184,8,201,6],[184,12,201,10],[184,19,201,17,"data"],[184,23,201,21],[184,28,201,26],[184,36,201,34],[184,38,201,36],[185,10,202,8,"buf"],[185,13,202,11],[185,14,202,12,"write"],[185,19,202,17],[185,20,202,18,"data"],[185,24,202,22],[185,26,202,24],[185,27,202,25],[185,28,202,26],[186,8,203,6],[186,9,203,7],[186,15,203,13],[187,10,204,8,"buf"],[187,13,204,11],[187,14,204,12,"set"],[187,17,204,15],[187,18,204,16,"data"],[187,22,204,20],[187,24,204,22],[187,25,204,23],[187,26,204,24],[188,8,205,6],[189,6,206,4],[190,6,208,4],[190,12,208,10,"options"],[190,19,208,17],[190,22,208,20],[191,8,209,6],[191,9,209,7,"kByteLength"],[191,20,209,18],[191,23,209,21,"buf"],[191,26,209,24],[191,27,209,25,"length"],[191,33,209,31],[192,8,210,6,"fin"],[192,11,210,9],[192,13,210,11],[192,17,210,15],[193,8,211,6,"generateMask"],[193,20,211,18],[193,22,211,20],[193,26,211,24],[193,27,211,25,"_generateMask"],[193,40,211,38],[194,8,212,6,"mask"],[194,12,212,10],[195,8,213,6,"maskBuffer"],[195,18,213,16],[195,20,213,18],[195,24,213,22],[195,25,213,23,"_maskBuffer"],[195,36,213,34],[196,8,214,6,"opcode"],[196,14,214,12],[196,16,214,14],[196,20,214,18],[197,8,215,6,"readOnly"],[197,16,215,14],[197,18,215,16],[197,23,215,21],[198,8,216,6,"rsv1"],[198,12,216,10],[198,14,216,12],[199,6,217,4],[199,7,217,5],[200,6,219,4],[200,10,219,8],[200,14,219,12],[200,15,219,13,"_state"],[200,21,219,19],[200,26,219,24,"DEFAULT"],[200,33,219,31],[200,35,219,33],[201,8,220,6],[201,12,220,10],[201,13,220,11,"enqueue"],[201,20,220,18],[201,21,220,19],[201,22,220,20],[201,26,220,24],[201,27,220,25,"dispatch"],[201,35,220,33],[201,37,220,35,"buf"],[201,40,220,38],[201,42,220,40],[201,47,220,45],[201,49,220,47,"options"],[201,56,220,54],[201,58,220,56,"cb"],[201,60,220,58],[201,61,220,59],[201,62,220,60],[202,6,221,4],[202,7,221,5],[202,13,221,11],[203,8,222,6],[203,12,222,10],[203,13,222,11,"sendFrame"],[203,22,222,20],[203,23,222,21,"Sender"],[203,29,222,27],[203,30,222,28,"frame"],[203,35,222,33],[203,36,222,34,"buf"],[203,39,222,37],[203,41,222,39,"options"],[203,48,222,46],[203,49,222,47],[203,51,222,49,"cb"],[203,53,222,51],[203,54,222,52],[204,6,223,4],[205,4,224,2],[207,4,226,2],[208,0,227,0],[209,0,228,0],[210,0,229,0],[211,0,230,0],[212,0,231,0],[213,0,232,0],[214,0,233,0],[215,4,234,2,"ping"],[215,8,234,6,"ping"],[215,9,234,7,"data"],[215,13,234,11],[215,15,234,13,"mask"],[215,19,234,17],[215,21,234,19,"cb"],[215,23,234,21],[215,25,234,23],[216,6,235,4],[216,10,235,8,"byteLength"],[216,20,235,18],[217,6,236,4],[217,10,236,8,"readOnly"],[217,18,236,16],[218,6,238,4],[218,10,238,8],[218,17,238,15,"data"],[218,21,238,19],[218,26,238,24],[218,34,238,32],[218,36,238,34],[219,8,239,6,"byteLength"],[219,18,239,16],[219,21,239,19,"Buffer"],[219,27,239,25],[219,28,239,26,"byteLength"],[219,38,239,36],[219,39,239,37,"data"],[219,43,239,41],[219,44,239,42],[220,8,240,6,"readOnly"],[220,16,240,14],[220,19,240,17],[220,24,240,22],[221,6,241,4],[221,7,241,5],[221,13,241,11],[221,17,241,15,"isBlob"],[221,23,241,21],[221,24,241,22,"data"],[221,28,241,26],[221,29,241,27],[221,31,241,29],[222,8,242,6,"byteLength"],[222,18,242,16],[222,21,242,19,"data"],[222,25,242,23],[222,26,242,24,"size"],[222,30,242,28],[223,8,243,6,"readOnly"],[223,16,243,14],[223,19,243,17],[223,24,243,22],[224,6,244,4],[224,7,244,5],[224,13,244,11],[225,8,245,6,"data"],[225,12,245,10],[225,15,245,13,"toBuffer"],[225,23,245,21],[225,24,245,22,"data"],[225,28,245,26],[225,29,245,27],[226,8,246,6,"byteLength"],[226,18,246,16],[226,21,246,19,"data"],[226,25,246,23],[226,26,246,24,"length"],[226,32,246,30],[227,8,247,6,"readOnly"],[227,16,247,14],[227,19,247,17,"toBuffer"],[227,27,247,25],[227,28,247,26,"readOnly"],[227,36,247,34],[228,6,248,4],[229,6,250,4],[229,10,250,8,"byteLength"],[229,20,250,18],[229,23,250,21],[229,26,250,24],[229,28,250,26],[230,8,251,6],[230,14,251,12],[230,18,251,16,"RangeError"],[230,28,251,26],[230,29,251,27],[230,79,251,77],[230,80,251,78],[231,6,252,4],[232,6,254,4],[232,12,254,10,"options"],[232,19,254,17],[232,22,254,20],[233,8,255,6],[233,9,255,7,"kByteLength"],[233,20,255,18],[233,23,255,21,"byteLength"],[233,33,255,31],[234,8,256,6,"fin"],[234,11,256,9],[234,13,256,11],[234,17,256,15],[235,8,257,6,"generateMask"],[235,20,257,18],[235,22,257,20],[235,26,257,24],[235,27,257,25,"_generateMask"],[235,40,257,38],[236,8,258,6,"mask"],[236,12,258,10],[237,8,259,6,"maskBuffer"],[237,18,259,16],[237,20,259,18],[237,24,259,22],[237,25,259,23,"_maskBuffer"],[237,36,259,34],[238,8,260,6,"opcode"],[238,14,260,12],[238,16,260,14],[238,20,260,18],[239,8,261,6,"readOnly"],[239,16,261,14],[240,8,262,6,"rsv1"],[240,12,262,10],[240,14,262,12],[241,6,263,4],[241,7,263,5],[242,6,265,4],[242,10,265,8,"isBlob"],[242,16,265,14],[242,17,265,15,"data"],[242,21,265,19],[242,22,265,20],[242,24,265,22],[243,8,266,6],[243,12,266,10],[243,16,266,14],[243,17,266,15,"_state"],[243,23,266,21],[243,28,266,26,"DEFAULT"],[243,35,266,33],[243,37,266,35],[244,10,267,8],[244,14,267,12],[244,15,267,13,"enqueue"],[244,22,267,20],[244,23,267,21],[244,24,267,22],[244,28,267,26],[244,29,267,27,"getBlobData"],[244,40,267,38],[244,42,267,40,"data"],[244,46,267,44],[244,48,267,46],[244,53,267,51],[244,55,267,53,"options"],[244,62,267,60],[244,64,267,62,"cb"],[244,66,267,64],[244,67,267,65],[244,68,267,66],[245,8,268,6],[245,9,268,7],[245,15,268,13],[246,10,269,8],[246,14,269,12],[246,15,269,13,"getBlobData"],[246,26,269,24],[246,27,269,25,"data"],[246,31,269,29],[246,33,269,31],[246,38,269,36],[246,40,269,38,"options"],[246,47,269,45],[246,49,269,47,"cb"],[246,51,269,49],[246,52,269,50],[247,8,270,6],[248,6,271,4],[248,7,271,5],[248,13,271,11],[248,17,271,15],[248,21,271,19],[248,22,271,20,"_state"],[248,28,271,26],[248,33,271,31,"DEFAULT"],[248,40,271,38],[248,42,271,40],[249,8,272,6],[249,12,272,10],[249,13,272,11,"enqueue"],[249,20,272,18],[249,21,272,19],[249,22,272,20],[249,26,272,24],[249,27,272,25,"dispatch"],[249,35,272,33],[249,37,272,35,"data"],[249,41,272,39],[249,43,272,41],[249,48,272,46],[249,50,272,48,"options"],[249,57,272,55],[249,59,272,57,"cb"],[249,61,272,59],[249,62,272,60],[249,63,272,61],[250,6,273,4],[250,7,273,5],[250,13,273,11],[251,8,274,6],[251,12,274,10],[251,13,274,11,"sendFrame"],[251,22,274,20],[251,23,274,21,"Sender"],[251,29,274,27],[251,30,274,28,"frame"],[251,35,274,33],[251,36,274,34,"data"],[251,40,274,38],[251,42,274,40,"options"],[251,49,274,47],[251,50,274,48],[251,52,274,50,"cb"],[251,54,274,52],[251,55,274,53],[252,6,275,4],[253,4,276,2],[255,4,278,2],[256,0,279,0],[257,0,280,0],[258,0,281,0],[259,0,282,0],[260,0,283,0],[261,0,284,0],[262,0,285,0],[263,4,286,2,"pong"],[263,8,286,6,"pong"],[263,9,286,7,"data"],[263,13,286,11],[263,15,286,13,"mask"],[263,19,286,17],[263,21,286,19,"cb"],[263,23,286,21],[263,25,286,23],[264,6,287,4],[264,10,287,8,"byteLength"],[264,20,287,18],[265,6,288,4],[265,10,288,8,"readOnly"],[265,18,288,16],[266,6,290,4],[266,10,290,8],[266,17,290,15,"data"],[266,21,290,19],[266,26,290,24],[266,34,290,32],[266,36,290,34],[267,8,291,6,"byteLength"],[267,18,291,16],[267,21,291,19,"Buffer"],[267,27,291,25],[267,28,291,26,"byteLength"],[267,38,291,36],[267,39,291,37,"data"],[267,43,291,41],[267,44,291,42],[268,8,292,6,"readOnly"],[268,16,292,14],[268,19,292,17],[268,24,292,22],[269,6,293,4],[269,7,293,5],[269,13,293,11],[269,17,293,15,"isBlob"],[269,23,293,21],[269,24,293,22,"data"],[269,28,293,26],[269,29,293,27],[269,31,293,29],[270,8,294,6,"byteLength"],[270,18,294,16],[270,21,294,19,"data"],[270,25,294,23],[270,26,294,24,"size"],[270,30,294,28],[271,8,295,6,"readOnly"],[271,16,295,14],[271,19,295,17],[271,24,295,22],[272,6,296,4],[272,7,296,5],[272,13,296,11],[273,8,297,6,"data"],[273,12,297,10],[273,15,297,13,"toBuffer"],[273,23,297,21],[273,24,297,22,"data"],[273,28,297,26],[273,29,297,27],[274,8,298,6,"byteLength"],[274,18,298,16],[274,21,298,19,"data"],[274,25,298,23],[274,26,298,24,"length"],[274,32,298,30],[275,8,299,6,"readOnly"],[275,16,299,14],[275,19,299,17,"toBuffer"],[275,27,299,25],[275,28,299,26,"readOnly"],[275,36,299,34],[276,6,300,4],[277,6,302,4],[277,10,302,8,"byteLength"],[277,20,302,18],[277,23,302,21],[277,26,302,24],[277,28,302,26],[278,8,303,6],[278,14,303,12],[278,18,303,16,"RangeError"],[278,28,303,26],[278,29,303,27],[278,79,303,77],[278,80,303,78],[279,6,304,4],[280,6,306,4],[280,12,306,10,"options"],[280,19,306,17],[280,22,306,20],[281,8,307,6],[281,9,307,7,"kByteLength"],[281,20,307,18],[281,23,307,21,"byteLength"],[281,33,307,31],[282,8,308,6,"fin"],[282,11,308,9],[282,13,308,11],[282,17,308,15],[283,8,309,6,"generateMask"],[283,20,309,18],[283,22,309,20],[283,26,309,24],[283,27,309,25,"_generateMask"],[283,40,309,38],[284,8,310,6,"mask"],[284,12,310,10],[285,8,311,6,"maskBuffer"],[285,18,311,16],[285,20,311,18],[285,24,311,22],[285,25,311,23,"_maskBuffer"],[285,36,311,34],[286,8,312,6,"opcode"],[286,14,312,12],[286,16,312,14],[286,20,312,18],[287,8,313,6,"readOnly"],[287,16,313,14],[288,8,314,6,"rsv1"],[288,12,314,10],[288,14,314,12],[289,6,315,4],[289,7,315,5],[290,6,317,4],[290,10,317,8,"isBlob"],[290,16,317,14],[290,17,317,15,"data"],[290,21,317,19],[290,22,317,20],[290,24,317,22],[291,8,318,6],[291,12,318,10],[291,16,318,14],[291,17,318,15,"_state"],[291,23,318,21],[291,28,318,26,"DEFAULT"],[291,35,318,33],[291,37,318,35],[292,10,319,8],[292,14,319,12],[292,15,319,13,"enqueue"],[292,22,319,20],[292,23,319,21],[292,24,319,22],[292,28,319,26],[292,29,319,27,"getBlobData"],[292,40,319,38],[292,42,319,40,"data"],[292,46,319,44],[292,48,319,46],[292,53,319,51],[292,55,319,53,"options"],[292,62,319,60],[292,64,319,62,"cb"],[292,66,319,64],[292,67,319,65],[292,68,319,66],[293,8,320,6],[293,9,320,7],[293,15,320,13],[294,10,321,8],[294,14,321,12],[294,15,321,13,"getBlobData"],[294,26,321,24],[294,27,321,25,"data"],[294,31,321,29],[294,33,321,31],[294,38,321,36],[294,40,321,38,"options"],[294,47,321,45],[294,49,321,47,"cb"],[294,51,321,49],[294,52,321,50],[295,8,322,6],[296,6,323,4],[296,7,323,5],[296,13,323,11],[296,17,323,15],[296,21,323,19],[296,22,323,20,"_state"],[296,28,323,26],[296,33,323,31,"DEFAULT"],[296,40,323,38],[296,42,323,40],[297,8,324,6],[297,12,324,10],[297,13,324,11,"enqueue"],[297,20,324,18],[297,21,324,19],[297,22,324,20],[297,26,324,24],[297,27,324,25,"dispatch"],[297,35,324,33],[297,37,324,35,"data"],[297,41,324,39],[297,43,324,41],[297,48,324,46],[297,50,324,48,"options"],[297,57,324,55],[297,59,324,57,"cb"],[297,61,324,59],[297,62,324,60],[297,63,324,61],[298,6,325,4],[298,7,325,5],[298,13,325,11],[299,8,326,6],[299,12,326,10],[299,13,326,11,"sendFrame"],[299,22,326,20],[299,23,326,21,"Sender"],[299,29,326,27],[299,30,326,28,"frame"],[299,35,326,33],[299,36,326,34,"data"],[299,40,326,38],[299,42,326,40,"options"],[299,49,326,47],[299,50,326,48],[299,52,326,50,"cb"],[299,54,326,52],[299,55,326,53],[300,6,327,4],[301,4,328,2],[303,4,330,2],[304,0,331,0],[305,0,332,0],[306,0,333,0],[307,0,334,0],[308,0,335,0],[309,0,336,0],[310,0,337,0],[311,0,338,0],[312,0,339,0],[313,0,340,0],[314,0,341,0],[315,0,342,0],[316,0,343,0],[317,0,344,0],[318,0,345,0],[319,4,346,2,"send"],[319,8,346,6,"send"],[319,9,346,7,"data"],[319,13,346,11],[319,15,346,13,"options"],[319,22,346,20],[319,24,346,22,"cb"],[319,26,346,24],[319,28,346,26],[320,6,347,4],[320,12,347,10,"perMessageDeflate"],[320,29,347,27],[320,32,347,30],[320,36,347,34],[320,37,347,35,"_extensions"],[320,48,347,46],[320,49,347,47,"PerMessageDeflate"],[320,66,347,64],[320,67,347,65,"extensionName"],[320,80,347,78],[320,81,347,79],[321,6,348,4],[321,10,348,8,"opcode"],[321,16,348,14],[321,19,348,17,"options"],[321,26,348,24],[321,27,348,25,"binary"],[321,33,348,31],[321,36,348,34],[321,37,348,35],[321,40,348,38],[321,41,348,39],[322,6,349,4],[322,10,349,8,"rsv1"],[322,14,349,12],[322,17,349,15,"options"],[322,24,349,22],[322,25,349,23,"compress"],[322,33,349,31],[323,6,351,4],[323,10,351,8,"byteLength"],[323,20,351,18],[324,6,352,4],[324,10,352,8,"readOnly"],[324,18,352,16],[325,6,354,4],[325,10,354,8],[325,17,354,15,"data"],[325,21,354,19],[325,26,354,24],[325,34,354,32],[325,36,354,34],[326,8,355,6,"byteLength"],[326,18,355,16],[326,21,355,19,"Buffer"],[326,27,355,25],[326,28,355,26,"byteLength"],[326,38,355,36],[326,39,355,37,"data"],[326,43,355,41],[326,44,355,42],[327,8,356,6,"readOnly"],[327,16,356,14],[327,19,356,17],[327,24,356,22],[328,6,357,4],[328,7,357,5],[328,13,357,11],[328,17,357,15,"isBlob"],[328,23,357,21],[328,24,357,22,"data"],[328,28,357,26],[328,29,357,27],[328,31,357,29],[329,8,358,6,"byteLength"],[329,18,358,16],[329,21,358,19,"data"],[329,25,358,23],[329,26,358,24,"size"],[329,30,358,28],[330,8,359,6,"readOnly"],[330,16,359,14],[330,19,359,17],[330,24,359,22],[331,6,360,4],[331,7,360,5],[331,13,360,11],[332,8,361,6,"data"],[332,12,361,10],[332,15,361,13,"toBuffer"],[332,23,361,21],[332,24,361,22,"data"],[332,28,361,26],[332,29,361,27],[333,8,362,6,"byteLength"],[333,18,362,16],[333,21,362,19,"data"],[333,25,362,23],[333,26,362,24,"length"],[333,32,362,30],[334,8,363,6,"readOnly"],[334,16,363,14],[334,19,363,17,"toBuffer"],[334,27,363,25],[334,28,363,26,"readOnly"],[334,36,363,34],[335,6,364,4],[336,6,366,4],[336,10,366,8],[336,14,366,12],[336,15,366,13,"_firstFragment"],[336,29,366,27],[336,31,366,29],[337,8,367,6],[337,12,367,10],[337,13,367,11,"_firstFragment"],[337,27,367,25],[337,30,367,28],[337,35,367,33],[338,8,368,6],[338,12,369,8,"rsv1"],[338,16,369,12],[338,20,370,8,"perMessageDeflate"],[338,37,370,25],[338,41,371,8,"perMessageDeflate"],[338,58,371,25],[338,59,371,26,"params"],[338,65,371,32],[338,66,372,10,"perMessageDeflate"],[338,83,372,27],[338,84,372,28,"_isServer"],[338,93,372,37],[338,96,373,14],[338,124,373,42],[338,127,374,14],[338,155,374,42],[338,156,375,9],[338,158,376,8],[339,10,377,8,"rsv1"],[339,14,377,12],[339,17,377,15,"byteLength"],[339,27,377,25],[339,31,377,29,"perMessageDeflate"],[339,48,377,46],[339,49,377,47,"_threshold"],[339,59,377,57],[340,8,378,6],[341,8,379,6],[341,12,379,10],[341,13,379,11,"_compress"],[341,22,379,20],[341,25,379,23,"rsv1"],[341,29,379,27],[342,6,380,4],[342,7,380,5],[342,13,380,11],[343,8,381,6,"rsv1"],[343,12,381,10],[343,15,381,13],[343,20,381,18],[344,8,382,6,"opcode"],[344,14,382,12],[344,17,382,15],[344,18,382,16],[345,6,383,4],[346,6,385,4],[346,10,385,8,"options"],[346,17,385,15],[346,18,385,16,"fin"],[346,21,385,19],[346,23,385,21],[346,27,385,25],[346,28,385,26,"_firstFragment"],[346,42,385,40],[346,45,385,43],[346,49,385,47],[347,6,387,4],[347,12,387,10,"opts"],[347,16,387,14],[347,19,387,17],[348,8,388,6],[348,9,388,7,"kByteLength"],[348,20,388,18],[348,23,388,21,"byteLength"],[348,33,388,31],[349,8,389,6,"fin"],[349,11,389,9],[349,13,389,11,"options"],[349,20,389,18],[349,21,389,19,"fin"],[349,24,389,22],[350,8,390,6,"generateMask"],[350,20,390,18],[350,22,390,20],[350,26,390,24],[350,27,390,25,"_generateMask"],[350,40,390,38],[351,8,391,6,"mask"],[351,12,391,10],[351,14,391,12,"options"],[351,21,391,19],[351,22,391,20,"mask"],[351,26,391,24],[352,8,392,6,"maskBuffer"],[352,18,392,16],[352,20,392,18],[352,24,392,22],[352,25,392,23,"_maskBuffer"],[352,36,392,34],[353,8,393,6,"opcode"],[353,14,393,12],[354,8,394,6,"readOnly"],[354,16,394,14],[355,8,395,6,"rsv1"],[356,6,396,4],[356,7,396,5],[357,6,398,4],[357,10,398,8,"isBlob"],[357,16,398,14],[357,17,398,15,"data"],[357,21,398,19],[357,22,398,20],[357,24,398,22],[358,8,399,6],[358,12,399,10],[358,16,399,14],[358,17,399,15,"_state"],[358,23,399,21],[358,28,399,26,"DEFAULT"],[358,35,399,33],[358,37,399,35],[359,10,400,8],[359,14,400,12],[359,15,400,13,"enqueue"],[359,22,400,20],[359,23,400,21],[359,24,400,22],[359,28,400,26],[359,29,400,27,"getBlobData"],[359,40,400,38],[359,42,400,40,"data"],[359,46,400,44],[359,48,400,46],[359,52,400,50],[359,53,400,51,"_compress"],[359,62,400,60],[359,64,400,62,"opts"],[359,68,400,66],[359,70,400,68,"cb"],[359,72,400,70],[359,73,400,71],[359,74,400,72],[360,8,401,6],[360,9,401,7],[360,15,401,13],[361,10,402,8],[361,14,402,12],[361,15,402,13,"getBlobData"],[361,26,402,24],[361,27,402,25,"data"],[361,31,402,29],[361,33,402,31],[361,37,402,35],[361,38,402,36,"_compress"],[361,47,402,45],[361,49,402,47,"opts"],[361,53,402,51],[361,55,402,53,"cb"],[361,57,402,55],[361,58,402,56],[362,8,403,6],[363,6,404,4],[363,7,404,5],[363,13,404,11],[363,17,404,15],[363,21,404,19],[363,22,404,20,"_state"],[363,28,404,26],[363,33,404,31,"DEFAULT"],[363,40,404,38],[363,42,404,40],[364,8,405,6],[364,12,405,10],[364,13,405,11,"enqueue"],[364,20,405,18],[364,21,405,19],[364,22,405,20],[364,26,405,24],[364,27,405,25,"dispatch"],[364,35,405,33],[364,37,405,35,"data"],[364,41,405,39],[364,43,405,41],[364,47,405,45],[364,48,405,46,"_compress"],[364,57,405,55],[364,59,405,57,"opts"],[364,63,405,61],[364,65,405,63,"cb"],[364,67,405,65],[364,68,405,66],[364,69,405,67],[365,6,406,4],[365,7,406,5],[365,13,406,11],[366,8,407,6],[366,12,407,10],[366,13,407,11,"dispatch"],[366,21,407,19],[366,22,407,20,"data"],[366,26,407,24],[366,28,407,26],[366,32,407,30],[366,33,407,31,"_compress"],[366,42,407,40],[366,44,407,42,"opts"],[366,48,407,46],[366,50,407,48,"cb"],[366,52,407,50],[366,53,407,51],[367,6,408,4],[368,4,409,2],[370,4,411,2],[371,0,412,0],[372,0,413,0],[373,0,414,0],[374,0,415,0],[375,0,416,0],[376,0,417,0],[377,0,418,0],[378,0,419,0],[379,0,420,0],[380,0,421,0],[381,0,422,0],[382,0,423,0],[383,0,424,0],[384,0,425,0],[385,0,426,0],[386,0,427,0],[387,0,428,0],[388,0,429,0],[389,0,430,0],[390,0,431,0],[391,0,432,0],[392,0,433,0],[393,4,434,2,"getBlobData"],[393,15,434,13,"getBlobData"],[393,16,434,14,"blob"],[393,20,434,18],[393,22,434,20,"compress"],[393,30,434,28],[393,32,434,30,"options"],[393,39,434,37],[393,41,434,39,"cb"],[393,43,434,41],[393,45,434,43],[394,6,435,4],[394,10,435,8],[394,11,435,9,"_bufferedBytes"],[394,25,435,23],[394,29,435,27,"options"],[394,36,435,34],[394,37,435,35,"kByteLength"],[394,48,435,46],[394,49,435,47],[395,6,436,4],[395,10,436,8],[395,11,436,9,"_state"],[395,17,436,15],[395,20,436,18,"GET_BLOB_DATA"],[395,33,436,31],[396,6,438,4,"blob"],[396,10,438,8],[396,11,439,7,"arrayBuffer"],[396,22,439,18],[396,23,439,19],[396,24,439,20],[396,25,440,7,"then"],[396,29,440,11],[396,30,440,13,"arrayBuffer"],[396,41,440,24],[396,45,440,29],[397,8,441,8],[397,12,441,12],[397,16,441,16],[397,17,441,17,"_socket"],[397,24,441,24],[397,25,441,25,"destroyed"],[397,34,441,34],[397,36,441,36],[398,10,442,10],[398,16,442,16,"err"],[398,19,442,19],[398,22,442,22],[398,26,442,26,"Error"],[398,31,442,31],[398,32,443,12],[398,85,444,10],[398,86,444,11],[400,10,446,10],[401,10,447,10],[402,10,448,10],[403,10,449,10],[404,10,450,10],[405,10,451,10,"process"],[405,17,451,17],[405,18,451,18,"nextTick"],[405,26,451,26],[405,27,451,27,"callCallbacks"],[405,40,451,40],[405,42,451,42],[405,46,451,46],[405,48,451,48,"err"],[405,51,451,51],[405,53,451,53,"cb"],[405,55,451,55],[405,56,451,56],[406,10,452,10],[407,8,453,8],[408,8,455,8],[408,12,455,12],[408,13,455,13,"_bufferedBytes"],[408,27,455,27],[408,31,455,31,"options"],[408,38,455,38],[408,39,455,39,"kByteLength"],[408,50,455,50],[408,51,455,51],[409,8,456,8],[409,14,456,14,"data"],[409,18,456,18],[409,21,456,21,"toBuffer"],[409,29,456,29],[409,30,456,30,"arrayBuffer"],[409,41,456,41],[409,42,456,42],[410,8,458,8],[410,12,458,12],[410,13,458,13,"compress"],[410,21,458,21],[410,23,458,23],[411,10,459,10],[411,14,459,14],[411,15,459,15,"_state"],[411,21,459,21],[411,24,459,24,"DEFAULT"],[411,31,459,31],[412,10,460,10],[412,14,460,14],[412,15,460,15,"sendFrame"],[412,24,460,24],[412,25,460,25,"Sender"],[412,31,460,31],[412,32,460,32,"frame"],[412,37,460,37],[412,38,460,38,"data"],[412,42,460,42],[412,44,460,44,"options"],[412,51,460,51],[412,52,460,52],[412,54,460,54,"cb"],[412,56,460,56],[412,57,460,57],[413,10,461,10],[413,14,461,14],[413,15,461,15,"dequeue"],[413,22,461,22],[413,23,461,23],[413,24,461,24],[414,8,462,8],[414,9,462,9],[414,15,462,15],[415,10,463,10],[415,14,463,14],[415,15,463,15,"dispatch"],[415,23,463,23],[415,24,463,24,"data"],[415,28,463,28],[415,30,463,30,"compress"],[415,38,463,38],[415,40,463,40,"options"],[415,47,463,47],[415,49,463,49,"cb"],[415,51,463,51],[415,52,463,52],[416,8,464,8],[417,6,465,6],[417,7,465,7],[417,8,465,8],[417,9,466,7,"catch"],[417,14,466,12],[417,15,466,14,"err"],[417,18,466,17],[417,22,466,22],[418,8,467,8],[419,8,468,8],[420,8,469,8],[421,8,470,8],[422,8,471,8,"process"],[422,15,471,15],[422,16,471,16,"nextTick"],[422,24,471,24],[422,25,471,25,"onError"],[422,32,471,32],[422,34,471,34],[422,38,471,38],[422,40,471,40,"err"],[422,43,471,43],[422,45,471,45,"cb"],[422,47,471,47],[422,48,471,48],[423,6,472,6],[423,7,472,7],[423,8,472,8],[424,4,473,2],[426,4,475,2],[427,0,476,0],[428,0,477,0],[429,0,478,0],[430,0,479,0],[431,0,480,0],[432,0,481,0],[433,0,482,0],[434,0,483,0],[435,0,484,0],[436,0,485,0],[437,0,486,0],[438,0,487,0],[439,0,488,0],[440,0,489,0],[441,0,490,0],[442,0,491,0],[443,0,492,0],[444,0,493,0],[445,0,494,0],[446,0,495,0],[447,0,496,0],[448,0,497,0],[449,4,498,2,"dispatch"],[449,12,498,10,"dispatch"],[449,13,498,11,"data"],[449,17,498,15],[449,19,498,17,"compress"],[449,27,498,25],[449,29,498,27,"options"],[449,36,498,34],[449,38,498,36,"cb"],[449,40,498,38],[449,42,498,40],[450,6,499,4],[450,10,499,8],[450,11,499,9,"compress"],[450,19,499,17],[450,21,499,19],[451,8,500,6],[451,12,500,10],[451,13,500,11,"sendFrame"],[451,22,500,20],[451,23,500,21,"Sender"],[451,29,500,27],[451,30,500,28,"frame"],[451,35,500,33],[451,36,500,34,"data"],[451,40,500,38],[451,42,500,40,"options"],[451,49,500,47],[451,50,500,48],[451,52,500,50,"cb"],[451,54,500,52],[451,55,500,53],[452,8,501,6],[453,6,502,4],[454,6,504,4],[454,12,504,10,"perMessageDeflate"],[454,29,504,27],[454,32,504,30],[454,36,504,34],[454,37,504,35,"_extensions"],[454,48,504,46],[454,49,504,47,"PerMessageDeflate"],[454,66,504,64],[454,67,504,65,"extensionName"],[454,80,504,78],[454,81,504,79],[455,6,506,4],[455,10,506,8],[455,11,506,9,"_bufferedBytes"],[455,25,506,23],[455,29,506,27,"options"],[455,36,506,34],[455,37,506,35,"kByteLength"],[455,48,506,46],[455,49,506,47],[456,6,507,4],[456,10,507,8],[456,11,507,9,"_state"],[456,17,507,15],[456,20,507,18,"DEFLATING"],[456,29,507,27],[457,6,508,4,"perMessageDeflate"],[457,23,508,21],[457,24,508,22,"compress"],[457,32,508,30],[457,33,508,31,"data"],[457,37,508,35],[457,39,508,37,"options"],[457,46,508,44],[457,47,508,45,"fin"],[457,50,508,48],[457,52,508,50],[457,53,508,51,"_"],[457,54,508,52],[457,56,508,54,"buf"],[457,59,508,57],[457,64,508,62],[458,8,509,6],[458,12,509,10],[458,16,509,14],[458,17,509,15,"_socket"],[458,24,509,22],[458,25,509,23,"destroyed"],[458,34,509,32],[458,36,509,34],[459,10,510,8],[459,16,510,14,"err"],[459,19,510,17],[459,22,510,20],[459,26,510,24,"Error"],[459,31,510,29],[459,32,511,10],[459,87,512,8],[459,88,512,9],[460,10,514,8,"callCallbacks"],[460,23,514,21],[460,24,514,22],[460,28,514,26],[460,30,514,28,"err"],[460,33,514,31],[460,35,514,33,"cb"],[460,37,514,35],[460,38,514,36],[461,10,515,8],[462,8,516,6],[463,8,518,6],[463,12,518,10],[463,13,518,11,"_bufferedBytes"],[463,27,518,25],[463,31,518,29,"options"],[463,38,518,36],[463,39,518,37,"kByteLength"],[463,50,518,48],[463,51,518,49],[464,8,519,6],[464,12,519,10],[464,13,519,11,"_state"],[464,19,519,17],[464,22,519,20,"DEFAULT"],[464,29,519,27],[465,8,520,6,"options"],[465,15,520,13],[465,16,520,14,"readOnly"],[465,24,520,22],[465,27,520,25],[465,32,520,30],[466,8,521,6],[466,12,521,10],[466,13,521,11,"sendFrame"],[466,22,521,20],[466,23,521,21,"Sender"],[466,29,521,27],[466,30,521,28,"frame"],[466,35,521,33],[466,36,521,34,"buf"],[466,39,521,37],[466,41,521,39,"options"],[466,48,521,46],[466,49,521,47],[466,51,521,49,"cb"],[466,53,521,51],[466,54,521,52],[467,8,522,6],[467,12,522,10],[467,13,522,11,"dequeue"],[467,20,522,18],[467,21,522,19],[467,22,522,20],[468,6,523,4],[468,7,523,5],[468,8,523,6],[469,4,524,2],[471,4,526,2],[472,0,527,0],[473,0,528,0],[474,0,529,0],[475,0,530,0],[476,4,531,2,"dequeue"],[476,11,531,9,"dequeue"],[476,12,531,9],[476,14,531,12],[477,6,532,4],[477,13,532,11],[477,17,532,15],[477,18,532,16,"_state"],[477,24,532,22],[477,29,532,27,"DEFAULT"],[477,36,532,34],[477,40,532,38],[477,44,532,42],[477,45,532,43,"_queue"],[477,51,532,49],[477,52,532,50,"length"],[477,58,532,56],[477,60,532,58],[478,8,533,6],[478,14,533,12,"params"],[478,20,533,18],[478,23,533,21],[478,27,533,25],[478,28,533,26,"_queue"],[478,34,533,32],[478,35,533,33,"shift"],[478,40,533,38],[478,41,533,39],[478,42,533,40],[479,8,535,6],[479,12,535,10],[479,13,535,11,"_bufferedBytes"],[479,27,535,25],[479,31,535,29,"params"],[479,37,535,35],[479,38,535,36],[479,39,535,37],[479,40,535,38],[479,41,535,39,"kByteLength"],[479,52,535,50],[479,53,535,51],[480,8,536,6,"Reflect"],[480,15,536,13],[480,16,536,14,"apply"],[480,21,536,19],[480,22,536,20,"params"],[480,28,536,26],[480,29,536,27],[480,30,536,28],[480,31,536,29],[480,33,536,31],[480,37,536,35],[480,39,536,37,"params"],[480,45,536,43],[480,46,536,44,"slice"],[480,51,536,49],[480,52,536,50],[480,53,536,51],[480,54,536,52],[480,55,536,53],[481,6,537,4],[482,4,538,2],[484,4,540,2],[485,0,541,0],[486,0,542,0],[487,0,543,0],[488,0,544,0],[489,0,545,0],[490,4,546,2,"enqueue"],[490,11,546,9,"enqueue"],[490,12,546,10,"params"],[490,18,546,16],[490,20,546,18],[491,6,547,4],[491,10,547,8],[491,11,547,9,"_bufferedBytes"],[491,25,547,23],[491,29,547,27,"params"],[491,35,547,33],[491,36,547,34],[491,37,547,35],[491,38,547,36],[491,39,547,37,"kByteLength"],[491,50,547,48],[491,51,547,49],[492,6,548,4],[492,10,548,8],[492,11,548,9,"_queue"],[492,17,548,15],[492,18,548,16,"push"],[492,22,548,20],[492,23,548,21,"params"],[492,29,548,27],[492,30,548,28],[493,4,549,2],[495,4,551,2],[496,0,552,0],[497,0,553,0],[498,0,554,0],[499,0,555,0],[500,0,556,0],[501,0,557,0],[502,4,558,2,"sendFrame"],[502,13,558,11,"sendFrame"],[502,14,558,12,"list"],[502,18,558,16],[502,20,558,18,"cb"],[502,22,558,20],[502,24,558,22],[503,6,559,4],[503,10,559,8,"list"],[503,14,559,12],[503,15,559,13,"length"],[503,21,559,19],[503,26,559,24],[503,27,559,25],[503,29,559,27],[504,8,560,6],[504,12,560,10],[504,13,560,11,"_socket"],[504,20,560,18],[504,21,560,19,"cork"],[504,25,560,23],[504,26,560,24],[504,27,560,25],[505,8,561,6],[505,12,561,10],[505,13,561,11,"_socket"],[505,20,561,18],[505,21,561,19,"write"],[505,26,561,24],[505,27,561,25,"list"],[505,31,561,29],[505,32,561,30],[505,33,561,31],[505,34,561,32],[505,35,561,33],[506,8,562,6],[506,12,562,10],[506,13,562,11,"_socket"],[506,20,562,18],[506,21,562,19,"write"],[506,26,562,24],[506,27,562,25,"list"],[506,31,562,29],[506,32,562,30],[506,33,562,31],[506,34,562,32],[506,36,562,34,"cb"],[506,38,562,36],[506,39,562,37],[507,8,563,6],[507,12,563,10],[507,13,563,11,"_socket"],[507,20,563,18],[507,21,563,19,"uncork"],[507,27,563,25],[507,28,563,26],[507,29,563,27],[508,6,564,4],[508,7,564,5],[508,13,564,11],[509,8,565,6],[509,12,565,10],[509,13,565,11,"_socket"],[509,20,565,18],[509,21,565,19,"write"],[509,26,565,24],[509,27,565,25,"list"],[509,31,565,29],[509,32,565,30],[509,33,565,31],[509,34,565,32],[509,36,565,34,"cb"],[509,38,565,36],[509,39,565,37],[510,6,566,4],[511,4,567,2],[512,2,568,0],[513,2,570,0,"module"],[513,8,570,6],[513,9,570,7,"exports"],[513,16,570,14],[513,19,570,17,"Sender"],[513,25,570,23],[515,2,572,0],[516,0,573,0],[517,0,574,0],[518,0,575,0],[519,0,576,0],[520,0,577,0],[521,0,578,0],[522,0,579,0],[523,2,580,0],[523,11,580,9,"callCallbacks"],[523,24,580,22,"callCallbacks"],[523,25,580,23,"sender"],[523,31,580,29],[523,33,580,31,"err"],[523,36,580,34],[523,38,580,36,"cb"],[523,40,580,38],[523,42,580,40],[524,4,581,2],[524,8,581,6],[524,15,581,13,"cb"],[524,17,581,15],[524,22,581,20],[524,32,581,30],[524,34,581,32,"cb"],[524,36,581,34],[524,37,581,35,"err"],[524,40,581,38],[524,41,581,39],[525,4,583,2],[525,9,583,7],[525,13,583,11,"i"],[525,14,583,12],[525,17,583,15],[525,18,583,16],[525,20,583,18,"i"],[525,21,583,19],[525,24,583,22,"sender"],[525,30,583,28],[525,31,583,29,"_queue"],[525,37,583,35],[525,38,583,36,"length"],[525,44,583,42],[525,46,583,44,"i"],[525,47,583,45],[525,49,583,47],[525,51,583,49],[526,6,584,4],[526,12,584,10,"params"],[526,18,584,16],[526,21,584,19,"sender"],[526,27,584,25],[526,28,584,26,"_queue"],[526,34,584,32],[526,35,584,33,"i"],[526,36,584,34],[526,37,584,35],[527,6,585,4],[527,12,585,10,"callback"],[527,20,585,18],[527,23,585,21,"params"],[527,29,585,27],[527,30,585,28,"params"],[527,36,585,34],[527,37,585,35,"length"],[527,43,585,41],[527,46,585,44],[527,47,585,45],[527,48,585,46],[528,6,587,4],[528,10,587,8],[528,17,587,15,"callback"],[528,25,587,23],[528,30,587,28],[528,40,587,38],[528,42,587,40,"callback"],[528,50,587,48],[528,51,587,49,"err"],[528,54,587,52],[528,55,587,53],[529,4,588,2],[530,2,589,0],[532,2,591,0],[533,0,592,0],[534,0,593,0],[535,0,594,0],[536,0,595,0],[537,0,596,0],[538,0,597,0],[539,0,598,0],[540,2,599,0],[540,11,599,9,"onError"],[540,18,599,16,"onError"],[540,19,599,17,"sender"],[540,25,599,23],[540,27,599,25,"err"],[540,30,599,28],[540,32,599,30,"cb"],[540,34,599,32],[540,36,599,34],[541,4,600,2,"callCallbacks"],[541,17,600,15],[541,18,600,16,"sender"],[541,24,600,22],[541,26,600,24,"err"],[541,29,600,27],[541,31,600,29,"cb"],[541,33,600,31],[541,34,600,32],[542,4,601,2,"sender"],[542,10,601,8],[542,11,601,9,"onerror"],[542,18,601,16],[542,19,601,17,"err"],[542,22,601,20],[542,23,601,21],[543,2,602,0],[544,0,602,1],[544,3]],"functionMap":{"names":["<global>","Sender","Sender#constructor","Sender.frame","Sender#close","Sender#ping","Sender#pong","Sender#send","Sender#getBlobData","blob.arrayBuffer.then$argument_0","blob.arrayBuffer.then._catch$argument_0","Sender#dispatch","perMessageDeflate.compress$argument_2","Sender#dequeue","Sender#enqueue","Sender#sendFrame","callCallbacks","onError"],"mappings":"AAA;ACyB;ECS;GDkB;EEuB;GF8F;EGW;GH2C;EIU;GJ0C;EKU;GL0C;EMkB;GN+D;EOyB;YCM;ODyB;aEC;OFM;GPC;EUyB;kDCU;KDe;GVC;EYO;GZO;EaQ;GbG;EcS;GdS;CDC;AgBY;ChBS;AiBU;CjBG"}},"type":"js/module"}]}