{"dependencies":[{"name":"randombytes","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":18,"index":18},"end":{"line":1,"column":40,"index":40}}],"key":"HRppB8l92kfLq10/yqHPiqGAuBY=","exportNames":["*"]}},{"name":"bn.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":9,"index":151},"end":{"line":5,"column":25,"index":167}}],"key":"h/AEHknS6KAnKragIfqHUjGvuRM=","exportNames":["*"]}},{"name":"miller-rabin","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":18,"index":216},"end":{"line":7,"column":41,"index":239}}],"key":"JlFjwCagvLq0EqEIeqQmt6qe9mA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var randomBytes = require(_dependencyMap[0], \"randombytes\");\n  module.exports = findPrime;\n  findPrime.simpleSieve = simpleSieve;\n  findPrime.fermatTest = fermatTest;\n  var BN = require(_dependencyMap[1], \"bn.js\");\n  var TWENTYFOUR = new BN(24);\n  var MillerRabin = require(_dependencyMap[2], \"miller-rabin\");\n  var millerRabin = new MillerRabin();\n  var ONE = new BN(1);\n  var TWO = new BN(2);\n  var FIVE = new BN(5);\n  var SIXTEEN = new BN(16);\n  var EIGHT = new BN(8);\n  var TEN = new BN(10);\n  var THREE = new BN(3);\n  var SEVEN = new BN(7);\n  var ELEVEN = new BN(11);\n  var FOUR = new BN(4);\n  var TWELVE = new BN(12);\n  var primes = null;\n  function _getPrimes() {\n    if (primes !== null) return primes;\n    var limit = 0x100000;\n    var res = [];\n    res[0] = 2;\n    for (var i = 1, k = 3; k < limit; k += 2) {\n      var sqrt = Math.ceil(Math.sqrt(k));\n      for (var j = 0; j < i && res[j] <= sqrt; j++) if (k % res[j] === 0) break;\n      if (i !== j && res[j] <= sqrt) continue;\n      res[i++] = k;\n    }\n    primes = res;\n    return res;\n  }\n  function simpleSieve(p) {\n    var primes = _getPrimes();\n    for (var i = 0; i < primes.length; i++) if (p.modn(primes[i]) === 0) {\n      if (p.cmpn(primes[i]) === 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }\n  function fermatTest(p) {\n    var red = BN.mont(p);\n    return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;\n  }\n  function findPrime(bits, gen) {\n    if (bits < 16) {\n      // this is what openssl does\n      if (gen === 2 || gen === 5) {\n        return new BN([0x8c, 0x7b]);\n      } else {\n        return new BN([0x8c, 0x27]);\n      }\n    }\n    gen = new BN(gen);\n    var num, n2;\n    while (true) {\n      num = new BN(randomBytes(Math.ceil(bits / 8)));\n      while (num.bitLength() > bits) {\n        num.ishrn(1);\n      }\n      if (num.isEven()) {\n        num.iadd(ONE);\n      }\n      if (!num.testn(1)) {\n        num.iadd(TWO);\n      }\n      if (!gen.cmp(TWO)) {\n        while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {\n          num.iadd(FOUR);\n        }\n      } else if (!gen.cmp(FIVE)) {\n        while (num.mod(TEN).cmp(THREE)) {\n          num.iadd(FOUR);\n        }\n      }\n      n2 = num.shrn(1);\n      if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) {\n        return num;\n      }\n    }\n  }\n});","lineCount":88,"map":[[2,2,1,0],[2,6,1,4,"randomBytes"],[2,17,1,15],[2,20,1,18,"require"],[2,27,1,25],[2,28,1,25,"_dependencyMap"],[2,42,1,25],[2,60,1,39],[2,61,1,40],[3,2,2,0,"module"],[3,8,2,6],[3,9,2,7,"exports"],[3,16,2,14],[3,19,2,17,"findPrime"],[3,28,2,26],[4,2,3,0,"findPrime"],[4,11,3,9],[4,12,3,10,"simpleSieve"],[4,23,3,21],[4,26,3,24,"simpleSieve"],[4,37,3,35],[5,2,4,0,"findPrime"],[5,11,4,9],[5,12,4,10,"fermatTest"],[5,22,4,20],[5,25,4,23,"fermatTest"],[5,35,4,33],[6,2,5,0],[6,6,5,4,"BN"],[6,8,5,6],[6,11,5,9,"require"],[6,18,5,16],[6,19,5,16,"_dependencyMap"],[6,33,5,16],[6,45,5,24],[6,46,5,25],[7,2,6,0],[7,6,6,4,"TWENTYFOUR"],[7,16,6,14],[7,19,6,17],[7,23,6,21,"BN"],[7,25,6,23],[7,26,6,24],[7,28,6,26],[7,29,6,27],[8,2,7,0],[8,6,7,4,"MillerRabin"],[8,17,7,15],[8,20,7,18,"require"],[8,27,7,25],[8,28,7,25,"_dependencyMap"],[8,42,7,25],[8,61,7,40],[8,62,7,41],[9,2,8,0],[9,6,8,4,"millerRabin"],[9,17,8,15],[9,20,8,18],[9,24,8,22,"MillerRabin"],[9,35,8,33],[9,36,8,34],[9,37,8,35],[10,2,9,0],[10,6,9,4,"ONE"],[10,9,9,7],[10,12,9,10],[10,16,9,14,"BN"],[10,18,9,16],[10,19,9,17],[10,20,9,18],[10,21,9,19],[11,2,10,0],[11,6,10,4,"TWO"],[11,9,10,7],[11,12,10,10],[11,16,10,14,"BN"],[11,18,10,16],[11,19,10,17],[11,20,10,18],[11,21,10,19],[12,2,11,0],[12,6,11,4,"FIVE"],[12,10,11,8],[12,13,11,11],[12,17,11,15,"BN"],[12,19,11,17],[12,20,11,18],[12,21,11,19],[12,22,11,20],[13,2,12,0],[13,6,12,4,"SIXTEEN"],[13,13,12,11],[13,16,12,14],[13,20,12,18,"BN"],[13,22,12,20],[13,23,12,21],[13,25,12,23],[13,26,12,24],[14,2,13,0],[14,6,13,4,"EIGHT"],[14,11,13,9],[14,14,13,12],[14,18,13,16,"BN"],[14,20,13,18],[14,21,13,19],[14,22,13,20],[14,23,13,21],[15,2,14,0],[15,6,14,4,"TEN"],[15,9,14,7],[15,12,14,10],[15,16,14,14,"BN"],[15,18,14,16],[15,19,14,17],[15,21,14,19],[15,22,14,20],[16,2,15,0],[16,6,15,4,"THREE"],[16,11,15,9],[16,14,15,12],[16,18,15,16,"BN"],[16,20,15,18],[16,21,15,19],[16,22,15,20],[16,23,15,21],[17,2,16,0],[17,6,16,4,"SEVEN"],[17,11,16,9],[17,14,16,12],[17,18,16,16,"BN"],[17,20,16,18],[17,21,16,19],[17,22,16,20],[17,23,16,21],[18,2,17,0],[18,6,17,4,"ELEVEN"],[18,12,17,10],[18,15,17,13],[18,19,17,17,"BN"],[18,21,17,19],[18,22,17,20],[18,24,17,22],[18,25,17,23],[19,2,18,0],[19,6,18,4,"FOUR"],[19,10,18,8],[19,13,18,11],[19,17,18,15,"BN"],[19,19,18,17],[19,20,18,18],[19,21,18,19],[19,22,18,20],[20,2,19,0],[20,6,19,4,"TWELVE"],[20,12,19,10],[20,15,19,13],[20,19,19,17,"BN"],[20,21,19,19],[20,22,19,20],[20,24,19,22],[20,25,19,23],[21,2,20,0],[21,6,20,4,"primes"],[21,12,20,10],[21,15,20,13],[21,19,20,17],[22,2,22,0],[22,11,22,9,"_getPrimes"],[22,21,22,19,"_getPrimes"],[22,22,22,19],[22,24,22,22],[23,4,23,2],[23,8,23,6,"primes"],[23,14,23,12],[23,19,23,17],[23,23,23,21],[23,25,24,4],[23,32,24,11,"primes"],[23,38,24,17],[24,4,26,2],[24,8,26,6,"limit"],[24,13,26,11],[24,16,26,14],[24,24,26,22],[25,4,27,2],[25,8,27,6,"res"],[25,11,27,9],[25,14,27,12],[25,16,27,14],[26,4,28,2,"res"],[26,7,28,5],[26,8,28,6],[26,9,28,7],[26,10,28,8],[26,13,28,11],[26,14,28,12],[27,4,29,2],[27,9,29,7],[27,13,29,11,"i"],[27,14,29,12],[27,17,29,15],[27,18,29,16],[27,20,29,18,"k"],[27,21,29,19],[27,24,29,22],[27,25,29,23],[27,27,29,25,"k"],[27,28,29,26],[27,31,29,29,"limit"],[27,36,29,34],[27,38,29,36,"k"],[27,39,29,37],[27,43,29,41],[27,44,29,42],[27,46,29,44],[28,6,30,4],[28,10,30,8,"sqrt"],[28,14,30,12],[28,17,30,15,"Math"],[28,21,30,19],[28,22,30,20,"ceil"],[28,26,30,24],[28,27,30,25,"Math"],[28,31,30,29],[28,32,30,30,"sqrt"],[28,36,30,34],[28,37,30,35,"k"],[28,38,30,36],[28,39,30,37],[28,40,30,38],[29,6,31,4],[29,11,31,9],[29,15,31,13,"j"],[29,16,31,14],[29,19,31,17],[29,20,31,18],[29,22,31,20,"j"],[29,23,31,21],[29,26,31,24,"i"],[29,27,31,25],[29,31,31,29,"res"],[29,34,31,32],[29,35,31,33,"j"],[29,36,31,34],[29,37,31,35],[29,41,31,39,"sqrt"],[29,45,31,43],[29,47,31,45,"j"],[29,48,31,46],[29,50,31,48],[29,52,32,6],[29,56,32,10,"k"],[29,57,32,11],[29,60,32,14,"res"],[29,63,32,17],[29,64,32,18,"j"],[29,65,32,19],[29,66,32,20],[29,71,32,25],[29,72,32,26],[29,74,33,8],[30,6,35,4],[30,10,35,8,"i"],[30,11,35,9],[30,16,35,14,"j"],[30,17,35,15],[30,21,35,19,"res"],[30,24,35,22],[30,25,35,23,"j"],[30,26,35,24],[30,27,35,25],[30,31,35,29,"sqrt"],[30,35,35,33],[30,37,36,6],[31,6,38,4,"res"],[31,9,38,7],[31,10,38,8,"i"],[31,11,38,9],[31,13,38,11],[31,14,38,12],[31,17,38,15,"k"],[31,18,38,16],[32,4,39,2],[33,4,40,2,"primes"],[33,10,40,8],[33,13,40,11,"res"],[33,16,40,14],[34,4,41,2],[34,11,41,9,"res"],[34,14,41,12],[35,2,42,0],[36,2,44,0],[36,11,44,9,"simpleSieve"],[36,22,44,20,"simpleSieve"],[36,23,44,21,"p"],[36,24,44,22],[36,26,44,24],[37,4,45,2],[37,8,45,6,"primes"],[37,14,45,12],[37,17,45,15,"_getPrimes"],[37,27,45,25],[37,28,45,26],[37,29,45,27],[38,4,47,2],[38,9,47,7],[38,13,47,11,"i"],[38,14,47,12],[38,17,47,15],[38,18,47,16],[38,20,47,18,"i"],[38,21,47,19],[38,24,47,22,"primes"],[38,30,47,28],[38,31,47,29,"length"],[38,37,47,35],[38,39,47,37,"i"],[38,40,47,38],[38,42,47,40],[38,44,48,4],[38,48,48,8,"p"],[38,49,48,9],[38,50,48,10,"modn"],[38,54,48,14],[38,55,48,15,"primes"],[38,61,48,21],[38,62,48,22,"i"],[38,63,48,23],[38,64,48,24],[38,65,48,25],[38,70,48,30],[38,71,48,31],[38,73,48,33],[39,6,49,6],[39,10,49,10,"p"],[39,11,49,11],[39,12,49,12,"cmpn"],[39,16,49,16],[39,17,49,17,"primes"],[39,23,49,23],[39,24,49,24,"i"],[39,25,49,25],[39,26,49,26],[39,27,49,27],[39,32,49,32],[39,33,49,33],[39,35,49,35],[40,8,50,8],[40,15,50,15],[40,19,50,19],[41,6,51,6],[41,7,51,7],[41,13,51,13],[42,8,52,8],[42,15,52,15],[42,20,52,20],[43,6,53,6],[44,4,54,4],[45,4,56,2],[45,11,56,9],[45,15,56,13],[46,2,57,0],[47,2,59,0],[47,11,59,9,"fermatTest"],[47,21,59,19,"fermatTest"],[47,22,59,20,"p"],[47,23,59,21],[47,25,59,23],[48,4,60,2],[48,8,60,6,"red"],[48,11,60,9],[48,14,60,12,"BN"],[48,16,60,14],[48,17,60,15,"mont"],[48,21,60,19],[48,22,60,20,"p"],[48,23,60,21],[48,24,60,22],[49,4,61,2],[49,11,61,9,"TWO"],[49,14,61,12],[49,15,61,13,"toRed"],[49,20,61,18],[49,21,61,19,"red"],[49,24,61,22],[49,25,61,23],[49,26,61,24,"redPow"],[49,32,61,30],[49,33,61,31,"p"],[49,34,61,32],[49,35,61,33,"subn"],[49,39,61,37],[49,40,61,38],[49,41,61,39],[49,42,61,40],[49,43,61,41],[49,44,61,42,"fromRed"],[49,51,61,49],[49,52,61,50],[49,53,61,51],[49,54,61,52,"cmpn"],[49,58,61,56],[49,59,61,57],[49,60,61,58],[49,61,61,59],[49,66,61,64],[49,67,61,65],[50,2,62,0],[51,2,64,0],[51,11,64,9,"findPrime"],[51,20,64,18,"findPrime"],[51,21,64,19,"bits"],[51,25,64,23],[51,27,64,25,"gen"],[51,30,64,28],[51,32,64,30],[52,4,65,2],[52,8,65,6,"bits"],[52,12,65,10],[52,15,65,13],[52,17,65,15],[52,19,65,17],[53,6,66,4],[54,6,67,4],[54,10,67,8,"gen"],[54,13,67,11],[54,18,67,16],[54,19,67,17],[54,23,67,21,"gen"],[54,26,67,24],[54,31,67,29],[54,32,67,30],[54,34,67,32],[55,8,68,6],[55,15,68,13],[55,19,68,17,"BN"],[55,21,68,19],[55,22,68,20],[55,23,68,21],[55,27,68,25],[55,29,68,27],[55,33,68,31],[55,34,68,32],[55,35,68,33],[56,6,69,4],[56,7,69,5],[56,13,69,11],[57,8,70,6],[57,15,70,13],[57,19,70,17,"BN"],[57,21,70,19],[57,22,70,20],[57,23,70,21],[57,27,70,25],[57,29,70,27],[57,33,70,31],[57,34,70,32],[57,35,70,33],[58,6,71,4],[59,4,72,2],[60,4,73,2,"gen"],[60,7,73,5],[60,10,73,8],[60,14,73,12,"BN"],[60,16,73,14],[60,17,73,15,"gen"],[60,20,73,18],[60,21,73,19],[61,4,75,2],[61,8,75,6,"num"],[61,11,75,9],[61,13,75,11,"n2"],[61,15,75,13],[62,4,77,2],[62,11,77,9],[62,15,77,13],[62,17,77,15],[63,6,78,4,"num"],[63,9,78,7],[63,12,78,10],[63,16,78,14,"BN"],[63,18,78,16],[63,19,78,17,"randomBytes"],[63,30,78,28],[63,31,78,29,"Math"],[63,35,78,33],[63,36,78,34,"ceil"],[63,40,78,38],[63,41,78,39,"bits"],[63,45,78,43],[63,48,78,46],[63,49,78,47],[63,50,78,48],[63,51,78,49],[63,52,78,50],[64,6,79,4],[64,13,79,11,"num"],[64,16,79,14],[64,17,79,15,"bitLength"],[64,26,79,24],[64,27,79,25],[64,28,79,26],[64,31,79,29,"bits"],[64,35,79,33],[64,37,79,35],[65,8,80,6,"num"],[65,11,80,9],[65,12,80,10,"ishrn"],[65,17,80,15],[65,18,80,16],[65,19,80,17],[65,20,80,18],[66,6,81,4],[67,6,82,4],[67,10,82,8,"num"],[67,13,82,11],[67,14,82,12,"isEven"],[67,20,82,18],[67,21,82,19],[67,22,82,20],[67,24,82,22],[68,8,83,6,"num"],[68,11,83,9],[68,12,83,10,"iadd"],[68,16,83,14],[68,17,83,15,"ONE"],[68,20,83,18],[68,21,83,19],[69,6,84,4],[70,6,85,4],[70,10,85,8],[70,11,85,9,"num"],[70,14,85,12],[70,15,85,13,"testn"],[70,20,85,18],[70,21,85,19],[70,22,85,20],[70,23,85,21],[70,25,85,23],[71,8,86,6,"num"],[71,11,86,9],[71,12,86,10,"iadd"],[71,16,86,14],[71,17,86,15,"TWO"],[71,20,86,18],[71,21,86,19],[72,6,87,4],[73,6,88,4],[73,10,88,8],[73,11,88,9,"gen"],[73,14,88,12],[73,15,88,13,"cmp"],[73,18,88,16],[73,19,88,17,"TWO"],[73,22,88,20],[73,23,88,21],[73,25,88,23],[74,8,89,6],[74,15,89,13,"num"],[74,18,89,16],[74,19,89,17,"mod"],[74,22,89,20],[74,23,89,21,"TWENTYFOUR"],[74,33,89,31],[74,34,89,32],[74,35,89,33,"cmp"],[74,38,89,36],[74,39,89,37,"ELEVEN"],[74,45,89,43],[74,46,89,44],[74,48,89,46],[75,10,90,8,"num"],[75,13,90,11],[75,14,90,12,"iadd"],[75,18,90,16],[75,19,90,17,"FOUR"],[75,23,90,21],[75,24,90,22],[76,8,91,6],[77,6,92,4],[77,7,92,5],[77,13,92,11],[77,17,92,15],[77,18,92,16,"gen"],[77,21,92,19],[77,22,92,20,"cmp"],[77,25,92,23],[77,26,92,24,"FIVE"],[77,30,92,28],[77,31,92,29],[77,33,92,31],[78,8,93,6],[78,15,93,13,"num"],[78,18,93,16],[78,19,93,17,"mod"],[78,22,93,20],[78,23,93,21,"TEN"],[78,26,93,24],[78,27,93,25],[78,28,93,26,"cmp"],[78,31,93,29],[78,32,93,30,"THREE"],[78,37,93,35],[78,38,93,36],[78,40,93,38],[79,10,94,8,"num"],[79,13,94,11],[79,14,94,12,"iadd"],[79,18,94,16],[79,19,94,17,"FOUR"],[79,23,94,21],[79,24,94,22],[80,8,95,6],[81,6,96,4],[82,6,97,4,"n2"],[82,8,97,6],[82,11,97,9,"num"],[82,14,97,12],[82,15,97,13,"shrn"],[82,19,97,17],[82,20,97,18],[82,21,97,19],[82,22,97,20],[83,6,98,4],[83,10,98,8,"simpleSieve"],[83,21,98,19],[83,22,98,20,"n2"],[83,24,98,22],[83,25,98,23],[83,29,98,27,"simpleSieve"],[83,40,98,38],[83,41,98,39,"num"],[83,44,98,42],[83,45,98,43],[83,49,99,6,"fermatTest"],[83,59,99,16],[83,60,99,17,"n2"],[83,62,99,19],[83,63,99,20],[83,67,99,24,"fermatTest"],[83,77,99,34],[83,78,99,35,"num"],[83,81,99,38],[83,82,99,39],[83,86,100,6,"millerRabin"],[83,97,100,17],[83,98,100,18,"test"],[83,102,100,22],[83,103,100,23,"n2"],[83,105,100,25],[83,106,100,26],[83,110,100,30,"millerRabin"],[83,121,100,41],[83,122,100,42,"test"],[83,126,100,46],[83,127,100,47,"num"],[83,130,100,50],[83,131,100,51],[83,133,100,53],[84,8,101,6],[84,15,101,13,"num"],[84,18,101,16],[85,6,102,4],[86,4,103,2],[87,2,105,0],[88,0,105,1],[88,3]],"functionMap":{"names":["<global>","_getPrimes","simpleSieve","fermatTest","findPrime"],"mappings":"AAA;ACqB;CDoB;AEE;CFa;AGE;CHG;AIE;CJyC"}},"type":"js/module"}]}