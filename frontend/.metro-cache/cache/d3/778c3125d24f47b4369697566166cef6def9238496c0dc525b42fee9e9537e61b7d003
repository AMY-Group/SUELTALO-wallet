{"dependencies":[{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":13,"index":28},"end":{"line":3,"column":35,"index":50}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI=","exportNames":["*"]}},{"name":"to-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":15,"index":74},"end":{"line":4,"column":35,"index":94}}],"key":"t5iFBTt+2kXMPfiLhtpIZtxo3Kg=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var Buffer = require(_dependencyMap[0], \"safe-buffer\").Buffer;\n  var toBuffer = require(_dependencyMap[1], \"to-buffer\");\n\n  // prototype class for hash functions\n  function Hash(blockSize, finalSize) {\n    this._block = Buffer.alloc(blockSize);\n    this._finalSize = finalSize;\n    this._blockSize = blockSize;\n    this._len = 0;\n  }\n  Hash.prototype.update = function (data, enc) {\n    /* eslint no-param-reassign: 0 */\n    data = toBuffer(data, enc || 'utf8');\n    var block = this._block;\n    var blockSize = this._blockSize;\n    var length = data.length;\n    var accum = this._len;\n    for (var offset = 0; offset < length;) {\n      var assigned = accum % blockSize;\n      var remainder = Math.min(length - offset, blockSize - assigned);\n      for (var i = 0; i < remainder; i++) {\n        block[assigned + i] = data[offset + i];\n      }\n      accum += remainder;\n      offset += remainder;\n      if (accum % blockSize === 0) {\n        this._update(block);\n      }\n    }\n    this._len += length;\n    return this;\n  };\n  Hash.prototype.digest = function (enc) {\n    var rem = this._len % this._blockSize;\n    this._block[rem] = 0x80;\n\n    /*\n     * zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n     * non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n     */\n    this._block.fill(0, rem + 1);\n    if (rem >= this._finalSize) {\n      this._update(this._block);\n      this._block.fill(0);\n    }\n    var bits = this._len * 8;\n\n    // uint32\n    if (bits <= 0xffffffff) {\n      this._block.writeUInt32BE(bits, this._blockSize - 4);\n\n      // uint64\n    } else {\n      var lowBits = (bits & 0xffffffff) >>> 0;\n      var highBits = (bits - lowBits) / 0x100000000;\n      this._block.writeUInt32BE(highBits, this._blockSize - 8);\n      this._block.writeUInt32BE(lowBits, this._blockSize - 4);\n    }\n    this._update(this._block);\n    var hash = this._hash();\n    return enc ? hash.toString(enc) : hash;\n  };\n  Hash.prototype._update = function () {\n    throw new Error('_update must be implemented by subclass');\n  };\n  module.exports = Hash;\n});","lineCount":70,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"Buffer"],[4,12,3,10],[4,15,3,13,"require"],[4,22,3,20],[4,23,3,20,"_dependencyMap"],[4,37,3,20],[4,55,3,34],[4,56,3,35],[4,57,3,36,"Buffer"],[4,63,3,42],[5,2,4,0],[5,6,4,4,"toBuffer"],[5,14,4,12],[5,17,4,15,"require"],[5,24,4,22],[5,25,4,22,"_dependencyMap"],[5,39,4,22],[5,55,4,34],[5,56,4,35],[7,2,6,0],[8,2,7,0],[8,11,7,9,"Hash"],[8,15,7,13,"Hash"],[8,16,7,14,"blockSize"],[8,25,7,23],[8,27,7,25,"finalSize"],[8,36,7,34],[8,38,7,36],[9,4,8,1],[9,8,8,5],[9,9,8,6,"_block"],[9,15,8,12],[9,18,8,15,"Buffer"],[9,24,8,21],[9,25,8,22,"alloc"],[9,30,8,27],[9,31,8,28,"blockSize"],[9,40,8,37],[9,41,8,38],[10,4,9,1],[10,8,9,5],[10,9,9,6,"_finalSize"],[10,19,9,16],[10,22,9,19,"finalSize"],[10,31,9,28],[11,4,10,1],[11,8,10,5],[11,9,10,6,"_blockSize"],[11,19,10,16],[11,22,10,19,"blockSize"],[11,31,10,28],[12,4,11,1],[12,8,11,5],[12,9,11,6,"_len"],[12,13,11,10],[12,16,11,13],[12,17,11,14],[13,2,12,0],[14,2,14,0,"Hash"],[14,6,14,4],[14,7,14,5,"prototype"],[14,16,14,14],[14,17,14,15,"update"],[14,23,14,21],[14,26,14,24],[14,36,14,34,"data"],[14,40,14,38],[14,42,14,40,"enc"],[14,45,14,43],[14,47,14,45],[15,4,15,1],[16,4,16,1,"data"],[16,8,16,5],[16,11,16,8,"toBuffer"],[16,19,16,16],[16,20,16,17,"data"],[16,24,16,21],[16,26,16,23,"enc"],[16,29,16,26],[16,33,16,30],[16,39,16,36],[16,40,16,37],[17,4,18,1],[17,8,18,5,"block"],[17,13,18,10],[17,16,18,13],[17,20,18,17],[17,21,18,18,"_block"],[17,27,18,24],[18,4,19,1],[18,8,19,5,"blockSize"],[18,17,19,14],[18,20,19,17],[18,24,19,21],[18,25,19,22,"_blockSize"],[18,35,19,32],[19,4,20,1],[19,8,20,5,"length"],[19,14,20,11],[19,17,20,14,"data"],[19,21,20,18],[19,22,20,19,"length"],[19,28,20,25],[20,4,21,1],[20,8,21,5,"accum"],[20,13,21,10],[20,16,21,13],[20,20,21,17],[20,21,21,18,"_len"],[20,25,21,22],[21,4,23,1],[21,9,23,6],[21,13,23,10,"offset"],[21,19,23,16],[21,22,23,19],[21,23,23,20],[21,25,23,22,"offset"],[21,31,23,28],[21,34,23,31,"length"],[21,40,23,37],[21,43,23,40],[22,6,24,2],[22,10,24,6,"assigned"],[22,18,24,14],[22,21,24,17,"accum"],[22,26,24,22],[22,29,24,25,"blockSize"],[22,38,24,34],[23,6,25,2],[23,10,25,6,"remainder"],[23,19,25,15],[23,22,25,18,"Math"],[23,26,25,22],[23,27,25,23,"min"],[23,30,25,26],[23,31,25,27,"length"],[23,37,25,33],[23,40,25,36,"offset"],[23,46,25,42],[23,48,25,44,"blockSize"],[23,57,25,53],[23,60,25,56,"assigned"],[23,68,25,64],[23,69,25,65],[24,6,27,2],[24,11,27,7],[24,15,27,11,"i"],[24,16,27,12],[24,19,27,15],[24,20,27,16],[24,22,27,18,"i"],[24,23,27,19],[24,26,27,22,"remainder"],[24,35,27,31],[24,37,27,33,"i"],[24,38,27,34],[24,40,27,36],[24,42,27,38],[25,8,28,3,"block"],[25,13,28,8],[25,14,28,9,"assigned"],[25,22,28,17],[25,25,28,20,"i"],[25,26,28,21],[25,27,28,22],[25,30,28,25,"data"],[25,34,28,29],[25,35,28,30,"offset"],[25,41,28,36],[25,44,28,39,"i"],[25,45,28,40],[25,46,28,41],[26,6,29,2],[27,6,31,2,"accum"],[27,11,31,7],[27,15,31,11,"remainder"],[27,24,31,20],[28,6,32,2,"offset"],[28,12,32,8],[28,16,32,12,"remainder"],[28,25,32,21],[29,6,34,2],[29,10,34,7,"accum"],[29,15,34,12],[29,18,34,15,"blockSize"],[29,27,34,24],[29,32,34,30],[29,33,34,31],[29,35,34,33],[30,8,35,3],[30,12,35,7],[30,13,35,8,"_update"],[30,20,35,15],[30,21,35,16,"block"],[30,26,35,21],[30,27,35,22],[31,6,36,2],[32,4,37,1],[33,4,39,1],[33,8,39,5],[33,9,39,6,"_len"],[33,13,39,10],[33,17,39,14,"length"],[33,23,39,20],[34,4,40,1],[34,11,40,8],[34,15,40,12],[35,2,41,0],[35,3,41,1],[36,2,43,0,"Hash"],[36,6,43,4],[36,7,43,5,"prototype"],[36,16,43,14],[36,17,43,15,"digest"],[36,23,43,21],[36,26,43,24],[36,36,43,34,"enc"],[36,39,43,37],[36,41,43,39],[37,4,44,1],[37,8,44,5,"rem"],[37,11,44,8],[37,14,44,11],[37,18,44,15],[37,19,44,16,"_len"],[37,23,44,20],[37,26,44,23],[37,30,44,27],[37,31,44,28,"_blockSize"],[37,41,44,38],[38,4,46,1],[38,8,46,5],[38,9,46,6,"_block"],[38,15,46,12],[38,16,46,13,"rem"],[38,19,46,16],[38,20,46,17],[38,23,46,20],[38,27,46,24],[40,4,48,1],[41,0,49,0],[42,0,50,0],[43,0,51,0],[44,4,52,1],[44,8,52,5],[44,9,52,6,"_block"],[44,15,52,12],[44,16,52,13,"fill"],[44,20,52,17],[44,21,52,18],[44,22,52,19],[44,24,52,21,"rem"],[44,27,52,24],[44,30,52,27],[44,31,52,28],[44,32,52,29],[45,4,54,1],[45,8,54,5,"rem"],[45,11,54,8],[45,15,54,12],[45,19,54,16],[45,20,54,17,"_finalSize"],[45,30,54,27],[45,32,54,29],[46,6,55,2],[46,10,55,6],[46,11,55,7,"_update"],[46,18,55,14],[46,19,55,15],[46,23,55,19],[46,24,55,20,"_block"],[46,30,55,26],[46,31,55,27],[47,6,56,2],[47,10,56,6],[47,11,56,7,"_block"],[47,17,56,13],[47,18,56,14,"fill"],[47,22,56,18],[47,23,56,19],[47,24,56,20],[47,25,56,21],[48,4,57,1],[49,4,59,1],[49,8,59,5,"bits"],[49,12,59,9],[49,15,59,12],[49,19,59,16],[49,20,59,17,"_len"],[49,24,59,21],[49,27,59,24],[49,28,59,25],[51,4,61,1],[52,4,62,1],[52,8,62,5,"bits"],[52,12,62,9],[52,16,62,13],[52,26,62,23],[52,28,62,25],[53,6,63,2],[53,10,63,6],[53,11,63,7,"_block"],[53,17,63,13],[53,18,63,14,"writeUInt32BE"],[53,31,63,27],[53,32,63,28,"bits"],[53,36,63,32],[53,38,63,34],[53,42,63,38],[53,43,63,39,"_blockSize"],[53,53,63,49],[53,56,63,52],[53,57,63,53],[53,58,63,54],[55,6,65,2],[56,4,66,1],[56,5,66,2],[56,11,66,8],[57,6,67,2],[57,10,67,6,"lowBits"],[57,17,67,13],[57,20,67,16],[57,21,67,17,"bits"],[57,25,67,21],[57,28,67,24],[57,38,67,34],[57,44,67,40],[57,45,67,41],[58,6,68,2],[58,10,68,6,"highBits"],[58,18,68,14],[58,21,68,17],[58,22,68,18,"bits"],[58,26,68,22],[58,29,68,25,"lowBits"],[58,36,68,32],[58,40,68,36],[58,51,68,47],[59,6,70,2],[59,10,70,6],[59,11,70,7,"_block"],[59,17,70,13],[59,18,70,14,"writeUInt32BE"],[59,31,70,27],[59,32,70,28,"highBits"],[59,40,70,36],[59,42,70,38],[59,46,70,42],[59,47,70,43,"_blockSize"],[59,57,70,53],[59,60,70,56],[59,61,70,57],[59,62,70,58],[60,6,71,2],[60,10,71,6],[60,11,71,7,"_block"],[60,17,71,13],[60,18,71,14,"writeUInt32BE"],[60,31,71,27],[60,32,71,28,"lowBits"],[60,39,71,35],[60,41,71,37],[60,45,71,41],[60,46,71,42,"_blockSize"],[60,56,71,52],[60,59,71,55],[60,60,71,56],[60,61,71,57],[61,4,72,1],[62,4,74,1],[62,8,74,5],[62,9,74,6,"_update"],[62,16,74,13],[62,17,74,14],[62,21,74,18],[62,22,74,19,"_block"],[62,28,74,25],[62,29,74,26],[63,4,75,1],[63,8,75,5,"hash"],[63,12,75,9],[63,15,75,12],[63,19,75,16],[63,20,75,17,"_hash"],[63,25,75,22],[63,26,75,23],[63,27,75,24],[64,4,77,1],[64,11,77,8,"enc"],[64,14,77,11],[64,17,77,14,"hash"],[64,21,77,18],[64,22,77,19,"toString"],[64,30,77,27],[64,31,77,28,"enc"],[64,34,77,31],[64,35,77,32],[64,38,77,35,"hash"],[64,42,77,39],[65,2,78,0],[65,3,78,1],[66,2,80,0,"Hash"],[66,6,80,4],[66,7,80,5,"prototype"],[66,16,80,14],[66,17,80,15,"_update"],[66,24,80,22],[66,27,80,25],[66,39,80,37],[67,4,81,1],[67,10,81,7],[67,14,81,11,"Error"],[67,19,81,16],[67,20,81,17],[67,61,81,58],[67,62,81,59],[68,2,82,0],[68,3,82,1],[69,2,84,0,"module"],[69,8,84,6],[69,9,84,7,"exports"],[69,16,84,14],[69,19,84,17,"Hash"],[69,23,84,21],[70,0,84,22],[70,3]],"functionMap":{"names":["<global>","Hash","Hash.prototype.update","Hash.prototype.digest","Hash.prototype._update"],"mappings":"AAA;ACM;CDK;wBEE;CF2B;wBGE;CHmC;yBIE;CJE"}},"type":"js/module"}]}