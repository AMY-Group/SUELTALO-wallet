{"dependencies":[{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":13,"index":117},"end":{"line":4,"column":35,"index":139}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI=","exportNames":["*"]}},{"name":"create-hmac","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":17,"index":165},"end":{"line":5,"column":39,"index":187}}],"key":"Hb4O2fQ/eTYGCsl146rR3M0LxJk=","exportNames":["*"]}},{"name":"browserify-rsa","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":10,"index":199},"end":{"line":6,"column":35,"index":224}}],"key":"i91NB5S6fkkom0NK1NSlNMPM/ZQ=","exportNames":["*"]}},{"name":"elliptic","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":9,"index":235},"end":{"line":7,"column":28,"index":254}}],"key":"h6RIsoF9GgRhyZAr3TXxz6R4meA=","exportNames":["*"]}},{"name":"bn.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":9,"index":268},"end":{"line":8,"column":25,"index":284}}],"key":"h/AEHknS6KAnKragIfqHUjGvuRM=","exportNames":["*"]}},{"name":"parse-asn1","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":16,"index":302},"end":{"line":9,"column":37,"index":323}}],"key":"COzMkWIbbKvXpM5KBuLue1rYJxE=","exportNames":["*"]}},{"name":"./curves.json","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":13,"index":338},"end":{"line":10,"column":37,"index":362}}],"key":"asYIj/9Lslhm8Hnwqpi8fA5Jt4c=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  // much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\n  var Buffer = require(_dependencyMap[0], \"safe-buffer\").Buffer;\n  var createHmac = require(_dependencyMap[1], \"create-hmac\");\n  var crt = require(_dependencyMap[2], \"browserify-rsa\");\n  var EC = require(_dependencyMap[3], \"elliptic\").ec;\n  var BN = require(_dependencyMap[4], \"bn.js\");\n  var parseKeys = require(_dependencyMap[5], \"parse-asn1\");\n  var curves = require(_dependencyMap[6], \"./curves.json\");\n  var RSA_PKCS1_PADDING = 1;\n  function sign(hash, key, hashType, signType, tag) {\n    var priv = parseKeys(key);\n    if (priv.curve) {\n      // rsa keys can be interpreted as ecdsa ones in openssl\n      if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') {\n        throw new Error('wrong private key type');\n      }\n      return ecSign(hash, priv);\n    } else if (priv.type === 'dsa') {\n      if (signType !== 'dsa') {\n        throw new Error('wrong private key type');\n      }\n      return dsaSign(hash, priv, hashType);\n    }\n    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') {\n      throw new Error('wrong private key type');\n    }\n    if (key.padding !== undefined && key.padding !== RSA_PKCS1_PADDING) {\n      throw new Error('illegal or unsupported padding mode');\n    }\n    hash = Buffer.concat([tag, hash]);\n    var len = priv.modulus.byteLength();\n    var pad = [0, 1];\n    while (hash.length + pad.length + 1 < len) {\n      pad.push(0xff);\n    }\n    pad.push(0x00);\n    var i = -1;\n    while (++i < hash.length) {\n      pad.push(hash[i]);\n    }\n    var out = crt(pad, priv);\n    return out;\n  }\n  function ecSign(hash, priv) {\n    var curveId = curves[priv.curve.join('.')];\n    if (!curveId) {\n      throw new Error('unknown curve ' + priv.curve.join('.'));\n    }\n    var curve = new EC(curveId);\n    var key = curve.keyFromPrivate(priv.privateKey);\n    var out = key.sign(hash);\n    return Buffer.from(out.toDER());\n  }\n  function dsaSign(hash, priv, algo) {\n    var x = priv.params.priv_key;\n    var p = priv.params.p;\n    var q = priv.params.q;\n    var g = priv.params.g;\n    var r = new BN(0);\n    var k;\n    var H = bits2int(hash, q).mod(q);\n    var s = false;\n    var kv = getKey(x, q, hash, algo);\n    while (s === false) {\n      k = makeKey(q, kv, algo);\n      r = makeR(g, k, p, q);\n      s = k.invm(q).imul(H.add(x.mul(r))).mod(q);\n      if (s.cmpn(0) === 0) {\n        s = false;\n        r = new BN(0);\n      }\n    }\n    return toDER(r, s);\n  }\n  function toDER(r, s) {\n    r = r.toArray();\n    s = s.toArray();\n\n    // Pad values\n    if (r[0] & 0x80) {\n      r = [0].concat(r);\n    }\n    if (s[0] & 0x80) {\n      s = [0].concat(s);\n    }\n    var total = r.length + s.length + 4;\n    var res = [0x30, total, 0x02, r.length];\n    res = res.concat(r, [0x02, s.length], s);\n    return Buffer.from(res);\n  }\n  function getKey(x, q, hash, algo) {\n    x = Buffer.from(x.toArray());\n    if (x.length < q.byteLength()) {\n      var zeros = Buffer.alloc(q.byteLength() - x.length);\n      x = Buffer.concat([zeros, x]);\n    }\n    var hlen = hash.length;\n    var hbits = bits2octets(hash, q);\n    var v = Buffer.alloc(hlen);\n    v.fill(1);\n    var k = Buffer.alloc(hlen);\n    k = createHmac(algo, k).update(v).update(Buffer.from([0])).update(x).update(hbits).digest();\n    v = createHmac(algo, k).update(v).digest();\n    k = createHmac(algo, k).update(v).update(Buffer.from([1])).update(x).update(hbits).digest();\n    v = createHmac(algo, k).update(v).digest();\n    return {\n      k: k,\n      v: v\n    };\n  }\n  function bits2int(obits, q) {\n    var bits = new BN(obits);\n    var shift = (obits.length << 3) - q.bitLength();\n    if (shift > 0) {\n      bits.ishrn(shift);\n    }\n    return bits;\n  }\n  function bits2octets(bits, q) {\n    bits = bits2int(bits, q);\n    bits = bits.mod(q);\n    var out = Buffer.from(bits.toArray());\n    if (out.length < q.byteLength()) {\n      var zeros = Buffer.alloc(q.byteLength() - out.length);\n      out = Buffer.concat([zeros, out]);\n    }\n    return out;\n  }\n  function makeKey(q, kv, algo) {\n    var t;\n    var k;\n    do {\n      t = Buffer.alloc(0);\n      while (t.length * 8 < q.bitLength()) {\n        kv.v = createHmac(algo, kv.k).update(kv.v).digest();\n        t = Buffer.concat([t, kv.v]);\n      }\n      k = bits2int(t, q);\n      kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([0])).digest();\n      kv.v = createHmac(algo, kv.k).update(kv.v).digest();\n    } while (k.cmp(q) !== -1);\n    return k;\n  }\n  function makeR(g, k, p, q) {\n    return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);\n  }\n  module.exports = sign;\n  module.exports.getKey = getKey;\n  module.exports.makeKey = makeKey;\n});","lineCount":153,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[5,2,4,0],[5,6,4,4,"Buffer"],[5,12,4,10],[5,15,4,13,"require"],[5,22,4,20],[5,23,4,20,"_dependencyMap"],[5,37,4,20],[5,55,4,34],[5,56,4,35],[5,57,4,36,"Buffer"],[5,63,4,42],[6,2,5,0],[6,6,5,4,"createHmac"],[6,16,5,14],[6,19,5,17,"require"],[6,26,5,24],[6,27,5,24,"_dependencyMap"],[6,41,5,24],[6,59,5,38],[6,60,5,39],[7,2,6,0],[7,6,6,4,"crt"],[7,9,6,7],[7,12,6,10,"require"],[7,19,6,17],[7,20,6,17,"_dependencyMap"],[7,34,6,17],[7,55,6,34],[7,56,6,35],[8,2,7,0],[8,6,7,4,"EC"],[8,8,7,6],[8,11,7,9,"require"],[8,18,7,16],[8,19,7,16,"_dependencyMap"],[8,33,7,16],[8,48,7,27],[8,49,7,28],[8,50,7,29,"ec"],[8,52,7,31],[9,2,8,0],[9,6,8,4,"BN"],[9,8,8,6],[9,11,8,9,"require"],[9,18,8,16],[9,19,8,16,"_dependencyMap"],[9,33,8,16],[9,45,8,24],[9,46,8,25],[10,2,9,0],[10,6,9,4,"parseKeys"],[10,15,9,13],[10,18,9,16,"require"],[10,25,9,23],[10,26,9,23,"_dependencyMap"],[10,40,9,23],[10,57,9,36],[10,58,9,37],[11,2,10,0],[11,6,10,4,"curves"],[11,12,10,10],[11,15,10,13,"require"],[11,22,10,20],[11,23,10,20,"_dependencyMap"],[11,37,10,20],[11,57,10,36],[11,58,10,37],[12,2,12,0],[12,6,12,4,"RSA_PKCS1_PADDING"],[12,23,12,21],[12,26,12,24],[12,27,12,25],[13,2,14,0],[13,11,14,9,"sign"],[13,15,14,13,"sign"],[13,16,14,14,"hash"],[13,20,14,18],[13,22,14,20,"key"],[13,25,14,23],[13,27,14,25,"hashType"],[13,35,14,33],[13,37,14,35,"signType"],[13,45,14,43],[13,47,14,45,"tag"],[13,50,14,48],[13,52,14,50],[14,4,15,2],[14,8,15,6,"priv"],[14,12,15,10],[14,15,15,13,"parseKeys"],[14,24,15,22],[14,25,15,23,"key"],[14,28,15,26],[14,29,15,27],[15,4,16,2],[15,8,16,6,"priv"],[15,12,16,10],[15,13,16,11,"curve"],[15,18,16,16],[15,20,16,18],[16,6,17,4],[17,6,18,4],[17,10,18,8,"signType"],[17,18,18,16],[17,23,18,21],[17,30,18,28],[17,34,18,32,"signType"],[17,42,18,40],[17,47,18,45],[17,58,18,56],[17,60,18,58],[18,8,18,60],[18,14,18,66],[18,18,18,70,"Error"],[18,23,18,75],[18,24,18,76],[18,48,18,100],[18,49,18,101],[19,6,18,103],[20,6,19,4],[20,13,19,11,"ecSign"],[20,19,19,17],[20,20,19,18,"hash"],[20,24,19,22],[20,26,19,24,"priv"],[20,30,19,28],[20,31,19,29],[21,4,20,2],[21,5,20,3],[21,11,20,9],[21,15,20,13,"priv"],[21,19,20,17],[21,20,20,18,"type"],[21,24,20,22],[21,29,20,27],[21,34,20,32],[21,36,20,34],[22,6,21,4],[22,10,21,8,"signType"],[22,18,21,16],[22,23,21,21],[22,28,21,26],[22,30,21,28],[23,8,21,30],[23,14,21,36],[23,18,21,40,"Error"],[23,23,21,45],[23,24,21,46],[23,48,21,70],[23,49,21,71],[24,6,21,73],[25,6,22,4],[25,13,22,11,"dsaSign"],[25,20,22,18],[25,21,22,19,"hash"],[25,25,22,23],[25,27,22,25,"priv"],[25,31,22,29],[25,33,22,31,"hashType"],[25,41,22,39],[25,42,22,40],[26,4,23,2],[27,4,24,2],[27,8,24,6,"signType"],[27,16,24,14],[27,21,24,19],[27,26,24,24],[27,30,24,28,"signType"],[27,38,24,36],[27,43,24,41],[27,54,24,52],[27,56,24,54],[28,6,24,56],[28,12,24,62],[28,16,24,66,"Error"],[28,21,24,71],[28,22,24,72],[28,46,24,96],[28,47,24,97],[29,4,24,99],[30,4,25,2],[30,8,25,6,"key"],[30,11,25,9],[30,12,25,10,"padding"],[30,19,25,17],[30,24,25,22,"undefined"],[30,33,25,31],[30,37,25,35,"key"],[30,40,25,38],[30,41,25,39,"padding"],[30,48,25,46],[30,53,25,51,"RSA_PKCS1_PADDING"],[30,70,25,68],[30,72,25,70],[31,6,25,72],[31,12,25,78],[31,16,25,82,"Error"],[31,21,25,87],[31,22,25,88],[31,59,25,125],[31,60,25,126],[32,4,25,128],[33,4,27,2,"hash"],[33,8,27,6],[33,11,27,9,"Buffer"],[33,17,27,15],[33,18,27,16,"concat"],[33,24,27,22],[33,25,27,23],[33,26,27,24,"tag"],[33,29,27,27],[33,31,27,29,"hash"],[33,35,27,33],[33,36,27,34],[33,37,27,35],[34,4,28,2],[34,8,28,6,"len"],[34,11,28,9],[34,14,28,12,"priv"],[34,18,28,16],[34,19,28,17,"modulus"],[34,26,28,24],[34,27,28,25,"byteLength"],[34,37,28,35],[34,38,28,36],[34,39,28,37],[35,4,29,2],[35,8,29,6,"pad"],[35,11,29,9],[35,14,29,12],[35,15,29,13],[35,16,29,14],[35,18,29,16],[35,19,29,17],[35,20,29,18],[36,4,30,2],[36,11,30,9,"hash"],[36,15,30,13],[36,16,30,14,"length"],[36,22,30,20],[36,25,30,23,"pad"],[36,28,30,26],[36,29,30,27,"length"],[36,35,30,33],[36,38,30,36],[36,39,30,37],[36,42,30,40,"len"],[36,45,30,43],[36,47,30,45],[37,6,30,47,"pad"],[37,9,30,50],[37,10,30,51,"push"],[37,14,30,55],[37,15,30,56],[37,19,30,60],[37,20,30,61],[38,4,30,63],[39,4,31,2,"pad"],[39,7,31,5],[39,8,31,6,"push"],[39,12,31,10],[39,13,31,11],[39,17,31,15],[39,18,31,16],[40,4,32,2],[40,8,32,6,"i"],[40,9,32,7],[40,12,32,10],[40,13,32,11],[40,14,32,12],[41,4,33,2],[41,11,33,9],[41,13,33,11,"i"],[41,14,33,12],[41,17,33,15,"hash"],[41,21,33,19],[41,22,33,20,"length"],[41,28,33,26],[41,30,33,28],[42,6,33,30,"pad"],[42,9,33,33],[42,10,33,34,"push"],[42,14,33,38],[42,15,33,39,"hash"],[42,19,33,43],[42,20,33,44,"i"],[42,21,33,45],[42,22,33,46],[42,23,33,47],[43,4,33,49],[44,4,35,2],[44,8,35,6,"out"],[44,11,35,9],[44,14,35,12,"crt"],[44,17,35,15],[44,18,35,16,"pad"],[44,21,35,19],[44,23,35,21,"priv"],[44,27,35,25],[44,28,35,26],[45,4,36,2],[45,11,36,9,"out"],[45,14,36,12],[46,2,37,0],[47,2,39,0],[47,11,39,9,"ecSign"],[47,17,39,15,"ecSign"],[47,18,39,16,"hash"],[47,22,39,20],[47,24,39,22,"priv"],[47,28,39,26],[47,30,39,28],[48,4,40,2],[48,8,40,6,"curveId"],[48,15,40,13],[48,18,40,16,"curves"],[48,24,40,22],[48,25,40,23,"priv"],[48,29,40,27],[48,30,40,28,"curve"],[48,35,40,33],[48,36,40,34,"join"],[48,40,40,38],[48,41,40,39],[48,44,40,42],[48,45,40,43],[48,46,40,44],[49,4,41,2],[49,8,41,6],[49,9,41,7,"curveId"],[49,16,41,14],[49,18,41,16],[50,6,41,18],[50,12,41,24],[50,16,41,28,"Error"],[50,21,41,33],[50,22,41,34],[50,38,41,50],[50,41,41,53,"priv"],[50,45,41,57],[50,46,41,58,"curve"],[50,51,41,63],[50,52,41,64,"join"],[50,56,41,68],[50,57,41,69],[50,60,41,72],[50,61,41,73],[50,62,41,74],[51,4,41,76],[52,4,43,2],[52,8,43,6,"curve"],[52,13,43,11],[52,16,43,14],[52,20,43,18,"EC"],[52,22,43,20],[52,23,43,21,"curveId"],[52,30,43,28],[52,31,43,29],[53,4,44,2],[53,8,44,6,"key"],[53,11,44,9],[53,14,44,12,"curve"],[53,19,44,17],[53,20,44,18,"keyFromPrivate"],[53,34,44,32],[53,35,44,33,"priv"],[53,39,44,37],[53,40,44,38,"privateKey"],[53,50,44,48],[53,51,44,49],[54,4,45,2],[54,8,45,6,"out"],[54,11,45,9],[54,14,45,12,"key"],[54,17,45,15],[54,18,45,16,"sign"],[54,22,45,20],[54,23,45,21,"hash"],[54,27,45,25],[54,28,45,26],[55,4,47,2],[55,11,47,9,"Buffer"],[55,17,47,15],[55,18,47,16,"from"],[55,22,47,20],[55,23,47,21,"out"],[55,26,47,24],[55,27,47,25,"toDER"],[55,32,47,30],[55,33,47,31],[55,34,47,32],[55,35,47,33],[56,2,48,0],[57,2,50,0],[57,11,50,9,"dsaSign"],[57,18,50,16,"dsaSign"],[57,19,50,17,"hash"],[57,23,50,21],[57,25,50,23,"priv"],[57,29,50,27],[57,31,50,29,"algo"],[57,35,50,33],[57,37,50,35],[58,4,51,2],[58,8,51,6,"x"],[58,9,51,7],[58,12,51,10,"priv"],[58,16,51,14],[58,17,51,15,"params"],[58,23,51,21],[58,24,51,22,"priv_key"],[58,32,51,30],[59,4,52,2],[59,8,52,6,"p"],[59,9,52,7],[59,12,52,10,"priv"],[59,16,52,14],[59,17,52,15,"params"],[59,23,52,21],[59,24,52,22,"p"],[59,25,52,23],[60,4,53,2],[60,8,53,6,"q"],[60,9,53,7],[60,12,53,10,"priv"],[60,16,53,14],[60,17,53,15,"params"],[60,23,53,21],[60,24,53,22,"q"],[60,25,53,23],[61,4,54,2],[61,8,54,6,"g"],[61,9,54,7],[61,12,54,10,"priv"],[61,16,54,14],[61,17,54,15,"params"],[61,23,54,21],[61,24,54,22,"g"],[61,25,54,23],[62,4,55,2],[62,8,55,6,"r"],[62,9,55,7],[62,12,55,10],[62,16,55,14,"BN"],[62,18,55,16],[62,19,55,17],[62,20,55,18],[62,21,55,19],[63,4,56,2],[63,8,56,6,"k"],[63,9,56,7],[64,4,57,2],[64,8,57,6,"H"],[64,9,57,7],[64,12,57,10,"bits2int"],[64,20,57,18],[64,21,57,19,"hash"],[64,25,57,23],[64,27,57,25,"q"],[64,28,57,26],[64,29,57,27],[64,30,57,28,"mod"],[64,33,57,31],[64,34,57,32,"q"],[64,35,57,33],[64,36,57,34],[65,4,58,2],[65,8,58,6,"s"],[65,9,58,7],[65,12,58,10],[65,17,58,15],[66,4,59,2],[66,8,59,6,"kv"],[66,10,59,8],[66,13,59,11,"getKey"],[66,19,59,17],[66,20,59,18,"x"],[66,21,59,19],[66,23,59,21,"q"],[66,24,59,22],[66,26,59,24,"hash"],[66,30,59,28],[66,32,59,30,"algo"],[66,36,59,34],[66,37,59,35],[67,4,60,2],[67,11,60,9,"s"],[67,12,60,10],[67,17,60,15],[67,22,60,20],[67,24,60,22],[68,6,61,4,"k"],[68,7,61,5],[68,10,61,8,"makeKey"],[68,17,61,15],[68,18,61,16,"q"],[68,19,61,17],[68,21,61,19,"kv"],[68,23,61,21],[68,25,61,23,"algo"],[68,29,61,27],[68,30,61,28],[69,6,62,4,"r"],[69,7,62,5],[69,10,62,8,"makeR"],[69,15,62,13],[69,16,62,14,"g"],[69,17,62,15],[69,19,62,17,"k"],[69,20,62,18],[69,22,62,20,"p"],[69,23,62,21],[69,25,62,23,"q"],[69,26,62,24],[69,27,62,25],[70,6,63,4,"s"],[70,7,63,5],[70,10,63,8,"k"],[70,11,63,9],[70,12,63,10,"invm"],[70,16,63,14],[70,17,63,15,"q"],[70,18,63,16],[70,19,63,17],[70,20,63,18,"imul"],[70,24,63,22],[70,25,63,23,"H"],[70,26,63,24],[70,27,63,25,"add"],[70,30,63,28],[70,31,63,29,"x"],[70,32,63,30],[70,33,63,31,"mul"],[70,36,63,34],[70,37,63,35,"r"],[70,38,63,36],[70,39,63,37],[70,40,63,38],[70,41,63,39],[70,42,63,40,"mod"],[70,45,63,43],[70,46,63,44,"q"],[70,47,63,45],[70,48,63,46],[71,6,64,4],[71,10,64,8,"s"],[71,11,64,9],[71,12,64,10,"cmpn"],[71,16,64,14],[71,17,64,15],[71,18,64,16],[71,19,64,17],[71,24,64,22],[71,25,64,23],[71,27,64,25],[72,8,65,6,"s"],[72,9,65,7],[72,12,65,10],[72,17,65,15],[73,8,66,6,"r"],[73,9,66,7],[73,12,66,10],[73,16,66,14,"BN"],[73,18,66,16],[73,19,66,17],[73,20,66,18],[73,21,66,19],[74,6,67,4],[75,4,68,2],[76,4,69,2],[76,11,69,9,"toDER"],[76,16,69,14],[76,17,69,15,"r"],[76,18,69,16],[76,20,69,18,"s"],[76,21,69,19],[76,22,69,20],[77,2,70,0],[78,2,72,0],[78,11,72,9,"toDER"],[78,16,72,14,"toDER"],[78,17,72,15,"r"],[78,18,72,16],[78,20,72,18,"s"],[78,21,72,19],[78,23,72,21],[79,4,73,2,"r"],[79,5,73,3],[79,8,73,6,"r"],[79,9,73,7],[79,10,73,8,"toArray"],[79,17,73,15],[79,18,73,16],[79,19,73,17],[80,4,74,2,"s"],[80,5,74,3],[80,8,74,6,"s"],[80,9,74,7],[80,10,74,8,"toArray"],[80,17,74,15],[80,18,74,16],[80,19,74,17],[82,4,76,2],[83,4,77,2],[83,8,77,6,"r"],[83,9,77,7],[83,10,77,8],[83,11,77,9],[83,12,77,10],[83,15,77,13],[83,19,77,17],[83,21,77,19],[84,6,77,21,"r"],[84,7,77,22],[84,10,77,25],[84,11,77,26],[84,12,77,27],[84,13,77,28],[84,14,77,29,"concat"],[84,20,77,35],[84,21,77,36,"r"],[84,22,77,37],[84,23,77,38],[85,4,77,40],[86,4,78,2],[86,8,78,6,"s"],[86,9,78,7],[86,10,78,8],[86,11,78,9],[86,12,78,10],[86,15,78,13],[86,19,78,17],[86,21,78,19],[87,6,78,21,"s"],[87,7,78,22],[87,10,78,25],[87,11,78,26],[87,12,78,27],[87,13,78,28],[87,14,78,29,"concat"],[87,20,78,35],[87,21,78,36,"s"],[87,22,78,37],[87,23,78,38],[88,4,78,40],[89,4,80,2],[89,8,80,6,"total"],[89,13,80,11],[89,16,80,14,"r"],[89,17,80,15],[89,18,80,16,"length"],[89,24,80,22],[89,27,80,25,"s"],[89,28,80,26],[89,29,80,27,"length"],[89,35,80,33],[89,38,80,36],[89,39,80,37],[90,4,81,2],[90,8,81,6,"res"],[90,11,81,9],[90,14,81,12],[90,15,82,4],[90,19,82,8],[90,21,82,10,"total"],[90,26,82,15],[90,28,82,17],[90,32,82,21],[90,34,82,23,"r"],[90,35,82,24],[90,36,82,25,"length"],[90,42,82,31],[90,43,83,3],[91,4,84,2,"res"],[91,7,84,5],[91,10,84,8,"res"],[91,13,84,11],[91,14,84,12,"concat"],[91,20,84,18],[91,21,84,19,"r"],[91,22,84,20],[91,24,84,22],[91,25,84,23],[91,29,84,27],[91,31,84,29,"s"],[91,32,84,30],[91,33,84,31,"length"],[91,39,84,37],[91,40,84,38],[91,42,84,40,"s"],[91,43,84,41],[91,44,84,42],[92,4,85,2],[92,11,85,9,"Buffer"],[92,17,85,15],[92,18,85,16,"from"],[92,22,85,20],[92,23,85,21,"res"],[92,26,85,24],[92,27,85,25],[93,2,86,0],[94,2,88,0],[94,11,88,9,"getKey"],[94,17,88,15,"getKey"],[94,18,88,16,"x"],[94,19,88,17],[94,21,88,19,"q"],[94,22,88,20],[94,24,88,22,"hash"],[94,28,88,26],[94,30,88,28,"algo"],[94,34,88,32],[94,36,88,34],[95,4,89,2,"x"],[95,5,89,3],[95,8,89,6,"Buffer"],[95,14,89,12],[95,15,89,13,"from"],[95,19,89,17],[95,20,89,18,"x"],[95,21,89,19],[95,22,89,20,"toArray"],[95,29,89,27],[95,30,89,28],[95,31,89,29],[95,32,89,30],[96,4,90,2],[96,8,90,6,"x"],[96,9,90,7],[96,10,90,8,"length"],[96,16,90,14],[96,19,90,17,"q"],[96,20,90,18],[96,21,90,19,"byteLength"],[96,31,90,29],[96,32,90,30],[96,33,90,31],[96,35,90,33],[97,6,91,4],[97,10,91,8,"zeros"],[97,15,91,13],[97,18,91,16,"Buffer"],[97,24,91,22],[97,25,91,23,"alloc"],[97,30,91,28],[97,31,91,29,"q"],[97,32,91,30],[97,33,91,31,"byteLength"],[97,43,91,41],[97,44,91,42],[97,45,91,43],[97,48,91,46,"x"],[97,49,91,47],[97,50,91,48,"length"],[97,56,91,54],[97,57,91,55],[98,6,92,4,"x"],[98,7,92,5],[98,10,92,8,"Buffer"],[98,16,92,14],[98,17,92,15,"concat"],[98,23,92,21],[98,24,92,22],[98,25,92,23,"zeros"],[98,30,92,28],[98,32,92,30,"x"],[98,33,92,31],[98,34,92,32],[98,35,92,33],[99,4,93,2],[100,4,94,2],[100,8,94,6,"hlen"],[100,12,94,10],[100,15,94,13,"hash"],[100,19,94,17],[100,20,94,18,"length"],[100,26,94,24],[101,4,95,2],[101,8,95,6,"hbits"],[101,13,95,11],[101,16,95,14,"bits2octets"],[101,27,95,25],[101,28,95,26,"hash"],[101,32,95,30],[101,34,95,32,"q"],[101,35,95,33],[101,36,95,34],[102,4,96,2],[102,8,96,6,"v"],[102,9,96,7],[102,12,96,10,"Buffer"],[102,18,96,16],[102,19,96,17,"alloc"],[102,24,96,22],[102,25,96,23,"hlen"],[102,29,96,27],[102,30,96,28],[103,4,97,2,"v"],[103,5,97,3],[103,6,97,4,"fill"],[103,10,97,8],[103,11,97,9],[103,12,97,10],[103,13,97,11],[104,4,98,2],[104,8,98,6,"k"],[104,9,98,7],[104,12,98,10,"Buffer"],[104,18,98,16],[104,19,98,17,"alloc"],[104,24,98,22],[104,25,98,23,"hlen"],[104,29,98,27],[104,30,98,28],[105,4,99,2,"k"],[105,5,99,3],[105,8,99,6,"createHmac"],[105,18,99,16],[105,19,99,17,"algo"],[105,23,99,21],[105,25,99,23,"k"],[105,26,99,24],[105,27,99,25],[105,28,99,26,"update"],[105,34,99,32],[105,35,99,33,"v"],[105,36,99,34],[105,37,99,35],[105,38,99,36,"update"],[105,44,99,42],[105,45,99,43,"Buffer"],[105,51,99,49],[105,52,99,50,"from"],[105,56,99,54],[105,57,99,55],[105,58,99,56],[105,59,99,57],[105,60,99,58],[105,61,99,59],[105,62,99,60],[105,63,99,61,"update"],[105,69,99,67],[105,70,99,68,"x"],[105,71,99,69],[105,72,99,70],[105,73,99,71,"update"],[105,79,99,77],[105,80,99,78,"hbits"],[105,85,99,83],[105,86,99,84],[105,87,99,85,"digest"],[105,93,99,91],[105,94,99,92],[105,95,99,93],[106,4,100,2,"v"],[106,5,100,3],[106,8,100,6,"createHmac"],[106,18,100,16],[106,19,100,17,"algo"],[106,23,100,21],[106,25,100,23,"k"],[106,26,100,24],[106,27,100,25],[106,28,100,26,"update"],[106,34,100,32],[106,35,100,33,"v"],[106,36,100,34],[106,37,100,35],[106,38,100,36,"digest"],[106,44,100,42],[106,45,100,43],[106,46,100,44],[107,4,101,2,"k"],[107,5,101,3],[107,8,101,6,"createHmac"],[107,18,101,16],[107,19,101,17,"algo"],[107,23,101,21],[107,25,101,23,"k"],[107,26,101,24],[107,27,101,25],[107,28,101,26,"update"],[107,34,101,32],[107,35,101,33,"v"],[107,36,101,34],[107,37,101,35],[107,38,101,36,"update"],[107,44,101,42],[107,45,101,43,"Buffer"],[107,51,101,49],[107,52,101,50,"from"],[107,56,101,54],[107,57,101,55],[107,58,101,56],[107,59,101,57],[107,60,101,58],[107,61,101,59],[107,62,101,60],[107,63,101,61,"update"],[107,69,101,67],[107,70,101,68,"x"],[107,71,101,69],[107,72,101,70],[107,73,101,71,"update"],[107,79,101,77],[107,80,101,78,"hbits"],[107,85,101,83],[107,86,101,84],[107,87,101,85,"digest"],[107,93,101,91],[107,94,101,92],[107,95,101,93],[108,4,102,2,"v"],[108,5,102,3],[108,8,102,6,"createHmac"],[108,18,102,16],[108,19,102,17,"algo"],[108,23,102,21],[108,25,102,23,"k"],[108,26,102,24],[108,27,102,25],[108,28,102,26,"update"],[108,34,102,32],[108,35,102,33,"v"],[108,36,102,34],[108,37,102,35],[108,38,102,36,"digest"],[108,44,102,42],[108,45,102,43],[108,46,102,44],[109,4,103,2],[109,11,103,9],[110,6,103,11,"k"],[110,7,103,12],[110,9,103,14,"k"],[110,10,103,15],[111,6,103,17,"v"],[111,7,103,18],[111,9,103,20,"v"],[112,4,103,22],[112,5,103,23],[113,2,104,0],[114,2,106,0],[114,11,106,9,"bits2int"],[114,19,106,17,"bits2int"],[114,20,106,18,"obits"],[114,25,106,23],[114,27,106,25,"q"],[114,28,106,26],[114,30,106,28],[115,4,107,2],[115,8,107,6,"bits"],[115,12,107,10],[115,15,107,13],[115,19,107,17,"BN"],[115,21,107,19],[115,22,107,20,"obits"],[115,27,107,25],[115,28,107,26],[116,4,108,2],[116,8,108,6,"shift"],[116,13,108,11],[116,16,108,14],[116,17,108,15,"obits"],[116,22,108,20],[116,23,108,21,"length"],[116,29,108,27],[116,33,108,31],[116,34,108,32],[116,38,108,36,"q"],[116,39,108,37],[116,40,108,38,"bitLength"],[116,49,108,47],[116,50,108,48],[116,51,108,49],[117,4,109,2],[117,8,109,6,"shift"],[117,13,109,11],[117,16,109,14],[117,17,109,15],[117,19,109,17],[118,6,109,19,"bits"],[118,10,109,23],[118,11,109,24,"ishrn"],[118,16,109,29],[118,17,109,30,"shift"],[118,22,109,35],[118,23,109,36],[119,4,109,38],[120,4,110,2],[120,11,110,9,"bits"],[120,15,110,13],[121,2,111,0],[122,2,113,0],[122,11,113,9,"bits2octets"],[122,22,113,20,"bits2octets"],[122,23,113,21,"bits"],[122,27,113,25],[122,29,113,27,"q"],[122,30,113,28],[122,32,113,30],[123,4,114,2,"bits"],[123,8,114,6],[123,11,114,9,"bits2int"],[123,19,114,17],[123,20,114,18,"bits"],[123,24,114,22],[123,26,114,24,"q"],[123,27,114,25],[123,28,114,26],[124,4,115,2,"bits"],[124,8,115,6],[124,11,115,9,"bits"],[124,15,115,13],[124,16,115,14,"mod"],[124,19,115,17],[124,20,115,18,"q"],[124,21,115,19],[124,22,115,20],[125,4,116,2],[125,8,116,6,"out"],[125,11,116,9],[125,14,116,12,"Buffer"],[125,20,116,18],[125,21,116,19,"from"],[125,25,116,23],[125,26,116,24,"bits"],[125,30,116,28],[125,31,116,29,"toArray"],[125,38,116,36],[125,39,116,37],[125,40,116,38],[125,41,116,39],[126,4,117,2],[126,8,117,6,"out"],[126,11,117,9],[126,12,117,10,"length"],[126,18,117,16],[126,21,117,19,"q"],[126,22,117,20],[126,23,117,21,"byteLength"],[126,33,117,31],[126,34,117,32],[126,35,117,33],[126,37,117,35],[127,6,118,4],[127,10,118,8,"zeros"],[127,15,118,13],[127,18,118,16,"Buffer"],[127,24,118,22],[127,25,118,23,"alloc"],[127,30,118,28],[127,31,118,29,"q"],[127,32,118,30],[127,33,118,31,"byteLength"],[127,43,118,41],[127,44,118,42],[127,45,118,43],[127,48,118,46,"out"],[127,51,118,49],[127,52,118,50,"length"],[127,58,118,56],[127,59,118,57],[128,6,119,4,"out"],[128,9,119,7],[128,12,119,10,"Buffer"],[128,18,119,16],[128,19,119,17,"concat"],[128,25,119,23],[128,26,119,24],[128,27,119,25,"zeros"],[128,32,119,30],[128,34,119,32,"out"],[128,37,119,35],[128,38,119,36],[128,39,119,37],[129,4,120,2],[130,4,121,2],[130,11,121,9,"out"],[130,14,121,12],[131,2,122,0],[132,2,124,0],[132,11,124,9,"makeKey"],[132,18,124,16,"makeKey"],[132,19,124,17,"q"],[132,20,124,18],[132,22,124,20,"kv"],[132,24,124,22],[132,26,124,24,"algo"],[132,30,124,28],[132,32,124,30],[133,4,125,2],[133,8,125,6,"t"],[133,9,125,7],[134,4,126,2],[134,8,126,6,"k"],[134,9,126,7],[135,4,128,2],[135,7,128,5],[136,6,129,4,"t"],[136,7,129,5],[136,10,129,8,"Buffer"],[136,16,129,14],[136,17,129,15,"alloc"],[136,22,129,20],[136,23,129,21],[136,24,129,22],[136,25,129,23],[137,6,131,4],[137,13,131,11,"t"],[137,14,131,12],[137,15,131,13,"length"],[137,21,131,19],[137,24,131,22],[137,25,131,23],[137,28,131,26,"q"],[137,29,131,27],[137,30,131,28,"bitLength"],[137,39,131,37],[137,40,131,38],[137,41,131,39],[137,43,131,41],[138,8,132,6,"kv"],[138,10,132,8],[138,11,132,9,"v"],[138,12,132,10],[138,15,132,13,"createHmac"],[138,25,132,23],[138,26,132,24,"algo"],[138,30,132,28],[138,32,132,30,"kv"],[138,34,132,32],[138,35,132,33,"k"],[138,36,132,34],[138,37,132,35],[138,38,132,36,"update"],[138,44,132,42],[138,45,132,43,"kv"],[138,47,132,45],[138,48,132,46,"v"],[138,49,132,47],[138,50,132,48],[138,51,132,49,"digest"],[138,57,132,55],[138,58,132,56],[138,59,132,57],[139,8,133,6,"t"],[139,9,133,7],[139,12,133,10,"Buffer"],[139,18,133,16],[139,19,133,17,"concat"],[139,25,133,23],[139,26,133,24],[139,27,133,25,"t"],[139,28,133,26],[139,30,133,28,"kv"],[139,32,133,30],[139,33,133,31,"v"],[139,34,133,32],[139,35,133,33],[139,36,133,34],[140,6,134,4],[141,6,136,4,"k"],[141,7,136,5],[141,10,136,8,"bits2int"],[141,18,136,16],[141,19,136,17,"t"],[141,20,136,18],[141,22,136,20,"q"],[141,23,136,21],[141,24,136,22],[142,6,137,4,"kv"],[142,8,137,6],[142,9,137,7,"k"],[142,10,137,8],[142,13,137,11,"createHmac"],[142,23,137,21],[142,24,137,22,"algo"],[142,28,137,26],[142,30,137,28,"kv"],[142,32,137,30],[142,33,137,31,"k"],[142,34,137,32],[142,35,137,33],[142,36,137,34,"update"],[142,42,137,40],[142,43,137,41,"kv"],[142,45,137,43],[142,46,137,44,"v"],[142,47,137,45],[142,48,137,46],[142,49,137,47,"update"],[142,55,137,53],[142,56,137,54,"Buffer"],[142,62,137,60],[142,63,137,61,"from"],[142,67,137,65],[142,68,137,66],[142,69,137,67],[142,70,137,68],[142,71,137,69],[142,72,137,70],[142,73,137,71],[142,74,137,72,"digest"],[142,80,137,78],[142,81,137,79],[142,82,137,80],[143,6,138,4,"kv"],[143,8,138,6],[143,9,138,7,"v"],[143,10,138,8],[143,13,138,11,"createHmac"],[143,23,138,21],[143,24,138,22,"algo"],[143,28,138,26],[143,30,138,28,"kv"],[143,32,138,30],[143,33,138,31,"k"],[143,34,138,32],[143,35,138,33],[143,36,138,34,"update"],[143,42,138,40],[143,43,138,41,"kv"],[143,45,138,43],[143,46,138,44,"v"],[143,47,138,45],[143,48,138,46],[143,49,138,47,"digest"],[143,55,138,53],[143,56,138,54],[143,57,138,55],[144,4,139,2],[144,5,139,3],[144,13,139,11,"k"],[144,14,139,12],[144,15,139,13,"cmp"],[144,18,139,16],[144,19,139,17,"q"],[144,20,139,18],[144,21,139,19],[144,26,139,24],[144,27,139,25],[144,28,139,26],[145,4,141,2],[145,11,141,9,"k"],[145,12,141,10],[146,2,142,0],[147,2,144,0],[147,11,144,9,"makeR"],[147,16,144,14,"makeR"],[147,17,144,15,"g"],[147,18,144,16],[147,20,144,18,"k"],[147,21,144,19],[147,23,144,21,"p"],[147,24,144,22],[147,26,144,24,"q"],[147,27,144,25],[147,29,144,27],[148,4,145,2],[148,11,145,9,"g"],[148,12,145,10],[148,13,145,11,"toRed"],[148,18,145,16],[148,19,145,17,"BN"],[148,21,145,19],[148,22,145,20,"mont"],[148,26,145,24],[148,27,145,25,"p"],[148,28,145,26],[148,29,145,27],[148,30,145,28],[148,31,145,29,"redPow"],[148,37,145,35],[148,38,145,36,"k"],[148,39,145,37],[148,40,145,38],[148,41,145,39,"fromRed"],[148,48,145,46],[148,49,145,47],[148,50,145,48],[148,51,145,49,"mod"],[148,54,145,52],[148,55,145,53,"q"],[148,56,145,54],[148,57,145,55],[149,2,146,0],[150,2,148,0,"module"],[150,8,148,6],[150,9,148,7,"exports"],[150,16,148,14],[150,19,148,17,"sign"],[150,23,148,21],[151,2,149,0,"module"],[151,8,149,6],[151,9,149,7,"exports"],[151,16,149,14],[151,17,149,15,"getKey"],[151,23,149,21],[151,26,149,24,"getKey"],[151,32,149,30],[152,2,150,0,"module"],[152,8,150,6],[152,9,150,7,"exports"],[152,16,150,14],[152,17,150,15,"makeKey"],[152,24,150,22],[152,27,150,25,"makeKey"],[152,34,150,32],[153,0,150,33],[153,3]],"functionMap":{"names":["<global>","sign","ecSign","dsaSign","toDER","getKey","bits2int","bits2octets","makeKey","makeR"],"mappings":"AAA;ACa;CDuB;AEE;CFS;AGE;CHoB;AIE;CJc;AKE;CLgB;AME;CNK;AOE;CPS;AQE;CRkB;ASE;CTE"}},"type":"js/module"}]}