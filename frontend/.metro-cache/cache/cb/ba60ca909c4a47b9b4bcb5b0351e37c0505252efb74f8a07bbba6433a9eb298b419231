{"dependencies":[{"name":"@noble/hashes/utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":126},"end":{"line":6,"column":164,"index":290}}],"key":"9JUbQ31V1iDWPVrlEOLWo2H+V7Q=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports._abool2 = _abool2;\n  exports._abytes2 = _abytes2;\n  exports._validateObject = _validateObject;\n  exports.aInRange = aInRange;\n  exports.abool = abool;\n  Object.defineProperty(exports, \"abytes\", {\n    enumerable: true,\n    get: function () {\n      return _utils.abytes;\n    }\n  });\n  Object.defineProperty(exports, \"anumber\", {\n    enumerable: true,\n    get: function () {\n      return _utils.anumber;\n    }\n  });\n  exports.asciiToBytes = asciiToBytes;\n  exports.bitGet = bitGet;\n  exports.bitLen = bitLen;\n  exports.bitMask = void 0;\n  exports.bitSet = bitSet;\n  Object.defineProperty(exports, \"bytesToHex\", {\n    enumerable: true,\n    get: function () {\n      return _utils.bytesToHex;\n    }\n  });\n  exports.bytesToNumberBE = bytesToNumberBE;\n  exports.bytesToNumberLE = bytesToNumberLE;\n  Object.defineProperty(exports, \"bytesToUtf8\", {\n    enumerable: true,\n    get: function () {\n      return _utils.bytesToUtf8;\n    }\n  });\n  Object.defineProperty(exports, \"concatBytes\", {\n    enumerable: true,\n    get: function () {\n      return _utils.concatBytes;\n    }\n  });\n  exports.copyBytes = copyBytes;\n  exports.createHmacDrbg = createHmacDrbg;\n  exports.ensureBytes = ensureBytes;\n  exports.equalBytes = equalBytes;\n  Object.defineProperty(exports, \"hexToBytes\", {\n    enumerable: true,\n    get: function () {\n      return _utils.hexToBytes;\n    }\n  });\n  exports.hexToNumber = hexToNumber;\n  exports.inRange = inRange;\n  Object.defineProperty(exports, \"isBytes\", {\n    enumerable: true,\n    get: function () {\n      return _utils.isBytes;\n    }\n  });\n  exports.isHash = isHash;\n  exports.memoized = memoized;\n  exports.notImplemented = void 0;\n  exports.numberToBytesBE = numberToBytesBE;\n  exports.numberToBytesLE = numberToBytesLE;\n  exports.numberToHexUnpadded = numberToHexUnpadded;\n  exports.numberToVarBytesBE = numberToVarBytesBE;\n  Object.defineProperty(exports, \"randomBytes\", {\n    enumerable: true,\n    get: function () {\n      return _utils.randomBytes;\n    }\n  });\n  Object.defineProperty(exports, \"utf8ToBytes\", {\n    enumerable: true,\n    get: function () {\n      return _utils.utf8ToBytes;\n    }\n  });\n  exports.validateObject = validateObject;\n  var _utils = require(_dependencyMap[0], \"@noble/hashes/utils.js\");\n  /**\n   * Hex, bytes and number utilities.\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n  const _0n = /* @__PURE__ */BigInt(0);\n  const _1n = /* @__PURE__ */BigInt(1);\n  function abool(title, value) {\n    if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\n  }\n  // tmp name until v2\n  function _abool2(value, title = '') {\n    if (typeof value !== 'boolean') {\n      const prefix = title && `\"${title}\"`;\n      throw new Error(prefix + 'expected boolean, got type=' + typeof value);\n    }\n    return value;\n  }\n  // tmp name until v2\n  /** Asserts something is Uint8Array. */\n  function _abytes2(value, length, title = '') {\n    const bytes = (0, _utils.isBytes)(value);\n    const len = value?.length;\n    const needsLen = length !== undefined;\n    if (!bytes || needsLen && len !== length) {\n      const prefix = title && `\"${title}\" `;\n      const ofLen = needsLen ? ` of length ${length}` : '';\n      const got = bytes ? `length=${len}` : `type=${typeof value}`;\n      throw new Error(prefix + 'expected Uint8Array' + ofLen + ', got ' + got);\n    }\n    return value;\n  }\n  // Used in weierstrass, der\n  function numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? '0' + hex : hex;\n  }\n  function hexToNumber(hex) {\n    if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n    return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n  }\n  // BE: Big Endian, LE: Little Endian\n  function bytesToNumberBE(bytes) {\n    return hexToNumber((0, _utils.bytesToHex)(bytes));\n  }\n  function bytesToNumberLE(bytes) {\n    (0, _utils.abytes)(bytes);\n    return hexToNumber((0, _utils.bytesToHex)(Uint8Array.from(bytes).reverse()));\n  }\n  function numberToBytesBE(n, len) {\n    return (0, _utils.hexToBytes)(n.toString(16).padStart(len * 2, '0'));\n  }\n  function numberToBytesLE(n, len) {\n    return numberToBytesBE(n, len).reverse();\n  }\n  // Unpadded, rarely used\n  function numberToVarBytesBE(n) {\n    return (0, _utils.hexToBytes)(numberToHexUnpadded(n));\n  }\n  /**\n   * Takes hex string or Uint8Array, converts to Uint8Array.\n   * Validates output length.\n   * Will throw error for other types.\n   * @param title descriptive title for an error e.g. 'secret key'\n   * @param hex hex string or Uint8Array\n   * @param expectedLength optional, will compare to result array's length\n   * @returns\n   */\n  function ensureBytes(title, hex, expectedLength) {\n    let res;\n    if (typeof hex === 'string') {\n      try {\n        res = (0, _utils.hexToBytes)(hex);\n      } catch (e) {\n        throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n      }\n    } else if ((0, _utils.isBytes)(hex)) {\n      // Uint8Array.from() instead of hash.slice() because node.js Buffer\n      // is instance of Uint8Array, and its slice() creates **mutable** copy\n      res = Uint8Array.from(hex);\n    } else {\n      throw new Error(title + ' must be hex string or Uint8Array');\n    }\n    const len = res.length;\n    if (typeof expectedLength === 'number' && len !== expectedLength) throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n    return res;\n  }\n  // Compares 2 u8a-s in kinda constant time\n  function equalBytes(a, b) {\n    if (a.length !== b.length) return false;\n    let diff = 0;\n    for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n    return diff === 0;\n  }\n  /**\n   * Copies Uint8Array. We can't use u8a.slice(), because u8a can be Buffer,\n   * and Buffer#slice creates mutable copy. Never use Buffers!\n   */\n  function copyBytes(bytes) {\n    return Uint8Array.from(bytes);\n  }\n  /**\n   * Decodes 7-bit ASCII string to Uint8Array, throws on non-ascii symbols\n   * Should be safe to use for things expected to be ASCII.\n   * Returns exact same result as utf8ToBytes for ASCII or throws.\n   */\n  function asciiToBytes(ascii) {\n    return Uint8Array.from(ascii, (c, i) => {\n      const charCode = c.charCodeAt(0);\n      if (c.length !== 1 || charCode > 127) {\n        throw new Error(`string contains non-ASCII character \"${ascii[i]}\" with code ${charCode} at position ${i}`);\n      }\n      return charCode;\n    });\n  }\n  /**\n   * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n   */\n  // export const utf8ToBytes: typeof utf8ToBytes_ = utf8ToBytes_;\n  /**\n   * Converts bytes to string using UTF8 encoding.\n   * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n   */\n  // export const bytesToUtf8: typeof bytesToUtf8_ = bytesToUtf8_;\n  // Is positive bigint\n  const isPosBig = n => typeof n === 'bigint' && _0n <= n;\n  function inRange(n, min, max) {\n    return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n  }\n  /**\n   * Asserts min <= n < max. NOTE: It's < max and not <= max.\n   * @example\n   * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n   */\n  function aInRange(title, n, min, max) {\n    // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n    // consider P=256n, min=0n, max=P\n    // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n    // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n    // - our way is the cleanest:               `inRange('x', x, 0n, P)\n    if (!inRange(n, min, max)) throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n  }\n  // Bit operations\n  /**\n   * Calculates amount of bits in a bigint.\n   * Same as `n.toString(2).length`\n   * TODO: merge with nLength in modular\n   */\n  function bitLen(n) {\n    let len;\n    for (len = 0; n > _0n; n >>= _1n, len += 1);\n    return len;\n  }\n  /**\n   * Gets single bit at position.\n   * NOTE: first bit position is 0 (same as arrays)\n   * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n   */\n  function bitGet(n, pos) {\n    return n >> BigInt(pos) & _1n;\n  }\n  /**\n   * Sets single bit at position.\n   */\n  function bitSet(n, pos, value) {\n    return n | (value ? _1n : _0n) << BigInt(pos);\n  }\n  /**\n   * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n   * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n   */\n  const bitMask = n => (_1n << BigInt(n)) - _1n;\n  /**\n   * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n   * @returns function that will call DRBG until 2nd arg returns something meaningful\n   * @example\n   *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n   *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n   */\n  exports.bitMask = bitMask;\n  function createHmacDrbg(hashLen, qByteLen, hmacFn) {\n    if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n    if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n    if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n    // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n    const u8n = len => new Uint8Array(len); // creates Uint8Array\n    const u8of = byte => Uint8Array.of(byte); // another shortcut\n    let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n    let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n    let i = 0; // Iterations counter, will throw when over 1000\n    const reset = () => {\n      v.fill(1);\n      k.fill(0);\n      i = 0;\n    };\n    const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n    const reseed = (seed = u8n(0)) => {\n      // HMAC-DRBG reseed() function. Steps D-G\n      k = h(u8of(0x00), seed); // k = hmac(k || v || 0x00 || seed)\n      v = h(); // v = hmac(k || v)\n      if (seed.length === 0) return;\n      k = h(u8of(0x01), seed); // k = hmac(k || v || 0x01 || seed)\n      v = h(); // v = hmac(k || v)\n    };\n    const gen = () => {\n      // HMAC-DRBG generate() function\n      if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n      let len = 0;\n      const out = [];\n      while (len < qByteLen) {\n        v = h();\n        const sl = v.slice();\n        out.push(sl);\n        len += v.length;\n      }\n      return (0, _utils.concatBytes)(...out);\n    };\n    const genUntil = (seed, pred) => {\n      reset();\n      reseed(seed); // Steps D-G\n      let res = undefined; // Step H: grind until k is in [1..n-1]\n      while (!(res = pred(gen()))) reseed();\n      reset();\n      return res;\n    };\n    return genUntil;\n  }\n  // Validating curves and fields\n  const validatorFns = {\n    bigint: val => typeof val === 'bigint',\n    function: val => typeof val === 'function',\n    boolean: val => typeof val === 'boolean',\n    string: val => typeof val === 'string',\n    stringOrUint8Array: val => typeof val === 'string' || (0, _utils.isBytes)(val),\n    isSafeInteger: val => Number.isSafeInteger(val),\n    array: val => Array.isArray(val),\n    field: (val, object) => object.Fp.isValid(val),\n    hash: val => typeof val === 'function' && Number.isSafeInteger(val.outputLen)\n  };\n  // type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n  function validateObject(object, validators, optValidators = {}) {\n    const checkField = (fieldName, type, isOptional) => {\n      const checkVal = validatorFns[type];\n      if (typeof checkVal !== 'function') throw new Error('invalid validator function');\n      const val = object[fieldName];\n      if (isOptional && val === undefined) return;\n      if (!checkVal(val, object)) {\n        throw new Error('param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val);\n      }\n    };\n    for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type, false);\n    for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type, true);\n    return object;\n  }\n  // validate type tests\n  // const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n  // const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n  // // Should fail type-check\n  // const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n  // const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n  // const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n  // const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n  function isHash(val) {\n    return typeof val === 'function' && Number.isSafeInteger(val.outputLen);\n  }\n  function _validateObject(object, fields, optFields = {}) {\n    if (!object || typeof object !== 'object') throw new Error('expected valid options object');\n    function checkField(fieldName, expectedType, isOpt) {\n      const val = object[fieldName];\n      if (isOpt && val === undefined) return;\n      const current = typeof val;\n      if (current !== expectedType || val === null) throw new Error(`param \"${fieldName}\" is invalid: expected ${expectedType}, got ${current}`);\n    }\n    Object.entries(fields).forEach(([k, v]) => checkField(k, v, false));\n    Object.entries(optFields).forEach(([k, v]) => checkField(k, v, true));\n  }\n  /**\n   * throws not implemented error\n   */\n  const notImplemented = () => {\n    throw new Error('not implemented');\n  };\n  /**\n   * Memoizes (caches) computation result.\n   * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n   */\n  exports.notImplemented = notImplemented;\n  function memoized(fn) {\n    const map = new WeakMap();\n    return (arg, ...args) => {\n      const val = map.get(arg);\n      if (val !== undefined) return val;\n      const computed = fn(arg, ...args);\n      map.set(arg, computed);\n      return computed;\n    };\n  }\n});","lineCount":384,"map":[[85,2,6,0],[85,6,6,0,"_utils"],[85,12,6,0],[85,15,6,0,"require"],[85,22,6,0],[85,23,6,0,"_dependencyMap"],[85,37,6,0],[86,2,1,0],[87,0,2,0],[88,0,3,0],[89,0,4,0],[90,2,5,0],[92,2,8,0],[92,8,8,6,"_0n"],[92,11,8,9],[92,14,8,12],[92,29,8,28,"BigInt"],[92,35,8,34],[92,36,8,35],[92,37,8,36],[92,38,8,37],[93,2,9,0],[93,8,9,6,"_1n"],[93,11,9,9],[93,14,9,12],[93,29,9,28,"BigInt"],[93,35,9,34],[93,36,9,35],[93,37,9,36],[93,38,9,37],[94,2,10,7],[94,11,10,16,"abool"],[94,16,10,21,"abool"],[94,17,10,22,"title"],[94,22,10,27],[94,24,10,29,"value"],[94,29,10,34],[94,31,10,36],[95,4,11,4],[95,8,11,8],[95,15,11,15,"value"],[95,20,11,20],[95,25,11,25],[95,34,11,34],[95,36,12,8],[95,42,12,14],[95,46,12,18,"Error"],[95,51,12,23],[95,52,12,24,"title"],[95,57,12,29],[95,60,12,32],[95,85,12,57],[95,88,12,60,"value"],[95,93,12,65],[95,94,12,66],[96,2,13,0],[97,2,14,0],[98,2,15,7],[98,11,15,16,"_abool2"],[98,18,15,23,"_abool2"],[98,19,15,24,"value"],[98,24,15,29],[98,26,15,31,"title"],[98,31,15,36],[98,34,15,39],[98,36,15,41],[98,38,15,43],[99,4,16,4],[99,8,16,8],[99,15,16,15,"value"],[99,20,16,20],[99,25,16,25],[99,34,16,34],[99,36,16,36],[100,6,17,8],[100,12,17,14,"prefix"],[100,18,17,20],[100,21,17,23,"title"],[100,26,17,28],[100,30,17,32],[100,34,17,36,"title"],[100,39,17,41],[100,42,17,44],[101,6,18,8],[101,12,18,14],[101,16,18,18,"Error"],[101,21,18,23],[101,22,18,24,"prefix"],[101,28,18,30],[101,31,18,33],[101,60,18,62],[101,63,18,65],[101,70,18,72,"value"],[101,75,18,77],[101,76,18,78],[102,4,19,4],[103,4,20,4],[103,11,20,11,"value"],[103,16,20,16],[104,2,21,0],[105,2,22,0],[106,2,23,0],[107,2,24,7],[107,11,24,16,"_abytes2"],[107,19,24,24,"_abytes2"],[107,20,24,25,"value"],[107,25,24,30],[107,27,24,32,"length"],[107,33,24,38],[107,35,24,40,"title"],[107,40,24,45],[107,43,24,48],[107,45,24,50],[107,47,24,52],[108,4,25,4],[108,10,25,10,"bytes"],[108,15,25,15],[108,18,25,18],[108,22,25,18,"isBytes_"],[108,36,25,26],[108,38,25,27,"value"],[108,43,25,32],[108,44,25,33],[109,4,26,4],[109,10,26,10,"len"],[109,13,26,13],[109,16,26,16,"value"],[109,21,26,21],[109,23,26,23,"length"],[109,29,26,29],[110,4,27,4],[110,10,27,10,"needsLen"],[110,18,27,18],[110,21,27,21,"length"],[110,27,27,27],[110,32,27,32,"undefined"],[110,41,27,41],[111,4,28,4],[111,8,28,8],[111,9,28,9,"bytes"],[111,14,28,14],[111,18,28,19,"needsLen"],[111,26,28,27],[111,30,28,31,"len"],[111,33,28,34],[111,38,28,39,"length"],[111,44,28,46],[111,46,28,48],[112,6,29,8],[112,12,29,14,"prefix"],[112,18,29,20],[112,21,29,23,"title"],[112,26,29,28],[112,30,29,32],[112,34,29,36,"title"],[112,39,29,41],[112,43,29,45],[113,6,30,8],[113,12,30,14,"ofLen"],[113,17,30,19],[113,20,30,22,"needsLen"],[113,28,30,30],[113,31,30,33],[113,45,30,47,"length"],[113,51,30,53],[113,53,30,55],[113,56,30,58],[113,58,30,60],[114,6,31,8],[114,12,31,14,"got"],[114,15,31,17],[114,18,31,20,"bytes"],[114,23,31,25],[114,26,31,28],[114,36,31,38,"len"],[114,39,31,41],[114,41,31,43],[114,44,31,46],[114,52,31,54],[114,59,31,61,"value"],[114,64,31,66],[114,66,31,68],[115,6,32,8],[115,12,32,14],[115,16,32,18,"Error"],[115,21,32,23],[115,22,32,24,"prefix"],[115,28,32,30],[115,31,32,33],[115,52,32,54],[115,55,32,57,"ofLen"],[115,60,32,62],[115,63,32,65],[115,71,32,73],[115,74,32,76,"got"],[115,77,32,79],[115,78,32,80],[116,4,33,4],[117,4,34,4],[117,11,34,11,"value"],[117,16,34,16],[118,2,35,0],[119,2,36,0],[120,2,37,7],[120,11,37,16,"numberToHexUnpadded"],[120,30,37,35,"numberToHexUnpadded"],[120,31,37,36,"num"],[120,34,37,39],[120,36,37,41],[121,4,38,4],[121,10,38,10,"hex"],[121,13,38,13],[121,16,38,16,"num"],[121,19,38,19],[121,20,38,20,"toString"],[121,28,38,28],[121,29,38,29],[121,31,38,31],[121,32,38,32],[122,4,39,4],[122,11,39,11,"hex"],[122,14,39,14],[122,15,39,15,"length"],[122,21,39,21],[122,24,39,24],[122,25,39,25],[122,28,39,28],[122,31,39,31],[122,34,39,34,"hex"],[122,37,39,37],[122,40,39,40,"hex"],[122,43,39,43],[123,2,40,0],[124,2,41,7],[124,11,41,16,"hexToNumber"],[124,22,41,27,"hexToNumber"],[124,23,41,28,"hex"],[124,26,41,31],[124,28,41,33],[125,4,42,4],[125,8,42,8],[125,15,42,15,"hex"],[125,18,42,18],[125,23,42,23],[125,31,42,31],[125,33,43,8],[125,39,43,14],[125,43,43,18,"Error"],[125,48,43,23],[125,49,43,24],[125,76,43,51],[125,79,43,54],[125,86,43,61,"hex"],[125,89,43,64],[125,90,43,65],[126,4,44,4],[126,11,44,11,"hex"],[126,14,44,14],[126,19,44,19],[126,21,44,21],[126,24,44,24,"_0n"],[126,27,44,27],[126,30,44,30,"BigInt"],[126,36,44,36],[126,37,44,37],[126,41,44,41],[126,44,44,44,"hex"],[126,47,44,47],[126,48,44,48],[126,49,44,49],[126,50,44,50],[127,2,45,0],[128,2,46,0],[129,2,47,7],[129,11,47,16,"bytesToNumberBE"],[129,26,47,31,"bytesToNumberBE"],[129,27,47,32,"bytes"],[129,32,47,37],[129,34,47,39],[130,4,48,4],[130,11,48,11,"hexToNumber"],[130,22,48,22],[130,23,48,23],[130,27,48,23,"bytesToHex_"],[130,44,48,34],[130,46,48,35,"bytes"],[130,51,48,40],[130,52,48,41],[130,53,48,42],[131,2,49,0],[132,2,50,7],[132,11,50,16,"bytesToNumberLE"],[132,26,50,31,"bytesToNumberLE"],[132,27,50,32,"bytes"],[132,32,50,37],[132,34,50,39],[133,4,51,4],[133,8,51,4,"abytes_"],[133,21,51,11],[133,23,51,12,"bytes"],[133,28,51,17],[133,29,51,18],[134,4,52,4],[134,11,52,11,"hexToNumber"],[134,22,52,22],[134,23,52,23],[134,27,52,23,"bytesToHex_"],[134,44,52,34],[134,46,52,35,"Uint8Array"],[134,56,52,45],[134,57,52,46,"from"],[134,61,52,50],[134,62,52,51,"bytes"],[134,67,52,56],[134,68,52,57],[134,69,52,58,"reverse"],[134,76,52,65],[134,77,52,66],[134,78,52,67],[134,79,52,68],[134,80,52,69],[135,2,53,0],[136,2,54,7],[136,11,54,16,"numberToBytesBE"],[136,26,54,31,"numberToBytesBE"],[136,27,54,32,"n"],[136,28,54,33],[136,30,54,35,"len"],[136,33,54,38],[136,35,54,40],[137,4,55,4],[137,11,55,11],[137,15,55,11,"hexToBytes_"],[137,32,55,22],[137,34,55,23,"n"],[137,35,55,24],[137,36,55,25,"toString"],[137,44,55,33],[137,45,55,34],[137,47,55,36],[137,48,55,37],[137,49,55,38,"padStart"],[137,57,55,46],[137,58,55,47,"len"],[137,61,55,50],[137,64,55,53],[137,65,55,54],[137,67,55,56],[137,70,55,59],[137,71,55,60],[137,72,55,61],[138,2,56,0],[139,2,57,7],[139,11,57,16,"numberToBytesLE"],[139,26,57,31,"numberToBytesLE"],[139,27,57,32,"n"],[139,28,57,33],[139,30,57,35,"len"],[139,33,57,38],[139,35,57,40],[140,4,58,4],[140,11,58,11,"numberToBytesBE"],[140,26,58,26],[140,27,58,27,"n"],[140,28,58,28],[140,30,58,30,"len"],[140,33,58,33],[140,34,58,34],[140,35,58,35,"reverse"],[140,42,58,42],[140,43,58,43],[140,44,58,44],[141,2,59,0],[142,2,60,0],[143,2,61,7],[143,11,61,16,"numberToVarBytesBE"],[143,29,61,34,"numberToVarBytesBE"],[143,30,61,35,"n"],[143,31,61,36],[143,33,61,38],[144,4,62,4],[144,11,62,11],[144,15,62,11,"hexToBytes_"],[144,32,62,22],[144,34,62,23,"numberToHexUnpadded"],[144,53,62,42],[144,54,62,43,"n"],[144,55,62,44],[144,56,62,45],[144,57,62,46],[145,2,63,0],[146,2,64,0],[147,0,65,0],[148,0,66,0],[149,0,67,0],[150,0,68,0],[151,0,69,0],[152,0,70,0],[153,0,71,0],[154,0,72,0],[155,2,73,7],[155,11,73,16,"ensureBytes"],[155,22,73,27,"ensureBytes"],[155,23,73,28,"title"],[155,28,73,33],[155,30,73,35,"hex"],[155,33,73,38],[155,35,73,40,"expectedLength"],[155,49,73,54],[155,51,73,56],[156,4,74,4],[156,8,74,8,"res"],[156,11,74,11],[157,4,75,4],[157,8,75,8],[157,15,75,15,"hex"],[157,18,75,18],[157,23,75,23],[157,31,75,31],[157,33,75,33],[158,6,76,8],[158,10,76,12],[159,8,77,12,"res"],[159,11,77,15],[159,14,77,18],[159,18,77,18,"hexToBytes_"],[159,35,77,29],[159,37,77,30,"hex"],[159,40,77,33],[159,41,77,34],[160,6,78,8],[160,7,78,9],[160,8,79,8],[160,15,79,15,"e"],[160,16,79,16],[160,18,79,18],[161,8,80,12],[161,14,80,18],[161,18,80,22,"Error"],[161,23,80,27],[161,24,80,28,"title"],[161,29,80,33],[161,32,80,36],[161,76,80,80],[161,79,80,83,"e"],[161,80,80,84],[161,81,80,85],[162,6,81,8],[163,4,82,4],[163,5,82,5],[163,11,83,9],[163,15,83,13],[163,19,83,13,"isBytes_"],[163,33,83,21],[163,35,83,22,"hex"],[163,38,83,25],[163,39,83,26],[163,41,83,28],[164,6,84,8],[165,6,85,8],[166,6,86,8,"res"],[166,9,86,11],[166,12,86,14,"Uint8Array"],[166,22,86,24],[166,23,86,25,"from"],[166,27,86,29],[166,28,86,30,"hex"],[166,31,86,33],[166,32,86,34],[167,4,87,4],[167,5,87,5],[167,11,88,9],[168,6,89,8],[168,12,89,14],[168,16,89,18,"Error"],[168,21,89,23],[168,22,89,24,"title"],[168,27,89,29],[168,30,89,32],[168,65,89,67],[168,66,89,68],[169,4,90,4],[170,4,91,4],[170,10,91,10,"len"],[170,13,91,13],[170,16,91,16,"res"],[170,19,91,19],[170,20,91,20,"length"],[170,26,91,26],[171,4,92,4],[171,8,92,8],[171,15,92,15,"expectedLength"],[171,29,92,29],[171,34,92,34],[171,42,92,42],[171,46,92,46,"len"],[171,49,92,49],[171,54,92,54,"expectedLength"],[171,68,92,68],[171,70,93,8],[171,76,93,14],[171,80,93,18,"Error"],[171,85,93,23],[171,86,93,24,"title"],[171,91,93,29],[171,94,93,32],[171,107,93,45],[171,110,93,48,"expectedLength"],[171,124,93,62],[171,127,93,65],[171,144,93,82],[171,147,93,85,"len"],[171,150,93,88],[171,151,93,89],[172,4,94,4],[172,11,94,11,"res"],[172,14,94,14],[173,2,95,0],[174,2,96,0],[175,2,97,7],[175,11,97,16,"equalBytes"],[175,21,97,26,"equalBytes"],[175,22,97,27,"a"],[175,23,97,28],[175,25,97,30,"b"],[175,26,97,31],[175,28,97,33],[176,4,98,4],[176,8,98,8,"a"],[176,9,98,9],[176,10,98,10,"length"],[176,16,98,16],[176,21,98,21,"b"],[176,22,98,22],[176,23,98,23,"length"],[176,29,98,29],[176,31,99,8],[176,38,99,15],[176,43,99,20],[177,4,100,4],[177,8,100,8,"diff"],[177,12,100,12],[177,15,100,15],[177,16,100,16],[178,4,101,4],[178,9,101,9],[178,13,101,13,"i"],[178,14,101,14],[178,17,101,17],[178,18,101,18],[178,20,101,20,"i"],[178,21,101,21],[178,24,101,24,"a"],[178,25,101,25],[178,26,101,26,"length"],[178,32,101,32],[178,34,101,34,"i"],[178,35,101,35],[178,37,101,37],[178,39,102,8,"diff"],[178,43,102,12],[178,47,102,16,"a"],[178,48,102,17],[178,49,102,18,"i"],[178,50,102,19],[178,51,102,20],[178,54,102,23,"b"],[178,55,102,24],[178,56,102,25,"i"],[178,57,102,26],[178,58,102,27],[179,4,103,4],[179,11,103,11,"diff"],[179,15,103,15],[179,20,103,20],[179,21,103,21],[180,2,104,0],[181,2,105,0],[182,0,106,0],[183,0,107,0],[184,0,108,0],[185,2,109,7],[185,11,109,16,"copyBytes"],[185,20,109,25,"copyBytes"],[185,21,109,26,"bytes"],[185,26,109,31],[185,28,109,33],[186,4,110,4],[186,11,110,11,"Uint8Array"],[186,21,110,21],[186,22,110,22,"from"],[186,26,110,26],[186,27,110,27,"bytes"],[186,32,110,32],[186,33,110,33],[187,2,111,0],[188,2,112,0],[189,0,113,0],[190,0,114,0],[191,0,115,0],[192,0,116,0],[193,2,117,7],[193,11,117,16,"asciiToBytes"],[193,23,117,28,"asciiToBytes"],[193,24,117,29,"ascii"],[193,29,117,34],[193,31,117,36],[194,4,118,4],[194,11,118,11,"Uint8Array"],[194,21,118,21],[194,22,118,22,"from"],[194,26,118,26],[194,27,118,27,"ascii"],[194,32,118,32],[194,34,118,34],[194,35,118,35,"c"],[194,36,118,36],[194,38,118,38,"i"],[194,39,118,39],[194,44,118,44],[195,6,119,8],[195,12,119,14,"charCode"],[195,20,119,22],[195,23,119,25,"c"],[195,24,119,26],[195,25,119,27,"charCodeAt"],[195,35,119,37],[195,36,119,38],[195,37,119,39],[195,38,119,40],[196,6,120,8],[196,10,120,12,"c"],[196,11,120,13],[196,12,120,14,"length"],[196,18,120,20],[196,23,120,25],[196,24,120,26],[196,28,120,30,"charCode"],[196,36,120,38],[196,39,120,41],[196,42,120,44],[196,44,120,46],[197,8,121,12],[197,14,121,18],[197,18,121,22,"Error"],[197,23,121,27],[197,24,121,28],[197,64,121,68,"ascii"],[197,69,121,73],[197,70,121,74,"i"],[197,71,121,75],[197,72,121,76],[197,87,121,91,"charCode"],[197,95,121,99],[197,111,121,115,"i"],[197,112,121,116],[197,114,121,118],[197,115,121,119],[198,6,122,8],[199,6,123,8],[199,13,123,15,"charCode"],[199,21,123,23],[200,4,124,4],[200,5,124,5],[200,6,124,6],[201,2,125,0],[202,2,126,0],[203,0,127,0],[204,0,128,0],[205,2,129,0],[206,2,130,0],[207,0,131,0],[208,0,132,0],[209,0,133,0],[210,2,134,0],[211,2,135,0],[212,2,136,0],[212,8,136,6,"isPosBig"],[212,16,136,14],[212,19,136,18,"n"],[212,20,136,19],[212,24,136,24],[212,31,136,31,"n"],[212,32,136,32],[212,37,136,37],[212,45,136,45],[212,49,136,49,"_0n"],[212,52,136,52],[212,56,136,56,"n"],[212,57,136,57],[213,2,137,7],[213,11,137,16,"inRange"],[213,18,137,23,"inRange"],[213,19,137,24,"n"],[213,20,137,25],[213,22,137,27,"min"],[213,25,137,30],[213,27,137,32,"max"],[213,30,137,35],[213,32,137,37],[214,4,138,4],[214,11,138,11,"isPosBig"],[214,19,138,19],[214,20,138,20,"n"],[214,21,138,21],[214,22,138,22],[214,26,138,26,"isPosBig"],[214,34,138,34],[214,35,138,35,"min"],[214,38,138,38],[214,39,138,39],[214,43,138,43,"isPosBig"],[214,51,138,51],[214,52,138,52,"max"],[214,55,138,55],[214,56,138,56],[214,60,138,60,"min"],[214,63,138,63],[214,67,138,67,"n"],[214,68,138,68],[214,72,138,72,"n"],[214,73,138,73],[214,76,138,76,"max"],[214,79,138,79],[215,2,139,0],[216,2,140,0],[217,0,141,0],[218,0,142,0],[219,0,143,0],[220,0,144,0],[221,2,145,7],[221,11,145,16,"aInRange"],[221,19,145,24,"aInRange"],[221,20,145,25,"title"],[221,25,145,30],[221,27,145,32,"n"],[221,28,145,33],[221,30,145,35,"min"],[221,33,145,38],[221,35,145,40,"max"],[221,38,145,43],[221,40,145,45],[222,4,146,4],[223,4,147,4],[224,4,148,4],[225,4,149,4],[226,4,150,4],[227,4,151,4],[227,8,151,8],[227,9,151,9,"inRange"],[227,16,151,16],[227,17,151,17,"n"],[227,18,151,18],[227,20,151,20,"min"],[227,23,151,23],[227,25,151,25,"max"],[227,28,151,28],[227,29,151,29],[227,31,152,8],[227,37,152,14],[227,41,152,18,"Error"],[227,46,152,23],[227,47,152,24],[227,64,152,41],[227,67,152,44,"title"],[227,72,152,49],[227,75,152,52],[227,79,152,56],[227,82,152,59,"min"],[227,85,152,62],[227,88,152,65],[227,98,152,75],[227,101,152,78,"max"],[227,104,152,81],[227,107,152,84],[227,115,152,92],[227,118,152,95,"n"],[227,119,152,96],[227,120,152,97],[228,2,153,0],[229,2,154,0],[230,2,155,0],[231,0,156,0],[232,0,157,0],[233,0,158,0],[234,0,159,0],[235,2,160,7],[235,11,160,16,"bitLen"],[235,17,160,22,"bitLen"],[235,18,160,23,"n"],[235,19,160,24],[235,21,160,26],[236,4,161,4],[236,8,161,8,"len"],[236,11,161,11],[237,4,162,4],[237,9,162,9,"len"],[237,12,162,12],[237,15,162,15],[237,16,162,16],[237,18,162,18,"n"],[237,19,162,19],[237,22,162,22,"_0n"],[237,25,162,25],[237,27,162,27,"n"],[237,28,162,28],[237,33,162,33,"_1n"],[237,36,162,36],[237,38,162,38,"len"],[237,41,162,41],[237,45,162,45],[237,46,162,46],[237,47,163,8],[238,4,164,4],[238,11,164,11,"len"],[238,14,164,14],[239,2,165,0],[240,2,166,0],[241,0,167,0],[242,0,168,0],[243,0,169,0],[244,0,170,0],[245,2,171,7],[245,11,171,16,"bitGet"],[245,17,171,22,"bitGet"],[245,18,171,23,"n"],[245,19,171,24],[245,21,171,26,"pos"],[245,24,171,29],[245,26,171,31],[246,4,172,4],[246,11,172,12,"n"],[246,12,172,13],[246,16,172,17,"BigInt"],[246,22,172,23],[246,23,172,24,"pos"],[246,26,172,27],[246,27,172,28],[246,30,172,32,"_1n"],[246,33,172,35],[247,2,173,0],[248,2,174,0],[249,0,175,0],[250,0,176,0],[251,2,177,7],[251,11,177,16,"bitSet"],[251,17,177,22,"bitSet"],[251,18,177,23,"n"],[251,19,177,24],[251,21,177,26,"pos"],[251,24,177,29],[251,26,177,31,"value"],[251,31,177,36],[251,33,177,38],[252,4,178,4],[252,11,178,11,"n"],[252,12,178,12],[252,15,178,16],[252,16,178,17,"value"],[252,21,178,22],[252,24,178,25,"_1n"],[252,27,178,28],[252,30,178,31,"_0n"],[252,33,178,34],[252,38,178,39,"BigInt"],[252,44,178,45],[252,45,178,46,"pos"],[252,48,178,49],[252,49,178,51],[253,2,179,0],[254,2,180,0],[255,0,181,0],[256,0,182,0],[257,0,183,0],[258,2,184,7],[258,8,184,13,"bitMask"],[258,15,184,20],[258,18,184,24,"n"],[258,19,184,25],[258,23,184,30],[258,24,184,31,"_1n"],[258,27,184,34],[258,31,184,38,"BigInt"],[258,37,184,44],[258,38,184,45,"n"],[258,39,184,46],[258,40,184,47],[258,44,184,51,"_1n"],[258,47,184,54],[259,2,185,0],[260,0,186,0],[261,0,187,0],[262,0,188,0],[263,0,189,0],[264,0,190,0],[265,0,191,0],[266,2,185,0,"exports"],[266,9,185,0],[266,10,185,0,"bitMask"],[266,17,185,0],[266,20,185,0,"bitMask"],[266,27,185,0],[267,2,192,7],[267,11,192,16,"createHmacDrbg"],[267,25,192,30,"createHmacDrbg"],[267,26,192,31,"hashLen"],[267,33,192,38],[267,35,192,40,"qByteLen"],[267,43,192,48],[267,45,192,50,"hmacFn"],[267,51,192,56],[267,53,192,58],[268,4,193,4],[268,8,193,8],[268,15,193,15,"hashLen"],[268,22,193,22],[268,27,193,27],[268,35,193,35],[268,39,193,39,"hashLen"],[268,46,193,46],[268,49,193,49],[268,50,193,50],[268,52,194,8],[268,58,194,14],[268,62,194,18,"Error"],[268,67,194,23],[268,68,194,24],[268,94,194,50],[268,95,194,51],[269,4,195,4],[269,8,195,8],[269,15,195,15,"qByteLen"],[269,23,195,23],[269,28,195,28],[269,36,195,36],[269,40,195,40,"qByteLen"],[269,48,195,48],[269,51,195,51],[269,52,195,52],[269,54,196,8],[269,60,196,14],[269,64,196,18,"Error"],[269,69,196,23],[269,70,196,24],[269,97,196,51],[269,98,196,52],[270,4,197,4],[270,8,197,8],[270,15,197,15,"hmacFn"],[270,21,197,21],[270,26,197,26],[270,36,197,36],[270,38,198,8],[270,44,198,14],[270,48,198,18,"Error"],[270,53,198,23],[270,54,198,24],[270,81,198,51],[270,82,198,52],[271,4,199,4],[272,4,200,4],[272,10,200,10,"u8n"],[272,13,200,13],[272,16,200,17,"len"],[272,19,200,20],[272,23,200,25],[272,27,200,29,"Uint8Array"],[272,37,200,39],[272,38,200,40,"len"],[272,41,200,43],[272,42,200,44],[272,43,200,45],[272,44,200,46],[273,4,201,4],[273,10,201,10,"u8of"],[273,14,201,14],[273,17,201,18,"byte"],[273,21,201,22],[273,25,201,27,"Uint8Array"],[273,35,201,37],[273,36,201,38,"of"],[273,38,201,40],[273,39,201,41,"byte"],[273,43,201,45],[273,44,201,46],[273,45,201,47],[273,46,201,48],[274,4,202,4],[274,8,202,8,"v"],[274,9,202,9],[274,12,202,12,"u8n"],[274,15,202,15],[274,16,202,16,"hashLen"],[274,23,202,23],[274,24,202,24],[274,25,202,25],[274,26,202,26],[275,4,203,4],[275,8,203,8,"k"],[275,9,203,9],[275,12,203,12,"u8n"],[275,15,203,15],[275,16,203,16,"hashLen"],[275,23,203,23],[275,24,203,24],[275,25,203,25],[275,26,203,26],[276,4,204,4],[276,8,204,8,"i"],[276,9,204,9],[276,12,204,12],[276,13,204,13],[276,14,204,14],[276,15,204,15],[277,4,205,4],[277,10,205,10,"reset"],[277,15,205,15],[277,18,205,18,"reset"],[277,19,205,18],[277,24,205,24],[278,6,206,8,"v"],[278,7,206,9],[278,8,206,10,"fill"],[278,12,206,14],[278,13,206,15],[278,14,206,16],[278,15,206,17],[279,6,207,8,"k"],[279,7,207,9],[279,8,207,10,"fill"],[279,12,207,14],[279,13,207,15],[279,14,207,16],[279,15,207,17],[280,6,208,8,"i"],[280,7,208,9],[280,10,208,12],[280,11,208,13],[281,4,209,4],[281,5,209,5],[282,4,210,4],[282,10,210,10,"h"],[282,11,210,11],[282,14,210,14,"h"],[282,15,210,15],[282,18,210,18,"b"],[282,19,210,19],[282,24,210,24,"hmacFn"],[282,30,210,30],[282,31,210,31,"k"],[282,32,210,32],[282,34,210,34,"v"],[282,35,210,35],[282,37,210,37],[282,40,210,40,"b"],[282,41,210,41],[282,42,210,42],[282,43,210,43],[282,44,210,44],[283,4,211,4],[283,10,211,10,"reseed"],[283,16,211,16],[283,19,211,19,"reseed"],[283,20,211,20,"seed"],[283,24,211,24],[283,27,211,27,"u8n"],[283,30,211,30],[283,31,211,31],[283,32,211,32],[283,33,211,33],[283,38,211,38],[284,6,212,8],[285,6,213,8,"k"],[285,7,213,9],[285,10,213,12,"h"],[285,11,213,13],[285,12,213,14,"u8of"],[285,16,213,18],[285,17,213,19],[285,21,213,23],[285,22,213,24],[285,24,213,26,"seed"],[285,28,213,30],[285,29,213,31],[285,30,213,32],[285,31,213,33],[286,6,214,8,"v"],[286,7,214,9],[286,10,214,12,"h"],[286,11,214,13],[286,12,214,14],[286,13,214,15],[286,14,214,16],[286,15,214,17],[287,6,215,8],[287,10,215,12,"seed"],[287,14,215,16],[287,15,215,17,"length"],[287,21,215,23],[287,26,215,28],[287,27,215,29],[287,29,216,12],[288,6,217,8,"k"],[288,7,217,9],[288,10,217,12,"h"],[288,11,217,13],[288,12,217,14,"u8of"],[288,16,217,18],[288,17,217,19],[288,21,217,23],[288,22,217,24],[288,24,217,26,"seed"],[288,28,217,30],[288,29,217,31],[288,30,217,32],[288,31,217,33],[289,6,218,8,"v"],[289,7,218,9],[289,10,218,12,"h"],[289,11,218,13],[289,12,218,14],[289,13,218,15],[289,14,218,16],[289,15,218,17],[290,4,219,4],[290,5,219,5],[291,4,220,4],[291,10,220,10,"gen"],[291,13,220,13],[291,16,220,16,"gen"],[291,17,220,16],[291,22,220,22],[292,6,221,8],[293,6,222,8],[293,10,222,12,"i"],[293,11,222,13],[293,13,222,15],[293,17,222,19],[293,21,222,23],[293,23,223,12],[293,29,223,18],[293,33,223,22,"Error"],[293,38,223,27],[293,39,223,28],[293,64,223,53],[293,65,223,54],[294,6,224,8],[294,10,224,12,"len"],[294,13,224,15],[294,16,224,18],[294,17,224,19],[295,6,225,8],[295,12,225,14,"out"],[295,15,225,17],[295,18,225,20],[295,20,225,22],[296,6,226,8],[296,13,226,15,"len"],[296,16,226,18],[296,19,226,21,"qByteLen"],[296,27,226,29],[296,29,226,31],[297,8,227,12,"v"],[297,9,227,13],[297,12,227,16,"h"],[297,13,227,17],[297,14,227,18],[297,15,227,19],[298,8,228,12],[298,14,228,18,"sl"],[298,16,228,20],[298,19,228,23,"v"],[298,20,228,24],[298,21,228,25,"slice"],[298,26,228,30],[298,27,228,31],[298,28,228,32],[299,8,229,12,"out"],[299,11,229,15],[299,12,229,16,"push"],[299,16,229,20],[299,17,229,21,"sl"],[299,19,229,23],[299,20,229,24],[300,8,230,12,"len"],[300,11,230,15],[300,15,230,19,"v"],[300,16,230,20],[300,17,230,21,"length"],[300,23,230,27],[301,6,231,8],[302,6,232,8],[302,13,232,15],[302,17,232,15,"concatBytes_"],[302,35,232,27],[302,37,232,28],[302,40,232,31,"out"],[302,43,232,34],[302,44,232,35],[303,4,233,4],[303,5,233,5],[304,4,234,4],[304,10,234,10,"genUntil"],[304,18,234,18],[304,21,234,21,"genUntil"],[304,22,234,22,"seed"],[304,26,234,26],[304,28,234,28,"pred"],[304,32,234,32],[304,37,234,37],[305,6,235,8,"reset"],[305,11,235,13],[305,12,235,14],[305,13,235,15],[306,6,236,8,"reseed"],[306,12,236,14],[306,13,236,15,"seed"],[306,17,236,19],[306,18,236,20],[306,19,236,21],[306,20,236,22],[307,6,237,8],[307,10,237,12,"res"],[307,13,237,15],[307,16,237,18,"undefined"],[307,25,237,27],[307,26,237,28],[307,27,237,29],[308,6,238,8],[308,13,238,15],[308,15,238,17,"res"],[308,18,238,20],[308,21,238,23,"pred"],[308,25,238,27],[308,26,238,28,"gen"],[308,29,238,31],[308,30,238,32],[308,31,238,33],[308,32,238,34],[308,33,238,35],[308,35,239,12,"reseed"],[308,41,239,18],[308,42,239,19],[308,43,239,20],[309,6,240,8,"reset"],[309,11,240,13],[309,12,240,14],[309,13,240,15],[310,6,241,8],[310,13,241,15,"res"],[310,16,241,18],[311,4,242,4],[311,5,242,5],[312,4,243,4],[312,11,243,11,"genUntil"],[312,19,243,19],[313,2,244,0],[314,2,245,0],[315,2,246,0],[315,8,246,6,"validatorFns"],[315,20,246,18],[315,23,246,21],[316,4,247,4,"bigint"],[316,10,247,10],[316,12,247,13,"val"],[316,15,247,16],[316,19,247,21],[316,26,247,28,"val"],[316,29,247,31],[316,34,247,36],[316,42,247,44],[317,4,248,4,"function"],[317,12,248,12],[317,14,248,15,"val"],[317,17,248,18],[317,21,248,23],[317,28,248,30,"val"],[317,31,248,33],[317,36,248,38],[317,46,248,48],[318,4,249,4,"boolean"],[318,11,249,11],[318,13,249,14,"val"],[318,16,249,17],[318,20,249,22],[318,27,249,29,"val"],[318,30,249,32],[318,35,249,37],[318,44,249,46],[319,4,250,4,"string"],[319,10,250,10],[319,12,250,13,"val"],[319,15,250,16],[319,19,250,21],[319,26,250,28,"val"],[319,29,250,31],[319,34,250,36],[319,42,250,44],[320,4,251,4,"stringOrUint8Array"],[320,22,251,22],[320,24,251,25,"val"],[320,27,251,28],[320,31,251,33],[320,38,251,40,"val"],[320,41,251,43],[320,46,251,48],[320,54,251,56],[320,58,251,60],[320,62,251,60,"isBytes_"],[320,76,251,68],[320,78,251,69,"val"],[320,81,251,72],[320,82,251,73],[321,4,252,4,"isSafeInteger"],[321,17,252,17],[321,19,252,20,"val"],[321,22,252,23],[321,26,252,28,"Number"],[321,32,252,34],[321,33,252,35,"isSafeInteger"],[321,46,252,48],[321,47,252,49,"val"],[321,50,252,52],[321,51,252,53],[322,4,253,4,"array"],[322,9,253,9],[322,11,253,12,"val"],[322,14,253,15],[322,18,253,20,"Array"],[322,23,253,25],[322,24,253,26,"isArray"],[322,31,253,33],[322,32,253,34,"val"],[322,35,253,37],[322,36,253,38],[323,4,254,4,"field"],[323,9,254,9],[323,11,254,11,"field"],[323,12,254,12,"val"],[323,15,254,15],[323,17,254,17,"object"],[323,23,254,23],[323,28,254,28,"object"],[323,34,254,34],[323,35,254,35,"Fp"],[323,37,254,37],[323,38,254,38,"isValid"],[323,45,254,45],[323,46,254,46,"val"],[323,49,254,49],[323,50,254,50],[324,4,255,4,"hash"],[324,8,255,8],[324,10,255,11,"val"],[324,13,255,14],[324,17,255,19],[324,24,255,26,"val"],[324,27,255,29],[324,32,255,34],[324,42,255,44],[324,46,255,48,"Number"],[324,52,255,54],[324,53,255,55,"isSafeInteger"],[324,66,255,68],[324,67,255,69,"val"],[324,70,255,72],[324,71,255,73,"outputLen"],[324,80,255,82],[325,2,256,0],[325,3,256,1],[326,2,257,0],[327,2,258,7],[327,11,258,16,"validateObject"],[327,25,258,30,"validateObject"],[327,26,258,31,"object"],[327,32,258,37],[327,34,258,39,"validators"],[327,44,258,49],[327,46,258,51,"optValidators"],[327,59,258,64],[327,62,258,67],[327,63,258,68],[327,64,258,69],[327,66,258,71],[328,4,259,4],[328,10,259,10,"checkField"],[328,20,259,20],[328,23,259,23,"checkField"],[328,24,259,24,"fieldName"],[328,33,259,33],[328,35,259,35,"type"],[328,39,259,39],[328,41,259,41,"isOptional"],[328,51,259,51],[328,56,259,56],[329,6,260,8],[329,12,260,14,"checkVal"],[329,20,260,22],[329,23,260,25,"validatorFns"],[329,35,260,37],[329,36,260,38,"type"],[329,40,260,42],[329,41,260,43],[330,6,261,8],[330,10,261,12],[330,17,261,19,"checkVal"],[330,25,261,27],[330,30,261,32],[330,40,261,42],[330,42,262,12],[330,48,262,18],[330,52,262,22,"Error"],[330,57,262,27],[330,58,262,28],[330,86,262,56],[330,87,262,57],[331,6,263,8],[331,12,263,14,"val"],[331,15,263,17],[331,18,263,20,"object"],[331,24,263,26],[331,25,263,27,"fieldName"],[331,34,263,36],[331,35,263,37],[332,6,264,8],[332,10,264,12,"isOptional"],[332,20,264,22],[332,24,264,26,"val"],[332,27,264,29],[332,32,264,34,"undefined"],[332,41,264,43],[332,43,265,12],[333,6,266,8],[333,10,266,12],[333,11,266,13,"checkVal"],[333,19,266,21],[333,20,266,22,"val"],[333,23,266,25],[333,25,266,27,"object"],[333,31,266,33],[333,32,266,34],[333,34,266,36],[334,8,267,12],[334,14,267,18],[334,18,267,22,"Error"],[334,23,267,27],[334,24,267,28],[334,32,267,36],[334,35,267,39,"String"],[334,41,267,45],[334,42,267,46,"fieldName"],[334,51,267,55],[334,52,267,56],[334,55,267,59],[334,79,267,83],[334,82,267,86,"type"],[334,86,267,90],[334,89,267,93],[334,97,267,101],[334,100,267,104,"val"],[334,103,267,107],[334,104,267,108],[335,6,268,8],[336,4,269,4],[336,5,269,5],[337,4,270,4],[337,9,270,9],[337,15,270,15],[337,16,270,16,"fieldName"],[337,25,270,25],[337,27,270,27,"type"],[337,31,270,31],[337,32,270,32],[337,36,270,36,"Object"],[337,42,270,42],[337,43,270,43,"entries"],[337,50,270,50],[337,51,270,51,"validators"],[337,61,270,61],[337,62,270,62],[337,64,271,8,"checkField"],[337,74,271,18],[337,75,271,19,"fieldName"],[337,84,271,28],[337,86,271,30,"type"],[337,90,271,34],[337,92,271,36],[337,97,271,41],[337,98,271,42],[338,4,272,4],[338,9,272,9],[338,15,272,15],[338,16,272,16,"fieldName"],[338,25,272,25],[338,27,272,27,"type"],[338,31,272,31],[338,32,272,32],[338,36,272,36,"Object"],[338,42,272,42],[338,43,272,43,"entries"],[338,50,272,50],[338,51,272,51,"optValidators"],[338,64,272,64],[338,65,272,65],[338,67,273,8,"checkField"],[338,77,273,18],[338,78,273,19,"fieldName"],[338,87,273,28],[338,89,273,30,"type"],[338,93,273,34],[338,95,273,36],[338,99,273,40],[338,100,273,41],[339,4,274,4],[339,11,274,11,"object"],[339,17,274,17],[340,2,275,0],[341,2,276,0],[342,2,277,0],[343,2,278,0],[344,2,279,0],[345,2,280,0],[346,2,281,0],[347,2,282,0],[348,2,283,0],[349,2,284,7],[349,11,284,16,"isHash"],[349,17,284,22,"isHash"],[349,18,284,23,"val"],[349,21,284,26],[349,23,284,28],[350,4,285,4],[350,11,285,11],[350,18,285,18,"val"],[350,21,285,21],[350,26,285,26],[350,36,285,36],[350,40,285,40,"Number"],[350,46,285,46],[350,47,285,47,"isSafeInteger"],[350,60,285,60],[350,61,285,61,"val"],[350,64,285,64],[350,65,285,65,"outputLen"],[350,74,285,74],[350,75,285,75],[351,2,286,0],[352,2,287,7],[352,11,287,16,"_validateObject"],[352,26,287,31,"_validateObject"],[352,27,287,32,"object"],[352,33,287,38],[352,35,287,40,"fields"],[352,41,287,46],[352,43,287,48,"optFields"],[352,52,287,57],[352,55,287,60],[352,56,287,61],[352,57,287,62],[352,59,287,64],[353,4,288,4],[353,8,288,8],[353,9,288,9,"object"],[353,15,288,15],[353,19,288,19],[353,26,288,26,"object"],[353,32,288,32],[353,37,288,37],[353,45,288,45],[353,47,289,8],[353,53,289,14],[353,57,289,18,"Error"],[353,62,289,23],[353,63,289,24],[353,94,289,55],[353,95,289,56],[354,4,290,4],[354,13,290,13,"checkField"],[354,23,290,23,"checkField"],[354,24,290,24,"fieldName"],[354,33,290,33],[354,35,290,35,"expectedType"],[354,47,290,47],[354,49,290,49,"isOpt"],[354,54,290,54],[354,56,290,56],[355,6,291,8],[355,12,291,14,"val"],[355,15,291,17],[355,18,291,20,"object"],[355,24,291,26],[355,25,291,27,"fieldName"],[355,34,291,36],[355,35,291,37],[356,6,292,8],[356,10,292,12,"isOpt"],[356,15,292,17],[356,19,292,21,"val"],[356,22,292,24],[356,27,292,29,"undefined"],[356,36,292,38],[356,38,293,12],[357,6,294,8],[357,12,294,14,"current"],[357,19,294,21],[357,22,294,24],[357,29,294,31,"val"],[357,32,294,34],[358,6,295,8],[358,10,295,12,"current"],[358,17,295,19],[358,22,295,24,"expectedType"],[358,34,295,36],[358,38,295,40,"val"],[358,41,295,43],[358,46,295,48],[358,50,295,52],[358,52,296,12],[358,58,296,18],[358,62,296,22,"Error"],[358,67,296,27],[358,68,296,28],[358,78,296,38,"fieldName"],[358,87,296,47],[358,113,296,73,"expectedType"],[358,125,296,85],[358,134,296,94,"current"],[358,141,296,101],[358,143,296,103],[358,144,296,104],[359,4,297,4],[360,4,298,4,"Object"],[360,10,298,10],[360,11,298,11,"entries"],[360,18,298,18],[360,19,298,19,"fields"],[360,25,298,25],[360,26,298,26],[360,27,298,27,"forEach"],[360,34,298,34],[360,35,298,35],[360,36,298,36],[360,37,298,37,"k"],[360,38,298,38],[360,40,298,40,"v"],[360,41,298,41],[360,42,298,42],[360,47,298,47,"checkField"],[360,57,298,57],[360,58,298,58,"k"],[360,59,298,59],[360,61,298,61,"v"],[360,62,298,62],[360,64,298,64],[360,69,298,69],[360,70,298,70],[360,71,298,71],[361,4,299,4,"Object"],[361,10,299,10],[361,11,299,11,"entries"],[361,18,299,18],[361,19,299,19,"optFields"],[361,28,299,28],[361,29,299,29],[361,30,299,30,"forEach"],[361,37,299,37],[361,38,299,38],[361,39,299,39],[361,40,299,40,"k"],[361,41,299,41],[361,43,299,43,"v"],[361,44,299,44],[361,45,299,45],[361,50,299,50,"checkField"],[361,60,299,60],[361,61,299,61,"k"],[361,62,299,62],[361,64,299,64,"v"],[361,65,299,65],[361,67,299,67],[361,71,299,71],[361,72,299,72],[361,73,299,73],[362,2,300,0],[363,2,301,0],[364,0,302,0],[365,0,303,0],[366,2,304,7],[366,8,304,13,"notImplemented"],[366,22,304,27],[366,25,304,30,"notImplemented"],[366,26,304,30],[366,31,304,36],[367,4,305,4],[367,10,305,10],[367,14,305,14,"Error"],[367,19,305,19],[367,20,305,20],[367,37,305,37],[367,38,305,38],[368,2,306,0],[368,3,306,1],[369,2,307,0],[370,0,308,0],[371,0,309,0],[372,0,310,0],[373,2,307,0,"exports"],[373,9,307,0],[373,10,307,0,"notImplemented"],[373,24,307,0],[373,27,307,0,"notImplemented"],[373,41,307,0],[374,2,311,7],[374,11,311,16,"memoized"],[374,19,311,24,"memoized"],[374,20,311,25,"fn"],[374,22,311,27],[374,24,311,29],[375,4,312,4],[375,10,312,10,"map"],[375,13,312,13],[375,16,312,16],[375,20,312,20,"WeakMap"],[375,27,312,27],[375,28,312,28],[375,29,312,29],[376,4,313,4],[376,11,313,11],[376,12,313,12,"arg"],[376,15,313,15],[376,17,313,17],[376,20,313,20,"args"],[376,24,313,24],[376,29,313,29],[377,6,314,8],[377,12,314,14,"val"],[377,15,314,17],[377,18,314,20,"map"],[377,21,314,23],[377,22,314,24,"get"],[377,25,314,27],[377,26,314,28,"arg"],[377,29,314,31],[377,30,314,32],[378,6,315,8],[378,10,315,12,"val"],[378,13,315,15],[378,18,315,20,"undefined"],[378,27,315,29],[378,29,316,12],[378,36,316,19,"val"],[378,39,316,22],[379,6,317,8],[379,12,317,14,"computed"],[379,20,317,22],[379,23,317,25,"fn"],[379,25,317,27],[379,26,317,28,"arg"],[379,29,317,31],[379,31,317,33],[379,34,317,36,"args"],[379,38,317,40],[379,39,317,41],[380,6,318,8,"map"],[380,9,318,11],[380,10,318,12,"set"],[380,13,318,15],[380,14,318,16,"arg"],[380,17,318,19],[380,19,318,21,"computed"],[380,27,318,29],[380,28,318,30],[381,6,319,8],[381,13,319,15,"computed"],[381,21,319,23],[382,4,320,4],[382,5,320,5],[383,2,321,0],[384,0,321,1],[384,3]],"functionMap":{"names":["<global>","abool","_abool2","_abytes2","numberToHexUnpadded","hexToNumber","bytesToNumberBE","bytesToNumberLE","numberToBytesBE","numberToBytesLE","numberToVarBytesBE","ensureBytes","equalBytes","copyBytes","asciiToBytes","Uint8Array.from$argument_1","isPosBig","inRange","aInRange","bitLen","bitGet","bitSet","bitMask","createHmacDrbg","u8n","u8of","reset","h","reseed","gen","genUntil","validatorFns.bigint","validatorFns._function","validatorFns.boolean","validatorFns.string","validatorFns.stringOrUint8Array","validatorFns.isSafeInteger","validatorFns.array","validatorFns.field","validatorFns.hash","validateObject","checkField","isHash","_validateObject","Object.entries.forEach$argument_0","notImplemented","memoized","<anonymous>"],"mappings":"AAA;OCS;CDG;OEE;CFM;OGG;CHW;OIE;CJG;OKC;CLI;OME;CNE;OOC;CPG;OQC;CRE;OSC;CTE;OUE;CVE;OWU;CXsB;OYE;CZO;OaK;CbE;OcM;kCCC;KDM;CdC;iBgBW,wChB;OiBC;CjBE;OkBM;ClBQ;OmBO;CnBK;OoBM;CpBE;OqBI;CrBE;uBsBK,+BtB;OuBQ;gBCQ,4BD;iBEC,6BF;kBGI;KHI;cIC,4BJ;mBKC;KLQ;gBMC;KNa;qBOC;KPQ;CvBE;Y+BG,gC/B;cgCC,kChC;aiCC,iCjC;YkCC,gClC;wBmCC,iDnC;mBoCC,kCpC;WqCC,2BrC;WsCC,uCtC;UuCC,yEvC;OwCG;uBCC;KDU;CxCM;O0CS;C1CE;O2CC;IFG;KEO;mCCC,mCD;sCCC,kCD;C3CC;8B6CI;C7CE;O8CK;WCE;KDO;C9CC"}},"type":"js/module"}]}