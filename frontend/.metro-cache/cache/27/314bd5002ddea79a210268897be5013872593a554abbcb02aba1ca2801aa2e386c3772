{"dependencies":[{"name":"@noble/hashes/sha2.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":257},"end":{"line":9,"column":47,"index":304}}],"key":"6+AQdZFmgXxbBRsj7vXjiW169Ao=","exportNames":["*"]}},{"name":"@noble/hashes/utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":305},"end":{"line":10,"column":74,"index":379}}],"key":"9JUbQ31V1iDWPVrlEOLWo2H+V7Q=","exportNames":["*"]}},{"name":"./abstract/curve.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":380},"end":{"line":11,"column":48,"index":428}}],"key":"aA5jjFGGjX4GOw/FS2nK17UOhXQ=","exportNames":["*"]}},{"name":"./abstract/edwards.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":429},"end":{"line":12,"column":75,"index":504}}],"key":"huc/9FhnHVOEeFoK1MBBo0sg5vQ=","exportNames":["*"]}},{"name":"./abstract/hash-to-curve.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":505},"end":{"line":13,"column":93,"index":598}}],"key":"6cIrPYlRjjJUQl2gr4hN6UWsQZg=","exportNames":["*"]}},{"name":"./abstract/modular.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":599},"end":{"line":14,"column":99,"index":698}}],"key":"x/hC1jRUt/ly9bL40f8FeUx///E=","exportNames":["*"]}},{"name":"./abstract/montgomery.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":699},"end":{"line":15,"column":54,"index":753}}],"key":"ld9obsz1IIawMjzsCFr0eOuZ4YA=","exportNames":["*"]}},{"name":"./utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":754},"end":{"line":16,"column":70,"index":824}}],"key":"NIaSEHO1E48gsZc7jH9Ex1xTHgE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.edwardsToMontgomery = exports.ed25519ph = exports.ed25519ctx = exports.ed25519_hasher = exports.ed25519 = exports.RistrettoPoint = exports.ED25519_TORSION_SUBGROUP = void 0;\n  exports.edwardsToMontgomeryPriv = edwardsToMontgomeryPriv;\n  exports.edwardsToMontgomeryPub = edwardsToMontgomeryPub;\n  exports.x25519 = exports.ristretto255_hasher = exports.ristretto255 = exports.hash_to_ristretto255 = exports.hashToRistretto255 = exports.hashToCurve = exports.encodeToCurve = void 0;\n  var _sha = require(_dependencyMap[0], \"@noble/hashes/sha2.js\");\n  var _utils = require(_dependencyMap[1], \"@noble/hashes/utils.js\");\n  var _curve = require(_dependencyMap[2], \"./abstract/curve.js\");\n  var _edwards = require(_dependencyMap[3], \"./abstract/edwards.js\");\n  var _hashToCurve = require(_dependencyMap[4], \"./abstract/hash-to-curve.js\");\n  var _modular = require(_dependencyMap[5], \"./abstract/modular.js\");\n  var _montgomery = require(_dependencyMap[6], \"./abstract/montgomery.js\");\n  var _utils2 = require(_dependencyMap[7], \"./utils.js\");\n  /**\n   * ed25519 Twisted Edwards curve with following addons:\n   * - X25519 ECDH\n   * - Ristretto cofactor elimination\n   * - Elligator hash-to-group / point indistinguishability\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n  // prettier-ignore\n  const _0n = /* @__PURE__ */BigInt(0),\n    _1n = BigInt(1),\n    _2n = BigInt(2),\n    _3n = BigInt(3);\n  // prettier-ignore\n  const _5n = BigInt(5),\n    _8n = BigInt(8);\n  // P = 2n**255n-19n\n  const ed25519_CURVE_p = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed');\n  // N = 2n**252n + 27742317777372353535851937790883648493n\n  // a = Fp.create(BigInt(-1))\n  // d = -121665/121666 a.k.a. Fp.neg(121665 * Fp.inv(121666))\n  const ed25519_CURVE = /* @__PURE__ */(() => ({\n    p: ed25519_CURVE_p,\n    n: BigInt('0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed'),\n    h: _8n,\n    a: BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec'),\n    d: BigInt('0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3'),\n    Gx: BigInt('0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a'),\n    Gy: BigInt('0x6666666666666666666666666666666666666666666666666666666666666658')\n  }))();\n  function ed25519_pow_2_252_3(x) {\n    // prettier-ignore\n    const _10n = BigInt(10),\n      _20n = BigInt(20),\n      _40n = BigInt(40),\n      _80n = BigInt(80);\n    const P = ed25519_CURVE_p;\n    const x2 = x * x % P;\n    const b2 = x2 * x % P; // x^3, 11\n    const b4 = (0, _modular.pow2)(b2, _2n, P) * b2 % P; // x^15, 1111\n    const b5 = (0, _modular.pow2)(b4, _1n, P) * x % P; // x^31\n    const b10 = (0, _modular.pow2)(b5, _5n, P) * b5 % P;\n    const b20 = (0, _modular.pow2)(b10, _10n, P) * b10 % P;\n    const b40 = (0, _modular.pow2)(b20, _20n, P) * b20 % P;\n    const b80 = (0, _modular.pow2)(b40, _40n, P) * b40 % P;\n    const b160 = (0, _modular.pow2)(b80, _80n, P) * b80 % P;\n    const b240 = (0, _modular.pow2)(b160, _80n, P) * b80 % P;\n    const b250 = (0, _modular.pow2)(b240, _10n, P) * b10 % P;\n    const pow_p_5_8 = (0, _modular.pow2)(b250, _2n, P) * x % P;\n    // ^ To pow to (p+3)/8, multiply it by x.\n    return {\n      pow_p_5_8,\n      b2\n    };\n  }\n  function adjustScalarBytes(bytes) {\n    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n    // set the three least significant bits of the first byte\n    bytes[0] &= 248; // 0b1111_1000\n    // and the most significant bit of the last to zero,\n    bytes[31] &= 127; // 0b0111_1111\n    // set the second most significant bit of the last byte to 1\n    bytes[31] |= 64; // 0b0100_0000\n    return bytes;\n  }\n  // √(-1) aka √(a) aka 2^((p-1)/4)\n  // Fp.sqrt(Fp.neg(1))\n  const ED25519_SQRT_M1 = /* @__PURE__ */BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n  // sqrt(u/v)\n  function uvRatio(u, v) {\n    const P = ed25519_CURVE_p;\n    const v3 = (0, _modular.mod)(v * v * v, P); // v³\n    const v7 = (0, _modular.mod)(v3 * v3 * v, P); // v⁷\n    // (p+3)/8 and (p-5)/8\n    const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n    let x = (0, _modular.mod)(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n    const vx2 = (0, _modular.mod)(v * x * x, P); // vx²\n    const root1 = x; // First root candidate\n    const root2 = (0, _modular.mod)(x * ED25519_SQRT_M1, P); // Second root candidate\n    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n    const useRoot2 = vx2 === (0, _modular.mod)(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === (0, _modular.mod)(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n    if (useRoot1) x = root1;\n    if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n    if ((0, _modular.isNegativeLE)(x, P)) x = (0, _modular.mod)(-x, P);\n    return {\n      isValid: useRoot1 || useRoot2,\n      value: x\n    };\n  }\n  const Fp = /* @__PURE__ */(() => (0, _modular.Field)(ed25519_CURVE.p, {\n    isLE: true\n  }))();\n  const Fn = /* @__PURE__ */(() => (0, _modular.Field)(ed25519_CURVE.n, {\n    isLE: true\n  }))();\n  const ed25519Defaults = /* @__PURE__ */(() => ({\n    ...ed25519_CURVE,\n    Fp,\n    hash: _sha.sha512,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio\n  }))();\n  /**\n   * ed25519 curve with EdDSA signatures.\n   * @example\n   * import { ed25519 } from '@noble/curves/ed25519';\n   * const { secretKey, publicKey } = ed25519.keygen();\n   * const msg = new TextEncoder().encode('hello');\n   * const sig = ed25519.sign(msg, priv);\n   * ed25519.verify(sig, msg, pub); // Default mode: follows ZIP215\n   * ed25519.verify(sig, msg, pub, { zip215: false }); // RFC8032 / FIPS 186-5\n   */\n  const ed25519 = exports.ed25519 = /* @__PURE__ */(() => (0, _edwards.twistedEdwards)(ed25519Defaults))();\n  function ed25519_domain(data, ctx, phflag) {\n    if (ctx.length > 255) throw new Error('Context is too big');\n    return (0, _utils.concatBytes)((0, _utils.utf8ToBytes)('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n  }\n  /** Context of ed25519. Uses context for domain separation. */\n  const ed25519ctx = exports.ed25519ctx = /* @__PURE__ */(() => (0, _edwards.twistedEdwards)({\n    ...ed25519Defaults,\n    domain: ed25519_domain\n  }))();\n  /** Prehashed version of ed25519. Accepts already-hashed messages in sign() and verify(). */\n  const ed25519ph = exports.ed25519ph = /* @__PURE__ */(() => (0, _edwards.twistedEdwards)(Object.assign({}, ed25519Defaults, {\n    domain: ed25519_domain,\n    prehash: _sha.sha512\n  })))();\n  /**\n   * ECDH using curve25519 aka x25519.\n   * @example\n   * import { x25519 } from '@noble/curves/ed25519';\n   * const priv = 'a546e36bf0527c9d3b16154b82465edd62144c0ac1fc5a18506a2244ba449ac4';\n   * const pub = 'e6db6867583030db3594c1a424b15f7c726624ec26b3353b10a903a6d0ab1c4c';\n   * x25519.getSharedSecret(priv, pub) === x25519.scalarMult(priv, pub); // aliases\n   * x25519.getPublicKey(priv) === x25519.scalarMultBase(priv);\n   * x25519.getPublicKey(x25519.utils.randomSecretKey());\n   */\n  const x25519 = exports.x25519 = /* @__PURE__ */(() => {\n    const P = Fp.ORDER;\n    return (0, _montgomery.montgomery)({\n      P,\n      type: 'x25519',\n      powPminus2: x => {\n        // x^(p-2) aka x^(2^255-21)\n        const {\n          pow_p_5_8,\n          b2\n        } = ed25519_pow_2_252_3(x);\n        return (0, _modular.mod)((0, _modular.pow2)(pow_p_5_8, _3n, P) * b2, P);\n      },\n      adjustScalarBytes\n    });\n  })();\n  // Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n  // NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n  // SageMath returns different root first and everything falls apart\n  const ELL2_C1 = /* @__PURE__ */(() => (ed25519_CURVE_p + _3n) / _8n)(); // 1. c1 = (q + 3) / 8       # Integer arithmetic\n  const ELL2_C2 = /* @__PURE__ */(() => Fp.pow(_2n, ELL2_C1))(); // 2. c2 = 2^c1\n  const ELL2_C3 = /* @__PURE__ */(() => Fp.sqrt(Fp.neg(Fp.ONE)))(); // 3. c3 = sqrt(-1)\n  // prettier-ignore\n  function map_to_curve_elligator2_curve25519(u) {\n    const ELL2_C4 = (ed25519_CURVE_p - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic\n    const ELL2_J = BigInt(486662);\n    let tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n    let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n    let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n    let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n    let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n    let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n    gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n    gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n    gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n    let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n    tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n    tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n    tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n    tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n    let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n    y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n    let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n    tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n    tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n    let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n    let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n    let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n    let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n    y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n    let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n    let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n    tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n    tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n    let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n    let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n    tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n    tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n    let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n    let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n    let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n    let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n    y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n    return {\n      xMn: xn,\n      xMd: xd,\n      yMn: y,\n      yMd: _1n\n    }; //  39. return (xn, xd, y, 1)\n  }\n  const ELL2_C1_EDWARDS = /* @__PURE__ */(() => (0, _modular.FpSqrtEven)(Fp, Fp.neg(BigInt(486664))))(); // sgn0(c1) MUST equal 0\n  function map_to_curve_elligator2_edwards25519(u) {\n    const {\n      xMn,\n      xMd,\n      yMn,\n      yMd\n    } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n    // map_to_curve_elligator2_curve25519(u)\n    let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n    xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n    let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n    let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n    let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n    let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n    let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n    xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n    xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n    yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n    yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n    const [xd_inv, yd_inv] = (0, _modular.FpInvertBatch)(Fp, [xd, yd], true); // batch division\n    return {\n      x: Fp.mul(xn, xd_inv),\n      y: Fp.mul(yn, yd_inv)\n    }; //  13. return (xn, xd, yn, yd)\n  }\n  /** Hashing to ed25519 points / field. RFC 9380 methods. */\n  const ed25519_hasher = exports.ed25519_hasher = /* @__PURE__ */(() => (0, _hashToCurve.createHasher)(ed25519.Point, scalars => map_to_curve_elligator2_edwards25519(scalars[0]), {\n    DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n    encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n    p: ed25519_CURVE_p,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: _sha.sha512\n  }))();\n  // √(-1) aka √(a) aka 2^((p-1)/4)\n  const SQRT_M1 = ED25519_SQRT_M1;\n  // √(ad - 1)\n  const SQRT_AD_MINUS_ONE = /* @__PURE__ */BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n  // 1 / √(a-d)\n  const INVSQRT_A_MINUS_D = /* @__PURE__ */BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n  // 1-d²\n  const ONE_MINUS_D_SQ = /* @__PURE__ */BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n  // (d-1)²\n  const D_MINUS_ONE_SQ = /* @__PURE__ */BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n  // Calculates 1/√(number)\n  const invertSqrt = number => uvRatio(_1n, number);\n  const MAX_255B = /* @__PURE__ */BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n  const bytes255ToNumberLE = bytes => ed25519.Point.Fp.create((0, _utils2.bytesToNumberLE)(bytes) & MAX_255B);\n  /**\n   * Computes Elligator map for Ristretto255.\n   * Described in [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#appendix-B) and on\n   * the [website](https://ristretto.group/formulas/elligator.html).\n   */\n  function calcElligatorRistrettoMap(r0) {\n    const {\n      d\n    } = ed25519_CURVE;\n    const P = ed25519_CURVE_p;\n    const mod = n => Fp.create(n);\n    const r = mod(SQRT_M1 * r0 * r0); // 1\n    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n    let c = BigInt(-1); // 3\n    const D = mod((c - d * r) * mod(r + d)); // 4\n    let {\n      isValid: Ns_D_is_sq,\n      value: s\n    } = uvRatio(Ns, D); // 5\n    let s_ = mod(s * r0); // 6\n    if (!(0, _modular.isNegativeLE)(s_, P)) s_ = mod(-s_);\n    if (!Ns_D_is_sq) s = s_; // 7\n    if (!Ns_D_is_sq) c = r; // 8\n    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n    const s2 = s * s;\n    const W0 = mod((s + s) * D); // 10\n    const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n    const W2 = mod(_1n - s2); // 12\n    const W3 = mod(_1n + s2); // 13\n    return new ed25519.Point(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n  }\n  function ristretto255_map(bytes) {\n    (0, _utils.abytes)(bytes, 64);\n    const r1 = bytes255ToNumberLE(bytes.subarray(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(bytes.subarray(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new _RistrettoPoint(R1.add(R2));\n  }\n  /**\n   * Wrapper over Edwards Point for ristretto255.\n   *\n   * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n   * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n   * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n   * but it should work in its own namespace: do not combine those two.\n   * See [RFC9496](https://www.rfc-editor.org/rfc/rfc9496).\n   */\n  class _RistrettoPoint extends _edwards.PrimeEdwardsPoint {\n    constructor(ep) {\n      super(ep);\n    }\n    static fromAffine(ap) {\n      return new _RistrettoPoint(ed25519.Point.fromAffine(ap));\n    }\n    assertSame(other) {\n      if (!(other instanceof _RistrettoPoint)) throw new Error('RistrettoPoint expected');\n    }\n    init(ep) {\n      return new _RistrettoPoint(ep);\n    }\n    /** @deprecated use `import { ristretto255_hasher } from '@noble/curves/ed25519.js';` */\n    static hashToCurve(hex) {\n      return ristretto255_map((0, _utils2.ensureBytes)('ristrettoHash', hex, 64));\n    }\n    static fromBytes(bytes) {\n      (0, _utils.abytes)(bytes, 32);\n      const {\n        a,\n        d\n      } = ed25519_CURVE;\n      const P = ed25519_CURVE_p;\n      const mod = n => Fp.create(n);\n      const s = bytes255ToNumberLE(bytes);\n      // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n      // 3. Check that s is non-negative, or else abort\n      if (!(0, _utils2.equalBytes)(Fp.toBytes(s), bytes) || (0, _modular.isNegativeLE)(s, P)) throw new Error('invalid ristretto255 encoding 1');\n      const s2 = mod(s * s);\n      const u1 = mod(_1n + a * s2); // 4 (a is -1)\n      const u2 = mod(_1n - a * s2); // 5\n      const u1_2 = mod(u1 * u1);\n      const u2_2 = mod(u2 * u2);\n      const v = mod(a * d * u1_2 - u2_2); // 6\n      const {\n        isValid,\n        value: I\n      } = invertSqrt(mod(v * u2_2)); // 7\n      const Dx = mod(I * u2); // 8\n      const Dy = mod(I * Dx * v); // 9\n      let x = mod((s + s) * Dx); // 10\n      if ((0, _modular.isNegativeLE)(x, P)) x = mod(-x); // 10\n      const y = mod(u1 * Dy); // 11\n      const t = mod(x * y); // 12\n      if (!isValid || (0, _modular.isNegativeLE)(t, P) || y === _0n) throw new Error('invalid ristretto255 encoding 2');\n      return new _RistrettoPoint(new ed25519.Point(x, y, _1n, t));\n    }\n    /**\n     * Converts ristretto-encoded string to ristretto point.\n     * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-decode).\n     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n     */\n    static fromHex(hex) {\n      return _RistrettoPoint.fromBytes((0, _utils2.ensureBytes)('ristrettoHex', hex, 32));\n    }\n    static msm(points, scalars) {\n      return (0, _curve.pippenger)(_RistrettoPoint, ed25519.Point.Fn, points, scalars);\n    }\n    /**\n     * Encodes ristretto point to Uint8Array.\n     * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-encode).\n     */\n    toBytes() {\n      let {\n        X,\n        Y,\n        Z,\n        T\n      } = this.ep;\n      const P = ed25519_CURVE_p;\n      const mod = n => Fp.create(n);\n      const u1 = mod(mod(Z + Y) * mod(Z - Y)); // 1\n      const u2 = mod(X * Y); // 2\n      // Square root always exists\n      const u2sq = mod(u2 * u2);\n      const {\n        value: invsqrt\n      } = invertSqrt(mod(u1 * u2sq)); // 3\n      const D1 = mod(invsqrt * u1); // 4\n      const D2 = mod(invsqrt * u2); // 5\n      const zInv = mod(D1 * D2 * T); // 6\n      let D; // 7\n      if ((0, _modular.isNegativeLE)(T * zInv, P)) {\n        let _x = mod(Y * SQRT_M1);\n        let _y = mod(X * SQRT_M1);\n        X = _x;\n        Y = _y;\n        D = mod(D1 * INVSQRT_A_MINUS_D);\n      } else {\n        D = D2; // 8\n      }\n      if ((0, _modular.isNegativeLE)(X * zInv, P)) Y = mod(-Y); // 9\n      let s = mod((Z - Y) * D); // 10 (check footer's note, no sqrt(-a))\n      if ((0, _modular.isNegativeLE)(s, P)) s = mod(-s);\n      return Fp.toBytes(s); // 11\n    }\n    /**\n     * Compares two Ristretto points.\n     * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-equals).\n     */\n    equals(other) {\n      this.assertSame(other);\n      const {\n        X: X1,\n        Y: Y1\n      } = this.ep;\n      const {\n        X: X2,\n        Y: Y2\n      } = other.ep;\n      const mod = n => Fp.create(n);\n      // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n      const one = mod(X1 * Y2) === mod(Y1 * X2);\n      const two = mod(Y1 * Y2) === mod(X1 * X2);\n      return one || two;\n    }\n    is0() {\n      return this.equals(_RistrettoPoint.ZERO);\n    }\n  }\n  // Do NOT change syntax: the following gymnastics is done,\n  // because typescript strips comments, which makes bundlers disable tree-shaking.\n  // prettier-ignore\n  _RistrettoPoint.BASE = /* @__PURE__ */(() => new _RistrettoPoint(ed25519.Point.BASE))();\n  // prettier-ignore\n  _RistrettoPoint.ZERO = /* @__PURE__ */(() => new _RistrettoPoint(ed25519.Point.ZERO))();\n  // prettier-ignore\n  _RistrettoPoint.Fp = /* @__PURE__ */(() => Fp)();\n  // prettier-ignore\n  _RistrettoPoint.Fn = /* @__PURE__ */(() => Fn)();\n  const ristretto255 = exports.ristretto255 = {\n    Point: _RistrettoPoint\n  };\n  /** Hashing to ristretto255 points / field. RFC 9380 methods. */\n  const ristretto255_hasher = exports.ristretto255_hasher = {\n    hashToCurve(msg, options) {\n      const DST = options?.DST || 'ristretto255_XMD:SHA-512_R255MAP_RO_';\n      const xmd = (0, _hashToCurve.expand_message_xmd)(msg, DST, 64, _sha.sha512);\n      return ristretto255_map(xmd);\n    },\n    hashToScalar(msg, options = {\n      DST: _hashToCurve._DST_scalar\n    }) {\n      const xmd = (0, _hashToCurve.expand_message_xmd)(msg, options.DST, 64, _sha.sha512);\n      return Fn.create((0, _utils2.bytesToNumberLE)(xmd));\n    }\n  };\n  // export const ristretto255_oprf: OPRF = createORPF({\n  //   name: 'ristretto255-SHA512',\n  //   Point: RistrettoPoint,\n  //   hash: sha512,\n  //   hashToGroup: ristretto255_hasher.hashToCurve,\n  //   hashToScalar: ristretto255_hasher.hashToScalar,\n  // });\n  /**\n   * Weird / bogus points, useful for debugging.\n   * All 8 ed25519 points of 8-torsion subgroup can be generated from the point\n   * T = `26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05`.\n   * ⟨T⟩ = { O, T, 2T, 3T, 4T, 5T, 6T, 7T }\n   */\n  const ED25519_TORSION_SUBGROUP = exports.ED25519_TORSION_SUBGROUP = ['0100000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a', '0000000000000000000000000000000000000000000000000000000000000080', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05', 'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85', '0000000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa'];\n  /** @deprecated use `ed25519.utils.toMontgomery` */\n  function edwardsToMontgomeryPub(edwardsPub) {\n    return ed25519.utils.toMontgomery((0, _utils2.ensureBytes)('pub', edwardsPub));\n  }\n  /** @deprecated use `ed25519.utils.toMontgomery` */\n  const edwardsToMontgomery = exports.edwardsToMontgomery = edwardsToMontgomeryPub;\n  /** @deprecated use `ed25519.utils.toMontgomerySecret` */\n  function edwardsToMontgomeryPriv(edwardsPriv) {\n    return ed25519.utils.toMontgomerySecret((0, _utils2.ensureBytes)('pub', edwardsPriv));\n  }\n  /** @deprecated use `ristretto255.Point` */\n  const RistrettoPoint = exports.RistrettoPoint = _RistrettoPoint;\n  /** @deprecated use `import { ed25519_hasher } from '@noble/curves/ed25519.js';` */\n  const hashToCurve = exports.hashToCurve = /* @__PURE__ */(() => ed25519_hasher.hashToCurve)();\n  /** @deprecated use `import { ed25519_hasher } from '@noble/curves/ed25519.js';` */\n  const encodeToCurve = exports.encodeToCurve = /* @__PURE__ */(() => ed25519_hasher.encodeToCurve)();\n  /** @deprecated use `import { ristretto255_hasher } from '@noble/curves/ed25519.js';` */\n  const hashToRistretto255 = exports.hashToRistretto255 = /* @__PURE__ */(() => ristretto255_hasher.hashToCurve)();\n  /** @deprecated use `import { ristretto255_hasher } from '@noble/curves/ed25519.js';` */\n  const hash_to_ristretto255 = exports.hash_to_ristretto255 = /* @__PURE__ */(() => ristretto255_hasher.hashToCurve)();\n});","lineCount":510,"map":[[9,2,9,0],[9,6,9,0,"_sha"],[9,10,9,0],[9,13,9,0,"require"],[9,20,9,0],[9,21,9,0,"_dependencyMap"],[9,35,9,0],[10,2,10,0],[10,6,10,0,"_utils"],[10,12,10,0],[10,15,10,0,"require"],[10,22,10,0],[10,23,10,0,"_dependencyMap"],[10,37,10,0],[11,2,11,0],[11,6,11,0,"_curve"],[11,12,11,0],[11,15,11,0,"require"],[11,22,11,0],[11,23,11,0,"_dependencyMap"],[11,37,11,0],[12,2,12,0],[12,6,12,0,"_edwards"],[12,14,12,0],[12,17,12,0,"require"],[12,24,12,0],[12,25,12,0,"_dependencyMap"],[12,39,12,0],[13,2,13,0],[13,6,13,0,"_hashToCurve"],[13,18,13,0],[13,21,13,0,"require"],[13,28,13,0],[13,29,13,0,"_dependencyMap"],[13,43,13,0],[14,2,14,0],[14,6,14,0,"_modular"],[14,14,14,0],[14,17,14,0,"require"],[14,24,14,0],[14,25,14,0,"_dependencyMap"],[14,39,14,0],[15,2,15,0],[15,6,15,0,"_montgomery"],[15,17,15,0],[15,20,15,0,"require"],[15,27,15,0],[15,28,15,0,"_dependencyMap"],[15,42,15,0],[16,2,16,0],[16,6,16,0,"_utils2"],[16,13,16,0],[16,16,16,0,"require"],[16,23,16,0],[16,24,16,0,"_dependencyMap"],[16,38,16,0],[17,2,1,0],[18,0,2,0],[19,0,3,0],[20,0,4,0],[21,0,5,0],[22,0,6,0],[23,0,7,0],[24,2,8,0],[26,2,17,0],[27,2,18,0],[27,8,18,6,"_0n"],[27,11,18,9],[27,14,18,12],[27,29,18,28,"BigInt"],[27,35,18,34],[27,36,18,35],[27,37,18,36],[27,38,18,37],[28,4,18,39,"_1n"],[28,7,18,42],[28,10,18,45,"BigInt"],[28,16,18,51],[28,17,18,52],[28,18,18,53],[28,19,18,54],[29,4,18,56,"_2n"],[29,7,18,59],[29,10,18,62,"BigInt"],[29,16,18,68],[29,17,18,69],[29,18,18,70],[29,19,18,71],[30,4,18,73,"_3n"],[30,7,18,76],[30,10,18,79,"BigInt"],[30,16,18,85],[30,17,18,86],[30,18,18,87],[30,19,18,88],[31,2,19,0],[32,2,20,0],[32,8,20,6,"_5n"],[32,11,20,9],[32,14,20,12,"BigInt"],[32,20,20,18],[32,21,20,19],[32,22,20,20],[32,23,20,21],[33,4,20,23,"_8n"],[33,7,20,26],[33,10,20,29,"BigInt"],[33,16,20,35],[33,17,20,36],[33,18,20,37],[33,19,20,38],[34,2,21,0],[35,2,22,0],[35,8,22,6,"ed25519_CURVE_p"],[35,23,22,21],[35,26,22,24,"BigInt"],[35,32,22,30],[35,33,22,31],[35,101,22,99],[35,102,22,100],[36,2,23,0],[37,2,24,0],[38,2,25,0],[39,2,26,0],[39,8,26,6,"ed25519_CURVE"],[39,21,26,19],[39,24,26,22],[39,39,26,38],[39,40,26,39],[39,47,26,46],[40,4,27,4,"p"],[40,5,27,5],[40,7,27,7,"ed25519_CURVE_p"],[40,22,27,22],[41,4,28,4,"n"],[41,5,28,5],[41,7,28,7,"BigInt"],[41,13,28,13],[41,14,28,14],[41,82,28,82],[41,83,28,83],[42,4,29,4,"h"],[42,5,29,5],[42,7,29,7,"_8n"],[42,10,29,10],[43,4,30,4,"a"],[43,5,30,5],[43,7,30,7,"BigInt"],[43,13,30,13],[43,14,30,14],[43,82,30,82],[43,83,30,83],[44,4,31,4,"d"],[44,5,31,5],[44,7,31,7,"BigInt"],[44,13,31,13],[44,14,31,14],[44,82,31,82],[44,83,31,83],[45,4,32,4,"Gx"],[45,6,32,6],[45,8,32,8,"BigInt"],[45,14,32,14],[45,15,32,15],[45,83,32,83],[45,84,32,84],[46,4,33,4,"Gy"],[46,6,33,6],[46,8,33,8,"BigInt"],[46,14,33,14],[46,15,33,15],[46,83,33,83],[47,2,34,0],[47,3,34,1],[47,4,34,2],[47,6,34,4],[47,7,34,5],[48,2,35,0],[48,11,35,9,"ed25519_pow_2_252_3"],[48,30,35,28,"ed25519_pow_2_252_3"],[48,31,35,29,"x"],[48,32,35,30],[48,34,35,32],[49,4,36,4],[50,4,37,4],[50,10,37,10,"_10n"],[50,14,37,14],[50,17,37,17,"BigInt"],[50,23,37,23],[50,24,37,24],[50,26,37,26],[50,27,37,27],[51,6,37,29,"_20n"],[51,10,37,33],[51,13,37,36,"BigInt"],[51,19,37,42],[51,20,37,43],[51,22,37,45],[51,23,37,46],[52,6,37,48,"_40n"],[52,10,37,52],[52,13,37,55,"BigInt"],[52,19,37,61],[52,20,37,62],[52,22,37,64],[52,23,37,65],[53,6,37,67,"_80n"],[53,10,37,71],[53,13,37,74,"BigInt"],[53,19,37,80],[53,20,37,81],[53,22,37,83],[53,23,37,84],[54,4,38,4],[54,10,38,10,"P"],[54,11,38,11],[54,14,38,14,"ed25519_CURVE_p"],[54,29,38,29],[55,4,39,4],[55,10,39,10,"x2"],[55,12,39,12],[55,15,39,16,"x"],[55,16,39,17],[55,19,39,20,"x"],[55,20,39,21],[55,23,39,25,"P"],[55,24,39,26],[56,4,40,4],[56,10,40,10,"b2"],[56,12,40,12],[56,15,40,16,"x2"],[56,17,40,18],[56,20,40,21,"x"],[56,21,40,22],[56,24,40,26,"P"],[56,25,40,27],[56,26,40,28],[56,27,40,29],[57,4,41,4],[57,10,41,10,"b4"],[57,12,41,12],[57,15,41,16],[57,19,41,16,"pow2"],[57,32,41,20],[57,34,41,21,"b2"],[57,36,41,23],[57,38,41,25,"_2n"],[57,41,41,28],[57,43,41,30,"P"],[57,44,41,31],[57,45,41,32],[57,48,41,35,"b2"],[57,50,41,37],[57,53,41,41,"P"],[57,54,41,42],[57,55,41,43],[57,56,41,44],[58,4,42,4],[58,10,42,10,"b5"],[58,12,42,12],[58,15,42,16],[58,19,42,16,"pow2"],[58,32,42,20],[58,34,42,21,"b4"],[58,36,42,23],[58,38,42,25,"_1n"],[58,41,42,28],[58,43,42,30,"P"],[58,44,42,31],[58,45,42,32],[58,48,42,35,"x"],[58,49,42,36],[58,52,42,40,"P"],[58,53,42,41],[58,54,42,42],[58,55,42,43],[59,4,43,4],[59,10,43,10,"b10"],[59,13,43,13],[59,16,43,17],[59,20,43,17,"pow2"],[59,33,43,21],[59,35,43,22,"b5"],[59,37,43,24],[59,39,43,26,"_5n"],[59,42,43,29],[59,44,43,31,"P"],[59,45,43,32],[59,46,43,33],[59,49,43,36,"b5"],[59,51,43,38],[59,54,43,42,"P"],[59,55,43,43],[60,4,44,4],[60,10,44,10,"b20"],[60,13,44,13],[60,16,44,17],[60,20,44,17,"pow2"],[60,33,44,21],[60,35,44,22,"b10"],[60,38,44,25],[60,40,44,27,"_10n"],[60,44,44,31],[60,46,44,33,"P"],[60,47,44,34],[60,48,44,35],[60,51,44,38,"b10"],[60,54,44,41],[60,57,44,45,"P"],[60,58,44,46],[61,4,45,4],[61,10,45,10,"b40"],[61,13,45,13],[61,16,45,17],[61,20,45,17,"pow2"],[61,33,45,21],[61,35,45,22,"b20"],[61,38,45,25],[61,40,45,27,"_20n"],[61,44,45,31],[61,46,45,33,"P"],[61,47,45,34],[61,48,45,35],[61,51,45,38,"b20"],[61,54,45,41],[61,57,45,45,"P"],[61,58,45,46],[62,4,46,4],[62,10,46,10,"b80"],[62,13,46,13],[62,16,46,17],[62,20,46,17,"pow2"],[62,33,46,21],[62,35,46,22,"b40"],[62,38,46,25],[62,40,46,27,"_40n"],[62,44,46,31],[62,46,46,33,"P"],[62,47,46,34],[62,48,46,35],[62,51,46,38,"b40"],[62,54,46,41],[62,57,46,45,"P"],[62,58,46,46],[63,4,47,4],[63,10,47,10,"b160"],[63,14,47,14],[63,17,47,18],[63,21,47,18,"pow2"],[63,34,47,22],[63,36,47,23,"b80"],[63,39,47,26],[63,41,47,28,"_80n"],[63,45,47,32],[63,47,47,34,"P"],[63,48,47,35],[63,49,47,36],[63,52,47,39,"b80"],[63,55,47,42],[63,58,47,46,"P"],[63,59,47,47],[64,4,48,4],[64,10,48,10,"b240"],[64,14,48,14],[64,17,48,18],[64,21,48,18,"pow2"],[64,34,48,22],[64,36,48,23,"b160"],[64,40,48,27],[64,42,48,29,"_80n"],[64,46,48,33],[64,48,48,35,"P"],[64,49,48,36],[64,50,48,37],[64,53,48,40,"b80"],[64,56,48,43],[64,59,48,47,"P"],[64,60,48,48],[65,4,49,4],[65,10,49,10,"b250"],[65,14,49,14],[65,17,49,18],[65,21,49,18,"pow2"],[65,34,49,22],[65,36,49,23,"b240"],[65,40,49,27],[65,42,49,29,"_10n"],[65,46,49,33],[65,48,49,35,"P"],[65,49,49,36],[65,50,49,37],[65,53,49,40,"b10"],[65,56,49,43],[65,59,49,47,"P"],[65,60,49,48],[66,4,50,4],[66,10,50,10,"pow_p_5_8"],[66,19,50,19],[66,22,50,23],[66,26,50,23,"pow2"],[66,39,50,27],[66,41,50,28,"b250"],[66,45,50,32],[66,47,50,34,"_2n"],[66,50,50,37],[66,52,50,39,"P"],[66,53,50,40],[66,54,50,41],[66,57,50,44,"x"],[66,58,50,45],[66,61,50,49,"P"],[66,62,50,50],[67,4,51,4],[68,4,52,4],[68,11,52,11],[69,6,52,13,"pow_p_5_8"],[69,15,52,22],[70,6,52,24,"b2"],[71,4,52,27],[71,5,52,28],[72,2,53,0],[73,2,54,0],[73,11,54,9,"adjustScalarBytes"],[73,28,54,26,"adjustScalarBytes"],[73,29,54,27,"bytes"],[73,34,54,32],[73,36,54,34],[74,4,55,4],[75,4,56,4],[76,4,57,4,"bytes"],[76,9,57,9],[76,10,57,10],[76,11,57,11],[76,12,57,12],[76,16,57,16],[76,19,57,19],[76,20,57,20],[76,21,57,21],[77,4,58,4],[78,4,59,4,"bytes"],[78,9,59,9],[78,10,59,10],[78,12,59,12],[78,13,59,13],[78,17,59,17],[78,20,59,20],[78,21,59,21],[78,22,59,22],[79,4,60,4],[80,4,61,4,"bytes"],[80,9,61,9],[80,10,61,10],[80,12,61,12],[80,13,61,13],[80,17,61,17],[80,19,61,19],[80,20,61,20],[80,21,61,21],[81,4,62,4],[81,11,62,11,"bytes"],[81,16,62,16],[82,2,63,0],[83,2,64,0],[84,2,65,0],[85,2,66,0],[85,8,66,6,"ED25519_SQRT_M1"],[85,23,66,21],[85,26,66,24],[85,41,66,40,"BigInt"],[85,47,66,46],[85,48,66,47],[85,127,66,126],[85,128,66,127],[86,2,67,0],[87,2,68,0],[87,11,68,9,"uvRatio"],[87,18,68,16,"uvRatio"],[87,19,68,17,"u"],[87,20,68,18],[87,22,68,20,"v"],[87,23,68,21],[87,25,68,23],[88,4,69,4],[88,10,69,10,"P"],[88,11,69,11],[88,14,69,14,"ed25519_CURVE_p"],[88,29,69,29],[89,4,70,4],[89,10,70,10,"v3"],[89,12,70,12],[89,15,70,15],[89,19,70,15,"mod"],[89,31,70,18],[89,33,70,19,"v"],[89,34,70,20],[89,37,70,23,"v"],[89,38,70,24],[89,41,70,27,"v"],[89,42,70,28],[89,44,70,30,"P"],[89,45,70,31],[89,46,70,32],[89,47,70,33],[89,48,70,34],[90,4,71,4],[90,10,71,10,"v7"],[90,12,71,12],[90,15,71,15],[90,19,71,15,"mod"],[90,31,71,18],[90,33,71,19,"v3"],[90,35,71,21],[90,38,71,24,"v3"],[90,40,71,26],[90,43,71,29,"v"],[90,44,71,30],[90,46,71,32,"P"],[90,47,71,33],[90,48,71,34],[90,49,71,35],[90,50,71,36],[91,4,72,4],[92,4,73,4],[92,10,73,10,"pow"],[92,13,73,13],[92,16,73,16,"ed25519_pow_2_252_3"],[92,35,73,35],[92,36,73,36,"u"],[92,37,73,37],[92,40,73,40,"v7"],[92,42,73,42],[92,43,73,43],[92,44,73,44,"pow_p_5_8"],[92,53,73,53],[93,4,74,4],[93,8,74,8,"x"],[93,9,74,9],[93,12,74,12],[93,16,74,12,"mod"],[93,28,74,15],[93,30,74,16,"u"],[93,31,74,17],[93,34,74,20,"v3"],[93,36,74,22],[93,39,74,25,"pow"],[93,42,74,28],[93,44,74,30,"P"],[93,45,74,31],[93,46,74,32],[93,47,74,33],[93,48,74,34],[94,4,75,4],[94,10,75,10,"vx2"],[94,13,75,13],[94,16,75,16],[94,20,75,16,"mod"],[94,32,75,19],[94,34,75,20,"v"],[94,35,75,21],[94,38,75,24,"x"],[94,39,75,25],[94,42,75,28,"x"],[94,43,75,29],[94,45,75,31,"P"],[94,46,75,32],[94,47,75,33],[94,48,75,34],[94,49,75,35],[95,4,76,4],[95,10,76,10,"root1"],[95,15,76,15],[95,18,76,18,"x"],[95,19,76,19],[95,20,76,20],[95,21,76,21],[96,4,77,4],[96,10,77,10,"root2"],[96,15,77,15],[96,18,77,18],[96,22,77,18,"mod"],[96,34,77,21],[96,36,77,22,"x"],[96,37,77,23],[96,40,77,26,"ED25519_SQRT_M1"],[96,55,77,41],[96,57,77,43,"P"],[96,58,77,44],[96,59,77,45],[96,60,77,46],[96,61,77,47],[97,4,78,4],[97,10,78,10,"useRoot1"],[97,18,78,18],[97,21,78,21,"vx2"],[97,24,78,24],[97,29,78,29,"u"],[97,30,78,30],[97,31,78,31],[97,32,78,32],[98,4,79,4],[98,10,79,10,"useRoot2"],[98,18,79,18],[98,21,79,21,"vx2"],[98,24,79,24],[98,29,79,29],[98,33,79,29,"mod"],[98,45,79,32],[98,47,79,33],[98,48,79,34,"u"],[98,49,79,35],[98,51,79,37,"P"],[98,52,79,38],[98,53,79,39],[98,54,79,40],[98,55,79,41],[99,4,80,4],[99,10,80,10,"noRoot"],[99,16,80,16],[99,19,80,19,"vx2"],[99,22,80,22],[99,27,80,27],[99,31,80,27,"mod"],[99,43,80,30],[99,45,80,31],[99,46,80,32,"u"],[99,47,80,33],[99,50,80,36,"ED25519_SQRT_M1"],[99,65,80,51],[99,67,80,53,"P"],[99,68,80,54],[99,69,80,55],[99,70,80,56],[99,71,80,57],[100,4,81,4],[100,8,81,8,"useRoot1"],[100,16,81,16],[100,18,82,8,"x"],[100,19,82,9],[100,22,82,12,"root1"],[100,27,82,17],[101,4,83,4],[101,8,83,8,"useRoot2"],[101,16,83,16],[101,20,83,20,"noRoot"],[101,26,83,26],[101,28,84,8,"x"],[101,29,84,9],[101,32,84,12,"root2"],[101,37,84,17],[101,38,84,18],[101,39,84,19],[102,4,85,4],[102,8,85,8],[102,12,85,8,"isNegativeLE"],[102,33,85,20],[102,35,85,21,"x"],[102,36,85,22],[102,38,85,24,"P"],[102,39,85,25],[102,40,85,26],[102,42,86,8,"x"],[102,43,86,9],[102,46,86,12],[102,50,86,12,"mod"],[102,62,86,15],[102,64,86,16],[102,65,86,17,"x"],[102,66,86,18],[102,68,86,20,"P"],[102,69,86,21],[102,70,86,22],[103,4,87,4],[103,11,87,11],[104,6,87,13,"isValid"],[104,13,87,20],[104,15,87,22,"useRoot1"],[104,23,87,30],[104,27,87,34,"useRoot2"],[104,35,87,42],[105,6,87,44,"value"],[105,11,87,49],[105,13,87,51,"x"],[106,4,87,53],[106,5,87,54],[107,2,88,0],[108,2,89,0],[108,8,89,6,"Fp"],[108,10,89,8],[108,13,89,11],[108,28,89,27],[108,29,89,28],[108,35,89,34],[108,39,89,34,"Field"],[108,53,89,39],[108,55,89,40,"ed25519_CURVE"],[108,68,89,53],[108,69,89,54,"p"],[108,70,89,55],[108,72,89,57],[109,4,89,59,"isLE"],[109,8,89,63],[109,10,89,65],[110,2,89,70],[110,3,89,71],[110,4,89,72],[110,6,89,74],[110,7,89,75],[111,2,90,0],[111,8,90,6,"Fn"],[111,10,90,8],[111,13,90,11],[111,28,90,27],[111,29,90,28],[111,35,90,34],[111,39,90,34,"Field"],[111,53,90,39],[111,55,90,40,"ed25519_CURVE"],[111,68,90,53],[111,69,90,54,"n"],[111,70,90,55],[111,72,90,57],[112,4,90,59,"isLE"],[112,8,90,63],[112,10,90,65],[113,2,90,70],[113,3,90,71],[113,4,90,72],[113,6,90,74],[113,7,90,75],[114,2,91,0],[114,8,91,6,"ed25519Defaults"],[114,23,91,21],[114,26,91,24],[114,41,91,40],[114,42,91,41],[114,49,91,48],[115,4,92,4],[115,7,92,7,"ed25519_CURVE"],[115,20,92,20],[116,4,93,4,"Fp"],[116,6,93,6],[117,4,94,4,"hash"],[117,8,94,8],[117,10,94,10,"sha512"],[117,21,94,16],[118,4,95,4,"adjustScalarBytes"],[118,21,95,21],[119,4,96,4],[120,4,97,4],[121,4,98,4],[122,4,99,4,"uvRatio"],[123,2,100,0],[123,3,100,1],[123,4,100,2],[123,6,100,4],[123,7,100,5],[124,2,101,0],[125,0,102,0],[126,0,103,0],[127,0,104,0],[128,0,105,0],[129,0,106,0],[130,0,107,0],[131,0,108,0],[132,0,109,0],[133,0,110,0],[134,2,111,7],[134,8,111,13,"ed25519"],[134,15,111,20],[134,18,111,20,"exports"],[134,25,111,20],[134,26,111,20,"ed25519"],[134,33,111,20],[134,36,111,23],[134,51,111,39],[134,52,111,40],[134,58,111,46],[134,62,111,46,"twistedEdwards"],[134,85,111,60],[134,87,111,61,"ed25519Defaults"],[134,102,111,76],[134,103,111,77],[134,105,111,79],[134,106,111,80],[135,2,112,0],[135,11,112,9,"ed25519_domain"],[135,25,112,23,"ed25519_domain"],[135,26,112,24,"data"],[135,30,112,28],[135,32,112,30,"ctx"],[135,35,112,33],[135,37,112,35,"phflag"],[135,43,112,41],[135,45,112,43],[136,4,113,4],[136,8,113,8,"ctx"],[136,11,113,11],[136,12,113,12,"length"],[136,18,113,18],[136,21,113,21],[136,24,113,24],[136,26,114,8],[136,32,114,14],[136,36,114,18,"Error"],[136,41,114,23],[136,42,114,24],[136,62,114,44],[136,63,114,45],[137,4,115,4],[137,11,115,11],[137,15,115,11,"concatBytes"],[137,33,115,22],[137,35,115,23],[137,39,115,23,"utf8ToBytes"],[137,57,115,34],[137,59,115,35],[137,93,115,69],[137,94,115,70],[137,96,115,72],[137,100,115,76,"Uint8Array"],[137,110,115,86],[137,111,115,87],[137,112,115,88,"phflag"],[137,118,115,94],[137,121,115,97],[137,122,115,98],[137,125,115,101],[137,126,115,102],[137,128,115,104,"ctx"],[137,131,115,107],[137,132,115,108,"length"],[137,138,115,114],[137,139,115,115],[137,140,115,116],[137,142,115,118,"ctx"],[137,145,115,121],[137,147,115,123,"data"],[137,151,115,127],[137,152,115,128],[138,2,116,0],[139,2,117,0],[140,2,118,7],[140,8,118,13,"ed25519ctx"],[140,18,118,23],[140,21,118,23,"exports"],[140,28,118,23],[140,29,118,23,"ed25519ctx"],[140,39,118,23],[140,42,118,26],[140,57,118,42],[140,58,118,43],[140,64,118,49],[140,68,118,49,"twistedEdwards"],[140,91,118,63],[140,93,118,64],[141,4,119,4],[141,7,119,7,"ed25519Defaults"],[141,22,119,22],[142,4,120,4,"domain"],[142,10,120,10],[142,12,120,12,"ed25519_domain"],[143,2,121,0],[143,3,121,1],[143,4,121,2],[143,6,121,4],[143,7,121,5],[144,2,122,0],[145,2,123,7],[145,8,123,13,"ed25519ph"],[145,17,123,22],[145,20,123,22,"exports"],[145,27,123,22],[145,28,123,22,"ed25519ph"],[145,37,123,22],[145,40,123,25],[145,55,123,41],[145,56,123,42],[145,62,123,48],[145,66,123,48,"twistedEdwards"],[145,89,123,62],[145,91,123,63,"Object"],[145,97,123,69],[145,98,123,70,"assign"],[145,104,123,76],[145,105,123,77],[145,106,123,78],[145,107,123,79],[145,109,123,81,"ed25519Defaults"],[145,124,123,96],[145,126,123,98],[146,4,124,4,"domain"],[146,10,124,10],[146,12,124,12,"ed25519_domain"],[146,26,124,26],[147,4,125,4,"prehash"],[147,11,125,11],[147,13,125,13,"sha512"],[148,2,126,0],[148,3,126,1],[148,4,126,2],[148,5,126,3],[148,7,126,5],[148,8,126,6],[149,2,127,0],[150,0,128,0],[151,0,129,0],[152,0,130,0],[153,0,131,0],[154,0,132,0],[155,0,133,0],[156,0,134,0],[157,0,135,0],[158,0,136,0],[159,2,137,7],[159,8,137,13,"x25519"],[159,14,137,19],[159,17,137,19,"exports"],[159,24,137,19],[159,25,137,19,"x25519"],[159,31,137,19],[159,34,137,22],[159,49,137,38],[159,50,137,39],[159,56,137,45],[160,4,138,4],[160,10,138,10,"P"],[160,11,138,11],[160,14,138,14,"Fp"],[160,16,138,16],[160,17,138,17,"ORDER"],[160,22,138,22],[161,4,139,4],[161,11,139,11],[161,15,139,11,"montgomery"],[161,37,139,21],[161,39,139,22],[162,6,140,8,"P"],[162,7,140,9],[163,6,141,8,"type"],[163,10,141,12],[163,12,141,14],[163,20,141,22],[164,6,142,8,"powPminus2"],[164,16,142,18],[164,18,142,21,"x"],[164,19,142,22],[164,23,142,27],[165,8,143,12],[166,8,144,12],[166,14,144,18],[167,10,144,20,"pow_p_5_8"],[167,19,144,29],[168,10,144,31,"b2"],[169,8,144,34],[169,9,144,35],[169,12,144,38,"ed25519_pow_2_252_3"],[169,31,144,57],[169,32,144,58,"x"],[169,33,144,59],[169,34,144,60],[170,8,145,12],[170,15,145,19],[170,19,145,19,"mod"],[170,31,145,22],[170,33,145,23],[170,37,145,23,"pow2"],[170,50,145,27],[170,52,145,28,"pow_p_5_8"],[170,61,145,37],[170,63,145,39,"_3n"],[170,66,145,42],[170,68,145,44,"P"],[170,69,145,45],[170,70,145,46],[170,73,145,49,"b2"],[170,75,145,51],[170,77,145,53,"P"],[170,78,145,54],[170,79,145,55],[171,6,146,8],[171,7,146,9],[172,6,147,8,"adjustScalarBytes"],[173,4,148,4],[173,5,148,5],[173,6,148,6],[174,2,149,0],[174,3,149,1],[174,5,149,3],[174,6,149,4],[175,2,150,0],[176,2,151,0],[177,2,152,0],[178,2,153,0],[178,8,153,6,"ELL2_C1"],[178,15,153,13],[178,18,153,16],[178,33,153,32],[178,34,153,33],[178,40,153,39],[178,41,153,40,"ed25519_CURVE_p"],[178,56,153,55],[178,59,153,58,"_3n"],[178,62,153,61],[178,66,153,65,"_8n"],[178,69,153,68],[178,71,153,70],[178,72,153,71],[178,73,153,72],[178,74,153,73],[179,2,154,0],[179,8,154,6,"ELL2_C2"],[179,15,154,13],[179,18,154,16],[179,33,154,32],[179,34,154,33],[179,40,154,39,"Fp"],[179,42,154,41],[179,43,154,42,"pow"],[179,46,154,45],[179,47,154,46,"_2n"],[179,50,154,49],[179,52,154,51,"ELL2_C1"],[179,59,154,58],[179,60,154,59],[179,62,154,61],[179,63,154,62],[179,64,154,63],[179,65,154,64],[180,2,155,0],[180,8,155,6,"ELL2_C3"],[180,15,155,13],[180,18,155,16],[180,33,155,32],[180,34,155,33],[180,40,155,39,"Fp"],[180,42,155,41],[180,43,155,42,"sqrt"],[180,47,155,46],[180,48,155,47,"Fp"],[180,50,155,49],[180,51,155,50,"neg"],[180,54,155,53],[180,55,155,54,"Fp"],[180,57,155,56],[180,58,155,57,"ONE"],[180,61,155,60],[180,62,155,61],[180,63,155,62],[180,65,155,64],[180,66,155,65],[180,67,155,66],[180,68,155,67],[181,2,156,0],[182,2,157,0],[182,11,157,9,"map_to_curve_elligator2_curve25519"],[182,45,157,43,"map_to_curve_elligator2_curve25519"],[182,46,157,44,"u"],[182,47,157,45],[182,49,157,47],[183,4,158,4],[183,10,158,10,"ELL2_C4"],[183,17,158,17],[183,20,158,20],[183,21,158,21,"ed25519_CURVE_p"],[183,36,158,36],[183,39,158,39,"_5n"],[183,42,158,42],[183,46,158,46,"_8n"],[183,49,158,49],[183,50,158,50],[183,51,158,51],[184,4,159,4],[184,10,159,10,"ELL2_J"],[184,16,159,16],[184,19,159,19,"BigInt"],[184,25,159,25],[184,26,159,26],[184,32,159,32],[184,33,159,33],[185,4,160,4],[185,8,160,8,"tv1"],[185,11,160,11],[185,14,160,14,"Fp"],[185,16,160,16],[185,17,160,17,"sqr"],[185,20,160,20],[185,21,160,21,"u"],[185,22,160,22],[185,23,160,23],[185,24,160,24],[185,25,160,25],[186,4,161,4,"tv1"],[186,7,161,7],[186,10,161,10,"Fp"],[186,12,161,12],[186,13,161,13,"mul"],[186,16,161,16],[186,17,161,17,"tv1"],[186,20,161,20],[186,22,161,22,"_2n"],[186,25,161,25],[186,26,161,26],[186,27,161,27],[186,28,161,28],[187,4,162,4],[187,8,162,8,"xd"],[187,10,162,10],[187,13,162,13,"Fp"],[187,15,162,15],[187,16,162,16,"add"],[187,19,162,19],[187,20,162,20,"tv1"],[187,23,162,23],[187,25,162,25,"Fp"],[187,27,162,27],[187,28,162,28,"ONE"],[187,31,162,31],[187,32,162,32],[187,33,162,33],[187,34,162,34],[188,4,163,4],[188,8,163,8,"x1n"],[188,11,163,11],[188,14,163,14,"Fp"],[188,16,163,16],[188,17,163,17,"neg"],[188,20,163,20],[188,21,163,21,"ELL2_J"],[188,27,163,27],[188,28,163,28],[188,29,163,29],[188,30,163,30],[189,4,164,4],[189,8,164,8,"tv2"],[189,11,164,11],[189,14,164,14,"Fp"],[189,16,164,16],[189,17,164,17,"sqr"],[189,20,164,20],[189,21,164,21,"xd"],[189,23,164,23],[189,24,164,24],[189,25,164,25],[189,26,164,26],[190,4,165,4],[190,8,165,8,"gxd"],[190,11,165,11],[190,14,165,14,"Fp"],[190,16,165,16],[190,17,165,17,"mul"],[190,20,165,20],[190,21,165,21,"tv2"],[190,24,165,24],[190,26,165,26,"xd"],[190,28,165,28],[190,29,165,29],[190,30,165,30],[190,31,165,31],[191,4,166,4],[191,8,166,8,"gx1"],[191,11,166,11],[191,14,166,14,"Fp"],[191,16,166,16],[191,17,166,17,"mul"],[191,20,166,20],[191,21,166,21,"tv1"],[191,24,166,24],[191,26,166,26,"ELL2_J"],[191,32,166,32],[191,33,166,33],[191,34,166,34],[191,35,166,35],[192,4,167,4,"gx1"],[192,7,167,7],[192,10,167,10,"Fp"],[192,12,167,12],[192,13,167,13,"mul"],[192,16,167,16],[192,17,167,17,"gx1"],[192,20,167,20],[192,22,167,22,"x1n"],[192,25,167,25],[192,26,167,26],[192,27,167,27],[192,28,167,28],[193,4,168,4,"gx1"],[193,7,168,7],[193,10,168,10,"Fp"],[193,12,168,12],[193,13,168,13,"add"],[193,16,168,16],[193,17,168,17,"gx1"],[193,20,168,20],[193,22,168,22,"tv2"],[193,25,168,25],[193,26,168,26],[193,27,168,27],[193,28,168,28],[194,4,169,4,"gx1"],[194,7,169,7],[194,10,169,10,"Fp"],[194,12,169,12],[194,13,169,13,"mul"],[194,16,169,16],[194,17,169,17,"gx1"],[194,20,169,20],[194,22,169,22,"x1n"],[194,25,169,25],[194,26,169,26],[194,27,169,27],[194,28,169,28],[195,4,170,4],[195,8,170,8,"tv3"],[195,11,170,11],[195,14,170,14,"Fp"],[195,16,170,16],[195,17,170,17,"sqr"],[195,20,170,20],[195,21,170,21,"gxd"],[195,24,170,24],[195,25,170,25],[195,26,170,26],[195,27,170,27],[196,4,171,4,"tv2"],[196,7,171,7],[196,10,171,10,"Fp"],[196,12,171,12],[196,13,171,13,"sqr"],[196,16,171,16],[196,17,171,17,"tv3"],[196,20,171,20],[196,21,171,21],[196,22,171,22],[196,23,171,23],[197,4,172,4,"tv3"],[197,7,172,7],[197,10,172,10,"Fp"],[197,12,172,12],[197,13,172,13,"mul"],[197,16,172,16],[197,17,172,17,"tv3"],[197,20,172,20],[197,22,172,22,"gxd"],[197,25,172,25],[197,26,172,26],[197,27,172,27],[197,28,172,28],[198,4,173,4,"tv3"],[198,7,173,7],[198,10,173,10,"Fp"],[198,12,173,12],[198,13,173,13,"mul"],[198,16,173,16],[198,17,173,17,"tv3"],[198,20,173,20],[198,22,173,22,"gx1"],[198,25,173,25],[198,26,173,26],[198,27,173,27],[198,28,173,28],[199,4,174,4,"tv2"],[199,7,174,7],[199,10,174,10,"Fp"],[199,12,174,12],[199,13,174,13,"mul"],[199,16,174,16],[199,17,174,17,"tv2"],[199,20,174,20],[199,22,174,22,"tv3"],[199,25,174,25],[199,26,174,26],[199,27,174,27],[199,28,174,28],[200,4,175,4],[200,8,175,8,"y11"],[200,11,175,11],[200,14,175,14,"Fp"],[200,16,175,16],[200,17,175,17,"pow"],[200,20,175,20],[200,21,175,21,"tv2"],[200,24,175,24],[200,26,175,26,"ELL2_C4"],[200,33,175,33],[200,34,175,34],[200,35,175,35],[200,36,175,36],[201,4,176,4,"y11"],[201,7,176,7],[201,10,176,10,"Fp"],[201,12,176,12],[201,13,176,13,"mul"],[201,16,176,16],[201,17,176,17,"y11"],[201,20,176,20],[201,22,176,22,"tv3"],[201,25,176,25],[201,26,176,26],[201,27,176,27],[201,28,176,28],[202,4,177,4],[202,8,177,8,"y12"],[202,11,177,11],[202,14,177,14,"Fp"],[202,16,177,16],[202,17,177,17,"mul"],[202,20,177,20],[202,21,177,21,"y11"],[202,24,177,24],[202,26,177,26,"ELL2_C3"],[202,33,177,33],[202,34,177,34],[202,35,177,35],[202,36,177,36],[203,4,178,4,"tv2"],[203,7,178,7],[203,10,178,10,"Fp"],[203,12,178,12],[203,13,178,13,"sqr"],[203,16,178,16],[203,17,178,17,"y11"],[203,20,178,20],[203,21,178,21],[203,22,178,22],[203,23,178,23],[204,4,179,4,"tv2"],[204,7,179,7],[204,10,179,10,"Fp"],[204,12,179,12],[204,13,179,13,"mul"],[204,16,179,16],[204,17,179,17,"tv2"],[204,20,179,20],[204,22,179,22,"gxd"],[204,25,179,25],[204,26,179,26],[204,27,179,27],[204,28,179,28],[205,4,180,4],[205,8,180,8,"e1"],[205,10,180,10],[205,13,180,13,"Fp"],[205,15,180,15],[205,16,180,16,"eql"],[205,19,180,19],[205,20,180,20,"tv2"],[205,23,180,23],[205,25,180,25,"gx1"],[205,28,180,28],[205,29,180,29],[205,30,180,30],[205,31,180,31],[206,4,181,4],[206,8,181,8,"y1"],[206,10,181,10],[206,13,181,13,"Fp"],[206,15,181,15],[206,16,181,16,"cmov"],[206,20,181,20],[206,21,181,21,"y12"],[206,24,181,24],[206,26,181,26,"y11"],[206,29,181,29],[206,31,181,31,"e1"],[206,33,181,33],[206,34,181,34],[206,35,181,35],[206,36,181,36],[207,4,182,4],[207,8,182,8,"x2n"],[207,11,182,11],[207,14,182,14,"Fp"],[207,16,182,16],[207,17,182,17,"mul"],[207,20,182,20],[207,21,182,21,"x1n"],[207,24,182,24],[207,26,182,26,"tv1"],[207,29,182,29],[207,30,182,30],[207,31,182,31],[207,32,182,32],[208,4,183,4],[208,8,183,8,"y21"],[208,11,183,11],[208,14,183,14,"Fp"],[208,16,183,16],[208,17,183,17,"mul"],[208,20,183,20],[208,21,183,21,"y11"],[208,24,183,24],[208,26,183,26,"u"],[208,27,183,27],[208,28,183,28],[208,29,183,29],[208,30,183,30],[209,4,184,4,"y21"],[209,7,184,7],[209,10,184,10,"Fp"],[209,12,184,12],[209,13,184,13,"mul"],[209,16,184,16],[209,17,184,17,"y21"],[209,20,184,20],[209,22,184,22,"ELL2_C2"],[209,29,184,29],[209,30,184,30],[209,31,184,31],[209,32,184,32],[210,4,185,4],[210,8,185,8,"y22"],[210,11,185,11],[210,14,185,14,"Fp"],[210,16,185,16],[210,17,185,17,"mul"],[210,20,185,20],[210,21,185,21,"y21"],[210,24,185,24],[210,26,185,26,"ELL2_C3"],[210,33,185,33],[210,34,185,34],[210,35,185,35],[210,36,185,36],[211,4,186,4],[211,8,186,8,"gx2"],[211,11,186,11],[211,14,186,14,"Fp"],[211,16,186,16],[211,17,186,17,"mul"],[211,20,186,20],[211,21,186,21,"gx1"],[211,24,186,24],[211,26,186,26,"tv1"],[211,29,186,29],[211,30,186,30],[211,31,186,31],[211,32,186,32],[212,4,187,4,"tv2"],[212,7,187,7],[212,10,187,10,"Fp"],[212,12,187,12],[212,13,187,13,"sqr"],[212,16,187,16],[212,17,187,17,"y21"],[212,20,187,20],[212,21,187,21],[212,22,187,22],[212,23,187,23],[213,4,188,4,"tv2"],[213,7,188,7],[213,10,188,10,"Fp"],[213,12,188,12],[213,13,188,13,"mul"],[213,16,188,16],[213,17,188,17,"tv2"],[213,20,188,20],[213,22,188,22,"gxd"],[213,25,188,25],[213,26,188,26],[213,27,188,27],[213,28,188,28],[214,4,189,4],[214,8,189,8,"e2"],[214,10,189,10],[214,13,189,13,"Fp"],[214,15,189,15],[214,16,189,16,"eql"],[214,19,189,19],[214,20,189,20,"tv2"],[214,23,189,23],[214,25,189,25,"gx2"],[214,28,189,28],[214,29,189,29],[214,30,189,30],[214,31,189,31],[215,4,190,4],[215,8,190,8,"y2"],[215,10,190,10],[215,13,190,13,"Fp"],[215,15,190,15],[215,16,190,16,"cmov"],[215,20,190,20],[215,21,190,21,"y22"],[215,24,190,24],[215,26,190,26,"y21"],[215,29,190,29],[215,31,190,31,"e2"],[215,33,190,33],[215,34,190,34],[215,35,190,35],[215,36,190,36],[216,4,191,4,"tv2"],[216,7,191,7],[216,10,191,10,"Fp"],[216,12,191,12],[216,13,191,13,"sqr"],[216,16,191,16],[216,17,191,17,"y1"],[216,19,191,19],[216,20,191,20],[216,21,191,21],[216,22,191,22],[217,4,192,4,"tv2"],[217,7,192,7],[217,10,192,10,"Fp"],[217,12,192,12],[217,13,192,13,"mul"],[217,16,192,16],[217,17,192,17,"tv2"],[217,20,192,20],[217,22,192,22,"gxd"],[217,25,192,25],[217,26,192,26],[217,27,192,27],[217,28,192,28],[218,4,193,4],[218,8,193,8,"e3"],[218,10,193,10],[218,13,193,13,"Fp"],[218,15,193,15],[218,16,193,16,"eql"],[218,19,193,19],[218,20,193,20,"tv2"],[218,23,193,23],[218,25,193,25,"gx1"],[218,28,193,28],[218,29,193,29],[218,30,193,30],[218,31,193,31],[219,4,194,4],[219,8,194,8,"xn"],[219,10,194,10],[219,13,194,13,"Fp"],[219,15,194,15],[219,16,194,16,"cmov"],[219,20,194,20],[219,21,194,21,"x2n"],[219,24,194,24],[219,26,194,26,"x1n"],[219,29,194,29],[219,31,194,31,"e3"],[219,33,194,33],[219,34,194,34],[219,35,194,35],[219,36,194,36],[220,4,195,4],[220,8,195,8,"y"],[220,9,195,9],[220,12,195,12,"Fp"],[220,14,195,14],[220,15,195,15,"cmov"],[220,19,195,19],[220,20,195,20,"y2"],[220,22,195,22],[220,24,195,24,"y1"],[220,26,195,26],[220,28,195,28,"e3"],[220,30,195,30],[220,31,195,31],[220,32,195,32],[220,33,195,33],[221,4,196,4],[221,8,196,8,"e4"],[221,10,196,10],[221,13,196,13,"Fp"],[221,15,196,15],[221,16,196,16,"isOdd"],[221,21,196,21],[221,22,196,22,"y"],[221,23,196,23],[221,24,196,24],[221,25,196,25],[221,26,196,26],[222,4,197,4,"y"],[222,5,197,5],[222,8,197,8,"Fp"],[222,10,197,10],[222,11,197,11,"cmov"],[222,15,197,15],[222,16,197,16,"y"],[222,17,197,17],[222,19,197,19,"Fp"],[222,21,197,21],[222,22,197,22,"neg"],[222,25,197,25],[222,26,197,26,"y"],[222,27,197,27],[222,28,197,28],[222,30,197,30,"e3"],[222,32,197,32],[222,37,197,37,"e4"],[222,39,197,39],[222,40,197,40],[222,41,197,41],[222,42,197,42],[223,4,198,4],[223,11,198,11],[224,6,198,13,"xMn"],[224,9,198,16],[224,11,198,18,"xn"],[224,13,198,20],[225,6,198,22,"xMd"],[225,9,198,25],[225,11,198,27,"xd"],[225,13,198,29],[226,6,198,31,"yMn"],[226,9,198,34],[226,11,198,36,"y"],[226,12,198,37],[227,6,198,39,"yMd"],[227,9,198,42],[227,11,198,44,"_1n"],[228,4,198,48],[228,5,198,49],[228,6,198,50],[228,7,198,51],[229,2,199,0],[230,2,200,0],[230,8,200,6,"ELL2_C1_EDWARDS"],[230,23,200,21],[230,26,200,24],[230,41,200,40],[230,42,200,41],[230,48,200,47],[230,52,200,47,"FpSqrtEven"],[230,71,200,57],[230,73,200,58,"Fp"],[230,75,200,60],[230,77,200,62,"Fp"],[230,79,200,64],[230,80,200,65,"neg"],[230,83,200,68],[230,84,200,69,"BigInt"],[230,90,200,75],[230,91,200,76],[230,97,200,82],[230,98,200,83],[230,99,200,84],[230,100,200,85],[230,102,200,87],[230,103,200,88],[230,104,200,89],[230,105,200,90],[231,2,201,0],[231,11,201,9,"map_to_curve_elligator2_edwards25519"],[231,47,201,45,"map_to_curve_elligator2_edwards25519"],[231,48,201,46,"u"],[231,49,201,47],[231,51,201,49],[232,4,202,4],[232,10,202,10],[233,6,202,12,"xMn"],[233,9,202,15],[234,6,202,17,"xMd"],[234,9,202,20],[235,6,202,22,"yMn"],[235,9,202,25],[236,6,202,27,"yMd"],[237,4,202,31],[237,5,202,32],[237,8,202,35,"map_to_curve_elligator2_curve25519"],[237,42,202,69],[237,43,202,70,"u"],[237,44,202,71],[237,45,202,72],[237,46,202,73],[237,47,202,74],[238,4,203,4],[239,4,204,4],[239,8,204,8,"xn"],[239,10,204,10],[239,13,204,13,"Fp"],[239,15,204,15],[239,16,204,16,"mul"],[239,19,204,19],[239,20,204,20,"xMn"],[239,23,204,23],[239,25,204,25,"yMd"],[239,28,204,28],[239,29,204,29],[239,30,204,30],[239,31,204,31],[240,4,205,4,"xn"],[240,6,205,6],[240,9,205,9,"Fp"],[240,11,205,11],[240,12,205,12,"mul"],[240,15,205,15],[240,16,205,16,"xn"],[240,18,205,18],[240,20,205,20,"ELL2_C1_EDWARDS"],[240,35,205,35],[240,36,205,36],[240,37,205,37],[240,38,205,38],[241,4,206,4],[241,8,206,8,"xd"],[241,10,206,10],[241,13,206,13,"Fp"],[241,15,206,15],[241,16,206,16,"mul"],[241,19,206,19],[241,20,206,20,"xMd"],[241,23,206,23],[241,25,206,25,"yMn"],[241,28,206,28],[241,29,206,29],[241,30,206,30],[241,31,206,31],[242,4,207,4],[242,8,207,8,"yn"],[242,10,207,10],[242,13,207,13,"Fp"],[242,15,207,15],[242,16,207,16,"sub"],[242,19,207,19],[242,20,207,20,"xMn"],[242,23,207,23],[242,25,207,25,"xMd"],[242,28,207,28],[242,29,207,29],[242,30,207,30],[242,31,207,31],[243,4,208,4],[243,8,208,8,"yd"],[243,10,208,10],[243,13,208,13,"Fp"],[243,15,208,15],[243,16,208,16,"add"],[243,19,208,19],[243,20,208,20,"xMn"],[243,23,208,23],[243,25,208,25,"xMd"],[243,28,208,28],[243,29,208,29],[243,30,208,30],[243,31,208,31],[244,4,209,4],[244,8,209,8,"tv1"],[244,11,209,11],[244,14,209,14,"Fp"],[244,16,209,16],[244,17,209,17,"mul"],[244,20,209,20],[244,21,209,21,"xd"],[244,23,209,23],[244,25,209,25,"yd"],[244,27,209,27],[244,28,209,28],[244,29,209,29],[244,30,209,30],[245,4,210,4],[245,8,210,8,"e"],[245,9,210,9],[245,12,210,12,"Fp"],[245,14,210,14],[245,15,210,15,"eql"],[245,18,210,18],[245,19,210,19,"tv1"],[245,22,210,22],[245,24,210,24,"Fp"],[245,26,210,26],[245,27,210,27,"ZERO"],[245,31,210,31],[245,32,210,32],[245,33,210,33],[245,34,210,34],[246,4,211,4,"xn"],[246,6,211,6],[246,9,211,9,"Fp"],[246,11,211,11],[246,12,211,12,"cmov"],[246,16,211,16],[246,17,211,17,"xn"],[246,19,211,19],[246,21,211,21,"Fp"],[246,23,211,23],[246,24,211,24,"ZERO"],[246,28,211,28],[246,30,211,30,"e"],[246,31,211,31],[246,32,211,32],[246,33,211,33],[246,34,211,34],[247,4,212,4,"xd"],[247,6,212,6],[247,9,212,9,"Fp"],[247,11,212,11],[247,12,212,12,"cmov"],[247,16,212,16],[247,17,212,17,"xd"],[247,19,212,19],[247,21,212,21,"Fp"],[247,23,212,23],[247,24,212,24,"ONE"],[247,27,212,27],[247,29,212,29,"e"],[247,30,212,30],[247,31,212,31],[247,32,212,32],[247,33,212,33],[248,4,213,4,"yn"],[248,6,213,6],[248,9,213,9,"Fp"],[248,11,213,11],[248,12,213,12,"cmov"],[248,16,213,16],[248,17,213,17,"yn"],[248,19,213,19],[248,21,213,21,"Fp"],[248,23,213,23],[248,24,213,24,"ONE"],[248,27,213,27],[248,29,213,29,"e"],[248,30,213,30],[248,31,213,31],[248,32,213,32],[248,33,213,33],[249,4,214,4,"yd"],[249,6,214,6],[249,9,214,9,"Fp"],[249,11,214,11],[249,12,214,12,"cmov"],[249,16,214,16],[249,17,214,17,"yd"],[249,19,214,19],[249,21,214,21,"Fp"],[249,23,214,23],[249,24,214,24,"ONE"],[249,27,214,27],[249,29,214,29,"e"],[249,30,214,30],[249,31,214,31],[249,32,214,32],[249,33,214,33],[250,4,215,4],[250,10,215,10],[250,11,215,11,"xd_inv"],[250,17,215,17],[250,19,215,19,"yd_inv"],[250,25,215,25],[250,26,215,26],[250,29,215,29],[250,33,215,29,"FpInvertBatch"],[250,55,215,42],[250,57,215,43,"Fp"],[250,59,215,45],[250,61,215,47],[250,62,215,48,"xd"],[250,64,215,50],[250,66,215,52,"yd"],[250,68,215,54],[250,69,215,55],[250,71,215,57],[250,75,215,61],[250,76,215,62],[250,77,215,63],[250,78,215,64],[251,4,216,4],[251,11,216,11],[252,6,216,13,"x"],[252,7,216,14],[252,9,216,16,"Fp"],[252,11,216,18],[252,12,216,19,"mul"],[252,15,216,22],[252,16,216,23,"xn"],[252,18,216,25],[252,20,216,27,"xd_inv"],[252,26,216,33],[252,27,216,34],[253,6,216,36,"y"],[253,7,216,37],[253,9,216,39,"Fp"],[253,11,216,41],[253,12,216,42,"mul"],[253,15,216,45],[253,16,216,46,"yn"],[253,18,216,48],[253,20,216,50,"yd_inv"],[253,26,216,56],[254,4,216,58],[254,5,216,59],[254,6,216,60],[254,7,216,61],[255,2,217,0],[256,2,218,0],[257,2,219,7],[257,8,219,13,"ed25519_hasher"],[257,22,219,27],[257,25,219,27,"exports"],[257,32,219,27],[257,33,219,27,"ed25519_hasher"],[257,47,219,27],[257,50,219,30],[257,65,219,46],[257,66,219,47],[257,72,219,53],[257,76,219,53,"createHasher"],[257,101,219,65],[257,103,219,66,"ed25519"],[257,110,219,73],[257,111,219,74,"Point"],[257,116,219,79],[257,118,219,82,"scalars"],[257,125,219,89],[257,129,219,94,"map_to_curve_elligator2_edwards25519"],[257,165,219,130],[257,166,219,131,"scalars"],[257,173,219,138],[257,174,219,139],[257,175,219,140],[257,176,219,141],[257,177,219,142],[257,179,219,144],[258,4,220,4,"DST"],[258,7,220,7],[258,9,220,9],[258,44,220,44],[259,4,221,4,"encodeDST"],[259,13,221,13],[259,15,221,15],[259,50,221,50],[260,4,222,4,"p"],[260,5,222,5],[260,7,222,7,"ed25519_CURVE_p"],[260,22,222,22],[261,4,223,4,"m"],[261,5,223,5],[261,7,223,7],[261,8,223,8],[262,4,224,4,"k"],[262,5,224,5],[262,7,224,7],[262,10,224,10],[263,4,225,4,"expand"],[263,10,225,10],[263,12,225,12],[263,17,225,17],[264,4,226,4,"hash"],[264,8,226,8],[264,10,226,10,"sha512"],[265,2,227,0],[265,3,227,1],[265,4,227,2],[265,6,227,4],[265,7,227,5],[266,2,228,0],[267,2,229,0],[267,8,229,6,"SQRT_M1"],[267,15,229,13],[267,18,229,16,"ED25519_SQRT_M1"],[267,33,229,31],[268,2,230,0],[269,2,231,0],[269,8,231,6,"SQRT_AD_MINUS_ONE"],[269,25,231,23],[269,28,231,26],[269,43,231,42,"BigInt"],[269,49,231,48],[269,50,231,49],[269,129,231,128],[269,130,231,129],[270,2,232,0],[271,2,233,0],[271,8,233,6,"INVSQRT_A_MINUS_D"],[271,25,233,23],[271,28,233,26],[271,43,233,42,"BigInt"],[271,49,233,48],[271,50,233,49],[271,129,233,128],[271,130,233,129],[272,2,234,0],[273,2,235,0],[273,8,235,6,"ONE_MINUS_D_SQ"],[273,22,235,20],[273,25,235,23],[273,40,235,39,"BigInt"],[273,46,235,45],[273,47,235,46],[273,125,235,124],[273,126,235,125],[274,2,236,0],[275,2,237,0],[275,8,237,6,"D_MINUS_ONE_SQ"],[275,22,237,20],[275,25,237,23],[275,40,237,39,"BigInt"],[275,46,237,45],[275,47,237,46],[275,126,237,125],[275,127,237,126],[276,2,238,0],[277,2,239,0],[277,8,239,6,"invertSqrt"],[277,18,239,16],[277,21,239,20,"number"],[277,27,239,26],[277,31,239,31,"uvRatio"],[277,38,239,38],[277,39,239,39,"_1n"],[277,42,239,42],[277,44,239,44,"number"],[277,50,239,50],[277,51,239,51],[278,2,240,0],[278,8,240,6,"MAX_255B"],[278,16,240,14],[278,19,240,17],[278,34,240,33,"BigInt"],[278,40,240,39],[278,41,240,40],[278,109,240,108],[278,110,240,109],[279,2,241,0],[279,8,241,6,"bytes255ToNumberLE"],[279,26,241,24],[279,29,241,28,"bytes"],[279,34,241,33],[279,38,241,38,"ed25519"],[279,45,241,45],[279,46,241,46,"Point"],[279,51,241,51],[279,52,241,52,"Fp"],[279,54,241,54],[279,55,241,55,"create"],[279,61,241,61],[279,62,241,62],[279,66,241,62,"bytesToNumberLE"],[279,89,241,77],[279,91,241,78,"bytes"],[279,96,241,83],[279,97,241,84],[279,100,241,87,"MAX_255B"],[279,108,241,95],[279,109,241,96],[280,2,242,0],[281,0,243,0],[282,0,244,0],[283,0,245,0],[284,0,246,0],[285,2,247,0],[285,11,247,9,"calcElligatorRistrettoMap"],[285,36,247,34,"calcElligatorRistrettoMap"],[285,37,247,35,"r0"],[285,39,247,37],[285,41,247,39],[286,4,248,4],[286,10,248,10],[287,6,248,12,"d"],[288,4,248,14],[288,5,248,15],[288,8,248,18,"ed25519_CURVE"],[288,21,248,31],[289,4,249,4],[289,10,249,10,"P"],[289,11,249,11],[289,14,249,14,"ed25519_CURVE_p"],[289,29,249,29],[290,4,250,4],[290,10,250,10,"mod"],[290,13,250,13],[290,16,250,17,"n"],[290,17,250,18],[290,21,250,23,"Fp"],[290,23,250,25],[290,24,250,26,"create"],[290,30,250,32],[290,31,250,33,"n"],[290,32,250,34],[290,33,250,35],[291,4,251,4],[291,10,251,10,"r"],[291,11,251,11],[291,14,251,14,"mod"],[291,17,251,17],[291,18,251,18,"SQRT_M1"],[291,25,251,25],[291,28,251,28,"r0"],[291,30,251,30],[291,33,251,33,"r0"],[291,35,251,35],[291,36,251,36],[291,37,251,37],[291,38,251,38],[292,4,252,4],[292,10,252,10,"Ns"],[292,12,252,12],[292,15,252,15,"mod"],[292,18,252,18],[292,19,252,19],[292,20,252,20,"r"],[292,21,252,21],[292,24,252,24,"_1n"],[292,27,252,27],[292,31,252,31,"ONE_MINUS_D_SQ"],[292,45,252,45],[292,46,252,46],[292,47,252,47],[292,48,252,48],[293,4,253,4],[293,8,253,8,"c"],[293,9,253,9],[293,12,253,12,"BigInt"],[293,18,253,18],[293,19,253,19],[293,20,253,20],[293,21,253,21],[293,22,253,22],[293,23,253,23],[293,24,253,24],[294,4,254,4],[294,10,254,10,"D"],[294,11,254,11],[294,14,254,14,"mod"],[294,17,254,17],[294,18,254,18],[294,19,254,19,"c"],[294,20,254,20],[294,23,254,23,"d"],[294,24,254,24],[294,27,254,27,"r"],[294,28,254,28],[294,32,254,32,"mod"],[294,35,254,35],[294,36,254,36,"r"],[294,37,254,37],[294,40,254,40,"d"],[294,41,254,41],[294,42,254,42],[294,43,254,43],[294,44,254,44],[294,45,254,45],[295,4,255,4],[295,8,255,8],[296,6,255,10,"isValid"],[296,13,255,17],[296,15,255,19,"Ns_D_is_sq"],[296,25,255,29],[297,6,255,31,"value"],[297,11,255,36],[297,13,255,38,"s"],[298,4,255,40],[298,5,255,41],[298,8,255,44,"uvRatio"],[298,15,255,51],[298,16,255,52,"Ns"],[298,18,255,54],[298,20,255,56,"D"],[298,21,255,57],[298,22,255,58],[298,23,255,59],[298,24,255,60],[299,4,256,4],[299,8,256,8,"s_"],[299,10,256,10],[299,13,256,13,"mod"],[299,16,256,16],[299,17,256,17,"s"],[299,18,256,18],[299,21,256,21,"r0"],[299,23,256,23],[299,24,256,24],[299,25,256,25],[299,26,256,26],[300,4,257,4],[300,8,257,8],[300,9,257,9],[300,13,257,9,"isNegativeLE"],[300,34,257,21],[300,36,257,22,"s_"],[300,38,257,24],[300,40,257,26,"P"],[300,41,257,27],[300,42,257,28],[300,44,258,8,"s_"],[300,46,258,10],[300,49,258,13,"mod"],[300,52,258,16],[300,53,258,17],[300,54,258,18,"s_"],[300,56,258,20],[300,57,258,21],[301,4,259,4],[301,8,259,8],[301,9,259,9,"Ns_D_is_sq"],[301,19,259,19],[301,21,260,8,"s"],[301,22,260,9],[301,25,260,12,"s_"],[301,27,260,14],[301,28,260,15],[301,29,260,16],[302,4,261,4],[302,8,261,8],[302,9,261,9,"Ns_D_is_sq"],[302,19,261,19],[302,21,262,8,"c"],[302,22,262,9],[302,25,262,12,"r"],[302,26,262,13],[302,27,262,14],[302,28,262,15],[303,4,263,4],[303,10,263,10,"Nt"],[303,12,263,12],[303,15,263,15,"mod"],[303,18,263,18],[303,19,263,19,"c"],[303,20,263,20],[303,24,263,24,"r"],[303,25,263,25],[303,28,263,28,"_1n"],[303,31,263,31],[303,32,263,32],[303,35,263,35,"D_MINUS_ONE_SQ"],[303,49,263,49],[303,52,263,52,"D"],[303,53,263,53],[303,54,263,54],[303,55,263,55],[303,56,263,56],[304,4,264,4],[304,10,264,10,"s2"],[304,12,264,12],[304,15,264,15,"s"],[304,16,264,16],[304,19,264,19,"s"],[304,20,264,20],[305,4,265,4],[305,10,265,10,"W0"],[305,12,265,12],[305,15,265,15,"mod"],[305,18,265,18],[305,19,265,19],[305,20,265,20,"s"],[305,21,265,21],[305,24,265,24,"s"],[305,25,265,25],[305,29,265,29,"D"],[305,30,265,30],[305,31,265,31],[305,32,265,32],[305,33,265,33],[306,4,266,4],[306,10,266,10,"W1"],[306,12,266,12],[306,15,266,15,"mod"],[306,18,266,18],[306,19,266,19,"Nt"],[306,21,266,21],[306,24,266,24,"SQRT_AD_MINUS_ONE"],[306,41,266,41],[306,42,266,42],[306,43,266,43],[306,44,266,44],[307,4,267,4],[307,10,267,10,"W2"],[307,12,267,12],[307,15,267,15,"mod"],[307,18,267,18],[307,19,267,19,"_1n"],[307,22,267,22],[307,25,267,25,"s2"],[307,27,267,27],[307,28,267,28],[307,29,267,29],[307,30,267,30],[308,4,268,4],[308,10,268,10,"W3"],[308,12,268,12],[308,15,268,15,"mod"],[308,18,268,18],[308,19,268,19,"_1n"],[308,22,268,22],[308,25,268,25,"s2"],[308,27,268,27],[308,28,268,28],[308,29,268,29],[308,30,268,30],[309,4,269,4],[309,11,269,11],[309,15,269,15,"ed25519"],[309,22,269,22],[309,23,269,23,"Point"],[309,28,269,28],[309,29,269,29,"mod"],[309,32,269,32],[309,33,269,33,"W0"],[309,35,269,35],[309,38,269,38,"W3"],[309,40,269,40],[309,41,269,41],[309,43,269,43,"mod"],[309,46,269,46],[309,47,269,47,"W2"],[309,49,269,49],[309,52,269,52,"W1"],[309,54,269,54],[309,55,269,55],[309,57,269,57,"mod"],[309,60,269,60],[309,61,269,61,"W1"],[309,63,269,63],[309,66,269,66,"W3"],[309,68,269,68],[309,69,269,69],[309,71,269,71,"mod"],[309,74,269,74],[309,75,269,75,"W0"],[309,77,269,77],[309,80,269,80,"W2"],[309,82,269,82],[309,83,269,83],[309,84,269,84],[310,2,270,0],[311,2,271,0],[311,11,271,9,"ristretto255_map"],[311,27,271,25,"ristretto255_map"],[311,28,271,26,"bytes"],[311,33,271,31],[311,35,271,33],[312,4,272,4],[312,8,272,4,"abytes"],[312,21,272,10],[312,23,272,11,"bytes"],[312,28,272,16],[312,30,272,18],[312,32,272,20],[312,33,272,21],[313,4,273,4],[313,10,273,10,"r1"],[313,12,273,12],[313,15,273,15,"bytes255ToNumberLE"],[313,33,273,33],[313,34,273,34,"bytes"],[313,39,273,39],[313,40,273,40,"subarray"],[313,48,273,48],[313,49,273,49],[313,50,273,50],[313,52,273,52],[313,54,273,54],[313,55,273,55],[313,56,273,56],[314,4,274,4],[314,10,274,10,"R1"],[314,12,274,12],[314,15,274,15,"calcElligatorRistrettoMap"],[314,40,274,40],[314,41,274,41,"r1"],[314,43,274,43],[314,44,274,44],[315,4,275,4],[315,10,275,10,"r2"],[315,12,275,12],[315,15,275,15,"bytes255ToNumberLE"],[315,33,275,33],[315,34,275,34,"bytes"],[315,39,275,39],[315,40,275,40,"subarray"],[315,48,275,48],[315,49,275,49],[315,51,275,51],[315,53,275,53],[315,55,275,55],[315,56,275,56],[315,57,275,57],[316,4,276,4],[316,10,276,10,"R2"],[316,12,276,12],[316,15,276,15,"calcElligatorRistrettoMap"],[316,40,276,40],[316,41,276,41,"r2"],[316,43,276,43],[316,44,276,44],[317,4,277,4],[317,11,277,11],[317,15,277,15,"_RistrettoPoint"],[317,30,277,30],[317,31,277,31,"R1"],[317,33,277,33],[317,34,277,34,"add"],[317,37,277,37],[317,38,277,38,"R2"],[317,40,277,40],[317,41,277,41],[317,42,277,42],[318,2,278,0],[319,2,279,0],[320,0,280,0],[321,0,281,0],[322,0,282,0],[323,0,283,0],[324,0,284,0],[325,0,285,0],[326,0,286,0],[327,0,287,0],[328,2,288,0],[328,8,288,6,"_RistrettoPoint"],[328,23,288,21],[328,32,288,30,"PrimeEdwardsPoint"],[328,58,288,47],[328,59,288,48],[329,4,289,4,"constructor"],[329,15,289,15,"constructor"],[329,16,289,16,"ep"],[329,18,289,18],[329,20,289,20],[330,6,290,8],[330,11,290,13],[330,12,290,14,"ep"],[330,14,290,16],[330,15,290,17],[331,4,291,4],[332,4,292,4],[332,11,292,11,"fromAffine"],[332,21,292,21,"fromAffine"],[332,22,292,22,"ap"],[332,24,292,24],[332,26,292,26],[333,6,293,8],[333,13,293,15],[333,17,293,19,"_RistrettoPoint"],[333,32,293,34],[333,33,293,35,"ed25519"],[333,40,293,42],[333,41,293,43,"Point"],[333,46,293,48],[333,47,293,49,"fromAffine"],[333,57,293,59],[333,58,293,60,"ap"],[333,60,293,62],[333,61,293,63],[333,62,293,64],[334,4,294,4],[335,4,295,4,"assertSame"],[335,14,295,14,"assertSame"],[335,15,295,15,"other"],[335,20,295,20],[335,22,295,22],[336,6,296,8],[336,10,296,12],[336,12,296,14,"other"],[336,17,296,19],[336,29,296,31,"_RistrettoPoint"],[336,44,296,46],[336,45,296,47],[336,47,297,12],[336,53,297,18],[336,57,297,22,"Error"],[336,62,297,27],[336,63,297,28],[336,88,297,53],[336,89,297,54],[337,4,298,4],[338,4,299,4,"init"],[338,8,299,8,"init"],[338,9,299,9,"ep"],[338,11,299,11],[338,13,299,13],[339,6,300,8],[339,13,300,15],[339,17,300,19,"_RistrettoPoint"],[339,32,300,34],[339,33,300,35,"ep"],[339,35,300,37],[339,36,300,38],[340,4,301,4],[341,4,302,4],[342,4,303,4],[342,11,303,11,"hashToCurve"],[342,22,303,22,"hashToCurve"],[342,23,303,23,"hex"],[342,26,303,26],[342,28,303,28],[343,6,304,8],[343,13,304,15,"ristretto255_map"],[343,29,304,31],[343,30,304,32],[343,34,304,32,"ensureBytes"],[343,53,304,43],[343,55,304,44],[343,70,304,59],[343,72,304,61,"hex"],[343,75,304,64],[343,77,304,66],[343,79,304,68],[343,80,304,69],[343,81,304,70],[344,4,305,4],[345,4,306,4],[345,11,306,11,"fromBytes"],[345,20,306,20,"fromBytes"],[345,21,306,21,"bytes"],[345,26,306,26],[345,28,306,28],[346,6,307,8],[346,10,307,8,"abytes"],[346,23,307,14],[346,25,307,15,"bytes"],[346,30,307,20],[346,32,307,22],[346,34,307,24],[346,35,307,25],[347,6,308,8],[347,12,308,14],[348,8,308,16,"a"],[348,9,308,17],[349,8,308,19,"d"],[350,6,308,21],[350,7,308,22],[350,10,308,25,"ed25519_CURVE"],[350,23,308,38],[351,6,309,8],[351,12,309,14,"P"],[351,13,309,15],[351,16,309,18,"ed25519_CURVE_p"],[351,31,309,33],[352,6,310,8],[352,12,310,14,"mod"],[352,15,310,17],[352,18,310,21,"n"],[352,19,310,22],[352,23,310,27,"Fp"],[352,25,310,29],[352,26,310,30,"create"],[352,32,310,36],[352,33,310,37,"n"],[352,34,310,38],[352,35,310,39],[353,6,311,8],[353,12,311,14,"s"],[353,13,311,15],[353,16,311,18,"bytes255ToNumberLE"],[353,34,311,36],[353,35,311,37,"bytes"],[353,40,311,42],[353,41,311,43],[354,6,312,8],[355,6,313,8],[356,6,314,8],[356,10,314,12],[356,11,314,13],[356,15,314,13,"equalBytes"],[356,33,314,23],[356,35,314,24,"Fp"],[356,37,314,26],[356,38,314,27,"toBytes"],[356,45,314,34],[356,46,314,35,"s"],[356,47,314,36],[356,48,314,37],[356,50,314,39,"bytes"],[356,55,314,44],[356,56,314,45],[356,60,314,49],[356,64,314,49,"isNegativeLE"],[356,85,314,61],[356,87,314,62,"s"],[356,88,314,63],[356,90,314,65,"P"],[356,91,314,66],[356,92,314,67],[356,94,315,12],[356,100,315,18],[356,104,315,22,"Error"],[356,109,315,27],[356,110,315,28],[356,143,315,61],[356,144,315,62],[357,6,316,8],[357,12,316,14,"s2"],[357,14,316,16],[357,17,316,19,"mod"],[357,20,316,22],[357,21,316,23,"s"],[357,22,316,24],[357,25,316,27,"s"],[357,26,316,28],[357,27,316,29],[358,6,317,8],[358,12,317,14,"u1"],[358,14,317,16],[358,17,317,19,"mod"],[358,20,317,22],[358,21,317,23,"_1n"],[358,24,317,26],[358,27,317,29,"a"],[358,28,317,30],[358,31,317,33,"s2"],[358,33,317,35],[358,34,317,36],[358,35,317,37],[358,36,317,38],[359,6,318,8],[359,12,318,14,"u2"],[359,14,318,16],[359,17,318,19,"mod"],[359,20,318,22],[359,21,318,23,"_1n"],[359,24,318,26],[359,27,318,29,"a"],[359,28,318,30],[359,31,318,33,"s2"],[359,33,318,35],[359,34,318,36],[359,35,318,37],[359,36,318,38],[360,6,319,8],[360,12,319,14,"u1_2"],[360,16,319,18],[360,19,319,21,"mod"],[360,22,319,24],[360,23,319,25,"u1"],[360,25,319,27],[360,28,319,30,"u1"],[360,30,319,32],[360,31,319,33],[361,6,320,8],[361,12,320,14,"u2_2"],[361,16,320,18],[361,19,320,21,"mod"],[361,22,320,24],[361,23,320,25,"u2"],[361,25,320,27],[361,28,320,30,"u2"],[361,30,320,32],[361,31,320,33],[362,6,321,8],[362,12,321,14,"v"],[362,13,321,15],[362,16,321,18,"mod"],[362,19,321,21],[362,20,321,22,"a"],[362,21,321,23],[362,24,321,26,"d"],[362,25,321,27],[362,28,321,30,"u1_2"],[362,32,321,34],[362,35,321,37,"u2_2"],[362,39,321,41],[362,40,321,42],[362,41,321,43],[362,42,321,44],[363,6,322,8],[363,12,322,14],[364,8,322,16,"isValid"],[364,15,322,23],[365,8,322,25,"value"],[365,13,322,30],[365,15,322,32,"I"],[366,6,322,34],[366,7,322,35],[366,10,322,38,"invertSqrt"],[366,20,322,48],[366,21,322,49,"mod"],[366,24,322,52],[366,25,322,53,"v"],[366,26,322,54],[366,29,322,57,"u2_2"],[366,33,322,61],[366,34,322,62],[366,35,322,63],[366,36,322,64],[366,37,322,65],[367,6,323,8],[367,12,323,14,"Dx"],[367,14,323,16],[367,17,323,19,"mod"],[367,20,323,22],[367,21,323,23,"I"],[367,22,323,24],[367,25,323,27,"u2"],[367,27,323,29],[367,28,323,30],[367,29,323,31],[367,30,323,32],[368,6,324,8],[368,12,324,14,"Dy"],[368,14,324,16],[368,17,324,19,"mod"],[368,20,324,22],[368,21,324,23,"I"],[368,22,324,24],[368,25,324,27,"Dx"],[368,27,324,29],[368,30,324,32,"v"],[368,31,324,33],[368,32,324,34],[368,33,324,35],[368,34,324,36],[369,6,325,8],[369,10,325,12,"x"],[369,11,325,13],[369,14,325,16,"mod"],[369,17,325,19],[369,18,325,20],[369,19,325,21,"s"],[369,20,325,22],[369,23,325,25,"s"],[369,24,325,26],[369,28,325,30,"Dx"],[369,30,325,32],[369,31,325,33],[369,32,325,34],[369,33,325,35],[370,6,326,8],[370,10,326,12],[370,14,326,12,"isNegativeLE"],[370,35,326,24],[370,37,326,25,"x"],[370,38,326,26],[370,40,326,28,"P"],[370,41,326,29],[370,42,326,30],[370,44,327,12,"x"],[370,45,327,13],[370,48,327,16,"mod"],[370,51,327,19],[370,52,327,20],[370,53,327,21,"x"],[370,54,327,22],[370,55,327,23],[370,56,327,24],[370,57,327,25],[371,6,328,8],[371,12,328,14,"y"],[371,13,328,15],[371,16,328,18,"mod"],[371,19,328,21],[371,20,328,22,"u1"],[371,22,328,24],[371,25,328,27,"Dy"],[371,27,328,29],[371,28,328,30],[371,29,328,31],[371,30,328,32],[372,6,329,8],[372,12,329,14,"t"],[372,13,329,15],[372,16,329,18,"mod"],[372,19,329,21],[372,20,329,22,"x"],[372,21,329,23],[372,24,329,26,"y"],[372,25,329,27],[372,26,329,28],[372,27,329,29],[372,28,329,30],[373,6,330,8],[373,10,330,12],[373,11,330,13,"isValid"],[373,18,330,20],[373,22,330,24],[373,26,330,24,"isNegativeLE"],[373,47,330,36],[373,49,330,37,"t"],[373,50,330,38],[373,52,330,40,"P"],[373,53,330,41],[373,54,330,42],[373,58,330,46,"y"],[373,59,330,47],[373,64,330,52,"_0n"],[373,67,330,55],[373,69,331,12],[373,75,331,18],[373,79,331,22,"Error"],[373,84,331,27],[373,85,331,28],[373,118,331,61],[373,119,331,62],[374,6,332,8],[374,13,332,15],[374,17,332,19,"_RistrettoPoint"],[374,32,332,34],[374,33,332,35],[374,37,332,39,"ed25519"],[374,44,332,46],[374,45,332,47,"Point"],[374,50,332,52],[374,51,332,53,"x"],[374,52,332,54],[374,54,332,56,"y"],[374,55,332,57],[374,57,332,59,"_1n"],[374,60,332,62],[374,62,332,64,"t"],[374,63,332,65],[374,64,332,66],[374,65,332,67],[375,4,333,4],[376,4,334,4],[377,0,335,0],[378,0,336,0],[379,0,337,0],[380,0,338,0],[381,4,339,4],[381,11,339,11,"fromHex"],[381,18,339,18,"fromHex"],[381,19,339,19,"hex"],[381,22,339,22],[381,24,339,24],[382,6,340,8],[382,13,340,15,"_RistrettoPoint"],[382,28,340,30],[382,29,340,31,"fromBytes"],[382,38,340,40],[382,39,340,41],[382,43,340,41,"ensureBytes"],[382,62,340,52],[382,64,340,53],[382,78,340,67],[382,80,340,69,"hex"],[382,83,340,72],[382,85,340,74],[382,87,340,76],[382,88,340,77],[382,89,340,78],[383,4,341,4],[384,4,342,4],[384,11,342,11,"msm"],[384,14,342,14,"msm"],[384,15,342,15,"points"],[384,21,342,21],[384,23,342,23,"scalars"],[384,30,342,30],[384,32,342,32],[385,6,343,8],[385,13,343,15],[385,17,343,15,"pippenger"],[385,33,343,24],[385,35,343,25,"_RistrettoPoint"],[385,50,343,40],[385,52,343,42,"ed25519"],[385,59,343,49],[385,60,343,50,"Point"],[385,65,343,55],[385,66,343,56,"Fn"],[385,68,343,58],[385,70,343,60,"points"],[385,76,343,66],[385,78,343,68,"scalars"],[385,85,343,75],[385,86,343,76],[386,4,344,4],[387,4,345,4],[388,0,346,0],[389,0,347,0],[390,0,348,0],[391,4,349,4,"toBytes"],[391,11,349,11,"toBytes"],[391,12,349,11],[391,14,349,14],[392,6,350,8],[392,10,350,12],[393,8,350,14,"X"],[393,9,350,15],[394,8,350,17,"Y"],[394,9,350,18],[395,8,350,20,"Z"],[395,9,350,21],[396,8,350,23,"T"],[397,6,350,25],[397,7,350,26],[397,10,350,29],[397,14,350,33],[397,15,350,34,"ep"],[397,17,350,36],[398,6,351,8],[398,12,351,14,"P"],[398,13,351,15],[398,16,351,18,"ed25519_CURVE_p"],[398,31,351,33],[399,6,352,8],[399,12,352,14,"mod"],[399,15,352,17],[399,18,352,21,"n"],[399,19,352,22],[399,23,352,27,"Fp"],[399,25,352,29],[399,26,352,30,"create"],[399,32,352,36],[399,33,352,37,"n"],[399,34,352,38],[399,35,352,39],[400,6,353,8],[400,12,353,14,"u1"],[400,14,353,16],[400,17,353,19,"mod"],[400,20,353,22],[400,21,353,23,"mod"],[400,24,353,26],[400,25,353,27,"Z"],[400,26,353,28],[400,29,353,31,"Y"],[400,30,353,32],[400,31,353,33],[400,34,353,36,"mod"],[400,37,353,39],[400,38,353,40,"Z"],[400,39,353,41],[400,42,353,44,"Y"],[400,43,353,45],[400,44,353,46],[400,45,353,47],[400,46,353,48],[400,47,353,49],[401,6,354,8],[401,12,354,14,"u2"],[401,14,354,16],[401,17,354,19,"mod"],[401,20,354,22],[401,21,354,23,"X"],[401,22,354,24],[401,25,354,27,"Y"],[401,26,354,28],[401,27,354,29],[401,28,354,30],[401,29,354,31],[402,6,355,8],[403,6,356,8],[403,12,356,14,"u2sq"],[403,16,356,18],[403,19,356,21,"mod"],[403,22,356,24],[403,23,356,25,"u2"],[403,25,356,27],[403,28,356,30,"u2"],[403,30,356,32],[403,31,356,33],[404,6,357,8],[404,12,357,14],[405,8,357,16,"value"],[405,13,357,21],[405,15,357,23,"invsqrt"],[406,6,357,31],[406,7,357,32],[406,10,357,35,"invertSqrt"],[406,20,357,45],[406,21,357,46,"mod"],[406,24,357,49],[406,25,357,50,"u1"],[406,27,357,52],[406,30,357,55,"u2sq"],[406,34,357,59],[406,35,357,60],[406,36,357,61],[406,37,357,62],[406,38,357,63],[407,6,358,8],[407,12,358,14,"D1"],[407,14,358,16],[407,17,358,19,"mod"],[407,20,358,22],[407,21,358,23,"invsqrt"],[407,28,358,30],[407,31,358,33,"u1"],[407,33,358,35],[407,34,358,36],[407,35,358,37],[407,36,358,38],[408,6,359,8],[408,12,359,14,"D2"],[408,14,359,16],[408,17,359,19,"mod"],[408,20,359,22],[408,21,359,23,"invsqrt"],[408,28,359,30],[408,31,359,33,"u2"],[408,33,359,35],[408,34,359,36],[408,35,359,37],[408,36,359,38],[409,6,360,8],[409,12,360,14,"zInv"],[409,16,360,18],[409,19,360,21,"mod"],[409,22,360,24],[409,23,360,25,"D1"],[409,25,360,27],[409,28,360,30,"D2"],[409,30,360,32],[409,33,360,35,"T"],[409,34,360,36],[409,35,360,37],[409,36,360,38],[409,37,360,39],[410,6,361,8],[410,10,361,12,"D"],[410,11,361,13],[410,12,361,14],[410,13,361,15],[411,6,362,8],[411,10,362,12],[411,14,362,12,"isNegativeLE"],[411,35,362,24],[411,37,362,25,"T"],[411,38,362,26],[411,41,362,29,"zInv"],[411,45,362,33],[411,47,362,35,"P"],[411,48,362,36],[411,49,362,37],[411,51,362,39],[412,8,363,12],[412,12,363,16,"_x"],[412,14,363,18],[412,17,363,21,"mod"],[412,20,363,24],[412,21,363,25,"Y"],[412,22,363,26],[412,25,363,29,"SQRT_M1"],[412,32,363,36],[412,33,363,37],[413,8,364,12],[413,12,364,16,"_y"],[413,14,364,18],[413,17,364,21,"mod"],[413,20,364,24],[413,21,364,25,"X"],[413,22,364,26],[413,25,364,29,"SQRT_M1"],[413,32,364,36],[413,33,364,37],[414,8,365,12,"X"],[414,9,365,13],[414,12,365,16,"_x"],[414,14,365,18],[415,8,366,12,"Y"],[415,9,366,13],[415,12,366,16,"_y"],[415,14,366,18],[416,8,367,12,"D"],[416,9,367,13],[416,12,367,16,"mod"],[416,15,367,19],[416,16,367,20,"D1"],[416,18,367,22],[416,21,367,25,"INVSQRT_A_MINUS_D"],[416,38,367,42],[416,39,367,43],[417,6,368,8],[417,7,368,9],[417,13,369,13],[418,8,370,12,"D"],[418,9,370,13],[418,12,370,16,"D2"],[418,14,370,18],[418,15,370,19],[418,16,370,20],[419,6,371,8],[420,6,372,8],[420,10,372,12],[420,14,372,12,"isNegativeLE"],[420,35,372,24],[420,37,372,25,"X"],[420,38,372,26],[420,41,372,29,"zInv"],[420,45,372,33],[420,47,372,35,"P"],[420,48,372,36],[420,49,372,37],[420,51,373,12,"Y"],[420,52,373,13],[420,55,373,16,"mod"],[420,58,373,19],[420,59,373,20],[420,60,373,21,"Y"],[420,61,373,22],[420,62,373,23],[420,63,373,24],[420,64,373,25],[421,6,374,8],[421,10,374,12,"s"],[421,11,374,13],[421,14,374,16,"mod"],[421,17,374,19],[421,18,374,20],[421,19,374,21,"Z"],[421,20,374,22],[421,23,374,25,"Y"],[421,24,374,26],[421,28,374,30,"D"],[421,29,374,31],[421,30,374,32],[421,31,374,33],[421,32,374,34],[422,6,375,8],[422,10,375,12],[422,14,375,12,"isNegativeLE"],[422,35,375,24],[422,37,375,25,"s"],[422,38,375,26],[422,40,375,28,"P"],[422,41,375,29],[422,42,375,30],[422,44,376,12,"s"],[422,45,376,13],[422,48,376,16,"mod"],[422,51,376,19],[422,52,376,20],[422,53,376,21,"s"],[422,54,376,22],[422,55,376,23],[423,6,377,8],[423,13,377,15,"Fp"],[423,15,377,17],[423,16,377,18,"toBytes"],[423,23,377,25],[423,24,377,26,"s"],[423,25,377,27],[423,26,377,28],[423,27,377,29],[423,28,377,30],[424,4,378,4],[425,4,379,4],[426,0,380,0],[427,0,381,0],[428,0,382,0],[429,4,383,4,"equals"],[429,10,383,10,"equals"],[429,11,383,11,"other"],[429,16,383,16],[429,18,383,18],[430,6,384,8],[430,10,384,12],[430,11,384,13,"assertSame"],[430,21,384,23],[430,22,384,24,"other"],[430,27,384,29],[430,28,384,30],[431,6,385,8],[431,12,385,14],[432,8,385,16,"X"],[432,9,385,17],[432,11,385,19,"X1"],[432,13,385,21],[433,8,385,23,"Y"],[433,9,385,24],[433,11,385,26,"Y1"],[434,6,385,29],[434,7,385,30],[434,10,385,33],[434,14,385,37],[434,15,385,38,"ep"],[434,17,385,40],[435,6,386,8],[435,12,386,14],[436,8,386,16,"X"],[436,9,386,17],[436,11,386,19,"X2"],[436,13,386,21],[437,8,386,23,"Y"],[437,9,386,24],[437,11,386,26,"Y2"],[438,6,386,29],[438,7,386,30],[438,10,386,33,"other"],[438,15,386,38],[438,16,386,39,"ep"],[438,18,386,41],[439,6,387,8],[439,12,387,14,"mod"],[439,15,387,17],[439,18,387,21,"n"],[439,19,387,22],[439,23,387,27,"Fp"],[439,25,387,29],[439,26,387,30,"create"],[439,32,387,36],[439,33,387,37,"n"],[439,34,387,38],[439,35,387,39],[440,6,388,8],[441,6,389,8],[441,12,389,14,"one"],[441,15,389,17],[441,18,389,20,"mod"],[441,21,389,23],[441,22,389,24,"X1"],[441,24,389,26],[441,27,389,29,"Y2"],[441,29,389,31],[441,30,389,32],[441,35,389,37,"mod"],[441,38,389,40],[441,39,389,41,"Y1"],[441,41,389,43],[441,44,389,46,"X2"],[441,46,389,48],[441,47,389,49],[442,6,390,8],[442,12,390,14,"two"],[442,15,390,17],[442,18,390,20,"mod"],[442,21,390,23],[442,22,390,24,"Y1"],[442,24,390,26],[442,27,390,29,"Y2"],[442,29,390,31],[442,30,390,32],[442,35,390,37,"mod"],[442,38,390,40],[442,39,390,41,"X1"],[442,41,390,43],[442,44,390,46,"X2"],[442,46,390,48],[442,47,390,49],[443,6,391,8],[443,13,391,15,"one"],[443,16,391,18],[443,20,391,22,"two"],[443,23,391,25],[444,4,392,4],[445,4,393,4,"is0"],[445,7,393,7,"is0"],[445,8,393,7],[445,10,393,10],[446,6,394,8],[446,13,394,15],[446,17,394,19],[446,18,394,20,"equals"],[446,24,394,26],[446,25,394,27,"_RistrettoPoint"],[446,40,394,42],[446,41,394,43,"ZERO"],[446,45,394,47],[446,46,394,48],[447,4,395,4],[448,2,396,0],[449,2,397,0],[450,2,398,0],[451,2,399,0],[452,2,400,0,"_RistrettoPoint"],[452,17,400,15],[452,18,400,16,"BASE"],[452,22,400,20],[452,25,401,0],[452,40,401,16],[452,41,401,17],[452,47,401,23],[452,51,401,27,"_RistrettoPoint"],[452,66,401,42],[452,67,401,43,"ed25519"],[452,74,401,50],[452,75,401,51,"Point"],[452,80,401,56],[452,81,401,57,"BASE"],[452,85,401,61],[452,86,401,62],[452,88,401,64],[452,89,401,65],[453,2,402,0],[454,2,403,0,"_RistrettoPoint"],[454,17,403,15],[454,18,403,16,"ZERO"],[454,22,403,20],[454,25,404,0],[454,40,404,16],[454,41,404,17],[454,47,404,23],[454,51,404,27,"_RistrettoPoint"],[454,66,404,42],[454,67,404,43,"ed25519"],[454,74,404,50],[454,75,404,51,"Point"],[454,80,404,56],[454,81,404,57,"ZERO"],[454,85,404,61],[454,86,404,62],[454,88,404,64],[454,89,404,65],[455,2,405,0],[456,2,406,0,"_RistrettoPoint"],[456,17,406,15],[456,18,406,16,"Fp"],[456,20,406,18],[456,23,407,0],[456,38,407,16],[456,39,407,17],[456,45,407,23,"Fp"],[456,47,407,25],[456,49,407,27],[456,50,407,28],[457,2,408,0],[458,2,409,0,"_RistrettoPoint"],[458,17,409,15],[458,18,409,16,"Fn"],[458,20,409,18],[458,23,410,0],[458,38,410,16],[458,39,410,17],[458,45,410,23,"Fn"],[458,47,410,25],[458,49,410,27],[458,50,410,28],[459,2,411,7],[459,8,411,13,"ristretto255"],[459,20,411,25],[459,23,411,25,"exports"],[459,30,411,25],[459,31,411,25,"ristretto255"],[459,43,411,25],[459,46,411,28],[460,4,411,30,"Point"],[460,9,411,35],[460,11,411,37,"_RistrettoPoint"],[461,2,411,53],[461,3,411,54],[462,2,412,0],[463,2,413,7],[463,8,413,13,"ristretto255_hasher"],[463,27,413,32],[463,30,413,32,"exports"],[463,37,413,32],[463,38,413,32,"ristretto255_hasher"],[463,57,413,32],[463,60,413,35],[464,4,414,4,"hashToCurve"],[464,15,414,15,"hashToCurve"],[464,16,414,16,"msg"],[464,19,414,19],[464,21,414,21,"options"],[464,28,414,28],[464,30,414,30],[465,6,415,8],[465,12,415,14,"DST"],[465,15,415,17],[465,18,415,20,"options"],[465,25,415,27],[465,27,415,29,"DST"],[465,30,415,32],[465,34,415,36],[465,72,415,74],[466,6,416,8],[466,12,416,14,"xmd"],[466,15,416,17],[466,18,416,20],[466,22,416,20,"expand_message_xmd"],[466,53,416,38],[466,55,416,39,"msg"],[466,58,416,42],[466,60,416,44,"DST"],[466,63,416,47],[466,65,416,49],[466,67,416,51],[466,69,416,53,"sha512"],[466,80,416,59],[466,81,416,60],[467,6,417,8],[467,13,417,15,"ristretto255_map"],[467,29,417,31],[467,30,417,32,"xmd"],[467,33,417,35],[467,34,417,36],[468,4,418,4],[468,5,418,5],[469,4,419,4,"hashToScalar"],[469,16,419,16,"hashToScalar"],[469,17,419,17,"msg"],[469,20,419,20],[469,22,419,22,"options"],[469,29,419,29],[469,32,419,32],[470,6,419,34,"DST"],[470,9,419,37],[470,11,419,39,"_DST_scalar"],[471,4,419,51],[471,5,419,52],[471,7,419,54],[472,6,420,8],[472,12,420,14,"xmd"],[472,15,420,17],[472,18,420,20],[472,22,420,20,"expand_message_xmd"],[472,53,420,38],[472,55,420,39,"msg"],[472,58,420,42],[472,60,420,44,"options"],[472,67,420,51],[472,68,420,52,"DST"],[472,71,420,55],[472,73,420,57],[472,75,420,59],[472,77,420,61,"sha512"],[472,88,420,67],[472,89,420,68],[473,6,421,8],[473,13,421,15,"Fn"],[473,15,421,17],[473,16,421,18,"create"],[473,22,421,24],[473,23,421,25],[473,27,421,25,"bytesToNumberLE"],[473,50,421,40],[473,52,421,41,"xmd"],[473,55,421,44],[473,56,421,45],[473,57,421,46],[474,4,422,4],[475,2,423,0],[475,3,423,1],[476,2,424,0],[477,2,425,0],[478,2,426,0],[479,2,427,0],[480,2,428,0],[481,2,429,0],[482,2,430,0],[483,2,431,0],[484,0,432,0],[485,0,433,0],[486,0,434,0],[487,0,435,0],[488,0,436,0],[489,2,437,7],[489,8,437,13,"ED25519_TORSION_SUBGROUP"],[489,32,437,37],[489,35,437,37,"exports"],[489,42,437,37],[489,43,437,37,"ED25519_TORSION_SUBGROUP"],[489,67,437,37],[489,70,437,40],[489,71,438,4],[489,137,438,70],[489,139,439,4],[489,205,439,70],[489,207,440,4],[489,273,440,70],[489,275,441,4],[489,341,441,70],[489,343,442,4],[489,409,442,70],[489,411,443,4],[489,477,443,70],[489,479,444,4],[489,545,444,70],[489,547,445,4],[489,613,445,70],[489,614,446,1],[490,2,447,0],[491,2,448,7],[491,11,448,16,"edwardsToMontgomeryPub"],[491,33,448,38,"edwardsToMontgomeryPub"],[491,34,448,39,"edwardsPub"],[491,44,448,49],[491,46,448,51],[492,4,449,4],[492,11,449,11,"ed25519"],[492,18,449,18],[492,19,449,19,"utils"],[492,24,449,24],[492,25,449,25,"toMontgomery"],[492,37,449,37],[492,38,449,38],[492,42,449,38,"ensureBytes"],[492,61,449,49],[492,63,449,50],[492,68,449,55],[492,70,449,57,"edwardsPub"],[492,80,449,67],[492,81,449,68],[492,82,449,69],[493,2,450,0],[494,2,451,0],[495,2,452,7],[495,8,452,13,"edwardsToMontgomery"],[495,27,452,32],[495,30,452,32,"exports"],[495,37,452,32],[495,38,452,32,"edwardsToMontgomery"],[495,57,452,32],[495,60,452,35,"edwardsToMontgomeryPub"],[495,82,452,57],[496,2,453,0],[497,2,454,7],[497,11,454,16,"edwardsToMontgomeryPriv"],[497,34,454,39,"edwardsToMontgomeryPriv"],[497,35,454,40,"edwardsPriv"],[497,46,454,51],[497,48,454,53],[498,4,455,4],[498,11,455,11,"ed25519"],[498,18,455,18],[498,19,455,19,"utils"],[498,24,455,24],[498,25,455,25,"toMontgomerySecret"],[498,43,455,43],[498,44,455,44],[498,48,455,44,"ensureBytes"],[498,67,455,55],[498,69,455,56],[498,74,455,61],[498,76,455,63,"edwardsPriv"],[498,87,455,74],[498,88,455,75],[498,89,455,76],[499,2,456,0],[500,2,457,0],[501,2,458,7],[501,8,458,13,"RistrettoPoint"],[501,22,458,27],[501,25,458,27,"exports"],[501,32,458,27],[501,33,458,27,"RistrettoPoint"],[501,47,458,27],[501,50,458,30,"_RistrettoPoint"],[501,65,458,45],[502,2,459,0],[503,2,460,7],[503,8,460,13,"hashToCurve"],[503,19,460,24],[503,22,460,24,"exports"],[503,29,460,24],[503,30,460,24,"hashToCurve"],[503,41,460,24],[503,44,460,27],[503,59,460,43],[503,60,460,44],[503,66,460,50,"ed25519_hasher"],[503,80,460,64],[503,81,460,65,"hashToCurve"],[503,92,460,76],[503,94,460,78],[503,95,460,79],[504,2,461,0],[505,2,462,7],[505,8,462,13,"encodeToCurve"],[505,21,462,26],[505,24,462,26,"exports"],[505,31,462,26],[505,32,462,26,"encodeToCurve"],[505,45,462,26],[505,48,462,29],[505,63,462,45],[505,64,462,46],[505,70,462,52,"ed25519_hasher"],[505,84,462,66],[505,85,462,67,"encodeToCurve"],[505,98,462,80],[505,100,462,82],[505,101,462,83],[506,2,463,0],[507,2,464,7],[507,8,464,13,"hashToRistretto255"],[507,26,464,31],[507,29,464,31,"exports"],[507,36,464,31],[507,37,464,31,"hashToRistretto255"],[507,55,464,31],[507,58,464,34],[507,73,464,50],[507,74,464,51],[507,80,464,57,"ristretto255_hasher"],[507,99,464,76],[507,100,464,77,"hashToCurve"],[507,111,464,88],[507,113,464,90],[507,114,464,91],[508,2,465,0],[509,2,466,7],[509,8,466,13,"hash_to_ristretto255"],[509,28,466,33],[509,31,466,33,"exports"],[509,38,466,33],[509,39,466,33,"hash_to_ristretto255"],[509,59,466,33],[509,62,466,36],[509,77,466,52],[509,78,466,53],[509,84,466,59,"ristretto255_hasher"],[509,103,466,78],[509,104,466,79,"hashToCurve"],[509,115,466,90],[509,117,466,92],[509,118,466,93],[510,0,466,94],[510,3]],"functionMap":{"names":["<global>","<anonymous>","ed25519_pow_2_252_3","adjustScalarBytes","uvRatio","ed25519_domain","montgomery$argument_0.powPminus2","map_to_curve_elligator2_curve25519","map_to_curve_elligator2_edwards25519","createHasher$argument_1","invertSqrt","bytes255ToNumberLE","calcElligatorRistrettoMap","mod","ristretto255_map","_RistrettoPoint","_RistrettoPoint#constructor","_RistrettoPoint.fromAffine","_RistrettoPoint#assertSame","_RistrettoPoint#init","_RistrettoPoint.hashToCurve","_RistrettoPoint.fromBytes","_RistrettoPoint.fromHex","_RistrettoPoint.msm","_RistrettoPoint#toBytes","_RistrettoPoint#equals","_RistrettoPoint#is0","ristretto255_hasher.hashToCurve","ristretto255_hasher.hashToScalar","edwardsToMontgomeryPub","edwardsToMontgomeryPriv"],"mappings":"AAA;uCCyB;EDQ;AEC;CFkB;AGC;CHS;AIK;CJoB;4BCC,4CD;4BCC,4CD;yCCC;EDS;wCCW,qCD;AKC;CLI;2CCE;EDG;0CCE;GDG;uCCW;oBKK;SLI;CDG;iCCI,mCD;iCCC,0BD;iCCC,6BD;AOE;CP0C;yCCC,4CD;AQC;CRgB;+CCE,kCQ,6DR;EDQ;mBUY,gCV;2BWE,qEX;AYM;gBCG,mBD;CZoB;AcC;CdO;AeU;ICC;KDE;IEC;KFE;IGC;KHG;IIC;KJE;IKE;KLE;IMC;oBRI,mBQ;KNuB;IOM;KPE;IQC;KRE;ISK;oBXG,mBW;KT0B;IUK;oBZI,mBY;KVK;IWC;KXE;CfC;iBCK,6CD;iBCG,6CD;iBCG,QD;iBCG,QD;I2BI;K3BI;I4BC;K5BG;O6B0B;C7BE;O8BI;C9BE;4CCI,gCD;8CCE,kCD;mDCE,qCD;qDCE,qCD"}},"type":"js/module"}]}