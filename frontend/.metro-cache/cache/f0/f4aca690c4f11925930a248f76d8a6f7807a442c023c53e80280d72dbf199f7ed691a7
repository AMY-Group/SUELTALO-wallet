{"dependencies":[{"name":"../utils.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":19,"index":333},"end":{"line":9,"column":41,"index":355}}],"key":"Yc7DmwhweSDBIC4bv+r2fO8xp6U=","exportNames":["*"]}},{"name":"./modular.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":21,"index":378},"end":{"line":10,"column":44,"index":401}}],"key":"pkHxIsiyj9LvPZma2E+OjOIbg7k=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports._DST_scalar = void 0;\n  exports.expand_message_xmd = expand_message_xmd;\n  exports.expand_message_xof = expand_message_xof;\n  exports.hash_to_field = hash_to_field;\n  exports.isogenyMap = isogenyMap;\n  exports.createHasher = createHasher;\n  const utils_ts_1 = require(_dependencyMap[0], \"../utils.js\");\n  const modular_ts_1 = require(_dependencyMap[1], \"./modular.js\");\n  // Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\n  const os2ip = utils_ts_1.bytesToNumberBE;\n  // Integer to Octet Stream (numberToBytesBE)\n  function i2osp(value, length) {\n    anum(value);\n    anum(length);\n    if (value < 0 || value >= 1 << 8 * length) throw new Error('invalid I2OSP input: ' + value);\n    const res = Array.from({\n      length\n    }).fill(0);\n    for (let i = length - 1; i >= 0; i--) {\n      res[i] = value & 0xff;\n      value >>>= 8;\n    }\n    return new Uint8Array(res);\n  }\n  function strxor(a, b) {\n    const arr = new Uint8Array(a.length);\n    for (let i = 0; i < a.length; i++) {\n      arr[i] = a[i] ^ b[i];\n    }\n    return arr;\n  }\n  function anum(item) {\n    if (!Number.isSafeInteger(item)) throw new Error('number expected');\n  }\n  function normDST(DST) {\n    if (!(0, utils_ts_1.isBytes)(DST) && typeof DST !== 'string') throw new Error('DST must be Uint8Array or string');\n    return typeof DST === 'string' ? (0, utils_ts_1.utf8ToBytes)(DST) : DST;\n  }\n  /**\n   * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n   * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n   */\n  function expand_message_xmd(msg, DST, lenInBytes, H) {\n    (0, utils_ts_1.abytes)(msg);\n    anum(lenInBytes);\n    DST = normDST(DST);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    if (DST.length > 255) DST = H((0, utils_ts_1.concatBytes)((0, utils_ts_1.utf8ToBytes)('H2C-OVERSIZE-DST-'), DST));\n    const {\n      outputLen: b_in_bytes,\n      blockLen: r_in_bytes\n    } = H;\n    const ell = Math.ceil(lenInBytes / b_in_bytes);\n    if (lenInBytes > 65535 || ell > 255) throw new Error('expand_message_xmd: invalid lenInBytes');\n    const DST_prime = (0, utils_ts_1.concatBytes)(DST, i2osp(DST.length, 1));\n    const Z_pad = i2osp(0, r_in_bytes);\n    const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n    const b = new Array(ell);\n    const b_0 = H((0, utils_ts_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n    b[0] = H((0, utils_ts_1.concatBytes)(b_0, i2osp(1, 1), DST_prime));\n    for (let i = 1; i <= ell; i++) {\n      const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n      b[i] = H((0, utils_ts_1.concatBytes)(...args));\n    }\n    const pseudo_random_bytes = (0, utils_ts_1.concatBytes)(...b);\n    return pseudo_random_bytes.slice(0, lenInBytes);\n  }\n  /**\n   * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n   * 1. The collision resistance of H MUST be at least k bits.\n   * 2. H MUST be an XOF that has been proved indifferentiable from\n   *    a random oracle under a reasonable cryptographic assumption.\n   * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n   */\n  function expand_message_xof(msg, DST, lenInBytes, k, H) {\n    (0, utils_ts_1.abytes)(msg);\n    anum(lenInBytes);\n    DST = normDST(DST);\n    // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n    // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n    if (DST.length > 255) {\n      const dkLen = Math.ceil(2 * k / 8);\n      DST = H.create({\n        dkLen\n      }).update((0, utils_ts_1.utf8ToBytes)('H2C-OVERSIZE-DST-')).update(DST).digest();\n    }\n    if (lenInBytes > 65535 || DST.length > 255) throw new Error('expand_message_xof: invalid lenInBytes');\n    return H.create({\n      dkLen: lenInBytes\n    }).update(msg).update(i2osp(lenInBytes, 2))\n    // 2. DST_prime = DST || I2OSP(len(DST), 1)\n    .update(DST).update(i2osp(DST.length, 1)).digest();\n  }\n  /**\n   * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n   * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n   * @param msg a byte string containing the message to hash\n   * @param count the number of elements of F to output\n   * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n   * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n   */\n  function hash_to_field(msg, count, options) {\n    (0, utils_ts_1._validateObject)(options, {\n      p: 'bigint',\n      m: 'number',\n      k: 'number',\n      hash: 'function'\n    });\n    const {\n      p,\n      k,\n      m,\n      hash,\n      expand,\n      DST\n    } = options;\n    if (!(0, utils_ts_1.isHash)(options.hash)) throw new Error('expected valid hash');\n    (0, utils_ts_1.abytes)(msg);\n    anum(count);\n    const log2p = p.toString(2).length;\n    const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n    const len_in_bytes = count * m * L;\n    let prb; // pseudo_random_bytes\n    if (expand === 'xmd') {\n      prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n    } else if (expand === 'xof') {\n      prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n    } else if (expand === '_internal_pass') {\n      // for internal tests only\n      prb = msg;\n    } else {\n      throw new Error('expand must be \"xmd\" or \"xof\"');\n    }\n    const u = new Array(count);\n    for (let i = 0; i < count; i++) {\n      const e = new Array(m);\n      for (let j = 0; j < m; j++) {\n        const elm_offset = L * (j + i * m);\n        const tv = prb.subarray(elm_offset, elm_offset + L);\n        e[j] = (0, modular_ts_1.mod)(os2ip(tv), p);\n      }\n      u[i] = e;\n    }\n    return u;\n  }\n  function isogenyMap(field, map) {\n    // Make same order as in spec\n    const coeff = map.map(i => Array.from(i).reverse());\n    return (x, y) => {\n      const [xn, xd, yn, yd] = coeff.map(val => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));\n      // 6.6.3\n      // Exceptional cases of iso_map are inputs that cause the denominator of\n      // either rational function to evaluate to zero; such cases MUST return\n      // the identity point on E.\n      const [xd_inv, yd_inv] = (0, modular_ts_1.FpInvertBatch)(field, [xd, yd], true);\n      x = field.mul(xn, xd_inv); // xNum / xDen\n      y = field.mul(y, field.mul(yn, yd_inv)); // y * (yNum / yDev)\n      return {\n        x,\n        y\n      };\n    };\n  }\n  exports._DST_scalar = (0, utils_ts_1.utf8ToBytes)('HashToScalar-');\n  /** Creates hash-to-curve methods from EC Point and mapToCurve function. See {@link H2CHasher}. */\n  function createHasher(Point, mapToCurve, defaults) {\n    if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n    function map(num) {\n      return Point.fromAffine(mapToCurve(num));\n    }\n    function clear(initial) {\n      const P = initial.clearCofactor();\n      if (P.equals(Point.ZERO)) return Point.ZERO; // zero will throw in assert\n      P.assertValidity();\n      return P;\n    }\n    return {\n      defaults,\n      hashToCurve(msg, options) {\n        const opts = Object.assign({}, defaults, options);\n        const u = hash_to_field(msg, 2, opts);\n        const u0 = map(u[0]);\n        const u1 = map(u[1]);\n        return clear(u0.add(u1));\n      },\n      encodeToCurve(msg, options) {\n        const optsDst = defaults.encodeDST ? {\n          DST: defaults.encodeDST\n        } : {};\n        const opts = Object.assign({}, defaults, optsDst, options);\n        const u = hash_to_field(msg, 1, opts);\n        const u0 = map(u[0]);\n        return clear(u0);\n      },\n      /** See {@link H2CHasher} */\n      mapToCurve(scalars) {\n        if (!Array.isArray(scalars)) throw new Error('expected array of bigints');\n        for (const i of scalars) if (typeof i !== 'bigint') throw new Error('expected array of bigints');\n        return clear(map(scalars));\n      },\n      // hash_to_scalar can produce 0: https://www.rfc-editor.org/errata/eid8393\n      // RFC 9380, draft-irtf-cfrg-bbs-signatures-08\n      hashToScalar(msg, options) {\n        // @ts-ignore\n        const N = Point.Fn.ORDER;\n        const opts = Object.assign({}, defaults, {\n          p: N,\n          m: 1,\n          DST: exports._DST_scalar\n        }, options);\n        return hash_to_field(msg, 1, opts)[0][0];\n      }\n    };\n  }\n});","lineCount":221,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"_DST_scalar"],[7,21,3,19],[7,24,3,22],[7,29,3,27],[7,30,3,28],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"expand_message_xmd"],[8,28,4,26],[8,31,4,29,"expand_message_xmd"],[8,49,4,47],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"expand_message_xof"],[9,28,5,26],[9,31,5,29,"expand_message_xof"],[9,49,5,47],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"hash_to_field"],[10,23,6,21],[10,26,6,24,"hash_to_field"],[10,39,6,37],[11,2,7,0,"exports"],[11,9,7,7],[11,10,7,8,"isogenyMap"],[11,20,7,18],[11,23,7,21,"isogenyMap"],[11,33,7,31],[12,2,8,0,"exports"],[12,9,8,7],[12,10,8,8,"createHasher"],[12,22,8,20],[12,25,8,23,"createHasher"],[12,37,8,35],[13,2,9,0],[13,8,9,6,"utils_ts_1"],[13,18,9,16],[13,21,9,19,"require"],[13,28,9,26],[13,29,9,26,"_dependencyMap"],[13,43,9,26],[13,61,9,40],[13,62,9,41],[14,2,10,0],[14,8,10,6,"modular_ts_1"],[14,20,10,18],[14,23,10,21,"require"],[14,30,10,28],[14,31,10,28,"_dependencyMap"],[14,45,10,28],[14,64,10,43],[14,65,10,44],[15,2,11,0],[16,2,12,0],[16,8,12,6,"os2ip"],[16,13,12,11],[16,16,12,14,"utils_ts_1"],[16,26,12,24],[16,27,12,25,"bytesToNumberBE"],[16,42,12,40],[17,2,13,0],[18,2,14,0],[18,11,14,9,"i2osp"],[18,16,14,14,"i2osp"],[18,17,14,15,"value"],[18,22,14,20],[18,24,14,22,"length"],[18,30,14,28],[18,32,14,30],[19,4,15,4,"anum"],[19,8,15,8],[19,9,15,9,"value"],[19,14,15,14],[19,15,15,15],[20,4,16,4,"anum"],[20,8,16,8],[20,9,16,9,"length"],[20,15,16,15],[20,16,16,16],[21,4,17,4],[21,8,17,8,"value"],[21,13,17,13],[21,16,17,16],[21,17,17,17],[21,21,17,21,"value"],[21,26,17,26],[21,30,17,30],[21,31,17,31],[21,35,17,36],[21,36,17,37],[21,39,17,40,"length"],[21,45,17,47],[21,47,18,8],[21,53,18,14],[21,57,18,18,"Error"],[21,62,18,23],[21,63,18,24],[21,86,18,47],[21,89,18,50,"value"],[21,94,18,55],[21,95,18,56],[22,4,19,4],[22,10,19,10,"res"],[22,13,19,13],[22,16,19,16,"Array"],[22,21,19,21],[22,22,19,22,"from"],[22,26,19,26],[22,27,19,27],[23,6,19,29,"length"],[24,4,19,36],[24,5,19,37],[24,6,19,38],[24,7,19,39,"fill"],[24,11,19,43],[24,12,19,44],[24,13,19,45],[24,14,19,46],[25,4,20,4],[25,9,20,9],[25,13,20,13,"i"],[25,14,20,14],[25,17,20,17,"length"],[25,23,20,23],[25,26,20,26],[25,27,20,27],[25,29,20,29,"i"],[25,30,20,30],[25,34,20,34],[25,35,20,35],[25,37,20,37,"i"],[25,38,20,38],[25,40,20,40],[25,42,20,42],[26,6,21,8,"res"],[26,9,21,11],[26,10,21,12,"i"],[26,11,21,13],[26,12,21,14],[26,15,21,17,"value"],[26,20,21,22],[26,23,21,25],[26,27,21,29],[27,6,22,8,"value"],[27,11,22,13],[27,17,22,19],[27,18,22,20],[28,4,23,4],[29,4,24,4],[29,11,24,11],[29,15,24,15,"Uint8Array"],[29,25,24,25],[29,26,24,26,"res"],[29,29,24,29],[29,30,24,30],[30,2,25,0],[31,2,26,0],[31,11,26,9,"strxor"],[31,17,26,15,"strxor"],[31,18,26,16,"a"],[31,19,26,17],[31,21,26,19,"b"],[31,22,26,20],[31,24,26,22],[32,4,27,4],[32,10,27,10,"arr"],[32,13,27,13],[32,16,27,16],[32,20,27,20,"Uint8Array"],[32,30,27,30],[32,31,27,31,"a"],[32,32,27,32],[32,33,27,33,"length"],[32,39,27,39],[32,40,27,40],[33,4,28,4],[33,9,28,9],[33,13,28,13,"i"],[33,14,28,14],[33,17,28,17],[33,18,28,18],[33,20,28,20,"i"],[33,21,28,21],[33,24,28,24,"a"],[33,25,28,25],[33,26,28,26,"length"],[33,32,28,32],[33,34,28,34,"i"],[33,35,28,35],[33,37,28,37],[33,39,28,39],[34,6,29,8,"arr"],[34,9,29,11],[34,10,29,12,"i"],[34,11,29,13],[34,12,29,14],[34,15,29,17,"a"],[34,16,29,18],[34,17,29,19,"i"],[34,18,29,20],[34,19,29,21],[34,22,29,24,"b"],[34,23,29,25],[34,24,29,26,"i"],[34,25,29,27],[34,26,29,28],[35,4,30,4],[36,4,31,4],[36,11,31,11,"arr"],[36,14,31,14],[37,2,32,0],[38,2,33,0],[38,11,33,9,"anum"],[38,15,33,13,"anum"],[38,16,33,14,"item"],[38,20,33,18],[38,22,33,20],[39,4,34,4],[39,8,34,8],[39,9,34,9,"Number"],[39,15,34,15],[39,16,34,16,"isSafeInteger"],[39,29,34,29],[39,30,34,30,"item"],[39,34,34,34],[39,35,34,35],[39,37,35,8],[39,43,35,14],[39,47,35,18,"Error"],[39,52,35,23],[39,53,35,24],[39,70,35,41],[39,71,35,42],[40,2,36,0],[41,2,37,0],[41,11,37,9,"normDST"],[41,18,37,16,"normDST"],[41,19,37,17,"DST"],[41,22,37,20],[41,24,37,22],[42,4,38,4],[42,8,38,8],[42,9,38,9],[42,10,38,10],[42,11,38,11],[42,13,38,13,"utils_ts_1"],[42,23,38,23],[42,24,38,24,"isBytes"],[42,31,38,31],[42,33,38,33,"DST"],[42,36,38,36],[42,37,38,37],[42,41,38,41],[42,48,38,48,"DST"],[42,51,38,51],[42,56,38,56],[42,64,38,64],[42,66,39,8],[42,72,39,14],[42,76,39,18,"Error"],[42,81,39,23],[42,82,39,24],[42,116,39,58],[42,117,39,59],[43,4,40,4],[43,11,40,11],[43,18,40,18,"DST"],[43,21,40,21],[43,26,40,26],[43,34,40,34],[43,37,40,37],[43,38,40,38],[43,39,40,39],[43,41,40,41,"utils_ts_1"],[43,51,40,51],[43,52,40,52,"utf8ToBytes"],[43,63,40,63],[43,65,40,65,"DST"],[43,68,40,68],[43,69,40,69],[43,72,40,72,"DST"],[43,75,40,75],[44,2,41,0],[45,2,42,0],[46,0,43,0],[47,0,44,0],[48,0,45,0],[49,2,46,0],[49,11,46,9,"expand_message_xmd"],[49,29,46,27,"expand_message_xmd"],[49,30,46,28,"msg"],[49,33,46,31],[49,35,46,33,"DST"],[49,38,46,36],[49,40,46,38,"lenInBytes"],[49,50,46,48],[49,52,46,50,"H"],[49,53,46,51],[49,55,46,53],[50,4,47,4],[50,5,47,5],[50,6,47,6],[50,8,47,8,"utils_ts_1"],[50,18,47,18],[50,19,47,19,"abytes"],[50,25,47,25],[50,27,47,27,"msg"],[50,30,47,30],[50,31,47,31],[51,4,48,4,"anum"],[51,8,48,8],[51,9,48,9,"lenInBytes"],[51,19,48,19],[51,20,48,20],[52,4,49,4,"DST"],[52,7,49,7],[52,10,49,10,"normDST"],[52,17,49,17],[52,18,49,18,"DST"],[52,21,49,21],[52,22,49,22],[53,4,50,4],[54,4,51,4],[54,8,51,8,"DST"],[54,11,51,11],[54,12,51,12,"length"],[54,18,51,18],[54,21,51,21],[54,24,51,24],[54,26,52,8,"DST"],[54,29,52,11],[54,32,52,14,"H"],[54,33,52,15],[54,34,52,16],[54,35,52,17],[54,36,52,18],[54,38,52,20,"utils_ts_1"],[54,48,52,30],[54,49,52,31,"concatBytes"],[54,60,52,42],[54,62,52,44],[54,63,52,45],[54,64,52,46],[54,66,52,48,"utils_ts_1"],[54,76,52,58],[54,77,52,59,"utf8ToBytes"],[54,88,52,70],[54,90,52,72],[54,109,52,91],[54,110,52,92],[54,112,52,94,"DST"],[54,115,52,97],[54,116,52,98],[54,117,52,99],[55,4,53,4],[55,10,53,10],[56,6,53,12,"outputLen"],[56,15,53,21],[56,17,53,23,"b_in_bytes"],[56,27,53,33],[57,6,53,35,"blockLen"],[57,14,53,43],[57,16,53,45,"r_in_bytes"],[58,4,53,56],[58,5,53,57],[58,8,53,60,"H"],[58,9,53,61],[59,4,54,4],[59,10,54,10,"ell"],[59,13,54,13],[59,16,54,16,"Math"],[59,20,54,20],[59,21,54,21,"ceil"],[59,25,54,25],[59,26,54,26,"lenInBytes"],[59,36,54,36],[59,39,54,39,"b_in_bytes"],[59,49,54,49],[59,50,54,50],[60,4,55,4],[60,8,55,8,"lenInBytes"],[60,18,55,18],[60,21,55,21],[60,26,55,26],[60,30,55,30,"ell"],[60,33,55,33],[60,36,55,36],[60,39,55,39],[60,41,56,8],[60,47,56,14],[60,51,56,18,"Error"],[60,56,56,23],[60,57,56,24],[60,97,56,64],[60,98,56,65],[61,4,57,4],[61,10,57,10,"DST_prime"],[61,19,57,19],[61,22,57,22],[61,23,57,23],[61,24,57,24],[61,26,57,26,"utils_ts_1"],[61,36,57,36],[61,37,57,37,"concatBytes"],[61,48,57,48],[61,50,57,50,"DST"],[61,53,57,53],[61,55,57,55,"i2osp"],[61,60,57,60],[61,61,57,61,"DST"],[61,64,57,64],[61,65,57,65,"length"],[61,71,57,71],[61,73,57,73],[61,74,57,74],[61,75,57,75],[61,76,57,76],[62,4,58,4],[62,10,58,10,"Z_pad"],[62,15,58,15],[62,18,58,18,"i2osp"],[62,23,58,23],[62,24,58,24],[62,25,58,25],[62,27,58,27,"r_in_bytes"],[62,37,58,37],[62,38,58,38],[63,4,59,4],[63,10,59,10,"l_i_b_str"],[63,19,59,19],[63,22,59,22,"i2osp"],[63,27,59,27],[63,28,59,28,"lenInBytes"],[63,38,59,38],[63,40,59,40],[63,41,59,41],[63,42,59,42],[63,43,59,43],[63,44,59,44],[64,4,60,4],[64,10,60,10,"b"],[64,11,60,11],[64,14,60,14],[64,18,60,18,"Array"],[64,23,60,23],[64,24,60,24,"ell"],[64,27,60,27],[64,28,60,28],[65,4,61,4],[65,10,61,10,"b_0"],[65,13,61,13],[65,16,61,16,"H"],[65,17,61,17],[65,18,61,18],[65,19,61,19],[65,20,61,20],[65,22,61,22,"utils_ts_1"],[65,32,61,32],[65,33,61,33,"concatBytes"],[65,44,61,44],[65,46,61,46,"Z_pad"],[65,51,61,51],[65,53,61,53,"msg"],[65,56,61,56],[65,58,61,58,"l_i_b_str"],[65,67,61,67],[65,69,61,69,"i2osp"],[65,74,61,74],[65,75,61,75],[65,76,61,76],[65,78,61,78],[65,79,61,79],[65,80,61,80],[65,82,61,82,"DST_prime"],[65,91,61,91],[65,92,61,92],[65,93,61,93],[66,4,62,4,"b"],[66,5,62,5],[66,6,62,6],[66,7,62,7],[66,8,62,8],[66,11,62,11,"H"],[66,12,62,12],[66,13,62,13],[66,14,62,14],[66,15,62,15],[66,17,62,17,"utils_ts_1"],[66,27,62,27],[66,28,62,28,"concatBytes"],[66,39,62,39],[66,41,62,41,"b_0"],[66,44,62,44],[66,46,62,46,"i2osp"],[66,51,62,51],[66,52,62,52],[66,53,62,53],[66,55,62,55],[66,56,62,56],[66,57,62,57],[66,59,62,59,"DST_prime"],[66,68,62,68],[66,69,62,69],[66,70,62,70],[67,4,63,4],[67,9,63,9],[67,13,63,13,"i"],[67,14,63,14],[67,17,63,17],[67,18,63,18],[67,20,63,20,"i"],[67,21,63,21],[67,25,63,25,"ell"],[67,28,63,28],[67,30,63,30,"i"],[67,31,63,31],[67,33,63,33],[67,35,63,35],[68,6,64,8],[68,12,64,14,"args"],[68,16,64,18],[68,19,64,21],[68,20,64,22,"strxor"],[68,26,64,28],[68,27,64,29,"b_0"],[68,30,64,32],[68,32,64,34,"b"],[68,33,64,35],[68,34,64,36,"i"],[68,35,64,37],[68,38,64,40],[68,39,64,41],[68,40,64,42],[68,41,64,43],[68,43,64,45,"i2osp"],[68,48,64,50],[68,49,64,51,"i"],[68,50,64,52],[68,53,64,55],[68,54,64,56],[68,56,64,58],[68,57,64,59],[68,58,64,60],[68,60,64,62,"DST_prime"],[68,69,64,71],[68,70,64,72],[69,6,65,8,"b"],[69,7,65,9],[69,8,65,10,"i"],[69,9,65,11],[69,10,65,12],[69,13,65,15,"H"],[69,14,65,16],[69,15,65,17],[69,16,65,18],[69,17,65,19],[69,19,65,21,"utils_ts_1"],[69,29,65,31],[69,30,65,32,"concatBytes"],[69,41,65,43],[69,43,65,45],[69,46,65,48,"args"],[69,50,65,52],[69,51,65,53],[69,52,65,54],[70,4,66,4],[71,4,67,4],[71,10,67,10,"pseudo_random_bytes"],[71,29,67,29],[71,32,67,32],[71,33,67,33],[71,34,67,34],[71,36,67,36,"utils_ts_1"],[71,46,67,46],[71,47,67,47,"concatBytes"],[71,58,67,58],[71,60,67,60],[71,63,67,63,"b"],[71,64,67,64],[71,65,67,65],[72,4,68,4],[72,11,68,11,"pseudo_random_bytes"],[72,30,68,30],[72,31,68,31,"slice"],[72,36,68,36],[72,37,68,37],[72,38,68,38],[72,40,68,40,"lenInBytes"],[72,50,68,50],[72,51,68,51],[73,2,69,0],[74,2,70,0],[75,0,71,0],[76,0,72,0],[77,0,73,0],[78,0,74,0],[79,0,75,0],[80,0,76,0],[81,2,77,0],[81,11,77,9,"expand_message_xof"],[81,29,77,27,"expand_message_xof"],[81,30,77,28,"msg"],[81,33,77,31],[81,35,77,33,"DST"],[81,38,77,36],[81,40,77,38,"lenInBytes"],[81,50,77,48],[81,52,77,50,"k"],[81,53,77,51],[81,55,77,53,"H"],[81,56,77,54],[81,58,77,56],[82,4,78,4],[82,5,78,5],[82,6,78,6],[82,8,78,8,"utils_ts_1"],[82,18,78,18],[82,19,78,19,"abytes"],[82,25,78,25],[82,27,78,27,"msg"],[82,30,78,30],[82,31,78,31],[83,4,79,4,"anum"],[83,8,79,8],[83,9,79,9,"lenInBytes"],[83,19,79,19],[83,20,79,20],[84,4,80,4,"DST"],[84,7,80,7],[84,10,80,10,"normDST"],[84,17,80,17],[84,18,80,18,"DST"],[84,21,80,21],[84,22,80,22],[85,4,81,4],[86,4,82,4],[87,4,83,4],[87,8,83,8,"DST"],[87,11,83,11],[87,12,83,12,"length"],[87,18,83,18],[87,21,83,21],[87,24,83,24],[87,26,83,26],[88,6,84,8],[88,12,84,14,"dkLen"],[88,17,84,19],[88,20,84,22,"Math"],[88,24,84,26],[88,25,84,27,"ceil"],[88,29,84,31],[88,30,84,33],[88,31,84,34],[88,34,84,37,"k"],[88,35,84,38],[88,38,84,42],[88,39,84,43],[88,40,84,44],[89,6,85,8,"DST"],[89,9,85,11],[89,12,85,14,"H"],[89,13,85,15],[89,14,85,16,"create"],[89,20,85,22],[89,21,85,23],[90,8,85,25,"dkLen"],[91,6,85,31],[91,7,85,32],[91,8,85,33],[91,9,85,34,"update"],[91,15,85,40],[91,16,85,41],[91,17,85,42],[91,18,85,43],[91,20,85,45,"utils_ts_1"],[91,30,85,55],[91,31,85,56,"utf8ToBytes"],[91,42,85,67],[91,44,85,69],[91,63,85,88],[91,64,85,89],[91,65,85,90],[91,66,85,91,"update"],[91,72,85,97],[91,73,85,98,"DST"],[91,76,85,101],[91,77,85,102],[91,78,85,103,"digest"],[91,84,85,109],[91,85,85,110],[91,86,85,111],[92,4,86,4],[93,4,87,4],[93,8,87,8,"lenInBytes"],[93,18,87,18],[93,21,87,21],[93,26,87,26],[93,30,87,30,"DST"],[93,33,87,33],[93,34,87,34,"length"],[93,40,87,40],[93,43,87,43],[93,46,87,46],[93,48,88,8],[93,54,88,14],[93,58,88,18,"Error"],[93,63,88,23],[93,64,88,24],[93,104,88,64],[93,105,88,65],[94,4,89,4],[94,11,89,12,"H"],[94,12,89,13],[94,13,89,14,"create"],[94,19,89,20],[94,20,89,21],[95,6,89,23,"dkLen"],[95,11,89,28],[95,13,89,30,"lenInBytes"],[96,4,89,41],[96,5,89,42],[96,6,89,43],[96,7,90,9,"update"],[96,13,90,15],[96,14,90,16,"msg"],[96,17,90,19],[96,18,90,20],[96,19,91,9,"update"],[96,25,91,15],[96,26,91,16,"i2osp"],[96,31,91,21],[96,32,91,22,"lenInBytes"],[96,42,91,32],[96,44,91,34],[96,45,91,35],[96,46,91,36],[97,4,92,8],[98,4,92,8],[98,5,93,9,"update"],[98,11,93,15],[98,12,93,16,"DST"],[98,15,93,19],[98,16,93,20],[98,17,94,9,"update"],[98,23,94,15],[98,24,94,16,"i2osp"],[98,29,94,21],[98,30,94,22,"DST"],[98,33,94,25],[98,34,94,26,"length"],[98,40,94,32],[98,42,94,34],[98,43,94,35],[98,44,94,36],[98,45,94,37],[98,46,95,9,"digest"],[98,52,95,15],[98,53,95,16],[98,54,95,17],[99,2,96,0],[100,2,97,0],[101,0,98,0],[102,0,99,0],[103,0,100,0],[104,0,101,0],[105,0,102,0],[106,0,103,0],[107,0,104,0],[108,2,105,0],[108,11,105,9,"hash_to_field"],[108,24,105,22,"hash_to_field"],[108,25,105,23,"msg"],[108,28,105,26],[108,30,105,28,"count"],[108,35,105,33],[108,37,105,35,"options"],[108,44,105,42],[108,46,105,44],[109,4,106,4],[109,5,106,5],[109,6,106,6],[109,8,106,8,"utils_ts_1"],[109,18,106,18],[109,19,106,19,"_validateObject"],[109,34,106,34],[109,36,106,36,"options"],[109,43,106,43],[109,45,106,45],[110,6,107,8,"p"],[110,7,107,9],[110,9,107,11],[110,17,107,19],[111,6,108,8,"m"],[111,7,108,9],[111,9,108,11],[111,17,108,19],[112,6,109,8,"k"],[112,7,109,9],[112,9,109,11],[112,17,109,19],[113,6,110,8,"hash"],[113,10,110,12],[113,12,110,14],[114,4,111,4],[114,5,111,5],[114,6,111,6],[115,4,112,4],[115,10,112,10],[116,6,112,12,"p"],[116,7,112,13],[117,6,112,15,"k"],[117,7,112,16],[118,6,112,18,"m"],[118,7,112,19],[119,6,112,21,"hash"],[119,10,112,25],[120,6,112,27,"expand"],[120,12,112,33],[121,6,112,35,"DST"],[122,4,112,39],[122,5,112,40],[122,8,112,43,"options"],[122,15,112,50],[123,4,113,4],[123,8,113,8],[123,9,113,9],[123,10,113,10],[123,11,113,11],[123,13,113,13,"utils_ts_1"],[123,23,113,23],[123,24,113,24,"isHash"],[123,30,113,30],[123,32,113,32,"options"],[123,39,113,39],[123,40,113,40,"hash"],[123,44,113,44],[123,45,113,45],[123,47,114,8],[123,53,114,14],[123,57,114,18,"Error"],[123,62,114,23],[123,63,114,24],[123,84,114,45],[123,85,114,46],[124,4,115,4],[124,5,115,5],[124,6,115,6],[124,8,115,8,"utils_ts_1"],[124,18,115,18],[124,19,115,19,"abytes"],[124,25,115,25],[124,27,115,27,"msg"],[124,30,115,30],[124,31,115,31],[125,4,116,4,"anum"],[125,8,116,8],[125,9,116,9,"count"],[125,14,116,14],[125,15,116,15],[126,4,117,4],[126,10,117,10,"log2p"],[126,15,117,15],[126,18,117,18,"p"],[126,19,117,19],[126,20,117,20,"toString"],[126,28,117,28],[126,29,117,29],[126,30,117,30],[126,31,117,31],[126,32,117,32,"length"],[126,38,117,38],[127,4,118,4],[127,10,118,10,"L"],[127,11,118,11],[127,14,118,14,"Math"],[127,18,118,18],[127,19,118,19,"ceil"],[127,23,118,23],[127,24,118,24],[127,25,118,25,"log2p"],[127,30,118,30],[127,33,118,33,"k"],[127,34,118,34],[127,38,118,38],[127,39,118,39],[127,40,118,40],[127,41,118,41],[127,42,118,42],[128,4,119,4],[128,10,119,10,"len_in_bytes"],[128,22,119,22],[128,25,119,25,"count"],[128,30,119,30],[128,33,119,33,"m"],[128,34,119,34],[128,37,119,37,"L"],[128,38,119,38],[129,4,120,4],[129,8,120,8,"prb"],[129,11,120,11],[129,12,120,12],[129,13,120,13],[130,4,121,4],[130,8,121,8,"expand"],[130,14,121,14],[130,19,121,19],[130,24,121,24],[130,26,121,26],[131,6,122,8,"prb"],[131,9,122,11],[131,12,122,14,"expand_message_xmd"],[131,30,122,32],[131,31,122,33,"msg"],[131,34,122,36],[131,36,122,38,"DST"],[131,39,122,41],[131,41,122,43,"len_in_bytes"],[131,53,122,55],[131,55,122,57,"hash"],[131,59,122,61],[131,60,122,62],[132,4,123,4],[132,5,123,5],[132,11,124,9],[132,15,124,13,"expand"],[132,21,124,19],[132,26,124,24],[132,31,124,29],[132,33,124,31],[133,6,125,8,"prb"],[133,9,125,11],[133,12,125,14,"expand_message_xof"],[133,30,125,32],[133,31,125,33,"msg"],[133,34,125,36],[133,36,125,38,"DST"],[133,39,125,41],[133,41,125,43,"len_in_bytes"],[133,53,125,55],[133,55,125,57,"k"],[133,56,125,58],[133,58,125,60,"hash"],[133,62,125,64],[133,63,125,65],[134,4,126,4],[134,5,126,5],[134,11,127,9],[134,15,127,13,"expand"],[134,21,127,19],[134,26,127,24],[134,42,127,40],[134,44,127,42],[135,6,128,8],[136,6,129,8,"prb"],[136,9,129,11],[136,12,129,14,"msg"],[136,15,129,17],[137,4,130,4],[137,5,130,5],[137,11,131,9],[138,6,132,8],[138,12,132,14],[138,16,132,18,"Error"],[138,21,132,23],[138,22,132,24],[138,53,132,55],[138,54,132,56],[139,4,133,4],[140,4,134,4],[140,10,134,10,"u"],[140,11,134,11],[140,14,134,14],[140,18,134,18,"Array"],[140,23,134,23],[140,24,134,24,"count"],[140,29,134,29],[140,30,134,30],[141,4,135,4],[141,9,135,9],[141,13,135,13,"i"],[141,14,135,14],[141,17,135,17],[141,18,135,18],[141,20,135,20,"i"],[141,21,135,21],[141,24,135,24,"count"],[141,29,135,29],[141,31,135,31,"i"],[141,32,135,32],[141,34,135,34],[141,36,135,36],[142,6,136,8],[142,12,136,14,"e"],[142,13,136,15],[142,16,136,18],[142,20,136,22,"Array"],[142,25,136,27],[142,26,136,28,"m"],[142,27,136,29],[142,28,136,30],[143,6,137,8],[143,11,137,13],[143,15,137,17,"j"],[143,16,137,18],[143,19,137,21],[143,20,137,22],[143,22,137,24,"j"],[143,23,137,25],[143,26,137,28,"m"],[143,27,137,29],[143,29,137,31,"j"],[143,30,137,32],[143,32,137,34],[143,34,137,36],[144,8,138,12],[144,14,138,18,"elm_offset"],[144,24,138,28],[144,27,138,31,"L"],[144,28,138,32],[144,32,138,36,"j"],[144,33,138,37],[144,36,138,40,"i"],[144,37,138,41],[144,40,138,44,"m"],[144,41,138,45],[144,42,138,46],[145,8,139,12],[145,14,139,18,"tv"],[145,16,139,20],[145,19,139,23,"prb"],[145,22,139,26],[145,23,139,27,"subarray"],[145,31,139,35],[145,32,139,36,"elm_offset"],[145,42,139,46],[145,44,139,48,"elm_offset"],[145,54,139,58],[145,57,139,61,"L"],[145,58,139,62],[145,59,139,63],[146,8,140,12,"e"],[146,9,140,13],[146,10,140,14,"j"],[146,11,140,15],[146,12,140,16],[146,15,140,19],[146,16,140,20],[146,17,140,21],[146,19,140,23,"modular_ts_1"],[146,31,140,35],[146,32,140,36,"mod"],[146,35,140,39],[146,37,140,41,"os2ip"],[146,42,140,46],[146,43,140,47,"tv"],[146,45,140,49],[146,46,140,50],[146,48,140,52,"p"],[146,49,140,53],[146,50,140,54],[147,6,141,8],[148,6,142,8,"u"],[148,7,142,9],[148,8,142,10,"i"],[148,9,142,11],[148,10,142,12],[148,13,142,15,"e"],[148,14,142,16],[149,4,143,4],[150,4,144,4],[150,11,144,11,"u"],[150,12,144,12],[151,2,145,0],[152,2,146,0],[152,11,146,9,"isogenyMap"],[152,21,146,19,"isogenyMap"],[152,22,146,20,"field"],[152,27,146,25],[152,29,146,27,"map"],[152,32,146,30],[152,34,146,32],[153,4,147,4],[154,4,148,4],[154,10,148,10,"coeff"],[154,15,148,15],[154,18,148,18,"map"],[154,21,148,21],[154,22,148,22,"map"],[154,25,148,25],[154,26,148,27,"i"],[154,27,148,28],[154,31,148,33,"Array"],[154,36,148,38],[154,37,148,39,"from"],[154,41,148,43],[154,42,148,44,"i"],[154,43,148,45],[154,44,148,46],[154,45,148,47,"reverse"],[154,52,148,54],[154,53,148,55],[154,54,148,56],[154,55,148,57],[155,4,149,4],[155,11,149,11],[155,12,149,12,"x"],[155,13,149,13],[155,15,149,15,"y"],[155,16,149,16],[155,21,149,21],[156,6,150,8],[156,12,150,14],[156,13,150,15,"xn"],[156,15,150,17],[156,17,150,19,"xd"],[156,19,150,21],[156,21,150,23,"yn"],[156,23,150,25],[156,25,150,27,"yd"],[156,27,150,29],[156,28,150,30],[156,31,150,33,"coeff"],[156,36,150,38],[156,37,150,39,"map"],[156,40,150,42],[156,41,150,44,"val"],[156,44,150,47],[156,48,150,52,"val"],[156,51,150,55],[156,52,150,56,"reduce"],[156,58,150,62],[156,59,150,63],[156,60,150,64,"acc"],[156,63,150,67],[156,65,150,69,"i"],[156,66,150,70],[156,71,150,75,"field"],[156,76,150,80],[156,77,150,81,"add"],[156,80,150,84],[156,81,150,85,"field"],[156,86,150,90],[156,87,150,91,"mul"],[156,90,150,94],[156,91,150,95,"acc"],[156,94,150,98],[156,96,150,100,"x"],[156,97,150,101],[156,98,150,102],[156,100,150,104,"i"],[156,101,150,105],[156,102,150,106],[156,103,150,107],[156,104,150,108],[157,6,151,8],[158,6,152,8],[159,6,153,8],[160,6,154,8],[161,6,155,8],[161,12,155,14],[161,13,155,15,"xd_inv"],[161,19,155,21],[161,21,155,23,"yd_inv"],[161,27,155,29],[161,28,155,30],[161,31,155,33],[161,32,155,34],[161,33,155,35],[161,35,155,37,"modular_ts_1"],[161,47,155,49],[161,48,155,50,"FpInvertBatch"],[161,61,155,63],[161,63,155,65,"field"],[161,68,155,70],[161,70,155,72],[161,71,155,73,"xd"],[161,73,155,75],[161,75,155,77,"yd"],[161,77,155,79],[161,78,155,80],[161,80,155,82],[161,84,155,86],[161,85,155,87],[162,6,156,8,"x"],[162,7,156,9],[162,10,156,12,"field"],[162,15,156,17],[162,16,156,18,"mul"],[162,19,156,21],[162,20,156,22,"xn"],[162,22,156,24],[162,24,156,26,"xd_inv"],[162,30,156,32],[162,31,156,33],[162,32,156,34],[162,33,156,35],[163,6,157,8,"y"],[163,7,157,9],[163,10,157,12,"field"],[163,15,157,17],[163,16,157,18,"mul"],[163,19,157,21],[163,20,157,22,"y"],[163,21,157,23],[163,23,157,25,"field"],[163,28,157,30],[163,29,157,31,"mul"],[163,32,157,34],[163,33,157,35,"yn"],[163,35,157,37],[163,37,157,39,"yd_inv"],[163,43,157,45],[163,44,157,46],[163,45,157,47],[163,46,157,48],[163,47,157,49],[164,6,158,8],[164,13,158,15],[165,8,158,17,"x"],[165,9,158,18],[166,8,158,20,"y"],[167,6,158,22],[167,7,158,23],[168,4,159,4],[168,5,159,5],[169,2,160,0],[170,2,161,0,"exports"],[170,9,161,7],[170,10,161,8,"_DST_scalar"],[170,21,161,19],[170,24,161,22],[170,25,161,23],[170,26,161,24],[170,28,161,26,"utils_ts_1"],[170,38,161,36],[170,39,161,37,"utf8ToBytes"],[170,50,161,48],[170,52,161,50],[170,67,161,65],[170,68,161,66],[171,2,162,0],[172,2,163,0],[172,11,163,9,"createHasher"],[172,23,163,21,"createHasher"],[172,24,163,22,"Point"],[172,29,163,27],[172,31,163,29,"mapToCurve"],[172,41,163,39],[172,43,163,41,"defaults"],[172,51,163,49],[172,53,163,51],[173,4,164,4],[173,8,164,8],[173,15,164,15,"mapToCurve"],[173,25,164,25],[173,30,164,30],[173,40,164,40],[173,42,165,8],[173,48,165,14],[173,52,165,18,"Error"],[173,57,165,23],[173,58,165,24],[173,88,165,54],[173,89,165,55],[174,4,166,4],[174,13,166,13,"map"],[174,16,166,16,"map"],[174,17,166,17,"num"],[174,20,166,20],[174,22,166,22],[175,6,167,8],[175,13,167,15,"Point"],[175,18,167,20],[175,19,167,21,"fromAffine"],[175,29,167,31],[175,30,167,32,"mapToCurve"],[175,40,167,42],[175,41,167,43,"num"],[175,44,167,46],[175,45,167,47],[175,46,167,48],[176,4,168,4],[177,4,169,4],[177,13,169,13,"clear"],[177,18,169,18,"clear"],[177,19,169,19,"initial"],[177,26,169,26],[177,28,169,28],[178,6,170,8],[178,12,170,14,"P"],[178,13,170,15],[178,16,170,18,"initial"],[178,23,170,25],[178,24,170,26,"clearCofactor"],[178,37,170,39],[178,38,170,40],[178,39,170,41],[179,6,171,8],[179,10,171,12,"P"],[179,11,171,13],[179,12,171,14,"equals"],[179,18,171,20],[179,19,171,21,"Point"],[179,24,171,26],[179,25,171,27,"ZERO"],[179,29,171,31],[179,30,171,32],[179,32,172,12],[179,39,172,19,"Point"],[179,44,172,24],[179,45,172,25,"ZERO"],[179,49,172,29],[179,50,172,30],[179,51,172,31],[180,6,173,8,"P"],[180,7,173,9],[180,8,173,10,"assertValidity"],[180,22,173,24],[180,23,173,25],[180,24,173,26],[181,6,174,8],[181,13,174,15,"P"],[181,14,174,16],[182,4,175,4],[183,4,176,4],[183,11,176,11],[184,6,177,8,"defaults"],[184,14,177,16],[185,6,178,8,"hashToCurve"],[185,17,178,19,"hashToCurve"],[185,18,178,20,"msg"],[185,21,178,23],[185,23,178,25,"options"],[185,30,178,32],[185,32,178,34],[186,8,179,12],[186,14,179,18,"opts"],[186,18,179,22],[186,21,179,25,"Object"],[186,27,179,31],[186,28,179,32,"assign"],[186,34,179,38],[186,35,179,39],[186,36,179,40],[186,37,179,41],[186,39,179,43,"defaults"],[186,47,179,51],[186,49,179,53,"options"],[186,56,179,60],[186,57,179,61],[187,8,180,12],[187,14,180,18,"u"],[187,15,180,19],[187,18,180,22,"hash_to_field"],[187,31,180,35],[187,32,180,36,"msg"],[187,35,180,39],[187,37,180,41],[187,38,180,42],[187,40,180,44,"opts"],[187,44,180,48],[187,45,180,49],[188,8,181,12],[188,14,181,18,"u0"],[188,16,181,20],[188,19,181,23,"map"],[188,22,181,26],[188,23,181,27,"u"],[188,24,181,28],[188,25,181,29],[188,26,181,30],[188,27,181,31],[188,28,181,32],[189,8,182,12],[189,14,182,18,"u1"],[189,16,182,20],[189,19,182,23,"map"],[189,22,182,26],[189,23,182,27,"u"],[189,24,182,28],[189,25,182,29],[189,26,182,30],[189,27,182,31],[189,28,182,32],[190,8,183,12],[190,15,183,19,"clear"],[190,20,183,24],[190,21,183,25,"u0"],[190,23,183,27],[190,24,183,28,"add"],[190,27,183,31],[190,28,183,32,"u1"],[190,30,183,34],[190,31,183,35],[190,32,183,36],[191,6,184,8],[191,7,184,9],[192,6,185,8,"encodeToCurve"],[192,19,185,21,"encodeToCurve"],[192,20,185,22,"msg"],[192,23,185,25],[192,25,185,27,"options"],[192,32,185,34],[192,34,185,36],[193,8,186,12],[193,14,186,18,"optsDst"],[193,21,186,25],[193,24,186,28,"defaults"],[193,32,186,36],[193,33,186,37,"encodeDST"],[193,42,186,46],[193,45,186,49],[194,10,186,51,"DST"],[194,13,186,54],[194,15,186,56,"defaults"],[194,23,186,64],[194,24,186,65,"encodeDST"],[195,8,186,75],[195,9,186,76],[195,12,186,79],[195,13,186,80],[195,14,186,81],[196,8,187,12],[196,14,187,18,"opts"],[196,18,187,22],[196,21,187,25,"Object"],[196,27,187,31],[196,28,187,32,"assign"],[196,34,187,38],[196,35,187,39],[196,36,187,40],[196,37,187,41],[196,39,187,43,"defaults"],[196,47,187,51],[196,49,187,53,"optsDst"],[196,56,187,60],[196,58,187,62,"options"],[196,65,187,69],[196,66,187,70],[197,8,188,12],[197,14,188,18,"u"],[197,15,188,19],[197,18,188,22,"hash_to_field"],[197,31,188,35],[197,32,188,36,"msg"],[197,35,188,39],[197,37,188,41],[197,38,188,42],[197,40,188,44,"opts"],[197,44,188,48],[197,45,188,49],[198,8,189,12],[198,14,189,18,"u0"],[198,16,189,20],[198,19,189,23,"map"],[198,22,189,26],[198,23,189,27,"u"],[198,24,189,28],[198,25,189,29],[198,26,189,30],[198,27,189,31],[198,28,189,32],[199,8,190,12],[199,15,190,19,"clear"],[199,20,190,24],[199,21,190,25,"u0"],[199,23,190,27],[199,24,190,28],[200,6,191,8],[200,7,191,9],[201,6,192,8],[202,6,193,8,"mapToCurve"],[202,16,193,18,"mapToCurve"],[202,17,193,19,"scalars"],[202,24,193,26],[202,26,193,28],[203,8,194,12],[203,12,194,16],[203,13,194,17,"Array"],[203,18,194,22],[203,19,194,23,"isArray"],[203,26,194,30],[203,27,194,31,"scalars"],[203,34,194,38],[203,35,194,39],[203,37,195,16],[203,43,195,22],[203,47,195,26,"Error"],[203,52,195,31],[203,53,195,32],[203,80,195,59],[203,81,195,60],[204,8,196,12],[204,13,196,17],[204,19,196,23,"i"],[204,20,196,24],[204,24,196,28,"scalars"],[204,31,196,35],[204,33,197,16],[204,37,197,20],[204,44,197,27,"i"],[204,45,197,28],[204,50,197,33],[204,58,197,41],[204,60,198,20],[204,66,198,26],[204,70,198,30,"Error"],[204,75,198,35],[204,76,198,36],[204,103,198,63],[204,104,198,64],[205,8,199,12],[205,15,199,19,"clear"],[205,20,199,24],[205,21,199,25,"map"],[205,24,199,28],[205,25,199,29,"scalars"],[205,32,199,36],[205,33,199,37],[205,34,199,38],[206,6,200,8],[206,7,200,9],[207,6,201,8],[208,6,202,8],[209,6,203,8,"hashToScalar"],[209,18,203,20,"hashToScalar"],[209,19,203,21,"msg"],[209,22,203,24],[209,24,203,26,"options"],[209,31,203,33],[209,33,203,35],[210,8,204,12],[211,8,205,12],[211,14,205,18,"N"],[211,15,205,19],[211,18,205,22,"Point"],[211,23,205,27],[211,24,205,28,"Fn"],[211,26,205,30],[211,27,205,31,"ORDER"],[211,32,205,36],[212,8,206,12],[212,14,206,18,"opts"],[212,18,206,22],[212,21,206,25,"Object"],[212,27,206,31],[212,28,206,32,"assign"],[212,34,206,38],[212,35,206,39],[212,36,206,40],[212,37,206,41],[212,39,206,43,"defaults"],[212,47,206,51],[212,49,206,53],[213,10,206,55,"p"],[213,11,206,56],[213,13,206,58,"N"],[213,14,206,59],[214,10,206,61,"m"],[214,11,206,62],[214,13,206,64],[214,14,206,65],[215,10,206,67,"DST"],[215,13,206,70],[215,15,206,72,"exports"],[215,22,206,79],[215,23,206,80,"_DST_scalar"],[216,8,206,92],[216,9,206,93],[216,11,206,95,"options"],[216,18,206,102],[216,19,206,103],[217,8,207,12],[217,15,207,19,"hash_to_field"],[217,28,207,32],[217,29,207,33,"msg"],[217,32,207,36],[217,34,207,38],[217,35,207,39],[217,37,207,41,"opts"],[217,41,207,45],[217,42,207,46],[217,43,207,47],[217,44,207,48],[217,45,207,49],[217,46,207,50],[217,47,207,51],[217,48,207,52],[218,6,208,8],[219,4,209,4],[219,5,209,5],[220,2,210,0],[221,0,210,1],[221,3]],"functionMap":{"names":["<global>","i2osp","strxor","anum","normDST","expand_message_xmd","expand_message_xof","hash_to_field","isogenyMap","map.map$argument_0","<anonymous>","coeff.map$argument_0","val.reduce$argument_0","createHasher","map","clear","hashToCurve","encodeToCurve","mapToCurve","hashToScalar"],"mappings":"AAA;ACa;CDW;AEC;CFM;AGC;CHG;AIC;CJI;AKK;CLuB;AMQ;CNmB;AOS;CPwC;AQC;0BCE,8BD;WEC;2CCC,oBC,2CD,CD;KFS;CRC;AaG;ICG;KDE;IEC;KFM;QGG;SHM;QIC;SJM;QKE;SLO;QMG;SNK;CbE"}},"type":"js/module"}]}