{"dependencies":[{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":17,"index":186},"end":{"line":6,"column":39,"index":208}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI=","exportNames":["*"]}},{"name":"randombytes","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":18,"index":227},"end":{"line":7,"column":40,"index":249}}],"key":"HRppB8l92kfLq10/yqHPiqGAuBY=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  function oldBrowser() {\n    throw new Error('secure random number generation not supported by this browser\\nuse chrome, FireFox or Internet Explorer 11');\n  }\n  var safeBuffer = require(_dependencyMap[0], \"safe-buffer\");\n  var randombytes = require(_dependencyMap[1], \"randombytes\");\n  var Buffer = safeBuffer.Buffer;\n  var kBufferMaxLength = safeBuffer.kMaxLength;\n  var crypto = global.crypto || global.msCrypto;\n  var kMaxUint32 = Math.pow(2, 32) - 1;\n  function assertOffset(offset, length) {\n    if (typeof offset !== 'number' || offset !== offset) {\n      // eslint-disable-line no-self-compare\n      throw new TypeError('offset must be a number');\n    }\n    if (offset > kMaxUint32 || offset < 0) {\n      throw new TypeError('offset must be a uint32');\n    }\n    if (offset > kBufferMaxLength || offset > length) {\n      throw new RangeError('offset out of range');\n    }\n  }\n  function assertSize(size, offset, length) {\n    if (typeof size !== 'number' || size !== size) {\n      // eslint-disable-line no-self-compare\n      throw new TypeError('size must be a number');\n    }\n    if (size > kMaxUint32 || size < 0) {\n      throw new TypeError('size must be a uint32');\n    }\n    if (size + offset > length || size > kBufferMaxLength) {\n      throw new RangeError('buffer too small');\n    }\n  }\n  if (crypto && crypto.getRandomValues || !process.browser) {\n    exports.randomFill = randomFill;\n    exports.randomFillSync = randomFillSync;\n  } else {\n    exports.randomFill = oldBrowser;\n    exports.randomFillSync = oldBrowser;\n  }\n  function randomFill(buf, offset, size, cb) {\n    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n      throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array');\n    }\n    if (typeof offset === 'function') {\n      cb = offset;\n      offset = 0;\n      size = buf.length;\n    } else if (typeof size === 'function') {\n      cb = size;\n      size = buf.length - offset;\n    } else if (typeof cb !== 'function') {\n      throw new TypeError('\"cb\" argument must be a function');\n    }\n    assertOffset(offset, buf.length);\n    assertSize(size, offset, buf.length);\n    return actualFill(buf, offset, size, cb);\n  }\n  function actualFill(buf, offset, size, cb) {\n    if (process.browser) {\n      var ourBuf = buf.buffer;\n      var uint = new Uint8Array(ourBuf, offset, size);\n      crypto.getRandomValues(uint);\n      if (cb) {\n        process.nextTick(function () {\n          cb(null, buf);\n        });\n        return;\n      }\n      return buf;\n    }\n    if (cb) {\n      randombytes(size, function (err, bytes) {\n        if (err) {\n          return cb(err);\n        }\n        bytes.copy(buf, offset);\n        cb(null, buf);\n      });\n      return;\n    }\n    var bytes = randombytes(size);\n    bytes.copy(buf, offset);\n    return buf;\n  }\n  function randomFillSync(buf, offset, size) {\n    if (typeof offset === 'undefined') {\n      offset = 0;\n    }\n    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n      throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array');\n    }\n    assertOffset(offset, buf.length);\n    if (size === undefined) size = buf.length - offset;\n    assertSize(size, offset, buf.length);\n    return actualFill(buf, offset, size);\n  }\n});","lineCount":101,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,11,3,9,"oldBrowser"],[4,21,3,19,"oldBrowser"],[4,22,3,19],[4,24,3,23],[5,4,4,2],[5,10,4,8],[5,14,4,12,"Error"],[5,19,4,17],[5,20,4,18],[5,128,4,126],[5,129,4,127],[6,2,5,0],[7,2,6,0],[7,6,6,4,"safeBuffer"],[7,16,6,14],[7,19,6,17,"require"],[7,26,6,24],[7,27,6,24,"_dependencyMap"],[7,41,6,24],[7,59,6,38],[7,60,6,39],[8,2,7,0],[8,6,7,4,"randombytes"],[8,17,7,15],[8,20,7,18,"require"],[8,27,7,25],[8,28,7,25,"_dependencyMap"],[8,42,7,25],[8,60,7,39],[8,61,7,40],[9,2,8,0],[9,6,8,4,"Buffer"],[9,12,8,10],[9,15,8,13,"safeBuffer"],[9,25,8,23],[9,26,8,24,"Buffer"],[9,32,8,30],[10,2,9,0],[10,6,9,4,"kBufferMaxLength"],[10,22,9,20],[10,25,9,23,"safeBuffer"],[10,35,9,33],[10,36,9,34,"kMaxLength"],[10,46,9,44],[11,2,10,0],[11,6,10,4,"crypto"],[11,12,10,10],[11,15,10,13,"global"],[11,21,10,19],[11,22,10,20,"crypto"],[11,28,10,26],[11,32,10,30,"global"],[11,38,10,36],[11,39,10,37,"msCrypto"],[11,47,10,45],[12,2,11,0],[12,6,11,4,"kMaxUint32"],[12,16,11,14],[12,19,11,17,"Math"],[12,23,11,21],[12,24,11,22,"pow"],[12,27,11,25],[12,28,11,26],[12,29,11,27],[12,31,11,29],[12,33,11,31],[12,34,11,32],[12,37,11,35],[12,38,11,36],[13,2,12,0],[13,11,12,9,"assertOffset"],[13,23,12,21,"assertOffset"],[13,24,12,23,"offset"],[13,30,12,29],[13,32,12,31,"length"],[13,38,12,37],[13,40,12,39],[14,4,13,2],[14,8,13,6],[14,15,13,13,"offset"],[14,21,13,19],[14,26,13,24],[14,34,13,32],[14,38,13,36,"offset"],[14,44,13,42],[14,49,13,47,"offset"],[14,55,13,53],[14,57,13,55],[15,6,13,57],[16,6,14,4],[16,12,14,10],[16,16,14,14,"TypeError"],[16,25,14,23],[16,26,14,24],[16,51,14,49],[16,52,14,50],[17,4,15,2],[18,4,17,2],[18,8,17,6,"offset"],[18,14,17,12],[18,17,17,15,"kMaxUint32"],[18,27,17,25],[18,31,17,29,"offset"],[18,37,17,35],[18,40,17,38],[18,41,17,39],[18,43,17,41],[19,6,18,4],[19,12,18,10],[19,16,18,14,"TypeError"],[19,25,18,23],[19,26,18,24],[19,51,18,49],[19,52,18,50],[20,4,19,2],[21,4,21,2],[21,8,21,6,"offset"],[21,14,21,12],[21,17,21,15,"kBufferMaxLength"],[21,33,21,31],[21,37,21,35,"offset"],[21,43,21,41],[21,46,21,44,"length"],[21,52,21,50],[21,54,21,52],[22,6,22,4],[22,12,22,10],[22,16,22,14,"RangeError"],[22,26,22,24],[22,27,22,25],[22,48,22,46],[22,49,22,47],[23,4,23,2],[24,2,24,0],[25,2,26,0],[25,11,26,9,"assertSize"],[25,21,26,19,"assertSize"],[25,22,26,21,"size"],[25,26,26,25],[25,28,26,27,"offset"],[25,34,26,33],[25,36,26,35,"length"],[25,42,26,41],[25,44,26,43],[26,4,27,2],[26,8,27,6],[26,15,27,13,"size"],[26,19,27,17],[26,24,27,22],[26,32,27,30],[26,36,27,34,"size"],[26,40,27,38],[26,45,27,43,"size"],[26,49,27,47],[26,51,27,49],[27,6,27,51],[28,6,28,4],[28,12,28,10],[28,16,28,14,"TypeError"],[28,25,28,23],[28,26,28,24],[28,49,28,47],[28,50,28,48],[29,4,29,2],[30,4,31,2],[30,8,31,6,"size"],[30,12,31,10],[30,15,31,13,"kMaxUint32"],[30,25,31,23],[30,29,31,27,"size"],[30,33,31,31],[30,36,31,34],[30,37,31,35],[30,39,31,37],[31,6,32,4],[31,12,32,10],[31,16,32,14,"TypeError"],[31,25,32,23],[31,26,32,24],[31,49,32,47],[31,50,32,48],[32,4,33,2],[33,4,35,2],[33,8,35,6,"size"],[33,12,35,10],[33,15,35,13,"offset"],[33,21,35,19],[33,24,35,22,"length"],[33,30,35,28],[33,34,35,32,"size"],[33,38,35,36],[33,41,35,39,"kBufferMaxLength"],[33,57,35,55],[33,59,35,57],[34,6,36,4],[34,12,36,10],[34,16,36,14,"RangeError"],[34,26,36,24],[34,27,36,25],[34,45,36,43],[34,46,36,44],[35,4,37,2],[36,2,38,0],[37,2,39,0],[37,6,39,5,"crypto"],[37,12,39,11],[37,16,39,15,"crypto"],[37,22,39,21],[37,23,39,22,"getRandomValues"],[37,38,39,37],[37,42,39,42],[37,43,39,43,"process"],[37,50,39,50],[37,51,39,51,"browser"],[37,58,39,58],[37,60,39,60],[38,4,40,2,"exports"],[38,11,40,9],[38,12,40,10,"randomFill"],[38,22,40,20],[38,25,40,23,"randomFill"],[38,35,40,33],[39,4,41,2,"exports"],[39,11,41,9],[39,12,41,10,"randomFillSync"],[39,26,41,24],[39,29,41,27,"randomFillSync"],[39,43,41,41],[40,2,42,0],[40,3,42,1],[40,9,42,7],[41,4,43,2,"exports"],[41,11,43,9],[41,12,43,10,"randomFill"],[41,22,43,20],[41,25,43,23,"oldBrowser"],[41,35,43,33],[42,4,44,2,"exports"],[42,11,44,9],[42,12,44,10,"randomFillSync"],[42,26,44,24],[42,29,44,27,"oldBrowser"],[42,39,44,37],[43,2,45,0],[44,2,46,0],[44,11,46,9,"randomFill"],[44,21,46,19,"randomFill"],[44,22,46,21,"buf"],[44,25,46,24],[44,27,46,26,"offset"],[44,33,46,32],[44,35,46,34,"size"],[44,39,46,38],[44,41,46,40,"cb"],[44,43,46,42],[44,45,46,44],[45,4,47,2],[45,8,47,6],[45,9,47,7,"Buffer"],[45,15,47,13],[45,16,47,14,"isBuffer"],[45,24,47,22],[45,25,47,23,"buf"],[45,28,47,26],[45,29,47,27],[45,33,47,31],[45,35,47,33,"buf"],[45,38,47,36],[45,50,47,48,"global"],[45,56,47,54],[45,57,47,55,"Uint8Array"],[45,67,47,65],[45,68,47,66],[45,70,47,68],[46,6,48,4],[46,12,48,10],[46,16,48,14,"TypeError"],[46,25,48,23],[46,26,48,24],[46,73,48,71],[46,74,48,72],[47,4,49,2],[48,4,51,2],[48,8,51,6],[48,15,51,13,"offset"],[48,21,51,19],[48,26,51,24],[48,36,51,34],[48,38,51,36],[49,6,52,4,"cb"],[49,8,52,6],[49,11,52,9,"offset"],[49,17,52,15],[50,6,53,4,"offset"],[50,12,53,10],[50,15,53,13],[50,16,53,14],[51,6,54,4,"size"],[51,10,54,8],[51,13,54,11,"buf"],[51,16,54,14],[51,17,54,15,"length"],[51,23,54,21],[52,4,55,2],[52,5,55,3],[52,11,55,9],[52,15,55,13],[52,22,55,20,"size"],[52,26,55,24],[52,31,55,29],[52,41,55,39],[52,43,55,41],[53,6,56,4,"cb"],[53,8,56,6],[53,11,56,9,"size"],[53,15,56,13],[54,6,57,4,"size"],[54,10,57,8],[54,13,57,11,"buf"],[54,16,57,14],[54,17,57,15,"length"],[54,23,57,21],[54,26,57,24,"offset"],[54,32,57,30],[55,4,58,2],[55,5,58,3],[55,11,58,9],[55,15,58,13],[55,22,58,20,"cb"],[55,24,58,22],[55,29,58,27],[55,39,58,37],[55,41,58,39],[56,6,59,4],[56,12,59,10],[56,16,59,14,"TypeError"],[56,25,59,23],[56,26,59,24],[56,60,59,58],[56,61,59,59],[57,4,60,2],[58,4,61,2,"assertOffset"],[58,16,61,14],[58,17,61,15,"offset"],[58,23,61,21],[58,25,61,23,"buf"],[58,28,61,26],[58,29,61,27,"length"],[58,35,61,33],[58,36,61,34],[59,4,62,2,"assertSize"],[59,14,62,12],[59,15,62,13,"size"],[59,19,62,17],[59,21,62,19,"offset"],[59,27,62,25],[59,29,62,27,"buf"],[59,32,62,30],[59,33,62,31,"length"],[59,39,62,37],[59,40,62,38],[60,4,63,2],[60,11,63,9,"actualFill"],[60,21,63,19],[60,22,63,20,"buf"],[60,25,63,23],[60,27,63,25,"offset"],[60,33,63,31],[60,35,63,33,"size"],[60,39,63,37],[60,41,63,39,"cb"],[60,43,63,41],[60,44,63,42],[61,2,64,0],[62,2,66,0],[62,11,66,9,"actualFill"],[62,21,66,19,"actualFill"],[62,22,66,21,"buf"],[62,25,66,24],[62,27,66,26,"offset"],[62,33,66,32],[62,35,66,34,"size"],[62,39,66,38],[62,41,66,40,"cb"],[62,43,66,42],[62,45,66,44],[63,4,67,2],[63,8,67,6,"process"],[63,15,67,13],[63,16,67,14,"browser"],[63,23,67,21],[63,25,67,23],[64,6,68,4],[64,10,68,8,"ourBuf"],[64,16,68,14],[64,19,68,17,"buf"],[64,22,68,20],[64,23,68,21,"buffer"],[64,29,68,27],[65,6,69,4],[65,10,69,8,"uint"],[65,14,69,12],[65,17,69,15],[65,21,69,19,"Uint8Array"],[65,31,69,29],[65,32,69,30,"ourBuf"],[65,38,69,36],[65,40,69,38,"offset"],[65,46,69,44],[65,48,69,46,"size"],[65,52,69,50],[65,53,69,51],[66,6,70,4,"crypto"],[66,12,70,10],[66,13,70,11,"getRandomValues"],[66,28,70,26],[66,29,70,27,"uint"],[66,33,70,31],[66,34,70,32],[67,6,71,4],[67,10,71,8,"cb"],[67,12,71,10],[67,14,71,12],[68,8,72,6,"process"],[68,15,72,13],[68,16,72,14,"nextTick"],[68,24,72,22],[68,25,72,23],[68,37,72,35],[69,10,73,8,"cb"],[69,12,73,10],[69,13,73,11],[69,17,73,15],[69,19,73,17,"buf"],[69,22,73,20],[69,23,73,21],[70,8,74,6],[70,9,74,7],[70,10,74,8],[71,8,75,6],[72,6,76,4],[73,6,77,4],[73,13,77,11,"buf"],[73,16,77,14],[74,4,78,2],[75,4,79,2],[75,8,79,6,"cb"],[75,10,79,8],[75,12,79,10],[76,6,80,4,"randombytes"],[76,17,80,15],[76,18,80,16,"size"],[76,22,80,20],[76,24,80,22],[76,34,80,32,"err"],[76,37,80,35],[76,39,80,37,"bytes"],[76,44,80,42],[76,46,80,44],[77,8,81,6],[77,12,81,10,"err"],[77,15,81,13],[77,17,81,15],[78,10,82,8],[78,17,82,15,"cb"],[78,19,82,17],[78,20,82,18,"err"],[78,23,82,21],[78,24,82,22],[79,8,83,6],[80,8,84,6,"bytes"],[80,13,84,11],[80,14,84,12,"copy"],[80,18,84,16],[80,19,84,17,"buf"],[80,22,84,20],[80,24,84,22,"offset"],[80,30,84,28],[80,31,84,29],[81,8,85,6,"cb"],[81,10,85,8],[81,11,85,9],[81,15,85,13],[81,17,85,15,"buf"],[81,20,85,18],[81,21,85,19],[82,6,86,4],[82,7,86,5],[82,8,86,6],[83,6,87,4],[84,4,88,2],[85,4,89,2],[85,8,89,6,"bytes"],[85,13,89,11],[85,16,89,14,"randombytes"],[85,27,89,25],[85,28,89,26,"size"],[85,32,89,30],[85,33,89,31],[86,4,90,2,"bytes"],[86,9,90,7],[86,10,90,8,"copy"],[86,14,90,12],[86,15,90,13,"buf"],[86,18,90,16],[86,20,90,18,"offset"],[86,26,90,24],[86,27,90,25],[87,4,91,2],[87,11,91,9,"buf"],[87,14,91,12],[88,2,92,0],[89,2,93,0],[89,11,93,9,"randomFillSync"],[89,25,93,23,"randomFillSync"],[89,26,93,25,"buf"],[89,29,93,28],[89,31,93,30,"offset"],[89,37,93,36],[89,39,93,38,"size"],[89,43,93,42],[89,45,93,44],[90,4,94,2],[90,8,94,6],[90,15,94,13,"offset"],[90,21,94,19],[90,26,94,24],[90,37,94,35],[90,39,94,37],[91,6,95,4,"offset"],[91,12,95,10],[91,15,95,13],[91,16,95,14],[92,4,96,2],[93,4,97,2],[93,8,97,6],[93,9,97,7,"Buffer"],[93,15,97,13],[93,16,97,14,"isBuffer"],[93,24,97,22],[93,25,97,23,"buf"],[93,28,97,26],[93,29,97,27],[93,33,97,31],[93,35,97,33,"buf"],[93,38,97,36],[93,50,97,48,"global"],[93,56,97,54],[93,57,97,55,"Uint8Array"],[93,67,97,65],[93,68,97,66],[93,70,97,68],[94,6,98,4],[94,12,98,10],[94,16,98,14,"TypeError"],[94,25,98,23],[94,26,98,24],[94,73,98,71],[94,74,98,72],[95,4,99,2],[96,4,101,2,"assertOffset"],[96,16,101,14],[96,17,101,15,"offset"],[96,23,101,21],[96,25,101,23,"buf"],[96,28,101,26],[96,29,101,27,"length"],[96,35,101,33],[96,36,101,34],[97,4,103,2],[97,8,103,6,"size"],[97,12,103,10],[97,17,103,15,"undefined"],[97,26,103,24],[97,28,103,26,"size"],[97,32,103,30],[97,35,103,33,"buf"],[97,38,103,36],[97,39,103,37,"length"],[97,45,103,43],[97,48,103,46,"offset"],[97,54,103,52],[98,4,105,2,"assertSize"],[98,14,105,12],[98,15,105,13,"size"],[98,19,105,17],[98,21,105,19,"offset"],[98,27,105,25],[98,29,105,27,"buf"],[98,32,105,30],[98,33,105,31,"length"],[98,39,105,37],[98,40,105,38],[99,4,107,2],[99,11,107,9,"actualFill"],[99,21,107,19],[99,22,107,20,"buf"],[99,25,107,23],[99,27,107,25,"offset"],[99,33,107,31],[99,35,107,33,"size"],[99,39,107,37],[99,40,107,38],[100,2,108,0],[101,0,108,1],[101,3]],"functionMap":{"names":["<global>","oldBrowser","assertOffset","assertSize","randomFill","actualFill","process.nextTick$argument_0","randombytes$argument_1","randomFillSync"],"mappings":"AAA;ACE;CDE;AEO;CFY;AGE;CHY;AIQ;CJkB;AKE;uBCM;ODE;sBEM;KFM;CLM;AQC;CRe"}},"type":"js/module"}]}