{"dependencies":[{"name":"@noble/hashes/sha2.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":312},"end":{"line":9,"column":47,"index":359}}],"key":"6+AQdZFmgXxbBRsj7vXjiW169Ao=","exportNames":["*"]}},{"name":"@noble/hashes/utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":360},"end":{"line":10,"column":53,"index":413}}],"key":"9JUbQ31V1iDWPVrlEOLWo2H+V7Q=","exportNames":["*"]}},{"name":"./_shortw_utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":414},"end":{"line":11,"column":49,"index":463}}],"key":"qfak+fZeAAdpyPs7gJkb3vcu3gM=","exportNames":["*"]}},{"name":"./abstract/hash-to-curve.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":464},"end":{"line":12,"column":72,"index":536}}],"key":"6cIrPYlRjjJUQl2gr4hN6UWsQZg=","exportNames":["*"]}},{"name":"./abstract/modular.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":537},"end":{"line":13,"column":73,"index":610}}],"key":"x/hC1jRUt/ly9bL40f8FeUx///E=","exportNames":["*"]}},{"name":"./abstract/weierstrass.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":611},"end":{"line":14,"column":81,"index":692}}],"key":"yErLR4yREQp6ndIwpB6BpPlLSiM=","exportNames":["*"]}},{"name":"./utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":693},"end":{"line":15,"column":111,"index":804}}],"key":"NIaSEHO1E48gsZc7jH9Ex1xTHgE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.secp256k1_hasher = exports.secp256k1 = exports.schnorr = exports.hashToCurve = exports.encodeToCurve = void 0;\n  var _sha = require(_dependencyMap[0], \"@noble/hashes/sha2.js\");\n  var _utils = require(_dependencyMap[1], \"@noble/hashes/utils.js\");\n  var _shortw_utils = require(_dependencyMap[2], \"./_shortw_utils.js\");\n  var _hashToCurve = require(_dependencyMap[3], \"./abstract/hash-to-curve.js\");\n  var _modular = require(_dependencyMap[4], \"./abstract/modular.js\");\n  var _weierstrass = require(_dependencyMap[5], \"./abstract/weierstrass.js\");\n  var _utils2 = require(_dependencyMap[6], \"./utils.js\");\n  /**\n   * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n   *\n   * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism ψ,\n   * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n  // Seems like generator was produced from some seed:\n  // `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\n  // // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\n  const secp256k1_CURVE = {\n    p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: BigInt(1),\n    a: BigInt(0),\n    b: BigInt(7),\n    Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n    Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8')\n  };\n  const secp256k1_ENDO = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    basises: [[BigInt('0x3086d221a7d46bcde86c90e49284eb15'), -BigInt('0xe4437ed6010e88286f547fa90abfe4c3')], [BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'), BigInt('0x3086d221a7d46bcde86c90e49284eb15')]]\n  };\n  const _0n = /* @__PURE__ */BigInt(0);\n  const _1n = /* @__PURE__ */BigInt(1);\n  const _2n = /* @__PURE__ */BigInt(2);\n  /**\n   * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n   * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n   */\n  function sqrtMod(y) {\n    const P = secp256k1_CURVE.p;\n    // prettier-ignore\n    const _3n = BigInt(3),\n      _6n = BigInt(6),\n      _11n = BigInt(11),\n      _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23),\n      _44n = BigInt(44),\n      _88n = BigInt(88);\n    const b2 = y * y * y % P; // x^3, 11\n    const b3 = b2 * b2 * y % P; // x^7\n    const b6 = (0, _modular.pow2)(b3, _3n, P) * b3 % P;\n    const b9 = (0, _modular.pow2)(b6, _3n, P) * b3 % P;\n    const b11 = (0, _modular.pow2)(b9, _2n, P) * b2 % P;\n    const b22 = (0, _modular.pow2)(b11, _11n, P) * b11 % P;\n    const b44 = (0, _modular.pow2)(b22, _22n, P) * b22 % P;\n    const b88 = (0, _modular.pow2)(b44, _44n, P) * b44 % P;\n    const b176 = (0, _modular.pow2)(b88, _88n, P) * b88 % P;\n    const b220 = (0, _modular.pow2)(b176, _44n, P) * b44 % P;\n    const b223 = (0, _modular.pow2)(b220, _3n, P) * b3 % P;\n    const t1 = (0, _modular.pow2)(b223, _23n, P) * b22 % P;\n    const t2 = (0, _modular.pow2)(t1, _6n, P) * b2 % P;\n    const root = (0, _modular.pow2)(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n    return root;\n  }\n  const Fpk1 = (0, _modular.Field)(secp256k1_CURVE.p, {\n    sqrt: sqrtMod\n  });\n  /**\n   * secp256k1 curve, ECDSA and ECDH methods.\n   *\n   * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n   *\n   * @example\n   * ```js\n   * import { secp256k1 } from '@noble/curves/secp256k1';\n   * const { secretKey, publicKey } = secp256k1.keygen();\n   * const msg = new TextEncoder().encode('hello');\n   * const sig = secp256k1.sign(msg, secretKey);\n   * const isValid = secp256k1.verify(sig, msg, publicKey) === true;\n   * ```\n   */\n  const secp256k1 = exports.secp256k1 = (0, _shortw_utils.createCurve)(Object.assign({}, secp256k1_CURVE, {\n    Fp: Fpk1,\n    lowS: true,\n    endo: secp256k1_ENDO\n  }), _sha.sha256);\n  // Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n  // https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n  /** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\n  const TAGGED_HASH_PREFIXES = {};\n  function taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n      const tagH = (0, _sha.sha256)((0, _utils2.utf8ToBytes)(tag));\n      tagP = (0, _utils2.concatBytes)(tagH, tagH);\n      TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return (0, _sha.sha256)((0, _utils2.concatBytes)(tagP, ...messages));\n  }\n  // ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\n  const pointToBytes = point => point.toBytes(true).slice(1);\n  const Pointk1 = /* @__PURE__ */(() => secp256k1.Point)();\n  const hasEven = y => y % _2n === _0n;\n  // Calculate point, scalar and bytes\n  function schnorrGetExtPubKey(priv) {\n    const {\n      Fn,\n      BASE\n    } = Pointk1;\n    const d_ = (0, _weierstrass._normFnElement)(Fn, priv);\n    const p = BASE.multiply(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = hasEven(p.y) ? d_ : Fn.neg(d_);\n    return {\n      scalar,\n      bytes: pointToBytes(p)\n    };\n  }\n  /**\n   * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n   * @returns valid point checked for being on-curve\n   */\n  function lift_x(x) {\n    const Fp = Fpk1;\n    if (!Fp.isValidNot0(x)) throw new Error('invalid x: Fail if x ≥ p');\n    const xx = Fp.create(x * x);\n    const c = Fp.create(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = Fp.sqrt(c); // Let y = c^(p+1)/4 mod p. Same as sqrt().\n    // Return the unique point P such that x(P) = x and\n    // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    if (!hasEven(y)) y = Fp.neg(y);\n    const p = Pointk1.fromAffine({\n      x,\n      y\n    });\n    p.assertValidity();\n    return p;\n  }\n  const num = _utils2.bytesToNumberBE;\n  /**\n   * Create tagged hash, convert it to bigint, reduce modulo-n.\n   */\n  function challenge(...args) {\n    return Pointk1.Fn.create(num(taggedHash('BIP0340/challenge', ...args)));\n  }\n  /**\n   * Schnorr public key is just `x` coordinate of Point as per BIP340.\n   */\n  function schnorrGetPublicKey(secretKey) {\n    return schnorrGetExtPubKey(secretKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n  }\n  /**\n   * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n   * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n   */\n  function schnorrSign(message, secretKey, auxRand = (0, _utils.randomBytes)(32)) {\n    const {\n      Fn\n    } = Pointk1;\n    const m = (0, _utils2.ensureBytes)('message', message);\n    const {\n      bytes: px,\n      scalar: d\n    } = schnorrGetExtPubKey(secretKey); // checks for isWithinCurveOrder\n    const a = (0, _utils2.ensureBytes)('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = Fn.toBytes(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    // Let k' = int(rand) mod n. Fail if k' = 0. Let R = k'⋅G\n    const {\n      bytes: rx,\n      scalar: k\n    } = schnorrGetExtPubKey(rand);\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(Fn.toBytes(Fn.create(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n    return sig;\n  }\n  /**\n   * Verifies Schnorr signature.\n   * Will swallow errors & return false except for initial type validation of arguments.\n   */\n  function schnorrVerify(signature, message, publicKey) {\n    const {\n      Fn,\n      BASE\n    } = Pointk1;\n    const sig = (0, _utils2.ensureBytes)('signature', signature, 64);\n    const m = (0, _utils2.ensureBytes)('message', message);\n    const pub = (0, _utils2.ensureBytes)('publicKey', publicKey, 32);\n    try {\n      const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n      const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n      if (!(0, _utils2.inRange)(r, _1n, secp256k1_CURVE.p)) return false;\n      const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n      if (!(0, _utils2.inRange)(s, _1n, secp256k1_CURVE.n)) return false;\n      // int(challenge(bytes(r)||bytes(P)||m))%n\n      const e = challenge(Fn.toBytes(r), pointToBytes(P), m);\n      // R = s⋅G - e⋅P, where -eP == (n-e)P\n      const R = BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(Fn.neg(e)));\n      const {\n        x,\n        y\n      } = R.toAffine();\n      // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n      if (R.is0() || !hasEven(y) || x !== r) return false;\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\n   * Schnorr signatures over secp256k1.\n   * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n   * @example\n   * ```js\n   * import { schnorr } from '@noble/curves/secp256k1';\n   * const { secretKey, publicKey } = schnorr.keygen();\n   * // const publicKey = schnorr.getPublicKey(secretKey);\n   * const msg = new TextEncoder().encode('hello');\n   * const sig = schnorr.sign(msg, secretKey);\n   * const isValid = schnorr.verify(sig, msg, publicKey);\n   * ```\n   */\n  const schnorr = exports.schnorr = /* @__PURE__ */(() => {\n    const size = 32;\n    const seedLength = 48;\n    const randomSecretKey = (seed = (0, _utils.randomBytes)(seedLength)) => {\n      return (0, _modular.mapHashToField)(seed, secp256k1_CURVE.n);\n    };\n    // TODO: remove\n    secp256k1.utils.randomSecretKey;\n    function keygen(seed) {\n      const secretKey = randomSecretKey(seed);\n      return {\n        secretKey,\n        publicKey: schnorrGetPublicKey(secretKey)\n      };\n    }\n    return {\n      keygen,\n      getPublicKey: schnorrGetPublicKey,\n      sign: schnorrSign,\n      verify: schnorrVerify,\n      Point: Pointk1,\n      utils: {\n        randomSecretKey: randomSecretKey,\n        randomPrivateKey: randomSecretKey,\n        taggedHash,\n        // TODO: remove\n        lift_x,\n        pointToBytes,\n        numberToBytesBE: _utils2.numberToBytesBE,\n        bytesToNumberBE: _utils2.bytesToNumberBE,\n        mod: _modular.mod\n      },\n      lengths: {\n        secretKey: size,\n        publicKey: size,\n        publicKeyHasPrefix: false,\n        signature: size * 2,\n        seed: seedLength\n      }\n    };\n  })();\n  const isoMap = /* @__PURE__ */(() => (0, _hashToCurve.isogenyMap)(Fpk1, [\n  // xNum\n  ['0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7', '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581', '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262', '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c'],\n  // xDen\n  ['0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b', '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n  ],\n  // yNum\n  ['0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c', '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3', '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931', '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84'],\n  // yDen\n  ['0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b', '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573', '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n  ]].map(i => i.map(j => BigInt(j)))))();\n  const mapSWU = /* @__PURE__ */(() => (0, _weierstrass.mapToCurveSimpleSWU)(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11'))\n  }))();\n  /** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\n  const secp256k1_hasher = exports.secp256k1_hasher = /* @__PURE__ */(() => (0, _hashToCurve.createHasher)(secp256k1.Point, scalars => {\n    const {\n      x,\n      y\n    } = mapSWU(Fpk1.create(scalars[0]));\n    return isoMap(x, y);\n  }, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fpk1.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: _sha.sha256\n  }))();\n  /** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\n  const hashToCurve = exports.hashToCurve = /* @__PURE__ */(() => secp256k1_hasher.hashToCurve)();\n  /** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\n  const encodeToCurve = exports.encodeToCurve = /* @__PURE__ */(() => secp256k1_hasher.encodeToCurve)();\n});","lineCount":311,"map":[[6,2,9,0],[6,6,9,0,"_sha"],[6,10,9,0],[6,13,9,0,"require"],[6,20,9,0],[6,21,9,0,"_dependencyMap"],[6,35,9,0],[7,2,10,0],[7,6,10,0,"_utils"],[7,12,10,0],[7,15,10,0,"require"],[7,22,10,0],[7,23,10,0,"_dependencyMap"],[7,37,10,0],[8,2,11,0],[8,6,11,0,"_shortw_utils"],[8,19,11,0],[8,22,11,0,"require"],[8,29,11,0],[8,30,11,0,"_dependencyMap"],[8,44,11,0],[9,2,12,0],[9,6,12,0,"_hashToCurve"],[9,18,12,0],[9,21,12,0,"require"],[9,28,12,0],[9,29,12,0,"_dependencyMap"],[9,43,12,0],[10,2,13,0],[10,6,13,0,"_modular"],[10,14,13,0],[10,17,13,0,"require"],[10,24,13,0],[10,25,13,0,"_dependencyMap"],[10,39,13,0],[11,2,14,0],[11,6,14,0,"_weierstrass"],[11,18,14,0],[11,21,14,0,"require"],[11,28,14,0],[11,29,14,0,"_dependencyMap"],[11,43,14,0],[12,2,15,0],[12,6,15,0,"_utils2"],[12,13,15,0],[12,16,15,0,"require"],[12,23,15,0],[12,24,15,0,"_dependencyMap"],[12,38,15,0],[13,2,1,0],[14,0,2,0],[15,0,3,0],[16,0,4,0],[17,0,5,0],[18,0,6,0],[19,0,7,0],[20,2,8,0],[22,2,16,0],[23,2,17,0],[24,2,18,0],[25,2,19,0],[25,8,19,6,"secp256k1_CURVE"],[25,23,19,21],[25,26,19,24],[26,4,20,4,"p"],[26,5,20,5],[26,7,20,7,"BigInt"],[26,13,20,13],[26,14,20,14],[26,82,20,82],[26,83,20,83],[27,4,21,4,"n"],[27,5,21,5],[27,7,21,7,"BigInt"],[27,13,21,13],[27,14,21,14],[27,82,21,82],[27,83,21,83],[28,4,22,4,"h"],[28,5,22,5],[28,7,22,7,"BigInt"],[28,13,22,13],[28,14,22,14],[28,15,22,15],[28,16,22,16],[29,4,23,4,"a"],[29,5,23,5],[29,7,23,7,"BigInt"],[29,13,23,13],[29,14,23,14],[29,15,23,15],[29,16,23,16],[30,4,24,4,"b"],[30,5,24,5],[30,7,24,7,"BigInt"],[30,13,24,13],[30,14,24,14],[30,15,24,15],[30,16,24,16],[31,4,25,4,"Gx"],[31,6,25,6],[31,8,25,8,"BigInt"],[31,14,25,14],[31,15,25,15],[31,83,25,83],[31,84,25,84],[32,4,26,4,"Gy"],[32,6,26,6],[32,8,26,8,"BigInt"],[32,14,26,14],[32,15,26,15],[32,83,26,83],[33,2,27,0],[33,3,27,1],[34,2,28,0],[34,8,28,6,"secp256k1_ENDO"],[34,22,28,20],[34,25,28,23],[35,4,29,4,"beta"],[35,8,29,8],[35,10,29,10,"BigInt"],[35,16,29,16],[35,17,29,17],[35,85,29,85],[35,86,29,86],[36,4,30,4,"basises"],[36,11,30,11],[36,13,30,13],[36,14,31,8],[36,15,31,9,"BigInt"],[36,21,31,15],[36,22,31,16],[36,58,31,52],[36,59,31,53],[36,61,31,55],[36,62,31,56,"BigInt"],[36,68,31,62],[36,69,31,63],[36,105,31,99],[36,106,31,100],[36,107,31,101],[36,109,32,8],[36,110,32,9,"BigInt"],[36,116,32,15],[36,117,32,16],[36,154,32,53],[36,155,32,54],[36,157,32,56,"BigInt"],[36,163,32,62],[36,164,32,63],[36,200,32,99],[36,201,32,100],[36,202,32,101],[37,2,34,0],[37,3,34,1],[38,2,35,0],[38,8,35,6,"_0n"],[38,11,35,9],[38,14,35,12],[38,29,35,28,"BigInt"],[38,35,35,34],[38,36,35,35],[38,37,35,36],[38,38,35,37],[39,2,36,0],[39,8,36,6,"_1n"],[39,11,36,9],[39,14,36,12],[39,29,36,28,"BigInt"],[39,35,36,34],[39,36,36,35],[39,37,36,36],[39,38,36,37],[40,2,37,0],[40,8,37,6,"_2n"],[40,11,37,9],[40,14,37,12],[40,29,37,28,"BigInt"],[40,35,37,34],[40,36,37,35],[40,37,37,36],[40,38,37,37],[41,2,38,0],[42,0,39,0],[43,0,40,0],[44,0,41,0],[45,2,42,0],[45,11,42,9,"sqrtMod"],[45,18,42,16,"sqrtMod"],[45,19,42,17,"y"],[45,20,42,18],[45,22,42,20],[46,4,43,4],[46,10,43,10,"P"],[46,11,43,11],[46,14,43,14,"secp256k1_CURVE"],[46,29,43,29],[46,30,43,30,"p"],[46,31,43,31],[47,4,44,4],[48,4,45,4],[48,10,45,10,"_3n"],[48,13,45,13],[48,16,45,16,"BigInt"],[48,22,45,22],[48,23,45,23],[48,24,45,24],[48,25,45,25],[49,6,45,27,"_6n"],[49,9,45,30],[49,12,45,33,"BigInt"],[49,18,45,39],[49,19,45,40],[49,20,45,41],[49,21,45,42],[50,6,45,44,"_11n"],[50,10,45,48],[50,13,45,51,"BigInt"],[50,19,45,57],[50,20,45,58],[50,22,45,60],[50,23,45,61],[51,6,45,63,"_22n"],[51,10,45,67],[51,13,45,70,"BigInt"],[51,19,45,76],[51,20,45,77],[51,22,45,79],[51,23,45,80],[52,4,46,4],[53,4,47,4],[53,10,47,10,"_23n"],[53,14,47,14],[53,17,47,17,"BigInt"],[53,23,47,23],[53,24,47,24],[53,26,47,26],[53,27,47,27],[54,6,47,29,"_44n"],[54,10,47,33],[54,13,47,36,"BigInt"],[54,19,47,42],[54,20,47,43],[54,22,47,45],[54,23,47,46],[55,6,47,48,"_88n"],[55,10,47,52],[55,13,47,55,"BigInt"],[55,19,47,61],[55,20,47,62],[55,22,47,64],[55,23,47,65],[56,4,48,4],[56,10,48,10,"b2"],[56,12,48,12],[56,15,48,16,"y"],[56,16,48,17],[56,19,48,20,"y"],[56,20,48,21],[56,23,48,24,"y"],[56,24,48,25],[56,27,48,29,"P"],[56,28,48,30],[56,29,48,31],[56,30,48,32],[57,4,49,4],[57,10,49,10,"b3"],[57,12,49,12],[57,15,49,16,"b2"],[57,17,49,18],[57,20,49,21,"b2"],[57,22,49,23],[57,25,49,26,"y"],[57,26,49,27],[57,29,49,31,"P"],[57,30,49,32],[57,31,49,33],[57,32,49,34],[58,4,50,4],[58,10,50,10,"b6"],[58,12,50,12],[58,15,50,16],[58,19,50,16,"pow2"],[58,32,50,20],[58,34,50,21,"b3"],[58,36,50,23],[58,38,50,25,"_3n"],[58,41,50,28],[58,43,50,30,"P"],[58,44,50,31],[58,45,50,32],[58,48,50,35,"b3"],[58,50,50,37],[58,53,50,41,"P"],[58,54,50,42],[59,4,51,4],[59,10,51,10,"b9"],[59,12,51,12],[59,15,51,16],[59,19,51,16,"pow2"],[59,32,51,20],[59,34,51,21,"b6"],[59,36,51,23],[59,38,51,25,"_3n"],[59,41,51,28],[59,43,51,30,"P"],[59,44,51,31],[59,45,51,32],[59,48,51,35,"b3"],[59,50,51,37],[59,53,51,41,"P"],[59,54,51,42],[60,4,52,4],[60,10,52,10,"b11"],[60,13,52,13],[60,16,52,17],[60,20,52,17,"pow2"],[60,33,52,21],[60,35,52,22,"b9"],[60,37,52,24],[60,39,52,26,"_2n"],[60,42,52,29],[60,44,52,31,"P"],[60,45,52,32],[60,46,52,33],[60,49,52,36,"b2"],[60,51,52,38],[60,54,52,42,"P"],[60,55,52,43],[61,4,53,4],[61,10,53,10,"b22"],[61,13,53,13],[61,16,53,17],[61,20,53,17,"pow2"],[61,33,53,21],[61,35,53,22,"b11"],[61,38,53,25],[61,40,53,27,"_11n"],[61,44,53,31],[61,46,53,33,"P"],[61,47,53,34],[61,48,53,35],[61,51,53,38,"b11"],[61,54,53,41],[61,57,53,45,"P"],[61,58,53,46],[62,4,54,4],[62,10,54,10,"b44"],[62,13,54,13],[62,16,54,17],[62,20,54,17,"pow2"],[62,33,54,21],[62,35,54,22,"b22"],[62,38,54,25],[62,40,54,27,"_22n"],[62,44,54,31],[62,46,54,33,"P"],[62,47,54,34],[62,48,54,35],[62,51,54,38,"b22"],[62,54,54,41],[62,57,54,45,"P"],[62,58,54,46],[63,4,55,4],[63,10,55,10,"b88"],[63,13,55,13],[63,16,55,17],[63,20,55,17,"pow2"],[63,33,55,21],[63,35,55,22,"b44"],[63,38,55,25],[63,40,55,27,"_44n"],[63,44,55,31],[63,46,55,33,"P"],[63,47,55,34],[63,48,55,35],[63,51,55,38,"b44"],[63,54,55,41],[63,57,55,45,"P"],[63,58,55,46],[64,4,56,4],[64,10,56,10,"b176"],[64,14,56,14],[64,17,56,18],[64,21,56,18,"pow2"],[64,34,56,22],[64,36,56,23,"b88"],[64,39,56,26],[64,41,56,28,"_88n"],[64,45,56,32],[64,47,56,34,"P"],[64,48,56,35],[64,49,56,36],[64,52,56,39,"b88"],[64,55,56,42],[64,58,56,46,"P"],[64,59,56,47],[65,4,57,4],[65,10,57,10,"b220"],[65,14,57,14],[65,17,57,18],[65,21,57,18,"pow2"],[65,34,57,22],[65,36,57,23,"b176"],[65,40,57,27],[65,42,57,29,"_44n"],[65,46,57,33],[65,48,57,35,"P"],[65,49,57,36],[65,50,57,37],[65,53,57,40,"b44"],[65,56,57,43],[65,59,57,47,"P"],[65,60,57,48],[66,4,58,4],[66,10,58,10,"b223"],[66,14,58,14],[66,17,58,18],[66,21,58,18,"pow2"],[66,34,58,22],[66,36,58,23,"b220"],[66,40,58,27],[66,42,58,29,"_3n"],[66,45,58,32],[66,47,58,34,"P"],[66,48,58,35],[66,49,58,36],[66,52,58,39,"b3"],[66,54,58,41],[66,57,58,45,"P"],[66,58,58,46],[67,4,59,4],[67,10,59,10,"t1"],[67,12,59,12],[67,15,59,16],[67,19,59,16,"pow2"],[67,32,59,20],[67,34,59,21,"b223"],[67,38,59,25],[67,40,59,27,"_23n"],[67,44,59,31],[67,46,59,33,"P"],[67,47,59,34],[67,48,59,35],[67,51,59,38,"b22"],[67,54,59,41],[67,57,59,45,"P"],[67,58,59,46],[68,4,60,4],[68,10,60,10,"t2"],[68,12,60,12],[68,15,60,16],[68,19,60,16,"pow2"],[68,32,60,20],[68,34,60,21,"t1"],[68,36,60,23],[68,38,60,25,"_6n"],[68,41,60,28],[68,43,60,30,"P"],[68,44,60,31],[68,45,60,32],[68,48,60,35,"b2"],[68,50,60,37],[68,53,60,41,"P"],[68,54,60,42],[69,4,61,4],[69,10,61,10,"root"],[69,14,61,14],[69,17,61,17],[69,21,61,17,"pow2"],[69,34,61,21],[69,36,61,22,"t2"],[69,38,61,24],[69,40,61,26,"_2n"],[69,43,61,29],[69,45,61,31,"P"],[69,46,61,32],[69,47,61,33],[70,4,62,4],[70,8,62,8],[70,9,62,9,"Fpk1"],[70,13,62,13],[70,14,62,14,"eql"],[70,17,62,17],[70,18,62,18,"Fpk1"],[70,22,62,22],[70,23,62,23,"sqr"],[70,26,62,26],[70,27,62,27,"root"],[70,31,62,31],[70,32,62,32],[70,34,62,34,"y"],[70,35,62,35],[70,36,62,36],[70,38,63,8],[70,44,63,14],[70,48,63,18,"Error"],[70,53,63,23],[70,54,63,24],[70,79,63,49],[70,80,63,50],[71,4,64,4],[71,11,64,11,"root"],[71,15,64,15],[72,2,65,0],[73,2,66,0],[73,8,66,6,"Fpk1"],[73,12,66,10],[73,15,66,13],[73,19,66,13,"Field"],[73,33,66,18],[73,35,66,19,"secp256k1_CURVE"],[73,50,66,34],[73,51,66,35,"p"],[73,52,66,36],[73,54,66,38],[74,4,66,40,"sqrt"],[74,8,66,44],[74,10,66,46,"sqrtMod"],[75,2,66,54],[75,3,66,55],[75,4,66,56],[76,2,67,0],[77,0,68,0],[78,0,69,0],[79,0,70,0],[80,0,71,0],[81,0,72,0],[82,0,73,0],[83,0,74,0],[84,0,75,0],[85,0,76,0],[86,0,77,0],[87,0,78,0],[88,0,79,0],[89,0,80,0],[90,2,81,7],[90,8,81,13,"secp256k1"],[90,17,81,22],[90,20,81,22,"exports"],[90,27,81,22],[90,28,81,22,"secp256k1"],[90,37,81,22],[90,40,81,25],[90,44,81,25,"createCurve"],[90,69,81,36],[90,71,81,36,"Object"],[90,77,81,36],[90,78,81,36,"assign"],[90,84,81,36],[90,89,81,42,"secp256k1_CURVE"],[90,104,81,57],[91,4,81,59,"Fp"],[91,6,81,61],[91,8,81,63,"Fpk1"],[91,12,81,67],[92,4,81,69,"lowS"],[92,8,81,73],[92,10,81,75],[92,14,81,79],[93,4,81,81,"endo"],[93,8,81,85],[93,10,81,87,"secp256k1_ENDO"],[94,2,81,101],[94,6,81,105,"sha256"],[94,17,81,111],[94,18,81,112],[95,2,82,0],[96,2,83,0],[97,2,84,0],[98,2,85,0],[98,8,85,6,"TAGGED_HASH_PREFIXES"],[98,28,85,26],[98,31,85,29],[98,32,85,30],[98,33,85,31],[99,2,86,0],[99,11,86,9,"taggedHash"],[99,21,86,19,"taggedHash"],[99,22,86,20,"tag"],[99,25,86,23],[99,27,86,25],[99,30,86,28,"messages"],[99,38,86,36],[99,40,86,38],[100,4,87,4],[100,8,87,8,"tagP"],[100,12,87,12],[100,15,87,15,"TAGGED_HASH_PREFIXES"],[100,35,87,35],[100,36,87,36,"tag"],[100,39,87,39],[100,40,87,40],[101,4,88,4],[101,8,88,8,"tagP"],[101,12,88,12],[101,17,88,17,"undefined"],[101,26,88,26],[101,28,88,28],[102,6,89,8],[102,12,89,14,"tagH"],[102,16,89,18],[102,19,89,21],[102,23,89,21,"sha256"],[102,34,89,27],[102,36,89,28],[102,40,89,28,"utf8ToBytes"],[102,59,89,39],[102,61,89,40,"tag"],[102,64,89,43],[102,65,89,44],[102,66,89,45],[103,6,90,8,"tagP"],[103,10,90,12],[103,13,90,15],[103,17,90,15,"concatBytes"],[103,36,90,26],[103,38,90,27,"tagH"],[103,42,90,31],[103,44,90,33,"tagH"],[103,48,90,37],[103,49,90,38],[104,6,91,8,"TAGGED_HASH_PREFIXES"],[104,26,91,28],[104,27,91,29,"tag"],[104,30,91,32],[104,31,91,33],[104,34,91,36,"tagP"],[104,38,91,40],[105,4,92,4],[106,4,93,4],[106,11,93,11],[106,15,93,11,"sha256"],[106,26,93,17],[106,28,93,18],[106,32,93,18,"concatBytes"],[106,51,93,29],[106,53,93,30,"tagP"],[106,57,93,34],[106,59,93,36],[106,62,93,39,"messages"],[106,70,93,47],[106,71,93,48],[106,72,93,49],[107,2,94,0],[108,2,95,0],[109,2,96,0],[109,8,96,6,"pointToBytes"],[109,20,96,18],[109,23,96,22,"point"],[109,28,96,27],[109,32,96,32,"point"],[109,37,96,37],[109,38,96,38,"toBytes"],[109,45,96,45],[109,46,96,46],[109,50,96,50],[109,51,96,51],[109,52,96,52,"slice"],[109,57,96,57],[109,58,96,58],[109,59,96,59],[109,60,96,60],[110,2,97,0],[110,8,97,6,"Pointk1"],[110,15,97,13],[110,18,97,16],[110,33,97,32],[110,34,97,33],[110,40,97,39,"secp256k1"],[110,49,97,48],[110,50,97,49,"Point"],[110,55,97,54],[110,57,97,56],[110,58,97,57],[111,2,98,0],[111,8,98,6,"hasEven"],[111,15,98,13],[111,18,98,17,"y"],[111,19,98,18],[111,23,98,23,"y"],[111,24,98,24],[111,27,98,27,"_2n"],[111,30,98,30],[111,35,98,35,"_0n"],[111,38,98,38],[112,2,99,0],[113,2,100,0],[113,11,100,9,"schnorrGetExtPubKey"],[113,30,100,28,"schnorrGetExtPubKey"],[113,31,100,29,"priv"],[113,35,100,33],[113,37,100,35],[114,4,101,4],[114,10,101,10],[115,6,101,12,"Fn"],[115,8,101,14],[116,6,101,16,"BASE"],[117,4,101,21],[117,5,101,22],[117,8,101,25,"Pointk1"],[117,15,101,32],[118,4,102,4],[118,10,102,10,"d_"],[118,12,102,12],[118,15,102,15],[118,19,102,15,"_normFnElement"],[118,46,102,29],[118,48,102,30,"Fn"],[118,50,102,32],[118,52,102,34,"priv"],[118,56,102,38],[118,57,102,39],[119,4,103,4],[119,10,103,10,"p"],[119,11,103,11],[119,14,103,14,"BASE"],[119,18,103,18],[119,19,103,19,"multiply"],[119,27,103,27],[119,28,103,28,"d_"],[119,30,103,30],[119,31,103,31],[119,32,103,32],[119,33,103,33],[120,4,104,4],[120,10,104,10,"scalar"],[120,16,104,16],[120,19,104,19,"hasEven"],[120,26,104,26],[120,27,104,27,"p"],[120,28,104,28],[120,29,104,29,"y"],[120,30,104,30],[120,31,104,31],[120,34,104,34,"d_"],[120,36,104,36],[120,39,104,39,"Fn"],[120,41,104,41],[120,42,104,42,"neg"],[120,45,104,45],[120,46,104,46,"d_"],[120,48,104,48],[120,49,104,49],[121,4,105,4],[121,11,105,11],[122,6,105,13,"scalar"],[122,12,105,19],[123,6,105,21,"bytes"],[123,11,105,26],[123,13,105,28,"pointToBytes"],[123,25,105,40],[123,26,105,41,"p"],[123,27,105,42],[124,4,105,44],[124,5,105,45],[125,2,106,0],[126,2,107,0],[127,0,108,0],[128,0,109,0],[129,0,110,0],[130,2,111,0],[130,11,111,9,"lift_x"],[130,17,111,15,"lift_x"],[130,18,111,16,"x"],[130,19,111,17],[130,21,111,19],[131,4,112,4],[131,10,112,10,"Fp"],[131,12,112,12],[131,15,112,15,"Fpk1"],[131,19,112,19],[132,4,113,4],[132,8,113,8],[132,9,113,9,"Fp"],[132,11,113,11],[132,12,113,12,"isValidNot0"],[132,23,113,23],[132,24,113,24,"x"],[132,25,113,25],[132,26,113,26],[132,28,114,8],[132,34,114,14],[132,38,114,18,"Error"],[132,43,114,23],[132,44,114,24],[132,70,114,50],[132,71,114,51],[133,4,115,4],[133,10,115,10,"xx"],[133,12,115,12],[133,15,115,15,"Fp"],[133,17,115,17],[133,18,115,18,"create"],[133,24,115,24],[133,25,115,25,"x"],[133,26,115,26],[133,29,115,29,"x"],[133,30,115,30],[133,31,115,31],[134,4,116,4],[134,10,116,10,"c"],[134,11,116,11],[134,14,116,14,"Fp"],[134,16,116,16],[134,17,116,17,"create"],[134,23,116,23],[134,24,116,24,"xx"],[134,26,116,26],[134,29,116,29,"x"],[134,30,116,30],[134,33,116,33,"BigInt"],[134,39,116,39],[134,40,116,40],[134,41,116,41],[134,42,116,42],[134,43,116,43],[134,44,116,44],[134,45,116,45],[135,4,117,4],[135,8,117,8,"y"],[135,9,117,9],[135,12,117,12,"Fp"],[135,14,117,14],[135,15,117,15,"sqrt"],[135,19,117,19],[135,20,117,20,"c"],[135,21,117,21],[135,22,117,22],[135,23,117,23],[135,24,117,24],[136,4,118,4],[137,4,119,4],[138,4,120,4],[138,8,120,8],[138,9,120,9,"hasEven"],[138,16,120,16],[138,17,120,17,"y"],[138,18,120,18],[138,19,120,19],[138,21,121,8,"y"],[138,22,121,9],[138,25,121,12,"Fp"],[138,27,121,14],[138,28,121,15,"neg"],[138,31,121,18],[138,32,121,19,"y"],[138,33,121,20],[138,34,121,21],[139,4,122,4],[139,10,122,10,"p"],[139,11,122,11],[139,14,122,14,"Pointk1"],[139,21,122,21],[139,22,122,22,"fromAffine"],[139,32,122,32],[139,33,122,33],[140,6,122,35,"x"],[140,7,122,36],[141,6,122,38,"y"],[142,4,122,40],[142,5,122,41],[142,6,122,42],[143,4,123,4,"p"],[143,5,123,5],[143,6,123,6,"assertValidity"],[143,20,123,20],[143,21,123,21],[143,22,123,22],[144,4,124,4],[144,11,124,11,"p"],[144,12,124,12],[145,2,125,0],[146,2,126,0],[146,8,126,6,"num"],[146,11,126,9],[146,14,126,12,"bytesToNumberBE"],[146,37,126,27],[147,2,127,0],[148,0,128,0],[149,0,129,0],[150,2,130,0],[150,11,130,9,"challenge"],[150,20,130,18,"challenge"],[150,21,130,19],[150,24,130,22,"args"],[150,28,130,26],[150,30,130,28],[151,4,131,4],[151,11,131,11,"Pointk1"],[151,18,131,18],[151,19,131,19,"Fn"],[151,21,131,21],[151,22,131,22,"create"],[151,28,131,28],[151,29,131,29,"num"],[151,32,131,32],[151,33,131,33,"taggedHash"],[151,43,131,43],[151,44,131,44],[151,63,131,63],[151,65,131,65],[151,68,131,68,"args"],[151,72,131,72],[151,73,131,73],[151,74,131,74],[151,75,131,75],[152,2,132,0],[153,2,133,0],[154,0,134,0],[155,0,135,0],[156,2,136,0],[156,11,136,9,"schnorrGetPublicKey"],[156,30,136,28,"schnorrGetPublicKey"],[156,31,136,29,"secretKey"],[156,40,136,38],[156,42,136,40],[157,4,137,4],[157,11,137,11,"schnorrGetExtPubKey"],[157,30,137,30],[157,31,137,31,"secretKey"],[157,40,137,40],[157,41,137,41],[157,42,137,42,"bytes"],[157,47,137,47],[157,48,137,48],[157,49,137,49],[158,2,138,0],[159,2,139,0],[160,0,140,0],[161,0,141,0],[162,0,142,0],[163,2,143,0],[163,11,143,9,"schnorrSign"],[163,22,143,20,"schnorrSign"],[163,23,143,21,"message"],[163,30,143,28],[163,32,143,30,"secretKey"],[163,41,143,39],[163,43,143,41,"auxRand"],[163,50,143,48],[163,53,143,51],[163,57,143,51,"randomBytes"],[163,75,143,62],[163,77,143,63],[163,79,143,65],[163,80,143,66],[163,82,143,68],[164,4,144,4],[164,10,144,10],[165,6,144,12,"Fn"],[166,4,144,15],[166,5,144,16],[166,8,144,19,"Pointk1"],[166,15,144,26],[167,4,145,4],[167,10,145,10,"m"],[167,11,145,11],[167,14,145,14],[167,18,145,14,"ensureBytes"],[167,37,145,25],[167,39,145,26],[167,48,145,35],[167,50,145,37,"message"],[167,57,145,44],[167,58,145,45],[168,4,146,4],[168,10,146,10],[169,6,146,12,"bytes"],[169,11,146,17],[169,13,146,19,"px"],[169,15,146,21],[170,6,146,23,"scalar"],[170,12,146,29],[170,14,146,31,"d"],[171,4,146,33],[171,5,146,34],[171,8,146,37,"schnorrGetExtPubKey"],[171,27,146,56],[171,28,146,57,"secretKey"],[171,37,146,66],[171,38,146,67],[171,39,146,68],[171,40,146,69],[172,4,147,4],[172,10,147,10,"a"],[172,11,147,11],[172,14,147,14],[172,18,147,14,"ensureBytes"],[172,37,147,25],[172,39,147,26],[172,48,147,35],[172,50,147,37,"auxRand"],[172,57,147,44],[172,59,147,46],[172,61,147,48],[172,62,147,49],[172,63,147,50],[172,64,147,51],[173,4,148,4],[173,10,148,10,"t"],[173,11,148,11],[173,14,148,14,"Fn"],[173,16,148,16],[173,17,148,17,"toBytes"],[173,24,148,24],[173,25,148,25,"d"],[173,26,148,26],[173,29,148,29,"num"],[173,32,148,32],[173,33,148,33,"taggedHash"],[173,43,148,43],[173,44,148,44],[173,57,148,57],[173,59,148,59,"a"],[173,60,148,60],[173,61,148,61],[173,62,148,62],[173,63,148,63],[173,64,148,64],[173,65,148,65],[174,4,149,4],[174,10,149,10,"rand"],[174,14,149,14],[174,17,149,17,"taggedHash"],[174,27,149,27],[174,28,149,28],[174,43,149,43],[174,45,149,45,"t"],[174,46,149,46],[174,48,149,48,"px"],[174,50,149,50],[174,52,149,52,"m"],[174,53,149,53],[174,54,149,54],[174,55,149,55],[174,56,149,56],[175,4,150,4],[176,4,151,4],[176,10,151,10],[177,6,151,12,"bytes"],[177,11,151,17],[177,13,151,19,"rx"],[177,15,151,21],[178,6,151,23,"scalar"],[178,12,151,29],[178,14,151,31,"k"],[179,4,151,33],[179,5,151,34],[179,8,151,37,"schnorrGetExtPubKey"],[179,27,151,56],[179,28,151,57,"rand"],[179,32,151,61],[179,33,151,62],[180,4,152,4],[180,10,152,10,"e"],[180,11,152,11],[180,14,152,14,"challenge"],[180,23,152,23],[180,24,152,24,"rx"],[180,26,152,26],[180,28,152,28,"px"],[180,30,152,30],[180,32,152,32,"m"],[180,33,152,33],[180,34,152,34],[180,35,152,35],[180,36,152,36],[181,4,153,4],[181,10,153,10,"sig"],[181,13,153,13],[181,16,153,16],[181,20,153,20,"Uint8Array"],[181,30,153,30],[181,31,153,31],[181,33,153,33],[181,34,153,34],[181,35,153,35],[181,36,153,36],[182,4,154,4,"sig"],[182,7,154,7],[182,8,154,8,"set"],[182,11,154,11],[182,12,154,12,"rx"],[182,14,154,14],[182,16,154,16],[182,17,154,17],[182,18,154,18],[183,4,155,4,"sig"],[183,7,155,7],[183,8,155,8,"set"],[183,11,155,11],[183,12,155,12,"Fn"],[183,14,155,14],[183,15,155,15,"toBytes"],[183,22,155,22],[183,23,155,23,"Fn"],[183,25,155,25],[183,26,155,26,"create"],[183,32,155,32],[183,33,155,33,"k"],[183,34,155,34],[183,37,155,37,"e"],[183,38,155,38],[183,41,155,41,"d"],[183,42,155,42],[183,43,155,43],[183,44,155,44],[183,46,155,46],[183,48,155,48],[183,49,155,49],[184,4,156,4],[185,4,157,4],[185,8,157,8],[185,9,157,9,"schnorrVerify"],[185,22,157,22],[185,23,157,23,"sig"],[185,26,157,26],[185,28,157,28,"m"],[185,29,157,29],[185,31,157,31,"px"],[185,33,157,33],[185,34,157,34],[185,36,158,8],[185,42,158,14],[185,46,158,18,"Error"],[185,51,158,23],[185,52,158,24],[185,86,158,58],[185,87,158,59],[186,4,159,4],[186,11,159,11,"sig"],[186,14,159,14],[187,2,160,0],[188,2,161,0],[189,0,162,0],[190,0,163,0],[191,0,164,0],[192,2,165,0],[192,11,165,9,"schnorrVerify"],[192,24,165,22,"schnorrVerify"],[192,25,165,23,"signature"],[192,34,165,32],[192,36,165,34,"message"],[192,43,165,41],[192,45,165,43,"publicKey"],[192,54,165,52],[192,56,165,54],[193,4,166,4],[193,10,166,10],[194,6,166,12,"Fn"],[194,8,166,14],[195,6,166,16,"BASE"],[196,4,166,21],[196,5,166,22],[196,8,166,25,"Pointk1"],[196,15,166,32],[197,4,167,4],[197,10,167,10,"sig"],[197,13,167,13],[197,16,167,16],[197,20,167,16,"ensureBytes"],[197,39,167,27],[197,41,167,28],[197,52,167,39],[197,54,167,41,"signature"],[197,63,167,50],[197,65,167,52],[197,67,167,54],[197,68,167,55],[198,4,168,4],[198,10,168,10,"m"],[198,11,168,11],[198,14,168,14],[198,18,168,14,"ensureBytes"],[198,37,168,25],[198,39,168,26],[198,48,168,35],[198,50,168,37,"message"],[198,57,168,44],[198,58,168,45],[199,4,169,4],[199,10,169,10,"pub"],[199,13,169,13],[199,16,169,16],[199,20,169,16,"ensureBytes"],[199,39,169,27],[199,41,169,28],[199,52,169,39],[199,54,169,41,"publicKey"],[199,63,169,50],[199,65,169,52],[199,67,169,54],[199,68,169,55],[200,4,170,4],[200,8,170,8],[201,6,171,8],[201,12,171,14,"P"],[201,13,171,15],[201,16,171,18,"lift_x"],[201,22,171,24],[201,23,171,25,"num"],[201,26,171,28],[201,27,171,29,"pub"],[201,30,171,32],[201,31,171,33],[201,32,171,34],[201,33,171,35],[201,34,171,36],[202,6,172,8],[202,12,172,14,"r"],[202,13,172,15],[202,16,172,18,"num"],[202,19,172,21],[202,20,172,22,"sig"],[202,23,172,25],[202,24,172,26,"subarray"],[202,32,172,34],[202,33,172,35],[202,34,172,36],[202,36,172,38],[202,38,172,40],[202,39,172,41],[202,40,172,42],[202,41,172,43],[202,42,172,44],[203,6,173,8],[203,10,173,12],[203,11,173,13],[203,15,173,13,"inRange"],[203,30,173,20],[203,32,173,21,"r"],[203,33,173,22],[203,35,173,24,"_1n"],[203,38,173,27],[203,40,173,29,"secp256k1_CURVE"],[203,55,173,44],[203,56,173,45,"p"],[203,57,173,46],[203,58,173,47],[203,60,174,12],[203,67,174,19],[203,72,174,24],[204,6,175,8],[204,12,175,14,"s"],[204,13,175,15],[204,16,175,18,"num"],[204,19,175,21],[204,20,175,22,"sig"],[204,23,175,25],[204,24,175,26,"subarray"],[204,32,175,34],[204,33,175,35],[204,35,175,37],[204,37,175,39],[204,39,175,41],[204,40,175,42],[204,41,175,43],[204,42,175,44],[204,43,175,45],[205,6,176,8],[205,10,176,12],[205,11,176,13],[205,15,176,13,"inRange"],[205,30,176,20],[205,32,176,21,"s"],[205,33,176,22],[205,35,176,24,"_1n"],[205,38,176,27],[205,40,176,29,"secp256k1_CURVE"],[205,55,176,44],[205,56,176,45,"n"],[205,57,176,46],[205,58,176,47],[205,60,177,12],[205,67,177,19],[205,72,177,24],[206,6,178,8],[207,6,179,8],[207,12,179,14,"e"],[207,13,179,15],[207,16,179,18,"challenge"],[207,25,179,27],[207,26,179,28,"Fn"],[207,28,179,30],[207,29,179,31,"toBytes"],[207,36,179,38],[207,37,179,39,"r"],[207,38,179,40],[207,39,179,41],[207,41,179,43,"pointToBytes"],[207,53,179,55],[207,54,179,56,"P"],[207,55,179,57],[207,56,179,58],[207,58,179,60,"m"],[207,59,179,61],[207,60,179,62],[208,6,180,8],[209,6,181,8],[209,12,181,14,"R"],[209,13,181,15],[209,16,181,18,"BASE"],[209,20,181,22],[209,21,181,23,"multiplyUnsafe"],[209,35,181,37],[209,36,181,38,"s"],[209,37,181,39],[209,38,181,40],[209,39,181,41,"add"],[209,42,181,44],[209,43,181,45,"P"],[209,44,181,46],[209,45,181,47,"multiplyUnsafe"],[209,59,181,61],[209,60,181,62,"Fn"],[209,62,181,64],[209,63,181,65,"neg"],[209,66,181,68],[209,67,181,69,"e"],[209,68,181,70],[209,69,181,71],[209,70,181,72],[209,71,181,73],[210,6,182,8],[210,12,182,14],[211,8,182,16,"x"],[211,9,182,17],[212,8,182,19,"y"],[213,6,182,21],[213,7,182,22],[213,10,182,25,"R"],[213,11,182,26],[213,12,182,27,"toAffine"],[213,20,182,35],[213,21,182,36],[213,22,182,37],[214,6,183,8],[215,6,184,8],[215,10,184,12,"R"],[215,11,184,13],[215,12,184,14,"is0"],[215,15,184,17],[215,16,184,18],[215,17,184,19],[215,21,184,23],[215,22,184,24,"hasEven"],[215,29,184,31],[215,30,184,32,"y"],[215,31,184,33],[215,32,184,34],[215,36,184,38,"x"],[215,37,184,39],[215,42,184,44,"r"],[215,43,184,45],[215,45,185,12],[215,52,185,19],[215,57,185,24],[216,6,186,8],[216,13,186,15],[216,17,186,19],[217,4,187,4],[217,5,187,5],[217,6,188,4],[217,13,188,11,"error"],[217,18,188,16],[217,20,188,18],[218,6,189,8],[218,13,189,15],[218,18,189,20],[219,4,190,4],[220,2,191,0],[221,2,192,0],[222,0,193,0],[223,0,194,0],[224,0,195,0],[225,0,196,0],[226,0,197,0],[227,0,198,0],[228,0,199,0],[229,0,200,0],[230,0,201,0],[231,0,202,0],[232,0,203,0],[233,0,204,0],[234,2,205,7],[234,8,205,13,"schnorr"],[234,15,205,20],[234,18,205,20,"exports"],[234,25,205,20],[234,26,205,20,"schnorr"],[234,33,205,20],[234,36,205,23],[234,51,205,39],[234,52,205,40],[234,58,205,46],[235,4,206,4],[235,10,206,10,"size"],[235,14,206,14],[235,17,206,17],[235,19,206,19],[236,4,207,4],[236,10,207,10,"seedLength"],[236,20,207,20],[236,23,207,23],[236,25,207,25],[237,4,208,4],[237,10,208,10,"randomSecretKey"],[237,25,208,25],[237,28,208,28,"randomSecretKey"],[237,29,208,29,"seed"],[237,33,208,33],[237,36,208,36],[237,40,208,36,"randomBytes"],[237,58,208,47],[237,60,208,48,"seedLength"],[237,70,208,58],[237,71,208,59],[237,76,208,64],[238,6,209,8],[238,13,209,15],[238,17,209,15,"mapHashToField"],[238,40,209,29],[238,42,209,30,"seed"],[238,46,209,34],[238,48,209,36,"secp256k1_CURVE"],[238,63,209,51],[238,64,209,52,"n"],[238,65,209,53],[238,66,209,54],[239,4,210,4],[239,5,210,5],[240,4,211,4],[241,4,212,4,"secp256k1"],[241,13,212,13],[241,14,212,14,"utils"],[241,19,212,19],[241,20,212,20,"randomSecretKey"],[241,35,212,35],[242,4,213,4],[242,13,213,13,"keygen"],[242,19,213,19,"keygen"],[242,20,213,20,"seed"],[242,24,213,24],[242,26,213,26],[243,6,214,8],[243,12,214,14,"secretKey"],[243,21,214,23],[243,24,214,26,"randomSecretKey"],[243,39,214,41],[243,40,214,42,"seed"],[243,44,214,46],[243,45,214,47],[244,6,215,8],[244,13,215,15],[245,8,215,17,"secretKey"],[245,17,215,26],[246,8,215,28,"publicKey"],[246,17,215,37],[246,19,215,39,"schnorrGetPublicKey"],[246,38,215,58],[246,39,215,59,"secretKey"],[246,48,215,68],[247,6,215,70],[247,7,215,71],[248,4,216,4],[249,4,217,4],[249,11,217,11],[250,6,218,8,"keygen"],[250,12,218,14],[251,6,219,8,"getPublicKey"],[251,18,219,20],[251,20,219,22,"schnorrGetPublicKey"],[251,39,219,41],[252,6,220,8,"sign"],[252,10,220,12],[252,12,220,14,"schnorrSign"],[252,23,220,25],[253,6,221,8,"verify"],[253,12,221,14],[253,14,221,16,"schnorrVerify"],[253,27,221,29],[254,6,222,8,"Point"],[254,11,222,13],[254,13,222,15,"Pointk1"],[254,20,222,22],[255,6,223,8,"utils"],[255,11,223,13],[255,13,223,15],[256,8,224,12,"randomSecretKey"],[256,23,224,27],[256,25,224,29,"randomSecretKey"],[256,40,224,44],[257,8,225,12,"randomPrivateKey"],[257,24,225,28],[257,26,225,30,"randomSecretKey"],[257,41,225,45],[258,8,226,12,"taggedHash"],[258,18,226,22],[259,8,227,12],[260,8,228,12,"lift_x"],[260,14,228,18],[261,8,229,12,"pointToBytes"],[261,20,229,24],[262,8,230,12,"numberToBytesBE"],[262,23,230,27],[262,25,230,12,"numberToBytesBE"],[262,48,230,27],[263,8,231,12,"bytesToNumberBE"],[263,23,231,27],[263,25,231,12,"bytesToNumberBE"],[263,48,231,27],[264,8,232,12,"mod"],[264,11,232,15],[264,13,232,12,"mod"],[265,6,233,8],[265,7,233,9],[266,6,234,8,"lengths"],[266,13,234,15],[266,15,234,17],[267,8,235,12,"secretKey"],[267,17,235,21],[267,19,235,23,"size"],[267,23,235,27],[268,8,236,12,"publicKey"],[268,17,236,21],[268,19,236,23,"size"],[268,23,236,27],[269,8,237,12,"publicKeyHasPrefix"],[269,26,237,30],[269,28,237,32],[269,33,237,37],[270,8,238,12,"signature"],[270,17,238,21],[270,19,238,23,"size"],[270,23,238,27],[270,26,238,30],[270,27,238,31],[271,8,239,12,"seed"],[271,12,239,16],[271,14,239,18,"seedLength"],[272,6,240,8],[273,4,241,4],[273,5,241,5],[274,2,242,0],[274,3,242,1],[274,5,242,3],[274,6,242,4],[275,2,243,0],[275,8,243,6,"isoMap"],[275,14,243,12],[275,17,243,15],[275,32,243,31],[275,33,243,32],[275,39,243,38],[275,43,243,38,"isogenyMap"],[275,66,243,48],[275,68,243,49,"Fpk1"],[275,72,243,53],[275,74,243,55],[276,2,244,4],[277,2,245,4],[277,3,246,8],[277,71,246,76],[277,73,247,8],[277,140,247,75],[277,142,248,8],[277,210,248,76],[277,212,249,8],[277,280,249,76],[277,281,250,5],[278,2,251,4],[279,2,252,4],[279,3,253,8],[279,71,253,76],[279,73,254,8],[279,141,254,76],[279,143,255,8],[279,211,255,76],[279,212,255,78],[280,2,255,78],[280,3,256,5],[281,2,257,4],[282,2,258,4],[282,3,259,8],[282,71,259,76],[282,73,260,8],[282,141,260,76],[282,143,261,8],[282,211,261,76],[282,213,262,8],[282,281,262,76],[282,282,263,5],[283,2,264,4],[284,2,265,4],[284,3,266,8],[284,71,266,76],[284,73,267,8],[284,141,267,76],[284,143,268,8],[284,211,268,76],[284,213,269,8],[284,281,269,76],[284,282,269,78],[285,2,269,78],[285,3,270,5],[285,4,271,1],[285,5,271,2,"map"],[285,8,271,5],[285,9,271,7,"i"],[285,10,271,8],[285,14,271,13,"i"],[285,15,271,14],[285,16,271,15,"map"],[285,19,271,18],[285,20,271,20,"j"],[285,21,271,21],[285,25,271,26,"BigInt"],[285,31,271,32],[285,32,271,33,"j"],[285,33,271,34],[285,34,271,35],[285,35,271,36],[285,36,271,37],[285,37,271,38],[285,39,271,40],[285,40,271,41],[286,2,272,0],[286,8,272,6,"mapSWU"],[286,14,272,12],[286,17,272,15],[286,32,272,31],[286,33,272,32],[286,39,272,38],[286,43,272,38,"mapToCurveSimpleSWU"],[286,75,272,57],[286,77,272,58,"Fpk1"],[286,81,272,62],[286,83,272,64],[287,4,273,4,"A"],[287,5,273,5],[287,7,273,7,"BigInt"],[287,13,273,13],[287,14,273,14],[287,82,273,82],[287,83,273,83],[288,4,274,4,"B"],[288,5,274,5],[288,7,274,7,"BigInt"],[288,13,274,13],[288,14,274,14],[288,20,274,20],[288,21,274,21],[289,4,275,4,"Z"],[289,5,275,5],[289,7,275,7,"Fpk1"],[289,11,275,11],[289,12,275,12,"create"],[289,18,275,18],[289,19,275,19,"BigInt"],[289,25,275,25],[289,26,275,26],[289,31,275,31],[289,32,275,32],[290,2,276,0],[290,3,276,1],[290,4,276,2],[290,6,276,4],[290,7,276,5],[291,2,277,0],[292,2,278,7],[292,8,278,13,"secp256k1_hasher"],[292,24,278,29],[292,27,278,29,"exports"],[292,34,278,29],[292,35,278,29,"secp256k1_hasher"],[292,51,278,29],[292,54,278,32],[292,69,278,48],[292,70,278,49],[292,76,278,55],[292,80,278,55,"createHasher"],[292,105,278,67],[292,107,278,68,"secp256k1"],[292,116,278,77],[292,117,278,78,"Point"],[292,122,278,83],[292,124,278,86,"scalars"],[292,131,278,93],[292,135,278,98],[293,4,279,4],[293,10,279,10],[294,6,279,12,"x"],[294,7,279,13],[295,6,279,15,"y"],[296,4,279,17],[296,5,279,18],[296,8,279,21,"mapSWU"],[296,14,279,27],[296,15,279,28,"Fpk1"],[296,19,279,32],[296,20,279,33,"create"],[296,26,279,39],[296,27,279,40,"scalars"],[296,34,279,47],[296,35,279,48],[296,36,279,49],[296,37,279,50],[296,38,279,51],[296,39,279,52],[297,4,280,4],[297,11,280,11,"isoMap"],[297,17,280,17],[297,18,280,18,"x"],[297,19,280,19],[297,21,280,21,"y"],[297,22,280,22],[297,23,280,23],[298,2,281,0],[298,3,281,1],[298,5,281,3],[299,4,282,4,"DST"],[299,7,282,7],[299,9,282,9],[299,41,282,41],[300,4,283,4,"encodeDST"],[300,13,283,13],[300,15,283,15],[300,47,283,47],[301,4,284,4,"p"],[301,5,284,5],[301,7,284,7,"Fpk1"],[301,11,284,11],[301,12,284,12,"ORDER"],[301,17,284,17],[302,4,285,4,"m"],[302,5,285,5],[302,7,285,7],[302,8,285,8],[303,4,286,4,"k"],[303,5,286,5],[303,7,286,7],[303,10,286,10],[304,4,287,4,"expand"],[304,10,287,10],[304,12,287,12],[304,17,287,17],[305,4,288,4,"hash"],[305,8,288,8],[305,10,288,10,"sha256"],[306,2,289,0],[306,3,289,1],[306,4,289,2],[306,6,289,4],[306,7,289,5],[307,2,290,0],[308,2,291,7],[308,8,291,13,"hashToCurve"],[308,19,291,24],[308,22,291,24,"exports"],[308,29,291,24],[308,30,291,24,"hashToCurve"],[308,41,291,24],[308,44,291,27],[308,59,291,43],[308,60,291,44],[308,66,291,50,"secp256k1_hasher"],[308,82,291,66],[308,83,291,67,"hashToCurve"],[308,94,291,78],[308,96,291,80],[308,97,291,81],[309,2,292,0],[310,2,293,7],[310,8,293,13,"encodeToCurve"],[310,21,293,26],[310,24,293,26,"exports"],[310,31,293,26],[310,32,293,26,"encodeToCurve"],[310,45,293,26],[310,48,293,29],[310,63,293,45],[310,64,293,46],[310,70,293,52,"secp256k1_hasher"],[310,86,293,68],[310,87,293,69,"encodeToCurve"],[310,100,293,82],[310,102,293,84],[310,103,293,85],[311,0,293,86],[311,3]],"functionMap":{"names":["<global>","sqrtMod","taggedHash","pointToBytes","<anonymous>","hasEven","schnorrGetExtPubKey","lift_x","challenge","schnorrGetPublicKey","schnorrSign","schnorrVerify","randomSecretKey","keygen","map$argument_0","i.map$argument_0","createHasher$argument_1"],"mappings":"AAA;ACyC;CDuB;AEqB;CFQ;qBGE,uCH;iCIC,qBJ;gBKC,sBL;AME;CNM;AOK;CPc;AQK;CRE;ASI;CTE;AUK;CViB;AWK;CX0B;wCIc;4BQG;KRE;ISG;KTG;CJ0B;gCIC;MU4B,aC,gBD,CV,EJ;gCIC;EJI;iDIE,oCY;CZG;EJQ;4CIE,kCJ;8CIE,oCJ"}},"type":"js/module"}]}