{"dependencies":[{"name":"path","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":10,"index":44},"end":{"line":6,"column":25,"index":59}}],"key":"sC7uOmzp0ncn/Io61vx77lEWh8A=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /**\n   * Module dependencies.\n   */\n\n  var sep = require(_dependencyMap[0], \"path\").sep || '/';\n\n  /**\n   * Module exports.\n   */\n\n  module.exports = fileUriToPath;\n\n  /**\n   * File URI to Path function.\n   *\n   * @param {String} uri\n   * @return {String} path\n   * @api public\n   */\n\n  function fileUriToPath(uri) {\n    if ('string' != typeof uri || uri.length <= 7 || 'file://' != uri.substring(0, 7)) {\n      throw new TypeError('must pass in a file:// URI to convert to a file path');\n    }\n    var rest = decodeURI(uri.substring(7));\n    var firstSlash = rest.indexOf('/');\n    var host = rest.substring(0, firstSlash);\n    var path = rest.substring(firstSlash + 1);\n\n    // 2.  Scheme Definition\n    // As a special case, <host> can be the string \"localhost\" or the empty\n    // string; this is interpreted as \"the machine from which the URL is\n    // being interpreted\".\n    if ('localhost' == host) host = '';\n    if (host) {\n      host = sep + sep + host;\n    }\n\n    // 3.2  Drives, drive letters, mount points, file system root\n    // Drive letters are mapped into the top of a file URI in various ways,\n    // depending on the implementation; some applications substitute\n    // vertical bar (\"|\") for the colon after the drive letter, yielding\n    // \"file:///c|/tmp/test.txt\".  In some cases, the colon is left\n    // unchanged, as in \"file:///c:/tmp/test.txt\".  In other cases, the\n    // colon is simply omitted, as in \"file:///c/tmp/test.txt\".\n    path = path.replace(/^(.+)\\|/, '$1:');\n\n    // for Windows, we need to invert the path separators from what a URI uses\n    if (sep == '\\\\') {\n      path = path.replace(/\\//g, '\\\\');\n    }\n    if (/^.+\\:/.test(path)) {\n      // has Windows drive at beginning of path\n    } else {\n      // unix pathâ€¦\n      path = sep + path;\n    }\n    return host + path;\n  }\n});","lineCount":61,"map":[[2,2,2,0],[3,0,3,0],[4,0,4,0],[6,2,6,0],[6,6,6,4,"sep"],[6,9,6,7],[6,12,6,10,"require"],[6,19,6,17],[6,20,6,17,"_dependencyMap"],[6,34,6,17],[6,45,6,24],[6,46,6,25],[6,47,6,26,"sep"],[6,50,6,29],[6,54,6,33],[6,57,6,36],[8,2,8,0],[9,0,9,0],[10,0,10,0],[12,2,12,0,"module"],[12,8,12,6],[12,9,12,7,"exports"],[12,16,12,14],[12,19,12,17,"fileUriToPath"],[12,32,12,30],[14,2,14,0],[15,0,15,0],[16,0,16,0],[17,0,17,0],[18,0,18,0],[19,0,19,0],[20,0,20,0],[22,2,22,0],[22,11,22,9,"fileUriToPath"],[22,24,22,22,"fileUriToPath"],[22,25,22,24,"uri"],[22,28,22,27],[22,30,22,29],[23,4,23,2],[23,8,23,6],[23,16,23,14],[23,20,23,18],[23,27,23,25,"uri"],[23,30,23,28],[23,34,24,6,"uri"],[23,37,24,9],[23,38,24,10,"length"],[23,44,24,16],[23,48,24,20],[23,49,24,21],[23,53,25,6],[23,62,25,15],[23,66,25,19,"uri"],[23,69,25,22],[23,70,25,23,"substring"],[23,79,25,32],[23,80,25,33],[23,81,25,34],[23,83,25,36],[23,84,25,37],[23,85,25,38],[23,87,25,40],[24,6,26,4],[24,12,26,10],[24,16,26,14,"TypeError"],[24,25,26,23],[24,26,26,24],[24,80,26,78],[24,81,26,79],[25,4,27,2],[26,4,29,2],[26,8,29,6,"rest"],[26,12,29,10],[26,15,29,13,"decodeURI"],[26,24,29,22],[26,25,29,23,"uri"],[26,28,29,26],[26,29,29,27,"substring"],[26,38,29,36],[26,39,29,37],[26,40,29,38],[26,41,29,39],[26,42,29,40],[27,4,30,2],[27,8,30,6,"firstSlash"],[27,18,30,16],[27,21,30,19,"rest"],[27,25,30,23],[27,26,30,24,"indexOf"],[27,33,30,31],[27,34,30,32],[27,37,30,35],[27,38,30,36],[28,4,31,2],[28,8,31,6,"host"],[28,12,31,10],[28,15,31,13,"rest"],[28,19,31,17],[28,20,31,18,"substring"],[28,29,31,27],[28,30,31,28],[28,31,31,29],[28,33,31,31,"firstSlash"],[28,43,31,41],[28,44,31,42],[29,4,32,2],[29,8,32,6,"path"],[29,12,32,10],[29,15,32,13,"rest"],[29,19,32,17],[29,20,32,18,"substring"],[29,29,32,27],[29,30,32,28,"firstSlash"],[29,40,32,38],[29,43,32,41],[29,44,32,42],[29,45,32,43],[31,4,34,2],[32,4,35,2],[33,4,36,2],[34,4,37,2],[35,4,38,2],[35,8,38,6],[35,19,38,17],[35,23,38,21,"host"],[35,27,38,25],[35,29,38,27,"host"],[35,33,38,31],[35,36,38,34],[35,38,38,36],[36,4,40,2],[36,8,40,6,"host"],[36,12,40,10],[36,14,40,12],[37,6,41,4,"host"],[37,10,41,8],[37,13,41,11,"sep"],[37,16,41,14],[37,19,41,17,"sep"],[37,22,41,20],[37,25,41,23,"host"],[37,29,41,27],[38,4,42,2],[40,4,44,2],[41,4,45,2],[42,4,46,2],[43,4,47,2],[44,4,48,2],[45,4,49,2],[46,4,50,2],[47,4,51,2,"path"],[47,8,51,6],[47,11,51,9,"path"],[47,15,51,13],[47,16,51,14,"replace"],[47,23,51,21],[47,24,51,22],[47,33,51,31],[47,35,51,33],[47,40,51,38],[47,41,51,39],[49,4,53,2],[50,4,54,2],[50,8,54,6,"sep"],[50,11,54,9],[50,15,54,13],[50,19,54,17],[50,21,54,19],[51,6,55,4,"path"],[51,10,55,8],[51,13,55,11,"path"],[51,17,55,15],[51,18,55,16,"replace"],[51,25,55,23],[51,26,55,24],[51,31,55,29],[51,33,55,31],[51,37,55,35],[51,38,55,36],[52,4,56,2],[53,4,58,2],[53,8,58,6],[53,15,58,13],[53,16,58,14,"test"],[53,20,58,18],[53,21,58,19,"path"],[53,25,58,23],[53,26,58,24],[53,28,58,26],[54,6,59,4],[55,4,59,4],[55,5,60,3],[55,11,60,9],[56,6,61,4],[57,6,62,4,"path"],[57,10,62,8],[57,13,62,11,"sep"],[57,16,62,14],[57,19,62,17,"path"],[57,23,62,21],[58,4,63,2],[59,4,65,2],[59,11,65,9,"host"],[59,15,65,13],[59,18,65,16,"path"],[59,22,65,20],[60,2,66,0],[61,0,66,1],[61,3]],"functionMap":{"names":["<global>","fileUriToPath"],"mappings":"AAA;ACqB;CD4C"}},"type":"js/module"}]}