{"dependencies":[{"name":"@noble/hashes/sha2.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":18,"index":526},"end":{"line":12,"column":50,"index":558}}],"key":"vu3GrmX7IyKWLC5hFxoq1UnCcJ8=","exportNames":["*"]}},{"name":"@noble/hashes/utils.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":13,"column":19,"index":579},"end":{"line":13,"column":52,"index":612}}],"key":"p7DyZ5tsNLZq/3XRYBR2CQCL188=","exportNames":["*"]}},{"name":"./_shortw_utils.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":14,"column":27,"index":641},"end":{"line":14,"column":56,"index":670}}],"key":"krOv6iFxwz10QAKOXr+f4hXkYZo=","exportNames":["*"]}},{"name":"./abstract/hash-to-curve.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":15,"column":27,"index":699},"end":{"line":15,"column":65,"index":737}}],"key":"V7aW6RTrVrmfWtSF3dQ4BGgJnvk=","exportNames":["*"]}},{"name":"./abstract/modular.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":21,"index":760},"end":{"line":16,"column":53,"index":792}}],"key":"+wqfTwYuIjwX8vzKXzerMvYz6ok=","exportNames":["*"]}},{"name":"./abstract/weierstrass.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":17,"column":25,"index":819},"end":{"line":17,"column":61,"index":855}}],"key":"68C0MbjlTDkKgsIyxbOrLUAndis=","exportNames":["*"]}},{"name":"./utils.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":18,"column":19,"index":876},"end":{"line":18,"column":40,"index":897}}],"key":"v6h+l9IeOWbEcXdtKQqd2f4now4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.encodeToCurve = exports.hashToCurve = exports.secp256k1_hasher = exports.schnorr = exports.secp256k1 = void 0;\n  /**\n   * SECG secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n   *\n   * Belongs to Koblitz curves: it has efficiently-computable GLV endomorphism ψ,\n   * check out {@link EndomorphismOpts}. Seems to be rigid (not backdoored).\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n  const sha2_js_1 = require(_dependencyMap[0], \"@noble/hashes/sha2.js\");\n  const utils_js_1 = require(_dependencyMap[1], \"@noble/hashes/utils.js\");\n  const _shortw_utils_ts_1 = require(_dependencyMap[2], \"./_shortw_utils.js\");\n  const hash_to_curve_ts_1 = require(_dependencyMap[3], \"./abstract/hash-to-curve.js\");\n  const modular_ts_1 = require(_dependencyMap[4], \"./abstract/modular.js\");\n  const weierstrass_ts_1 = require(_dependencyMap[5], \"./abstract/weierstrass.js\");\n  const utils_ts_1 = require(_dependencyMap[6], \"./utils.js\");\n  // Seems like generator was produced from some seed:\n  // `Point.BASE.multiply(Point.Fn.inv(2n, N)).toAffine().x`\n  // // gives short x 0x3b78ce563f89a0ed9414f5aa28ad0d96d6795f9c63n\n  const secp256k1_CURVE = {\n    p: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: BigInt(1),\n    a: BigInt(0),\n    b: BigInt(7),\n    Gx: BigInt('0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798'),\n    Gy: BigInt('0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8')\n  };\n  const secp256k1_ENDO = {\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n    basises: [[BigInt('0x3086d221a7d46bcde86c90e49284eb15'), -BigInt('0xe4437ed6010e88286f547fa90abfe4c3')], [BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'), BigInt('0x3086d221a7d46bcde86c90e49284eb15')]]\n  };\n  const _0n = /* @__PURE__ */BigInt(0);\n  const _1n = /* @__PURE__ */BigInt(1);\n  const _2n = /* @__PURE__ */BigInt(2);\n  /**\n   * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n   * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n   */\n  function sqrtMod(y) {\n    const P = secp256k1_CURVE.p;\n    // prettier-ignore\n    const _3n = BigInt(3),\n      _6n = BigInt(6),\n      _11n = BigInt(11),\n      _22n = BigInt(22);\n    // prettier-ignore\n    const _23n = BigInt(23),\n      _44n = BigInt(44),\n      _88n = BigInt(88);\n    const b2 = y * y * y % P; // x^3, 11\n    const b3 = b2 * b2 * y % P; // x^7\n    const b6 = (0, modular_ts_1.pow2)(b3, _3n, P) * b3 % P;\n    const b9 = (0, modular_ts_1.pow2)(b6, _3n, P) * b3 % P;\n    const b11 = (0, modular_ts_1.pow2)(b9, _2n, P) * b2 % P;\n    const b22 = (0, modular_ts_1.pow2)(b11, _11n, P) * b11 % P;\n    const b44 = (0, modular_ts_1.pow2)(b22, _22n, P) * b22 % P;\n    const b88 = (0, modular_ts_1.pow2)(b44, _44n, P) * b44 % P;\n    const b176 = (0, modular_ts_1.pow2)(b88, _88n, P) * b88 % P;\n    const b220 = (0, modular_ts_1.pow2)(b176, _44n, P) * b44 % P;\n    const b223 = (0, modular_ts_1.pow2)(b220, _3n, P) * b3 % P;\n    const t1 = (0, modular_ts_1.pow2)(b223, _23n, P) * b22 % P;\n    const t2 = (0, modular_ts_1.pow2)(t1, _6n, P) * b2 % P;\n    const root = (0, modular_ts_1.pow2)(t2, _2n, P);\n    if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n    return root;\n  }\n  const Fpk1 = (0, modular_ts_1.Field)(secp256k1_CURVE.p, {\n    sqrt: sqrtMod\n  });\n  /**\n   * secp256k1 curve, ECDSA and ECDH methods.\n   *\n   * Field: `2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n`\n   *\n   * @example\n   * ```js\n   * import { secp256k1 } from '@noble/curves/secp256k1';\n   * const { secretKey, publicKey } = secp256k1.keygen();\n   * const msg = new TextEncoder().encode('hello');\n   * const sig = secp256k1.sign(msg, secretKey);\n   * const isValid = secp256k1.verify(sig, msg, publicKey) === true;\n   * ```\n   */\n  exports.secp256k1 = (0, _shortw_utils_ts_1.createCurve)({\n    ...secp256k1_CURVE,\n    Fp: Fpk1,\n    lowS: true,\n    endo: secp256k1_ENDO\n  }, sha2_js_1.sha256);\n  // Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n  // https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n  /** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\n  const TAGGED_HASH_PREFIXES = {};\n  function taggedHash(tag, ...messages) {\n    let tagP = TAGGED_HASH_PREFIXES[tag];\n    if (tagP === undefined) {\n      const tagH = (0, sha2_js_1.sha256)((0, utils_ts_1.utf8ToBytes)(tag));\n      tagP = (0, utils_ts_1.concatBytes)(tagH, tagH);\n      TAGGED_HASH_PREFIXES[tag] = tagP;\n    }\n    return (0, sha2_js_1.sha256)((0, utils_ts_1.concatBytes)(tagP, ...messages));\n  }\n  // ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\n  const pointToBytes = point => point.toBytes(true).slice(1);\n  const Pointk1 = /* @__PURE__ */(() => exports.secp256k1.Point)();\n  const hasEven = y => y % _2n === _0n;\n  // Calculate point, scalar and bytes\n  function schnorrGetExtPubKey(priv) {\n    const {\n      Fn,\n      BASE\n    } = Pointk1;\n    const d_ = (0, weierstrass_ts_1._normFnElement)(Fn, priv);\n    const p = BASE.multiply(d_); // P = d'⋅G; 0 < d' < n check is done inside\n    const scalar = hasEven(p.y) ? d_ : Fn.neg(d_);\n    return {\n      scalar,\n      bytes: pointToBytes(p)\n    };\n  }\n  /**\n   * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n   * @returns valid point checked for being on-curve\n   */\n  function lift_x(x) {\n    const Fp = Fpk1;\n    if (!Fp.isValidNot0(x)) throw new Error('invalid x: Fail if x ≥ p');\n    const xx = Fp.create(x * x);\n    const c = Fp.create(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n    let y = Fp.sqrt(c); // Let y = c^(p+1)/4 mod p. Same as sqrt().\n    // Return the unique point P such that x(P) = x and\n    // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n    if (!hasEven(y)) y = Fp.neg(y);\n    const p = Pointk1.fromAffine({\n      x,\n      y\n    });\n    p.assertValidity();\n    return p;\n  }\n  const num = utils_ts_1.bytesToNumberBE;\n  /**\n   * Create tagged hash, convert it to bigint, reduce modulo-n.\n   */\n  function challenge(...args) {\n    return Pointk1.Fn.create(num(taggedHash('BIP0340/challenge', ...args)));\n  }\n  /**\n   * Schnorr public key is just `x` coordinate of Point as per BIP340.\n   */\n  function schnorrGetPublicKey(secretKey) {\n    return schnorrGetExtPubKey(secretKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n  }\n  /**\n   * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n   * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n   */\n  function schnorrSign(message, secretKey, auxRand = (0, utils_js_1.randomBytes)(32)) {\n    const {\n      Fn\n    } = Pointk1;\n    const m = (0, utils_ts_1.ensureBytes)('message', message);\n    const {\n      bytes: px,\n      scalar: d\n    } = schnorrGetExtPubKey(secretKey); // checks for isWithinCurveOrder\n    const a = (0, utils_ts_1.ensureBytes)('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n    const t = Fn.toBytes(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n    const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n    // Let k' = int(rand) mod n. Fail if k' = 0. Let R = k'⋅G\n    const {\n      bytes: rx,\n      scalar: k\n    } = schnorrGetExtPubKey(rand);\n    const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n    const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n    sig.set(rx, 0);\n    sig.set(Fn.toBytes(Fn.create(k + e * d)), 32);\n    // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n    if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n    return sig;\n  }\n  /**\n   * Verifies Schnorr signature.\n   * Will swallow errors & return false except for initial type validation of arguments.\n   */\n  function schnorrVerify(signature, message, publicKey) {\n    const {\n      Fn,\n      BASE\n    } = Pointk1;\n    const sig = (0, utils_ts_1.ensureBytes)('signature', signature, 64);\n    const m = (0, utils_ts_1.ensureBytes)('message', message);\n    const pub = (0, utils_ts_1.ensureBytes)('publicKey', publicKey, 32);\n    try {\n      const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n      const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n      if (!(0, utils_ts_1.inRange)(r, _1n, secp256k1_CURVE.p)) return false;\n      const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n      if (!(0, utils_ts_1.inRange)(s, _1n, secp256k1_CURVE.n)) return false;\n      // int(challenge(bytes(r)||bytes(P)||m))%n\n      const e = challenge(Fn.toBytes(r), pointToBytes(P), m);\n      // R = s⋅G - e⋅P, where -eP == (n-e)P\n      const R = BASE.multiplyUnsafe(s).add(P.multiplyUnsafe(Fn.neg(e)));\n      const {\n        x,\n        y\n      } = R.toAffine();\n      // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n      if (R.is0() || !hasEven(y) || x !== r) return false;\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n  /**\n   * Schnorr signatures over secp256k1.\n   * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n   * @example\n   * ```js\n   * import { schnorr } from '@noble/curves/secp256k1';\n   * const { secretKey, publicKey } = schnorr.keygen();\n   * // const publicKey = schnorr.getPublicKey(secretKey);\n   * const msg = new TextEncoder().encode('hello');\n   * const sig = schnorr.sign(msg, secretKey);\n   * const isValid = schnorr.verify(sig, msg, publicKey);\n   * ```\n   */\n  exports.schnorr = (() => {\n    const size = 32;\n    const seedLength = 48;\n    const randomSecretKey = (seed = (0, utils_js_1.randomBytes)(seedLength)) => {\n      return (0, modular_ts_1.mapHashToField)(seed, secp256k1_CURVE.n);\n    };\n    // TODO: remove\n    exports.secp256k1.utils.randomSecretKey;\n    function keygen(seed) {\n      const secretKey = randomSecretKey(seed);\n      return {\n        secretKey,\n        publicKey: schnorrGetPublicKey(secretKey)\n      };\n    }\n    return {\n      keygen,\n      getPublicKey: schnorrGetPublicKey,\n      sign: schnorrSign,\n      verify: schnorrVerify,\n      Point: Pointk1,\n      utils: {\n        randomSecretKey: randomSecretKey,\n        randomPrivateKey: randomSecretKey,\n        taggedHash,\n        // TODO: remove\n        lift_x,\n        pointToBytes,\n        numberToBytesBE: utils_ts_1.numberToBytesBE,\n        bytesToNumberBE: utils_ts_1.bytesToNumberBE,\n        mod: modular_ts_1.mod\n      },\n      lengths: {\n        secretKey: size,\n        publicKey: size,\n        publicKeyHasPrefix: false,\n        signature: size * 2,\n        seed: seedLength\n      }\n    };\n  })();\n  const isoMap = /* @__PURE__ */(() => (0, hash_to_curve_ts_1.isogenyMap)(Fpk1, [\n  // xNum\n  ['0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7', '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581', '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262', '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c'],\n  // xDen\n  ['0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b', '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n  ],\n  // yNum\n  ['0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c', '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3', '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931', '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84'],\n  // yDen\n  ['0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b', '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573', '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f', '0x0000000000000000000000000000000000000000000000000000000000000001' // LAST 1\n  ]].map(i => i.map(j => BigInt(j)))))();\n  const mapSWU = /* @__PURE__ */(() => (0, weierstrass_ts_1.mapToCurveSimpleSWU)(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11'))\n  }))();\n  /** Hashing / encoding to secp256k1 points / field. RFC 9380 methods. */\n  exports.secp256k1_hasher = (() => (0, hash_to_curve_ts_1.createHasher)(exports.secp256k1.Point, scalars => {\n    const {\n      x,\n      y\n    } = mapSWU(Fpk1.create(scalars[0]));\n    return isoMap(x, y);\n  }, {\n    DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n    encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n    p: Fpk1.ORDER,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: sha2_js_1.sha256\n  }))();\n  /** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\n  exports.hashToCurve = (() => exports.secp256k1_hasher.hashToCurve)();\n  /** @deprecated use `import { secp256k1_hasher } from '@noble/curves/secp256k1.js';` */\n  exports.encodeToCurve = (() => exports.secp256k1_hasher.encodeToCurve)();\n});","lineCount":313,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"encodeToCurve"],[7,23,3,21],[7,26,3,24,"exports"],[7,33,3,31],[7,34,3,32,"hashToCurve"],[7,45,3,43],[7,48,3,46,"exports"],[7,55,3,53],[7,56,3,54,"secp256k1_hasher"],[7,72,3,70],[7,75,3,73,"exports"],[7,82,3,80],[7,83,3,81,"schnorr"],[7,90,3,88],[7,93,3,91,"exports"],[7,100,3,98],[7,101,3,99,"secp256k1"],[7,110,3,108],[7,113,3,111],[7,118,3,116],[7,119,3,117],[8,2,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,0,8,0],[13,0,9,0],[14,0,10,0],[15,2,11,0],[16,2,12,0],[16,8,12,6,"sha2_js_1"],[16,17,12,15],[16,20,12,18,"require"],[16,27,12,25],[16,28,12,25,"_dependencyMap"],[16,42,12,25],[16,70,12,49],[16,71,12,50],[17,2,13,0],[17,8,13,6,"utils_js_1"],[17,18,13,16],[17,21,13,19,"require"],[17,28,13,26],[17,29,13,26,"_dependencyMap"],[17,43,13,26],[17,72,13,51],[17,73,13,52],[18,2,14,0],[18,8,14,6,"_shortw_utils_ts_1"],[18,26,14,24],[18,29,14,27,"require"],[18,36,14,34],[18,37,14,34,"_dependencyMap"],[18,51,14,34],[18,76,14,55],[18,77,14,56],[19,2,15,0],[19,8,15,6,"hash_to_curve_ts_1"],[19,26,15,24],[19,29,15,27,"require"],[19,36,15,34],[19,37,15,34,"_dependencyMap"],[19,51,15,34],[19,85,15,64],[19,86,15,65],[20,2,16,0],[20,8,16,6,"modular_ts_1"],[20,20,16,18],[20,23,16,21,"require"],[20,30,16,28],[20,31,16,28,"_dependencyMap"],[20,45,16,28],[20,73,16,52],[20,74,16,53],[21,2,17,0],[21,8,17,6,"weierstrass_ts_1"],[21,24,17,22],[21,27,17,25,"require"],[21,34,17,32],[21,35,17,32,"_dependencyMap"],[21,49,17,32],[21,81,17,60],[21,82,17,61],[22,2,18,0],[22,8,18,6,"utils_ts_1"],[22,18,18,16],[22,21,18,19,"require"],[22,28,18,26],[22,29,18,26,"_dependencyMap"],[22,43,18,26],[22,60,18,39],[22,61,18,40],[23,2,19,0],[24,2,20,0],[25,2,21,0],[26,2,22,0],[26,8,22,6,"secp256k1_CURVE"],[26,23,22,21],[26,26,22,24],[27,4,23,4,"p"],[27,5,23,5],[27,7,23,7,"BigInt"],[27,13,23,13],[27,14,23,14],[27,82,23,82],[27,83,23,83],[28,4,24,4,"n"],[28,5,24,5],[28,7,24,7,"BigInt"],[28,13,24,13],[28,14,24,14],[28,82,24,82],[28,83,24,83],[29,4,25,4,"h"],[29,5,25,5],[29,7,25,7,"BigInt"],[29,13,25,13],[29,14,25,14],[29,15,25,15],[29,16,25,16],[30,4,26,4,"a"],[30,5,26,5],[30,7,26,7,"BigInt"],[30,13,26,13],[30,14,26,14],[30,15,26,15],[30,16,26,16],[31,4,27,4,"b"],[31,5,27,5],[31,7,27,7,"BigInt"],[31,13,27,13],[31,14,27,14],[31,15,27,15],[31,16,27,16],[32,4,28,4,"Gx"],[32,6,28,6],[32,8,28,8,"BigInt"],[32,14,28,14],[32,15,28,15],[32,83,28,83],[32,84,28,84],[33,4,29,4,"Gy"],[33,6,29,6],[33,8,29,8,"BigInt"],[33,14,29,14],[33,15,29,15],[33,83,29,83],[34,2,30,0],[34,3,30,1],[35,2,31,0],[35,8,31,6,"secp256k1_ENDO"],[35,22,31,20],[35,25,31,23],[36,4,32,4,"beta"],[36,8,32,8],[36,10,32,10,"BigInt"],[36,16,32,16],[36,17,32,17],[36,85,32,85],[36,86,32,86],[37,4,33,4,"basises"],[37,11,33,11],[37,13,33,13],[37,14,34,8],[37,15,34,9,"BigInt"],[37,21,34,15],[37,22,34,16],[37,58,34,52],[37,59,34,53],[37,61,34,55],[37,62,34,56,"BigInt"],[37,68,34,62],[37,69,34,63],[37,105,34,99],[37,106,34,100],[37,107,34,101],[37,109,35,8],[37,110,35,9,"BigInt"],[37,116,35,15],[37,117,35,16],[37,154,35,53],[37,155,35,54],[37,157,35,56,"BigInt"],[37,163,35,62],[37,164,35,63],[37,200,35,99],[37,201,35,100],[37,202,35,101],[38,2,37,0],[38,3,37,1],[39,2,38,0],[39,8,38,6,"_0n"],[39,11,38,9],[39,14,38,12],[39,29,38,28,"BigInt"],[39,35,38,34],[39,36,38,35],[39,37,38,36],[39,38,38,37],[40,2,39,0],[40,8,39,6,"_1n"],[40,11,39,9],[40,14,39,12],[40,29,39,28,"BigInt"],[40,35,39,34],[40,36,39,35],[40,37,39,36],[40,38,39,37],[41,2,40,0],[41,8,40,6,"_2n"],[41,11,40,9],[41,14,40,12],[41,29,40,28,"BigInt"],[41,35,40,34],[41,36,40,35],[41,37,40,36],[41,38,40,37],[42,2,41,0],[43,0,42,0],[44,0,43,0],[45,0,44,0],[46,2,45,0],[46,11,45,9,"sqrtMod"],[46,18,45,16,"sqrtMod"],[46,19,45,17,"y"],[46,20,45,18],[46,22,45,20],[47,4,46,4],[47,10,46,10,"P"],[47,11,46,11],[47,14,46,14,"secp256k1_CURVE"],[47,29,46,29],[47,30,46,30,"p"],[47,31,46,31],[48,4,47,4],[49,4,48,4],[49,10,48,10,"_3n"],[49,13,48,13],[49,16,48,16,"BigInt"],[49,22,48,22],[49,23,48,23],[49,24,48,24],[49,25,48,25],[50,6,48,27,"_6n"],[50,9,48,30],[50,12,48,33,"BigInt"],[50,18,48,39],[50,19,48,40],[50,20,48,41],[50,21,48,42],[51,6,48,44,"_11n"],[51,10,48,48],[51,13,48,51,"BigInt"],[51,19,48,57],[51,20,48,58],[51,22,48,60],[51,23,48,61],[52,6,48,63,"_22n"],[52,10,48,67],[52,13,48,70,"BigInt"],[52,19,48,76],[52,20,48,77],[52,22,48,79],[52,23,48,80],[53,4,49,4],[54,4,50,4],[54,10,50,10,"_23n"],[54,14,50,14],[54,17,50,17,"BigInt"],[54,23,50,23],[54,24,50,24],[54,26,50,26],[54,27,50,27],[55,6,50,29,"_44n"],[55,10,50,33],[55,13,50,36,"BigInt"],[55,19,50,42],[55,20,50,43],[55,22,50,45],[55,23,50,46],[56,6,50,48,"_88n"],[56,10,50,52],[56,13,50,55,"BigInt"],[56,19,50,61],[56,20,50,62],[56,22,50,64],[56,23,50,65],[57,4,51,4],[57,10,51,10,"b2"],[57,12,51,12],[57,15,51,16,"y"],[57,16,51,17],[57,19,51,20,"y"],[57,20,51,21],[57,23,51,24,"y"],[57,24,51,25],[57,27,51,29,"P"],[57,28,51,30],[57,29,51,31],[57,30,51,32],[58,4,52,4],[58,10,52,10,"b3"],[58,12,52,12],[58,15,52,16,"b2"],[58,17,52,18],[58,20,52,21,"b2"],[58,22,52,23],[58,25,52,26,"y"],[58,26,52,27],[58,29,52,31,"P"],[58,30,52,32],[58,31,52,33],[58,32,52,34],[59,4,53,4],[59,10,53,10,"b6"],[59,12,53,12],[59,15,53,16],[59,16,53,17],[59,17,53,18],[59,19,53,20,"modular_ts_1"],[59,31,53,32],[59,32,53,33,"pow2"],[59,36,53,37],[59,38,53,39,"b3"],[59,40,53,41],[59,42,53,43,"_3n"],[59,45,53,46],[59,47,53,48,"P"],[59,48,53,49],[59,49,53,50],[59,52,53,53,"b3"],[59,54,53,55],[59,57,53,59,"P"],[59,58,53,60],[60,4,54,4],[60,10,54,10,"b9"],[60,12,54,12],[60,15,54,16],[60,16,54,17],[60,17,54,18],[60,19,54,20,"modular_ts_1"],[60,31,54,32],[60,32,54,33,"pow2"],[60,36,54,37],[60,38,54,39,"b6"],[60,40,54,41],[60,42,54,43,"_3n"],[60,45,54,46],[60,47,54,48,"P"],[60,48,54,49],[60,49,54,50],[60,52,54,53,"b3"],[60,54,54,55],[60,57,54,59,"P"],[60,58,54,60],[61,4,55,4],[61,10,55,10,"b11"],[61,13,55,13],[61,16,55,17],[61,17,55,18],[61,18,55,19],[61,20,55,21,"modular_ts_1"],[61,32,55,33],[61,33,55,34,"pow2"],[61,37,55,38],[61,39,55,40,"b9"],[61,41,55,42],[61,43,55,44,"_2n"],[61,46,55,47],[61,48,55,49,"P"],[61,49,55,50],[61,50,55,51],[61,53,55,54,"b2"],[61,55,55,56],[61,58,55,60,"P"],[61,59,55,61],[62,4,56,4],[62,10,56,10,"b22"],[62,13,56,13],[62,16,56,17],[62,17,56,18],[62,18,56,19],[62,20,56,21,"modular_ts_1"],[62,32,56,33],[62,33,56,34,"pow2"],[62,37,56,38],[62,39,56,40,"b11"],[62,42,56,43],[62,44,56,45,"_11n"],[62,48,56,49],[62,50,56,51,"P"],[62,51,56,52],[62,52,56,53],[62,55,56,56,"b11"],[62,58,56,59],[62,61,56,63,"P"],[62,62,56,64],[63,4,57,4],[63,10,57,10,"b44"],[63,13,57,13],[63,16,57,17],[63,17,57,18],[63,18,57,19],[63,20,57,21,"modular_ts_1"],[63,32,57,33],[63,33,57,34,"pow2"],[63,37,57,38],[63,39,57,40,"b22"],[63,42,57,43],[63,44,57,45,"_22n"],[63,48,57,49],[63,50,57,51,"P"],[63,51,57,52],[63,52,57,53],[63,55,57,56,"b22"],[63,58,57,59],[63,61,57,63,"P"],[63,62,57,64],[64,4,58,4],[64,10,58,10,"b88"],[64,13,58,13],[64,16,58,17],[64,17,58,18],[64,18,58,19],[64,20,58,21,"modular_ts_1"],[64,32,58,33],[64,33,58,34,"pow2"],[64,37,58,38],[64,39,58,40,"b44"],[64,42,58,43],[64,44,58,45,"_44n"],[64,48,58,49],[64,50,58,51,"P"],[64,51,58,52],[64,52,58,53],[64,55,58,56,"b44"],[64,58,58,59],[64,61,58,63,"P"],[64,62,58,64],[65,4,59,4],[65,10,59,10,"b176"],[65,14,59,14],[65,17,59,18],[65,18,59,19],[65,19,59,20],[65,21,59,22,"modular_ts_1"],[65,33,59,34],[65,34,59,35,"pow2"],[65,38,59,39],[65,40,59,41,"b88"],[65,43,59,44],[65,45,59,46,"_88n"],[65,49,59,50],[65,51,59,52,"P"],[65,52,59,53],[65,53,59,54],[65,56,59,57,"b88"],[65,59,59,60],[65,62,59,64,"P"],[65,63,59,65],[66,4,60,4],[66,10,60,10,"b220"],[66,14,60,14],[66,17,60,18],[66,18,60,19],[66,19,60,20],[66,21,60,22,"modular_ts_1"],[66,33,60,34],[66,34,60,35,"pow2"],[66,38,60,39],[66,40,60,41,"b176"],[66,44,60,45],[66,46,60,47,"_44n"],[66,50,60,51],[66,52,60,53,"P"],[66,53,60,54],[66,54,60,55],[66,57,60,58,"b44"],[66,60,60,61],[66,63,60,65,"P"],[66,64,60,66],[67,4,61,4],[67,10,61,10,"b223"],[67,14,61,14],[67,17,61,18],[67,18,61,19],[67,19,61,20],[67,21,61,22,"modular_ts_1"],[67,33,61,34],[67,34,61,35,"pow2"],[67,38,61,39],[67,40,61,41,"b220"],[67,44,61,45],[67,46,61,47,"_3n"],[67,49,61,50],[67,51,61,52,"P"],[67,52,61,53],[67,53,61,54],[67,56,61,57,"b3"],[67,58,61,59],[67,61,61,63,"P"],[67,62,61,64],[68,4,62,4],[68,10,62,10,"t1"],[68,12,62,12],[68,15,62,16],[68,16,62,17],[68,17,62,18],[68,19,62,20,"modular_ts_1"],[68,31,62,32],[68,32,62,33,"pow2"],[68,36,62,37],[68,38,62,39,"b223"],[68,42,62,43],[68,44,62,45,"_23n"],[68,48,62,49],[68,50,62,51,"P"],[68,51,62,52],[68,52,62,53],[68,55,62,56,"b22"],[68,58,62,59],[68,61,62,63,"P"],[68,62,62,64],[69,4,63,4],[69,10,63,10,"t2"],[69,12,63,12],[69,15,63,16],[69,16,63,17],[69,17,63,18],[69,19,63,20,"modular_ts_1"],[69,31,63,32],[69,32,63,33,"pow2"],[69,36,63,37],[69,38,63,39,"t1"],[69,40,63,41],[69,42,63,43,"_6n"],[69,45,63,46],[69,47,63,48,"P"],[69,48,63,49],[69,49,63,50],[69,52,63,53,"b2"],[69,54,63,55],[69,57,63,59,"P"],[69,58,63,60],[70,4,64,4],[70,10,64,10,"root"],[70,14,64,14],[70,17,64,17],[70,18,64,18],[70,19,64,19],[70,21,64,21,"modular_ts_1"],[70,33,64,33],[70,34,64,34,"pow2"],[70,38,64,38],[70,40,64,40,"t2"],[70,42,64,42],[70,44,64,44,"_2n"],[70,47,64,47],[70,49,64,49,"P"],[70,50,64,50],[70,51,64,51],[71,4,65,4],[71,8,65,8],[71,9,65,9,"Fpk1"],[71,13,65,13],[71,14,65,14,"eql"],[71,17,65,17],[71,18,65,18,"Fpk1"],[71,22,65,22],[71,23,65,23,"sqr"],[71,26,65,26],[71,27,65,27,"root"],[71,31,65,31],[71,32,65,32],[71,34,65,34,"y"],[71,35,65,35],[71,36,65,36],[71,38,66,8],[71,44,66,14],[71,48,66,18,"Error"],[71,53,66,23],[71,54,66,24],[71,79,66,49],[71,80,66,50],[72,4,67,4],[72,11,67,11,"root"],[72,15,67,15],[73,2,68,0],[74,2,69,0],[74,8,69,6,"Fpk1"],[74,12,69,10],[74,15,69,13],[74,16,69,14],[74,17,69,15],[74,19,69,17,"modular_ts_1"],[74,31,69,29],[74,32,69,30,"Field"],[74,37,69,35],[74,39,69,37,"secp256k1_CURVE"],[74,54,69,52],[74,55,69,53,"p"],[74,56,69,54],[74,58,69,56],[75,4,69,58,"sqrt"],[75,8,69,62],[75,10,69,64,"sqrtMod"],[76,2,69,72],[76,3,69,73],[76,4,69,74],[77,2,70,0],[78,0,71,0],[79,0,72,0],[80,0,73,0],[81,0,74,0],[82,0,75,0],[83,0,76,0],[84,0,77,0],[85,0,78,0],[86,0,79,0],[87,0,80,0],[88,0,81,0],[89,0,82,0],[90,0,83,0],[91,2,84,0,"exports"],[91,9,84,7],[91,10,84,8,"secp256k1"],[91,19,84,17],[91,22,84,20],[91,23,84,21],[91,24,84,22],[91,26,84,24,"_shortw_utils_ts_1"],[91,44,84,42],[91,45,84,43,"createCurve"],[91,56,84,54],[91,58,84,56],[92,4,84,58],[92,7,84,61,"secp256k1_CURVE"],[92,22,84,76],[93,4,84,78,"Fp"],[93,6,84,80],[93,8,84,82,"Fpk1"],[93,12,84,86],[94,4,84,88,"lowS"],[94,8,84,92],[94,10,84,94],[94,14,84,98],[95,4,84,100,"endo"],[95,8,84,104],[95,10,84,106,"secp256k1_ENDO"],[96,2,84,121],[96,3,84,122],[96,5,84,124,"sha2_js_1"],[96,14,84,133],[96,15,84,134,"sha256"],[96,21,84,140],[96,22,84,141],[97,2,85,0],[98,2,86,0],[99,2,87,0],[100,2,88,0],[100,8,88,6,"TAGGED_HASH_PREFIXES"],[100,28,88,26],[100,31,88,29],[100,32,88,30],[100,33,88,31],[101,2,89,0],[101,11,89,9,"taggedHash"],[101,21,89,19,"taggedHash"],[101,22,89,20,"tag"],[101,25,89,23],[101,27,89,25],[101,30,89,28,"messages"],[101,38,89,36],[101,40,89,38],[102,4,90,4],[102,8,90,8,"tagP"],[102,12,90,12],[102,15,90,15,"TAGGED_HASH_PREFIXES"],[102,35,90,35],[102,36,90,36,"tag"],[102,39,90,39],[102,40,90,40],[103,4,91,4],[103,8,91,8,"tagP"],[103,12,91,12],[103,17,91,17,"undefined"],[103,26,91,26],[103,28,91,28],[104,6,92,8],[104,12,92,14,"tagH"],[104,16,92,18],[104,19,92,21],[104,20,92,22],[104,21,92,23],[104,23,92,25,"sha2_js_1"],[104,32,92,34],[104,33,92,35,"sha256"],[104,39,92,41],[104,41,92,43],[104,42,92,44],[104,43,92,45],[104,45,92,47,"utils_ts_1"],[104,55,92,57],[104,56,92,58,"utf8ToBytes"],[104,67,92,69],[104,69,92,71,"tag"],[104,72,92,74],[104,73,92,75],[104,74,92,76],[105,6,93,8,"tagP"],[105,10,93,12],[105,13,93,15],[105,14,93,16],[105,15,93,17],[105,17,93,19,"utils_ts_1"],[105,27,93,29],[105,28,93,30,"concatBytes"],[105,39,93,41],[105,41,93,43,"tagH"],[105,45,93,47],[105,47,93,49,"tagH"],[105,51,93,53],[105,52,93,54],[106,6,94,8,"TAGGED_HASH_PREFIXES"],[106,26,94,28],[106,27,94,29,"tag"],[106,30,94,32],[106,31,94,33],[106,34,94,36,"tagP"],[106,38,94,40],[107,4,95,4],[108,4,96,4],[108,11,96,11],[108,12,96,12],[108,13,96,13],[108,15,96,15,"sha2_js_1"],[108,24,96,24],[108,25,96,25,"sha256"],[108,31,96,31],[108,33,96,33],[108,34,96,34],[108,35,96,35],[108,37,96,37,"utils_ts_1"],[108,47,96,47],[108,48,96,48,"concatBytes"],[108,59,96,59],[108,61,96,61,"tagP"],[108,65,96,65],[108,67,96,67],[108,70,96,70,"messages"],[108,78,96,78],[108,79,96,79],[108,80,96,80],[109,2,97,0],[110,2,98,0],[111,2,99,0],[111,8,99,6,"pointToBytes"],[111,20,99,18],[111,23,99,22,"point"],[111,28,99,27],[111,32,99,32,"point"],[111,37,99,37],[111,38,99,38,"toBytes"],[111,45,99,45],[111,46,99,46],[111,50,99,50],[111,51,99,51],[111,52,99,52,"slice"],[111,57,99,57],[111,58,99,58],[111,59,99,59],[111,60,99,60],[112,2,100,0],[112,8,100,6,"Pointk1"],[112,15,100,13],[112,18,100,16],[112,33,100,32],[112,34,100,33],[112,40,100,39,"exports"],[112,47,100,46],[112,48,100,47,"secp256k1"],[112,57,100,56],[112,58,100,57,"Point"],[112,63,100,62],[112,65,100,64],[112,66,100,65],[113,2,101,0],[113,8,101,6,"hasEven"],[113,15,101,13],[113,18,101,17,"y"],[113,19,101,18],[113,23,101,23,"y"],[113,24,101,24],[113,27,101,27,"_2n"],[113,30,101,30],[113,35,101,35,"_0n"],[113,38,101,38],[114,2,102,0],[115,2,103,0],[115,11,103,9,"schnorrGetExtPubKey"],[115,30,103,28,"schnorrGetExtPubKey"],[115,31,103,29,"priv"],[115,35,103,33],[115,37,103,35],[116,4,104,4],[116,10,104,10],[117,6,104,12,"Fn"],[117,8,104,14],[118,6,104,16,"BASE"],[119,4,104,21],[119,5,104,22],[119,8,104,25,"Pointk1"],[119,15,104,32],[120,4,105,4],[120,10,105,10,"d_"],[120,12,105,12],[120,15,105,15],[120,16,105,16],[120,17,105,17],[120,19,105,19,"weierstrass_ts_1"],[120,35,105,35],[120,36,105,36,"_normFnElement"],[120,50,105,50],[120,52,105,52,"Fn"],[120,54,105,54],[120,56,105,56,"priv"],[120,60,105,60],[120,61,105,61],[121,4,106,4],[121,10,106,10,"p"],[121,11,106,11],[121,14,106,14,"BASE"],[121,18,106,18],[121,19,106,19,"multiply"],[121,27,106,27],[121,28,106,28,"d_"],[121,30,106,30],[121,31,106,31],[121,32,106,32],[121,33,106,33],[122,4,107,4],[122,10,107,10,"scalar"],[122,16,107,16],[122,19,107,19,"hasEven"],[122,26,107,26],[122,27,107,27,"p"],[122,28,107,28],[122,29,107,29,"y"],[122,30,107,30],[122,31,107,31],[122,34,107,34,"d_"],[122,36,107,36],[122,39,107,39,"Fn"],[122,41,107,41],[122,42,107,42,"neg"],[122,45,107,45],[122,46,107,46,"d_"],[122,48,107,48],[122,49,107,49],[123,4,108,4],[123,11,108,11],[124,6,108,13,"scalar"],[124,12,108,19],[125,6,108,21,"bytes"],[125,11,108,26],[125,13,108,28,"pointToBytes"],[125,25,108,40],[125,26,108,41,"p"],[125,27,108,42],[126,4,108,44],[126,5,108,45],[127,2,109,0],[128,2,110,0],[129,0,111,0],[130,0,112,0],[131,0,113,0],[132,2,114,0],[132,11,114,9,"lift_x"],[132,17,114,15,"lift_x"],[132,18,114,16,"x"],[132,19,114,17],[132,21,114,19],[133,4,115,4],[133,10,115,10,"Fp"],[133,12,115,12],[133,15,115,15,"Fpk1"],[133,19,115,19],[134,4,116,4],[134,8,116,8],[134,9,116,9,"Fp"],[134,11,116,11],[134,12,116,12,"isValidNot0"],[134,23,116,23],[134,24,116,24,"x"],[134,25,116,25],[134,26,116,26],[134,28,117,8],[134,34,117,14],[134,38,117,18,"Error"],[134,43,117,23],[134,44,117,24],[134,70,117,50],[134,71,117,51],[135,4,118,4],[135,10,118,10,"xx"],[135,12,118,12],[135,15,118,15,"Fp"],[135,17,118,17],[135,18,118,18,"create"],[135,24,118,24],[135,25,118,25,"x"],[135,26,118,26],[135,29,118,29,"x"],[135,30,118,30],[135,31,118,31],[136,4,119,4],[136,10,119,10,"c"],[136,11,119,11],[136,14,119,14,"Fp"],[136,16,119,16],[136,17,119,17,"create"],[136,23,119,23],[136,24,119,24,"xx"],[136,26,119,26],[136,29,119,29,"x"],[136,30,119,30],[136,33,119,33,"BigInt"],[136,39,119,39],[136,40,119,40],[136,41,119,41],[136,42,119,42],[136,43,119,43],[136,44,119,44],[136,45,119,45],[137,4,120,4],[137,8,120,8,"y"],[137,9,120,9],[137,12,120,12,"Fp"],[137,14,120,14],[137,15,120,15,"sqrt"],[137,19,120,19],[137,20,120,20,"c"],[137,21,120,21],[137,22,120,22],[137,23,120,23],[137,24,120,24],[138,4,121,4],[139,4,122,4],[140,4,123,4],[140,8,123,8],[140,9,123,9,"hasEven"],[140,16,123,16],[140,17,123,17,"y"],[140,18,123,18],[140,19,123,19],[140,21,124,8,"y"],[140,22,124,9],[140,25,124,12,"Fp"],[140,27,124,14],[140,28,124,15,"neg"],[140,31,124,18],[140,32,124,19,"y"],[140,33,124,20],[140,34,124,21],[141,4,125,4],[141,10,125,10,"p"],[141,11,125,11],[141,14,125,14,"Pointk1"],[141,21,125,21],[141,22,125,22,"fromAffine"],[141,32,125,32],[141,33,125,33],[142,6,125,35,"x"],[142,7,125,36],[143,6,125,38,"y"],[144,4,125,40],[144,5,125,41],[144,6,125,42],[145,4,126,4,"p"],[145,5,126,5],[145,6,126,6,"assertValidity"],[145,20,126,20],[145,21,126,21],[145,22,126,22],[146,4,127,4],[146,11,127,11,"p"],[146,12,127,12],[147,2,128,0],[148,2,129,0],[148,8,129,6,"num"],[148,11,129,9],[148,14,129,12,"utils_ts_1"],[148,24,129,22],[148,25,129,23,"bytesToNumberBE"],[148,40,129,38],[149,2,130,0],[150,0,131,0],[151,0,132,0],[152,2,133,0],[152,11,133,9,"challenge"],[152,20,133,18,"challenge"],[152,21,133,19],[152,24,133,22,"args"],[152,28,133,26],[152,30,133,28],[153,4,134,4],[153,11,134,11,"Pointk1"],[153,18,134,18],[153,19,134,19,"Fn"],[153,21,134,21],[153,22,134,22,"create"],[153,28,134,28],[153,29,134,29,"num"],[153,32,134,32],[153,33,134,33,"taggedHash"],[153,43,134,43],[153,44,134,44],[153,63,134,63],[153,65,134,65],[153,68,134,68,"args"],[153,72,134,72],[153,73,134,73],[153,74,134,74],[153,75,134,75],[154,2,135,0],[155,2,136,0],[156,0,137,0],[157,0,138,0],[158,2,139,0],[158,11,139,9,"schnorrGetPublicKey"],[158,30,139,28,"schnorrGetPublicKey"],[158,31,139,29,"secretKey"],[158,40,139,38],[158,42,139,40],[159,4,140,4],[159,11,140,11,"schnorrGetExtPubKey"],[159,30,140,30],[159,31,140,31,"secretKey"],[159,40,140,40],[159,41,140,41],[159,42,140,42,"bytes"],[159,47,140,47],[159,48,140,48],[159,49,140,49],[160,2,141,0],[161,2,142,0],[162,0,143,0],[163,0,144,0],[164,0,145,0],[165,2,146,0],[165,11,146,9,"schnorrSign"],[165,22,146,20,"schnorrSign"],[165,23,146,21,"message"],[165,30,146,28],[165,32,146,30,"secretKey"],[165,41,146,39],[165,43,146,41,"auxRand"],[165,50,146,48],[165,53,146,51],[165,54,146,52],[165,55,146,53],[165,57,146,55,"utils_js_1"],[165,67,146,65],[165,68,146,66,"randomBytes"],[165,79,146,77],[165,81,146,79],[165,83,146,81],[165,84,146,82],[165,86,146,84],[166,4,147,4],[166,10,147,10],[167,6,147,12,"Fn"],[168,4,147,15],[168,5,147,16],[168,8,147,19,"Pointk1"],[168,15,147,26],[169,4,148,4],[169,10,148,10,"m"],[169,11,148,11],[169,14,148,14],[169,15,148,15],[169,16,148,16],[169,18,148,18,"utils_ts_1"],[169,28,148,28],[169,29,148,29,"ensureBytes"],[169,40,148,40],[169,42,148,42],[169,51,148,51],[169,53,148,53,"message"],[169,60,148,60],[169,61,148,61],[170,4,149,4],[170,10,149,10],[171,6,149,12,"bytes"],[171,11,149,17],[171,13,149,19,"px"],[171,15,149,21],[172,6,149,23,"scalar"],[172,12,149,29],[172,14,149,31,"d"],[173,4,149,33],[173,5,149,34],[173,8,149,37,"schnorrGetExtPubKey"],[173,27,149,56],[173,28,149,57,"secretKey"],[173,37,149,66],[173,38,149,67],[173,39,149,68],[173,40,149,69],[174,4,150,4],[174,10,150,10,"a"],[174,11,150,11],[174,14,150,14],[174,15,150,15],[174,16,150,16],[174,18,150,18,"utils_ts_1"],[174,28,150,28],[174,29,150,29,"ensureBytes"],[174,40,150,40],[174,42,150,42],[174,51,150,51],[174,53,150,53,"auxRand"],[174,60,150,60],[174,62,150,62],[174,64,150,64],[174,65,150,65],[174,66,150,66],[174,67,150,67],[175,4,151,4],[175,10,151,10,"t"],[175,11,151,11],[175,14,151,14,"Fn"],[175,16,151,16],[175,17,151,17,"toBytes"],[175,24,151,24],[175,25,151,25,"d"],[175,26,151,26],[175,29,151,29,"num"],[175,32,151,32],[175,33,151,33,"taggedHash"],[175,43,151,43],[175,44,151,44],[175,57,151,57],[175,59,151,59,"a"],[175,60,151,60],[175,61,151,61],[175,62,151,62],[175,63,151,63],[175,64,151,64],[175,65,151,65],[176,4,152,4],[176,10,152,10,"rand"],[176,14,152,14],[176,17,152,17,"taggedHash"],[176,27,152,27],[176,28,152,28],[176,43,152,43],[176,45,152,45,"t"],[176,46,152,46],[176,48,152,48,"px"],[176,50,152,50],[176,52,152,52,"m"],[176,53,152,53],[176,54,152,54],[176,55,152,55],[176,56,152,56],[177,4,153,4],[178,4,154,4],[178,10,154,10],[179,6,154,12,"bytes"],[179,11,154,17],[179,13,154,19,"rx"],[179,15,154,21],[180,6,154,23,"scalar"],[180,12,154,29],[180,14,154,31,"k"],[181,4,154,33],[181,5,154,34],[181,8,154,37,"schnorrGetExtPubKey"],[181,27,154,56],[181,28,154,57,"rand"],[181,32,154,61],[181,33,154,62],[182,4,155,4],[182,10,155,10,"e"],[182,11,155,11],[182,14,155,14,"challenge"],[182,23,155,23],[182,24,155,24,"rx"],[182,26,155,26],[182,28,155,28,"px"],[182,30,155,30],[182,32,155,32,"m"],[182,33,155,33],[182,34,155,34],[182,35,155,35],[182,36,155,36],[183,4,156,4],[183,10,156,10,"sig"],[183,13,156,13],[183,16,156,16],[183,20,156,20,"Uint8Array"],[183,30,156,30],[183,31,156,31],[183,33,156,33],[183,34,156,34],[183,35,156,35],[183,36,156,36],[184,4,157,4,"sig"],[184,7,157,7],[184,8,157,8,"set"],[184,11,157,11],[184,12,157,12,"rx"],[184,14,157,14],[184,16,157,16],[184,17,157,17],[184,18,157,18],[185,4,158,4,"sig"],[185,7,158,7],[185,8,158,8,"set"],[185,11,158,11],[185,12,158,12,"Fn"],[185,14,158,14],[185,15,158,15,"toBytes"],[185,22,158,22],[185,23,158,23,"Fn"],[185,25,158,25],[185,26,158,26,"create"],[185,32,158,32],[185,33,158,33,"k"],[185,34,158,34],[185,37,158,37,"e"],[185,38,158,38],[185,41,158,41,"d"],[185,42,158,42],[185,43,158,43],[185,44,158,44],[185,46,158,46],[185,48,158,48],[185,49,158,49],[186,4,159,4],[187,4,160,4],[187,8,160,8],[187,9,160,9,"schnorrVerify"],[187,22,160,22],[187,23,160,23,"sig"],[187,26,160,26],[187,28,160,28,"m"],[187,29,160,29],[187,31,160,31,"px"],[187,33,160,33],[187,34,160,34],[187,36,161,8],[187,42,161,14],[187,46,161,18,"Error"],[187,51,161,23],[187,52,161,24],[187,86,161,58],[187,87,161,59],[188,4,162,4],[188,11,162,11,"sig"],[188,14,162,14],[189,2,163,0],[190,2,164,0],[191,0,165,0],[192,0,166,0],[193,0,167,0],[194,2,168,0],[194,11,168,9,"schnorrVerify"],[194,24,168,22,"schnorrVerify"],[194,25,168,23,"signature"],[194,34,168,32],[194,36,168,34,"message"],[194,43,168,41],[194,45,168,43,"publicKey"],[194,54,168,52],[194,56,168,54],[195,4,169,4],[195,10,169,10],[196,6,169,12,"Fn"],[196,8,169,14],[197,6,169,16,"BASE"],[198,4,169,21],[198,5,169,22],[198,8,169,25,"Pointk1"],[198,15,169,32],[199,4,170,4],[199,10,170,10,"sig"],[199,13,170,13],[199,16,170,16],[199,17,170,17],[199,18,170,18],[199,20,170,20,"utils_ts_1"],[199,30,170,30],[199,31,170,31,"ensureBytes"],[199,42,170,42],[199,44,170,44],[199,55,170,55],[199,57,170,57,"signature"],[199,66,170,66],[199,68,170,68],[199,70,170,70],[199,71,170,71],[200,4,171,4],[200,10,171,10,"m"],[200,11,171,11],[200,14,171,14],[200,15,171,15],[200,16,171,16],[200,18,171,18,"utils_ts_1"],[200,28,171,28],[200,29,171,29,"ensureBytes"],[200,40,171,40],[200,42,171,42],[200,51,171,51],[200,53,171,53,"message"],[200,60,171,60],[200,61,171,61],[201,4,172,4],[201,10,172,10,"pub"],[201,13,172,13],[201,16,172,16],[201,17,172,17],[201,18,172,18],[201,20,172,20,"utils_ts_1"],[201,30,172,30],[201,31,172,31,"ensureBytes"],[201,42,172,42],[201,44,172,44],[201,55,172,55],[201,57,172,57,"publicKey"],[201,66,172,66],[201,68,172,68],[201,70,172,70],[201,71,172,71],[202,4,173,4],[202,8,173,8],[203,6,174,8],[203,12,174,14,"P"],[203,13,174,15],[203,16,174,18,"lift_x"],[203,22,174,24],[203,23,174,25,"num"],[203,26,174,28],[203,27,174,29,"pub"],[203,30,174,32],[203,31,174,33],[203,32,174,34],[203,33,174,35],[203,34,174,36],[204,6,175,8],[204,12,175,14,"r"],[204,13,175,15],[204,16,175,18,"num"],[204,19,175,21],[204,20,175,22,"sig"],[204,23,175,25],[204,24,175,26,"subarray"],[204,32,175,34],[204,33,175,35],[204,34,175,36],[204,36,175,38],[204,38,175,40],[204,39,175,41],[204,40,175,42],[204,41,175,43],[204,42,175,44],[205,6,176,8],[205,10,176,12],[205,11,176,13],[205,12,176,14],[205,13,176,15],[205,15,176,17,"utils_ts_1"],[205,25,176,27],[205,26,176,28,"inRange"],[205,33,176,35],[205,35,176,37,"r"],[205,36,176,38],[205,38,176,40,"_1n"],[205,41,176,43],[205,43,176,45,"secp256k1_CURVE"],[205,58,176,60],[205,59,176,61,"p"],[205,60,176,62],[205,61,176,63],[205,63,177,12],[205,70,177,19],[205,75,177,24],[206,6,178,8],[206,12,178,14,"s"],[206,13,178,15],[206,16,178,18,"num"],[206,19,178,21],[206,20,178,22,"sig"],[206,23,178,25],[206,24,178,26,"subarray"],[206,32,178,34],[206,33,178,35],[206,35,178,37],[206,37,178,39],[206,39,178,41],[206,40,178,42],[206,41,178,43],[206,42,178,44],[206,43,178,45],[207,6,179,8],[207,10,179,12],[207,11,179,13],[207,12,179,14],[207,13,179,15],[207,15,179,17,"utils_ts_1"],[207,25,179,27],[207,26,179,28,"inRange"],[207,33,179,35],[207,35,179,37,"s"],[207,36,179,38],[207,38,179,40,"_1n"],[207,41,179,43],[207,43,179,45,"secp256k1_CURVE"],[207,58,179,60],[207,59,179,61,"n"],[207,60,179,62],[207,61,179,63],[207,63,180,12],[207,70,180,19],[207,75,180,24],[208,6,181,8],[209,6,182,8],[209,12,182,14,"e"],[209,13,182,15],[209,16,182,18,"challenge"],[209,25,182,27],[209,26,182,28,"Fn"],[209,28,182,30],[209,29,182,31,"toBytes"],[209,36,182,38],[209,37,182,39,"r"],[209,38,182,40],[209,39,182,41],[209,41,182,43,"pointToBytes"],[209,53,182,55],[209,54,182,56,"P"],[209,55,182,57],[209,56,182,58],[209,58,182,60,"m"],[209,59,182,61],[209,60,182,62],[210,6,183,8],[211,6,184,8],[211,12,184,14,"R"],[211,13,184,15],[211,16,184,18,"BASE"],[211,20,184,22],[211,21,184,23,"multiplyUnsafe"],[211,35,184,37],[211,36,184,38,"s"],[211,37,184,39],[211,38,184,40],[211,39,184,41,"add"],[211,42,184,44],[211,43,184,45,"P"],[211,44,184,46],[211,45,184,47,"multiplyUnsafe"],[211,59,184,61],[211,60,184,62,"Fn"],[211,62,184,64],[211,63,184,65,"neg"],[211,66,184,68],[211,67,184,69,"e"],[211,68,184,70],[211,69,184,71],[211,70,184,72],[211,71,184,73],[212,6,185,8],[212,12,185,14],[213,8,185,16,"x"],[213,9,185,17],[214,8,185,19,"y"],[215,6,185,21],[215,7,185,22],[215,10,185,25,"R"],[215,11,185,26],[215,12,185,27,"toAffine"],[215,20,185,35],[215,21,185,36],[215,22,185,37],[216,6,186,8],[217,6,187,8],[217,10,187,12,"R"],[217,11,187,13],[217,12,187,14,"is0"],[217,15,187,17],[217,16,187,18],[217,17,187,19],[217,21,187,23],[217,22,187,24,"hasEven"],[217,29,187,31],[217,30,187,32,"y"],[217,31,187,33],[217,32,187,34],[217,36,187,38,"x"],[217,37,187,39],[217,42,187,44,"r"],[217,43,187,45],[217,45,188,12],[217,52,188,19],[217,57,188,24],[218,6,189,8],[218,13,189,15],[218,17,189,19],[219,4,190,4],[219,5,190,5],[219,6,191,4],[219,13,191,11,"error"],[219,18,191,16],[219,20,191,18],[220,6,192,8],[220,13,192,15],[220,18,192,20],[221,4,193,4],[222,2,194,0],[223,2,195,0],[224,0,196,0],[225,0,197,0],[226,0,198,0],[227,0,199,0],[228,0,200,0],[229,0,201,0],[230,0,202,0],[231,0,203,0],[232,0,204,0],[233,0,205,0],[234,0,206,0],[235,0,207,0],[236,2,208,0,"exports"],[236,9,208,7],[236,10,208,8,"schnorr"],[236,17,208,15],[236,20,208,18],[236,21,208,19],[236,27,208,25],[237,4,209,4],[237,10,209,10,"size"],[237,14,209,14],[237,17,209,17],[237,19,209,19],[238,4,210,4],[238,10,210,10,"seedLength"],[238,20,210,20],[238,23,210,23],[238,25,210,25],[239,4,211,4],[239,10,211,10,"randomSecretKey"],[239,25,211,25],[239,28,211,28,"randomSecretKey"],[239,29,211,29,"seed"],[239,33,211,33],[239,36,211,36],[239,37,211,37],[239,38,211,38],[239,40,211,40,"utils_js_1"],[239,50,211,50],[239,51,211,51,"randomBytes"],[239,62,211,62],[239,64,211,64,"seedLength"],[239,74,211,74],[239,75,211,75],[239,80,211,80],[240,6,212,8],[240,13,212,15],[240,14,212,16],[240,15,212,17],[240,17,212,19,"modular_ts_1"],[240,29,212,31],[240,30,212,32,"mapHashToField"],[240,44,212,46],[240,46,212,48,"seed"],[240,50,212,52],[240,52,212,54,"secp256k1_CURVE"],[240,67,212,69],[240,68,212,70,"n"],[240,69,212,71],[240,70,212,72],[241,4,213,4],[241,5,213,5],[242,4,214,4],[243,4,215,4,"exports"],[243,11,215,11],[243,12,215,12,"secp256k1"],[243,21,215,21],[243,22,215,22,"utils"],[243,27,215,27],[243,28,215,28,"randomSecretKey"],[243,43,215,43],[244,4,216,4],[244,13,216,13,"keygen"],[244,19,216,19,"keygen"],[244,20,216,20,"seed"],[244,24,216,24],[244,26,216,26],[245,6,217,8],[245,12,217,14,"secretKey"],[245,21,217,23],[245,24,217,26,"randomSecretKey"],[245,39,217,41],[245,40,217,42,"seed"],[245,44,217,46],[245,45,217,47],[246,6,218,8],[246,13,218,15],[247,8,218,17,"secretKey"],[247,17,218,26],[248,8,218,28,"publicKey"],[248,17,218,37],[248,19,218,39,"schnorrGetPublicKey"],[248,38,218,58],[248,39,218,59,"secretKey"],[248,48,218,68],[249,6,218,70],[249,7,218,71],[250,4,219,4],[251,4,220,4],[251,11,220,11],[252,6,221,8,"keygen"],[252,12,221,14],[253,6,222,8,"getPublicKey"],[253,18,222,20],[253,20,222,22,"schnorrGetPublicKey"],[253,39,222,41],[254,6,223,8,"sign"],[254,10,223,12],[254,12,223,14,"schnorrSign"],[254,23,223,25],[255,6,224,8,"verify"],[255,12,224,14],[255,14,224,16,"schnorrVerify"],[255,27,224,29],[256,6,225,8,"Point"],[256,11,225,13],[256,13,225,15,"Pointk1"],[256,20,225,22],[257,6,226,8,"utils"],[257,11,226,13],[257,13,226,15],[258,8,227,12,"randomSecretKey"],[258,23,227,27],[258,25,227,29,"randomSecretKey"],[258,40,227,44],[259,8,228,12,"randomPrivateKey"],[259,24,228,28],[259,26,228,30,"randomSecretKey"],[259,41,228,45],[260,8,229,12,"taggedHash"],[260,18,229,22],[261,8,230,12],[262,8,231,12,"lift_x"],[262,14,231,18],[263,8,232,12,"pointToBytes"],[263,20,232,24],[264,8,233,12,"numberToBytesBE"],[264,23,233,27],[264,25,233,29,"utils_ts_1"],[264,35,233,39],[264,36,233,40,"numberToBytesBE"],[264,51,233,55],[265,8,234,12,"bytesToNumberBE"],[265,23,234,27],[265,25,234,29,"utils_ts_1"],[265,35,234,39],[265,36,234,40,"bytesToNumberBE"],[265,51,234,55],[266,8,235,12,"mod"],[266,11,235,15],[266,13,235,17,"modular_ts_1"],[266,25,235,29],[266,26,235,30,"mod"],[267,6,236,8],[267,7,236,9],[268,6,237,8,"lengths"],[268,13,237,15],[268,15,237,17],[269,8,238,12,"secretKey"],[269,17,238,21],[269,19,238,23,"size"],[269,23,238,27],[270,8,239,12,"publicKey"],[270,17,239,21],[270,19,239,23,"size"],[270,23,239,27],[271,8,240,12,"publicKeyHasPrefix"],[271,26,240,30],[271,28,240,32],[271,33,240,37],[272,8,241,12,"signature"],[272,17,241,21],[272,19,241,23,"size"],[272,23,241,27],[272,26,241,30],[272,27,241,31],[273,8,242,12,"seed"],[273,12,242,16],[273,14,242,18,"seedLength"],[274,6,243,8],[275,4,244,4],[275,5,244,5],[276,2,245,0],[276,3,245,1],[276,5,245,3],[276,6,245,4],[277,2,246,0],[277,8,246,6,"isoMap"],[277,14,246,12],[277,17,246,15],[277,32,246,31],[277,33,246,32],[277,39,246,38],[277,40,246,39],[277,41,246,40],[277,43,246,42,"hash_to_curve_ts_1"],[277,61,246,60],[277,62,246,61,"isogenyMap"],[277,72,246,71],[277,74,246,73,"Fpk1"],[277,78,246,77],[277,80,246,79],[278,2,247,4],[279,2,248,4],[279,3,249,8],[279,71,249,76],[279,73,250,8],[279,140,250,75],[279,142,251,8],[279,210,251,76],[279,212,252,8],[279,280,252,76],[279,281,253,5],[280,2,254,4],[281,2,255,4],[281,3,256,8],[281,71,256,76],[281,73,257,8],[281,141,257,76],[281,143,258,8],[281,211,258,76],[281,212,258,78],[282,2,258,78],[282,3,259,5],[283,2,260,4],[284,2,261,4],[284,3,262,8],[284,71,262,76],[284,73,263,8],[284,141,263,76],[284,143,264,8],[284,211,264,76],[284,213,265,8],[284,281,265,76],[284,282,266,5],[285,2,267,4],[286,2,268,4],[286,3,269,8],[286,71,269,76],[286,73,270,8],[286,141,270,76],[286,143,271,8],[286,211,271,76],[286,213,272,8],[286,281,272,76],[286,282,272,78],[287,2,272,78],[287,3,273,5],[287,4,274,1],[287,5,274,2,"map"],[287,8,274,5],[287,9,274,7,"i"],[287,10,274,8],[287,14,274,13,"i"],[287,15,274,14],[287,16,274,15,"map"],[287,19,274,18],[287,20,274,20,"j"],[287,21,274,21],[287,25,274,26,"BigInt"],[287,31,274,32],[287,32,274,33,"j"],[287,33,274,34],[287,34,274,35],[287,35,274,36],[287,36,274,37],[287,37,274,38],[287,39,274,40],[287,40,274,41],[288,2,275,0],[288,8,275,6,"mapSWU"],[288,14,275,12],[288,17,275,15],[288,32,275,31],[288,33,275,32],[288,39,275,38],[288,40,275,39],[288,41,275,40],[288,43,275,42,"weierstrass_ts_1"],[288,59,275,58],[288,60,275,59,"mapToCurveSimpleSWU"],[288,79,275,78],[288,81,275,80,"Fpk1"],[288,85,275,84],[288,87,275,86],[289,4,276,4,"A"],[289,5,276,5],[289,7,276,7,"BigInt"],[289,13,276,13],[289,14,276,14],[289,82,276,82],[289,83,276,83],[290,4,277,4,"B"],[290,5,277,5],[290,7,277,7,"BigInt"],[290,13,277,13],[290,14,277,14],[290,20,277,20],[290,21,277,21],[291,4,278,4,"Z"],[291,5,278,5],[291,7,278,7,"Fpk1"],[291,11,278,11],[291,12,278,12,"create"],[291,18,278,18],[291,19,278,19,"BigInt"],[291,25,278,25],[291,26,278,26],[291,31,278,31],[291,32,278,32],[292,2,279,0],[292,3,279,1],[292,4,279,2],[292,6,279,4],[292,7,279,5],[293,2,280,0],[294,2,281,0,"exports"],[294,9,281,7],[294,10,281,8,"secp256k1_hasher"],[294,26,281,24],[294,29,281,27],[294,30,281,28],[294,36,281,34],[294,37,281,35],[294,38,281,36],[294,40,281,38,"hash_to_curve_ts_1"],[294,58,281,56],[294,59,281,57,"createHasher"],[294,71,281,69],[294,73,281,71,"exports"],[294,80,281,78],[294,81,281,79,"secp256k1"],[294,90,281,88],[294,91,281,89,"Point"],[294,96,281,94],[294,98,281,97,"scalars"],[294,105,281,104],[294,109,281,109],[295,4,282,4],[295,10,282,10],[296,6,282,12,"x"],[296,7,282,13],[297,6,282,15,"y"],[298,4,282,17],[298,5,282,18],[298,8,282,21,"mapSWU"],[298,14,282,27],[298,15,282,28,"Fpk1"],[298,19,282,32],[298,20,282,33,"create"],[298,26,282,39],[298,27,282,40,"scalars"],[298,34,282,47],[298,35,282,48],[298,36,282,49],[298,37,282,50],[298,38,282,51],[298,39,282,52],[299,4,283,4],[299,11,283,11,"isoMap"],[299,17,283,17],[299,18,283,18,"x"],[299,19,283,19],[299,21,283,21,"y"],[299,22,283,22],[299,23,283,23],[300,2,284,0],[300,3,284,1],[300,5,284,3],[301,4,285,4,"DST"],[301,7,285,7],[301,9,285,9],[301,41,285,41],[302,4,286,4,"encodeDST"],[302,13,286,13],[302,15,286,15],[302,47,286,47],[303,4,287,4,"p"],[303,5,287,5],[303,7,287,7,"Fpk1"],[303,11,287,11],[303,12,287,12,"ORDER"],[303,17,287,17],[304,4,288,4,"m"],[304,5,288,5],[304,7,288,7],[304,8,288,8],[305,4,289,4,"k"],[305,5,289,5],[305,7,289,7],[305,10,289,10],[306,4,290,4,"expand"],[306,10,290,10],[306,12,290,12],[306,17,290,17],[307,4,291,4,"hash"],[307,8,291,8],[307,10,291,10,"sha2_js_1"],[307,19,291,19],[307,20,291,20,"sha256"],[308,2,292,0],[308,3,292,1],[308,4,292,2],[308,6,292,4],[308,7,292,5],[309,2,293,0],[310,2,294,0,"exports"],[310,9,294,7],[310,10,294,8,"hashToCurve"],[310,21,294,19],[310,24,294,22],[310,25,294,23],[310,31,294,29,"exports"],[310,38,294,36],[310,39,294,37,"secp256k1_hasher"],[310,55,294,53],[310,56,294,54,"hashToCurve"],[310,67,294,65],[310,69,294,67],[310,70,294,68],[311,2,295,0],[312,2,296,0,"exports"],[312,9,296,7],[312,10,296,8,"encodeToCurve"],[312,23,296,21],[312,26,296,24],[312,27,296,25],[312,33,296,31,"exports"],[312,40,296,38],[312,41,296,39,"secp256k1_hasher"],[312,57,296,55],[312,58,296,56,"encodeToCurve"],[312,71,296,69],[312,73,296,71],[312,74,296,72],[313,0,296,73],[313,3]],"functionMap":{"names":["<global>","sqrtMod","taggedHash","pointToBytes","<anonymous>","hasEven","schnorrGetExtPubKey","lift_x","challenge","schnorrGetPublicKey","schnorrSign","schnorrVerify","randomSecretKey","keygen","map$argument_0","i.map$argument_0"],"mappings":"AAA;AC4C;CDuB;AEqB;CFQ;qBGE,uCH;iCIC,6BJ;gBKC,sBL;AME;CNM;AOK;CPc;AQK;CRE;ASI;CTE;AUK;CViB;AWK;CX0B;mBIc;4BQG;KRE;ISG;KTG;CJ0B;gCIC;MU4B,aC,gBD,CV,EJ;gCIC;EJI;4BIE;EJW;uBIE,0CJ;yBIE,4CJ"}},"type":"js/module"}]}