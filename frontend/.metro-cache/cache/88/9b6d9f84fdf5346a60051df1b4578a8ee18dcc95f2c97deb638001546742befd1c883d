{"dependencies":[{"name":"hash.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":11,"index":26},"end":{"line":3,"column":29,"index":44}}],"key":"wgL2kNc06mq/tMLGadAVxXPgynA=","exportNames":["*"]}},{"name":"../curves","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":13,"index":59},"end":{"line":4,"column":33,"index":79}}],"key":"THepG+iSmaA7+l1asK/DPPTMaH4=","exportNames":["*"]}},{"name":"../utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":12,"index":93},"end":{"line":5,"column":31,"index":112}}],"key":"RFGtgFE/Tu4zdfnbMKbFHDM/T4I=","exportNames":["*"]}},{"name":"./key","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":14,"index":190},"end":{"line":8,"column":30,"index":206}}],"key":"c2icHT5wjuk5iYUuCG2NMGWD6xE=","exportNames":["*"]}},{"name":"./signature","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":16,"index":224},"end":{"line":9,"column":38,"index":246}}],"key":"MNBHEq71uolxlMEMq/nRow+dvKY=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var hash = require(_dependencyMap[0], \"hash.js\");\n  var curves = require(_dependencyMap[1], \"../curves\");\n  var utils = require(_dependencyMap[2], \"../utils\");\n  var assert = utils.assert;\n  var parseBytes = utils.parseBytes;\n  var KeyPair = require(_dependencyMap[3], \"./key\");\n  var Signature = require(_dependencyMap[4], \"./signature\");\n  function EDDSA(curve) {\n    assert(curve === 'ed25519', 'only tested with ed25519 so far');\n    if (!(this instanceof EDDSA)) return new EDDSA(curve);\n    curve = curves[curve].curve;\n    this.curve = curve;\n    this.g = curve.g;\n    this.g.precompute(curve.n.bitLength() + 1);\n    this.pointClass = curve.point().constructor;\n    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n    this.hash = hash.sha512;\n  }\n  module.exports = EDDSA;\n\n  /**\n  * @param {Array|String} message - message bytes\n  * @param {Array|String|KeyPair} secret - secret bytes or a keypair\n  * @returns {Signature} - signature\n  */\n  EDDSA.prototype.sign = function sign(message, secret) {\n    message = parseBytes(message);\n    var key = this.keyFromSecret(secret);\n    var r = this.hashInt(key.messagePrefix(), message);\n    var R = this.g.mul(r);\n    var Rencoded = this.encodePoint(R);\n    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());\n    var S = r.add(s_).umod(this.curve.n);\n    return this.makeSignature({\n      R: R,\n      S: S,\n      Rencoded: Rencoded\n    });\n  };\n\n  /**\n  * @param {Array} message - message bytes\n  * @param {Array|String|Signature} sig - sig bytes\n  * @param {Array|String|Point|KeyPair} pub - public key\n  * @returns {Boolean} - true if public key matches sig of message\n  */\n  EDDSA.prototype.verify = function verify(message, sig, pub) {\n    message = parseBytes(message);\n    sig = this.makeSignature(sig);\n    if (sig.S().gte(sig.eddsa.curve.n) || sig.S().isNeg()) {\n      return false;\n    }\n    var key = this.keyFromPublic(pub);\n    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n    var SG = this.g.mul(sig.S());\n    var RplusAh = sig.R().add(key.pub().mul(h));\n    return RplusAh.eq(SG);\n  };\n  EDDSA.prototype.hashInt = function hashInt() {\n    var hash = this.hash();\n    for (var i = 0; i < arguments.length; i++) hash.update(arguments[i]);\n    return utils.intFromLE(hash.digest()).umod(this.curve.n);\n  };\n  EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n    return KeyPair.fromPublic(this, pub);\n  };\n  EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n    return KeyPair.fromSecret(this, secret);\n  };\n  EDDSA.prototype.makeSignature = function makeSignature(sig) {\n    if (sig instanceof Signature) return sig;\n    return new Signature(this, sig);\n  };\n\n  /**\n  * * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n  *\n  * EDDSA defines methods for encoding and decoding points and integers. These are\n  * helper convenience methods, that pass along to utility functions implied\n  * parameters.\n  *\n  */\n  EDDSA.prototype.encodePoint = function encodePoint(point) {\n    var enc = point.getY().toArray('le', this.encodingLength);\n    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n    return enc;\n  };\n  EDDSA.prototype.decodePoint = function decodePoint(bytes) {\n    bytes = utils.parseBytes(bytes);\n    var lastIx = bytes.length - 1;\n    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n    var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n    var y = utils.intFromLE(normed);\n    return this.curve.pointFromY(y, xIsOdd);\n  };\n  EDDSA.prototype.encodeInt = function encodeInt(num) {\n    return num.toArray('le', this.encodingLength);\n  };\n  EDDSA.prototype.decodeInt = function decodeInt(bytes) {\n    return utils.intFromLE(bytes);\n  };\n  EDDSA.prototype.isPoint = function isPoint(val) {\n    return val instanceof this.pointClass;\n  };\n});","lineCount":108,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"hash"],[4,10,3,8],[4,13,3,11,"require"],[4,20,3,18],[4,21,3,18,"_dependencyMap"],[4,35,3,18],[4,49,3,28],[4,50,3,29],[5,2,4,0],[5,6,4,4,"curves"],[5,12,4,10],[5,15,4,13,"require"],[5,22,4,20],[5,23,4,20,"_dependencyMap"],[5,37,4,20],[5,53,4,32],[5,54,4,33],[6,2,5,0],[6,6,5,4,"utils"],[6,11,5,9],[6,14,5,12,"require"],[6,21,5,19],[6,22,5,19,"_dependencyMap"],[6,36,5,19],[6,51,5,30],[6,52,5,31],[7,2,6,0],[7,6,6,4,"assert"],[7,12,6,10],[7,15,6,13,"utils"],[7,20,6,18],[7,21,6,19,"assert"],[7,27,6,25],[8,2,7,0],[8,6,7,4,"parseBytes"],[8,16,7,14],[8,19,7,17,"utils"],[8,24,7,22],[8,25,7,23,"parseBytes"],[8,35,7,33],[9,2,8,0],[9,6,8,4,"KeyPair"],[9,13,8,11],[9,16,8,14,"require"],[9,23,8,21],[9,24,8,21,"_dependencyMap"],[9,38,8,21],[9,50,8,29],[9,51,8,30],[10,2,9,0],[10,6,9,4,"Signature"],[10,15,9,13],[10,18,9,16,"require"],[10,25,9,23],[10,26,9,23,"_dependencyMap"],[10,40,9,23],[10,58,9,37],[10,59,9,38],[11,2,11,0],[11,11,11,9,"EDDSA"],[11,16,11,14,"EDDSA"],[11,17,11,15,"curve"],[11,22,11,20],[11,24,11,22],[12,4,12,2,"assert"],[12,10,12,8],[12,11,12,9,"curve"],[12,16,12,14],[12,21,12,19],[12,30,12,28],[12,32,12,30],[12,65,12,63],[12,66,12,64],[13,4,14,2],[13,8,14,6],[13,10,14,8],[13,14,14,12],[13,26,14,24,"EDDSA"],[13,31,14,29],[13,32,14,30],[13,34,15,4],[13,41,15,11],[13,45,15,15,"EDDSA"],[13,50,15,20],[13,51,15,21,"curve"],[13,56,15,26],[13,57,15,27],[14,4,17,2,"curve"],[14,9,17,7],[14,12,17,10,"curves"],[14,18,17,16],[14,19,17,17,"curve"],[14,24,17,22],[14,25,17,23],[14,26,17,24,"curve"],[14,31,17,29],[15,4,18,2],[15,8,18,6],[15,9,18,7,"curve"],[15,14,18,12],[15,17,18,15,"curve"],[15,22,18,20],[16,4,19,2],[16,8,19,6],[16,9,19,7,"g"],[16,10,19,8],[16,13,19,11,"curve"],[16,18,19,16],[16,19,19,17,"g"],[16,20,19,18],[17,4,20,2],[17,8,20,6],[17,9,20,7,"g"],[17,10,20,8],[17,11,20,9,"precompute"],[17,21,20,19],[17,22,20,20,"curve"],[17,27,20,25],[17,28,20,26,"n"],[17,29,20,27],[17,30,20,28,"bitLength"],[17,39,20,37],[17,40,20,38],[17,41,20,39],[17,44,20,42],[17,45,20,43],[17,46,20,44],[18,4,22,2],[18,8,22,6],[18,9,22,7,"pointClass"],[18,19,22,17],[18,22,22,20,"curve"],[18,27,22,25],[18,28,22,26,"point"],[18,33,22,31],[18,34,22,32],[18,35,22,33],[18,36,22,34,"constructor"],[18,47,22,45],[19,4,23,2],[19,8,23,6],[19,9,23,7,"encodingLength"],[19,23,23,21],[19,26,23,24,"Math"],[19,30,23,28],[19,31,23,29,"ceil"],[19,35,23,33],[19,36,23,34,"curve"],[19,41,23,39],[19,42,23,40,"n"],[19,43,23,41],[19,44,23,42,"bitLength"],[19,53,23,51],[19,54,23,52],[19,55,23,53],[19,58,23,56],[19,59,23,57],[19,60,23,58],[20,4,24,2],[20,8,24,6],[20,9,24,7,"hash"],[20,13,24,11],[20,16,24,14,"hash"],[20,20,24,18],[20,21,24,19,"sha512"],[20,27,24,25],[21,2,25,0],[22,2,27,0,"module"],[22,8,27,6],[22,9,27,7,"exports"],[22,16,27,14],[22,19,27,17,"EDDSA"],[22,24,27,22],[24,2,29,0],[25,0,30,0],[26,0,31,0],[27,0,32,0],[28,0,33,0],[29,2,34,0,"EDDSA"],[29,7,34,5],[29,8,34,6,"prototype"],[29,17,34,15],[29,18,34,16,"sign"],[29,22,34,20],[29,25,34,23],[29,34,34,32,"sign"],[29,38,34,36,"sign"],[29,39,34,37,"message"],[29,46,34,44],[29,48,34,46,"secret"],[29,54,34,52],[29,56,34,54],[30,4,35,2,"message"],[30,11,35,9],[30,14,35,12,"parseBytes"],[30,24,35,22],[30,25,35,23,"message"],[30,32,35,30],[30,33,35,31],[31,4,36,2],[31,8,36,6,"key"],[31,11,36,9],[31,14,36,12],[31,18,36,16],[31,19,36,17,"keyFromSecret"],[31,32,36,30],[31,33,36,31,"secret"],[31,39,36,37],[31,40,36,38],[32,4,37,2],[32,8,37,6,"r"],[32,9,37,7],[32,12,37,10],[32,16,37,14],[32,17,37,15,"hashInt"],[32,24,37,22],[32,25,37,23,"key"],[32,28,37,26],[32,29,37,27,"messagePrefix"],[32,42,37,40],[32,43,37,41],[32,44,37,42],[32,46,37,44,"message"],[32,53,37,51],[32,54,37,52],[33,4,38,2],[33,8,38,6,"R"],[33,9,38,7],[33,12,38,10],[33,16,38,14],[33,17,38,15,"g"],[33,18,38,16],[33,19,38,17,"mul"],[33,22,38,20],[33,23,38,21,"r"],[33,24,38,22],[33,25,38,23],[34,4,39,2],[34,8,39,6,"Rencoded"],[34,16,39,14],[34,19,39,17],[34,23,39,21],[34,24,39,22,"encodePoint"],[34,35,39,33],[34,36,39,34,"R"],[34,37,39,35],[34,38,39,36],[35,4,40,2],[35,8,40,6,"s_"],[35,10,40,8],[35,13,40,11],[35,17,40,15],[35,18,40,16,"hashInt"],[35,25,40,23],[35,26,40,24,"Rencoded"],[35,34,40,32],[35,36,40,34,"key"],[35,39,40,37],[35,40,40,38,"pubBytes"],[35,48,40,46],[35,49,40,47],[35,50,40,48],[35,52,40,50,"message"],[35,59,40,57],[35,60,40,58],[35,61,41,5,"mul"],[35,64,41,8],[35,65,41,9,"key"],[35,68,41,12],[35,69,41,13,"priv"],[35,73,41,17],[35,74,41,18],[35,75,41,19],[35,76,41,20],[36,4,42,2],[36,8,42,6,"S"],[36,9,42,7],[36,12,42,10,"r"],[36,13,42,11],[36,14,42,12,"add"],[36,17,42,15],[36,18,42,16,"s_"],[36,20,42,18],[36,21,42,19],[36,22,42,20,"umod"],[36,26,42,24],[36,27,42,25],[36,31,42,29],[36,32,42,30,"curve"],[36,37,42,35],[36,38,42,36,"n"],[36,39,42,37],[36,40,42,38],[37,4,43,2],[37,11,43,9],[37,15,43,13],[37,16,43,14,"makeSignature"],[37,29,43,27],[37,30,43,28],[38,6,43,30,"R"],[38,7,43,31],[38,9,43,33,"R"],[38,10,43,34],[39,6,43,36,"S"],[39,7,43,37],[39,9,43,39,"S"],[39,10,43,40],[40,6,43,42,"Rencoded"],[40,14,43,50],[40,16,43,52,"Rencoded"],[41,4,43,61],[41,5,43,62],[41,6,43,63],[42,2,44,0],[42,3,44,1],[44,2,46,0],[45,0,47,0],[46,0,48,0],[47,0,49,0],[48,0,50,0],[49,0,51,0],[50,2,52,0,"EDDSA"],[50,7,52,5],[50,8,52,6,"prototype"],[50,17,52,15],[50,18,52,16,"verify"],[50,24,52,22],[50,27,52,25],[50,36,52,34,"verify"],[50,42,52,40,"verify"],[50,43,52,41,"message"],[50,50,52,48],[50,52,52,50,"sig"],[50,55,52,53],[50,57,52,55,"pub"],[50,60,52,58],[50,62,52,60],[51,4,53,2,"message"],[51,11,53,9],[51,14,53,12,"parseBytes"],[51,24,53,22],[51,25,53,23,"message"],[51,32,53,30],[51,33,53,31],[52,4,54,2,"sig"],[52,7,54,5],[52,10,54,8],[52,14,54,12],[52,15,54,13,"makeSignature"],[52,28,54,26],[52,29,54,27,"sig"],[52,32,54,30],[52,33,54,31],[53,4,55,2],[53,8,55,6,"sig"],[53,11,55,9],[53,12,55,10,"S"],[53,13,55,11],[53,14,55,12],[53,15,55,13],[53,16,55,14,"gte"],[53,19,55,17],[53,20,55,18,"sig"],[53,23,55,21],[53,24,55,22,"eddsa"],[53,29,55,27],[53,30,55,28,"curve"],[53,35,55,33],[53,36,55,34,"n"],[53,37,55,35],[53,38,55,36],[53,42,55,40,"sig"],[53,45,55,43],[53,46,55,44,"S"],[53,47,55,45],[53,48,55,46],[53,49,55,47],[53,50,55,48,"isNeg"],[53,55,55,53],[53,56,55,54],[53,57,55,55],[53,59,55,57],[54,6,56,4],[54,13,56,11],[54,18,56,16],[55,4,57,2],[56,4,58,2],[56,8,58,6,"key"],[56,11,58,9],[56,14,58,12],[56,18,58,16],[56,19,58,17,"keyFromPublic"],[56,32,58,30],[56,33,58,31,"pub"],[56,36,58,34],[56,37,58,35],[57,4,59,2],[57,8,59,6,"h"],[57,9,59,7],[57,12,59,10],[57,16,59,14],[57,17,59,15,"hashInt"],[57,24,59,22],[57,25,59,23,"sig"],[57,28,59,26],[57,29,59,27,"Rencoded"],[57,37,59,35],[57,38,59,36],[57,39,59,37],[57,41,59,39,"key"],[57,44,59,42],[57,45,59,43,"pubBytes"],[57,53,59,51],[57,54,59,52],[57,55,59,53],[57,57,59,55,"message"],[57,64,59,62],[57,65,59,63],[58,4,60,2],[58,8,60,6,"SG"],[58,10,60,8],[58,13,60,11],[58,17,60,15],[58,18,60,16,"g"],[58,19,60,17],[58,20,60,18,"mul"],[58,23,60,21],[58,24,60,22,"sig"],[58,27,60,25],[58,28,60,26,"S"],[58,29,60,27],[58,30,60,28],[58,31,60,29],[58,32,60,30],[59,4,61,2],[59,8,61,6,"RplusAh"],[59,15,61,13],[59,18,61,16,"sig"],[59,21,61,19],[59,22,61,20,"R"],[59,23,61,21],[59,24,61,22],[59,25,61,23],[59,26,61,24,"add"],[59,29,61,27],[59,30,61,28,"key"],[59,33,61,31],[59,34,61,32,"pub"],[59,37,61,35],[59,38,61,36],[59,39,61,37],[59,40,61,38,"mul"],[59,43,61,41],[59,44,61,42,"h"],[59,45,61,43],[59,46,61,44],[59,47,61,45],[60,4,62,2],[60,11,62,9,"RplusAh"],[60,18,62,16],[60,19,62,17,"eq"],[60,21,62,19],[60,22,62,20,"SG"],[60,24,62,22],[60,25,62,23],[61,2,63,0],[61,3,63,1],[62,2,65,0,"EDDSA"],[62,7,65,5],[62,8,65,6,"prototype"],[62,17,65,15],[62,18,65,16,"hashInt"],[62,25,65,23],[62,28,65,26],[62,37,65,35,"hashInt"],[62,44,65,42,"hashInt"],[62,45,65,42],[62,47,65,45],[63,4,66,2],[63,8,66,6,"hash"],[63,12,66,10],[63,15,66,13],[63,19,66,17],[63,20,66,18,"hash"],[63,24,66,22],[63,25,66,23],[63,26,66,24],[64,4,67,2],[64,9,67,7],[64,13,67,11,"i"],[64,14,67,12],[64,17,67,15],[64,18,67,16],[64,20,67,18,"i"],[64,21,67,19],[64,24,67,22,"arguments"],[64,33,67,31],[64,34,67,32,"length"],[64,40,67,38],[64,42,67,40,"i"],[64,43,67,41],[64,45,67,43],[64,47,68,4,"hash"],[64,51,68,8],[64,52,68,9,"update"],[64,58,68,15],[64,59,68,16,"arguments"],[64,68,68,25],[64,69,68,26,"i"],[64,70,68,27],[64,71,68,28],[64,72,68,29],[65,4,69,2],[65,11,69,9,"utils"],[65,16,69,14],[65,17,69,15,"intFromLE"],[65,26,69,24],[65,27,69,25,"hash"],[65,31,69,29],[65,32,69,30,"digest"],[65,38,69,36],[65,39,69,37],[65,40,69,38],[65,41,69,39],[65,42,69,40,"umod"],[65,46,69,44],[65,47,69,45],[65,51,69,49],[65,52,69,50,"curve"],[65,57,69,55],[65,58,69,56,"n"],[65,59,69,57],[65,60,69,58],[66,2,70,0],[66,3,70,1],[67,2,72,0,"EDDSA"],[67,7,72,5],[67,8,72,6,"prototype"],[67,17,72,15],[67,18,72,16,"keyFromPublic"],[67,31,72,29],[67,34,72,32],[67,43,72,41,"keyFromPublic"],[67,56,72,54,"keyFromPublic"],[67,57,72,55,"pub"],[67,60,72,58],[67,62,72,60],[68,4,73,2],[68,11,73,9,"KeyPair"],[68,18,73,16],[68,19,73,17,"fromPublic"],[68,29,73,27],[68,30,73,28],[68,34,73,32],[68,36,73,34,"pub"],[68,39,73,37],[68,40,73,38],[69,2,74,0],[69,3,74,1],[70,2,76,0,"EDDSA"],[70,7,76,5],[70,8,76,6,"prototype"],[70,17,76,15],[70,18,76,16,"keyFromSecret"],[70,31,76,29],[70,34,76,32],[70,43,76,41,"keyFromSecret"],[70,56,76,54,"keyFromSecret"],[70,57,76,55,"secret"],[70,63,76,61],[70,65,76,63],[71,4,77,2],[71,11,77,9,"KeyPair"],[71,18,77,16],[71,19,77,17,"fromSecret"],[71,29,77,27],[71,30,77,28],[71,34,77,32],[71,36,77,34,"secret"],[71,42,77,40],[71,43,77,41],[72,2,78,0],[72,3,78,1],[73,2,80,0,"EDDSA"],[73,7,80,5],[73,8,80,6,"prototype"],[73,17,80,15],[73,18,80,16,"makeSignature"],[73,31,80,29],[73,34,80,32],[73,43,80,41,"makeSignature"],[73,56,80,54,"makeSignature"],[73,57,80,55,"sig"],[73,60,80,58],[73,62,80,60],[74,4,81,2],[74,8,81,6,"sig"],[74,11,81,9],[74,23,81,21,"Signature"],[74,32,81,30],[74,34,82,4],[74,41,82,11,"sig"],[74,44,82,14],[75,4,83,2],[75,11,83,9],[75,15,83,13,"Signature"],[75,24,83,22],[75,25,83,23],[75,29,83,27],[75,31,83,29,"sig"],[75,34,83,32],[75,35,83,33],[76,2,84,0],[76,3,84,1],[78,2,86,0],[79,0,87,0],[80,0,88,0],[81,0,89,0],[82,0,90,0],[83,0,91,0],[84,0,92,0],[85,0,93,0],[86,2,94,0,"EDDSA"],[86,7,94,5],[86,8,94,6,"prototype"],[86,17,94,15],[86,18,94,16,"encodePoint"],[86,29,94,27],[86,32,94,30],[86,41,94,39,"encodePoint"],[86,52,94,50,"encodePoint"],[86,53,94,51,"point"],[86,58,94,56],[86,60,94,58],[87,4,95,2],[87,8,95,6,"enc"],[87,11,95,9],[87,14,95,12,"point"],[87,19,95,17],[87,20,95,18,"getY"],[87,24,95,22],[87,25,95,23],[87,26,95,24],[87,27,95,25,"toArray"],[87,34,95,32],[87,35,95,33],[87,39,95,37],[87,41,95,39],[87,45,95,43],[87,46,95,44,"encodingLength"],[87,60,95,58],[87,61,95,59],[88,4,96,2,"enc"],[88,7,96,5],[88,8,96,6],[88,12,96,10],[88,13,96,11,"encodingLength"],[88,27,96,25],[88,30,96,28],[88,31,96,29],[88,32,96,30],[88,36,96,34,"point"],[88,41,96,39],[88,42,96,40,"getX"],[88,46,96,44],[88,47,96,45],[88,48,96,46],[88,49,96,47,"isOdd"],[88,54,96,52],[88,55,96,53],[88,56,96,54],[88,59,96,57],[88,63,96,61],[88,66,96,64],[88,67,96,65],[89,4,97,2],[89,11,97,9,"enc"],[89,14,97,12],[90,2,98,0],[90,3,98,1],[91,2,100,0,"EDDSA"],[91,7,100,5],[91,8,100,6,"prototype"],[91,17,100,15],[91,18,100,16,"decodePoint"],[91,29,100,27],[91,32,100,30],[91,41,100,39,"decodePoint"],[91,52,100,50,"decodePoint"],[91,53,100,51,"bytes"],[91,58,100,56],[91,60,100,58],[92,4,101,2,"bytes"],[92,9,101,7],[92,12,101,10,"utils"],[92,17,101,15],[92,18,101,16,"parseBytes"],[92,28,101,26],[92,29,101,27,"bytes"],[92,34,101,32],[92,35,101,33],[93,4,103,2],[93,8,103,6,"lastIx"],[93,14,103,12],[93,17,103,15,"bytes"],[93,22,103,20],[93,23,103,21,"length"],[93,29,103,27],[93,32,103,30],[93,33,103,31],[94,4,104,2],[94,8,104,6,"normed"],[94,14,104,12],[94,17,104,15,"bytes"],[94,22,104,20],[94,23,104,21,"slice"],[94,28,104,26],[94,29,104,27],[94,30,104,28],[94,32,104,30,"lastIx"],[94,38,104,36],[94,39,104,37],[94,40,104,38,"concat"],[94,46,104,44],[94,47,104,45,"bytes"],[94,52,104,50],[94,53,104,51,"lastIx"],[94,59,104,57],[94,60,104,58],[94,63,104,61],[94,64,104,62],[94,68,104,66],[94,69,104,67],[95,4,105,2],[95,8,105,6,"xIsOdd"],[95,14,105,12],[95,17,105,15],[95,18,105,16,"bytes"],[95,23,105,21],[95,24,105,22,"lastIx"],[95,30,105,28],[95,31,105,29],[95,34,105,32],[95,38,105,36],[95,44,105,42],[95,45,105,43],[96,4,107,2],[96,8,107,6,"y"],[96,9,107,7],[96,12,107,10,"utils"],[96,17,107,15],[96,18,107,16,"intFromLE"],[96,27,107,25],[96,28,107,26,"normed"],[96,34,107,32],[96,35,107,33],[97,4,108,2],[97,11,108,9],[97,15,108,13],[97,16,108,14,"curve"],[97,21,108,19],[97,22,108,20,"pointFromY"],[97,32,108,30],[97,33,108,31,"y"],[97,34,108,32],[97,36,108,34,"xIsOdd"],[97,42,108,40],[97,43,108,41],[98,2,109,0],[98,3,109,1],[99,2,111,0,"EDDSA"],[99,7,111,5],[99,8,111,6,"prototype"],[99,17,111,15],[99,18,111,16,"encodeInt"],[99,27,111,25],[99,30,111,28],[99,39,111,37,"encodeInt"],[99,48,111,46,"encodeInt"],[99,49,111,47,"num"],[99,52,111,50],[99,54,111,52],[100,4,112,2],[100,11,112,9,"num"],[100,14,112,12],[100,15,112,13,"toArray"],[100,22,112,20],[100,23,112,21],[100,27,112,25],[100,29,112,27],[100,33,112,31],[100,34,112,32,"encodingLength"],[100,48,112,46],[100,49,112,47],[101,2,113,0],[101,3,113,1],[102,2,115,0,"EDDSA"],[102,7,115,5],[102,8,115,6,"prototype"],[102,17,115,15],[102,18,115,16,"decodeInt"],[102,27,115,25],[102,30,115,28],[102,39,115,37,"decodeInt"],[102,48,115,46,"decodeInt"],[102,49,115,47,"bytes"],[102,54,115,52],[102,56,115,54],[103,4,116,2],[103,11,116,9,"utils"],[103,16,116,14],[103,17,116,15,"intFromLE"],[103,26,116,24],[103,27,116,25,"bytes"],[103,32,116,30],[103,33,116,31],[104,2,117,0],[104,3,117,1],[105,2,119,0,"EDDSA"],[105,7,119,5],[105,8,119,6,"prototype"],[105,17,119,15],[105,18,119,16,"isPoint"],[105,25,119,23],[105,28,119,26],[105,37,119,35,"isPoint"],[105,44,119,42,"isPoint"],[105,45,119,43,"val"],[105,48,119,46],[105,50,119,48],[106,4,120,2],[106,11,120,9,"val"],[106,14,120,12],[106,26,120,24],[106,30,120,28],[106,31,120,29,"pointClass"],[106,41,120,39],[107,2,121,0],[107,3,121,1],[108,0,121,2],[108,3]],"functionMap":{"names":["<global>","EDDSA","sign","verify","hashInt","keyFromPublic","keyFromSecret","makeSignature","encodePoint","decodePoint","encodeInt","decodeInt","isPoint"],"mappings":"AAA;ACU;CDc;uBES;CFU;yBGQ;CHW;0BIE;CJK;gCKE;CLE;gCME;CNE;gCOE;CPI;8BQU;CRI;8BSE;CTS;4BUE;CVE;4BWE;CXE;0BYE;CZE"}},"type":"js/module"}]}