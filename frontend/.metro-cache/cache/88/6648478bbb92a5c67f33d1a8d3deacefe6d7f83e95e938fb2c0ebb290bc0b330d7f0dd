{"dependencies":[{"name":"@solana/buffer-layout","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":51,"index":51}}],"key":"QwywkJpcZkKLkjXs9E7VxOaHAHQ=","exportNames":["*"]}},{"name":"@solana/buffer-layout-utils","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":52},"end":{"line":2,"column":50,"index":102}}],"key":"uY07c2hRI0N+OVJYRD373wbUopw=","exportNames":["*"]}},{"name":"@solana/web3.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":103},"end":{"line":3,"column":57,"index":160}}],"key":"hVqIgOgXAH1+S7mu7qk6LJzdVc8=","exportNames":["*"]}},{"name":"../constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":161},"end":{"line":4,"column":51,"index":212}}],"key":"w33QN4nlqAZn5CNK6M5HKbLWgBA=","exportNames":["*"]}},{"name":"../errors.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":213},"end":{"line":5,"column":170,"index":383}}],"key":"hqwpWRawU/ruYp+nBkn/8IqEHoU=","exportNames":["*"]}},{"name":"./internal.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":384},"end":{"line":6,"column":43,"index":427}}],"key":"8koSC5bhCi+pFNPMfaVFms7TipA=","exportNames":["*"]}},{"name":"./types.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":428},"end":{"line":7,"column":46,"index":474}}],"key":"yJvqu7zVoaSgx/LOxsKU/6eppkQ=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.burnCheckedInstructionData = void 0;\n  exports.createBurnCheckedInstruction = createBurnCheckedInstruction;\n  exports.decodeBurnCheckedInstruction = decodeBurnCheckedInstruction;\n  exports.decodeBurnCheckedInstructionUnchecked = decodeBurnCheckedInstructionUnchecked;\n  var _bufferLayout = require(_dependencyMap[0], \"@solana/buffer-layout\");\n  var _bufferLayoutUtils = require(_dependencyMap[1], \"@solana/buffer-layout-utils\");\n  var _web = require(_dependencyMap[2], \"@solana/web3.js\");\n  var _constants = require(_dependencyMap[3], \"../constants.js\");\n  var _errors = require(_dependencyMap[4], \"../errors.js\");\n  var _internal = require(_dependencyMap[5], \"./internal.js\");\n  var _types = require(_dependencyMap[6], \"./types.js\");\n  /** TODO: docs */\n  const burnCheckedInstructionData = exports.burnCheckedInstructionData = (0, _bufferLayout.struct)([(0, _bufferLayout.u8)('instruction'), (0, _bufferLayoutUtils.u64)('amount'), (0, _bufferLayout.u8)('decimals')]);\n  /**\n   * Construct a BurnChecked instruction\n   *\n   * @param mint         Mint for the account\n   * @param account      Account to burn tokens from\n   * @param owner        Owner of the account\n   * @param amount       Number of tokens to burn\n   * @param decimals     Number of decimals in burn amount\n   * @param multiSigners Signing accounts if `owner` is a multisig\n   * @param programId    SPL Token program account\n   *\n   * @return Instruction to add to a transaction\n   */\n  function createBurnCheckedInstruction(account, mint, owner, amount, decimals, multiSigners = [], programId = _constants.TOKEN_PROGRAM_ID) {\n    const keys = (0, _internal.addSigners)([{\n      pubkey: account,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: mint,\n      isSigner: false,\n      isWritable: true\n    }], owner, multiSigners);\n    const data = Buffer.alloc(burnCheckedInstructionData.span);\n    burnCheckedInstructionData.encode({\n      instruction: _types.TokenInstruction.BurnChecked,\n      amount: BigInt(amount),\n      decimals\n    }, data);\n    return new _web.TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n  }\n  /**\n   * Decode a BurnChecked instruction and validate it\n   *\n   * @param instruction Transaction instruction to decode\n   * @param programId   SPL Token program account\n   *\n   * @return Decoded, valid instruction\n   */\n  function decodeBurnCheckedInstruction(instruction, programId = _constants.TOKEN_PROGRAM_ID) {\n    if (!instruction.programId.equals(programId)) throw new _errors.TokenInvalidInstructionProgramError();\n    if (instruction.data.length !== burnCheckedInstructionData.span) throw new _errors.TokenInvalidInstructionDataError();\n    const {\n      keys: {\n        account,\n        mint,\n        owner,\n        multiSigners\n      },\n      data\n    } = decodeBurnCheckedInstructionUnchecked(instruction);\n    if (data.instruction !== _types.TokenInstruction.BurnChecked) throw new _errors.TokenInvalidInstructionTypeError();\n    if (!account || !mint || !owner) throw new _errors.TokenInvalidInstructionKeysError();\n    // TODO: key checks?\n    return {\n      programId,\n      keys: {\n        account,\n        mint,\n        owner,\n        multiSigners\n      },\n      data\n    };\n  }\n  /**\n   * Decode a BurnChecked instruction without validating it\n   *\n   * @param instruction Transaction instruction to decode\n   *\n   * @return Decoded, non-validated instruction\n   */\n  function decodeBurnCheckedInstructionUnchecked({\n    programId,\n    keys: [account, mint, owner, ...multiSigners],\n    data\n  }) {\n    return {\n      programId,\n      keys: {\n        account,\n        mint,\n        owner,\n        multiSigners\n      },\n      data: burnCheckedInstructionData.decode(data)\n    };\n  }\n});","lineCount":110,"map":[[9,2,1,0],[9,6,1,0,"_bufferLayout"],[9,19,1,0],[9,22,1,0,"require"],[9,29,1,0],[9,30,1,0,"_dependencyMap"],[9,44,1,0],[10,2,2,0],[10,6,2,0,"_bufferLayoutUtils"],[10,24,2,0],[10,27,2,0,"require"],[10,34,2,0],[10,35,2,0,"_dependencyMap"],[10,49,2,0],[11,2,3,0],[11,6,3,0,"_web"],[11,10,3,0],[11,13,3,0,"require"],[11,20,3,0],[11,21,3,0,"_dependencyMap"],[11,35,3,0],[12,2,4,0],[12,6,4,0,"_constants"],[12,16,4,0],[12,19,4,0,"require"],[12,26,4,0],[12,27,4,0,"_dependencyMap"],[12,41,4,0],[13,2,5,0],[13,6,5,0,"_errors"],[13,13,5,0],[13,16,5,0,"require"],[13,23,5,0],[13,24,5,0,"_dependencyMap"],[13,38,5,0],[14,2,6,0],[14,6,6,0,"_internal"],[14,15,6,0],[14,18,6,0,"require"],[14,25,6,0],[14,26,6,0,"_dependencyMap"],[14,40,6,0],[15,2,7,0],[15,6,7,0,"_types"],[15,12,7,0],[15,15,7,0,"require"],[15,22,7,0],[15,23,7,0,"_dependencyMap"],[15,37,7,0],[16,2,8,0],[17,2,9,7],[17,8,9,13,"burnCheckedInstructionData"],[17,34,9,39],[17,37,9,39,"exports"],[17,44,9,39],[17,45,9,39,"burnCheckedInstructionData"],[17,71,9,39],[17,74,9,42],[17,78,9,42,"struct"],[17,98,9,48],[17,100,9,49],[17,101,10,4],[17,105,10,4,"u8"],[17,121,10,6],[17,123,10,7],[17,136,10,20],[17,137,10,21],[17,139,11,4],[17,143,11,4,"u64"],[17,165,11,7],[17,167,11,8],[17,175,11,16],[17,176,11,17],[17,178,12,4],[17,182,12,4,"u8"],[17,198,12,6],[17,200,12,7],[17,210,12,17],[17,211,12,18],[17,212,13,1],[17,213,13,2],[18,2,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,2,27,7],[31,11,27,16,"createBurnCheckedInstruction"],[31,39,27,44,"createBurnCheckedInstruction"],[31,40,27,45,"account"],[31,47,27,52],[31,49,27,54,"mint"],[31,53,27,58],[31,55,27,60,"owner"],[31,60,27,65],[31,62,27,67,"amount"],[31,68,27,73],[31,70,27,75,"decimals"],[31,78,27,83],[31,80,27,85,"multiSigners"],[31,92,27,97],[31,95,27,100],[31,97,27,102],[31,99,27,104,"programId"],[31,108,27,113],[31,111,27,116,"TOKEN_PROGRAM_ID"],[31,138,27,132],[31,140,27,134],[32,4,28,4],[32,10,28,10,"keys"],[32,14,28,14],[32,17,28,17],[32,21,28,17,"addSigners"],[32,41,28,27],[32,43,28,28],[32,44,29,8],[33,6,29,10,"pubkey"],[33,12,29,16],[33,14,29,18,"account"],[33,21,29,25],[34,6,29,27,"isSigner"],[34,14,29,35],[34,16,29,37],[34,21,29,42],[35,6,29,44,"isWritable"],[35,16,29,54],[35,18,29,56],[36,4,29,61],[36,5,29,62],[36,7,30,8],[37,6,30,10,"pubkey"],[37,12,30,16],[37,14,30,18,"mint"],[37,18,30,22],[38,6,30,24,"isSigner"],[38,14,30,32],[38,16,30,34],[38,21,30,39],[39,6,30,41,"isWritable"],[39,16,30,51],[39,18,30,53],[40,4,30,58],[40,5,30,59],[40,6,31,5],[40,8,31,7,"owner"],[40,13,31,12],[40,15,31,14,"multiSigners"],[40,27,31,26],[40,28,31,27],[41,4,32,4],[41,10,32,10,"data"],[41,14,32,14],[41,17,32,17,"Buffer"],[41,23,32,23],[41,24,32,24,"alloc"],[41,29,32,29],[41,30,32,30,"burnCheckedInstructionData"],[41,56,32,56],[41,57,32,57,"span"],[41,61,32,61],[41,62,32,62],[42,4,33,4,"burnCheckedInstructionData"],[42,30,33,30],[42,31,33,31,"encode"],[42,37,33,37],[42,38,33,38],[43,6,34,8,"instruction"],[43,17,34,19],[43,19,34,21,"TokenInstruction"],[43,42,34,37],[43,43,34,38,"BurnChecked"],[43,54,34,49],[44,6,35,8,"amount"],[44,12,35,14],[44,14,35,16,"BigInt"],[44,20,35,22],[44,21,35,23,"amount"],[44,27,35,29],[44,28,35,30],[45,6,36,8,"decimals"],[46,4,37,4],[46,5,37,5],[46,7,37,7,"data"],[46,11,37,11],[46,12,37,12],[47,4,38,4],[47,11,38,11],[47,15,38,15,"TransactionInstruction"],[47,42,38,37],[47,43,38,38],[48,6,38,40,"keys"],[48,10,38,44],[49,6,38,46,"programId"],[49,15,38,55],[50,6,38,57,"data"],[51,4,38,62],[51,5,38,63],[51,6,38,64],[52,2,39,0],[53,2,40,0],[54,0,41,0],[55,0,42,0],[56,0,43,0],[57,0,44,0],[58,0,45,0],[59,0,46,0],[60,0,47,0],[61,2,48,7],[61,11,48,16,"decodeBurnCheckedInstruction"],[61,39,48,44,"decodeBurnCheckedInstruction"],[61,40,48,45,"instruction"],[61,51,48,56],[61,53,48,58,"programId"],[61,62,48,67],[61,65,48,70,"TOKEN_PROGRAM_ID"],[61,92,48,86],[61,94,48,88],[62,4,49,4],[62,8,49,8],[62,9,49,9,"instruction"],[62,20,49,20],[62,21,49,21,"programId"],[62,30,49,30],[62,31,49,31,"equals"],[62,37,49,37],[62,38,49,38,"programId"],[62,47,49,47],[62,48,49,48],[62,50,50,8],[62,56,50,14],[62,60,50,18,"TokenInvalidInstructionProgramError"],[62,103,50,53],[62,104,50,54],[62,105,50,55],[63,4,51,4],[63,8,51,8,"instruction"],[63,19,51,19],[63,20,51,20,"data"],[63,24,51,24],[63,25,51,25,"length"],[63,31,51,31],[63,36,51,36,"burnCheckedInstructionData"],[63,62,51,62],[63,63,51,63,"span"],[63,67,51,67],[63,69,52,8],[63,75,52,14],[63,79,52,18,"TokenInvalidInstructionDataError"],[63,119,52,50],[63,120,52,51],[63,121,52,52],[64,4,53,4],[64,10,53,10],[65,6,53,12,"keys"],[65,10,53,16],[65,12,53,18],[66,8,53,20,"account"],[66,15,53,27],[67,8,53,29,"mint"],[67,12,53,33],[68,8,53,35,"owner"],[68,13,53,40],[69,8,53,42,"multiSigners"],[70,6,53,55],[70,7,53,56],[71,6,53,58,"data"],[72,4,53,64],[72,5,53,65],[72,8,53,68,"decodeBurnCheckedInstructionUnchecked"],[72,45,53,105],[72,46,53,106,"instruction"],[72,57,53,117],[72,58,53,118],[73,4,54,4],[73,8,54,8,"data"],[73,12,54,12],[73,13,54,13,"instruction"],[73,24,54,24],[73,29,54,29,"TokenInstruction"],[73,52,54,45],[73,53,54,46,"BurnChecked"],[73,64,54,57],[73,66,55,8],[73,72,55,14],[73,76,55,18,"TokenInvalidInstructionTypeError"],[73,116,55,50],[73,117,55,51],[73,118,55,52],[74,4,56,4],[74,8,56,8],[74,9,56,9,"account"],[74,16,56,16],[74,20,56,20],[74,21,56,21,"mint"],[74,25,56,25],[74,29,56,29],[74,30,56,30,"owner"],[74,35,56,35],[74,37,57,8],[74,43,57,14],[74,47,57,18,"TokenInvalidInstructionKeysError"],[74,87,57,50],[74,88,57,51],[74,89,57,52],[75,4,58,4],[76,4,59,4],[76,11,59,11],[77,6,60,8,"programId"],[77,15,60,17],[78,6,61,8,"keys"],[78,10,61,12],[78,12,61,14],[79,8,62,12,"account"],[79,15,62,19],[80,8,63,12,"mint"],[80,12,63,16],[81,8,64,12,"owner"],[81,13,64,17],[82,8,65,12,"multiSigners"],[83,6,66,8],[83,7,66,9],[84,6,67,8,"data"],[85,4,68,4],[85,5,68,5],[86,2,69,0],[87,2,70,0],[88,0,71,0],[89,0,72,0],[90,0,73,0],[91,0,74,0],[92,0,75,0],[93,0,76,0],[94,2,77,7],[94,11,77,16,"decodeBurnCheckedInstructionUnchecked"],[94,48,77,53,"decodeBurnCheckedInstructionUnchecked"],[94,49,77,54],[95,4,77,56,"programId"],[95,13,77,65],[96,4,77,67,"keys"],[96,8,77,71],[96,10,77,73],[96,11,77,74,"account"],[96,18,77,81],[96,20,77,83,"mint"],[96,24,77,87],[96,26,77,89,"owner"],[96,31,77,94],[96,33,77,96],[96,36,77,99,"multiSigners"],[96,48,77,111],[96,49,77,112],[97,4,77,114,"data"],[98,2,77,120],[98,3,77,121],[98,5,77,123],[99,4,78,4],[99,11,78,11],[100,6,79,8,"programId"],[100,15,79,17],[101,6,80,8,"keys"],[101,10,80,12],[101,12,80,14],[102,8,81,12,"account"],[102,15,81,19],[103,8,82,12,"mint"],[103,12,82,16],[104,8,83,12,"owner"],[104,13,83,17],[105,8,84,12,"multiSigners"],[106,6,85,8],[106,7,85,9],[107,6,86,8,"data"],[107,10,86,12],[107,12,86,14,"burnCheckedInstructionData"],[107,38,86,40],[107,39,86,41,"decode"],[107,45,86,47],[107,46,86,48,"data"],[107,50,86,52],[108,4,87,4],[108,5,87,5],[109,2,88,0],[110,0,88,1],[110,3]],"functionMap":{"names":["<global>","createBurnCheckedInstruction","decodeBurnCheckedInstruction","decodeBurnCheckedInstructionUnchecked"],"mappings":"AAA;OC0B;CDY;OES;CFqB;OGQ;CHW"}},"type":"js/module"}]}