{"dependencies":[{"name":"bn.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":9,"index":9},"end":{"line":1,"column":25,"index":25}}],"key":"h/AEHknS6KAnKragIfqHUjGvuRM=","exportNames":["*"]}},{"name":"brorand","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":14,"index":41},"end":{"line":2,"column":32,"index":59}}],"key":"S4gmoagXR7Xlhdx6vMizYk5L4Sc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var bn = require(_dependencyMap[0], \"bn.js\");\n  var brorand = require(_dependencyMap[1], \"brorand\");\n  function MillerRabin(rand) {\n    this.rand = rand || new brorand.Rand();\n  }\n  module.exports = MillerRabin;\n  MillerRabin.create = function create(rand) {\n    return new MillerRabin(rand);\n  };\n  MillerRabin.prototype._randbelow = function _randbelow(n) {\n    var len = n.bitLength();\n    var min_bytes = Math.ceil(len / 8);\n\n    // Generage random bytes until a number less than n is found.\n    // This ensures that 0..n-1 have an equal probability of being selected.\n    do var a = new bn(this.rand.generate(min_bytes)); while (a.cmp(n) >= 0);\n    return a;\n  };\n  MillerRabin.prototype._randrange = function _randrange(start, stop) {\n    // Generate a random number greater than or equal to start and less than stop.\n    var size = stop.sub(start);\n    return start.add(this._randbelow(size));\n  };\n  MillerRabin.prototype.test = function test(n, k, cb) {\n    var len = n.bitLength();\n    var red = bn.mont(n);\n    var rone = new bn(1).toRed(red);\n    if (!k) k = Math.max(1, len / 48 | 0);\n\n    // Find d and s, (n - 1) = (2 ^ s) * d;\n    var n1 = n.subn(1);\n    for (var s = 0; !n1.testn(s); s++) {}\n    var d = n.shrn(s);\n    var rn1 = n1.toRed(red);\n    var prime = true;\n    for (; k > 0; k--) {\n      var a = this._randrange(new bn(2), n1);\n      if (cb) cb(a);\n      var x = a.toRed(red).redPow(d);\n      if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;\n      for (var i = 1; i < s; i++) {\n        x = x.redSqr();\n        if (x.cmp(rone) === 0) return false;\n        if (x.cmp(rn1) === 0) break;\n      }\n      if (i === s) return false;\n    }\n    return prime;\n  };\n  MillerRabin.prototype.getDivisor = function getDivisor(n, k) {\n    var len = n.bitLength();\n    var red = bn.mont(n);\n    var rone = new bn(1).toRed(red);\n    if (!k) k = Math.max(1, len / 48 | 0);\n\n    // Find d and s, (n - 1) = (2 ^ s) * d;\n    var n1 = n.subn(1);\n    for (var s = 0; !n1.testn(s); s++) {}\n    var d = n.shrn(s);\n    var rn1 = n1.toRed(red);\n    for (; k > 0; k--) {\n      var a = this._randrange(new bn(2), n1);\n      var g = n.gcd(a);\n      if (g.cmpn(1) !== 0) return g;\n      var x = a.toRed(red).redPow(d);\n      if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;\n      for (var i = 1; i < s; i++) {\n        x = x.redSqr();\n        if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);\n        if (x.cmp(rn1) === 0) break;\n      }\n      if (i === s) {\n        x = x.redSqr();\n        return x.fromRed().subn(1).gcd(n);\n      }\n    }\n    return false;\n  };\n});","lineCount":80,"map":[[2,2,1,0],[2,6,1,4,"bn"],[2,8,1,6],[2,11,1,9,"require"],[2,18,1,16],[2,19,1,16,"_dependencyMap"],[2,33,1,16],[2,45,1,24],[2,46,1,25],[3,2,2,0],[3,6,2,4,"brorand"],[3,13,2,11],[3,16,2,14,"require"],[3,23,2,21],[3,24,2,21,"_dependencyMap"],[3,38,2,21],[3,52,2,31],[3,53,2,32],[4,2,4,0],[4,11,4,9,"MillerRabin"],[4,22,4,20,"MillerRabin"],[4,23,4,21,"rand"],[4,27,4,25],[4,29,4,27],[5,4,5,2],[5,8,5,6],[5,9,5,7,"rand"],[5,13,5,11],[5,16,5,14,"rand"],[5,20,5,18],[5,24,5,22],[5,28,5,26,"brorand"],[5,35,5,33],[5,36,5,34,"Rand"],[5,40,5,38],[5,41,5,39],[5,42,5,40],[6,2,6,0],[7,2,7,0,"module"],[7,8,7,6],[7,9,7,7,"exports"],[7,16,7,14],[7,19,7,17,"MillerRabin"],[7,30,7,28],[8,2,9,0,"MillerRabin"],[8,13,9,11],[8,14,9,12,"create"],[8,20,9,18],[8,23,9,21],[8,32,9,30,"create"],[8,38,9,36,"create"],[8,39,9,37,"rand"],[8,43,9,41],[8,45,9,43],[9,4,10,2],[9,11,10,9],[9,15,10,13,"MillerRabin"],[9,26,10,24],[9,27,10,25,"rand"],[9,31,10,29],[9,32,10,30],[10,2,11,0],[10,3,11,1],[11,2,13,0,"MillerRabin"],[11,13,13,11],[11,14,13,12,"prototype"],[11,23,13,21],[11,24,13,22,"_randbelow"],[11,34,13,32],[11,37,13,35],[11,46,13,44,"_randbelow"],[11,56,13,54,"_randbelow"],[11,57,13,55,"n"],[11,58,13,56],[11,60,13,58],[12,4,14,2],[12,8,14,6,"len"],[12,11,14,9],[12,14,14,12,"n"],[12,15,14,13],[12,16,14,14,"bitLength"],[12,25,14,23],[12,26,14,24],[12,27,14,25],[13,4,15,2],[13,8,15,6,"min_bytes"],[13,17,15,15],[13,20,15,18,"Math"],[13,24,15,22],[13,25,15,23,"ceil"],[13,29,15,27],[13,30,15,28,"len"],[13,33,15,31],[13,36,15,34],[13,37,15,35],[13,38,15,36],[15,4,17,2],[16,4,18,2],[17,4,19,2],[17,7,20,4],[17,11,20,8,"a"],[17,12,20,9],[17,15,20,12],[17,19,20,16,"bn"],[17,21,20,18],[17,22,20,19],[17,26,20,23],[17,27,20,24,"rand"],[17,31,20,28],[17,32,20,29,"generate"],[17,40,20,37],[17,41,20,38,"min_bytes"],[17,50,20,47],[17,51,20,48],[17,52,20,49],[17,53,20,50],[17,61,21,9,"a"],[17,62,21,10],[17,63,21,11,"cmp"],[17,66,21,14],[17,67,21,15,"n"],[17,68,21,16],[17,69,21,17],[17,73,21,21],[17,74,21,22],[18,4,23,2],[18,11,23,9,"a"],[18,12,23,10],[19,2,24,0],[19,3,24,1],[20,2,26,0,"MillerRabin"],[20,13,26,11],[20,14,26,12,"prototype"],[20,23,26,21],[20,24,26,22,"_randrange"],[20,34,26,32],[20,37,26,35],[20,46,26,44,"_randrange"],[20,56,26,54,"_randrange"],[20,57,26,55,"start"],[20,62,26,60],[20,64,26,62,"stop"],[20,68,26,66],[20,70,26,68],[21,4,27,2],[22,4,28,2],[22,8,28,6,"size"],[22,12,28,10],[22,15,28,13,"stop"],[22,19,28,17],[22,20,28,18,"sub"],[22,23,28,21],[22,24,28,22,"start"],[22,29,28,27],[22,30,28,28],[23,4,29,2],[23,11,29,9,"start"],[23,16,29,14],[23,17,29,15,"add"],[23,20,29,18],[23,21,29,19],[23,25,29,23],[23,26,29,24,"_randbelow"],[23,36,29,34],[23,37,29,35,"size"],[23,41,29,39],[23,42,29,40],[23,43,29,41],[24,2,30,0],[24,3,30,1],[25,2,32,0,"MillerRabin"],[25,13,32,11],[25,14,32,12,"prototype"],[25,23,32,21],[25,24,32,22,"test"],[25,28,32,26],[25,31,32,29],[25,40,32,38,"test"],[25,44,32,42,"test"],[25,45,32,43,"n"],[25,46,32,44],[25,48,32,46,"k"],[25,49,32,47],[25,51,32,49,"cb"],[25,53,32,51],[25,55,32,53],[26,4,33,2],[26,8,33,6,"len"],[26,11,33,9],[26,14,33,12,"n"],[26,15,33,13],[26,16,33,14,"bitLength"],[26,25,33,23],[26,26,33,24],[26,27,33,25],[27,4,34,2],[27,8,34,6,"red"],[27,11,34,9],[27,14,34,12,"bn"],[27,16,34,14],[27,17,34,15,"mont"],[27,21,34,19],[27,22,34,20,"n"],[27,23,34,21],[27,24,34,22],[28,4,35,2],[28,8,35,6,"rone"],[28,12,35,10],[28,15,35,13],[28,19,35,17,"bn"],[28,21,35,19],[28,22,35,20],[28,23,35,21],[28,24,35,22],[28,25,35,23,"toRed"],[28,30,35,28],[28,31,35,29,"red"],[28,34,35,32],[28,35,35,33],[29,4,37,2],[29,8,37,6],[29,9,37,7,"k"],[29,10,37,8],[29,12,38,4,"k"],[29,13,38,5],[29,16,38,8,"Math"],[29,20,38,12],[29,21,38,13,"max"],[29,24,38,16],[29,25,38,17],[29,26,38,18],[29,28,38,21,"len"],[29,31,38,24],[29,34,38,27],[29,36,38,29],[29,39,38,33],[29,40,38,34],[29,41,38,35],[31,4,40,2],[32,4,41,2],[32,8,41,6,"n1"],[32,10,41,8],[32,13,41,11,"n"],[32,14,41,12],[32,15,41,13,"subn"],[32,19,41,17],[32,20,41,18],[32,21,41,19],[32,22,41,20],[33,4,42,2],[33,9,42,7],[33,13,42,11,"s"],[33,14,42,12],[33,17,42,15],[33,18,42,16],[33,20,42,18],[33,21,42,19,"n1"],[33,23,42,21],[33,24,42,22,"testn"],[33,29,42,27],[33,30,42,28,"s"],[33,31,42,29],[33,32,42,30],[33,34,42,32,"s"],[33,35,42,33],[33,37,42,35],[33,39,42,37],[33,40,42,38],[34,4,43,2],[34,8,43,6,"d"],[34,9,43,7],[34,12,43,10,"n"],[34,13,43,11],[34,14,43,12,"shrn"],[34,18,43,16],[34,19,43,17,"s"],[34,20,43,18],[34,21,43,19],[35,4,45,2],[35,8,45,6,"rn1"],[35,11,45,9],[35,14,45,12,"n1"],[35,16,45,14],[35,17,45,15,"toRed"],[35,22,45,20],[35,23,45,21,"red"],[35,26,45,24],[35,27,45,25],[36,4,47,2],[36,8,47,6,"prime"],[36,13,47,11],[36,16,47,14],[36,20,47,18],[37,4,48,2],[37,11,48,9,"k"],[37,12,48,10],[37,15,48,13],[37,16,48,14],[37,18,48,16,"k"],[37,19,48,17],[37,21,48,19],[37,23,48,21],[38,6,49,4],[38,10,49,8,"a"],[38,11,49,9],[38,14,49,12],[38,18,49,16],[38,19,49,17,"_randrange"],[38,29,49,27],[38,30,49,28],[38,34,49,32,"bn"],[38,36,49,34],[38,37,49,35],[38,38,49,36],[38,39,49,37],[38,41,49,39,"n1"],[38,43,49,41],[38,44,49,42],[39,6,50,4],[39,10,50,8,"cb"],[39,12,50,10],[39,14,51,6,"cb"],[39,16,51,8],[39,17,51,9,"a"],[39,18,51,10],[39,19,51,11],[40,6,53,4],[40,10,53,8,"x"],[40,11,53,9],[40,14,53,12,"a"],[40,15,53,13],[40,16,53,14,"toRed"],[40,21,53,19],[40,22,53,20,"red"],[40,25,53,23],[40,26,53,24],[40,27,53,25,"redPow"],[40,33,53,31],[40,34,53,32,"d"],[40,35,53,33],[40,36,53,34],[41,6,54,4],[41,10,54,8,"x"],[41,11,54,9],[41,12,54,10,"cmp"],[41,15,54,13],[41,16,54,14,"rone"],[41,20,54,18],[41,21,54,19],[41,26,54,24],[41,27,54,25],[41,31,54,29,"x"],[41,32,54,30],[41,33,54,31,"cmp"],[41,36,54,34],[41,37,54,35,"rn1"],[41,40,54,38],[41,41,54,39],[41,46,54,44],[41,47,54,45],[41,49,55,6],[42,6,57,4],[42,11,57,9],[42,15,57,13,"i"],[42,16,57,14],[42,19,57,17],[42,20,57,18],[42,22,57,20,"i"],[42,23,57,21],[42,26,57,24,"s"],[42,27,57,25],[42,29,57,27,"i"],[42,30,57,28],[42,32,57,30],[42,34,57,32],[43,8,58,6,"x"],[43,9,58,7],[43,12,58,10,"x"],[43,13,58,11],[43,14,58,12,"redSqr"],[43,20,58,18],[43,21,58,19],[43,22,58,20],[44,8,60,6],[44,12,60,10,"x"],[44,13,60,11],[44,14,60,12,"cmp"],[44,17,60,15],[44,18,60,16,"rone"],[44,22,60,20],[44,23,60,21],[44,28,60,26],[44,29,60,27],[44,31,61,8],[44,38,61,15],[44,43,61,20],[45,8,62,6],[45,12,62,10,"x"],[45,13,62,11],[45,14,62,12,"cmp"],[45,17,62,15],[45,18,62,16,"rn1"],[45,21,62,19],[45,22,62,20],[45,27,62,25],[45,28,62,26],[45,30,63,8],[46,6,64,4],[47,6,66,4],[47,10,66,8,"i"],[47,11,66,9],[47,16,66,14,"s"],[47,17,66,15],[47,19,67,6],[47,26,67,13],[47,31,67,18],[48,4,68,2],[49,4,70,2],[49,11,70,9,"prime"],[49,16,70,14],[50,2,71,0],[50,3,71,1],[51,2,73,0,"MillerRabin"],[51,13,73,11],[51,14,73,12,"prototype"],[51,23,73,21],[51,24,73,22,"getDivisor"],[51,34,73,32],[51,37,73,35],[51,46,73,44,"getDivisor"],[51,56,73,54,"getDivisor"],[51,57,73,55,"n"],[51,58,73,56],[51,60,73,58,"k"],[51,61,73,59],[51,63,73,61],[52,4,74,2],[52,8,74,6,"len"],[52,11,74,9],[52,14,74,12,"n"],[52,15,74,13],[52,16,74,14,"bitLength"],[52,25,74,23],[52,26,74,24],[52,27,74,25],[53,4,75,2],[53,8,75,6,"red"],[53,11,75,9],[53,14,75,12,"bn"],[53,16,75,14],[53,17,75,15,"mont"],[53,21,75,19],[53,22,75,20,"n"],[53,23,75,21],[53,24,75,22],[54,4,76,2],[54,8,76,6,"rone"],[54,12,76,10],[54,15,76,13],[54,19,76,17,"bn"],[54,21,76,19],[54,22,76,20],[54,23,76,21],[54,24,76,22],[54,25,76,23,"toRed"],[54,30,76,28],[54,31,76,29,"red"],[54,34,76,32],[54,35,76,33],[55,4,78,2],[55,8,78,6],[55,9,78,7,"k"],[55,10,78,8],[55,12,79,4,"k"],[55,13,79,5],[55,16,79,8,"Math"],[55,20,79,12],[55,21,79,13,"max"],[55,24,79,16],[55,25,79,17],[55,26,79,18],[55,28,79,21,"len"],[55,31,79,24],[55,34,79,27],[55,36,79,29],[55,39,79,33],[55,40,79,34],[55,41,79,35],[57,4,81,2],[58,4,82,2],[58,8,82,6,"n1"],[58,10,82,8],[58,13,82,11,"n"],[58,14,82,12],[58,15,82,13,"subn"],[58,19,82,17],[58,20,82,18],[58,21,82,19],[58,22,82,20],[59,4,83,2],[59,9,83,7],[59,13,83,11,"s"],[59,14,83,12],[59,17,83,15],[59,18,83,16],[59,20,83,18],[59,21,83,19,"n1"],[59,23,83,21],[59,24,83,22,"testn"],[59,29,83,27],[59,30,83,28,"s"],[59,31,83,29],[59,32,83,30],[59,34,83,32,"s"],[59,35,83,33],[59,37,83,35],[59,39,83,37],[59,40,83,38],[60,4,84,2],[60,8,84,6,"d"],[60,9,84,7],[60,12,84,10,"n"],[60,13,84,11],[60,14,84,12,"shrn"],[60,18,84,16],[60,19,84,17,"s"],[60,20,84,18],[60,21,84,19],[61,4,86,2],[61,8,86,6,"rn1"],[61,11,86,9],[61,14,86,12,"n1"],[61,16,86,14],[61,17,86,15,"toRed"],[61,22,86,20],[61,23,86,21,"red"],[61,26,86,24],[61,27,86,25],[62,4,88,2],[62,11,88,9,"k"],[62,12,88,10],[62,15,88,13],[62,16,88,14],[62,18,88,16,"k"],[62,19,88,17],[62,21,88,19],[62,23,88,21],[63,6,89,4],[63,10,89,8,"a"],[63,11,89,9],[63,14,89,12],[63,18,89,16],[63,19,89,17,"_randrange"],[63,29,89,27],[63,30,89,28],[63,34,89,32,"bn"],[63,36,89,34],[63,37,89,35],[63,38,89,36],[63,39,89,37],[63,41,89,39,"n1"],[63,43,89,41],[63,44,89,42],[64,6,91,4],[64,10,91,8,"g"],[64,11,91,9],[64,14,91,12,"n"],[64,15,91,13],[64,16,91,14,"gcd"],[64,19,91,17],[64,20,91,18,"a"],[64,21,91,19],[64,22,91,20],[65,6,92,4],[65,10,92,8,"g"],[65,11,92,9],[65,12,92,10,"cmpn"],[65,16,92,14],[65,17,92,15],[65,18,92,16],[65,19,92,17],[65,24,92,22],[65,25,92,23],[65,27,93,6],[65,34,93,13,"g"],[65,35,93,14],[66,6,95,4],[66,10,95,8,"x"],[66,11,95,9],[66,14,95,12,"a"],[66,15,95,13],[66,16,95,14,"toRed"],[66,21,95,19],[66,22,95,20,"red"],[66,25,95,23],[66,26,95,24],[66,27,95,25,"redPow"],[66,33,95,31],[66,34,95,32,"d"],[66,35,95,33],[66,36,95,34],[67,6,96,4],[67,10,96,8,"x"],[67,11,96,9],[67,12,96,10,"cmp"],[67,15,96,13],[67,16,96,14,"rone"],[67,20,96,18],[67,21,96,19],[67,26,96,24],[67,27,96,25],[67,31,96,29,"x"],[67,32,96,30],[67,33,96,31,"cmp"],[67,36,96,34],[67,37,96,35,"rn1"],[67,40,96,38],[67,41,96,39],[67,46,96,44],[67,47,96,45],[67,49,97,6],[68,6,99,4],[68,11,99,9],[68,15,99,13,"i"],[68,16,99,14],[68,19,99,17],[68,20,99,18],[68,22,99,20,"i"],[68,23,99,21],[68,26,99,24,"s"],[68,27,99,25],[68,29,99,27,"i"],[68,30,99,28],[68,32,99,30],[68,34,99,32],[69,8,100,6,"x"],[69,9,100,7],[69,12,100,10,"x"],[69,13,100,11],[69,14,100,12,"redSqr"],[69,20,100,18],[69,21,100,19],[69,22,100,20],[70,8,102,6],[70,12,102,10,"x"],[70,13,102,11],[70,14,102,12,"cmp"],[70,17,102,15],[70,18,102,16,"rone"],[70,22,102,20],[70,23,102,21],[70,28,102,26],[70,29,102,27],[70,31,103,8],[70,38,103,15,"x"],[70,39,103,16],[70,40,103,17,"fromRed"],[70,47,103,24],[70,48,103,25],[70,49,103,26],[70,50,103,27,"subn"],[70,54,103,31],[70,55,103,32],[70,56,103,33],[70,57,103,34],[70,58,103,35,"gcd"],[70,61,103,38],[70,62,103,39,"n"],[70,63,103,40],[70,64,103,41],[71,8,104,6],[71,12,104,10,"x"],[71,13,104,11],[71,14,104,12,"cmp"],[71,17,104,15],[71,18,104,16,"rn1"],[71,21,104,19],[71,22,104,20],[71,27,104,25],[71,28,104,26],[71,30,105,8],[72,6,106,4],[73,6,108,4],[73,10,108,8,"i"],[73,11,108,9],[73,16,108,14,"s"],[73,17,108,15],[73,19,108,17],[74,8,109,6,"x"],[74,9,109,7],[74,12,109,10,"x"],[74,13,109,11],[74,14,109,12,"redSqr"],[74,20,109,18],[74,21,109,19],[74,22,109,20],[75,8,110,6],[75,15,110,13,"x"],[75,16,110,14],[75,17,110,15,"fromRed"],[75,24,110,22],[75,25,110,23],[75,26,110,24],[75,27,110,25,"subn"],[75,31,110,29],[75,32,110,30],[75,33,110,31],[75,34,110,32],[75,35,110,33,"gcd"],[75,38,110,36],[75,39,110,37,"n"],[75,40,110,38],[75,41,110,39],[76,6,111,4],[77,4,112,2],[78,4,114,2],[78,11,114,9],[78,16,114,14],[79,2,115,0],[79,3,115,1],[80,0,115,2],[80,3]],"functionMap":{"names":["<global>","MillerRabin","create","_randbelow","_randrange","test","getDivisor"],"mappings":"AAA;ACG;CDE;qBEG;CFE;mCGE;CHW;mCIE;CJI;6BKE;CLuC;mCME;CN0C"}},"type":"js/module"}]}