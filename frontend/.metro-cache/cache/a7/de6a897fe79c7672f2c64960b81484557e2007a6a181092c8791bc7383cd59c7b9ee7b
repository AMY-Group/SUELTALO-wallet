{"dependencies":[{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":13,"index":26},"end":{"line":2,"column":35,"index":48}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI=","exportNames":["*"]}},{"name":"readable-stream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":16,"index":72},"end":{"line":3,"column":42,"index":98}}],"key":"MoTosa0NrO3RIvTxl2YVbe2b0EE=","exportNames":["*"]}},{"name":"inherits","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":15,"index":124},"end":{"line":4,"column":34,"index":143}}],"key":"UFs2L1Ma7NUz/WYD3lQMkA8Bn/s=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var Buffer = require(_dependencyMap[0], \"safe-buffer\").Buffer;\n  var Transform = require(_dependencyMap[1], \"readable-stream\").Transform;\n  var inherits = require(_dependencyMap[2], \"inherits\");\n  function throwIfNotStringOrBuffer(val, prefix) {\n    if (!Buffer.isBuffer(val) && typeof val !== 'string') {\n      throw new TypeError(prefix + ' must be a string or a buffer');\n    }\n  }\n  function HashBase(blockSize) {\n    Transform.call(this);\n    this._block = Buffer.allocUnsafe(blockSize);\n    this._blockSize = blockSize;\n    this._blockOffset = 0;\n    this._length = [0, 0, 0, 0];\n    this._finalized = false;\n  }\n  inherits(HashBase, Transform);\n  HashBase.prototype._transform = function (chunk, encoding, callback) {\n    var error = null;\n    try {\n      this.update(chunk, encoding);\n    } catch (err) {\n      error = err;\n    }\n    callback(error);\n  };\n  HashBase.prototype._flush = function (callback) {\n    var error = null;\n    try {\n      this.push(this.digest());\n    } catch (err) {\n      error = err;\n    }\n    callback(error);\n  };\n  HashBase.prototype.update = function (data, encoding) {\n    throwIfNotStringOrBuffer(data, 'Data');\n    if (this._finalized) throw new Error('Digest already called');\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);\n\n    // consume data\n    var block = this._block;\n    var offset = 0;\n    while (this._blockOffset + data.length - offset >= this._blockSize) {\n      for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];\n      this._update();\n      this._blockOffset = 0;\n    }\n    while (offset < data.length) block[this._blockOffset++] = data[offset++];\n\n    // update length\n    for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\n      this._length[j] += carry;\n      carry = this._length[j] / 0x0100000000 | 0;\n      if (carry > 0) this._length[j] -= 0x0100000000 * carry;\n    }\n    return this;\n  };\n  HashBase.prototype._update = function () {\n    throw new Error('_update is not implemented');\n  };\n  HashBase.prototype.digest = function (encoding) {\n    if (this._finalized) throw new Error('Digest already called');\n    this._finalized = true;\n    var digest = this._digest();\n    if (encoding !== undefined) digest = digest.toString(encoding);\n\n    // reset state\n    this._block.fill(0);\n    this._blockOffset = 0;\n    for (var i = 0; i < 4; ++i) this._length[i] = 0;\n    return digest;\n  };\n  HashBase.prototype._digest = function () {\n    throw new Error('_digest is not implemented');\n  };\n  module.exports = HashBase;\n});","lineCount":81,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"Buffer"],[4,12,2,10],[4,15,2,13,"require"],[4,22,2,20],[4,23,2,20,"_dependencyMap"],[4,37,2,20],[4,55,2,34],[4,56,2,35],[4,57,2,36,"Buffer"],[4,63,2,42],[5,2,3,0],[5,6,3,4,"Transform"],[5,15,3,13],[5,18,3,16,"require"],[5,25,3,23],[5,26,3,23,"_dependencyMap"],[5,40,3,23],[5,62,3,41],[5,63,3,42],[5,64,3,43,"Transform"],[5,73,3,52],[6,2,4,0],[6,6,4,4,"inherits"],[6,14,4,12],[6,17,4,15,"require"],[6,24,4,22],[6,25,4,22,"_dependencyMap"],[6,39,4,22],[6,54,4,33],[6,55,4,34],[7,2,6,0],[7,11,6,9,"throwIfNotStringOrBuffer"],[7,35,6,33,"throwIfNotStringOrBuffer"],[7,36,6,35,"val"],[7,39,6,38],[7,41,6,40,"prefix"],[7,47,6,46],[7,49,6,48],[8,4,7,2],[8,8,7,6],[8,9,7,7,"Buffer"],[8,15,7,13],[8,16,7,14,"isBuffer"],[8,24,7,22],[8,25,7,23,"val"],[8,28,7,26],[8,29,7,27],[8,33,7,31],[8,40,7,38,"val"],[8,43,7,41],[8,48,7,46],[8,56,7,54],[8,58,7,56],[9,6,8,4],[9,12,8,10],[9,16,8,14,"TypeError"],[9,25,8,23],[9,26,8,24,"prefix"],[9,32,8,30],[9,35,8,33],[9,66,8,64],[9,67,8,65],[10,4,9,2],[11,2,10,0],[12,2,12,0],[12,11,12,9,"HashBase"],[12,19,12,17,"HashBase"],[12,20,12,19,"blockSize"],[12,29,12,28],[12,31,12,30],[13,4,13,2,"Transform"],[13,13,13,11],[13,14,13,12,"call"],[13,18,13,16],[13,19,13,17],[13,23,13,21],[13,24,13,22],[14,4,15,2],[14,8,15,6],[14,9,15,7,"_block"],[14,15,15,13],[14,18,15,16,"Buffer"],[14,24,15,22],[14,25,15,23,"allocUnsafe"],[14,36,15,34],[14,37,15,35,"blockSize"],[14,46,15,44],[14,47,15,45],[15,4,16,2],[15,8,16,6],[15,9,16,7,"_blockSize"],[15,19,16,17],[15,22,16,20,"blockSize"],[15,31,16,29],[16,4,17,2],[16,8,17,6],[16,9,17,7,"_blockOffset"],[16,21,17,19],[16,24,17,22],[16,25,17,23],[17,4,18,2],[17,8,18,6],[17,9,18,7,"_length"],[17,16,18,14],[17,19,18,17],[17,20,18,18],[17,21,18,19],[17,23,18,21],[17,24,18,22],[17,26,18,24],[17,27,18,25],[17,29,18,27],[17,30,18,28],[17,31,18,29],[18,4,20,2],[18,8,20,6],[18,9,20,7,"_finalized"],[18,19,20,17],[18,22,20,20],[18,27,20,25],[19,2,21,0],[20,2,23,0,"inherits"],[20,10,23,8],[20,11,23,9,"HashBase"],[20,19,23,17],[20,21,23,19,"Transform"],[20,30,23,28],[20,31,23,29],[21,2,25,0,"HashBase"],[21,10,25,8],[21,11,25,9,"prototype"],[21,20,25,18],[21,21,25,19,"_transform"],[21,31,25,29],[21,34,25,32],[21,44,25,42,"chunk"],[21,49,25,47],[21,51,25,49,"encoding"],[21,59,25,57],[21,61,25,59,"callback"],[21,69,25,67],[21,71,25,69],[22,4,26,2],[22,8,26,6,"error"],[22,13,26,11],[22,16,26,14],[22,20,26,18],[23,4,27,2],[23,8,27,6],[24,6,28,4],[24,10,28,8],[24,11,28,9,"update"],[24,17,28,15],[24,18,28,16,"chunk"],[24,23,28,21],[24,25,28,23,"encoding"],[24,33,28,31],[24,34,28,32],[25,4,29,2],[25,5,29,3],[25,6,29,4],[25,13,29,11,"err"],[25,16,29,14],[25,18,29,16],[26,6,30,4,"error"],[26,11,30,9],[26,14,30,12,"err"],[26,17,30,15],[27,4,31,2],[28,4,33,2,"callback"],[28,12,33,10],[28,13,33,11,"error"],[28,18,33,16],[28,19,33,17],[29,2,34,0],[29,3,34,1],[30,2,36,0,"HashBase"],[30,10,36,8],[30,11,36,9,"prototype"],[30,20,36,18],[30,21,36,19,"_flush"],[30,27,36,25],[30,30,36,28],[30,40,36,38,"callback"],[30,48,36,46],[30,50,36,48],[31,4,37,2],[31,8,37,6,"error"],[31,13,37,11],[31,16,37,14],[31,20,37,18],[32,4,38,2],[32,8,38,6],[33,6,39,4],[33,10,39,8],[33,11,39,9,"push"],[33,15,39,13],[33,16,39,14],[33,20,39,18],[33,21,39,19,"digest"],[33,27,39,25],[33,28,39,26],[33,29,39,27],[33,30,39,28],[34,4,40,2],[34,5,40,3],[34,6,40,4],[34,13,40,11,"err"],[34,16,40,14],[34,18,40,16],[35,6,41,4,"error"],[35,11,41,9],[35,14,41,12,"err"],[35,17,41,15],[36,4,42,2],[37,4,44,2,"callback"],[37,12,44,10],[37,13,44,11,"error"],[37,18,44,16],[37,19,44,17],[38,2,45,0],[38,3,45,1],[39,2,47,0,"HashBase"],[39,10,47,8],[39,11,47,9,"prototype"],[39,20,47,18],[39,21,47,19,"update"],[39,27,47,25],[39,30,47,28],[39,40,47,38,"data"],[39,44,47,42],[39,46,47,44,"encoding"],[39,54,47,52],[39,56,47,54],[40,4,48,2,"throwIfNotStringOrBuffer"],[40,28,48,26],[40,29,48,27,"data"],[40,33,48,31],[40,35,48,33],[40,41,48,39],[40,42,48,40],[41,4,49,2],[41,8,49,6],[41,12,49,10],[41,13,49,11,"_finalized"],[41,23,49,21],[41,25,49,23],[41,31,49,29],[41,35,49,33,"Error"],[41,40,49,38],[41,41,49,39],[41,64,49,62],[41,65,49,63],[42,4,50,2],[42,8,50,6],[42,9,50,7,"Buffer"],[42,15,50,13],[42,16,50,14,"isBuffer"],[42,24,50,22],[42,25,50,23,"data"],[42,29,50,27],[42,30,50,28],[42,32,50,30,"data"],[42,36,50,34],[42,39,50,37,"Buffer"],[42,45,50,43],[42,46,50,44,"from"],[42,50,50,48],[42,51,50,49,"data"],[42,55,50,53],[42,57,50,55,"encoding"],[42,65,50,63],[42,66,50,64],[44,4,52,2],[45,4,53,2],[45,8,53,6,"block"],[45,13,53,11],[45,16,53,14],[45,20,53,18],[45,21,53,19,"_block"],[45,27,53,25],[46,4,54,2],[46,8,54,6,"offset"],[46,14,54,12],[46,17,54,15],[46,18,54,16],[47,4,55,2],[47,11,55,9],[47,15,55,13],[47,16,55,14,"_blockOffset"],[47,28,55,26],[47,31,55,29,"data"],[47,35,55,33],[47,36,55,34,"length"],[47,42,55,40],[47,45,55,43,"offset"],[47,51,55,49],[47,55,55,53],[47,59,55,57],[47,60,55,58,"_blockSize"],[47,70,55,68],[47,72,55,70],[48,6,56,4],[48,11,56,9],[48,15,56,13,"i"],[48,16,56,14],[48,19,56,17],[48,23,56,21],[48,24,56,22,"_blockOffset"],[48,36,56,34],[48,38,56,36,"i"],[48,39,56,37],[48,42,56,40],[48,46,56,44],[48,47,56,45,"_blockSize"],[48,57,56,55],[48,60,56,58,"block"],[48,65,56,63],[48,66,56,64,"i"],[48,67,56,65],[48,69,56,67],[48,70,56,68],[48,73,56,71,"data"],[48,77,56,75],[48,78,56,76,"offset"],[48,84,56,82],[48,86,56,84],[48,87,56,85],[49,6,57,4],[49,10,57,8],[49,11,57,9,"_update"],[49,18,57,16],[49,19,57,17],[49,20,57,18],[50,6,58,4],[50,10,58,8],[50,11,58,9,"_blockOffset"],[50,23,58,21],[50,26,58,24],[50,27,58,25],[51,4,59,2],[52,4,60,2],[52,11,60,9,"offset"],[52,17,60,15],[52,20,60,18,"data"],[52,24,60,22],[52,25,60,23,"length"],[52,31,60,29],[52,33,60,31,"block"],[52,38,60,36],[52,39,60,37],[52,43,60,41],[52,44,60,42,"_blockOffset"],[52,56,60,54],[52,58,60,56],[52,59,60,57],[52,62,60,60,"data"],[52,66,60,64],[52,67,60,65,"offset"],[52,73,60,71],[52,75,60,73],[52,76,60,74],[54,4,62,2],[55,4,63,2],[55,9,63,7],[55,13,63,11,"j"],[55,14,63,12],[55,17,63,15],[55,18,63,16],[55,20,63,18,"carry"],[55,25,63,23],[55,28,63,26,"data"],[55,32,63,30],[55,33,63,31,"length"],[55,39,63,37],[55,42,63,40],[55,43,63,41],[55,45,63,43,"carry"],[55,50,63,48],[55,53,63,51],[55,54,63,52],[55,56,63,54],[55,58,63,56,"j"],[55,59,63,57],[55,61,63,59],[56,6,64,4],[56,10,64,8],[56,11,64,9,"_length"],[56,18,64,16],[56,19,64,17,"j"],[56,20,64,18],[56,21,64,19],[56,25,64,23,"carry"],[56,30,64,28],[57,6,65,4,"carry"],[57,11,65,9],[57,14,65,13],[57,18,65,17],[57,19,65,18,"_length"],[57,26,65,25],[57,27,65,26,"j"],[57,28,65,27],[57,29,65,28],[57,32,65,31],[57,44,65,43],[57,47,65,47],[57,48,65,48],[58,6,66,4],[58,10,66,8,"carry"],[58,15,66,13],[58,18,66,16],[58,19,66,17],[58,21,66,19],[58,25,66,23],[58,26,66,24,"_length"],[58,33,66,31],[58,34,66,32,"j"],[58,35,66,33],[58,36,66,34],[58,40,66,38],[58,52,66,50],[58,55,66,53,"carry"],[58,60,66,58],[59,4,67,2],[60,4,69,2],[60,11,69,9],[60,15,69,13],[61,2,70,0],[61,3,70,1],[62,2,72,0,"HashBase"],[62,10,72,8],[62,11,72,9,"prototype"],[62,20,72,18],[62,21,72,19,"_update"],[62,28,72,26],[62,31,72,29],[62,43,72,41],[63,4,73,2],[63,10,73,8],[63,14,73,12,"Error"],[63,19,73,17],[63,20,73,18],[63,48,73,46],[63,49,73,47],[64,2,74,0],[64,3,74,1],[65,2,76,0,"HashBase"],[65,10,76,8],[65,11,76,9,"prototype"],[65,20,76,18],[65,21,76,19,"digest"],[65,27,76,25],[65,30,76,28],[65,40,76,38,"encoding"],[65,48,76,46],[65,50,76,48],[66,4,77,2],[66,8,77,6],[66,12,77,10],[66,13,77,11,"_finalized"],[66,23,77,21],[66,25,77,23],[66,31,77,29],[66,35,77,33,"Error"],[66,40,77,38],[66,41,77,39],[66,64,77,62],[66,65,77,63],[67,4,78,2],[67,8,78,6],[67,9,78,7,"_finalized"],[67,19,78,17],[67,22,78,20],[67,26,78,24],[68,4,80,2],[68,8,80,6,"digest"],[68,14,80,12],[68,17,80,15],[68,21,80,19],[68,22,80,20,"_digest"],[68,29,80,27],[68,30,80,28],[68,31,80,29],[69,4,81,2],[69,8,81,6,"encoding"],[69,16,81,14],[69,21,81,19,"undefined"],[69,30,81,28],[69,32,81,30,"digest"],[69,38,81,36],[69,41,81,39,"digest"],[69,47,81,45],[69,48,81,46,"toString"],[69,56,81,54],[69,57,81,55,"encoding"],[69,65,81,63],[69,66,81,64],[71,4,83,2],[72,4,84,2],[72,8,84,6],[72,9,84,7,"_block"],[72,15,84,13],[72,16,84,14,"fill"],[72,20,84,18],[72,21,84,19],[72,22,84,20],[72,23,84,21],[73,4,85,2],[73,8,85,6],[73,9,85,7,"_blockOffset"],[73,21,85,19],[73,24,85,22],[73,25,85,23],[74,4,86,2],[74,9,86,7],[74,13,86,11,"i"],[74,14,86,12],[74,17,86,15],[74,18,86,16],[74,20,86,18,"i"],[74,21,86,19],[74,24,86,22],[74,25,86,23],[74,27,86,25],[74,29,86,27,"i"],[74,30,86,28],[74,32,86,30],[74,36,86,34],[74,37,86,35,"_length"],[74,44,86,42],[74,45,86,43,"i"],[74,46,86,44],[74,47,86,45],[74,50,86,48],[74,51,86,49],[75,4,88,2],[75,11,88,9,"digest"],[75,17,88,15],[76,2,89,0],[76,3,89,1],[77,2,91,0,"HashBase"],[77,10,91,8],[77,11,91,9,"prototype"],[77,20,91,18],[77,21,91,19,"_digest"],[77,28,91,26],[77,31,91,29],[77,43,91,41],[78,4,92,2],[78,10,92,8],[78,14,92,12,"Error"],[78,19,92,17],[78,20,92,18],[78,48,92,46],[78,49,92,47],[79,2,93,0],[79,3,93,1],[80,2,95,0,"module"],[80,8,95,6],[80,9,95,7,"exports"],[80,16,95,14],[80,19,95,17,"HashBase"],[80,27,95,25],[81,0,95,25],[81,3]],"functionMap":{"names":["<global>","throwIfNotStringOrBuffer","HashBase","HashBase.prototype._transform","HashBase.prototype._flush","HashBase.prototype.update","HashBase.prototype._update","HashBase.prototype.digest","HashBase.prototype._digest"],"mappings":"AAA;ACK;CDI;AEE;CFS;gCGI;CHS;4BIE;CJS;4BKE;CLuB;6BME;CNE;4BOE;CPa;6BQE;CRE"}},"type":"js/module"}]}