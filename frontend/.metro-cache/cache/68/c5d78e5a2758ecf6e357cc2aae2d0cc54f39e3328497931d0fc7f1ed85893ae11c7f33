{"dependencies":[],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  let converter;\n  /**\n   * Convert a little-endian buffer into a BigInt.\n   * @param buf The little-endian buffer to convert\n   * @returns A BigInt with the little-endian representation of buf.\n   */\n  function toBigIntLE(buf) {\n    {\n      const reversed = Buffer.from(buf);\n      reversed.reverse();\n      const hex = reversed.toString('hex');\n      if (hex.length === 0) {\n        return BigInt(0);\n      }\n      return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n  }\n  exports.toBigIntLE = toBigIntLE;\n  /**\n   * Convert a big-endian buffer into a BigInt\n   * @param buf The big-endian buffer to convert.\n   * @returns A BigInt with the big-endian representation of buf.\n   */\n  function toBigIntBE(buf) {\n    {\n      const hex = buf.toString('hex');\n      if (hex.length === 0) {\n        return BigInt(0);\n      }\n      return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n  }\n  exports.toBigIntBE = toBigIntBE;\n  /**\n   * Convert a BigInt to a little-endian buffer.\n   * @param num   The BigInt to convert.\n   * @param width The number of bytes that the resulting buffer should be.\n   * @returns A little-endian buffer representation of num.\n   */\n  function toBufferLE(num, width) {\n    {\n      const hex = num.toString(16);\n      const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n      buffer.reverse();\n      return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n  }\n  exports.toBufferLE = toBufferLE;\n  /**\n   * Convert a BigInt to a big-endian buffer.\n   * @param num   The BigInt to convert.\n   * @param width The number of bytes that the resulting buffer should be.\n   * @returns A big-endian buffer representation of num.\n   */\n  function toBufferBE(num, width) {\n    {\n      const hex = num.toString(16);\n      return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n  }\n  exports.toBufferBE = toBufferBE;\n});","lineCount":73,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,21],[4,24,3,22,"exports"],[4,31,3,29],[4,33,3,31],[4,45,3,43],[4,47,3,45],[5,4,3,47,"value"],[5,9,3,52],[5,11,3,54],[6,2,3,59],[6,3,3,60],[6,4,3,61],[7,2,4,0],[7,6,4,4,"converter"],[7,15,4,13],[8,2,5,0],[9,0,6,0],[10,0,7,0],[11,0,8,0],[12,0,9,0],[13,2,10,0],[13,11,10,9,"toBigIntLE"],[13,21,10,19,"toBigIntLE"],[13,22,10,20,"buf"],[13,25,10,23],[13,27,10,25],[14,4,11,4],[15,6,12,8],[15,12,12,14,"reversed"],[15,20,12,22],[15,23,12,25,"Buffer"],[15,29,12,31],[15,30,12,32,"from"],[15,34,12,36],[15,35,12,37,"buf"],[15,38,12,40],[15,39,12,41],[16,6,13,8,"reversed"],[16,14,13,16],[16,15,13,17,"reverse"],[16,22,13,24],[16,23,13,25],[16,24,13,26],[17,6,14,8],[17,12,14,14,"hex"],[17,15,14,17],[17,18,14,20,"reversed"],[17,26,14,28],[17,27,14,29,"toString"],[17,35,14,37],[17,36,14,38],[17,41,14,43],[17,42,14,44],[18,6,15,8],[18,10,15,12,"hex"],[18,13,15,15],[18,14,15,16,"length"],[18,20,15,22],[18,25,15,27],[18,26,15,28],[18,28,15,30],[19,8,16,12],[19,15,16,19,"BigInt"],[19,21,16,25],[19,22,16,26],[19,23,16,27],[19,24,16,28],[20,6,17,8],[21,6,18,8],[21,13,18,15,"BigInt"],[21,19,18,21],[21,20,18,22],[21,25,18,27,"hex"],[21,28,18,30],[21,30,18,32],[21,31,18,33],[22,4,19,4],[23,4,20,4],[23,11,20,11,"converter"],[23,20,20,20],[23,21,20,21,"toBigInt"],[23,29,20,29],[23,30,20,30,"buf"],[23,33,20,33],[23,35,20,35],[23,40,20,40],[23,41,20,41],[24,2,21,0],[25,2,22,0,"exports"],[25,9,22,7],[25,10,22,8,"toBigIntLE"],[25,20,22,18],[25,23,22,21,"toBigIntLE"],[25,33,22,31],[26,2,23,0],[27,0,24,0],[28,0,25,0],[29,0,26,0],[30,0,27,0],[31,2,28,0],[31,11,28,9,"toBigIntBE"],[31,21,28,19,"toBigIntBE"],[31,22,28,20,"buf"],[31,25,28,23],[31,27,28,25],[32,4,29,4],[33,6,30,8],[33,12,30,14,"hex"],[33,15,30,17],[33,18,30,20,"buf"],[33,21,30,23],[33,22,30,24,"toString"],[33,30,30,32],[33,31,30,33],[33,36,30,38],[33,37,30,39],[34,6,31,8],[34,10,31,12,"hex"],[34,13,31,15],[34,14,31,16,"length"],[34,20,31,22],[34,25,31,27],[34,26,31,28],[34,28,31,30],[35,8,32,12],[35,15,32,19,"BigInt"],[35,21,32,25],[35,22,32,26],[35,23,32,27],[35,24,32,28],[36,6,33,8],[37,6,34,8],[37,13,34,15,"BigInt"],[37,19,34,21],[37,20,34,22],[37,25,34,27,"hex"],[37,28,34,30],[37,30,34,32],[37,31,34,33],[38,4,35,4],[39,4,36,4],[39,11,36,11,"converter"],[39,20,36,20],[39,21,36,21,"toBigInt"],[39,29,36,29],[39,30,36,30,"buf"],[39,33,36,33],[39,35,36,35],[39,39,36,39],[39,40,36,40],[40,2,37,0],[41,2,38,0,"exports"],[41,9,38,7],[41,10,38,8,"toBigIntBE"],[41,20,38,18],[41,23,38,21,"toBigIntBE"],[41,33,38,31],[42,2,39,0],[43,0,40,0],[44,0,41,0],[45,0,42,0],[46,0,43,0],[47,0,44,0],[48,2,45,0],[48,11,45,9,"toBufferLE"],[48,21,45,19,"toBufferLE"],[48,22,45,20,"num"],[48,25,45,23],[48,27,45,25,"width"],[48,32,45,30],[48,34,45,32],[49,4,46,4],[50,6,47,8],[50,12,47,14,"hex"],[50,15,47,17],[50,18,47,20,"num"],[50,21,47,23],[50,22,47,24,"toString"],[50,30,47,32],[50,31,47,33],[50,33,47,35],[50,34,47,36],[51,6,48,8],[51,12,48,14,"buffer"],[51,18,48,20],[51,21,48,23,"Buffer"],[51,27,48,29],[51,28,48,30,"from"],[51,32,48,34],[51,33,48,35,"hex"],[51,36,48,38],[51,37,48,39,"padStart"],[51,45,48,47],[51,46,48,48,"width"],[51,51,48,53],[51,54,48,56],[51,55,48,57],[51,57,48,59],[51,60,48,62],[51,61,48,63],[51,62,48,64,"slice"],[51,67,48,69],[51,68,48,70],[51,69,48,71],[51,71,48,73,"width"],[51,76,48,78],[51,79,48,81],[51,80,48,82],[51,81,48,83],[51,83,48,85],[51,88,48,90],[51,89,48,91],[52,6,49,8,"buffer"],[52,12,49,14],[52,13,49,15,"reverse"],[52,20,49,22],[52,21,49,23],[52,22,49,24],[53,6,50,8],[53,13,50,15,"buffer"],[53,19,50,21],[54,4,51,4],[55,4,52,4],[56,4,53,4],[56,11,53,11,"converter"],[56,20,53,20],[56,21,53,21,"fromBigInt"],[56,31,53,31],[56,32,53,32,"num"],[56,35,53,35],[56,37,53,37,"Buffer"],[56,43,53,43],[56,44,53,44,"allocUnsafe"],[56,55,53,55],[56,56,53,56,"width"],[56,61,53,61],[56,62,53,62],[56,64,53,64],[56,69,53,69],[56,70,53,70],[57,2,54,0],[58,2,55,0,"exports"],[58,9,55,7],[58,10,55,8,"toBufferLE"],[58,20,55,18],[58,23,55,21,"toBufferLE"],[58,33,55,31],[59,2,56,0],[60,0,57,0],[61,0,58,0],[62,0,59,0],[63,0,60,0],[64,0,61,0],[65,2,62,0],[65,11,62,9,"toBufferBE"],[65,21,62,19,"toBufferBE"],[65,22,62,20,"num"],[65,25,62,23],[65,27,62,25,"width"],[65,32,62,30],[65,34,62,32],[66,4,63,4],[67,6,64,8],[67,12,64,14,"hex"],[67,15,64,17],[67,18,64,20,"num"],[67,21,64,23],[67,22,64,24,"toString"],[67,30,64,32],[67,31,64,33],[67,33,64,35],[67,34,64,36],[68,6,65,8],[68,13,65,15,"Buffer"],[68,19,65,21],[68,20,65,22,"from"],[68,24,65,26],[68,25,65,27,"hex"],[68,28,65,30],[68,29,65,31,"padStart"],[68,37,65,39],[68,38,65,40,"width"],[68,43,65,45],[68,46,65,48],[68,47,65,49],[68,49,65,51],[68,52,65,54],[68,53,65,55],[68,54,65,56,"slice"],[68,59,65,61],[68,60,65,62],[68,61,65,63],[68,63,65,65,"width"],[68,68,65,70],[68,71,65,73],[68,72,65,74],[68,73,65,75],[68,75,65,77],[68,80,65,82],[68,81,65,83],[69,4,66,4],[70,4,67,4],[70,11,67,11,"converter"],[70,20,67,20],[70,21,67,21,"fromBigInt"],[70,31,67,31],[70,32,67,32,"num"],[70,35,67,35],[70,37,67,37,"Buffer"],[70,43,67,43],[70,44,67,44,"allocUnsafe"],[70,55,67,55],[70,56,67,56,"width"],[70,61,67,61],[70,62,67,62],[70,64,67,64],[70,68,67,68],[70,69,67,69],[71,2,68,0],[72,2,69,0,"exports"],[72,9,69,7],[72,10,69,8,"toBufferBE"],[72,20,69,18],[72,23,69,21,"toBufferBE"],[72,33,69,31],[73,0,69,32],[73,3]],"functionMap":{"names":["<global>","toBigIntLE","toBigIntBE","toBufferLE","toBufferBE"],"mappings":"AAA;ACS;CDW;AEO;CFS;AGQ;CHS;AIQ;CJM"}},"type":"js/module"}]}