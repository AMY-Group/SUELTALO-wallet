{"dependencies":[{"name":"stream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":16,"index":29},"end":{"line":2,"column":33,"index":46}}],"key":"ywjhWBPQUrHXIfwGsbgNg7Szt/A=","exportNames":["*"]}},{"name":"inherits","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":15,"index":72},"end":{"line":3,"column":34,"index":91}}],"key":"UFs2L1Ma7NUz/WYD3lQMkA8Bn/s=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var Transform = require(_dependencyMap[0], \"stream\").Transform;\n  var inherits = require(_dependencyMap[1], \"inherits\");\n  function HashBase(blockSize) {\n    Transform.call(this);\n    this._block = new Buffer(blockSize);\n    this._blockSize = blockSize;\n    this._blockOffset = 0;\n    this._length = [0, 0, 0, 0];\n    this._finalized = false;\n  }\n  inherits(HashBase, Transform);\n  HashBase.prototype._transform = function (chunk, encoding, callback) {\n    var error = null;\n    try {\n      if (encoding !== 'buffer') chunk = new Buffer(chunk, encoding);\n      this.update(chunk);\n    } catch (err) {\n      error = err;\n    }\n    callback(error);\n  };\n  HashBase.prototype._flush = function (callback) {\n    var error = null;\n    try {\n      this.push(this._digest());\n    } catch (err) {\n      error = err;\n    }\n    callback(error);\n  };\n  HashBase.prototype.update = function (data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');\n    if (this._finalized) throw new Error('Digest already called');\n    if (!Buffer.isBuffer(data)) data = new Buffer(data, encoding || 'binary');\n\n    // consume data\n    var block = this._block;\n    var offset = 0;\n    while (this._blockOffset + data.length - offset >= this._blockSize) {\n      for (var i = this._blockOffset; i < this._blockSize;) block[i++] = data[offset++];\n      this._update();\n      this._blockOffset = 0;\n    }\n    while (offset < data.length) block[this._blockOffset++] = data[offset++];\n\n    // update length\n    for (var j = 0, carry = data.length * 8; carry > 0; ++j) {\n      this._length[j] += carry;\n      carry = this._length[j] / 0x0100000000 | 0;\n      if (carry > 0) this._length[j] -= 0x0100000000 * carry;\n    }\n    return this;\n  };\n  HashBase.prototype._update = function (data) {\n    throw new Error('_update is not implemented');\n  };\n  HashBase.prototype.digest = function (encoding) {\n    if (this._finalized) throw new Error('Digest already called');\n    this._finalized = true;\n    var digest = this._digest();\n    if (encoding !== undefined) digest = digest.toString(encoding);\n    return digest;\n  };\n  HashBase.prototype._digest = function () {\n    throw new Error('_digest is not implemented');\n  };\n  module.exports = HashBase;\n});","lineCount":71,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0],[4,6,2,4,"Transform"],[4,15,2,13],[4,18,2,16,"require"],[4,25,2,23],[4,26,2,23,"_dependencyMap"],[4,40,2,23],[4,53,2,32],[4,54,2,33],[4,55,2,34,"Transform"],[4,64,2,43],[5,2,3,0],[5,6,3,4,"inherits"],[5,14,3,12],[5,17,3,15,"require"],[5,24,3,22],[5,25,3,22,"_dependencyMap"],[5,39,3,22],[5,54,3,33],[5,55,3,34],[6,2,5,0],[6,11,5,9,"HashBase"],[6,19,5,17,"HashBase"],[6,20,5,19,"blockSize"],[6,29,5,28],[6,31,5,30],[7,4,6,2,"Transform"],[7,13,6,11],[7,14,6,12,"call"],[7,18,6,16],[7,19,6,17],[7,23,6,21],[7,24,6,22],[8,4,8,2],[8,8,8,6],[8,9,8,7,"_block"],[8,15,8,13],[8,18,8,16],[8,22,8,20,"Buffer"],[8,28,8,26],[8,29,8,27,"blockSize"],[8,38,8,36],[8,39,8,37],[9,4,9,2],[9,8,9,6],[9,9,9,7,"_blockSize"],[9,19,9,17],[9,22,9,20,"blockSize"],[9,31,9,29],[10,4,10,2],[10,8,10,6],[10,9,10,7,"_blockOffset"],[10,21,10,19],[10,24,10,22],[10,25,10,23],[11,4,11,2],[11,8,11,6],[11,9,11,7,"_length"],[11,16,11,14],[11,19,11,17],[11,20,11,18],[11,21,11,19],[11,23,11,21],[11,24,11,22],[11,26,11,24],[11,27,11,25],[11,29,11,27],[11,30,11,28],[11,31,11,29],[12,4,13,2],[12,8,13,6],[12,9,13,7,"_finalized"],[12,19,13,17],[12,22,13,20],[12,27,13,25],[13,2,14,0],[14,2,16,0,"inherits"],[14,10,16,8],[14,11,16,9,"HashBase"],[14,19,16,17],[14,21,16,19,"Transform"],[14,30,16,28],[14,31,16,29],[15,2,18,0,"HashBase"],[15,10,18,8],[15,11,18,9,"prototype"],[15,20,18,18],[15,21,18,19,"_transform"],[15,31,18,29],[15,34,18,32],[15,44,18,42,"chunk"],[15,49,18,47],[15,51,18,49,"encoding"],[15,59,18,57],[15,61,18,59,"callback"],[15,69,18,67],[15,71,18,69],[16,4,19,2],[16,8,19,6,"error"],[16,13,19,11],[16,16,19,14],[16,20,19,18],[17,4,20,2],[17,8,20,6],[18,6,21,4],[18,10,21,8,"encoding"],[18,18,21,16],[18,23,21,21],[18,31,21,29],[18,33,21,31,"chunk"],[18,38,21,36],[18,41,21,39],[18,45,21,43,"Buffer"],[18,51,21,49],[18,52,21,50,"chunk"],[18,57,21,55],[18,59,21,57,"encoding"],[18,67,21,65],[18,68,21,66],[19,6,22,4],[19,10,22,8],[19,11,22,9,"update"],[19,17,22,15],[19,18,22,16,"chunk"],[19,23,22,21],[19,24,22,22],[20,4,23,2],[20,5,23,3],[20,6,23,4],[20,13,23,11,"err"],[20,16,23,14],[20,18,23,16],[21,6,24,4,"error"],[21,11,24,9],[21,14,24,12,"err"],[21,17,24,15],[22,4,25,2],[23,4,27,2,"callback"],[23,12,27,10],[23,13,27,11,"error"],[23,18,27,16],[23,19,27,17],[24,2,28,0],[24,3,28,1],[25,2,30,0,"HashBase"],[25,10,30,8],[25,11,30,9,"prototype"],[25,20,30,18],[25,21,30,19,"_flush"],[25,27,30,25],[25,30,30,28],[25,40,30,38,"callback"],[25,48,30,46],[25,50,30,48],[26,4,31,2],[26,8,31,6,"error"],[26,13,31,11],[26,16,31,14],[26,20,31,18],[27,4,32,2],[27,8,32,6],[28,6,33,4],[28,10,33,8],[28,11,33,9,"push"],[28,15,33,13],[28,16,33,14],[28,20,33,18],[28,21,33,19,"_digest"],[28,28,33,26],[28,29,33,27],[28,30,33,28],[28,31,33,29],[29,4,34,2],[29,5,34,3],[29,6,34,4],[29,13,34,11,"err"],[29,16,34,14],[29,18,34,16],[30,6,35,4,"error"],[30,11,35,9],[30,14,35,12,"err"],[30,17,35,15],[31,4,36,2],[32,4,38,2,"callback"],[32,12,38,10],[32,13,38,11,"error"],[32,18,38,16],[32,19,38,17],[33,2,39,0],[33,3,39,1],[34,2,41,0,"HashBase"],[34,10,41,8],[34,11,41,9,"prototype"],[34,20,41,18],[34,21,41,19,"update"],[34,27,41,25],[34,30,41,28],[34,40,41,38,"data"],[34,44,41,42],[34,46,41,44,"encoding"],[34,54,41,52],[34,56,41,54],[35,4,42,2],[35,8,42,6],[35,9,42,7,"Buffer"],[35,15,42,13],[35,16,42,14,"isBuffer"],[35,24,42,22],[35,25,42,23,"data"],[35,29,42,27],[35,30,42,28],[35,34,42,32],[35,41,42,39,"data"],[35,45,42,43],[35,50,42,48],[35,58,42,56],[35,60,42,58],[35,66,42,64],[35,70,42,68,"TypeError"],[35,79,42,77],[35,80,42,78],[35,115,42,113],[35,116,42,114],[36,4,43,2],[36,8,43,6],[36,12,43,10],[36,13,43,11,"_finalized"],[36,23,43,21],[36,25,43,23],[36,31,43,29],[36,35,43,33,"Error"],[36,40,43,38],[36,41,43,39],[36,64,43,62],[36,65,43,63],[37,4,44,2],[37,8,44,6],[37,9,44,7,"Buffer"],[37,15,44,13],[37,16,44,14,"isBuffer"],[37,24,44,22],[37,25,44,23,"data"],[37,29,44,27],[37,30,44,28],[37,32,44,30,"data"],[37,36,44,34],[37,39,44,37],[37,43,44,41,"Buffer"],[37,49,44,47],[37,50,44,48,"data"],[37,54,44,52],[37,56,44,54,"encoding"],[37,64,44,62],[37,68,44,66],[37,76,44,74],[37,77,44,75],[39,4,46,2],[40,4,47,2],[40,8,47,6,"block"],[40,13,47,11],[40,16,47,14],[40,20,47,18],[40,21,47,19,"_block"],[40,27,47,25],[41,4,48,2],[41,8,48,6,"offset"],[41,14,48,12],[41,17,48,15],[41,18,48,16],[42,4,49,2],[42,11,49,9],[42,15,49,13],[42,16,49,14,"_blockOffset"],[42,28,49,26],[42,31,49,29,"data"],[42,35,49,33],[42,36,49,34,"length"],[42,42,49,40],[42,45,49,43,"offset"],[42,51,49,49],[42,55,49,53],[42,59,49,57],[42,60,49,58,"_blockSize"],[42,70,49,68],[42,72,49,70],[43,6,50,4],[43,11,50,9],[43,15,50,13,"i"],[43,16,50,14],[43,19,50,17],[43,23,50,21],[43,24,50,22,"_blockOffset"],[43,36,50,34],[43,38,50,36,"i"],[43,39,50,37],[43,42,50,40],[43,46,50,44],[43,47,50,45,"_blockSize"],[43,57,50,55],[43,60,50,58,"block"],[43,65,50,63],[43,66,50,64,"i"],[43,67,50,65],[43,69,50,67],[43,70,50,68],[43,73,50,71,"data"],[43,77,50,75],[43,78,50,76,"offset"],[43,84,50,82],[43,86,50,84],[43,87,50,85],[44,6,51,4],[44,10,51,8],[44,11,51,9,"_update"],[44,18,51,16],[44,19,51,17],[44,20,51,18],[45,6,52,4],[45,10,52,8],[45,11,52,9,"_blockOffset"],[45,23,52,21],[45,26,52,24],[45,27,52,25],[46,4,53,2],[47,4,54,2],[47,11,54,9,"offset"],[47,17,54,15],[47,20,54,18,"data"],[47,24,54,22],[47,25,54,23,"length"],[47,31,54,29],[47,33,54,31,"block"],[47,38,54,36],[47,39,54,37],[47,43,54,41],[47,44,54,42,"_blockOffset"],[47,56,54,54],[47,58,54,56],[47,59,54,57],[47,62,54,60,"data"],[47,66,54,64],[47,67,54,65,"offset"],[47,73,54,71],[47,75,54,73],[47,76,54,74],[49,4,56,2],[50,4,57,2],[50,9,57,7],[50,13,57,11,"j"],[50,14,57,12],[50,17,57,15],[50,18,57,16],[50,20,57,18,"carry"],[50,25,57,23],[50,28,57,26,"data"],[50,32,57,30],[50,33,57,31,"length"],[50,39,57,37],[50,42,57,40],[50,43,57,41],[50,45,57,43,"carry"],[50,50,57,48],[50,53,57,51],[50,54,57,52],[50,56,57,54],[50,58,57,56,"j"],[50,59,57,57],[50,61,57,59],[51,6,58,4],[51,10,58,8],[51,11,58,9,"_length"],[51,18,58,16],[51,19,58,17,"j"],[51,20,58,18],[51,21,58,19],[51,25,58,23,"carry"],[51,30,58,28],[52,6,59,4,"carry"],[52,11,59,9],[52,14,59,13],[52,18,59,17],[52,19,59,18,"_length"],[52,26,59,25],[52,27,59,26,"j"],[52,28,59,27],[52,29,59,28],[52,32,59,31],[52,44,59,43],[52,47,59,47],[52,48,59,48],[53,6,60,4],[53,10,60,8,"carry"],[53,15,60,13],[53,18,60,16],[53,19,60,17],[53,21,60,19],[53,25,60,23],[53,26,60,24,"_length"],[53,33,60,31],[53,34,60,32,"j"],[53,35,60,33],[53,36,60,34],[53,40,60,38],[53,52,60,50],[53,55,60,53,"carry"],[53,60,60,58],[54,4,61,2],[55,4,63,2],[55,11,63,9],[55,15,63,13],[56,2,64,0],[56,3,64,1],[57,2,66,0,"HashBase"],[57,10,66,8],[57,11,66,9,"prototype"],[57,20,66,18],[57,21,66,19,"_update"],[57,28,66,26],[57,31,66,29],[57,41,66,39,"data"],[57,45,66,43],[57,47,66,45],[58,4,67,2],[58,10,67,8],[58,14,67,12,"Error"],[58,19,67,17],[58,20,67,18],[58,48,67,46],[58,49,67,47],[59,2,68,0],[59,3,68,1],[60,2,70,0,"HashBase"],[60,10,70,8],[60,11,70,9,"prototype"],[60,20,70,18],[60,21,70,19,"digest"],[60,27,70,25],[60,30,70,28],[60,40,70,38,"encoding"],[60,48,70,46],[60,50,70,48],[61,4,71,2],[61,8,71,6],[61,12,71,10],[61,13,71,11,"_finalized"],[61,23,71,21],[61,25,71,23],[61,31,71,29],[61,35,71,33,"Error"],[61,40,71,38],[61,41,71,39],[61,64,71,62],[61,65,71,63],[62,4,72,2],[62,8,72,6],[62,9,72,7,"_finalized"],[62,19,72,17],[62,22,72,20],[62,26,72,24],[63,4,74,2],[63,8,74,6,"digest"],[63,14,74,12],[63,17,74,15],[63,21,74,19],[63,22,74,20,"_digest"],[63,29,74,27],[63,30,74,28],[63,31,74,29],[64,4,75,2],[64,8,75,6,"encoding"],[64,16,75,14],[64,21,75,19,"undefined"],[64,30,75,28],[64,32,75,30,"digest"],[64,38,75,36],[64,41,75,39,"digest"],[64,47,75,45],[64,48,75,46,"toString"],[64,56,75,54],[64,57,75,55,"encoding"],[64,65,75,63],[64,66,75,64],[65,4,76,2],[65,11,76,9,"digest"],[65,17,76,15],[66,2,77,0],[66,3,77,1],[67,2,79,0,"HashBase"],[67,10,79,8],[67,11,79,9,"prototype"],[67,20,79,18],[67,21,79,19,"_digest"],[67,28,79,26],[67,31,79,29],[67,43,79,41],[68,4,80,2],[68,10,80,8],[68,14,80,12,"Error"],[68,19,80,17],[68,20,80,18],[68,48,80,46],[68,49,80,47],[69,2,81,0],[69,3,81,1],[70,2,83,0,"module"],[70,8,83,6],[70,9,83,7,"exports"],[70,16,83,14],[70,19,83,17,"HashBase"],[70,27,83,25],[71,0,83,25],[71,3]],"functionMap":{"names":["<global>","HashBase","HashBase.prototype._transform","HashBase.prototype._flush","HashBase.prototype.update","HashBase.prototype._update","HashBase.prototype.digest","HashBase.prototype._digest"],"mappings":"AAA;ACI;CDS;gCEI;CFU;4BGE;CHS;4BIE;CJuB;6BKE;CLE;4BME;CNO;6BOE;CPE"}},"type":"js/module"}]}