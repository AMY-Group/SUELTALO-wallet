{"dependencies":[{"name":"../errors","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":67,"column":21,"index":3547},"end":{"line":67,"column":41,"index":3567}}],"key":"iI2wDtrGlKjO3ksFzW75fbTNGvA=","exportNames":["*"]}},{"name":"./_stream_duplex","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":72,"column":13,"index":3892},"end":{"line":72,"column":40,"index":3919}}],"key":"C/X3w/BONwkyEBa6aK5YnPqhnHc=","exportNames":["*"]}},{"name":"inherits","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":73,"column":0,"index":3921},"end":{"line":73,"column":19,"index":3940}}],"key":"UFs2L1Ma7NUz/WYD3lQMkA8Bn/s=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  // Copyright Joyent, Inc. and other Node contributors.\n  //\n  // Permission is hereby granted, free of charge, to any person obtaining a\n  // copy of this software and associated documentation files (the\n  // \"Software\"), to deal in the Software without restriction, including\n  // without limitation the rights to use, copy, modify, merge, publish,\n  // distribute, sublicense, and/or sell copies of the Software, and to permit\n  // persons to whom the Software is furnished to do so, subject to the\n  // following conditions:\n  //\n  // The above copyright notice and this permission notice shall be included\n  // in all copies or substantial portions of the Software.\n  //\n  // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n  // a transform stream is a readable/writable stream where you do\n  // something with the data.  Sometimes it's called a \"filter\",\n  // but that's not a great name for it, since that implies a thing where\n  // some bits pass through, and others are simply ignored.  (That would\n  // be a valid example of a transform, of course.)\n  //\n  // While the output is causally related to the input, it's not a\n  // necessarily symmetric or synchronous transformation.  For example,\n  // a zlib stream might take multiple plain-text writes(), and then\n  // emit a single compressed chunk some time in the future.\n  //\n  // Here's how this works:\n  //\n  // The Transform stream has all the aspects of the readable and writable\n  // stream classes.  When you write(chunk), that calls _write(chunk,cb)\n  // internally, and returns false if there's a lot of pending writes\n  // buffered up.  When you call read(), that calls _read(n) until\n  // there's enough pending readable data buffered up.\n  //\n  // In a transform stream, the written data is placed in a buffer.  When\n  // _read(n) is called, it transforms the queued up data, calling the\n  // buffered _write cb's as it consumes chunks.  If consuming a single\n  // written chunk would result in multiple output chunks, then the first\n  // outputted bit calls the readcb, and subsequent chunks just go into\n  // the read buffer, and will cause it to emit 'readable' if necessary.\n  //\n  // This way, back-pressure is actually determined by the reading side,\n  // since _read has to be called to start processing a new chunk.  However,\n  // a pathological inflate type of transform can cause excessive buffering\n  // here.  For example, imagine a stream where every byte of input is\n  // interpreted as an integer from 0-255, and then results in that many\n  // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n  // 1kb of data being output.  In this case, you could write a very small\n  // amount of input, and end up with a very large amount of output.  In\n  // such a pathological inflating mechanism, there'd be no way to tell\n  // the system to stop doing the transform.  A single 4MB write could\n  // cause the system to run out of memory.\n  //\n  // However, even in such a pathological case, only a single written chunk\n  // would be consumed, and then the rest would wait (un-transformed) until\n  // the results of the previous transformed chunk were consumed.\n\n  'use strict';\n\n  module.exports = Transform;\n  var _require$codes = require(_dependencyMap[0], \"../errors\").codes,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n  var Duplex = require(_dependencyMap[1], \"./_stream_duplex\");\n  require(_dependencyMap[2], \"inherits\")(Transform, Duplex);\n  function afterTransform(er, data) {\n    var ts = this._transformState;\n    ts.transforming = false;\n    var cb = ts.writecb;\n    if (cb === null) {\n      return this.emit('error', new ERR_MULTIPLE_CALLBACK());\n    }\n    ts.writechunk = null;\n    ts.writecb = null;\n    if (data != null)\n      // single equals check for both `null` and `undefined`\n      this.push(data);\n    cb(er);\n    var rs = this._readableState;\n    rs.reading = false;\n    if (rs.needReadable || rs.length < rs.highWaterMark) {\n      this._read(rs.highWaterMark);\n    }\n  }\n  function Transform(options) {\n    if (!(this instanceof Transform)) return new Transform(options);\n    Duplex.call(this, options);\n    this._transformState = {\n      afterTransform: afterTransform.bind(this),\n      needTransform: false,\n      transforming: false,\n      writecb: null,\n      writechunk: null,\n      writeencoding: null\n    };\n\n    // start out asking for a readable event once data is transformed.\n    this._readableState.needReadable = true;\n\n    // we have implemented the _read method, and done the other things\n    // that Readable wants before the first _read call, so unset the\n    // sync guard flag.\n    this._readableState.sync = false;\n    if (options) {\n      if (typeof options.transform === 'function') this._transform = options.transform;\n      if (typeof options.flush === 'function') this._flush = options.flush;\n    }\n\n    // When the writable side finishes, then flush out anything remaining.\n    this.on('prefinish', prefinish);\n  }\n  function prefinish() {\n    var _this = this;\n    if (typeof this._flush === 'function' && !this._readableState.destroyed) {\n      this._flush(function (er, data) {\n        done(_this, er, data);\n      });\n    } else {\n      done(this, null, null);\n    }\n  }\n  Transform.prototype.push = function (chunk, encoding) {\n    this._transformState.needTransform = false;\n    return Duplex.prototype.push.call(this, chunk, encoding);\n  };\n\n  // This is the part where you do stuff!\n  // override this function in implementation classes.\n  // 'chunk' is an input chunk.\n  //\n  // Call `push(newChunk)` to pass along transformed output\n  // to the readable side.  You may call 'push' zero or more times.\n  //\n  // Call `cb(err)` when you are done with this chunk.  If you pass\n  // an error, then that'll put the hurt on the whole operation.  If you\n  // never call cb(), then you'll never get another chunk.\n  Transform.prototype._transform = function (chunk, encoding, cb) {\n    cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\n  };\n  Transform.prototype._write = function (chunk, encoding, cb) {\n    var ts = this._transformState;\n    ts.writecb = cb;\n    ts.writechunk = chunk;\n    ts.writeencoding = encoding;\n    if (!ts.transforming) {\n      var rs = this._readableState;\n      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n    }\n  };\n\n  // Doesn't matter what the args are here.\n  // _transform does all the work.\n  // That we got here means that the readable side wants more data.\n  Transform.prototype._read = function (n) {\n    var ts = this._transformState;\n    if (ts.writechunk !== null && !ts.transforming) {\n      ts.transforming = true;\n      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n    } else {\n      // mark that we need a transform, so that any data that comes in\n      // will get processed, now that we've asked for it.\n      ts.needTransform = true;\n    }\n  };\n  Transform.prototype._destroy = function (err, cb) {\n    Duplex.prototype._destroy.call(this, err, function (err2) {\n      cb(err2);\n    });\n  };\n  function done(stream, er, data) {\n    if (er) return stream.emit('error', er);\n    if (data != null)\n      // single equals check for both `null` and `undefined`\n      stream.push(data);\n\n    // TODO(BridgeAR): Write a test for these two error cases\n    // if there's nothing in the write buffer, then that means\n    // that nothing more will ever be provided\n    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n    return stream.push(null);\n  }\n});","lineCount":192,"map":[[2,2,1,0],[3,2,2,0],[4,2,3,0],[5,2,4,0],[6,2,5,0],[7,2,6,0],[8,2,7,0],[9,2,8,0],[10,2,9,0],[11,2,10,0],[12,2,11,0],[13,2,12,0],[14,2,13,0],[15,2,14,0],[16,2,15,0],[17,2,16,0],[18,2,17,0],[19,2,18,0],[20,2,19,0],[21,2,20,0],[23,2,22,0],[24,2,23,0],[25,2,24,0],[26,2,25,0],[27,2,26,0],[28,2,27,0],[29,2,28,0],[30,2,29,0],[31,2,30,0],[32,2,31,0],[33,2,32,0],[34,2,33,0],[35,2,34,0],[36,2,35,0],[37,2,36,0],[38,2,37,0],[39,2,38,0],[40,2,39,0],[41,2,40,0],[42,2,41,0],[43,2,42,0],[44,2,43,0],[45,2,44,0],[46,2,45,0],[47,2,46,0],[48,2,47,0],[49,2,48,0],[50,2,49,0],[51,2,50,0],[52,2,51,0],[53,2,52,0],[54,2,53,0],[55,2,54,0],[56,2,55,0],[57,2,56,0],[58,2,57,0],[59,2,58,0],[60,2,59,0],[61,2,60,0],[62,2,61,0],[63,2,62,0],[65,2,64,0],[65,14,64,12],[67,2,66,0,"module"],[67,8,66,6],[67,9,66,7,"exports"],[67,16,66,14],[67,19,66,17,"Transform"],[67,28,66,26],[68,2,67,0],[68,6,67,4,"_require$codes"],[68,20,67,18],[68,23,67,21,"require"],[68,30,67,28],[68,31,67,28,"_dependencyMap"],[68,45,67,28],[68,61,67,40],[68,62,67,41],[68,63,67,42,"codes"],[68,68,67,47],[69,4,68,2,"ERR_METHOD_NOT_IMPLEMENTED"],[69,30,68,28],[69,33,68,31,"_require$codes"],[69,47,68,45],[69,48,68,46,"ERR_METHOD_NOT_IMPLEMENTED"],[69,74,68,72],[70,4,69,2,"ERR_MULTIPLE_CALLBACK"],[70,25,69,23],[70,28,69,26,"_require$codes"],[70,42,69,40],[70,43,69,41,"ERR_MULTIPLE_CALLBACK"],[70,64,69,62],[71,4,70,2,"ERR_TRANSFORM_ALREADY_TRANSFORMING"],[71,38,70,36],[71,41,70,39,"_require$codes"],[71,55,70,53],[71,56,70,54,"ERR_TRANSFORM_ALREADY_TRANSFORMING"],[71,90,70,88],[72,4,71,2,"ERR_TRANSFORM_WITH_LENGTH_0"],[72,31,71,29],[72,34,71,32,"_require$codes"],[72,48,71,46],[72,49,71,47,"ERR_TRANSFORM_WITH_LENGTH_0"],[72,76,71,74],[73,2,72,0],[73,6,72,4,"Duplex"],[73,12,72,10],[73,15,72,13,"require"],[73,22,72,20],[73,23,72,20,"_dependencyMap"],[73,37,72,20],[73,60,72,39],[73,61,72,40],[74,2,73,0,"require"],[74,9,73,7],[74,10,73,7,"_dependencyMap"],[74,24,73,7],[74,39,73,18],[74,40,73,19],[74,41,73,20,"Transform"],[74,50,73,29],[74,52,73,31,"Duplex"],[74,58,73,37],[74,59,73,38],[75,2,74,0],[75,11,74,9,"afterTransform"],[75,25,74,23,"afterTransform"],[75,26,74,24,"er"],[75,28,74,26],[75,30,74,28,"data"],[75,34,74,32],[75,36,74,34],[76,4,75,2],[76,8,75,6,"ts"],[76,10,75,8],[76,13,75,11],[76,17,75,15],[76,18,75,16,"_transformState"],[76,33,75,31],[77,4,76,2,"ts"],[77,6,76,4],[77,7,76,5,"transforming"],[77,19,76,17],[77,22,76,20],[77,27,76,25],[78,4,77,2],[78,8,77,6,"cb"],[78,10,77,8],[78,13,77,11,"ts"],[78,15,77,13],[78,16,77,14,"writecb"],[78,23,77,21],[79,4,78,2],[79,8,78,6,"cb"],[79,10,78,8],[79,15,78,13],[79,19,78,17],[79,21,78,19],[80,6,79,4],[80,13,79,11],[80,17,79,15],[80,18,79,16,"emit"],[80,22,79,20],[80,23,79,21],[80,30,79,28],[80,32,79,30],[80,36,79,34,"ERR_MULTIPLE_CALLBACK"],[80,57,79,55],[80,58,79,56],[80,59,79,57],[80,60,79,58],[81,4,80,2],[82,4,81,2,"ts"],[82,6,81,4],[82,7,81,5,"writechunk"],[82,17,81,15],[82,20,81,18],[82,24,81,22],[83,4,82,2,"ts"],[83,6,82,4],[83,7,82,5,"writecb"],[83,14,82,12],[83,17,82,15],[83,21,82,19],[84,4,83,2],[84,8,83,6,"data"],[84,12,83,10],[84,16,83,14],[84,20,83,18],[85,6,84,4],[86,6,85,4],[86,10,85,8],[86,11,85,9,"push"],[86,15,85,13],[86,16,85,14,"data"],[86,20,85,18],[86,21,85,19],[87,4,86,2,"cb"],[87,6,86,4],[87,7,86,5,"er"],[87,9,86,7],[87,10,86,8],[88,4,87,2],[88,8,87,6,"rs"],[88,10,87,8],[88,13,87,11],[88,17,87,15],[88,18,87,16,"_readableState"],[88,32,87,30],[89,4,88,2,"rs"],[89,6,88,4],[89,7,88,5,"reading"],[89,14,88,12],[89,17,88,15],[89,22,88,20],[90,4,89,2],[90,8,89,6,"rs"],[90,10,89,8],[90,11,89,9,"needReadable"],[90,23,89,21],[90,27,89,25,"rs"],[90,29,89,27],[90,30,89,28,"length"],[90,36,89,34],[90,39,89,37,"rs"],[90,41,89,39],[90,42,89,40,"highWaterMark"],[90,55,89,53],[90,57,89,55],[91,6,90,4],[91,10,90,8],[91,11,90,9,"_read"],[91,16,90,14],[91,17,90,15,"rs"],[91,19,90,17],[91,20,90,18,"highWaterMark"],[91,33,90,31],[91,34,90,32],[92,4,91,2],[93,2,92,0],[94,2,93,0],[94,11,93,9,"Transform"],[94,20,93,18,"Transform"],[94,21,93,19,"options"],[94,28,93,26],[94,30,93,28],[95,4,94,2],[95,8,94,6],[95,10,94,8],[95,14,94,12],[95,26,94,24,"Transform"],[95,35,94,33],[95,36,94,34],[95,38,94,36],[95,45,94,43],[95,49,94,47,"Transform"],[95,58,94,56],[95,59,94,57,"options"],[95,66,94,64],[95,67,94,65],[96,4,95,2,"Duplex"],[96,10,95,8],[96,11,95,9,"call"],[96,15,95,13],[96,16,95,14],[96,20,95,18],[96,22,95,20,"options"],[96,29,95,27],[96,30,95,28],[97,4,96,2],[97,8,96,6],[97,9,96,7,"_transformState"],[97,24,96,22],[97,27,96,25],[98,6,97,4,"afterTransform"],[98,20,97,18],[98,22,97,20,"afterTransform"],[98,36,97,34],[98,37,97,35,"bind"],[98,41,97,39],[98,42,97,40],[98,46,97,44],[98,47,97,45],[99,6,98,4,"needTransform"],[99,19,98,17],[99,21,98,19],[99,26,98,24],[100,6,99,4,"transforming"],[100,18,99,16],[100,20,99,18],[100,25,99,23],[101,6,100,4,"writecb"],[101,13,100,11],[101,15,100,13],[101,19,100,17],[102,6,101,4,"writechunk"],[102,16,101,14],[102,18,101,16],[102,22,101,20],[103,6,102,4,"writeencoding"],[103,19,102,17],[103,21,102,19],[104,4,103,2],[104,5,103,3],[106,4,105,2],[107,4,106,2],[107,8,106,6],[107,9,106,7,"_readableState"],[107,23,106,21],[107,24,106,22,"needReadable"],[107,36,106,34],[107,39,106,37],[107,43,106,41],[109,4,108,2],[110,4,109,2],[111,4,110,2],[112,4,111,2],[112,8,111,6],[112,9,111,7,"_readableState"],[112,23,111,21],[112,24,111,22,"sync"],[112,28,111,26],[112,31,111,29],[112,36,111,34],[113,4,112,2],[113,8,112,6,"options"],[113,15,112,13],[113,17,112,15],[114,6,113,4],[114,10,113,8],[114,17,113,15,"options"],[114,24,113,22],[114,25,113,23,"transform"],[114,34,113,32],[114,39,113,37],[114,49,113,47],[114,51,113,49],[114,55,113,53],[114,56,113,54,"_transform"],[114,66,113,64],[114,69,113,67,"options"],[114,76,113,74],[114,77,113,75,"transform"],[114,86,113,84],[115,6,114,4],[115,10,114,8],[115,17,114,15,"options"],[115,24,114,22],[115,25,114,23,"flush"],[115,30,114,28],[115,35,114,33],[115,45,114,43],[115,47,114,45],[115,51,114,49],[115,52,114,50,"_flush"],[115,58,114,56],[115,61,114,59,"options"],[115,68,114,66],[115,69,114,67,"flush"],[115,74,114,72],[116,4,115,2],[118,4,117,2],[119,4,118,2],[119,8,118,6],[119,9,118,7,"on"],[119,11,118,9],[119,12,118,10],[119,23,118,21],[119,25,118,23,"prefinish"],[119,34,118,32],[119,35,118,33],[120,2,119,0],[121,2,120,0],[121,11,120,9,"prefinish"],[121,20,120,18,"prefinish"],[121,21,120,18],[121,23,120,21],[122,4,121,2],[122,8,121,6,"_this"],[122,13,121,11],[122,16,121,14],[122,20,121,18],[123,4,122,2],[123,8,122,6],[123,15,122,13],[123,19,122,17],[123,20,122,18,"_flush"],[123,26,122,24],[123,31,122,29],[123,41,122,39],[123,45,122,43],[123,46,122,44],[123,50,122,48],[123,51,122,49,"_readableState"],[123,65,122,63],[123,66,122,64,"destroyed"],[123,75,122,73],[123,77,122,75],[124,6,123,4],[124,10,123,8],[124,11,123,9,"_flush"],[124,17,123,15],[124,18,123,16],[124,28,123,26,"er"],[124,30,123,28],[124,32,123,30,"data"],[124,36,123,34],[124,38,123,36],[125,8,124,6,"done"],[125,12,124,10],[125,13,124,11,"_this"],[125,18,124,16],[125,20,124,18,"er"],[125,22,124,20],[125,24,124,22,"data"],[125,28,124,26],[125,29,124,27],[126,6,125,4],[126,7,125,5],[126,8,125,6],[127,4,126,2],[127,5,126,3],[127,11,126,9],[128,6,127,4,"done"],[128,10,127,8],[128,11,127,9],[128,15,127,13],[128,17,127,15],[128,21,127,19],[128,23,127,21],[128,27,127,25],[128,28,127,26],[129,4,128,2],[130,2,129,0],[131,2,130,0,"Transform"],[131,11,130,9],[131,12,130,10,"prototype"],[131,21,130,19],[131,22,130,20,"push"],[131,26,130,24],[131,29,130,27],[131,39,130,37,"chunk"],[131,44,130,42],[131,46,130,44,"encoding"],[131,54,130,52],[131,56,130,54],[132,4,131,2],[132,8,131,6],[132,9,131,7,"_transformState"],[132,24,131,22],[132,25,131,23,"needTransform"],[132,38,131,36],[132,41,131,39],[132,46,131,44],[133,4,132,2],[133,11,132,9,"Duplex"],[133,17,132,15],[133,18,132,16,"prototype"],[133,27,132,25],[133,28,132,26,"push"],[133,32,132,30],[133,33,132,31,"call"],[133,37,132,35],[133,38,132,36],[133,42,132,40],[133,44,132,42,"chunk"],[133,49,132,47],[133,51,132,49,"encoding"],[133,59,132,57],[133,60,132,58],[134,2,133,0],[134,3,133,1],[136,2,135,0],[137,2,136,0],[138,2,137,0],[139,2,138,0],[140,2,139,0],[141,2,140,0],[142,2,141,0],[143,2,142,0],[144,2,143,0],[145,2,144,0],[146,2,145,0,"Transform"],[146,11,145,9],[146,12,145,10,"prototype"],[146,21,145,19],[146,22,145,20,"_transform"],[146,32,145,30],[146,35,145,33],[146,45,145,43,"chunk"],[146,50,145,48],[146,52,145,50,"encoding"],[146,60,145,58],[146,62,145,60,"cb"],[146,64,145,62],[146,66,145,64],[147,4,146,2,"cb"],[147,6,146,4],[147,7,146,5],[147,11,146,9,"ERR_METHOD_NOT_IMPLEMENTED"],[147,37,146,35],[147,38,146,36],[147,52,146,50],[147,53,146,51],[147,54,146,52],[148,2,147,0],[148,3,147,1],[149,2,148,0,"Transform"],[149,11,148,9],[149,12,148,10,"prototype"],[149,21,148,19],[149,22,148,20,"_write"],[149,28,148,26],[149,31,148,29],[149,41,148,39,"chunk"],[149,46,148,44],[149,48,148,46,"encoding"],[149,56,148,54],[149,58,148,56,"cb"],[149,60,148,58],[149,62,148,60],[150,4,149,2],[150,8,149,6,"ts"],[150,10,149,8],[150,13,149,11],[150,17,149,15],[150,18,149,16,"_transformState"],[150,33,149,31],[151,4,150,2,"ts"],[151,6,150,4],[151,7,150,5,"writecb"],[151,14,150,12],[151,17,150,15,"cb"],[151,19,150,17],[152,4,151,2,"ts"],[152,6,151,4],[152,7,151,5,"writechunk"],[152,17,151,15],[152,20,151,18,"chunk"],[152,25,151,23],[153,4,152,2,"ts"],[153,6,152,4],[153,7,152,5,"writeencoding"],[153,20,152,18],[153,23,152,21,"encoding"],[153,31,152,29],[154,4,153,2],[154,8,153,6],[154,9,153,7,"ts"],[154,11,153,9],[154,12,153,10,"transforming"],[154,24,153,22],[154,26,153,24],[155,6,154,4],[155,10,154,8,"rs"],[155,12,154,10],[155,15,154,13],[155,19,154,17],[155,20,154,18,"_readableState"],[155,34,154,32],[156,6,155,4],[156,10,155,8,"ts"],[156,12,155,10],[156,13,155,11,"needTransform"],[156,26,155,24],[156,30,155,28,"rs"],[156,32,155,30],[156,33,155,31,"needReadable"],[156,45,155,43],[156,49,155,47,"rs"],[156,51,155,49],[156,52,155,50,"length"],[156,58,155,56],[156,61,155,59,"rs"],[156,63,155,61],[156,64,155,62,"highWaterMark"],[156,77,155,75],[156,79,155,77],[156,83,155,81],[156,84,155,82,"_read"],[156,89,155,87],[156,90,155,88,"rs"],[156,92,155,90],[156,93,155,91,"highWaterMark"],[156,106,155,104],[156,107,155,105],[157,4,156,2],[158,2,157,0],[158,3,157,1],[160,2,159,0],[161,2,160,0],[162,2,161,0],[163,2,162,0,"Transform"],[163,11,162,9],[163,12,162,10,"prototype"],[163,21,162,19],[163,22,162,20,"_read"],[163,27,162,25],[163,30,162,28],[163,40,162,38,"n"],[163,41,162,39],[163,43,162,41],[164,4,163,2],[164,8,163,6,"ts"],[164,10,163,8],[164,13,163,11],[164,17,163,15],[164,18,163,16,"_transformState"],[164,33,163,31],[165,4,164,2],[165,8,164,6,"ts"],[165,10,164,8],[165,11,164,9,"writechunk"],[165,21,164,19],[165,26,164,24],[165,30,164,28],[165,34,164,32],[165,35,164,33,"ts"],[165,37,164,35],[165,38,164,36,"transforming"],[165,50,164,48],[165,52,164,50],[166,6,165,4,"ts"],[166,8,165,6],[166,9,165,7,"transforming"],[166,21,165,19],[166,24,165,22],[166,28,165,26],[167,6,166,4],[167,10,166,8],[167,11,166,9,"_transform"],[167,21,166,19],[167,22,166,20,"ts"],[167,24,166,22],[167,25,166,23,"writechunk"],[167,35,166,33],[167,37,166,35,"ts"],[167,39,166,37],[167,40,166,38,"writeencoding"],[167,53,166,51],[167,55,166,53,"ts"],[167,57,166,55],[167,58,166,56,"afterTransform"],[167,72,166,70],[167,73,166,71],[168,4,167,2],[168,5,167,3],[168,11,167,9],[169,6,168,4],[170,6,169,4],[171,6,170,4,"ts"],[171,8,170,6],[171,9,170,7,"needTransform"],[171,22,170,20],[171,25,170,23],[171,29,170,27],[172,4,171,2],[173,2,172,0],[173,3,172,1],[174,2,173,0,"Transform"],[174,11,173,9],[174,12,173,10,"prototype"],[174,21,173,19],[174,22,173,20,"_destroy"],[174,30,173,28],[174,33,173,31],[174,43,173,41,"err"],[174,46,173,44],[174,48,173,46,"cb"],[174,50,173,48],[174,52,173,50],[175,4,174,2,"Duplex"],[175,10,174,8],[175,11,174,9,"prototype"],[175,20,174,18],[175,21,174,19,"_destroy"],[175,29,174,27],[175,30,174,28,"call"],[175,34,174,32],[175,35,174,33],[175,39,174,37],[175,41,174,39,"err"],[175,44,174,42],[175,46,174,44],[175,56,174,54,"err2"],[175,60,174,58],[175,62,174,60],[176,6,175,4,"cb"],[176,8,175,6],[176,9,175,7,"err2"],[176,13,175,11],[176,14,175,12],[177,4,176,2],[177,5,176,3],[177,6,176,4],[178,2,177,0],[178,3,177,1],[179,2,178,0],[179,11,178,9,"done"],[179,15,178,13,"done"],[179,16,178,14,"stream"],[179,22,178,20],[179,24,178,22,"er"],[179,26,178,24],[179,28,178,26,"data"],[179,32,178,30],[179,34,178,32],[180,4,179,2],[180,8,179,6,"er"],[180,10,179,8],[180,12,179,10],[180,19,179,17,"stream"],[180,25,179,23],[180,26,179,24,"emit"],[180,30,179,28],[180,31,179,29],[180,38,179,36],[180,40,179,38,"er"],[180,42,179,40],[180,43,179,41],[181,4,180,2],[181,8,180,6,"data"],[181,12,180,10],[181,16,180,14],[181,20,180,18],[182,6,181,4],[183,6,182,4,"stream"],[183,12,182,10],[183,13,182,11,"push"],[183,17,182,15],[183,18,182,16,"data"],[183,22,182,20],[183,23,182,21],[185,4,184,2],[186,4,185,2],[187,4,186,2],[188,4,187,2],[188,8,187,6,"stream"],[188,14,187,12],[188,15,187,13,"_writableState"],[188,29,187,27],[188,30,187,28,"length"],[188,36,187,34],[188,38,187,36],[188,44,187,42],[188,48,187,46,"ERR_TRANSFORM_WITH_LENGTH_0"],[188,75,187,73],[188,76,187,74],[188,77,187,75],[189,4,188,2],[189,8,188,6,"stream"],[189,14,188,12],[189,15,188,13,"_transformState"],[189,30,188,28],[189,31,188,29,"transforming"],[189,43,188,41],[189,45,188,43],[189,51,188,49],[189,55,188,53,"ERR_TRANSFORM_ALREADY_TRANSFORMING"],[189,89,188,87],[189,90,188,88],[189,91,188,89],[190,4,189,2],[190,11,189,9,"stream"],[190,17,189,15],[190,18,189,16,"push"],[190,22,189,20],[190,23,189,21],[190,27,189,25],[190,28,189,26],[191,2,190,0],[192,0,190,1],[192,3]],"functionMap":{"names":["<global>","afterTransform","Transform","prefinish","_flush$argument_0","Transform.prototype.push","Transform.prototype._transform","Transform.prototype._write","Transform.prototype._read","Transform.prototype._destroy","Duplex.prototype._destroy.call$argument_2","done"],"mappings":"AAA;ACyE;CDkB;AEC;CF0B;AGC;gBCG;KDE;CHI;2BKC;CLG;iCMY;CNE;6BOC;CPS;4BQK;CRU;+BSC;4CCC;GDE;CTC;AWC"}},"type":"js/module"}]}