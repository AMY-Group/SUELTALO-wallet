{"dependencies":[{"name":"../utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":290},"end":{"line":8,"column":146,"index":436}}],"key":"dGswK136diHRCgUa8xpQUn/UMbc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.Field = Field;\n  exports.FpDiv = FpDiv;\n  exports.FpInvertBatch = FpInvertBatch;\n  exports.FpIsSquare = FpIsSquare;\n  exports.FpLegendre = FpLegendre;\n  exports.FpPow = FpPow;\n  exports.FpSqrt = FpSqrt;\n  exports.FpSqrtEven = FpSqrtEven;\n  exports.FpSqrtOdd = FpSqrtOdd;\n  exports.getFieldBytesLength = getFieldBytesLength;\n  exports.getMinHashLength = getMinHashLength;\n  exports.hashToPrivateScalar = hashToPrivateScalar;\n  exports.invert = invert;\n  exports.isNegativeLE = void 0;\n  exports.mapHashToField = mapHashToField;\n  exports.mod = mod;\n  exports.nLength = nLength;\n  exports.pow = pow;\n  exports.pow2 = pow2;\n  exports.tonelliShanks = tonelliShanks;\n  exports.validateField = validateField;\n  var _utils = require(_dependencyMap[0], \"../utils.js\");\n  /**\n   * Utils for modular division and fields.\n   * Field over 11 is a finite (Galois) field is integer number operations `mod 11`.\n   * There is no division: it is replaced by modular multiplicative inverse.\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n  // prettier-ignore\n  const _0n = BigInt(0),\n    _1n = BigInt(1),\n    _2n = /* @__PURE__ */BigInt(2),\n    _3n = /* @__PURE__ */BigInt(3);\n  // prettier-ignore\n  const _4n = /* @__PURE__ */BigInt(4),\n    _5n = /* @__PURE__ */BigInt(5),\n    _7n = /* @__PURE__ */BigInt(7);\n  // prettier-ignore\n  const _8n = /* @__PURE__ */BigInt(8),\n    _9n = /* @__PURE__ */BigInt(9),\n    _16n = /* @__PURE__ */BigInt(16);\n  // Calculates a modulo b\n  function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n  }\n  /**\n   * Efficiently raise num to power and do modular division.\n   * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n   * @example\n   * pow(2n, 6n, 11n) // 64n % 11n == 9n\n   */\n  function pow(num, power, modulo) {\n    return FpPow(Field(modulo), num, power);\n  }\n  /** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\n  function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n      res *= res;\n      res %= modulo;\n    }\n    return res;\n  }\n  /**\n   * Inverses number over modulo.\n   * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n   */\n  function invert(number, modulo) {\n    if (number === _0n) throw new Error('invert: expected non-zero number');\n    if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n,\n      y = _1n,\n      u = _1n,\n      v = _0n;\n    while (a !== _0n) {\n      // JIT applies optimization if those two lines follow each other\n      const q = b / a;\n      const r = b % a;\n      const m = x - u * q;\n      const n = y - v * q;\n      // prettier-ignore\n      b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n) throw new Error('invert: does not exist');\n    return mod(x, modulo);\n  }\n  function assertIsSquare(Fp, root, n) {\n    if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  }\n  // Not all roots are possible! Example which will throw:\n  // const NUM =\n  // n = 72057594037927816n;\n  // Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\n  function sqrt3mod4(Fp, n) {\n    const p1div4 = (Fp.ORDER + _1n) / _4n;\n    const root = Fp.pow(n, p1div4);\n    assertIsSquare(Fp, root, n);\n    return root;\n  }\n  function sqrt5mod8(Fp, n) {\n    const p5div8 = (Fp.ORDER - _5n) / _8n;\n    const n2 = Fp.mul(n, _2n);\n    const v = Fp.pow(n2, p5div8);\n    const nv = Fp.mul(n, v);\n    const i = Fp.mul(Fp.mul(nv, _2n), v);\n    const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n    assertIsSquare(Fp, root, n);\n    return root;\n  }\n  // Based on RFC9380, Kong algorithm\n  // prettier-ignore\n  function sqrt9mod16(P) {\n    const Fp_ = Field(P);\n    const tn = tonelliShanks(P);\n    const c1 = tn(Fp_, Fp_.neg(Fp_.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    const c2 = tn(Fp_, c1); //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    const c3 = tn(Fp_, Fp_.neg(c1)); //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    const c4 = (P + _7n) / _16n; //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    return (Fp, n) => {\n      let tv1 = Fp.pow(n, c4); //  1. tv1 = x^c4\n      let tv2 = Fp.mul(tv1, c1); //  2. tv2 = c1 * tv1\n      const tv3 = Fp.mul(tv1, c2); //  3. tv3 = c2 * tv1\n      const tv4 = Fp.mul(tv1, c3); //  4. tv4 = c3 * tv1\n      const e1 = Fp.eql(Fp.sqr(tv2), n); //  5.  e1 = (tv2^2) == x\n      const e2 = Fp.eql(Fp.sqr(tv3), n); //  6.  e2 = (tv3^2) == x\n      tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n      tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n      const e3 = Fp.eql(Fp.sqr(tv2), n); //  9.  e3 = (tv2^2) == x\n      const root = Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3)   # Select sqrt from tv1 & tv2\n      assertIsSquare(Fp, root, n);\n      return root;\n    };\n  }\n  /**\n   * Tonelli-Shanks square root search algorithm.\n   * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n   * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n   * @param P field order\n   * @returns function that takes field Fp (created from P) and number n\n   */\n  function tonelliShanks(P) {\n    // Initialization (precomputation).\n    // Caching initialization could boost perf by 7%.\n    if (P < _3n) throw new Error('sqrt is not defined for small field');\n    // Factor P - 1 = Q * 2^S, where Q is odd\n    let Q = P - _1n;\n    let S = 0;\n    while (Q % _2n === _0n) {\n      Q /= _2n;\n      S++;\n    }\n    // Find the first quadratic non-residue Z >= 2\n    let Z = _2n;\n    const _Fp = Field(P);\n    while (FpLegendre(_Fp, Z) === 1) {\n      // Basic primality test for P. After x iterations, chance of\n      // not finding quadratic non-residue is 2^x, so 2^1000.\n      if (Z++ > 1000) throw new Error('Cannot find square root: probably non-prime P');\n    }\n    // Fast-path; usually done before Z, but we do \"primality test\".\n    if (S === 1) return sqrt3mod4;\n    // Slow-path\n    // TODO: test on Fp2 and others\n    let cc = _Fp.pow(Z, Q); // c = z^Q\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n      if (Fp.is0(n)) return n;\n      // Check if n is a quadratic residue using Legendre symbol\n      if (FpLegendre(Fp, n) !== 1) throw new Error('Cannot find square root');\n      // Initialize variables for the main loop\n      let M = S;\n      let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n      let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n      let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n      // Main loop\n      // while t != 1\n      while (!Fp.eql(t, Fp.ONE)) {\n        if (Fp.is0(t)) return Fp.ZERO; // if t=0 return R=0\n        let i = 1;\n        // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n        let t_tmp = Fp.sqr(t); // t^(2^1)\n        while (!Fp.eql(t_tmp, Fp.ONE)) {\n          i++;\n          t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n          if (i === M) throw new Error('Cannot find square root');\n        }\n        // Calculate the exponent for b: 2^(M - i - 1)\n        const exponent = _1n << BigInt(M - i - 1); // bigint is important\n        const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n        // Update variables\n        M = i;\n        c = Fp.sqr(b); // c = b^2\n        t = Fp.mul(t, c); // t = (t * b^2)\n        R = Fp.mul(R, b); // R = R*b\n      }\n      return R;\n    };\n  }\n  /**\n   * Square root for a finite field. Will try optimized versions first:\n   *\n   * 1. P ≡ 3 (mod 4)\n   * 2. P ≡ 5 (mod 8)\n   * 3. P ≡ 9 (mod 16)\n   * 4. Tonelli-Shanks algorithm\n   *\n   * Different algorithms can give different roots, it is up to user to decide which one they want.\n   * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n   */\n  function FpSqrt(P) {\n    // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n    if (P % _4n === _3n) return sqrt3mod4;\n    // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n    if (P % _8n === _5n) return sqrt5mod8;\n    // P ≡ 9 (mod 16) => Kong algorithm, page 11 of https://eprint.iacr.org/2012/685.pdf (algorithm 4)\n    if (P % _16n === _9n) return sqrt9mod16(P);\n    // Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n  }\n  // Little-endian check for first LE bit (last BE bit);\n  const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n  // prettier-ignore\n  exports.isNegativeLE = isNegativeLE;\n  const FIELD_FIELDS = ['create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr', 'eql', 'add', 'sub', 'mul', 'pow', 'div', 'addN', 'subN', 'mulN', 'sqrN'];\n  function validateField(field) {\n    const initial = {\n      ORDER: 'bigint',\n      MASK: 'bigint',\n      BYTES: 'number',\n      BITS: 'number'\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n      map[val] = 'function';\n      return map;\n    }, initial);\n    (0, _utils._validateObject)(field, opts);\n    // const max = 16384;\n    // if (field.BYTES < 1 || field.BYTES > max) throw new Error('invalid field');\n    // if (field.BITS < 1 || field.BITS > 8 * max) throw new Error('invalid field');\n    return field;\n  }\n  // Generic field functions\n  /**\n   * Same as `pow` but for Fp: non-constant-time.\n   * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n   */\n  function FpPow(Fp, num, power) {\n    if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n    if (power === _0n) return Fp.ONE;\n    if (power === _1n) return num;\n    let p = Fp.ONE;\n    let d = num;\n    while (power > _0n) {\n      if (power & _1n) p = Fp.mul(p, d);\n      d = Fp.sqr(d);\n      power >>= _1n;\n    }\n    return p;\n  }\n  /**\n   * Efficiently invert an array of Field elements.\n   * Exception-free. Will return `undefined` for 0 elements.\n   * @param passZero map 0 to 0 (instead of undefined)\n   */\n  function FpInvertBatch(Fp, nums, passZero = false) {\n    const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n    // Walk from first to last, multiply them by each other MOD p\n    const multipliedAcc = nums.reduce((acc, num, i) => {\n      if (Fp.is0(num)) return acc;\n      inverted[i] = acc;\n      return Fp.mul(acc, num);\n    }, Fp.ONE);\n    // Invert last element\n    const invertedAcc = Fp.inv(multipliedAcc);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n      if (Fp.is0(num)) return acc;\n      inverted[i] = Fp.mul(acc, inverted[i]);\n      return Fp.mul(acc, num);\n    }, invertedAcc);\n    return inverted;\n  }\n  // TODO: remove\n  function FpDiv(Fp, lhs, rhs) {\n    return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n  }\n  /**\n   * Legendre symbol.\n   * Legendre constant is used to calculate Legendre symbol (a | p)\n   * which denotes the value of a^((p-1)/2) (mod p).\n   *\n   * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n   * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n   * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n   */\n  function FpLegendre(Fp, n) {\n    // We can use 3rd argument as optional cache of this value\n    // but seems unneeded for now. The operation is very fast.\n    const p1mod2 = (Fp.ORDER - _1n) / _2n;\n    const powered = Fp.pow(n, p1mod2);\n    const yes = Fp.eql(powered, Fp.ONE);\n    const zero = Fp.eql(powered, Fp.ZERO);\n    const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n    if (!yes && !zero && !no) throw new Error('invalid Legendre symbol result');\n    return yes ? 1 : zero ? 0 : -1;\n  }\n  // This function returns True whenever the value x is a square in the field F.\n  function FpIsSquare(Fp, n) {\n    const l = FpLegendre(Fp, n);\n    return l === 1;\n  }\n  // CURVE.n lengths\n  function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    if (nBitLength !== undefined) (0, _utils.anumber)(nBitLength);\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return {\n      nBitLength: _nBitLength,\n      nByteLength\n    };\n  }\n  /**\n   * Creates a finite field. Major performance optimizations:\n   * * 1. Denormalized operations like mulN instead of mul.\n   * * 2. Identical object shape: never add or remove keys.\n   * * 3. `Object.freeze`.\n   * Fragile: always run a benchmark on a change.\n   * Security note: operations don't check 'isValid' for all elements for performance reasons,\n   * it is caller responsibility to check this.\n   * This is low-level code, please make sure you know what you're doing.\n   *\n   * Note about field properties:\n   * * CHARACTERISTIC p = prime number, number of elements in main subgroup.\n   * * ORDER q = similar to cofactor in curves, may be composite `q = p^m`.\n   *\n   * @param ORDER field order, probably prime, or could be composite\n   * @param bitLen how many bits the field consumes\n   * @param isLE (default: false) if encoding / decoding should be in little-endian\n   * @param redef optional faster redefinitions of sqrt and other methods\n   */\n  function Field(ORDER, bitLenOrOpts,\n  // TODO: use opts only in v2?\n  isLE = false, opts = {}) {\n    if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n    let _nbitLength = undefined;\n    let _sqrt = undefined;\n    let modFromBytes = false;\n    let allowedLengths = undefined;\n    if (typeof bitLenOrOpts === 'object' && bitLenOrOpts != null) {\n      if (opts.sqrt || isLE) throw new Error('cannot specify opts in two arguments');\n      const _opts = bitLenOrOpts;\n      if (_opts.BITS) _nbitLength = _opts.BITS;\n      if (_opts.sqrt) _sqrt = _opts.sqrt;\n      if (typeof _opts.isLE === 'boolean') isLE = _opts.isLE;\n      if (typeof _opts.modFromBytes === 'boolean') modFromBytes = _opts.modFromBytes;\n      allowedLengths = _opts.allowedLengths;\n    } else {\n      if (typeof bitLenOrOpts === 'number') _nbitLength = bitLenOrOpts;\n      if (opts.sqrt) _sqrt = opts.sqrt;\n    }\n    const {\n      nBitLength: BITS,\n      nByteLength: BYTES\n    } = nLength(ORDER, _nbitLength);\n    if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n      ORDER,\n      isLE,\n      BITS,\n      BYTES,\n      MASK: (0, _utils.bitMask)(BITS),\n      ZERO: _0n,\n      ONE: _1n,\n      allowedLengths: allowedLengths,\n      create: num => mod(num, ORDER),\n      isValid: num => {\n        if (typeof num !== 'bigint') throw new Error('invalid field element: expected bigint, got ' + typeof num);\n        return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n      },\n      is0: num => num === _0n,\n      // is valid and invertible\n      isValidNot0: num => !f.is0(num) && f.isValid(num),\n      isOdd: num => (num & _1n) === _1n,\n      neg: num => mod(-num, ORDER),\n      eql: (lhs, rhs) => lhs === rhs,\n      sqr: num => mod(num * num, ORDER),\n      add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n      sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n      mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n      pow: (num, power) => FpPow(f, num, power),\n      div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n      // Same as above, but doesn't normalize\n      sqrN: num => num * num,\n      addN: (lhs, rhs) => lhs + rhs,\n      subN: (lhs, rhs) => lhs - rhs,\n      mulN: (lhs, rhs) => lhs * rhs,\n      inv: num => invert(num, ORDER),\n      sqrt: _sqrt || (n => {\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\n        return sqrtP(f, n);\n      }),\n      toBytes: num => isLE ? (0, _utils.numberToBytesLE)(num, BYTES) : (0, _utils.numberToBytesBE)(num, BYTES),\n      fromBytes: (bytes, skipValidation = true) => {\n        if (allowedLengths) {\n          if (!allowedLengths.includes(bytes.length) || bytes.length > BYTES) {\n            throw new Error('Field.fromBytes: expected ' + allowedLengths + ' bytes, got ' + bytes.length);\n          }\n          const padded = new Uint8Array(BYTES);\n          // isLE add 0 to right, !isLE to the left.\n          padded.set(bytes, isLE ? 0 : padded.length - bytes.length);\n          bytes = padded;\n        }\n        if (bytes.length !== BYTES) throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n        let scalar = isLE ? (0, _utils.bytesToNumberLE)(bytes) : (0, _utils.bytesToNumberBE)(bytes);\n        if (modFromBytes) scalar = mod(scalar, ORDER);\n        if (!skipValidation) if (!f.isValid(scalar)) throw new Error('invalid field element: outside of range 0..ORDER');\n        // NOTE: we don't validate scalar here, please use isValid. This done such way because some\n        // protocol may allow non-reduced scalar that reduced later or changed some other way.\n        return scalar;\n      },\n      // TODO: we don't need it here, move out to separate fn\n      invertBatch: lst => FpInvertBatch(f, lst),\n      // We can't move this out because Fp6, Fp12 implement it\n      // and it's unclear what to return in there.\n      cmov: (a, b, c) => c ? b : a\n    });\n    return Object.freeze(f);\n  }\n  // Generic random scalar, we can do same for other fields if via Fp2.mul(Fp2.ONE, Fp2.random)?\n  // This allows unsafe methods like ignore bias or zero. These unsafe, but often used in different protocols (if deterministic RNG).\n  // which mean we cannot force this via opts.\n  // Not sure what to do with randomBytes, we can accept it inside opts if wanted.\n  // Probably need to export getMinHashLength somewhere?\n  // random(bytes?: Uint8Array, unsafeAllowZero = false, unsafeAllowBias = false) {\n  //   const LEN = !unsafeAllowBias ? getMinHashLength(ORDER) : BYTES;\n  //   if (bytes === undefined) bytes = randomBytes(LEN); // _opts.randomBytes?\n  //   const num = isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n  //   // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  //   const reduced = unsafeAllowZero ? mod(num, ORDER) : mod(num, ORDER - _1n) + _1n;\n  //   return reduced;\n  // },\n  function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n  }\n  function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n  }\n  /**\n   * \"Constant-time\" private key generation utility.\n   * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n   * Which makes it slightly more biased, less secure.\n   * @deprecated use `mapKeyToField` instead\n   */\n  function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = (0, _utils.ensureBytes)('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n    const num = isLE ? (0, _utils.bytesToNumberLE)(hash) : (0, _utils.bytesToNumberBE)(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n  }\n  /**\n   * Returns total number of bytes consumed by the field element.\n   * For example, 32 bytes for usual 256-bit weierstrass curve.\n   * @param fieldOrder number of field elements, usually CURVE.n\n   * @returns byte length of field\n   */\n  function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n  }\n  /**\n   * Returns minimal amount of bytes that can be safely reduced\n   * by field order.\n   * Should be 2^-128 for 128-bit curve such as P256.\n   * @param fieldOrder number of field elements, usually CURVE.n\n   * @returns byte length of target hash\n   */\n  function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n  }\n  /**\n   * \"Constant-time\" private key generation utility.\n   * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n   * and convert them into private scalar, with the modulo bias being negligible.\n   * Needs at least 48 bytes of input for 32-byte private key.\n   * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n   * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n   * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n   * @param hash hash output from SHA3 or a similar function\n   * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n   * @param isLE interpret hash bytes as LE num\n   * @returns valid private scalar\n   */\n  function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024) throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n    const num = isLE ? (0, _utils.bytesToNumberLE)(key) : (0, _utils.bytesToNumberBE)(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? (0, _utils.numberToBytesLE)(reduced, fieldLen) : (0, _utils.numberToBytesBE)(reduced, fieldLen);\n  }\n});","lineCount":526,"map":[[26,2,8,0],[26,6,8,0,"_utils"],[26,12,8,0],[26,15,8,0,"require"],[26,22,8,0],[26,23,8,0,"_dependencyMap"],[26,37,8,0],[27,2,1,0],[28,0,2,0],[29,0,3,0],[30,0,4,0],[31,0,5,0],[32,0,6,0],[33,2,7,0],[35,2,9,0],[36,2,10,0],[36,8,10,6,"_0n"],[36,11,10,9],[36,14,10,12,"BigInt"],[36,20,10,18],[36,21,10,19],[36,22,10,20],[36,23,10,21],[37,4,10,23,"_1n"],[37,7,10,26],[37,10,10,29,"BigInt"],[37,16,10,35],[37,17,10,36],[37,18,10,37],[37,19,10,38],[38,4,10,40,"_2n"],[38,7,10,43],[38,10,10,46],[38,25,10,62,"BigInt"],[38,31,10,68],[38,32,10,69],[38,33,10,70],[38,34,10,71],[39,4,10,73,"_3n"],[39,7,10,76],[39,10,10,79],[39,25,10,95,"BigInt"],[39,31,10,101],[39,32,10,102],[39,33,10,103],[39,34,10,104],[40,2,11,0],[41,2,12,0],[41,8,12,6,"_4n"],[41,11,12,9],[41,14,12,12],[41,29,12,28,"BigInt"],[41,35,12,34],[41,36,12,35],[41,37,12,36],[41,38,12,37],[42,4,12,39,"_5n"],[42,7,12,42],[42,10,12,45],[42,25,12,61,"BigInt"],[42,31,12,67],[42,32,12,68],[42,33,12,69],[42,34,12,70],[43,4,12,72,"_7n"],[43,7,12,75],[43,10,12,78],[43,25,12,94,"BigInt"],[43,31,12,100],[43,32,12,101],[43,33,12,102],[43,34,12,103],[44,2,13,0],[45,2,14,0],[45,8,14,6,"_8n"],[45,11,14,9],[45,14,14,12],[45,29,14,28,"BigInt"],[45,35,14,34],[45,36,14,35],[45,37,14,36],[45,38,14,37],[46,4,14,39,"_9n"],[46,7,14,42],[46,10,14,45],[46,25,14,61,"BigInt"],[46,31,14,67],[46,32,14,68],[46,33,14,69],[46,34,14,70],[47,4,14,72,"_16n"],[47,8,14,76],[47,11,14,79],[47,26,14,95,"BigInt"],[47,32,14,101],[47,33,14,102],[47,35,14,104],[47,36,14,105],[48,2,15,0],[49,2,16,7],[49,11,16,16,"mod"],[49,14,16,19,"mod"],[49,15,16,20,"a"],[49,16,16,21],[49,18,16,23,"b"],[49,19,16,24],[49,21,16,26],[50,4,17,4],[50,10,17,10,"result"],[50,16,17,16],[50,19,17,19,"a"],[50,20,17,20],[50,23,17,23,"b"],[50,24,17,24],[51,4,18,4],[51,11,18,11,"result"],[51,17,18,17],[51,21,18,21,"_0n"],[51,24,18,24],[51,27,18,27,"result"],[51,33,18,33],[51,36,18,36,"b"],[51,37,18,37],[51,40,18,40,"result"],[51,46,18,46],[52,2,19,0],[53,2,20,0],[54,0,21,0],[55,0,22,0],[56,0,23,0],[57,0,24,0],[58,0,25,0],[59,2,26,7],[59,11,26,16,"pow"],[59,14,26,19,"pow"],[59,15,26,20,"num"],[59,18,26,23],[59,20,26,25,"power"],[59,25,26,30],[59,27,26,32,"modulo"],[59,33,26,38],[59,35,26,40],[60,4,27,4],[60,11,27,11,"FpPow"],[60,16,27,16],[60,17,27,17,"Field"],[60,22,27,22],[60,23,27,23,"modulo"],[60,29,27,29],[60,30,27,30],[60,32,27,32,"num"],[60,35,27,35],[60,37,27,37,"power"],[60,42,27,42],[60,43,27,43],[61,2,28,0],[62,2,29,0],[63,2,30,7],[63,11,30,16,"pow2"],[63,15,30,20,"pow2"],[63,16,30,21,"x"],[63,17,30,22],[63,19,30,24,"power"],[63,24,30,29],[63,26,30,31,"modulo"],[63,32,30,37],[63,34,30,39],[64,4,31,4],[64,8,31,8,"res"],[64,11,31,11],[64,14,31,14,"x"],[64,15,31,15],[65,4,32,4],[65,11,32,11,"power"],[65,16,32,16],[65,18,32,18],[65,21,32,21,"_0n"],[65,24,32,24],[65,26,32,26],[66,6,33,8,"res"],[66,9,33,11],[66,13,33,15,"res"],[66,16,33,18],[67,6,34,8,"res"],[67,9,34,11],[67,13,34,15,"modulo"],[67,19,34,21],[68,4,35,4],[69,4,36,4],[69,11,36,11,"res"],[69,14,36,14],[70,2,37,0],[71,2,38,0],[72,0,39,0],[73,0,40,0],[74,0,41,0],[75,2,42,7],[75,11,42,16,"invert"],[75,17,42,22,"invert"],[75,18,42,23,"number"],[75,24,42,29],[75,26,42,31,"modulo"],[75,32,42,37],[75,34,42,39],[76,4,43,4],[76,8,43,8,"number"],[76,14,43,14],[76,19,43,19,"_0n"],[76,22,43,22],[76,24,44,8],[76,30,44,14],[76,34,44,18,"Error"],[76,39,44,23],[76,40,44,24],[76,74,44,58],[76,75,44,59],[77,4,45,4],[77,8,45,8,"modulo"],[77,14,45,14],[77,18,45,18,"_0n"],[77,21,45,21],[77,23,46,8],[77,29,46,14],[77,33,46,18,"Error"],[77,38,46,23],[77,39,46,24],[77,80,46,65],[77,83,46,68,"modulo"],[77,89,46,74],[77,90,46,75],[78,4,47,4],[79,4,48,4],[79,8,48,8,"a"],[79,9,48,9],[79,12,48,12,"mod"],[79,15,48,15],[79,16,48,16,"number"],[79,22,48,22],[79,24,48,24,"modulo"],[79,30,48,30],[79,31,48,31],[80,4,49,4],[80,8,49,8,"b"],[80,9,49,9],[80,12,49,12,"modulo"],[80,18,49,18],[81,4,50,4],[82,4,51,4],[82,8,51,8,"x"],[82,9,51,9],[82,12,51,12,"_0n"],[82,15,51,15],[83,6,51,17,"y"],[83,7,51,18],[83,10,51,21,"_1n"],[83,13,51,24],[84,6,51,26,"u"],[84,7,51,27],[84,10,51,30,"_1n"],[84,13,51,33],[85,6,51,35,"v"],[85,7,51,36],[85,10,51,39,"_0n"],[85,13,51,42],[86,4,52,4],[86,11,52,11,"a"],[86,12,52,12],[86,17,52,17,"_0n"],[86,20,52,20],[86,22,52,22],[87,6,53,8],[88,6,54,8],[88,12,54,14,"q"],[88,13,54,15],[88,16,54,18,"b"],[88,17,54,19],[88,20,54,22,"a"],[88,21,54,23],[89,6,55,8],[89,12,55,14,"r"],[89,13,55,15],[89,16,55,18,"b"],[89,17,55,19],[89,20,55,22,"a"],[89,21,55,23],[90,6,56,8],[90,12,56,14,"m"],[90,13,56,15],[90,16,56,18,"x"],[90,17,56,19],[90,20,56,22,"u"],[90,21,56,23],[90,24,56,26,"q"],[90,25,56,27],[91,6,57,8],[91,12,57,14,"n"],[91,13,57,15],[91,16,57,18,"y"],[91,17,57,19],[91,20,57,22,"v"],[91,21,57,23],[91,24,57,26,"q"],[91,25,57,27],[92,6,58,8],[93,6,59,8,"b"],[93,7,59,9],[93,10,59,12,"a"],[93,11,59,13],[93,13,59,15,"a"],[93,14,59,16],[93,17,59,19,"r"],[93,18,59,20],[93,20,59,22,"x"],[93,21,59,23],[93,24,59,26,"u"],[93,25,59,27],[93,27,59,29,"y"],[93,28,59,30],[93,31,59,33,"v"],[93,32,59,34],[93,34,59,36,"u"],[93,35,59,37],[93,38,59,40,"m"],[93,39,59,41],[93,41,59,43,"v"],[93,42,59,44],[93,45,59,47,"n"],[93,46,59,48],[94,4,60,4],[95,4,61,4],[95,10,61,10,"gcd"],[95,13,61,13],[95,16,61,16,"b"],[95,17,61,17],[96,4,62,4],[96,8,62,8,"gcd"],[96,11,62,11],[96,16,62,16,"_1n"],[96,19,62,19],[96,21,63,8],[96,27,63,14],[96,31,63,18,"Error"],[96,36,63,23],[96,37,63,24],[96,61,63,48],[96,62,63,49],[97,4,64,4],[97,11,64,11,"mod"],[97,14,64,14],[97,15,64,15,"x"],[97,16,64,16],[97,18,64,18,"modulo"],[97,24,64,24],[97,25,64,25],[98,2,65,0],[99,2,66,0],[99,11,66,9,"assertIsSquare"],[99,25,66,23,"assertIsSquare"],[99,26,66,24,"Fp"],[99,28,66,26],[99,30,66,28,"root"],[99,34,66,32],[99,36,66,34,"n"],[99,37,66,35],[99,39,66,37],[100,4,67,4],[100,8,67,8],[100,9,67,9,"Fp"],[100,11,67,11],[100,12,67,12,"eql"],[100,15,67,15],[100,16,67,16,"Fp"],[100,18,67,18],[100,19,67,19,"sqr"],[100,22,67,22],[100,23,67,23,"root"],[100,27,67,27],[100,28,67,28],[100,30,67,30,"n"],[100,31,67,31],[100,32,67,32],[100,34,68,8],[100,40,68,14],[100,44,68,18,"Error"],[100,49,68,23],[100,50,68,24],[100,75,68,49],[100,76,68,50],[101,2,69,0],[102,2,70,0],[103,2,71,0],[104,2,72,0],[105,2,73,0],[106,2,74,0],[106,11,74,9,"sqrt3mod4"],[106,20,74,18,"sqrt3mod4"],[106,21,74,19,"Fp"],[106,23,74,21],[106,25,74,23,"n"],[106,26,74,24],[106,28,74,26],[107,4,75,4],[107,10,75,10,"p1div4"],[107,16,75,16],[107,19,75,19],[107,20,75,20,"Fp"],[107,22,75,22],[107,23,75,23,"ORDER"],[107,28,75,28],[107,31,75,31,"_1n"],[107,34,75,34],[107,38,75,38,"_4n"],[107,41,75,41],[108,4,76,4],[108,10,76,10,"root"],[108,14,76,14],[108,17,76,17,"Fp"],[108,19,76,19],[108,20,76,20,"pow"],[108,23,76,23],[108,24,76,24,"n"],[108,25,76,25],[108,27,76,27,"p1div4"],[108,33,76,33],[108,34,76,34],[109,4,77,4,"assertIsSquare"],[109,18,77,18],[109,19,77,19,"Fp"],[109,21,77,21],[109,23,77,23,"root"],[109,27,77,27],[109,29,77,29,"n"],[109,30,77,30],[109,31,77,31],[110,4,78,4],[110,11,78,11,"root"],[110,15,78,15],[111,2,79,0],[112,2,80,0],[112,11,80,9,"sqrt5mod8"],[112,20,80,18,"sqrt5mod8"],[112,21,80,19,"Fp"],[112,23,80,21],[112,25,80,23,"n"],[112,26,80,24],[112,28,80,26],[113,4,81,4],[113,10,81,10,"p5div8"],[113,16,81,16],[113,19,81,19],[113,20,81,20,"Fp"],[113,22,81,22],[113,23,81,23,"ORDER"],[113,28,81,28],[113,31,81,31,"_5n"],[113,34,81,34],[113,38,81,38,"_8n"],[113,41,81,41],[114,4,82,4],[114,10,82,10,"n2"],[114,12,82,12],[114,15,82,15,"Fp"],[114,17,82,17],[114,18,82,18,"mul"],[114,21,82,21],[114,22,82,22,"n"],[114,23,82,23],[114,25,82,25,"_2n"],[114,28,82,28],[114,29,82,29],[115,4,83,4],[115,10,83,10,"v"],[115,11,83,11],[115,14,83,14,"Fp"],[115,16,83,16],[115,17,83,17,"pow"],[115,20,83,20],[115,21,83,21,"n2"],[115,23,83,23],[115,25,83,25,"p5div8"],[115,31,83,31],[115,32,83,32],[116,4,84,4],[116,10,84,10,"nv"],[116,12,84,12],[116,15,84,15,"Fp"],[116,17,84,17],[116,18,84,18,"mul"],[116,21,84,21],[116,22,84,22,"n"],[116,23,84,23],[116,25,84,25,"v"],[116,26,84,26],[116,27,84,27],[117,4,85,4],[117,10,85,10,"i"],[117,11,85,11],[117,14,85,14,"Fp"],[117,16,85,16],[117,17,85,17,"mul"],[117,20,85,20],[117,21,85,21,"Fp"],[117,23,85,23],[117,24,85,24,"mul"],[117,27,85,27],[117,28,85,28,"nv"],[117,30,85,30],[117,32,85,32,"_2n"],[117,35,85,35],[117,36,85,36],[117,38,85,38,"v"],[117,39,85,39],[117,40,85,40],[118,4,86,4],[118,10,86,10,"root"],[118,14,86,14],[118,17,86,17,"Fp"],[118,19,86,19],[118,20,86,20,"mul"],[118,23,86,23],[118,24,86,24,"nv"],[118,26,86,26],[118,28,86,28,"Fp"],[118,30,86,30],[118,31,86,31,"sub"],[118,34,86,34],[118,35,86,35,"i"],[118,36,86,36],[118,38,86,38,"Fp"],[118,40,86,40],[118,41,86,41,"ONE"],[118,44,86,44],[118,45,86,45],[118,46,86,46],[119,4,87,4,"assertIsSquare"],[119,18,87,18],[119,19,87,19,"Fp"],[119,21,87,21],[119,23,87,23,"root"],[119,27,87,27],[119,29,87,29,"n"],[119,30,87,30],[119,31,87,31],[120,4,88,4],[120,11,88,11,"root"],[120,15,88,15],[121,2,89,0],[122,2,90,0],[123,2,91,0],[124,2,92,0],[124,11,92,9,"sqrt9mod16"],[124,21,92,19,"sqrt9mod16"],[124,22,92,20,"P"],[124,23,92,21],[124,25,92,23],[125,4,93,4],[125,10,93,10,"Fp_"],[125,13,93,13],[125,16,93,16,"Field"],[125,21,93,21],[125,22,93,22,"P"],[125,23,93,23],[125,24,93,24],[126,4,94,4],[126,10,94,10,"tn"],[126,12,94,12],[126,15,94,15,"tonelliShanks"],[126,28,94,28],[126,29,94,29,"P"],[126,30,94,30],[126,31,94,31],[127,4,95,4],[127,10,95,10,"c1"],[127,12,95,12],[127,15,95,15,"tn"],[127,17,95,17],[127,18,95,18,"Fp_"],[127,21,95,21],[127,23,95,23,"Fp_"],[127,26,95,26],[127,27,95,27,"neg"],[127,30,95,30],[127,31,95,31,"Fp_"],[127,34,95,34],[127,35,95,35,"ONE"],[127,38,95,38],[127,39,95,39],[127,40,95,40],[127,41,95,41],[127,42,95,42],[128,4,96,4],[128,10,96,10,"c2"],[128,12,96,12],[128,15,96,15,"tn"],[128,17,96,17],[128,18,96,18,"Fp_"],[128,21,96,21],[128,23,96,23,"c1"],[128,25,96,25],[128,26,96,26],[128,27,96,27],[128,28,96,28],[129,4,97,4],[129,10,97,10,"c3"],[129,12,97,12],[129,15,97,15,"tn"],[129,17,97,17],[129,18,97,18,"Fp_"],[129,21,97,21],[129,23,97,23,"Fp_"],[129,26,97,26],[129,27,97,27,"neg"],[129,30,97,30],[129,31,97,31,"c1"],[129,33,97,33],[129,34,97,34],[129,35,97,35],[129,36,97,36],[129,37,97,37],[130,4,98,4],[130,10,98,10,"c4"],[130,12,98,12],[130,15,98,15],[130,16,98,16,"P"],[130,17,98,17],[130,20,98,20,"_7n"],[130,23,98,23],[130,27,98,27,"_16n"],[130,31,98,31],[130,32,98,32],[130,33,98,33],[131,4,99,4],[131,11,99,11],[131,12,99,12,"Fp"],[131,14,99,14],[131,16,99,16,"n"],[131,17,99,17],[131,22,99,22],[132,6,100,8],[132,10,100,12,"tv1"],[132,13,100,15],[132,16,100,18,"Fp"],[132,18,100,20],[132,19,100,21,"pow"],[132,22,100,24],[132,23,100,25,"n"],[132,24,100,26],[132,26,100,28,"c4"],[132,28,100,30],[132,29,100,31],[132,30,100,32],[132,31,100,33],[133,6,101,8],[133,10,101,12,"tv2"],[133,13,101,15],[133,16,101,18,"Fp"],[133,18,101,20],[133,19,101,21,"mul"],[133,22,101,24],[133,23,101,25,"tv1"],[133,26,101,28],[133,28,101,30,"c1"],[133,30,101,32],[133,31,101,33],[133,32,101,34],[133,33,101,35],[134,6,102,8],[134,12,102,14,"tv3"],[134,15,102,17],[134,18,102,20,"Fp"],[134,20,102,22],[134,21,102,23,"mul"],[134,24,102,26],[134,25,102,27,"tv1"],[134,28,102,30],[134,30,102,32,"c2"],[134,32,102,34],[134,33,102,35],[134,34,102,36],[134,35,102,37],[135,6,103,8],[135,12,103,14,"tv4"],[135,15,103,17],[135,18,103,20,"Fp"],[135,20,103,22],[135,21,103,23,"mul"],[135,24,103,26],[135,25,103,27,"tv1"],[135,28,103,30],[135,30,103,32,"c3"],[135,32,103,34],[135,33,103,35],[135,34,103,36],[135,35,103,37],[136,6,104,8],[136,12,104,14,"e1"],[136,14,104,16],[136,17,104,19,"Fp"],[136,19,104,21],[136,20,104,22,"eql"],[136,23,104,25],[136,24,104,26,"Fp"],[136,26,104,28],[136,27,104,29,"sqr"],[136,30,104,32],[136,31,104,33,"tv2"],[136,34,104,36],[136,35,104,37],[136,37,104,39,"n"],[136,38,104,40],[136,39,104,41],[136,40,104,42],[136,41,104,43],[137,6,105,8],[137,12,105,14,"e2"],[137,14,105,16],[137,17,105,19,"Fp"],[137,19,105,21],[137,20,105,22,"eql"],[137,23,105,25],[137,24,105,26,"Fp"],[137,26,105,28],[137,27,105,29,"sqr"],[137,30,105,32],[137,31,105,33,"tv3"],[137,34,105,36],[137,35,105,37],[137,37,105,39,"n"],[137,38,105,40],[137,39,105,41],[137,40,105,42],[137,41,105,43],[138,6,106,8,"tv1"],[138,9,106,11],[138,12,106,14,"Fp"],[138,14,106,16],[138,15,106,17,"cmov"],[138,19,106,21],[138,20,106,22,"tv1"],[138,23,106,25],[138,25,106,27,"tv2"],[138,28,106,30],[138,30,106,32,"e1"],[138,32,106,34],[138,33,106,35],[138,34,106,36],[138,35,106,37],[139,6,107,8,"tv2"],[139,9,107,11],[139,12,107,14,"Fp"],[139,14,107,16],[139,15,107,17,"cmov"],[139,19,107,21],[139,20,107,22,"tv4"],[139,23,107,25],[139,25,107,27,"tv3"],[139,28,107,30],[139,30,107,32,"e2"],[139,32,107,34],[139,33,107,35],[139,34,107,36],[139,35,107,37],[140,6,108,8],[140,12,108,14,"e3"],[140,14,108,16],[140,17,108,19,"Fp"],[140,19,108,21],[140,20,108,22,"eql"],[140,23,108,25],[140,24,108,26,"Fp"],[140,26,108,28],[140,27,108,29,"sqr"],[140,30,108,32],[140,31,108,33,"tv2"],[140,34,108,36],[140,35,108,37],[140,37,108,39,"n"],[140,38,108,40],[140,39,108,41],[140,40,108,42],[140,41,108,43],[141,6,109,8],[141,12,109,14,"root"],[141,16,109,18],[141,19,109,21,"Fp"],[141,21,109,23],[141,22,109,24,"cmov"],[141,26,109,28],[141,27,109,29,"tv1"],[141,30,109,32],[141,32,109,34,"tv2"],[141,35,109,37],[141,37,109,39,"e3"],[141,39,109,41],[141,40,109,42],[141,41,109,43],[141,42,109,44],[142,6,110,8,"assertIsSquare"],[142,20,110,22],[142,21,110,23,"Fp"],[142,23,110,25],[142,25,110,27,"root"],[142,29,110,31],[142,31,110,33,"n"],[142,32,110,34],[142,33,110,35],[143,6,111,8],[143,13,111,15,"root"],[143,17,111,19],[144,4,112,4],[144,5,112,5],[145,2,113,0],[146,2,114,0],[147,0,115,0],[148,0,116,0],[149,0,117,0],[150,0,118,0],[151,0,119,0],[152,0,120,0],[153,2,121,7],[153,11,121,16,"tonelliShanks"],[153,24,121,29,"tonelliShanks"],[153,25,121,30,"P"],[153,26,121,31],[153,28,121,33],[154,4,122,4],[155,4,123,4],[156,4,124,4],[156,8,124,8,"P"],[156,9,124,9],[156,12,124,12,"_3n"],[156,15,124,15],[156,17,125,8],[156,23,125,14],[156,27,125,18,"Error"],[156,32,125,23],[156,33,125,24],[156,70,125,61],[156,71,125,62],[157,4,126,4],[158,4,127,4],[158,8,127,8,"Q"],[158,9,127,9],[158,12,127,12,"P"],[158,13,127,13],[158,16,127,16,"_1n"],[158,19,127,19],[159,4,128,4],[159,8,128,8,"S"],[159,9,128,9],[159,12,128,12],[159,13,128,13],[160,4,129,4],[160,11,129,11,"Q"],[160,12,129,12],[160,15,129,15,"_2n"],[160,18,129,18],[160,23,129,23,"_0n"],[160,26,129,26],[160,28,129,28],[161,6,130,8,"Q"],[161,7,130,9],[161,11,130,13,"_2n"],[161,14,130,16],[162,6,131,8,"S"],[162,7,131,9],[162,9,131,11],[163,4,132,4],[164,4,133,4],[165,4,134,4],[165,8,134,8,"Z"],[165,9,134,9],[165,12,134,12,"_2n"],[165,15,134,15],[166,4,135,4],[166,10,135,10,"_Fp"],[166,13,135,13],[166,16,135,16,"Field"],[166,21,135,21],[166,22,135,22,"P"],[166,23,135,23],[166,24,135,24],[167,4,136,4],[167,11,136,11,"FpLegendre"],[167,21,136,21],[167,22,136,22,"_Fp"],[167,25,136,25],[167,27,136,27,"Z"],[167,28,136,28],[167,29,136,29],[167,34,136,34],[167,35,136,35],[167,37,136,37],[168,6,137,8],[169,6,138,8],[170,6,139,8],[170,10,139,12,"Z"],[170,11,139,13],[170,13,139,15],[170,16,139,18],[170,20,139,22],[170,22,140,12],[170,28,140,18],[170,32,140,22,"Error"],[170,37,140,27],[170,38,140,28],[170,85,140,75],[170,86,140,76],[171,4,141,4],[172,4,142,4],[173,4,143,4],[173,8,143,8,"S"],[173,9,143,9],[173,14,143,14],[173,15,143,15],[173,17,144,8],[173,24,144,15,"sqrt3mod4"],[173,33,144,24],[174,4,145,4],[175,4,146,4],[176,4,147,4],[176,8,147,8,"cc"],[176,10,147,10],[176,13,147,13,"_Fp"],[176,16,147,16],[176,17,147,17,"pow"],[176,20,147,20],[176,21,147,21,"Z"],[176,22,147,22],[176,24,147,24,"Q"],[176,25,147,25],[176,26,147,26],[176,27,147,27],[176,28,147,28],[177,4,148,4],[177,10,148,10,"Q1div2"],[177,16,148,16],[177,19,148,19],[177,20,148,20,"Q"],[177,21,148,21],[177,24,148,24,"_1n"],[177,27,148,27],[177,31,148,31,"_2n"],[177,34,148,34],[178,4,149,4],[178,11,149,11],[178,20,149,20,"tonelliSlow"],[178,31,149,31,"tonelliSlow"],[178,32,149,32,"Fp"],[178,34,149,34],[178,36,149,36,"n"],[178,37,149,37],[178,39,149,39],[179,6,150,8],[179,10,150,12,"Fp"],[179,12,150,14],[179,13,150,15,"is0"],[179,16,150,18],[179,17,150,19,"n"],[179,18,150,20],[179,19,150,21],[179,21,151,12],[179,28,151,19,"n"],[179,29,151,20],[180,6,152,8],[181,6,153,8],[181,10,153,12,"FpLegendre"],[181,20,153,22],[181,21,153,23,"Fp"],[181,23,153,25],[181,25,153,27,"n"],[181,26,153,28],[181,27,153,29],[181,32,153,34],[181,33,153,35],[181,35,154,12],[181,41,154,18],[181,45,154,22,"Error"],[181,50,154,27],[181,51,154,28],[181,76,154,53],[181,77,154,54],[182,6,155,8],[183,6,156,8],[183,10,156,12,"M"],[183,11,156,13],[183,14,156,16,"S"],[183,15,156,17],[184,6,157,8],[184,10,157,12,"c"],[184,11,157,13],[184,14,157,16,"Fp"],[184,16,157,18],[184,17,157,19,"mul"],[184,20,157,22],[184,21,157,23,"Fp"],[184,23,157,25],[184,24,157,26,"ONE"],[184,27,157,29],[184,29,157,31,"cc"],[184,31,157,33],[184,32,157,34],[184,33,157,35],[184,34,157,36],[185,6,158,8],[185,10,158,12,"t"],[185,11,158,13],[185,14,158,16,"Fp"],[185,16,158,18],[185,17,158,19,"pow"],[185,20,158,22],[185,21,158,23,"n"],[185,22,158,24],[185,24,158,26,"Q"],[185,25,158,27],[185,26,158,28],[185,27,158,29],[185,28,158,30],[186,6,159,8],[186,10,159,12,"R"],[186,11,159,13],[186,14,159,16,"Fp"],[186,16,159,18],[186,17,159,19,"pow"],[186,20,159,22],[186,21,159,23,"n"],[186,22,159,24],[186,24,159,26,"Q1div2"],[186,30,159,32],[186,31,159,33],[186,32,159,34],[186,33,159,35],[187,6,160,8],[188,6,161,8],[189,6,162,8],[189,13,162,15],[189,14,162,16,"Fp"],[189,16,162,18],[189,17,162,19,"eql"],[189,20,162,22],[189,21,162,23,"t"],[189,22,162,24],[189,24,162,26,"Fp"],[189,26,162,28],[189,27,162,29,"ONE"],[189,30,162,32],[189,31,162,33],[189,33,162,35],[190,8,163,12],[190,12,163,16,"Fp"],[190,14,163,18],[190,15,163,19,"is0"],[190,18,163,22],[190,19,163,23,"t"],[190,20,163,24],[190,21,163,25],[190,23,164,16],[190,30,164,23,"Fp"],[190,32,164,25],[190,33,164,26,"ZERO"],[190,37,164,30],[190,38,164,31],[190,39,164,32],[191,8,165,12],[191,12,165,16,"i"],[191,13,165,17],[191,16,165,20],[191,17,165,21],[192,8,166,12],[193,8,167,12],[193,12,167,16,"t_tmp"],[193,17,167,21],[193,20,167,24,"Fp"],[193,22,167,26],[193,23,167,27,"sqr"],[193,26,167,30],[193,27,167,31,"t"],[193,28,167,32],[193,29,167,33],[193,30,167,34],[193,31,167,35],[194,8,168,12],[194,15,168,19],[194,16,168,20,"Fp"],[194,18,168,22],[194,19,168,23,"eql"],[194,22,168,26],[194,23,168,27,"t_tmp"],[194,28,168,32],[194,30,168,34,"Fp"],[194,32,168,36],[194,33,168,37,"ONE"],[194,36,168,40],[194,37,168,41],[194,39,168,43],[195,10,169,16,"i"],[195,11,169,17],[195,13,169,19],[196,10,170,16,"t_tmp"],[196,15,170,21],[196,18,170,24,"Fp"],[196,20,170,26],[196,21,170,27,"sqr"],[196,24,170,30],[196,25,170,31,"t_tmp"],[196,30,170,36],[196,31,170,37],[196,32,170,38],[196,33,170,39],[197,10,171,16],[197,14,171,20,"i"],[197,15,171,21],[197,20,171,26,"M"],[197,21,171,27],[197,23,172,20],[197,29,172,26],[197,33,172,30,"Error"],[197,38,172,35],[197,39,172,36],[197,64,172,61],[197,65,172,62],[198,8,173,12],[199,8,174,12],[200,8,175,12],[200,14,175,18,"exponent"],[200,22,175,26],[200,25,175,29,"_1n"],[200,28,175,32],[200,32,175,36,"BigInt"],[200,38,175,42],[200,39,175,43,"M"],[200,40,175,44],[200,43,175,47,"i"],[200,44,175,48],[200,47,175,51],[200,48,175,52],[200,49,175,53],[200,50,175,54],[200,51,175,55],[201,8,176,12],[201,14,176,18,"b"],[201,15,176,19],[201,18,176,22,"Fp"],[201,20,176,24],[201,21,176,25,"pow"],[201,24,176,28],[201,25,176,29,"c"],[201,26,176,30],[201,28,176,32,"exponent"],[201,36,176,40],[201,37,176,41],[201,38,176,42],[201,39,176,43],[202,8,177,12],[203,8,178,12,"M"],[203,9,178,13],[203,12,178,16,"i"],[203,13,178,17],[204,8,179,12,"c"],[204,9,179,13],[204,12,179,16,"Fp"],[204,14,179,18],[204,15,179,19,"sqr"],[204,18,179,22],[204,19,179,23,"b"],[204,20,179,24],[204,21,179,25],[204,22,179,26],[204,23,179,27],[205,8,180,12,"t"],[205,9,180,13],[205,12,180,16,"Fp"],[205,14,180,18],[205,15,180,19,"mul"],[205,18,180,22],[205,19,180,23,"t"],[205,20,180,24],[205,22,180,26,"c"],[205,23,180,27],[205,24,180,28],[205,25,180,29],[205,26,180,30],[206,8,181,12,"R"],[206,9,181,13],[206,12,181,16,"Fp"],[206,14,181,18],[206,15,181,19,"mul"],[206,18,181,22],[206,19,181,23,"R"],[206,20,181,24],[206,22,181,26,"b"],[206,23,181,27],[206,24,181,28],[206,25,181,29],[206,26,181,30],[207,6,182,8],[208,6,183,8],[208,13,183,15,"R"],[208,14,183,16],[209,4,184,4],[209,5,184,5],[210,2,185,0],[211,2,186,0],[212,0,187,0],[213,0,188,0],[214,0,189,0],[215,0,190,0],[216,0,191,0],[217,0,192,0],[218,0,193,0],[219,0,194,0],[220,0,195,0],[221,0,196,0],[222,2,197,7],[222,11,197,16,"FpSqrt"],[222,17,197,22,"FpSqrt"],[222,18,197,23,"P"],[222,19,197,24],[222,21,197,26],[223,4,198,4],[224,4,199,4],[224,8,199,8,"P"],[224,9,199,9],[224,12,199,12,"_4n"],[224,15,199,15],[224,20,199,20,"_3n"],[224,23,199,23],[224,25,200,8],[224,32,200,15,"sqrt3mod4"],[224,41,200,24],[225,4,201,4],[226,4,202,4],[226,8,202,8,"P"],[226,9,202,9],[226,12,202,12,"_8n"],[226,15,202,15],[226,20,202,20,"_5n"],[226,23,202,23],[226,25,203,8],[226,32,203,15,"sqrt5mod8"],[226,41,203,24],[227,4,204,4],[228,4,205,4],[228,8,205,8,"P"],[228,9,205,9],[228,12,205,12,"_16n"],[228,16,205,16],[228,21,205,21,"_9n"],[228,24,205,24],[228,26,206,8],[228,33,206,15,"sqrt9mod16"],[228,43,206,25],[228,44,206,26,"P"],[228,45,206,27],[228,46,206,28],[229,4,207,4],[230,4,208,4],[230,11,208,11,"tonelliShanks"],[230,24,208,24],[230,25,208,25,"P"],[230,26,208,26],[230,27,208,27],[231,2,209,0],[232,2,210,0],[233,2,211,7],[233,8,211,13,"isNegativeLE"],[233,20,211,25],[233,23,211,28,"isNegativeLE"],[233,24,211,29,"num"],[233,27,211,32],[233,29,211,34,"modulo"],[233,35,211,40],[233,40,211,45],[233,41,211,46,"mod"],[233,44,211,49],[233,45,211,50,"num"],[233,48,211,53],[233,50,211,55,"modulo"],[233,56,211,61],[233,57,211,62],[233,60,211,65,"_1n"],[233,63,211,68],[233,69,211,74,"_1n"],[233,72,211,77],[234,2,212,0],[235,2,212,0,"exports"],[235,9,212,0],[235,10,212,0,"isNegativeLE"],[235,22,212,0],[235,25,212,0,"isNegativeLE"],[235,37,212,0],[236,2,213,0],[236,8,213,6,"FIELD_FIELDS"],[236,20,213,18],[236,23,213,21],[236,24,214,4],[236,32,214,12],[236,34,214,14],[236,43,214,23],[236,45,214,25],[236,50,214,30],[236,52,214,32],[236,57,214,37],[236,59,214,39],[236,64,214,44],[236,66,214,46],[236,72,214,52],[236,74,214,54],[236,79,214,59],[236,81,215,4],[236,86,215,9],[236,88,215,11],[236,93,215,16],[236,95,215,18],[236,100,215,23],[236,102,215,25],[236,107,215,30],[236,109,215,32],[236,114,215,37],[236,116,215,39],[236,121,215,44],[236,123,216,4],[236,129,216,10],[236,131,216,12],[236,137,216,18],[236,139,216,20],[236,145,216,26],[236,147,216,28],[236,153,216,34],[236,154,217,1],[237,2,218,7],[237,11,218,16,"validateField"],[237,24,218,29,"validateField"],[237,25,218,30,"field"],[237,30,218,35],[237,32,218,37],[238,4,219,4],[238,10,219,10,"initial"],[238,17,219,17],[238,20,219,20],[239,6,220,8,"ORDER"],[239,11,220,13],[239,13,220,15],[239,21,220,23],[240,6,221,8,"MASK"],[240,10,221,12],[240,12,221,14],[240,20,221,22],[241,6,222,8,"BYTES"],[241,11,222,13],[241,13,222,15],[241,21,222,23],[242,6,223,8,"BITS"],[242,10,223,12],[242,12,223,14],[243,4,224,4],[243,5,224,5],[244,4,225,4],[244,10,225,10,"opts"],[244,14,225,14],[244,17,225,17,"FIELD_FIELDS"],[244,29,225,29],[244,30,225,30,"reduce"],[244,36,225,36],[244,37,225,37],[244,38,225,38,"map"],[244,41,225,41],[244,43,225,43,"val"],[244,46,225,46],[244,51,225,51],[245,6,226,8,"map"],[245,9,226,11],[245,10,226,12,"val"],[245,13,226,15],[245,14,226,16],[245,17,226,19],[245,27,226,29],[246,6,227,8],[246,13,227,15,"map"],[246,16,227,18],[247,4,228,4],[247,5,228,5],[247,7,228,7,"initial"],[247,14,228,14],[247,15,228,15],[248,4,229,4],[248,8,229,4,"_validateObject"],[248,30,229,19],[248,32,229,20,"field"],[248,37,229,25],[248,39,229,27,"opts"],[248,43,229,31],[248,44,229,32],[249,4,230,4],[250,4,231,4],[251,4,232,4],[252,4,233,4],[252,11,233,11,"field"],[252,16,233,16],[253,2,234,0],[254,2,235,0],[255,2,236,0],[256,0,237,0],[257,0,238,0],[258,0,239,0],[259,2,240,7],[259,11,240,16,"FpPow"],[259,16,240,21,"FpPow"],[259,17,240,22,"Fp"],[259,19,240,24],[259,21,240,26,"num"],[259,24,240,29],[259,26,240,31,"power"],[259,31,240,36],[259,33,240,38],[260,4,241,4],[260,8,241,8,"power"],[260,13,241,13],[260,16,241,16,"_0n"],[260,19,241,19],[260,21,242,8],[260,27,242,14],[260,31,242,18,"Error"],[260,36,242,23],[260,37,242,24],[260,78,242,65],[260,79,242,66],[261,4,243,4],[261,8,243,8,"power"],[261,13,243,13],[261,18,243,18,"_0n"],[261,21,243,21],[261,23,244,8],[261,30,244,15,"Fp"],[261,32,244,17],[261,33,244,18,"ONE"],[261,36,244,21],[262,4,245,4],[262,8,245,8,"power"],[262,13,245,13],[262,18,245,18,"_1n"],[262,21,245,21],[262,23,246,8],[262,30,246,15,"num"],[262,33,246,18],[263,4,247,4],[263,8,247,8,"p"],[263,9,247,9],[263,12,247,12,"Fp"],[263,14,247,14],[263,15,247,15,"ONE"],[263,18,247,18],[264,4,248,4],[264,8,248,8,"d"],[264,9,248,9],[264,12,248,12,"num"],[264,15,248,15],[265,4,249,4],[265,11,249,11,"power"],[265,16,249,16],[265,19,249,19,"_0n"],[265,22,249,22],[265,24,249,24],[266,6,250,8],[266,10,250,12,"power"],[266,15,250,17],[266,18,250,20,"_1n"],[266,21,250,23],[266,23,251,12,"p"],[266,24,251,13],[266,27,251,16,"Fp"],[266,29,251,18],[266,30,251,19,"mul"],[266,33,251,22],[266,34,251,23,"p"],[266,35,251,24],[266,37,251,26,"d"],[266,38,251,27],[266,39,251,28],[267,6,252,8,"d"],[267,7,252,9],[267,10,252,12,"Fp"],[267,12,252,14],[267,13,252,15,"sqr"],[267,16,252,18],[267,17,252,19,"d"],[267,18,252,20],[267,19,252,21],[268,6,253,8,"power"],[268,11,253,13],[268,16,253,18,"_1n"],[268,19,253,21],[269,4,254,4],[270,4,255,4],[270,11,255,11,"p"],[270,12,255,12],[271,2,256,0],[272,2,257,0],[273,0,258,0],[274,0,259,0],[275,0,260,0],[276,0,261,0],[277,2,262,7],[277,11,262,16,"FpInvertBatch"],[277,24,262,29,"FpInvertBatch"],[277,25,262,30,"Fp"],[277,27,262,32],[277,29,262,34,"nums"],[277,33,262,38],[277,35,262,40,"passZero"],[277,43,262,48],[277,46,262,51],[277,51,262,56],[277,53,262,58],[278,4,263,4],[278,10,263,10,"inverted"],[278,18,263,18],[278,21,263,21],[278,25,263,25,"Array"],[278,30,263,30],[278,31,263,31,"nums"],[278,35,263,35],[278,36,263,36,"length"],[278,42,263,42],[278,43,263,43],[278,44,263,44,"fill"],[278,48,263,48],[278,49,263,49,"passZero"],[278,57,263,57],[278,60,263,60,"Fp"],[278,62,263,62],[278,63,263,63,"ZERO"],[278,67,263,67],[278,70,263,70,"undefined"],[278,79,263,79],[278,80,263,80],[279,4,264,4],[280,4,265,4],[280,10,265,10,"multipliedAcc"],[280,23,265,23],[280,26,265,26,"nums"],[280,30,265,30],[280,31,265,31,"reduce"],[280,37,265,37],[280,38,265,38],[280,39,265,39,"acc"],[280,42,265,42],[280,44,265,44,"num"],[280,47,265,47],[280,49,265,49,"i"],[280,50,265,50],[280,55,265,55],[281,6,266,8],[281,10,266,12,"Fp"],[281,12,266,14],[281,13,266,15,"is0"],[281,16,266,18],[281,17,266,19,"num"],[281,20,266,22],[281,21,266,23],[281,23,267,12],[281,30,267,19,"acc"],[281,33,267,22],[282,6,268,8,"inverted"],[282,14,268,16],[282,15,268,17,"i"],[282,16,268,18],[282,17,268,19],[282,20,268,22,"acc"],[282,23,268,25],[283,6,269,8],[283,13,269,15,"Fp"],[283,15,269,17],[283,16,269,18,"mul"],[283,19,269,21],[283,20,269,22,"acc"],[283,23,269,25],[283,25,269,27,"num"],[283,28,269,30],[283,29,269,31],[284,4,270,4],[284,5,270,5],[284,7,270,7,"Fp"],[284,9,270,9],[284,10,270,10,"ONE"],[284,13,270,13],[284,14,270,14],[285,4,271,4],[286,4,272,4],[286,10,272,10,"invertedAcc"],[286,21,272,21],[286,24,272,24,"Fp"],[286,26,272,26],[286,27,272,27,"inv"],[286,30,272,30],[286,31,272,31,"multipliedAcc"],[286,44,272,44],[286,45,272,45],[287,4,273,4],[288,4,274,4,"nums"],[288,8,274,8],[288,9,274,9,"reduceRight"],[288,20,274,20],[288,21,274,21],[288,22,274,22,"acc"],[288,25,274,25],[288,27,274,27,"num"],[288,30,274,30],[288,32,274,32,"i"],[288,33,274,33],[288,38,274,38],[289,6,275,8],[289,10,275,12,"Fp"],[289,12,275,14],[289,13,275,15,"is0"],[289,16,275,18],[289,17,275,19,"num"],[289,20,275,22],[289,21,275,23],[289,23,276,12],[289,30,276,19,"acc"],[289,33,276,22],[290,6,277,8,"inverted"],[290,14,277,16],[290,15,277,17,"i"],[290,16,277,18],[290,17,277,19],[290,20,277,22,"Fp"],[290,22,277,24],[290,23,277,25,"mul"],[290,26,277,28],[290,27,277,29,"acc"],[290,30,277,32],[290,32,277,34,"inverted"],[290,40,277,42],[290,41,277,43,"i"],[290,42,277,44],[290,43,277,45],[290,44,277,46],[291,6,278,8],[291,13,278,15,"Fp"],[291,15,278,17],[291,16,278,18,"mul"],[291,19,278,21],[291,20,278,22,"acc"],[291,23,278,25],[291,25,278,27,"num"],[291,28,278,30],[291,29,278,31],[292,4,279,4],[292,5,279,5],[292,7,279,7,"invertedAcc"],[292,18,279,18],[292,19,279,19],[293,4,280,4],[293,11,280,11,"inverted"],[293,19,280,19],[294,2,281,0],[295,2,282,0],[296,2,283,7],[296,11,283,16,"FpDiv"],[296,16,283,21,"FpDiv"],[296,17,283,22,"Fp"],[296,19,283,24],[296,21,283,26,"lhs"],[296,24,283,29],[296,26,283,31,"rhs"],[296,29,283,34],[296,31,283,36],[297,4,284,4],[297,11,284,11,"Fp"],[297,13,284,13],[297,14,284,14,"mul"],[297,17,284,17],[297,18,284,18,"lhs"],[297,21,284,21],[297,23,284,23],[297,30,284,30,"rhs"],[297,33,284,33],[297,38,284,38],[297,46,284,46],[297,49,284,49,"invert"],[297,55,284,55],[297,56,284,56,"rhs"],[297,59,284,59],[297,61,284,61,"Fp"],[297,63,284,63],[297,64,284,64,"ORDER"],[297,69,284,69],[297,70,284,70],[297,73,284,73,"Fp"],[297,75,284,75],[297,76,284,76,"inv"],[297,79,284,79],[297,80,284,80,"rhs"],[297,83,284,83],[297,84,284,84],[297,85,284,85],[298,2,285,0],[299,2,286,0],[300,0,287,0],[301,0,288,0],[302,0,289,0],[303,0,290,0],[304,0,291,0],[305,0,292,0],[306,0,293,0],[307,0,294,0],[308,2,295,7],[308,11,295,16,"FpLegendre"],[308,21,295,26,"FpLegendre"],[308,22,295,27,"Fp"],[308,24,295,29],[308,26,295,31,"n"],[308,27,295,32],[308,29,295,34],[309,4,296,4],[310,4,297,4],[311,4,298,4],[311,10,298,10,"p1mod2"],[311,16,298,16],[311,19,298,19],[311,20,298,20,"Fp"],[311,22,298,22],[311,23,298,23,"ORDER"],[311,28,298,28],[311,31,298,31,"_1n"],[311,34,298,34],[311,38,298,38,"_2n"],[311,41,298,41],[312,4,299,4],[312,10,299,10,"powered"],[312,17,299,17],[312,20,299,20,"Fp"],[312,22,299,22],[312,23,299,23,"pow"],[312,26,299,26],[312,27,299,27,"n"],[312,28,299,28],[312,30,299,30,"p1mod2"],[312,36,299,36],[312,37,299,37],[313,4,300,4],[313,10,300,10,"yes"],[313,13,300,13],[313,16,300,16,"Fp"],[313,18,300,18],[313,19,300,19,"eql"],[313,22,300,22],[313,23,300,23,"powered"],[313,30,300,30],[313,32,300,32,"Fp"],[313,34,300,34],[313,35,300,35,"ONE"],[313,38,300,38],[313,39,300,39],[314,4,301,4],[314,10,301,10,"zero"],[314,14,301,14],[314,17,301,17,"Fp"],[314,19,301,19],[314,20,301,20,"eql"],[314,23,301,23],[314,24,301,24,"powered"],[314,31,301,31],[314,33,301,33,"Fp"],[314,35,301,35],[314,36,301,36,"ZERO"],[314,40,301,40],[314,41,301,41],[315,4,302,4],[315,10,302,10,"no"],[315,12,302,12],[315,15,302,15,"Fp"],[315,17,302,17],[315,18,302,18,"eql"],[315,21,302,21],[315,22,302,22,"powered"],[315,29,302,29],[315,31,302,31,"Fp"],[315,33,302,33],[315,34,302,34,"neg"],[315,37,302,37],[315,38,302,38,"Fp"],[315,40,302,40],[315,41,302,41,"ONE"],[315,44,302,44],[315,45,302,45],[315,46,302,46],[316,4,303,4],[316,8,303,8],[316,9,303,9,"yes"],[316,12,303,12],[316,16,303,16],[316,17,303,17,"zero"],[316,21,303,21],[316,25,303,25],[316,26,303,26,"no"],[316,28,303,28],[316,30,304,8],[316,36,304,14],[316,40,304,18,"Error"],[316,45,304,23],[316,46,304,24],[316,78,304,56],[316,79,304,57],[317,4,305,4],[317,11,305,11,"yes"],[317,14,305,14],[317,17,305,17],[317,18,305,18],[317,21,305,21,"zero"],[317,25,305,25],[317,28,305,28],[317,29,305,29],[317,32,305,32],[317,33,305,33],[317,34,305,34],[318,2,306,0],[319,2,307,0],[320,2,308,7],[320,11,308,16,"FpIsSquare"],[320,21,308,26,"FpIsSquare"],[320,22,308,27,"Fp"],[320,24,308,29],[320,26,308,31,"n"],[320,27,308,32],[320,29,308,34],[321,4,309,4],[321,10,309,10,"l"],[321,11,309,11],[321,14,309,14,"FpLegendre"],[321,24,309,24],[321,25,309,25,"Fp"],[321,27,309,27],[321,29,309,29,"n"],[321,30,309,30],[321,31,309,31],[322,4,310,4],[322,11,310,11,"l"],[322,12,310,12],[322,17,310,17],[322,18,310,18],[323,2,311,0],[324,2,312,0],[325,2,313,7],[325,11,313,16,"nLength"],[325,18,313,23,"nLength"],[325,19,313,24,"n"],[325,20,313,25],[325,22,313,27,"nBitLength"],[325,32,313,37],[325,34,313,39],[326,4,314,4],[327,4,315,4],[327,8,315,8,"nBitLength"],[327,18,315,18],[327,23,315,23,"undefined"],[327,32,315,32],[327,34,316,8],[327,38,316,8,"anumber"],[327,52,316,15],[327,54,316,16,"nBitLength"],[327,64,316,26],[327,65,316,27],[328,4,317,4],[328,10,317,10,"_nBitLength"],[328,21,317,21],[328,24,317,24,"nBitLength"],[328,34,317,34],[328,39,317,39,"undefined"],[328,48,317,48],[328,51,317,51,"nBitLength"],[328,61,317,61],[328,64,317,64,"n"],[328,65,317,65],[328,66,317,66,"toString"],[328,74,317,74],[328,75,317,75],[328,76,317,76],[328,77,317,77],[328,78,317,78,"length"],[328,84,317,84],[329,4,318,4],[329,10,318,10,"nByteLength"],[329,21,318,21],[329,24,318,24,"Math"],[329,28,318,28],[329,29,318,29,"ceil"],[329,33,318,33],[329,34,318,34,"_nBitLength"],[329,45,318,45],[329,48,318,48],[329,49,318,49],[329,50,318,50],[330,4,319,4],[330,11,319,11],[331,6,319,13,"nBitLength"],[331,16,319,23],[331,18,319,25,"_nBitLength"],[331,29,319,36],[332,6,319,38,"nByteLength"],[333,4,319,50],[333,5,319,51],[334,2,320,0],[335,2,321,0],[336,0,322,0],[337,0,323,0],[338,0,324,0],[339,0,325,0],[340,0,326,0],[341,0,327,0],[342,0,328,0],[343,0,329,0],[344,0,330,0],[345,0,331,0],[346,0,332,0],[347,0,333,0],[348,0,334,0],[349,0,335,0],[350,0,336,0],[351,0,337,0],[352,0,338,0],[353,0,339,0],[354,2,340,7],[354,11,340,16,"Field"],[354,16,340,21,"Field"],[354,17,340,22,"ORDER"],[354,22,340,27],[354,24,340,29,"bitLenOrOpts"],[354,36,340,41],[355,2,340,43],[356,2,341,0,"isLE"],[356,6,341,4],[356,9,341,7],[356,14,341,12],[356,16,341,14,"opts"],[356,20,341,18],[356,23,341,21],[356,24,341,22],[356,25,341,23],[356,27,341,25],[357,4,342,4],[357,8,342,8,"ORDER"],[357,13,342,13],[357,17,342,17,"_0n"],[357,20,342,20],[357,22,343,8],[357,28,343,14],[357,32,343,18,"Error"],[357,37,343,23],[357,38,343,24],[357,79,343,65],[357,82,343,68,"ORDER"],[357,87,343,73],[357,88,343,74],[358,4,344,4],[358,8,344,8,"_nbitLength"],[358,19,344,19],[358,22,344,22,"undefined"],[358,31,344,31],[359,4,345,4],[359,8,345,8,"_sqrt"],[359,13,345,13],[359,16,345,16,"undefined"],[359,25,345,25],[360,4,346,4],[360,8,346,8,"modFromBytes"],[360,20,346,20],[360,23,346,23],[360,28,346,28],[361,4,347,4],[361,8,347,8,"allowedLengths"],[361,22,347,22],[361,25,347,25,"undefined"],[361,34,347,34],[362,4,348,4],[362,8,348,8],[362,15,348,15,"bitLenOrOpts"],[362,27,348,27],[362,32,348,32],[362,40,348,40],[362,44,348,44,"bitLenOrOpts"],[362,56,348,56],[362,60,348,60],[362,64,348,64],[362,66,348,66],[363,6,349,8],[363,10,349,12,"opts"],[363,14,349,16],[363,15,349,17,"sqrt"],[363,19,349,21],[363,23,349,25,"isLE"],[363,27,349,29],[363,29,350,12],[363,35,350,18],[363,39,350,22,"Error"],[363,44,350,27],[363,45,350,28],[363,83,350,66],[363,84,350,67],[364,6,351,8],[364,12,351,14,"_opts"],[364,17,351,19],[364,20,351,22,"bitLenOrOpts"],[364,32,351,34],[365,6,352,8],[365,10,352,12,"_opts"],[365,15,352,17],[365,16,352,18,"BITS"],[365,20,352,22],[365,22,353,12,"_nbitLength"],[365,33,353,23],[365,36,353,26,"_opts"],[365,41,353,31],[365,42,353,32,"BITS"],[365,46,353,36],[366,6,354,8],[366,10,354,12,"_opts"],[366,15,354,17],[366,16,354,18,"sqrt"],[366,20,354,22],[366,22,355,12,"_sqrt"],[366,27,355,17],[366,30,355,20,"_opts"],[366,35,355,25],[366,36,355,26,"sqrt"],[366,40,355,30],[367,6,356,8],[367,10,356,12],[367,17,356,19,"_opts"],[367,22,356,24],[367,23,356,25,"isLE"],[367,27,356,29],[367,32,356,34],[367,41,356,43],[367,43,357,12,"isLE"],[367,47,357,16],[367,50,357,19,"_opts"],[367,55,357,24],[367,56,357,25,"isLE"],[367,60,357,29],[368,6,358,8],[368,10,358,12],[368,17,358,19,"_opts"],[368,22,358,24],[368,23,358,25,"modFromBytes"],[368,35,358,37],[368,40,358,42],[368,49,358,51],[368,51,359,12,"modFromBytes"],[368,63,359,24],[368,66,359,27,"_opts"],[368,71,359,32],[368,72,359,33,"modFromBytes"],[368,84,359,45],[369,6,360,8,"allowedLengths"],[369,20,360,22],[369,23,360,25,"_opts"],[369,28,360,30],[369,29,360,31,"allowedLengths"],[369,43,360,45],[370,4,361,4],[370,5,361,5],[370,11,362,9],[371,6,363,8],[371,10,363,12],[371,17,363,19,"bitLenOrOpts"],[371,29,363,31],[371,34,363,36],[371,42,363,44],[371,44,364,12,"_nbitLength"],[371,55,364,23],[371,58,364,26,"bitLenOrOpts"],[371,70,364,38],[372,6,365,8],[372,10,365,12,"opts"],[372,14,365,16],[372,15,365,17,"sqrt"],[372,19,365,21],[372,21,366,12,"_sqrt"],[372,26,366,17],[372,29,366,20,"opts"],[372,33,366,24],[372,34,366,25,"sqrt"],[372,38,366,29],[373,4,367,4],[374,4,368,4],[374,10,368,10],[375,6,368,12,"nBitLength"],[375,16,368,22],[375,18,368,24,"BITS"],[375,22,368,28],[376,6,368,30,"nByteLength"],[376,17,368,41],[376,19,368,43,"BYTES"],[377,4,368,49],[377,5,368,50],[377,8,368,53,"nLength"],[377,15,368,60],[377,16,368,61,"ORDER"],[377,21,368,66],[377,23,368,68,"_nbitLength"],[377,34,368,79],[377,35,368,80],[378,4,369,4],[378,8,369,8,"BYTES"],[378,13,369,13],[378,16,369,16],[378,20,369,20],[378,22,370,8],[378,28,370,14],[378,32,370,18,"Error"],[378,37,370,23],[378,38,370,24],[378,86,370,72],[378,87,370,73],[379,4,371,4],[379,8,371,8,"sqrtP"],[379,13,371,13],[379,14,371,14],[379,15,371,15],[380,4,372,4],[380,10,372,10,"f"],[380,11,372,11],[380,14,372,14,"Object"],[380,20,372,20],[380,21,372,21,"freeze"],[380,27,372,27],[380,28,372,28],[381,6,373,8,"ORDER"],[381,11,373,13],[382,6,374,8,"isLE"],[382,10,374,12],[383,6,375,8,"BITS"],[383,10,375,12],[384,6,376,8,"BYTES"],[384,11,376,13],[385,6,377,8,"MASK"],[385,10,377,12],[385,12,377,14],[385,16,377,14,"bitMask"],[385,30,377,21],[385,32,377,22,"BITS"],[385,36,377,26],[385,37,377,27],[386,6,378,8,"ZERO"],[386,10,378,12],[386,12,378,14,"_0n"],[386,15,378,17],[387,6,379,8,"ONE"],[387,9,379,11],[387,11,379,13,"_1n"],[387,14,379,16],[388,6,380,8,"allowedLengths"],[388,20,380,22],[388,22,380,24,"allowedLengths"],[388,36,380,38],[389,6,381,8,"create"],[389,12,381,14],[389,14,381,17,"num"],[389,17,381,20],[389,21,381,25,"mod"],[389,24,381,28],[389,25,381,29,"num"],[389,28,381,32],[389,30,381,34,"ORDER"],[389,35,381,39],[389,36,381,40],[390,6,382,8,"isValid"],[390,13,382,15],[390,15,382,18,"num"],[390,18,382,21],[390,22,382,26],[391,8,383,12],[391,12,383,16],[391,19,383,23,"num"],[391,22,383,26],[391,27,383,31],[391,35,383,39],[391,37,384,16],[391,43,384,22],[391,47,384,26,"Error"],[391,52,384,31],[391,53,384,32],[391,99,384,78],[391,102,384,81],[391,109,384,88,"num"],[391,112,384,91],[391,113,384,92],[392,8,385,12],[392,15,385,19,"_0n"],[392,18,385,22],[392,22,385,26,"num"],[392,25,385,29],[392,29,385,33,"num"],[392,32,385,36],[392,35,385,39,"ORDER"],[392,40,385,44],[392,41,385,45],[392,42,385,46],[393,6,386,8],[393,7,386,9],[394,6,387,8,"is0"],[394,9,387,11],[394,11,387,14,"num"],[394,14,387,17],[394,18,387,22,"num"],[394,21,387,25],[394,26,387,30,"_0n"],[394,29,387,33],[395,6,388,8],[396,6,389,8,"isValidNot0"],[396,17,389,19],[396,19,389,22,"num"],[396,22,389,25],[396,26,389,30],[396,27,389,31,"f"],[396,28,389,32],[396,29,389,33,"is0"],[396,32,389,36],[396,33,389,37,"num"],[396,36,389,40],[396,37,389,41],[396,41,389,45,"f"],[396,42,389,46],[396,43,389,47,"isValid"],[396,50,389,54],[396,51,389,55,"num"],[396,54,389,58],[396,55,389,59],[397,6,390,8,"isOdd"],[397,11,390,13],[397,13,390,16,"num"],[397,16,390,19],[397,20,390,24],[397,21,390,25,"num"],[397,24,390,28],[397,27,390,31,"_1n"],[397,30,390,34],[397,36,390,40,"_1n"],[397,39,390,43],[398,6,391,8,"neg"],[398,9,391,11],[398,11,391,14,"num"],[398,14,391,17],[398,18,391,22,"mod"],[398,21,391,25],[398,22,391,26],[398,23,391,27,"num"],[398,26,391,30],[398,28,391,32,"ORDER"],[398,33,391,37],[398,34,391,38],[399,6,392,8,"eql"],[399,9,392,11],[399,11,392,13,"eql"],[399,12,392,14,"lhs"],[399,15,392,17],[399,17,392,19,"rhs"],[399,20,392,22],[399,25,392,27,"lhs"],[399,28,392,30],[399,33,392,35,"rhs"],[399,36,392,38],[400,6,393,8,"sqr"],[400,9,393,11],[400,11,393,14,"num"],[400,14,393,17],[400,18,393,22,"mod"],[400,21,393,25],[400,22,393,26,"num"],[400,25,393,29],[400,28,393,32,"num"],[400,31,393,35],[400,33,393,37,"ORDER"],[400,38,393,42],[400,39,393,43],[401,6,394,8,"add"],[401,9,394,11],[401,11,394,13,"add"],[401,12,394,14,"lhs"],[401,15,394,17],[401,17,394,19,"rhs"],[401,20,394,22],[401,25,394,27,"mod"],[401,28,394,30],[401,29,394,31,"lhs"],[401,32,394,34],[401,35,394,37,"rhs"],[401,38,394,40],[401,40,394,42,"ORDER"],[401,45,394,47],[401,46,394,48],[402,6,395,8,"sub"],[402,9,395,11],[402,11,395,13,"sub"],[402,12,395,14,"lhs"],[402,15,395,17],[402,17,395,19,"rhs"],[402,20,395,22],[402,25,395,27,"mod"],[402,28,395,30],[402,29,395,31,"lhs"],[402,32,395,34],[402,35,395,37,"rhs"],[402,38,395,40],[402,40,395,42,"ORDER"],[402,45,395,47],[402,46,395,48],[403,6,396,8,"mul"],[403,9,396,11],[403,11,396,13,"mul"],[403,12,396,14,"lhs"],[403,15,396,17],[403,17,396,19,"rhs"],[403,20,396,22],[403,25,396,27,"mod"],[403,28,396,30],[403,29,396,31,"lhs"],[403,32,396,34],[403,35,396,37,"rhs"],[403,38,396,40],[403,40,396,42,"ORDER"],[403,45,396,47],[403,46,396,48],[404,6,397,8,"pow"],[404,9,397,11],[404,11,397,13,"pow"],[404,12,397,14,"num"],[404,15,397,17],[404,17,397,19,"power"],[404,22,397,24],[404,27,397,29,"FpPow"],[404,32,397,34],[404,33,397,35,"f"],[404,34,397,36],[404,36,397,38,"num"],[404,39,397,41],[404,41,397,43,"power"],[404,46,397,48],[404,47,397,49],[405,6,398,8,"div"],[405,9,398,11],[405,11,398,13,"div"],[405,12,398,14,"lhs"],[405,15,398,17],[405,17,398,19,"rhs"],[405,20,398,22],[405,25,398,27,"mod"],[405,28,398,30],[405,29,398,31,"lhs"],[405,32,398,34],[405,35,398,37,"invert"],[405,41,398,43],[405,42,398,44,"rhs"],[405,45,398,47],[405,47,398,49,"ORDER"],[405,52,398,54],[405,53,398,55],[405,55,398,57,"ORDER"],[405,60,398,62],[405,61,398,63],[406,6,399,8],[407,6,400,8,"sqrN"],[407,10,400,12],[407,12,400,15,"num"],[407,15,400,18],[407,19,400,23,"num"],[407,22,400,26],[407,25,400,29,"num"],[407,28,400,32],[408,6,401,8,"addN"],[408,10,401,12],[408,12,401,14,"addN"],[408,13,401,15,"lhs"],[408,16,401,18],[408,18,401,20,"rhs"],[408,21,401,23],[408,26,401,28,"lhs"],[408,29,401,31],[408,32,401,34,"rhs"],[408,35,401,37],[409,6,402,8,"subN"],[409,10,402,12],[409,12,402,14,"subN"],[409,13,402,15,"lhs"],[409,16,402,18],[409,18,402,20,"rhs"],[409,21,402,23],[409,26,402,28,"lhs"],[409,29,402,31],[409,32,402,34,"rhs"],[409,35,402,37],[410,6,403,8,"mulN"],[410,10,403,12],[410,12,403,14,"mulN"],[410,13,403,15,"lhs"],[410,16,403,18],[410,18,403,20,"rhs"],[410,21,403,23],[410,26,403,28,"lhs"],[410,29,403,31],[410,32,403,34,"rhs"],[410,35,403,37],[411,6,404,8,"inv"],[411,9,404,11],[411,11,404,14,"num"],[411,14,404,17],[411,18,404,22,"invert"],[411,24,404,28],[411,25,404,29,"num"],[411,28,404,32],[411,30,404,34,"ORDER"],[411,35,404,39],[411,36,404,40],[412,6,405,8,"sqrt"],[412,10,405,12],[412,12,405,14,"_sqrt"],[412,17,405,19],[412,22,406,14,"n"],[412,23,406,15],[412,27,406,20],[413,8,407,16],[413,12,407,20],[413,13,407,21,"sqrtP"],[413,18,407,26],[413,20,408,20,"sqrtP"],[413,25,408,25],[413,28,408,28,"FpSqrt"],[413,34,408,34],[413,35,408,35,"ORDER"],[413,40,408,40],[413,41,408,41],[414,8,409,16],[414,15,409,23,"sqrtP"],[414,20,409,28],[414,21,409,29,"f"],[414,22,409,30],[414,24,409,32,"n"],[414,25,409,33],[414,26,409,34],[415,6,410,12],[415,7,410,13],[415,8,410,14],[416,6,411,8,"toBytes"],[416,13,411,15],[416,15,411,18,"num"],[416,18,411,21],[416,22,411,27,"isLE"],[416,26,411,31],[416,29,411,34],[416,33,411,34,"numberToBytesLE"],[416,55,411,49],[416,57,411,50,"num"],[416,60,411,53],[416,62,411,55,"BYTES"],[416,67,411,60],[416,68,411,61],[416,71,411,64],[416,75,411,64,"numberToBytesBE"],[416,97,411,79],[416,99,411,80,"num"],[416,102,411,83],[416,104,411,85,"BYTES"],[416,109,411,90],[416,110,411,92],[417,6,412,8,"fromBytes"],[417,15,412,17],[417,17,412,19,"fromBytes"],[417,18,412,20,"bytes"],[417,23,412,25],[417,25,412,27,"skipValidation"],[417,39,412,41],[417,42,412,44],[417,46,412,48],[417,51,412,53],[418,8,413,12],[418,12,413,16,"allowedLengths"],[418,26,413,30],[418,28,413,32],[419,10,414,16],[419,14,414,20],[419,15,414,21,"allowedLengths"],[419,29,414,35],[419,30,414,36,"includes"],[419,38,414,44],[419,39,414,45,"bytes"],[419,44,414,50],[419,45,414,51,"length"],[419,51,414,57],[419,52,414,58],[419,56,414,62,"bytes"],[419,61,414,67],[419,62,414,68,"length"],[419,68,414,74],[419,71,414,77,"BYTES"],[419,76,414,82],[419,78,414,84],[420,12,415,20],[420,18,415,26],[420,22,415,30,"Error"],[420,27,415,35],[420,28,415,36],[420,56,415,64],[420,59,415,67,"allowedLengths"],[420,73,415,81],[420,76,415,84],[420,90,415,98],[420,93,415,101,"bytes"],[420,98,415,106],[420,99,415,107,"length"],[420,105,415,113],[420,106,415,114],[421,10,416,16],[422,10,417,16],[422,16,417,22,"padded"],[422,22,417,28],[422,25,417,31],[422,29,417,35,"Uint8Array"],[422,39,417,45],[422,40,417,46,"BYTES"],[422,45,417,51],[422,46,417,52],[423,10,418,16],[424,10,419,16,"padded"],[424,16,419,22],[424,17,419,23,"set"],[424,20,419,26],[424,21,419,27,"bytes"],[424,26,419,32],[424,28,419,34,"isLE"],[424,32,419,38],[424,35,419,41],[424,36,419,42],[424,39,419,45,"padded"],[424,45,419,51],[424,46,419,52,"length"],[424,52,419,58],[424,55,419,61,"bytes"],[424,60,419,66],[424,61,419,67,"length"],[424,67,419,73],[424,68,419,74],[425,10,420,16,"bytes"],[425,15,420,21],[425,18,420,24,"padded"],[425,24,420,30],[426,8,421,12],[427,8,422,12],[427,12,422,16,"bytes"],[427,17,422,21],[427,18,422,22,"length"],[427,24,422,28],[427,29,422,33,"BYTES"],[427,34,422,38],[427,36,423,16],[427,42,423,22],[427,46,423,26,"Error"],[427,51,423,31],[427,52,423,32],[427,80,423,60],[427,83,423,63,"BYTES"],[427,88,423,68],[427,91,423,71],[427,105,423,85],[427,108,423,88,"bytes"],[427,113,423,93],[427,114,423,94,"length"],[427,120,423,100],[427,121,423,101],[428,8,424,12],[428,12,424,16,"scalar"],[428,18,424,22],[428,21,424,25,"isLE"],[428,25,424,29],[428,28,424,32],[428,32,424,32,"bytesToNumberLE"],[428,54,424,47],[428,56,424,48,"bytes"],[428,61,424,53],[428,62,424,54],[428,65,424,57],[428,69,424,57,"bytesToNumberBE"],[428,91,424,72],[428,93,424,73,"bytes"],[428,98,424,78],[428,99,424,79],[429,8,425,12],[429,12,425,16,"modFromBytes"],[429,24,425,28],[429,26,426,16,"scalar"],[429,32,426,22],[429,35,426,25,"mod"],[429,38,426,28],[429,39,426,29,"scalar"],[429,45,426,35],[429,47,426,37,"ORDER"],[429,52,426,42],[429,53,426,43],[430,8,427,12],[430,12,427,16],[430,13,427,17,"skipValidation"],[430,27,427,31],[430,29,428,16],[430,33,428,20],[430,34,428,21,"f"],[430,35,428,22],[430,36,428,23,"isValid"],[430,43,428,30],[430,44,428,31,"scalar"],[430,50,428,37],[430,51,428,38],[430,53,429,20],[430,59,429,26],[430,63,429,30,"Error"],[430,68,429,35],[430,69,429,36],[430,119,429,86],[430,120,429,87],[431,8,430,12],[432,8,431,12],[433,8,432,12],[433,15,432,19,"scalar"],[433,21,432,25],[434,6,433,8],[434,7,433,9],[435,6,434,8],[436,6,435,8,"invertBatch"],[436,17,435,19],[436,19,435,22,"lst"],[436,22,435,25],[436,26,435,30,"FpInvertBatch"],[436,39,435,43],[436,40,435,44,"f"],[436,41,435,45],[436,43,435,47,"lst"],[436,46,435,50],[436,47,435,51],[437,6,436,8],[438,6,437,8],[439,6,438,8,"cmov"],[439,10,438,12],[439,12,438,14,"cmov"],[439,13,438,15,"a"],[439,14,438,16],[439,16,438,18,"b"],[439,17,438,19],[439,19,438,21,"c"],[439,20,438,22],[439,25,438,28,"c"],[439,26,438,29],[439,29,438,32,"b"],[439,30,438,33],[439,33,438,36,"a"],[440,4,439,4],[440,5,439,5],[440,6,439,6],[441,4,440,4],[441,11,440,11,"Object"],[441,17,440,17],[441,18,440,18,"freeze"],[441,24,440,24],[441,25,440,25,"f"],[441,26,440,26],[441,27,440,27],[442,2,441,0],[443,2,442,0],[444,2,443,0],[445,2,444,0],[446,2,445,0],[447,2,446,0],[448,2,447,0],[449,2,448,0],[450,2,449,0],[451,2,450,0],[452,2,451,0],[453,2,452,0],[454,2,453,0],[455,2,454,0],[456,2,455,7],[456,11,455,16,"FpSqrtOdd"],[456,20,455,25,"FpSqrtOdd"],[456,21,455,26,"Fp"],[456,23,455,28],[456,25,455,30,"elm"],[456,28,455,33],[456,30,455,35],[457,4,456,4],[457,8,456,8],[457,9,456,9,"Fp"],[457,11,456,11],[457,12,456,12,"isOdd"],[457,17,456,17],[457,19,457,8],[457,25,457,14],[457,29,457,18,"Error"],[457,34,457,23],[457,35,457,24],[457,61,457,50],[457,62,457,51],[458,4,458,4],[458,10,458,10,"root"],[458,14,458,14],[458,17,458,17,"Fp"],[458,19,458,19],[458,20,458,20,"sqrt"],[458,24,458,24],[458,25,458,25,"elm"],[458,28,458,28],[458,29,458,29],[459,4,459,4],[459,11,459,11,"Fp"],[459,13,459,13],[459,14,459,14,"isOdd"],[459,19,459,19],[459,20,459,20,"root"],[459,24,459,24],[459,25,459,25],[459,28,459,28,"root"],[459,32,459,32],[459,35,459,35,"Fp"],[459,37,459,37],[459,38,459,38,"neg"],[459,41,459,41],[459,42,459,42,"root"],[459,46,459,46],[459,47,459,47],[460,2,460,0],[461,2,461,7],[461,11,461,16,"FpSqrtEven"],[461,21,461,26,"FpSqrtEven"],[461,22,461,27,"Fp"],[461,24,461,29],[461,26,461,31,"elm"],[461,29,461,34],[461,31,461,36],[462,4,462,4],[462,8,462,8],[462,9,462,9,"Fp"],[462,11,462,11],[462,12,462,12,"isOdd"],[462,17,462,17],[462,19,463,8],[462,25,463,14],[462,29,463,18,"Error"],[462,34,463,23],[462,35,463,24],[462,61,463,50],[462,62,463,51],[463,4,464,4],[463,10,464,10,"root"],[463,14,464,14],[463,17,464,17,"Fp"],[463,19,464,19],[463,20,464,20,"sqrt"],[463,24,464,24],[463,25,464,25,"elm"],[463,28,464,28],[463,29,464,29],[464,4,465,4],[464,11,465,11,"Fp"],[464,13,465,13],[464,14,465,14,"isOdd"],[464,19,465,19],[464,20,465,20,"root"],[464,24,465,24],[464,25,465,25],[464,28,465,28,"Fp"],[464,30,465,30],[464,31,465,31,"neg"],[464,34,465,34],[464,35,465,35,"root"],[464,39,465,39],[464,40,465,40],[464,43,465,43,"root"],[464,47,465,47],[465,2,466,0],[466,2,467,0],[467,0,468,0],[468,0,469,0],[469,0,470,0],[470,0,471,0],[471,0,472,0],[472,2,473,7],[472,11,473,16,"hashToPrivateScalar"],[472,30,473,35,"hashToPrivateScalar"],[472,31,473,36,"hash"],[472,35,473,40],[472,37,473,42,"groupOrder"],[472,47,473,52],[472,49,473,54,"isLE"],[472,53,473,58],[472,56,473,61],[472,61,473,66],[472,63,473,68],[473,4,474,4,"hash"],[473,8,474,8],[473,11,474,11],[473,15,474,11,"ensureBytes"],[473,33,474,22],[473,35,474,23],[473,48,474,36],[473,50,474,38,"hash"],[473,54,474,42],[473,55,474,43],[474,4,475,4],[474,10,475,10,"hashLen"],[474,17,475,17],[474,20,475,20,"hash"],[474,24,475,24],[474,25,475,25,"length"],[474,31,475,31],[475,4,476,4],[475,10,476,10,"minLen"],[475,16,476,16],[475,19,476,19,"nLength"],[475,26,476,26],[475,27,476,27,"groupOrder"],[475,37,476,37],[475,38,476,38],[475,39,476,39,"nByteLength"],[475,50,476,50],[475,53,476,53],[475,54,476,54],[476,4,477,4],[476,8,477,8,"minLen"],[476,14,477,14],[476,17,477,17],[476,19,477,19],[476,23,477,23,"hashLen"],[476,30,477,30],[476,33,477,33,"minLen"],[476,39,477,39],[476,43,477,43,"hashLen"],[476,50,477,50],[476,53,477,53],[476,57,477,57],[476,59,478,8],[476,65,478,14],[476,69,478,18,"Error"],[476,74,478,23],[476,75,478,24],[476,107,478,56],[476,110,478,59,"minLen"],[476,116,478,65],[476,119,478,68],[476,147,478,96],[476,150,478,99,"hashLen"],[476,157,478,106],[476,158,478,107],[477,4,479,4],[477,10,479,10,"num"],[477,13,479,13],[477,16,479,16,"isLE"],[477,20,479,20],[477,23,479,23],[477,27,479,23,"bytesToNumberLE"],[477,49,479,38],[477,51,479,39,"hash"],[477,55,479,43],[477,56,479,44],[477,59,479,47],[477,63,479,47,"bytesToNumberBE"],[477,85,479,62],[477,87,479,63,"hash"],[477,91,479,67],[477,92,479,68],[478,4,480,4],[478,11,480,11,"mod"],[478,14,480,14],[478,15,480,15,"num"],[478,18,480,18],[478,20,480,20,"groupOrder"],[478,30,480,30],[478,33,480,33,"_1n"],[478,36,480,36],[478,37,480,37],[478,40,480,40,"_1n"],[478,43,480,43],[479,2,481,0],[480,2,482,0],[481,0,483,0],[482,0,484,0],[483,0,485,0],[484,0,486,0],[485,0,487,0],[486,2,488,7],[486,11,488,16,"getFieldBytesLength"],[486,30,488,35,"getFieldBytesLength"],[486,31,488,36,"fieldOrder"],[486,41,488,46],[486,43,488,48],[487,4,489,4],[487,8,489,8],[487,15,489,15,"fieldOrder"],[487,25,489,25],[487,30,489,30],[487,38,489,38],[487,40,490,8],[487,46,490,14],[487,50,490,18,"Error"],[487,55,490,23],[487,56,490,24],[487,84,490,52],[487,85,490,53],[488,4,491,4],[488,10,491,10,"bitLength"],[488,19,491,19],[488,22,491,22,"fieldOrder"],[488,32,491,32],[488,33,491,33,"toString"],[488,41,491,41],[488,42,491,42],[488,43,491,43],[488,44,491,44],[488,45,491,45,"length"],[488,51,491,51],[489,4,492,4],[489,11,492,11,"Math"],[489,15,492,15],[489,16,492,16,"ceil"],[489,20,492,20],[489,21,492,21,"bitLength"],[489,30,492,30],[489,33,492,33],[489,34,492,34],[489,35,492,35],[490,2,493,0],[491,2,494,0],[492,0,495,0],[493,0,496,0],[494,0,497,0],[495,0,498,0],[496,0,499,0],[497,0,500,0],[498,2,501,7],[498,11,501,16,"getMinHashLength"],[498,27,501,32,"getMinHashLength"],[498,28,501,33,"fieldOrder"],[498,38,501,43],[498,40,501,45],[499,4,502,4],[499,10,502,10,"length"],[499,16,502,16],[499,19,502,19,"getFieldBytesLength"],[499,38,502,38],[499,39,502,39,"fieldOrder"],[499,49,502,49],[499,50,502,50],[500,4,503,4],[500,11,503,11,"length"],[500,17,503,17],[500,20,503,20,"Math"],[500,24,503,24],[500,25,503,25,"ceil"],[500,29,503,29],[500,30,503,30,"length"],[500,36,503,36],[500,39,503,39],[500,40,503,40],[500,41,503,41],[501,2,504,0],[502,2,505,0],[503,0,506,0],[504,0,507,0],[505,0,508,0],[506,0,509,0],[507,0,510,0],[508,0,511,0],[509,0,512,0],[510,0,513,0],[511,0,514,0],[512,0,515,0],[513,0,516,0],[514,0,517,0],[515,2,518,7],[515,11,518,16,"mapHashToField"],[515,25,518,30,"mapHashToField"],[515,26,518,31,"key"],[515,29,518,34],[515,31,518,36,"fieldOrder"],[515,41,518,46],[515,43,518,48,"isLE"],[515,47,518,52],[515,50,518,55],[515,55,518,60],[515,57,518,62],[516,4,519,4],[516,10,519,10,"len"],[516,13,519,13],[516,16,519,16,"key"],[516,19,519,19],[516,20,519,20,"length"],[516,26,519,26],[517,4,520,4],[517,10,520,10,"fieldLen"],[517,18,520,18],[517,21,520,21,"getFieldBytesLength"],[517,40,520,40],[517,41,520,41,"fieldOrder"],[517,51,520,51],[517,52,520,52],[518,4,521,4],[518,10,521,10,"minLen"],[518,16,521,16],[518,19,521,19,"getMinHashLength"],[518,35,521,35],[518,36,521,36,"fieldOrder"],[518,46,521,46],[518,47,521,47],[519,4,522,4],[520,4,523,4],[520,8,523,8,"len"],[520,11,523,11],[520,14,523,14],[520,16,523,16],[520,20,523,20,"len"],[520,23,523,23],[520,26,523,26,"minLen"],[520,32,523,32],[520,36,523,36,"len"],[520,39,523,39],[520,42,523,42],[520,46,523,46],[520,48,524,8],[520,54,524,14],[520,58,524,18,"Error"],[520,63,524,23],[520,64,524,24],[520,75,524,35],[520,78,524,38,"minLen"],[520,84,524,44],[520,87,524,47],[520,115,524,75],[520,118,524,78,"len"],[520,121,524,81],[520,122,524,82],[521,4,525,4],[521,10,525,10,"num"],[521,13,525,13],[521,16,525,16,"isLE"],[521,20,525,20],[521,23,525,23],[521,27,525,23,"bytesToNumberLE"],[521,49,525,38],[521,51,525,39,"key"],[521,54,525,42],[521,55,525,43],[521,58,525,46],[521,62,525,46,"bytesToNumberBE"],[521,84,525,61],[521,86,525,62,"key"],[521,89,525,65],[521,90,525,66],[522,4,526,4],[523,4,527,4],[523,10,527,10,"reduced"],[523,17,527,17],[523,20,527,20,"mod"],[523,23,527,23],[523,24,527,24,"num"],[523,27,527,27],[523,29,527,29,"fieldOrder"],[523,39,527,39],[523,42,527,42,"_1n"],[523,45,527,45],[523,46,527,46],[523,49,527,49,"_1n"],[523,52,527,52],[524,4,528,4],[524,11,528,11,"isLE"],[524,15,528,15],[524,18,528,18],[524,22,528,18,"numberToBytesLE"],[524,44,528,33],[524,46,528,34,"reduced"],[524,53,528,41],[524,55,528,43,"fieldLen"],[524,63,528,51],[524,64,528,52],[524,67,528,55],[524,71,528,55,"numberToBytesBE"],[524,93,528,70],[524,95,528,71,"reduced"],[524,102,528,78],[524,104,528,80,"fieldLen"],[524,112,528,88],[524,113,528,89],[525,2,529,0],[526,0,529,1],[526,3]],"functionMap":{"names":["<global>","mod","pow","pow2","invert","assertIsSquare","sqrt3mod4","sqrt5mod8","sqrt9mod16","<anonymous>","tonelliShanks","tonelliSlow","FpSqrt","isNegativeLE","validateField","FIELD_FIELDS.reduce$argument_0","FpPow","FpInvertBatch","nums.reduce$argument_0","nums.reduceRight$argument_0","FpDiv","FpLegendre","FpIsSquare","nLength","Field","f.create","f.isValid","f.is0","f.isValidNot0","f.isOdd","f.neg","f.eql","f.sqr","f.add","f.sub","f.mul","f.pow","f.div","f.sqrN","f.addN","f.subN","f.mulN","f.inv","f.toBytes","f.fromBytes","f.invertBatch","f.cmov","FpSqrtOdd","FpSqrtEven","hashToPrivateScalar","getFieldBytesLength","getMinHashLength","mapHashToField"],"mappings":"AAA;OCe;CDG;OEO;CFE;OGE;CHO;OIK;CJuB;AKC;CLG;AMK;CNK;AOC;CPS;AQG;WCO;KDa;CRC;OUQ;WC4B;KDmC;CVC;OYY;CZY;4BaE,iDb;OcO;qCCO;KDG;CdM;OgBM;ChBgB;OiBM;sCCG;KDK;qBEI;KFK;CjBE;OoBE;CpBE;OqBU;CrBW;OsBE;CtBG;OuBE;CvBO;OwBoB;gBCyC,wBD;iBEC;SFI;aGC,oBH;qBIE,sCJ;eKC,4BL;aMC,yBN;aOC,yBP;aQC,8BR;aSC,mCT;aUC,mCV;aWC,mCX;aYC,oCZ;aaC,kDb;ccE,kBd;ceC,uBf;cgBC,uBhB;ciBC,uBjB;akBC,2BlB;afE;aeI;iBmBC,2EnB;mBoBC;SpBqB;qBqBE,8BrB;csBG,wBtB;CxBG;O+Cc;C/CK;OgDC;ChDK;OiDO;CjDQ;OkDO;ClDK;OmDQ;CnDG;OoDc;CpDW"}},"type":"js/module"}]}