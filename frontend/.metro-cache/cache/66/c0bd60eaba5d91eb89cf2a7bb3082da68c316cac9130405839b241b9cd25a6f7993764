{"dependencies":[{"name":"./utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":65},"end":{"line":5,"column":74,"index":139}}],"key":"NIaSEHO1E48gsZc7jH9Ex1xTHgE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.hmac = exports.HMAC = void 0;\n  var _utils = require(_dependencyMap[0], \"./utils.js\");\n  /**\n   * HMAC: RFC2104 message authentication code.\n   * @module\n   */\n\n  class HMAC extends _utils.Hash {\n    constructor(hash, _key) {\n      super();\n      this.finished = false;\n      this.destroyed = false;\n      (0, _utils.ahash)(hash);\n      const key = (0, _utils.toBytes)(_key);\n      this.iHash = hash.create();\n      if (typeof this.iHash.update !== 'function') throw new Error('Expected instance of class which extends utils.Hash');\n      this.blockLen = this.iHash.blockLen;\n      this.outputLen = this.iHash.outputLen;\n      const blockLen = this.blockLen;\n      const pad = new Uint8Array(blockLen);\n      // blockLen can be bigger than outputLen\n      pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n      for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n      this.iHash.update(pad);\n      // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n      this.oHash = hash.create();\n      // Undo internal XOR && apply outer XOR\n      for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n      this.oHash.update(pad);\n      (0, _utils.clean)(pad);\n    }\n    update(buf) {\n      (0, _utils.aexists)(this);\n      this.iHash.update(buf);\n      return this;\n    }\n    digestInto(out) {\n      (0, _utils.aexists)(this);\n      (0, _utils.abytes)(out, this.outputLen);\n      this.finished = true;\n      this.iHash.digestInto(out);\n      this.oHash.update(out);\n      this.oHash.digestInto(out);\n      this.destroy();\n    }\n    digest() {\n      const out = new Uint8Array(this.oHash.outputLen);\n      this.digestInto(out);\n      return out;\n    }\n    _cloneInto(to) {\n      // Create new instance without calling constructor since key already in state and we don't know it.\n      to || (to = Object.create(Object.getPrototypeOf(this), {}));\n      const {\n        oHash,\n        iHash,\n        finished,\n        destroyed,\n        blockLen,\n        outputLen\n      } = this;\n      to = to;\n      to.finished = finished;\n      to.destroyed = destroyed;\n      to.blockLen = blockLen;\n      to.outputLen = outputLen;\n      to.oHash = oHash._cloneInto(to.oHash);\n      to.iHash = iHash._cloneInto(to.iHash);\n      return to;\n    }\n    clone() {\n      return this._cloneInto();\n    }\n    destroy() {\n      this.destroyed = true;\n      this.oHash.destroy();\n      this.iHash.destroy();\n    }\n  }\n  /**\n   * HMAC: RFC2104 message authentication code.\n   * @param hash - function that would be used e.g. sha256\n   * @param key - message key\n   * @param message - message data\n   * @example\n   * import { hmac } from '@noble/hashes/hmac';\n   * import { sha256 } from '@noble/hashes/sha2';\n   * const mac1 = hmac(sha256, 'key', 'message');\n   */\n  exports.HMAC = HMAC;\n  const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\n  exports.hmac = hmac;\n  hmac.create = (hash, key) => new HMAC(hash, key);\n});","lineCount":98,"map":[[6,2,5,0],[6,6,5,0,"_utils"],[6,12,5,0],[6,15,5,0,"require"],[6,22,5,0],[6,23,5,0,"_dependencyMap"],[6,37,5,0],[7,2,1,0],[8,0,2,0],[9,0,3,0],[10,0,4,0],[12,2,6,7],[12,8,6,13,"HMAC"],[12,12,6,17],[12,21,6,26,"Hash"],[12,32,6,30],[12,33,6,31],[13,4,7,4,"constructor"],[13,15,7,15,"constructor"],[13,16,7,16,"hash"],[13,20,7,20],[13,22,7,22,"_key"],[13,26,7,26],[13,28,7,28],[14,6,8,8],[14,11,8,13],[14,12,8,14],[14,13,8,15],[15,6,9,8],[15,10,9,12],[15,11,9,13,"finished"],[15,19,9,21],[15,22,9,24],[15,27,9,29],[16,6,10,8],[16,10,10,12],[16,11,10,13,"destroyed"],[16,20,10,22],[16,23,10,25],[16,28,10,30],[17,6,11,8],[17,10,11,8,"ahash"],[17,22,11,13],[17,24,11,14,"hash"],[17,28,11,18],[17,29,11,19],[18,6,12,8],[18,12,12,14,"key"],[18,15,12,17],[18,18,12,20],[18,22,12,20,"toBytes"],[18,36,12,27],[18,38,12,28,"_key"],[18,42,12,32],[18,43,12,33],[19,6,13,8],[19,10,13,12],[19,11,13,13,"iHash"],[19,16,13,18],[19,19,13,21,"hash"],[19,23,13,25],[19,24,13,26,"create"],[19,30,13,32],[19,31,13,33],[19,32,13,34],[20,6,14,8],[20,10,14,12],[20,17,14,19],[20,21,14,23],[20,22,14,24,"iHash"],[20,27,14,29],[20,28,14,30,"update"],[20,34,14,36],[20,39,14,41],[20,49,14,51],[20,51,15,12],[20,57,15,18],[20,61,15,22,"Error"],[20,66,15,27],[20,67,15,28],[20,120,15,81],[20,121,15,82],[21,6,16,8],[21,10,16,12],[21,11,16,13,"blockLen"],[21,19,16,21],[21,22,16,24],[21,26,16,28],[21,27,16,29,"iHash"],[21,32,16,34],[21,33,16,35,"blockLen"],[21,41,16,43],[22,6,17,8],[22,10,17,12],[22,11,17,13,"outputLen"],[22,20,17,22],[22,23,17,25],[22,27,17,29],[22,28,17,30,"iHash"],[22,33,17,35],[22,34,17,36,"outputLen"],[22,43,17,45],[23,6,18,8],[23,12,18,14,"blockLen"],[23,20,18,22],[23,23,18,25],[23,27,18,29],[23,28,18,30,"blockLen"],[23,36,18,38],[24,6,19,8],[24,12,19,14,"pad"],[24,15,19,17],[24,18,19,20],[24,22,19,24,"Uint8Array"],[24,32,19,34],[24,33,19,35,"blockLen"],[24,41,19,43],[24,42,19,44],[25,6,20,8],[26,6,21,8,"pad"],[26,9,21,11],[26,10,21,12,"set"],[26,13,21,15],[26,14,21,16,"key"],[26,17,21,19],[26,18,21,20,"length"],[26,24,21,26],[26,27,21,29,"blockLen"],[26,35,21,37],[26,38,21,40,"hash"],[26,42,21,44],[26,43,21,45,"create"],[26,49,21,51],[26,50,21,52],[26,51,21,53],[26,52,21,54,"update"],[26,58,21,60],[26,59,21,61,"key"],[26,62,21,64],[26,63,21,65],[26,64,21,66,"digest"],[26,70,21,72],[26,71,21,73],[26,72,21,74],[26,75,21,77,"key"],[26,78,21,80],[26,79,21,81],[27,6,22,8],[27,11,22,13],[27,15,22,17,"i"],[27,16,22,18],[27,19,22,21],[27,20,22,22],[27,22,22,24,"i"],[27,23,22,25],[27,26,22,28,"pad"],[27,29,22,31],[27,30,22,32,"length"],[27,36,22,38],[27,38,22,40,"i"],[27,39,22,41],[27,41,22,43],[27,43,23,12,"pad"],[27,46,23,15],[27,47,23,16,"i"],[27,48,23,17],[27,49,23,18],[27,53,23,22],[27,57,23,26],[28,6,24,8],[28,10,24,12],[28,11,24,13,"iHash"],[28,16,24,18],[28,17,24,19,"update"],[28,23,24,25],[28,24,24,26,"pad"],[28,27,24,29],[28,28,24,30],[29,6,25,8],[30,6,26,8],[30,10,26,12],[30,11,26,13,"oHash"],[30,16,26,18],[30,19,26,21,"hash"],[30,23,26,25],[30,24,26,26,"create"],[30,30,26,32],[30,31,26,33],[30,32,26,34],[31,6,27,8],[32,6,28,8],[32,11,28,13],[32,15,28,17,"i"],[32,16,28,18],[32,19,28,21],[32,20,28,22],[32,22,28,24,"i"],[32,23,28,25],[32,26,28,28,"pad"],[32,29,28,31],[32,30,28,32,"length"],[32,36,28,38],[32,38,28,40,"i"],[32,39,28,41],[32,41,28,43],[32,43,29,12,"pad"],[32,46,29,15],[32,47,29,16,"i"],[32,48,29,17],[32,49,29,18],[32,53,29,22],[32,57,29,26],[32,60,29,29],[32,64,29,33],[33,6,30,8],[33,10,30,12],[33,11,30,13,"oHash"],[33,16,30,18],[33,17,30,19,"update"],[33,23,30,25],[33,24,30,26,"pad"],[33,27,30,29],[33,28,30,30],[34,6,31,8],[34,10,31,8,"clean"],[34,22,31,13],[34,24,31,14,"pad"],[34,27,31,17],[34,28,31,18],[35,4,32,4],[36,4,33,4,"update"],[36,10,33,10,"update"],[36,11,33,11,"buf"],[36,14,33,14],[36,16,33,16],[37,6,34,8],[37,10,34,8,"aexists"],[37,24,34,15],[37,26,34,16],[37,30,34,20],[37,31,34,21],[38,6,35,8],[38,10,35,12],[38,11,35,13,"iHash"],[38,16,35,18],[38,17,35,19,"update"],[38,23,35,25],[38,24,35,26,"buf"],[38,27,35,29],[38,28,35,30],[39,6,36,8],[39,13,36,15],[39,17,36,19],[40,4,37,4],[41,4,38,4,"digestInto"],[41,14,38,14,"digestInto"],[41,15,38,15,"out"],[41,18,38,18],[41,20,38,20],[42,6,39,8],[42,10,39,8,"aexists"],[42,24,39,15],[42,26,39,16],[42,30,39,20],[42,31,39,21],[43,6,40,8],[43,10,40,8,"abytes"],[43,23,40,14],[43,25,40,15,"out"],[43,28,40,18],[43,30,40,20],[43,34,40,24],[43,35,40,25,"outputLen"],[43,44,40,34],[43,45,40,35],[44,6,41,8],[44,10,41,12],[44,11,41,13,"finished"],[44,19,41,21],[44,22,41,24],[44,26,41,28],[45,6,42,8],[45,10,42,12],[45,11,42,13,"iHash"],[45,16,42,18],[45,17,42,19,"digestInto"],[45,27,42,29],[45,28,42,30,"out"],[45,31,42,33],[45,32,42,34],[46,6,43,8],[46,10,43,12],[46,11,43,13,"oHash"],[46,16,43,18],[46,17,43,19,"update"],[46,23,43,25],[46,24,43,26,"out"],[46,27,43,29],[46,28,43,30],[47,6,44,8],[47,10,44,12],[47,11,44,13,"oHash"],[47,16,44,18],[47,17,44,19,"digestInto"],[47,27,44,29],[47,28,44,30,"out"],[47,31,44,33],[47,32,44,34],[48,6,45,8],[48,10,45,12],[48,11,45,13,"destroy"],[48,18,45,20],[48,19,45,21],[48,20,45,22],[49,4,46,4],[50,4,47,4,"digest"],[50,10,47,10,"digest"],[50,11,47,10],[50,13,47,13],[51,6,48,8],[51,12,48,14,"out"],[51,15,48,17],[51,18,48,20],[51,22,48,24,"Uint8Array"],[51,32,48,34],[51,33,48,35],[51,37,48,39],[51,38,48,40,"oHash"],[51,43,48,45],[51,44,48,46,"outputLen"],[51,53,48,55],[51,54,48,56],[52,6,49,8],[52,10,49,12],[52,11,49,13,"digestInto"],[52,21,49,23],[52,22,49,24,"out"],[52,25,49,27],[52,26,49,28],[53,6,50,8],[53,13,50,15,"out"],[53,16,50,18],[54,4,51,4],[55,4,52,4,"_cloneInto"],[55,14,52,14,"_cloneInto"],[55,15,52,15,"to"],[55,17,52,17],[55,19,52,19],[56,6,53,8],[57,6,54,8,"to"],[57,8,54,10],[57,13,54,15,"to"],[57,15,54,17],[57,18,54,20,"Object"],[57,24,54,26],[57,25,54,27,"create"],[57,31,54,33],[57,32,54,34,"Object"],[57,38,54,40],[57,39,54,41,"getPrototypeOf"],[57,53,54,55],[57,54,54,56],[57,58,54,60],[57,59,54,61],[57,61,54,63],[57,62,54,64],[57,63,54,65],[57,64,54,66],[57,65,54,67],[58,6,55,8],[58,12,55,14],[59,8,55,16,"oHash"],[59,13,55,21],[60,8,55,23,"iHash"],[60,13,55,28],[61,8,55,30,"finished"],[61,16,55,38],[62,8,55,40,"destroyed"],[62,17,55,49],[63,8,55,51,"blockLen"],[63,16,55,59],[64,8,55,61,"outputLen"],[65,6,55,71],[65,7,55,72],[65,10,55,75],[65,14,55,79],[66,6,56,8,"to"],[66,8,56,10],[66,11,56,13,"to"],[66,13,56,15],[67,6,57,8,"to"],[67,8,57,10],[67,9,57,11,"finished"],[67,17,57,19],[67,20,57,22,"finished"],[67,28,57,30],[68,6,58,8,"to"],[68,8,58,10],[68,9,58,11,"destroyed"],[68,18,58,20],[68,21,58,23,"destroyed"],[68,30,58,32],[69,6,59,8,"to"],[69,8,59,10],[69,9,59,11,"blockLen"],[69,17,59,19],[69,20,59,22,"blockLen"],[69,28,59,30],[70,6,60,8,"to"],[70,8,60,10],[70,9,60,11,"outputLen"],[70,18,60,20],[70,21,60,23,"outputLen"],[70,30,60,32],[71,6,61,8,"to"],[71,8,61,10],[71,9,61,11,"oHash"],[71,14,61,16],[71,17,61,19,"oHash"],[71,22,61,24],[71,23,61,25,"_cloneInto"],[71,33,61,35],[71,34,61,36,"to"],[71,36,61,38],[71,37,61,39,"oHash"],[71,42,61,44],[71,43,61,45],[72,6,62,8,"to"],[72,8,62,10],[72,9,62,11,"iHash"],[72,14,62,16],[72,17,62,19,"iHash"],[72,22,62,24],[72,23,62,25,"_cloneInto"],[72,33,62,35],[72,34,62,36,"to"],[72,36,62,38],[72,37,62,39,"iHash"],[72,42,62,44],[72,43,62,45],[73,6,63,8],[73,13,63,15,"to"],[73,15,63,17],[74,4,64,4],[75,4,65,4,"clone"],[75,9,65,9,"clone"],[75,10,65,9],[75,12,65,12],[76,6,66,8],[76,13,66,15],[76,17,66,19],[76,18,66,20,"_cloneInto"],[76,28,66,30],[76,29,66,31],[76,30,66,32],[77,4,67,4],[78,4,68,4,"destroy"],[78,11,68,11,"destroy"],[78,12,68,11],[78,14,68,14],[79,6,69,8],[79,10,69,12],[79,11,69,13,"destroyed"],[79,20,69,22],[79,23,69,25],[79,27,69,29],[80,6,70,8],[80,10,70,12],[80,11,70,13,"oHash"],[80,16,70,18],[80,17,70,19,"destroy"],[80,24,70,26],[80,25,70,27],[80,26,70,28],[81,6,71,8],[81,10,71,12],[81,11,71,13,"iHash"],[81,16,71,18],[81,17,71,19,"destroy"],[81,24,71,26],[81,25,71,27],[81,26,71,28],[82,4,72,4],[83,2,73,0],[84,2,74,0],[85,0,75,0],[86,0,76,0],[87,0,77,0],[88,0,78,0],[89,0,79,0],[90,0,80,0],[91,0,81,0],[92,0,82,0],[93,0,83,0],[94,2,74,0,"exports"],[94,9,74,0],[94,10,74,0,"HMAC"],[94,14,74,0],[94,17,74,0,"HMAC"],[94,21,74,0],[95,2,84,7],[95,8,84,13,"hmac"],[95,12,84,17],[95,15,84,20,"hmac"],[95,16,84,21,"hash"],[95,20,84,25],[95,22,84,27,"key"],[95,25,84,30],[95,27,84,32,"message"],[95,34,84,39],[95,39,84,44],[95,43,84,48,"HMAC"],[95,47,84,52],[95,48,84,53,"hash"],[95,52,84,57],[95,54,84,59,"key"],[95,57,84,62],[95,58,84,63],[95,59,84,64,"update"],[95,65,84,70],[95,66,84,71,"message"],[95,73,84,78],[95,74,84,79],[95,75,84,80,"digest"],[95,81,84,86],[95,82,84,87],[95,83,84,88],[96,2,84,89,"exports"],[96,9,84,89],[96,10,84,89,"hmac"],[96,14,84,89],[96,17,84,89,"hmac"],[96,21,84,89],[97,2,85,0,"hmac"],[97,6,85,4],[97,7,85,5,"create"],[97,13,85,11],[97,16,85,14],[97,17,85,15,"hash"],[97,21,85,19],[97,23,85,21,"key"],[97,26,85,24],[97,31,85,29],[97,35,85,33,"HMAC"],[97,39,85,37],[97,40,85,38,"hash"],[97,44,85,42],[97,46,85,44,"key"],[97,49,85,47],[97,50,85,48],[98,0,85,49],[98,3]],"functionMap":{"names":["<global>","HMAC","HMAC#constructor","HMAC#update","HMAC#digestInto","HMAC#digest","HMAC#_cloneInto","HMAC#clone","HMAC#destroy","hmac","create"],"mappings":"AAA;OCK;ICC;KDyB;IEC;KFI;IGC;KHQ;IIC;KJI;IKC;KLY;IMC;KNE;IOC;KPI;CDC;oBSW,oET;cUC,kCV"}},"type":"js/module"}]}