{"dependencies":[{"name":"../utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":7,"column":0,"index":176},"end":{"line":7,"column":62,"index":238}}],"key":"dGswK136diHRCgUa8xpQUn/UMbc=","exportNames":["*"]}},{"name":"./modular.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":239},"end":{"line":8,"column":76,"index":315}}],"key":"9k+FDNYf3zXm2KDVSy5nBT9psY4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports._createCurveFields = _createCurveFields;\n  exports.mulEndoUnsafe = mulEndoUnsafe;\n  exports.negateCt = negateCt;\n  exports.normalizeZ = normalizeZ;\n  exports.pippenger = pippenger;\n  exports.precomputeMSMUnsafe = precomputeMSMUnsafe;\n  exports.validateBasic = validateBasic;\n  exports.wNAF = void 0;\n  var _utils = require(_dependencyMap[0], \"../utils.js\");\n  var _modular = require(_dependencyMap[1], \"./modular.js\");\n  /**\n   * Methods for elliptic curve multiplication by scalars.\n   * Contains wNAF, pippenger.\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n  const _0n = BigInt(0);\n  const _1n = BigInt(1);\n  function negateCt(condition, item) {\n    const neg = item.negate();\n    return condition ? neg : item;\n  }\n  /**\n   * Takes a bunch of Projective Points but executes only one\n   * inversion on all of them. Inversion is very slow operation,\n   * so this improves performance massively.\n   * Optimization: converts a list of projective points to a list of identical points with Z=1.\n   */\n  function normalizeZ(c, points) {\n    const invertedZs = (0, _modular.FpInvertBatch)(c.Fp, points.map(p => p.Z));\n    return points.map((p, i) => c.fromAffine(p.toAffine(invertedZs[i])));\n  }\n  function validateW(W, bits) {\n    if (!Number.isSafeInteger(W) || W <= 0 || W > bits) throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n  }\n  function calcWOpts(W, scalarBits) {\n    validateW(W, scalarBits);\n    const windows = Math.ceil(scalarBits / W) + 1; // W=8 33. Not 32, because we skip zero\n    const windowSize = 2 ** (W - 1); // W=8 128. Not 256, because we skip zero\n    const maxNumber = 2 ** W; // W=8 256\n    const mask = (0, _utils.bitMask)(W); // W=8 255 == mask 0b11111111\n    const shiftBy = BigInt(W); // W=8 8\n    return {\n      windows,\n      windowSize,\n      mask,\n      maxNumber,\n      shiftBy\n    };\n  }\n  function calcOffsets(n, window, wOpts) {\n    const {\n      windowSize,\n      mask,\n      maxNumber,\n      shiftBy\n    } = wOpts;\n    let wbits = Number(n & mask); // extract W bits.\n    let nextN = n >> shiftBy; // shift number by W bits.\n    // What actually happens here:\n    // const highestBit = Number(mask ^ (mask >> 1n));\n    // let wbits2 = wbits - 1; // skip zero\n    // if (wbits2 & highestBit) { wbits2 ^= Number(mask); // (~);\n    // split if bits > max: +224 => 256-32\n    if (wbits > windowSize) {\n      // we skip zero, which means instead of `>= size-1`, we do `> size`\n      wbits -= maxNumber; // -32, can be maxNumber - wbits, but then we need to set isNeg here.\n      nextN += _1n; // +256 (carry)\n    }\n    const offsetStart = window * windowSize;\n    const offset = offsetStart + Math.abs(wbits) - 1; // -1 because we skip zero\n    const isZero = wbits === 0; // is current window slice a 0?\n    const isNeg = wbits < 0; // is current window slice negative?\n    const isNegF = window % 2 !== 0; // fake random statement for noise\n    const offsetF = offsetStart; // fake offset for noise\n    return {\n      nextN,\n      offset,\n      isZero,\n      isNeg,\n      isNegF,\n      offsetF\n    };\n  }\n  function validateMSMPoints(points, c) {\n    if (!Array.isArray(points)) throw new Error('array expected');\n    points.forEach((p, i) => {\n      if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\n    });\n  }\n  function validateMSMScalars(scalars, field) {\n    if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\n    scalars.forEach((s, i) => {\n      if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\n    });\n  }\n  // Since points in different groups cannot be equal (different object constructor),\n  // we can have single place to store precomputes.\n  // Allows to make points frozen / immutable.\n  const pointPrecomputes = new WeakMap();\n  const pointWindowSizes = new WeakMap();\n  function getW(P) {\n    // To disable precomputes:\n    // return 1;\n    return pointWindowSizes.get(P) || 1;\n  }\n  function assert0(n) {\n    if (n !== _0n) throw new Error('invalid wNAF');\n  }\n  /**\n   * Elliptic curve multiplication of Point by scalar. Fragile.\n   * Table generation takes **30MB of ram and 10ms on high-end CPU**,\n   * but may take much longer on slow devices. Actual generation will happen on\n   * first call of `multiply()`. By default, `BASE` point is precomputed.\n   *\n   * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n   * Creates precomputation tables for fast multiplication:\n   * - private scalar is split by fixed size windows of W bits\n   * - every window point is collected from window's table & added to accumulator\n   * - since windows are different, same point inside tables won't be accessed more than once per calc\n   * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n   * - +1 window is neccessary for wNAF\n   * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n   *\n   * @todo Research returning 2d JS array of windows, instead of a single window.\n   * This would allow windows to be in different memory locations\n   */\n  class wNAF {\n    // Parametrized with a given Point class (not individual point)\n    constructor(Point, bits) {\n      this.BASE = Point.BASE;\n      this.ZERO = Point.ZERO;\n      this.Fn = Point.Fn;\n      this.bits = bits;\n    }\n    // non-const time multiplication ladder\n    _unsafeLadder(elm, n, p = this.ZERO) {\n      let d = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    }\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @param point Point instance\n     * @param W window size\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(point, W) {\n      const {\n        windows,\n        windowSize\n      } = calcWOpts(W, this.bits);\n      const points = [];\n      let p = point;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // i=1, bc we skip 0\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    }\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * More compact implementation:\n     * https://github.com/paulmillr/noble-secp256k1/blob/47cb1669b6e506ad66b35fe7d76132ae97465da2/index.ts#L502-L541\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W, precomputes, n) {\n      // Scalar should be smaller than field order\n      if (!this.Fn.isValid(n)) throw new Error('invalid scalar');\n      // Accumulators\n      let p = this.ZERO;\n      let f = this.BASE;\n      // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n      // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n      // there is negate now: it is possible that negated element from low value\n      // would be the same as high element, which will create carry into next window.\n      // It's not obvious how this can fail, but still worth investigating later.\n      const wo = calcWOpts(W, this.bits);\n      for (let window = 0; window < wo.windows; window++) {\n        // (n === _0n) is handled and not early-exited. isEven and offsetF are used for noise\n        const {\n          nextN,\n          offset,\n          isZero,\n          isNeg,\n          isNegF,\n          offsetF\n        } = calcOffsets(n, window, wo);\n        n = nextN;\n        if (isZero) {\n          // bits are 0: add garbage to fake point\n          // Important part for const-time getPublicKey: add random \"noise\" point to f.\n          f = f.add(negateCt(isNegF, precomputes[offsetF]));\n        } else {\n          // bits are 1: add to result point\n          p = p.add(negateCt(isNeg, precomputes[offset]));\n        }\n      }\n      assert0(n);\n      // Return both real and fake points: JIT won't eliminate f.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return {\n        p,\n        f\n      };\n    }\n    /**\n     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param acc accumulator point to add result of multiplication\n     * @returns point\n     */\n    wNAFUnsafe(W, precomputes, n, acc = this.ZERO) {\n      const wo = calcWOpts(W, this.bits);\n      for (let window = 0; window < wo.windows; window++) {\n        if (n === _0n) break; // Early-exit, skip 0 value\n        const {\n          nextN,\n          offset,\n          isZero,\n          isNeg\n        } = calcOffsets(n, window, wo);\n        n = nextN;\n        if (isZero) {\n          // Window bits are 0: skip processing.\n          // Move to next window.\n          continue;\n        } else {\n          const item = precomputes[offset];\n          acc = acc.add(isNeg ? item.negate() : item); // Re-using acc allows to save adds in MSM\n        }\n      }\n      assert0(n);\n      return acc;\n    }\n    getPrecomputes(W, point, transform) {\n      // Calculate precomputes on a first run, reuse them after\n      let comp = pointPrecomputes.get(point);\n      if (!comp) {\n        comp = this.precomputeWindow(point, W);\n        if (W !== 1) {\n          // Doing transform outside of if brings 15% perf hit\n          if (typeof transform === 'function') comp = transform(comp);\n          pointPrecomputes.set(point, comp);\n        }\n      }\n      return comp;\n    }\n    cached(point, scalar, transform) {\n      const W = getW(point);\n      return this.wNAF(W, this.getPrecomputes(W, point, transform), scalar);\n    }\n    unsafe(point, scalar, transform, prev) {\n      const W = getW(point);\n      if (W === 1) return this._unsafeLadder(point, scalar, prev); // For W=1 ladder is ~x2 faster\n      return this.wNAFUnsafe(W, this.getPrecomputes(W, point, transform), scalar, prev);\n    }\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    createCache(P, W) {\n      validateW(W, this.bits);\n      pointWindowSizes.set(P, W);\n      pointPrecomputes.delete(P);\n    }\n    hasCache(elm) {\n      return getW(elm) !== 1;\n    }\n  }\n  /**\n   * Endomorphism-specific multiplication for Koblitz curves.\n   * Cost: 128 dbl, 0-256 adds.\n   */\n  exports.wNAF = wNAF;\n  function mulEndoUnsafe(Point, point, k1, k2) {\n    let acc = point;\n    let p1 = Point.ZERO;\n    let p2 = Point.ZERO;\n    while (k1 > _0n || k2 > _0n) {\n      if (k1 & _1n) p1 = p1.add(acc);\n      if (k2 & _1n) p2 = p2.add(acc);\n      acc = acc.double();\n      k1 >>= _1n;\n      k2 >>= _1n;\n    }\n    return {\n      p1,\n      p2\n    };\n  }\n  /**\n   * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n   * 30x faster vs naive addition on L=4096, 10x faster than precomputes.\n   * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n   * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n   * @param c Curve Point constructor\n   * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n   * @param points array of L curve points\n   * @param scalars array of L scalars (aka secret keys / bigints)\n   */\n  function pippenger(c, fieldN, points, scalars) {\n    // If we split scalars by some window (let's say 8 bits), every chunk will only\n    // take 256 buckets even if there are 4096 scalars, also re-uses double.\n    // TODO:\n    // - https://eprint.iacr.org/2024/750.pdf\n    // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n    // 0 is accepted in scalars\n    validateMSMPoints(points, c);\n    validateMSMScalars(scalars, fieldN);\n    const plength = points.length;\n    const slength = scalars.length;\n    if (plength !== slength) throw new Error('arrays of points and scalars must have equal length');\n    // if (plength === 0) throw new Error('array must be of length >= 2');\n    const zero = c.ZERO;\n    const wbits = (0, _utils.bitLen)(BigInt(plength));\n    let windowSize = 1; // bits\n    if (wbits > 12) windowSize = wbits - 3;else if (wbits > 4) windowSize = wbits - 2;else if (wbits > 0) windowSize = 2;\n    const MASK = (0, _utils.bitMask)(windowSize);\n    const buckets = new Array(Number(MASK) + 1).fill(zero); // +1 for zero array\n    const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n    let sum = zero;\n    for (let i = lastBits; i >= 0; i -= windowSize) {\n      buckets.fill(zero);\n      for (let j = 0; j < slength; j++) {\n        const scalar = scalars[j];\n        const wbits = Number(scalar >> BigInt(i) & MASK);\n        buckets[wbits] = buckets[wbits].add(points[j]);\n      }\n      let resI = zero; // not using this will do small speed-up, but will lose ct\n      // Skip first bucket, because it is zero\n      for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n        sumI = sumI.add(buckets[j]);\n        resI = resI.add(sumI);\n      }\n      sum = sum.add(resI);\n      if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n    }\n    return sum;\n  }\n  /**\n   * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n   * @param c Curve Point constructor\n   * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n   * @param points array of L curve points\n   * @returns function which multiplies points with scaars\n   */\n  function precomputeMSMUnsafe(c, fieldN, points, windowSize) {\n    /**\n     * Performance Analysis of Window-based Precomputation\n     *\n     * Base Case (256-bit scalar, 8-bit window):\n     * - Standard precomputation requires:\n     *   - 31 additions per scalar × 256 scalars = 7,936 ops\n     *   - Plus 255 summary additions = 8,191 total ops\n     *   Note: Summary additions can be optimized via accumulator\n     *\n     * Chunked Precomputation Analysis:\n     * - Using 32 chunks requires:\n     *   - 255 additions per chunk\n     *   - 256 doublings\n     *   - Total: (255 × 32) + 256 = 8,416 ops\n     *\n     * Memory Usage Comparison:\n     * Window Size | Standard Points | Chunked Points\n     * ------------|-----------------|---------------\n     *     4-bit   |     520         |      15\n     *     8-bit   |    4,224        |     255\n     *    10-bit   |   13,824        |   1,023\n     *    16-bit   |  557,056        |  65,535\n     *\n     * Key Advantages:\n     * 1. Enables larger window sizes due to reduced memory overhead\n     * 2. More efficient for smaller scalar counts:\n     *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n     *    - ~2x faster than standard 8,191 ops\n     *\n     * Limitations:\n     * - Not suitable for plain precomputes (requires 256 constant doublings)\n     * - Performance degrades with larger scalar counts:\n     *   - Optimal for ~256 scalars\n     *   - Less efficient for 4096+ scalars (Pippenger preferred)\n     */\n    validateW(windowSize, fieldN.BITS);\n    validateMSMPoints(points, c);\n    const zero = c.ZERO;\n    const tableSize = 2 ** windowSize - 1; // table size (without zero)\n    const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n    const MASK = (0, _utils.bitMask)(windowSize);\n    const tables = points.map(p => {\n      const res = [];\n      for (let i = 0, acc = p; i < tableSize; i++) {\n        res.push(acc);\n        acc = acc.add(p);\n      }\n      return res;\n    });\n    return scalars => {\n      validateMSMScalars(scalars, fieldN);\n      if (scalars.length > points.length) throw new Error('array of scalars must be smaller than array of points');\n      let res = zero;\n      for (let i = 0; i < chunks; i++) {\n        // No need to double if accumulator is still zero.\n        if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\n        const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n        for (let j = 0; j < scalars.length; j++) {\n          const n = scalars[j];\n          const curr = Number(n >> shiftBy & MASK);\n          if (!curr) continue; // skip zero scalars chunks\n          res = res.add(tables[j][curr - 1]);\n        }\n      }\n      return res;\n    };\n  }\n  // TODO: remove\n  /** @deprecated */\n  function validateBasic(curve) {\n    (0, _modular.validateField)(curve.Fp);\n    (0, _utils.validateObject)(curve, {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field'\n    }, {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger'\n    });\n    // Set defaults\n    return Object.freeze({\n      ...(0, _modular.nLength)(curve.n, curve.nBitLength),\n      ...curve,\n      ...{\n        p: curve.Fp.ORDER\n      }\n    });\n  }\n  function createField(order, field, isLE) {\n    if (field) {\n      if (field.ORDER !== order) throw new Error('Field.ORDER must match order: Fp == p, Fn == n');\n      (0, _modular.validateField)(field);\n      return field;\n    } else {\n      return (0, _modular.Field)(order, {\n        isLE\n      });\n    }\n  }\n  /** Validates CURVE opts and creates fields */\n  function _createCurveFields(type, CURVE, curveOpts = {}, FpFnLE) {\n    if (FpFnLE === undefined) FpFnLE = type === 'edwards';\n    if (!CURVE || typeof CURVE !== 'object') throw new Error(`expected valid ${type} CURVE object`);\n    for (const p of ['p', 'n', 'h']) {\n      const val = CURVE[p];\n      if (!(typeof val === 'bigint' && val > _0n)) throw new Error(`CURVE.${p} must be positive bigint`);\n    }\n    const Fp = createField(CURVE.p, curveOpts.Fp, FpFnLE);\n    const Fn = createField(CURVE.n, curveOpts.Fn, FpFnLE);\n    const _b = type === 'weierstrass' ? 'b' : 'd';\n    const params = ['Gx', 'Gy', 'a', _b];\n    for (const p of params) {\n      // @ts-ignore\n      if (!Fp.isValid(CURVE[p])) throw new Error(`CURVE.${p} must be valid field element of CURVE.Fp`);\n    }\n    CURVE = Object.freeze(Object.assign({}, CURVE));\n    return {\n      CURVE,\n      Fp,\n      Fn\n    };\n  }\n});","lineCount":493,"map":[[13,2,7,0],[13,6,7,0,"_utils"],[13,12,7,0],[13,15,7,0,"require"],[13,22,7,0],[13,23,7,0,"_dependencyMap"],[13,37,7,0],[14,2,8,0],[14,6,8,0,"_modular"],[14,14,8,0],[14,17,8,0,"require"],[14,24,8,0],[14,25,8,0,"_dependencyMap"],[14,39,8,0],[15,2,1,0],[16,0,2,0],[17,0,3,0],[18,0,4,0],[19,0,5,0],[20,2,6,0],[22,2,9,0],[22,8,9,6,"_0n"],[22,11,9,9],[22,14,9,12,"BigInt"],[22,20,9,18],[22,21,9,19],[22,22,9,20],[22,23,9,21],[23,2,10,0],[23,8,10,6,"_1n"],[23,11,10,9],[23,14,10,12,"BigInt"],[23,20,10,18],[23,21,10,19],[23,22,10,20],[23,23,10,21],[24,2,11,7],[24,11,11,16,"negateCt"],[24,19,11,24,"negateCt"],[24,20,11,25,"condition"],[24,29,11,34],[24,31,11,36,"item"],[24,35,11,40],[24,37,11,42],[25,4,12,4],[25,10,12,10,"neg"],[25,13,12,13],[25,16,12,16,"item"],[25,20,12,20],[25,21,12,21,"negate"],[25,27,12,27],[25,28,12,28],[25,29,12,29],[26,4,13,4],[26,11,13,11,"condition"],[26,20,13,20],[26,23,13,23,"neg"],[26,26,13,26],[26,29,13,29,"item"],[26,33,13,33],[27,2,14,0],[28,2,15,0],[29,0,16,0],[30,0,17,0],[31,0,18,0],[32,0,19,0],[33,0,20,0],[34,2,21,7],[34,11,21,16,"normalizeZ"],[34,21,21,26,"normalizeZ"],[34,22,21,27,"c"],[34,23,21,28],[34,25,21,30,"points"],[34,31,21,36],[34,33,21,38],[35,4,22,4],[35,10,22,10,"invertedZs"],[35,20,22,20],[35,23,22,23],[35,27,22,23,"FpInvertBatch"],[35,49,22,36],[35,51,22,37,"c"],[35,52,22,38],[35,53,22,39,"Fp"],[35,55,22,41],[35,57,22,43,"points"],[35,63,22,49],[35,64,22,50,"map"],[35,67,22,53],[35,68,22,55,"p"],[35,69,22,56],[35,73,22,61,"p"],[35,74,22,62],[35,75,22,63,"Z"],[35,76,22,64],[35,77,22,65],[35,78,22,66],[36,4,23,4],[36,11,23,11,"points"],[36,17,23,17],[36,18,23,18,"map"],[36,21,23,21],[36,22,23,22],[36,23,23,23,"p"],[36,24,23,24],[36,26,23,26,"i"],[36,27,23,27],[36,32,23,32,"c"],[36,33,23,33],[36,34,23,34,"fromAffine"],[36,44,23,44],[36,45,23,45,"p"],[36,46,23,46],[36,47,23,47,"toAffine"],[36,55,23,55],[36,56,23,56,"invertedZs"],[36,66,23,66],[36,67,23,67,"i"],[36,68,23,68],[36,69,23,69],[36,70,23,70],[36,71,23,71],[36,72,23,72],[37,2,24,0],[38,2,25,0],[38,11,25,9,"validateW"],[38,20,25,18,"validateW"],[38,21,25,19,"W"],[38,22,25,20],[38,24,25,22,"bits"],[38,28,25,26],[38,30,25,28],[39,4,26,4],[39,8,26,8],[39,9,26,9,"Number"],[39,15,26,15],[39,16,26,16,"isSafeInteger"],[39,29,26,29],[39,30,26,30,"W"],[39,31,26,31],[39,32,26,32],[39,36,26,36,"W"],[39,37,26,37],[39,41,26,41],[39,42,26,42],[39,46,26,46,"W"],[39,47,26,47],[39,50,26,50,"bits"],[39,54,26,54],[39,56,27,8],[39,62,27,14],[39,66,27,18,"Error"],[39,71,27,23],[39,72,27,24],[39,108,27,60],[39,111,27,63,"bits"],[39,115,27,67],[39,118,27,70],[39,129,27,81],[39,132,27,84,"W"],[39,133,27,85],[39,134,27,86],[40,2,28,0],[41,2,29,0],[41,11,29,9,"calcWOpts"],[41,20,29,18,"calcWOpts"],[41,21,29,19,"W"],[41,22,29,20],[41,24,29,22,"scalarBits"],[41,34,29,32],[41,36,29,34],[42,4,30,4,"validateW"],[42,13,30,13],[42,14,30,14,"W"],[42,15,30,15],[42,17,30,17,"scalarBits"],[42,27,30,27],[42,28,30,28],[43,4,31,4],[43,10,31,10,"windows"],[43,17,31,17],[43,20,31,20,"Math"],[43,24,31,24],[43,25,31,25,"ceil"],[43,29,31,29],[43,30,31,30,"scalarBits"],[43,40,31,40],[43,43,31,43,"W"],[43,44,31,44],[43,45,31,45],[43,48,31,48],[43,49,31,49],[43,50,31,50],[43,51,31,51],[44,4,32,4],[44,10,32,10,"windowSize"],[44,20,32,20],[44,23,32,23],[44,24,32,24],[44,29,32,29,"W"],[44,30,32,30],[44,33,32,33],[44,34,32,34],[44,35,32,35],[44,36,32,36],[44,37,32,37],[45,4,33,4],[45,10,33,10,"maxNumber"],[45,19,33,19],[45,22,33,22],[45,23,33,23],[45,27,33,27,"W"],[45,28,33,28],[45,29,33,29],[45,30,33,30],[46,4,34,4],[46,10,34,10,"mask"],[46,14,34,14],[46,17,34,17],[46,21,34,17,"bitMask"],[46,35,34,24],[46,37,34,25,"W"],[46,38,34,26],[46,39,34,27],[46,40,34,28],[46,41,34,29],[47,4,35,4],[47,10,35,10,"shiftBy"],[47,17,35,17],[47,20,35,20,"BigInt"],[47,26,35,26],[47,27,35,27,"W"],[47,28,35,28],[47,29,35,29],[47,30,35,30],[47,31,35,31],[48,4,36,4],[48,11,36,11],[49,6,36,13,"windows"],[49,13,36,20],[50,6,36,22,"windowSize"],[50,16,36,32],[51,6,36,34,"mask"],[51,10,36,38],[52,6,36,40,"maxNumber"],[52,15,36,49],[53,6,36,51,"shiftBy"],[54,4,36,59],[54,5,36,60],[55,2,37,0],[56,2,38,0],[56,11,38,9,"calcOffsets"],[56,22,38,20,"calcOffsets"],[56,23,38,21,"n"],[56,24,38,22],[56,26,38,24,"window"],[56,32,38,30],[56,34,38,32,"wOpts"],[56,39,38,37],[56,41,38,39],[57,4,39,4],[57,10,39,10],[58,6,39,12,"windowSize"],[58,16,39,22],[59,6,39,24,"mask"],[59,10,39,28],[60,6,39,30,"maxNumber"],[60,15,39,39],[61,6,39,41,"shiftBy"],[62,4,39,49],[62,5,39,50],[62,8,39,53,"wOpts"],[62,13,39,58],[63,4,40,4],[63,8,40,8,"wbits"],[63,13,40,13],[63,16,40,16,"Number"],[63,22,40,22],[63,23,40,23,"n"],[63,24,40,24],[63,27,40,27,"mask"],[63,31,40,31],[63,32,40,32],[63,33,40,33],[63,34,40,34],[64,4,41,4],[64,8,41,8,"nextN"],[64,13,41,13],[64,16,41,16,"n"],[64,17,41,17],[64,21,41,21,"shiftBy"],[64,28,41,28],[64,29,41,29],[64,30,41,30],[65,4,42,4],[66,4,43,4],[67,4,44,4],[68,4,45,4],[69,4,46,4],[70,4,47,4],[70,8,47,8,"wbits"],[70,13,47,13],[70,16,47,16,"windowSize"],[70,26,47,26],[70,28,47,28],[71,6,48,8],[72,6,49,8,"wbits"],[72,11,49,13],[72,15,49,17,"maxNumber"],[72,24,49,26],[72,25,49,27],[72,26,49,28],[73,6,50,8,"nextN"],[73,11,50,13],[73,15,50,17,"_1n"],[73,18,50,20],[73,19,50,21],[73,20,50,22],[74,4,51,4],[75,4,52,4],[75,10,52,10,"offsetStart"],[75,21,52,21],[75,24,52,24,"window"],[75,30,52,30],[75,33,52,33,"windowSize"],[75,43,52,43],[76,4,53,4],[76,10,53,10,"offset"],[76,16,53,16],[76,19,53,19,"offsetStart"],[76,30,53,30],[76,33,53,33,"Math"],[76,37,53,37],[76,38,53,38,"abs"],[76,41,53,41],[76,42,53,42,"wbits"],[76,47,53,47],[76,48,53,48],[76,51,53,51],[76,52,53,52],[76,53,53,53],[76,54,53,54],[77,4,54,4],[77,10,54,10,"isZero"],[77,16,54,16],[77,19,54,19,"wbits"],[77,24,54,24],[77,29,54,29],[77,30,54,30],[77,31,54,31],[77,32,54,32],[78,4,55,4],[78,10,55,10,"isNeg"],[78,15,55,15],[78,18,55,18,"wbits"],[78,23,55,23],[78,26,55,26],[78,27,55,27],[78,28,55,28],[78,29,55,29],[79,4,56,4],[79,10,56,10,"isNegF"],[79,16,56,16],[79,19,56,19,"window"],[79,25,56,25],[79,28,56,28],[79,29,56,29],[79,34,56,34],[79,35,56,35],[79,36,56,36],[79,37,56,37],[80,4,57,4],[80,10,57,10,"offsetF"],[80,17,57,17],[80,20,57,20,"offsetStart"],[80,31,57,31],[80,32,57,32],[80,33,57,33],[81,4,58,4],[81,11,58,11],[82,6,58,13,"nextN"],[82,11,58,18],[83,6,58,20,"offset"],[83,12,58,26],[84,6,58,28,"isZero"],[84,12,58,34],[85,6,58,36,"isNeg"],[85,11,58,41],[86,6,58,43,"isNegF"],[86,12,58,49],[87,6,58,51,"offsetF"],[88,4,58,59],[88,5,58,60],[89,2,59,0],[90,2,60,0],[90,11,60,9,"validateMSMPoints"],[90,28,60,26,"validateMSMPoints"],[90,29,60,27,"points"],[90,35,60,33],[90,37,60,35,"c"],[90,38,60,36],[90,40,60,38],[91,4,61,4],[91,8,61,8],[91,9,61,9,"Array"],[91,14,61,14],[91,15,61,15,"isArray"],[91,22,61,22],[91,23,61,23,"points"],[91,29,61,29],[91,30,61,30],[91,32,62,8],[91,38,62,14],[91,42,62,18,"Error"],[91,47,62,23],[91,48,62,24],[91,64,62,40],[91,65,62,41],[92,4,63,4,"points"],[92,10,63,10],[92,11,63,11,"forEach"],[92,18,63,18],[92,19,63,19],[92,20,63,20,"p"],[92,21,63,21],[92,23,63,23,"i"],[92,24,63,24],[92,29,63,29],[93,6,64,8],[93,10,64,12],[93,12,64,14,"p"],[93,13,64,15],[93,25,64,27,"c"],[93,26,64,28],[93,27,64,29],[93,29,65,12],[93,35,65,18],[93,39,65,22,"Error"],[93,44,65,27],[93,45,65,28],[93,70,65,53],[93,73,65,56,"i"],[93,74,65,57],[93,75,65,58],[94,4,66,4],[94,5,66,5],[94,6,66,6],[95,2,67,0],[96,2,68,0],[96,11,68,9,"validateMSMScalars"],[96,29,68,27,"validateMSMScalars"],[96,30,68,28,"scalars"],[96,37,68,35],[96,39,68,37,"field"],[96,44,68,42],[96,46,68,44],[97,4,69,4],[97,8,69,8],[97,9,69,9,"Array"],[97,14,69,14],[97,15,69,15,"isArray"],[97,22,69,22],[97,23,69,23,"scalars"],[97,30,69,30],[97,31,69,31],[97,33,70,8],[97,39,70,14],[97,43,70,18,"Error"],[97,48,70,23],[97,49,70,24],[97,76,70,51],[97,77,70,52],[98,4,71,4,"scalars"],[98,11,71,11],[98,12,71,12,"forEach"],[98,19,71,19],[98,20,71,20],[98,21,71,21,"s"],[98,22,71,22],[98,24,71,24,"i"],[98,25,71,25],[98,30,71,30],[99,6,72,8],[99,10,72,12],[99,11,72,13,"field"],[99,16,72,18],[99,17,72,19,"isValid"],[99,24,72,26],[99,25,72,27,"s"],[99,26,72,28],[99,27,72,29],[99,29,73,12],[99,35,73,18],[99,39,73,22,"Error"],[99,44,73,27],[99,45,73,28],[99,71,73,54],[99,74,73,57,"i"],[99,75,73,58],[99,76,73,59],[100,4,74,4],[100,5,74,5],[100,6,74,6],[101,2,75,0],[102,2,76,0],[103,2,77,0],[104,2,78,0],[105,2,79,0],[105,8,79,6,"pointPrecomputes"],[105,24,79,22],[105,27,79,25],[105,31,79,29,"WeakMap"],[105,38,79,36],[105,39,79,37],[105,40,79,38],[106,2,80,0],[106,8,80,6,"pointWindowSizes"],[106,24,80,22],[106,27,80,25],[106,31,80,29,"WeakMap"],[106,38,80,36],[106,39,80,37],[106,40,80,38],[107,2,81,0],[107,11,81,9,"getW"],[107,15,81,13,"getW"],[107,16,81,14,"P"],[107,17,81,15],[107,19,81,17],[108,4,82,4],[109,4,83,4],[110,4,84,4],[110,11,84,11,"pointWindowSizes"],[110,27,84,27],[110,28,84,28,"get"],[110,31,84,31],[110,32,84,32,"P"],[110,33,84,33],[110,34,84,34],[110,38,84,38],[110,39,84,39],[111,2,85,0],[112,2,86,0],[112,11,86,9,"assert0"],[112,18,86,16,"assert0"],[112,19,86,17,"n"],[112,20,86,18],[112,22,86,20],[113,4,87,4],[113,8,87,8,"n"],[113,9,87,9],[113,14,87,14,"_0n"],[113,17,87,17],[113,19,88,8],[113,25,88,14],[113,29,88,18,"Error"],[113,34,88,23],[113,35,88,24],[113,49,88,38],[113,50,88,39],[114,2,89,0],[115,2,90,0],[116,0,91,0],[117,0,92,0],[118,0,93,0],[119,0,94,0],[120,0,95,0],[121,0,96,0],[122,0,97,0],[123,0,98,0],[124,0,99,0],[125,0,100,0],[126,0,101,0],[127,0,102,0],[128,0,103,0],[129,0,104,0],[130,0,105,0],[131,0,106,0],[132,0,107,0],[133,2,108,7],[133,8,108,13,"wNAF"],[133,12,108,17],[133,13,108,18],[134,4,109,4],[135,4,110,4,"constructor"],[135,15,110,15,"constructor"],[135,16,110,16,"Point"],[135,21,110,21],[135,23,110,23,"bits"],[135,27,110,27],[135,29,110,29],[136,6,111,8],[136,10,111,12],[136,11,111,13,"BASE"],[136,15,111,17],[136,18,111,20,"Point"],[136,23,111,25],[136,24,111,26,"BASE"],[136,28,111,30],[137,6,112,8],[137,10,112,12],[137,11,112,13,"ZERO"],[137,15,112,17],[137,18,112,20,"Point"],[137,23,112,25],[137,24,112,26,"ZERO"],[137,28,112,30],[138,6,113,8],[138,10,113,12],[138,11,113,13,"Fn"],[138,13,113,15],[138,16,113,18,"Point"],[138,21,113,23],[138,22,113,24,"Fn"],[138,24,113,26],[139,6,114,8],[139,10,114,12],[139,11,114,13,"bits"],[139,15,114,17],[139,18,114,20,"bits"],[139,22,114,24],[140,4,115,4],[141,4,116,4],[142,4,117,4,"_unsafeLadder"],[142,17,117,17,"_unsafeLadder"],[142,18,117,18,"elm"],[142,21,117,21],[142,23,117,23,"n"],[142,24,117,24],[142,26,117,26,"p"],[142,27,117,27],[142,30,117,30],[142,34,117,34],[142,35,117,35,"ZERO"],[142,39,117,39],[142,41,117,41],[143,6,118,8],[143,10,118,12,"d"],[143,11,118,13],[143,14,118,16,"elm"],[143,17,118,19],[144,6,119,8],[144,13,119,15,"n"],[144,14,119,16],[144,17,119,19,"_0n"],[144,20,119,22],[144,22,119,24],[145,8,120,12],[145,12,120,16,"n"],[145,13,120,17],[145,16,120,20,"_1n"],[145,19,120,23],[145,21,121,16,"p"],[145,22,121,17],[145,25,121,20,"p"],[145,26,121,21],[145,27,121,22,"add"],[145,30,121,25],[145,31,121,26,"d"],[145,32,121,27],[145,33,121,28],[146,8,122,12,"d"],[146,9,122,13],[146,12,122,16,"d"],[146,13,122,17],[146,14,122,18,"double"],[146,20,122,24],[146,21,122,25],[146,22,122,26],[147,8,123,12,"n"],[147,9,123,13],[147,14,123,18,"_1n"],[147,17,123,21],[148,6,124,8],[149,6,125,8],[149,13,125,15,"p"],[149,14,125,16],[150,4,126,4],[151,4,127,4],[152,0,128,0],[153,0,129,0],[154,0,130,0],[155,0,131,0],[156,0,132,0],[157,0,133,0],[158,0,134,0],[159,0,135,0],[160,0,136,0],[161,0,137,0],[162,0,138,0],[163,4,139,4,"precomputeWindow"],[163,20,139,20,"precomputeWindow"],[163,21,139,21,"point"],[163,26,139,26],[163,28,139,28,"W"],[163,29,139,29],[163,31,139,31],[164,6,140,8],[164,12,140,14],[165,8,140,16,"windows"],[165,15,140,23],[166,8,140,25,"windowSize"],[167,6,140,36],[167,7,140,37],[167,10,140,40,"calcWOpts"],[167,19,140,49],[167,20,140,50,"W"],[167,21,140,51],[167,23,140,53],[167,27,140,57],[167,28,140,58,"bits"],[167,32,140,62],[167,33,140,63],[168,6,141,8],[168,12,141,14,"points"],[168,18,141,20],[168,21,141,23],[168,23,141,25],[169,6,142,8],[169,10,142,12,"p"],[169,11,142,13],[169,14,142,16,"point"],[169,19,142,21],[170,6,143,8],[170,10,143,12,"base"],[170,14,143,16],[170,17,143,19,"p"],[170,18,143,20],[171,6,144,8],[171,11,144,13],[171,15,144,17,"window"],[171,21,144,23],[171,24,144,26],[171,25,144,27],[171,27,144,29,"window"],[171,33,144,35],[171,36,144,38,"windows"],[171,43,144,45],[171,45,144,47,"window"],[171,51,144,53],[171,53,144,55],[171,55,144,57],[172,8,145,12,"base"],[172,12,145,16],[172,15,145,19,"p"],[172,16,145,20],[173,8,146,12,"points"],[173,14,146,18],[173,15,146,19,"push"],[173,19,146,23],[173,20,146,24,"base"],[173,24,146,28],[173,25,146,29],[174,8,147,12],[175,8,148,12],[175,13,148,17],[175,17,148,21,"i"],[175,18,148,22],[175,21,148,25],[175,22,148,26],[175,24,148,28,"i"],[175,25,148,29],[175,28,148,32,"windowSize"],[175,38,148,42],[175,40,148,44,"i"],[175,41,148,45],[175,43,148,47],[175,45,148,49],[176,10,149,16,"base"],[176,14,149,20],[176,17,149,23,"base"],[176,21,149,27],[176,22,149,28,"add"],[176,25,149,31],[176,26,149,32,"p"],[176,27,149,33],[176,28,149,34],[177,10,150,16,"points"],[177,16,150,22],[177,17,150,23,"push"],[177,21,150,27],[177,22,150,28,"base"],[177,26,150,32],[177,27,150,33],[178,8,151,12],[179,8,152,12,"p"],[179,9,152,13],[179,12,152,16,"base"],[179,16,152,20],[179,17,152,21,"double"],[179,23,152,27],[179,24,152,28],[179,25,152,29],[180,6,153,8],[181,6,154,8],[181,13,154,15,"points"],[181,19,154,21],[182,4,155,4],[183,4,156,4],[184,0,157,0],[185,0,158,0],[186,0,159,0],[187,0,160,0],[188,0,161,0],[189,4,162,4,"wNAF"],[189,8,162,8,"wNAF"],[189,9,162,9,"W"],[189,10,162,10],[189,12,162,12,"precomputes"],[189,23,162,23],[189,25,162,25,"n"],[189,26,162,26],[189,28,162,28],[190,6,163,8],[191,6,164,8],[191,10,164,12],[191,11,164,13],[191,15,164,17],[191,16,164,18,"Fn"],[191,18,164,20],[191,19,164,21,"isValid"],[191,26,164,28],[191,27,164,29,"n"],[191,28,164,30],[191,29,164,31],[191,31,165,12],[191,37,165,18],[191,41,165,22,"Error"],[191,46,165,27],[191,47,165,28],[191,63,165,44],[191,64,165,45],[192,6,166,8],[193,6,167,8],[193,10,167,12,"p"],[193,11,167,13],[193,14,167,16],[193,18,167,20],[193,19,167,21,"ZERO"],[193,23,167,25],[194,6,168,8],[194,10,168,12,"f"],[194,11,168,13],[194,14,168,16],[194,18,168,20],[194,19,168,21,"BASE"],[194,23,168,25],[195,6,169,8],[196,6,170,8],[197,6,171,8],[198,6,172,8],[199,6,173,8],[200,6,174,8],[200,12,174,14,"wo"],[200,14,174,16],[200,17,174,19,"calcWOpts"],[200,26,174,28],[200,27,174,29,"W"],[200,28,174,30],[200,30,174,32],[200,34,174,36],[200,35,174,37,"bits"],[200,39,174,41],[200,40,174,42],[201,6,175,8],[201,11,175,13],[201,15,175,17,"window"],[201,21,175,23],[201,24,175,26],[201,25,175,27],[201,27,175,29,"window"],[201,33,175,35],[201,36,175,38,"wo"],[201,38,175,40],[201,39,175,41,"windows"],[201,46,175,48],[201,48,175,50,"window"],[201,54,175,56],[201,56,175,58],[201,58,175,60],[202,8,176,12],[203,8,177,12],[203,14,177,18],[204,10,177,20,"nextN"],[204,15,177,25],[205,10,177,27,"offset"],[205,16,177,33],[206,10,177,35,"isZero"],[206,16,177,41],[207,10,177,43,"isNeg"],[207,15,177,48],[208,10,177,50,"isNegF"],[208,16,177,56],[209,10,177,58,"offsetF"],[210,8,177,66],[210,9,177,67],[210,12,177,70,"calcOffsets"],[210,23,177,81],[210,24,177,82,"n"],[210,25,177,83],[210,27,177,85,"window"],[210,33,177,91],[210,35,177,93,"wo"],[210,37,177,95],[210,38,177,96],[211,8,178,12,"n"],[211,9,178,13],[211,12,178,16,"nextN"],[211,17,178,21],[212,8,179,12],[212,12,179,16,"isZero"],[212,18,179,22],[212,20,179,24],[213,10,180,16],[214,10,181,16],[215,10,182,16,"f"],[215,11,182,17],[215,14,182,20,"f"],[215,15,182,21],[215,16,182,22,"add"],[215,19,182,25],[215,20,182,26,"negateCt"],[215,28,182,34],[215,29,182,35,"isNegF"],[215,35,182,41],[215,37,182,43,"precomputes"],[215,48,182,54],[215,49,182,55,"offsetF"],[215,56,182,62],[215,57,182,63],[215,58,182,64],[215,59,182,65],[216,8,183,12],[216,9,183,13],[216,15,184,17],[217,10,185,16],[218,10,186,16,"p"],[218,11,186,17],[218,14,186,20,"p"],[218,15,186,21],[218,16,186,22,"add"],[218,19,186,25],[218,20,186,26,"negateCt"],[218,28,186,34],[218,29,186,35,"isNeg"],[218,34,186,40],[218,36,186,42,"precomputes"],[218,47,186,53],[218,48,186,54,"offset"],[218,54,186,60],[218,55,186,61],[218,56,186,62],[218,57,186,63],[219,8,187,12],[220,6,188,8],[221,6,189,8,"assert0"],[221,13,189,15],[221,14,189,16,"n"],[221,15,189,17],[221,16,189,18],[222,6,190,8],[223,6,191,8],[224,6,192,8],[225,6,193,8],[225,13,193,15],[226,8,193,17,"p"],[226,9,193,18],[227,8,193,20,"f"],[228,6,193,22],[228,7,193,23],[229,4,194,4],[230,4,195,4],[231,0,196,0],[232,0,197,0],[233,0,198,0],[234,0,199,0],[235,4,200,4,"wNAFUnsafe"],[235,14,200,14,"wNAFUnsafe"],[235,15,200,15,"W"],[235,16,200,16],[235,18,200,18,"precomputes"],[235,29,200,29],[235,31,200,31,"n"],[235,32,200,32],[235,34,200,34,"acc"],[235,37,200,37],[235,40,200,40],[235,44,200,44],[235,45,200,45,"ZERO"],[235,49,200,49],[235,51,200,51],[236,6,201,8],[236,12,201,14,"wo"],[236,14,201,16],[236,17,201,19,"calcWOpts"],[236,26,201,28],[236,27,201,29,"W"],[236,28,201,30],[236,30,201,32],[236,34,201,36],[236,35,201,37,"bits"],[236,39,201,41],[236,40,201,42],[237,6,202,8],[237,11,202,13],[237,15,202,17,"window"],[237,21,202,23],[237,24,202,26],[237,25,202,27],[237,27,202,29,"window"],[237,33,202,35],[237,36,202,38,"wo"],[237,38,202,40],[237,39,202,41,"windows"],[237,46,202,48],[237,48,202,50,"window"],[237,54,202,56],[237,56,202,58],[237,58,202,60],[238,8,203,12],[238,12,203,16,"n"],[238,13,203,17],[238,18,203,22,"_0n"],[238,21,203,25],[238,23,204,16],[238,29,204,22],[238,30,204,23],[239,8,205,12],[239,14,205,18],[240,10,205,20,"nextN"],[240,15,205,25],[241,10,205,27,"offset"],[241,16,205,33],[242,10,205,35,"isZero"],[242,16,205,41],[243,10,205,43,"isNeg"],[244,8,205,49],[244,9,205,50],[244,12,205,53,"calcOffsets"],[244,23,205,64],[244,24,205,65,"n"],[244,25,205,66],[244,27,205,68,"window"],[244,33,205,74],[244,35,205,76,"wo"],[244,37,205,78],[244,38,205,79],[245,8,206,12,"n"],[245,9,206,13],[245,12,206,16,"nextN"],[245,17,206,21],[246,8,207,12],[246,12,207,16,"isZero"],[246,18,207,22],[246,20,207,24],[247,10,208,16],[248,10,209,16],[249,10,210,16],[250,8,211,12],[250,9,211,13],[250,15,212,17],[251,10,213,16],[251,16,213,22,"item"],[251,20,213,26],[251,23,213,29,"precomputes"],[251,34,213,40],[251,35,213,41,"offset"],[251,41,213,47],[251,42,213,48],[252,10,214,16,"acc"],[252,13,214,19],[252,16,214,22,"acc"],[252,19,214,25],[252,20,214,26,"add"],[252,23,214,29],[252,24,214,30,"isNeg"],[252,29,214,35],[252,32,214,38,"item"],[252,36,214,42],[252,37,214,43,"negate"],[252,43,214,49],[252,44,214,50],[252,45,214,51],[252,48,214,54,"item"],[252,52,214,58],[252,53,214,59],[252,54,214,60],[252,55,214,61],[253,8,215,12],[254,6,216,8],[255,6,217,8,"assert0"],[255,13,217,15],[255,14,217,16,"n"],[255,15,217,17],[255,16,217,18],[256,6,218,8],[256,13,218,15,"acc"],[256,16,218,18],[257,4,219,4],[258,4,220,4,"getPrecomputes"],[258,18,220,18,"getPrecomputes"],[258,19,220,19,"W"],[258,20,220,20],[258,22,220,22,"point"],[258,27,220,27],[258,29,220,29,"transform"],[258,38,220,38],[258,40,220,40],[259,6,221,8],[260,6,222,8],[260,10,222,12,"comp"],[260,14,222,16],[260,17,222,19,"pointPrecomputes"],[260,33,222,35],[260,34,222,36,"get"],[260,37,222,39],[260,38,222,40,"point"],[260,43,222,45],[260,44,222,46],[261,6,223,8],[261,10,223,12],[261,11,223,13,"comp"],[261,15,223,17],[261,17,223,19],[262,8,224,12,"comp"],[262,12,224,16],[262,15,224,19],[262,19,224,23],[262,20,224,24,"precomputeWindow"],[262,36,224,40],[262,37,224,41,"point"],[262,42,224,46],[262,44,224,48,"W"],[262,45,224,49],[262,46,224,50],[263,8,225,12],[263,12,225,16,"W"],[263,13,225,17],[263,18,225,22],[263,19,225,23],[263,21,225,25],[264,10,226,16],[265,10,227,16],[265,14,227,20],[265,21,227,27,"transform"],[265,30,227,36],[265,35,227,41],[265,45,227,51],[265,47,228,20,"comp"],[265,51,228,24],[265,54,228,27,"transform"],[265,63,228,36],[265,64,228,37,"comp"],[265,68,228,41],[265,69,228,42],[266,10,229,16,"pointPrecomputes"],[266,26,229,32],[266,27,229,33,"set"],[266,30,229,36],[266,31,229,37,"point"],[266,36,229,42],[266,38,229,44,"comp"],[266,42,229,48],[266,43,229,49],[267,8,230,12],[268,6,231,8],[269,6,232,8],[269,13,232,15,"comp"],[269,17,232,19],[270,4,233,4],[271,4,234,4,"cached"],[271,10,234,10,"cached"],[271,11,234,11,"point"],[271,16,234,16],[271,18,234,18,"scalar"],[271,24,234,24],[271,26,234,26,"transform"],[271,35,234,35],[271,37,234,37],[272,6,235,8],[272,12,235,14,"W"],[272,13,235,15],[272,16,235,18,"getW"],[272,20,235,22],[272,21,235,23,"point"],[272,26,235,28],[272,27,235,29],[273,6,236,8],[273,13,236,15],[273,17,236,19],[273,18,236,20,"wNAF"],[273,22,236,24],[273,23,236,25,"W"],[273,24,236,26],[273,26,236,28],[273,30,236,32],[273,31,236,33,"getPrecomputes"],[273,45,236,47],[273,46,236,48,"W"],[273,47,236,49],[273,49,236,51,"point"],[273,54,236,56],[273,56,236,58,"transform"],[273,65,236,67],[273,66,236,68],[273,68,236,70,"scalar"],[273,74,236,76],[273,75,236,77],[274,4,237,4],[275,4,238,4,"unsafe"],[275,10,238,10,"unsafe"],[275,11,238,11,"point"],[275,16,238,16],[275,18,238,18,"scalar"],[275,24,238,24],[275,26,238,26,"transform"],[275,35,238,35],[275,37,238,37,"prev"],[275,41,238,41],[275,43,238,43],[276,6,239,8],[276,12,239,14,"W"],[276,13,239,15],[276,16,239,18,"getW"],[276,20,239,22],[276,21,239,23,"point"],[276,26,239,28],[276,27,239,29],[277,6,240,8],[277,10,240,12,"W"],[277,11,240,13],[277,16,240,18],[277,17,240,19],[277,19,241,12],[277,26,241,19],[277,30,241,23],[277,31,241,24,"_unsafeLadder"],[277,44,241,37],[277,45,241,38,"point"],[277,50,241,43],[277,52,241,45,"scalar"],[277,58,241,51],[277,60,241,53,"prev"],[277,64,241,57],[277,65,241,58],[277,66,241,59],[277,67,241,60],[278,6,242,8],[278,13,242,15],[278,17,242,19],[278,18,242,20,"wNAFUnsafe"],[278,28,242,30],[278,29,242,31,"W"],[278,30,242,32],[278,32,242,34],[278,36,242,38],[278,37,242,39,"getPrecomputes"],[278,51,242,53],[278,52,242,54,"W"],[278,53,242,55],[278,55,242,57,"point"],[278,60,242,62],[278,62,242,64,"transform"],[278,71,242,73],[278,72,242,74],[278,74,242,76,"scalar"],[278,80,242,82],[278,82,242,84,"prev"],[278,86,242,88],[278,87,242,89],[279,4,243,4],[280,4,244,4],[281,4,245,4],[282,4,246,4],[283,4,247,4,"createCache"],[283,15,247,15,"createCache"],[283,16,247,16,"P"],[283,17,247,17],[283,19,247,19,"W"],[283,20,247,20],[283,22,247,22],[284,6,248,8,"validateW"],[284,15,248,17],[284,16,248,18,"W"],[284,17,248,19],[284,19,248,21],[284,23,248,25],[284,24,248,26,"bits"],[284,28,248,30],[284,29,248,31],[285,6,249,8,"pointWindowSizes"],[285,22,249,24],[285,23,249,25,"set"],[285,26,249,28],[285,27,249,29,"P"],[285,28,249,30],[285,30,249,32,"W"],[285,31,249,33],[285,32,249,34],[286,6,250,8,"pointPrecomputes"],[286,22,250,24],[286,23,250,25,"delete"],[286,29,250,31],[286,30,250,32,"P"],[286,31,250,33],[286,32,250,34],[287,4,251,4],[288,4,252,4,"hasCache"],[288,12,252,12,"hasCache"],[288,13,252,13,"elm"],[288,16,252,16],[288,18,252,18],[289,6,253,8],[289,13,253,15,"getW"],[289,17,253,19],[289,18,253,20,"elm"],[289,21,253,23],[289,22,253,24],[289,27,253,29],[289,28,253,30],[290,4,254,4],[291,2,255,0],[292,2,256,0],[293,0,257,0],[294,0,258,0],[295,0,259,0],[296,2,256,0,"exports"],[296,9,256,0],[296,10,256,0,"wNAF"],[296,14,256,0],[296,17,256,0,"wNAF"],[296,21,256,0],[297,2,260,7],[297,11,260,16,"mulEndoUnsafe"],[297,24,260,29,"mulEndoUnsafe"],[297,25,260,30,"Point"],[297,30,260,35],[297,32,260,37,"point"],[297,37,260,42],[297,39,260,44,"k1"],[297,41,260,46],[297,43,260,48,"k2"],[297,45,260,50],[297,47,260,52],[298,4,261,4],[298,8,261,8,"acc"],[298,11,261,11],[298,14,261,14,"point"],[298,19,261,19],[299,4,262,4],[299,8,262,8,"p1"],[299,10,262,10],[299,13,262,13,"Point"],[299,18,262,18],[299,19,262,19,"ZERO"],[299,23,262,23],[300,4,263,4],[300,8,263,8,"p2"],[300,10,263,10],[300,13,263,13,"Point"],[300,18,263,18],[300,19,263,19,"ZERO"],[300,23,263,23],[301,4,264,4],[301,11,264,11,"k1"],[301,13,264,13],[301,16,264,16,"_0n"],[301,19,264,19],[301,23,264,23,"k2"],[301,25,264,25],[301,28,264,28,"_0n"],[301,31,264,31],[301,33,264,33],[302,6,265,8],[302,10,265,12,"k1"],[302,12,265,14],[302,15,265,17,"_1n"],[302,18,265,20],[302,20,266,12,"p1"],[302,22,266,14],[302,25,266,17,"p1"],[302,27,266,19],[302,28,266,20,"add"],[302,31,266,23],[302,32,266,24,"acc"],[302,35,266,27],[302,36,266,28],[303,6,267,8],[303,10,267,12,"k2"],[303,12,267,14],[303,15,267,17,"_1n"],[303,18,267,20],[303,20,268,12,"p2"],[303,22,268,14],[303,25,268,17,"p2"],[303,27,268,19],[303,28,268,20,"add"],[303,31,268,23],[303,32,268,24,"acc"],[303,35,268,27],[303,36,268,28],[304,6,269,8,"acc"],[304,9,269,11],[304,12,269,14,"acc"],[304,15,269,17],[304,16,269,18,"double"],[304,22,269,24],[304,23,269,25],[304,24,269,26],[305,6,270,8,"k1"],[305,8,270,10],[305,13,270,15,"_1n"],[305,16,270,18],[306,6,271,8,"k2"],[306,8,271,10],[306,13,271,15,"_1n"],[306,16,271,18],[307,4,272,4],[308,4,273,4],[308,11,273,11],[309,6,273,13,"p1"],[309,8,273,15],[310,6,273,17,"p2"],[311,4,273,20],[311,5,273,21],[312,2,274,0],[313,2,275,0],[314,0,276,0],[315,0,277,0],[316,0,278,0],[317,0,279,0],[318,0,280,0],[319,0,281,0],[320,0,282,0],[321,0,283,0],[322,0,284,0],[323,2,285,7],[323,11,285,16,"pippenger"],[323,20,285,25,"pippenger"],[323,21,285,26,"c"],[323,22,285,27],[323,24,285,29,"fieldN"],[323,30,285,35],[323,32,285,37,"points"],[323,38,285,43],[323,40,285,45,"scalars"],[323,47,285,52],[323,49,285,54],[324,4,286,4],[325,4,287,4],[326,4,288,4],[327,4,289,4],[328,4,290,4],[329,4,291,4],[330,4,292,4,"validateMSMPoints"],[330,21,292,21],[330,22,292,22,"points"],[330,28,292,28],[330,30,292,30,"c"],[330,31,292,31],[330,32,292,32],[331,4,293,4,"validateMSMScalars"],[331,22,293,22],[331,23,293,23,"scalars"],[331,30,293,30],[331,32,293,32,"fieldN"],[331,38,293,38],[331,39,293,39],[332,4,294,4],[332,10,294,10,"plength"],[332,17,294,17],[332,20,294,20,"points"],[332,26,294,26],[332,27,294,27,"length"],[332,33,294,33],[333,4,295,4],[333,10,295,10,"slength"],[333,17,295,17],[333,20,295,20,"scalars"],[333,27,295,27],[333,28,295,28,"length"],[333,34,295,34],[334,4,296,4],[334,8,296,8,"plength"],[334,15,296,15],[334,20,296,20,"slength"],[334,27,296,27],[334,29,297,8],[334,35,297,14],[334,39,297,18,"Error"],[334,44,297,23],[334,45,297,24],[334,98,297,77],[334,99,297,78],[335,4,298,4],[336,4,299,4],[336,10,299,10,"zero"],[336,14,299,14],[336,17,299,17,"c"],[336,18,299,18],[336,19,299,19,"ZERO"],[336,23,299,23],[337,4,300,4],[337,10,300,10,"wbits"],[337,15,300,15],[337,18,300,18],[337,22,300,18,"bitLen"],[337,35,300,24],[337,37,300,25,"BigInt"],[337,43,300,31],[337,44,300,32,"plength"],[337,51,300,39],[337,52,300,40],[337,53,300,41],[338,4,301,4],[338,8,301,8,"windowSize"],[338,18,301,18],[338,21,301,21],[338,22,301,22],[338,23,301,23],[338,24,301,24],[339,4,302,4],[339,8,302,8,"wbits"],[339,13,302,13],[339,16,302,16],[339,18,302,18],[339,20,303,8,"windowSize"],[339,30,303,18],[339,33,303,21,"wbits"],[339,38,303,26],[339,41,303,29],[339,42,303,30],[339,43,303,31],[339,48,304,9],[339,52,304,13,"wbits"],[339,57,304,18],[339,60,304,21],[339,61,304,22],[339,63,305,8,"windowSize"],[339,73,305,18],[339,76,305,21,"wbits"],[339,81,305,26],[339,84,305,29],[339,85,305,30],[339,86,305,31],[339,91,306,9],[339,95,306,13,"wbits"],[339,100,306,18],[339,103,306,21],[339,104,306,22],[339,106,307,8,"windowSize"],[339,116,307,18],[339,119,307,21],[339,120,307,22],[340,4,308,4],[340,10,308,10,"MASK"],[340,14,308,14],[340,17,308,17],[340,21,308,17,"bitMask"],[340,35,308,24],[340,37,308,25,"windowSize"],[340,47,308,35],[340,48,308,36],[341,4,309,4],[341,10,309,10,"buckets"],[341,17,309,17],[341,20,309,20],[341,24,309,24,"Array"],[341,29,309,29],[341,30,309,30,"Number"],[341,36,309,36],[341,37,309,37,"MASK"],[341,41,309,41],[341,42,309,42],[341,45,309,45],[341,46,309,46],[341,47,309,47],[341,48,309,48,"fill"],[341,52,309,52],[341,53,309,53,"zero"],[341,57,309,57],[341,58,309,58],[341,59,309,59],[341,60,309,60],[342,4,310,4],[342,10,310,10,"lastBits"],[342,18,310,18],[342,21,310,21,"Math"],[342,25,310,25],[342,26,310,26,"floor"],[342,31,310,31],[342,32,310,32],[342,33,310,33,"fieldN"],[342,39,310,39],[342,40,310,40,"BITS"],[342,44,310,44],[342,47,310,47],[342,48,310,48],[342,52,310,52,"windowSize"],[342,62,310,62],[342,63,310,63],[342,66,310,66,"windowSize"],[342,76,310,76],[343,4,311,4],[343,8,311,8,"sum"],[343,11,311,11],[343,14,311,14,"zero"],[343,18,311,18],[344,4,312,4],[344,9,312,9],[344,13,312,13,"i"],[344,14,312,14],[344,17,312,17,"lastBits"],[344,25,312,25],[344,27,312,27,"i"],[344,28,312,28],[344,32,312,32],[344,33,312,33],[344,35,312,35,"i"],[344,36,312,36],[344,40,312,40,"windowSize"],[344,50,312,50],[344,52,312,52],[345,6,313,8,"buckets"],[345,13,313,15],[345,14,313,16,"fill"],[345,18,313,20],[345,19,313,21,"zero"],[345,23,313,25],[345,24,313,26],[346,6,314,8],[346,11,314,13],[346,15,314,17,"j"],[346,16,314,18],[346,19,314,21],[346,20,314,22],[346,22,314,24,"j"],[346,23,314,25],[346,26,314,28,"slength"],[346,33,314,35],[346,35,314,37,"j"],[346,36,314,38],[346,38,314,40],[346,40,314,42],[347,8,315,12],[347,14,315,18,"scalar"],[347,20,315,24],[347,23,315,27,"scalars"],[347,30,315,34],[347,31,315,35,"j"],[347,32,315,36],[347,33,315,37],[348,8,316,12],[348,14,316,18,"wbits"],[348,19,316,23],[348,22,316,26,"Number"],[348,28,316,32],[348,29,316,34,"scalar"],[348,35,316,40],[348,39,316,44,"BigInt"],[348,45,316,50],[348,46,316,51,"i"],[348,47,316,52],[348,48,316,53],[348,51,316,57,"MASK"],[348,55,316,61],[348,56,316,62],[349,8,317,12,"buckets"],[349,15,317,19],[349,16,317,20,"wbits"],[349,21,317,25],[349,22,317,26],[349,25,317,29,"buckets"],[349,32,317,36],[349,33,317,37,"wbits"],[349,38,317,42],[349,39,317,43],[349,40,317,44,"add"],[349,43,317,47],[349,44,317,48,"points"],[349,50,317,54],[349,51,317,55,"j"],[349,52,317,56],[349,53,317,57],[349,54,317,58],[350,6,318,8],[351,6,319,8],[351,10,319,12,"resI"],[351,14,319,16],[351,17,319,19,"zero"],[351,21,319,23],[351,22,319,24],[351,23,319,25],[352,6,320,8],[353,6,321,8],[353,11,321,13],[353,15,321,17,"j"],[353,16,321,18],[353,19,321,21,"buckets"],[353,26,321,28],[353,27,321,29,"length"],[353,33,321,35],[353,36,321,38],[353,37,321,39],[353,39,321,41,"sumI"],[353,43,321,45],[353,46,321,48,"zero"],[353,50,321,52],[353,52,321,54,"j"],[353,53,321,55],[353,56,321,58],[353,57,321,59],[353,59,321,61,"j"],[353,60,321,62],[353,62,321,64],[353,64,321,66],[354,8,322,12,"sumI"],[354,12,322,16],[354,15,322,19,"sumI"],[354,19,322,23],[354,20,322,24,"add"],[354,23,322,27],[354,24,322,28,"buckets"],[354,31,322,35],[354,32,322,36,"j"],[354,33,322,37],[354,34,322,38],[354,35,322,39],[355,8,323,12,"resI"],[355,12,323,16],[355,15,323,19,"resI"],[355,19,323,23],[355,20,323,24,"add"],[355,23,323,27],[355,24,323,28,"sumI"],[355,28,323,32],[355,29,323,33],[356,6,324,8],[357,6,325,8,"sum"],[357,9,325,11],[357,12,325,14,"sum"],[357,15,325,17],[357,16,325,18,"add"],[357,19,325,21],[357,20,325,22,"resI"],[357,24,325,26],[357,25,325,27],[358,6,326,8],[358,10,326,12,"i"],[358,11,326,13],[358,16,326,18],[358,17,326,19],[358,19,327,12],[358,24,327,17],[358,28,327,21,"j"],[358,29,327,22],[358,32,327,25],[358,33,327,26],[358,35,327,28,"j"],[358,36,327,29],[358,39,327,32,"windowSize"],[358,49,327,42],[358,51,327,44,"j"],[358,52,327,45],[358,54,327,47],[358,56,328,16,"sum"],[358,59,328,19],[358,62,328,22,"sum"],[358,65,328,25],[358,66,328,26,"double"],[358,72,328,32],[358,73,328,33],[358,74,328,34],[359,4,329,4],[360,4,330,4],[360,11,330,11,"sum"],[360,14,330,14],[361,2,331,0],[362,2,332,0],[363,0,333,0],[364,0,334,0],[365,0,335,0],[366,0,336,0],[367,0,337,0],[368,0,338,0],[369,2,339,7],[369,11,339,16,"precomputeMSMUnsafe"],[369,30,339,35,"precomputeMSMUnsafe"],[369,31,339,36,"c"],[369,32,339,37],[369,34,339,39,"fieldN"],[369,40,339,45],[369,42,339,47,"points"],[369,48,339,53],[369,50,339,55,"windowSize"],[369,60,339,65],[369,62,339,67],[370,4,340,4],[371,0,341,0],[372,0,342,0],[373,0,343,0],[374,0,344,0],[375,0,345,0],[376,0,346,0],[377,0,347,0],[378,0,348,0],[379,0,349,0],[380,0,350,0],[381,0,351,0],[382,0,352,0],[383,0,353,0],[384,0,354,0],[385,0,355,0],[386,0,356,0],[387,0,357,0],[388,0,358,0],[389,0,359,0],[390,0,360,0],[391,0,361,0],[392,0,362,0],[393,0,363,0],[394,0,364,0],[395,0,365,0],[396,0,366,0],[397,0,367,0],[398,0,368,0],[399,0,369,0],[400,0,370,0],[401,0,371,0],[402,0,372,0],[403,0,373,0],[404,0,374,0],[405,4,375,4,"validateW"],[405,13,375,13],[405,14,375,14,"windowSize"],[405,24,375,24],[405,26,375,26,"fieldN"],[405,32,375,32],[405,33,375,33,"BITS"],[405,37,375,37],[405,38,375,38],[406,4,376,4,"validateMSMPoints"],[406,21,376,21],[406,22,376,22,"points"],[406,28,376,28],[406,30,376,30,"c"],[406,31,376,31],[406,32,376,32],[407,4,377,4],[407,10,377,10,"zero"],[407,14,377,14],[407,17,377,17,"c"],[407,18,377,18],[407,19,377,19,"ZERO"],[407,23,377,23],[408,4,378,4],[408,10,378,10,"tableSize"],[408,19,378,19],[408,22,378,22],[408,23,378,23],[408,27,378,27,"windowSize"],[408,37,378,37],[408,40,378,40],[408,41,378,41],[408,42,378,42],[408,43,378,43],[409,4,379,4],[409,10,379,10,"chunks"],[409,16,379,16],[409,19,379,19,"Math"],[409,23,379,23],[409,24,379,24,"ceil"],[409,28,379,28],[409,29,379,29,"fieldN"],[409,35,379,35],[409,36,379,36,"BITS"],[409,40,379,40],[409,43,379,43,"windowSize"],[409,53,379,53],[409,54,379,54],[409,55,379,55],[409,56,379,56],[410,4,380,4],[410,10,380,10,"MASK"],[410,14,380,14],[410,17,380,17],[410,21,380,17,"bitMask"],[410,35,380,24],[410,37,380,25,"windowSize"],[410,47,380,35],[410,48,380,36],[411,4,381,4],[411,10,381,10,"tables"],[411,16,381,16],[411,19,381,19,"points"],[411,25,381,25],[411,26,381,26,"map"],[411,29,381,29],[411,30,381,31,"p"],[411,31,381,32],[411,35,381,37],[412,6,382,8],[412,12,382,14,"res"],[412,15,382,17],[412,18,382,20],[412,20,382,22],[413,6,383,8],[413,11,383,13],[413,15,383,17,"i"],[413,16,383,18],[413,19,383,21],[413,20,383,22],[413,22,383,24,"acc"],[413,25,383,27],[413,28,383,30,"p"],[413,29,383,31],[413,31,383,33,"i"],[413,32,383,34],[413,35,383,37,"tableSize"],[413,44,383,46],[413,46,383,48,"i"],[413,47,383,49],[413,49,383,51],[413,51,383,53],[414,8,384,12,"res"],[414,11,384,15],[414,12,384,16,"push"],[414,16,384,20],[414,17,384,21,"acc"],[414,20,384,24],[414,21,384,25],[415,8,385,12,"acc"],[415,11,385,15],[415,14,385,18,"acc"],[415,17,385,21],[415,18,385,22,"add"],[415,21,385,25],[415,22,385,26,"p"],[415,23,385,27],[415,24,385,28],[416,6,386,8],[417,6,387,8],[417,13,387,15,"res"],[417,16,387,18],[418,4,388,4],[418,5,388,5],[418,6,388,6],[419,4,389,4],[419,11,389,12,"scalars"],[419,18,389,19],[419,22,389,24],[420,6,390,8,"validateMSMScalars"],[420,24,390,26],[420,25,390,27,"scalars"],[420,32,390,34],[420,34,390,36,"fieldN"],[420,40,390,42],[420,41,390,43],[421,6,391,8],[421,10,391,12,"scalars"],[421,17,391,19],[421,18,391,20,"length"],[421,24,391,26],[421,27,391,29,"points"],[421,33,391,35],[421,34,391,36,"length"],[421,40,391,42],[421,42,392,12],[421,48,392,18],[421,52,392,22,"Error"],[421,57,392,27],[421,58,392,28],[421,113,392,83],[421,114,392,84],[422,6,393,8],[422,10,393,12,"res"],[422,13,393,15],[422,16,393,18,"zero"],[422,20,393,22],[423,6,394,8],[423,11,394,13],[423,15,394,17,"i"],[423,16,394,18],[423,19,394,21],[423,20,394,22],[423,22,394,24,"i"],[423,23,394,25],[423,26,394,28,"chunks"],[423,32,394,34],[423,34,394,36,"i"],[423,35,394,37],[423,37,394,39],[423,39,394,41],[424,8,395,12],[425,8,396,12],[425,12,396,16,"res"],[425,15,396,19],[425,20,396,24,"zero"],[425,24,396,28],[425,26,397,16],[425,31,397,21],[425,35,397,25,"j"],[425,36,397,26],[425,39,397,29],[425,40,397,30],[425,42,397,32,"j"],[425,43,397,33],[425,46,397,36,"windowSize"],[425,56,397,46],[425,58,397,48,"j"],[425,59,397,49],[425,61,397,51],[425,63,398,20,"res"],[425,66,398,23],[425,69,398,26,"res"],[425,72,398,29],[425,73,398,30,"double"],[425,79,398,36],[425,80,398,37],[425,81,398,38],[426,8,399,12],[426,14,399,18,"shiftBy"],[426,21,399,25],[426,24,399,28,"BigInt"],[426,30,399,34],[426,31,399,35,"chunks"],[426,37,399,41],[426,40,399,44,"windowSize"],[426,50,399,54],[426,53,399,57],[426,54,399,58,"i"],[426,55,399,59],[426,58,399,62],[426,59,399,63],[426,63,399,67,"windowSize"],[426,73,399,77],[426,74,399,78],[427,8,400,12],[427,13,400,17],[427,17,400,21,"j"],[427,18,400,22],[427,21,400,25],[427,22,400,26],[427,24,400,28,"j"],[427,25,400,29],[427,28,400,32,"scalars"],[427,35,400,39],[427,36,400,40,"length"],[427,42,400,46],[427,44,400,48,"j"],[427,45,400,49],[427,47,400,51],[427,49,400,53],[428,10,401,16],[428,16,401,22,"n"],[428,17,401,23],[428,20,401,26,"scalars"],[428,27,401,33],[428,28,401,34,"j"],[428,29,401,35],[428,30,401,36],[429,10,402,16],[429,16,402,22,"curr"],[429,20,402,26],[429,23,402,29,"Number"],[429,29,402,35],[429,30,402,37,"n"],[429,31,402,38],[429,35,402,42,"shiftBy"],[429,42,402,49],[429,45,402,53,"MASK"],[429,49,402,57],[429,50,402,58],[430,10,403,16],[430,14,403,20],[430,15,403,21,"curr"],[430,19,403,25],[430,21,404,20],[430,30,404,29],[430,31,404,30],[431,10,405,16,"res"],[431,13,405,19],[431,16,405,22,"res"],[431,19,405,25],[431,20,405,26,"add"],[431,23,405,29],[431,24,405,30,"tables"],[431,30,405,36],[431,31,405,37,"j"],[431,32,405,38],[431,33,405,39],[431,34,405,40,"curr"],[431,38,405,44],[431,41,405,47],[431,42,405,48],[431,43,405,49],[431,44,405,50],[432,8,406,12],[433,6,407,8],[434,6,408,8],[434,13,408,15,"res"],[434,16,408,18],[435,4,409,4],[435,5,409,5],[436,2,410,0],[437,2,411,0],[438,2,412,0],[439,2,413,7],[439,11,413,16,"validateBasic"],[439,24,413,29,"validateBasic"],[439,25,413,30,"curve"],[439,30,413,35],[439,32,413,37],[440,4,414,4],[440,8,414,4,"validateField"],[440,30,414,17],[440,32,414,18,"curve"],[440,37,414,23],[440,38,414,24,"Fp"],[440,40,414,26],[440,41,414,27],[441,4,415,4],[441,8,415,4,"validateObject"],[441,29,415,18],[441,31,415,19,"curve"],[441,36,415,24],[441,38,415,26],[442,6,416,8,"n"],[442,7,416,9],[442,9,416,11],[442,17,416,19],[443,6,417,8,"h"],[443,7,417,9],[443,9,417,11],[443,17,417,19],[444,6,418,8,"Gx"],[444,8,418,10],[444,10,418,12],[444,17,418,19],[445,6,419,8,"Gy"],[445,8,419,10],[445,10,419,12],[446,4,420,4],[446,5,420,5],[446,7,420,7],[447,6,421,8,"nBitLength"],[447,16,421,18],[447,18,421,20],[447,33,421,35],[448,6,422,8,"nByteLength"],[448,17,422,19],[448,19,422,21],[449,4,423,4],[449,5,423,5],[449,6,423,6],[450,4,424,4],[451,4,425,4],[451,11,425,11,"Object"],[451,17,425,17],[451,18,425,18,"freeze"],[451,24,425,24],[451,25,425,25],[452,6,426,8],[452,9,426,11],[452,13,426,11,"nLength"],[452,29,426,18],[452,31,426,19,"curve"],[452,36,426,24],[452,37,426,25,"n"],[452,38,426,26],[452,40,426,28,"curve"],[452,45,426,33],[452,46,426,34,"nBitLength"],[452,56,426,44],[452,57,426,45],[453,6,427,8],[453,9,427,11,"curve"],[453,14,427,16],[454,6,428,8],[454,9,428,11],[455,8,428,13,"p"],[455,9,428,14],[455,11,428,16,"curve"],[455,16,428,21],[455,17,428,22,"Fp"],[455,19,428,24],[455,20,428,25,"ORDER"],[456,6,428,31],[457,4,429,4],[457,5,429,5],[457,6,429,6],[458,2,430,0],[459,2,431,0],[459,11,431,9,"createField"],[459,22,431,20,"createField"],[459,23,431,21,"order"],[459,28,431,26],[459,30,431,28,"field"],[459,35,431,33],[459,37,431,35,"isLE"],[459,41,431,39],[459,43,431,41],[460,4,432,4],[460,8,432,8,"field"],[460,13,432,13],[460,15,432,15],[461,6,433,8],[461,10,433,12,"field"],[461,15,433,17],[461,16,433,18,"ORDER"],[461,21,433,23],[461,26,433,28,"order"],[461,31,433,33],[461,33,434,12],[461,39,434,18],[461,43,434,22,"Error"],[461,48,434,27],[461,49,434,28],[461,97,434,76],[461,98,434,77],[462,6,435,8],[462,10,435,8,"validateField"],[462,32,435,21],[462,34,435,22,"field"],[462,39,435,27],[462,40,435,28],[463,6,436,8],[463,13,436,15,"field"],[463,18,436,20],[464,4,437,4],[464,5,437,5],[464,11,438,9],[465,6,439,8],[465,13,439,15],[465,17,439,15,"Field"],[465,31,439,20],[465,33,439,21,"order"],[465,38,439,26],[465,40,439,28],[466,8,439,30,"isLE"],[467,6,439,35],[467,7,439,36],[467,8,439,37],[468,4,440,4],[469,2,441,0],[470,2,442,0],[471,2,443,7],[471,11,443,16,"_createCurveFields"],[471,29,443,34,"_createCurveFields"],[471,30,443,35,"type"],[471,34,443,39],[471,36,443,41,"CURVE"],[471,41,443,46],[471,43,443,48,"curveOpts"],[471,52,443,57],[471,55,443,60],[471,56,443,61],[471,57,443,62],[471,59,443,64,"FpFnLE"],[471,65,443,70],[471,67,443,72],[472,4,444,4],[472,8,444,8,"FpFnLE"],[472,14,444,14],[472,19,444,19,"undefined"],[472,28,444,28],[472,30,445,8,"FpFnLE"],[472,36,445,14],[472,39,445,17,"type"],[472,43,445,21],[472,48,445,26],[472,57,445,35],[473,4,446,4],[473,8,446,8],[473,9,446,9,"CURVE"],[473,14,446,14],[473,18,446,18],[473,25,446,25,"CURVE"],[473,30,446,30],[473,35,446,35],[473,43,446,43],[473,45,447,8],[473,51,447,14],[473,55,447,18,"Error"],[473,60,447,23],[473,61,447,24],[473,79,447,42,"type"],[473,83,447,46],[473,98,447,61],[473,99,447,62],[474,4,448,4],[474,9,448,9],[474,15,448,15,"p"],[474,16,448,16],[474,20,448,20],[474,21,448,21],[474,24,448,24],[474,26,448,26],[474,29,448,29],[474,31,448,31],[474,34,448,34],[474,35,448,35],[474,37,448,37],[475,6,449,8],[475,12,449,14,"val"],[475,15,449,17],[475,18,449,20,"CURVE"],[475,23,449,25],[475,24,449,26,"p"],[475,25,449,27],[475,26,449,28],[476,6,450,8],[476,10,450,12],[476,12,450,14],[476,19,450,21,"val"],[476,22,450,24],[476,27,450,29],[476,35,450,37],[476,39,450,41,"val"],[476,42,450,44],[476,45,450,47,"_0n"],[476,48,450,50],[476,49,450,51],[476,51,451,12],[476,57,451,18],[476,61,451,22,"Error"],[476,66,451,27],[476,67,451,28],[476,76,451,37,"p"],[476,77,451,38],[476,103,451,64],[476,104,451,65],[477,4,452,4],[478,4,453,4],[478,10,453,10,"Fp"],[478,12,453,12],[478,15,453,15,"createField"],[478,26,453,26],[478,27,453,27,"CURVE"],[478,32,453,32],[478,33,453,33,"p"],[478,34,453,34],[478,36,453,36,"curveOpts"],[478,45,453,45],[478,46,453,46,"Fp"],[478,48,453,48],[478,50,453,50,"FpFnLE"],[478,56,453,56],[478,57,453,57],[479,4,454,4],[479,10,454,10,"Fn"],[479,12,454,12],[479,15,454,15,"createField"],[479,26,454,26],[479,27,454,27,"CURVE"],[479,32,454,32],[479,33,454,33,"n"],[479,34,454,34],[479,36,454,36,"curveOpts"],[479,45,454,45],[479,46,454,46,"Fn"],[479,48,454,48],[479,50,454,50,"FpFnLE"],[479,56,454,56],[479,57,454,57],[480,4,455,4],[480,10,455,10,"_b"],[480,12,455,12],[480,15,455,15,"type"],[480,19,455,19],[480,24,455,24],[480,37,455,37],[480,40,455,40],[480,43,455,43],[480,46,455,46],[480,49,455,49],[481,4,456,4],[481,10,456,10,"params"],[481,16,456,16],[481,19,456,19],[481,20,456,20],[481,24,456,24],[481,26,456,26],[481,30,456,30],[481,32,456,32],[481,35,456,35],[481,37,456,37,"_b"],[481,39,456,39],[481,40,456,40],[482,4,457,4],[482,9,457,9],[482,15,457,15,"p"],[482,16,457,16],[482,20,457,20,"params"],[482,26,457,26],[482,28,457,28],[483,6,458,8],[484,6,459,8],[484,10,459,12],[484,11,459,13,"Fp"],[484,13,459,15],[484,14,459,16,"isValid"],[484,21,459,23],[484,22,459,24,"CURVE"],[484,27,459,29],[484,28,459,30,"p"],[484,29,459,31],[484,30,459,32],[484,31,459,33],[484,33,460,12],[484,39,460,18],[484,43,460,22,"Error"],[484,48,460,27],[484,49,460,28],[484,58,460,37,"p"],[484,59,460,38],[484,101,460,80],[484,102,460,81],[485,4,461,4],[486,4,462,4,"CURVE"],[486,9,462,9],[486,12,462,12,"Object"],[486,18,462,18],[486,19,462,19,"freeze"],[486,25,462,25],[486,26,462,26,"Object"],[486,32,462,32],[486,33,462,33,"assign"],[486,39,462,39],[486,40,462,40],[486,41,462,41],[486,42,462,42],[486,44,462,44,"CURVE"],[486,49,462,49],[486,50,462,50],[486,51,462,51],[487,4,463,4],[487,11,463,11],[488,6,463,13,"CURVE"],[488,11,463,18],[489,6,463,20,"Fp"],[489,8,463,22],[490,6,463,24,"Fn"],[491,4,463,27],[491,5,463,28],[492,2,464,0],[493,0,464,1],[493,3]],"functionMap":{"names":["<global>","negateCt","normalizeZ","points.map$argument_0","validateW","calcWOpts","calcOffsets","validateMSMPoints","points.forEach$argument_0","validateMSMScalars","scalars.forEach$argument_0","getW","assert0","wNAF","wNAF#constructor","wNAF#_unsafeLadder","wNAF#precomputeWindow","wNAF#wNAF","wNAF#wNAFUnsafe","wNAF#getPrecomputes","wNAF#cached","wNAF#unsafe","wNAF#createCache","wNAF#hasCache","mulEndoUnsafe","pippenger","precomputeMSMUnsafe","<anonymous>","validateBasic","createField","_createCurveFields"],"mappings":"AAA;OCU;CDG;OEO;sDCC,UD;sBCC,iDD;CFC;AIC;CJG;AKC;CLQ;AMC;CNqB;AOC;mBCG;KDG;CPC;ASC;oBCG;KDG;CTC;AWM;CXI;AYC;CZG;OamB;ICE;KDK;IEE;KFS;IGa;KHgB;IIO;KJgC;IKM;KLmB;IMC;KNa;IOC;KPG;IQC;KRK;ISI;KTI;IUC;KVE;CbC;OwBK;CxBc;OyBW;CzB8C;O0BQ;8BvB0C;KuBO;WCC;KDoB;C1BC;O4BG;C5BiB;A6BC;C7BU;O8BE;C9BqB"}},"type":"js/module"}]}