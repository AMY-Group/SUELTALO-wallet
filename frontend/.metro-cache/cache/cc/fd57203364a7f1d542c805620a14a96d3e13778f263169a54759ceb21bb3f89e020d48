{"dependencies":[{"name":"../utils.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":31,"column":19,"index":1057},"end":{"line":31,"column":41,"index":1079}}],"key":"Yc7DmwhweSDBIC4bv+r2fO8xp6U=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.isNegativeLE = void 0;\n  exports.mod = mod;\n  exports.pow = pow;\n  exports.pow2 = pow2;\n  exports.invert = invert;\n  exports.tonelliShanks = tonelliShanks;\n  exports.FpSqrt = FpSqrt;\n  exports.validateField = validateField;\n  exports.FpPow = FpPow;\n  exports.FpInvertBatch = FpInvertBatch;\n  exports.FpDiv = FpDiv;\n  exports.FpLegendre = FpLegendre;\n  exports.FpIsSquare = FpIsSquare;\n  exports.nLength = nLength;\n  exports.Field = Field;\n  exports.FpSqrtOdd = FpSqrtOdd;\n  exports.FpSqrtEven = FpSqrtEven;\n  exports.hashToPrivateScalar = hashToPrivateScalar;\n  exports.getFieldBytesLength = getFieldBytesLength;\n  exports.getMinHashLength = getMinHashLength;\n  exports.mapHashToField = mapHashToField;\n  /**\n   * Utils for modular division and fields.\n   * Field over 11 is a finite (Galois) field is integer number operations `mod 11`.\n   * There is no division: it is replaced by modular multiplicative inverse.\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n  const utils_ts_1 = require(_dependencyMap[0], \"../utils.js\");\n  // prettier-ignore\n  const _0n = BigInt(0),\n    _1n = BigInt(1),\n    _2n = /* @__PURE__ */BigInt(2),\n    _3n = /* @__PURE__ */BigInt(3);\n  // prettier-ignore\n  const _4n = /* @__PURE__ */BigInt(4),\n    _5n = /* @__PURE__ */BigInt(5),\n    _7n = /* @__PURE__ */BigInt(7);\n  // prettier-ignore\n  const _8n = /* @__PURE__ */BigInt(8),\n    _9n = /* @__PURE__ */BigInt(9),\n    _16n = /* @__PURE__ */BigInt(16);\n  // Calculates a modulo b\n  function mod(a, b) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n  }\n  /**\n   * Efficiently raise num to power and do modular division.\n   * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n   * @example\n   * pow(2n, 6n, 11n) // 64n % 11n == 9n\n   */\n  function pow(num, power, modulo) {\n    return FpPow(Field(modulo), num, power);\n  }\n  /** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\n  function pow2(x, power, modulo) {\n    let res = x;\n    while (power-- > _0n) {\n      res *= res;\n      res %= modulo;\n    }\n    return res;\n  }\n  /**\n   * Inverses number over modulo.\n   * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n   */\n  function invert(number, modulo) {\n    if (number === _0n) throw new Error('invert: expected non-zero number');\n    if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n    // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n    let a = mod(number, modulo);\n    let b = modulo;\n    // prettier-ignore\n    let x = _0n,\n      y = _1n,\n      u = _1n,\n      v = _0n;\n    while (a !== _0n) {\n      // JIT applies optimization if those two lines follow each other\n      const q = b / a;\n      const r = b % a;\n      const m = x - u * q;\n      const n = y - v * q;\n      // prettier-ignore\n      b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n) throw new Error('invert: does not exist');\n    return mod(x, modulo);\n  }\n  function assertIsSquare(Fp, root, n) {\n    if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n  }\n  // Not all roots are possible! Example which will throw:\n  // const NUM =\n  // n = 72057594037927816n;\n  // Fp = Field(BigInt('0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab'));\n  function sqrt3mod4(Fp, n) {\n    const p1div4 = (Fp.ORDER + _1n) / _4n;\n    const root = Fp.pow(n, p1div4);\n    assertIsSquare(Fp, root, n);\n    return root;\n  }\n  function sqrt5mod8(Fp, n) {\n    const p5div8 = (Fp.ORDER - _5n) / _8n;\n    const n2 = Fp.mul(n, _2n);\n    const v = Fp.pow(n2, p5div8);\n    const nv = Fp.mul(n, v);\n    const i = Fp.mul(Fp.mul(nv, _2n), v);\n    const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n    assertIsSquare(Fp, root, n);\n    return root;\n  }\n  // Based on RFC9380, Kong algorithm\n  // prettier-ignore\n  function sqrt9mod16(P) {\n    const Fp_ = Field(P);\n    const tn = tonelliShanks(P);\n    const c1 = tn(Fp_, Fp_.neg(Fp_.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    const c2 = tn(Fp_, c1); //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    const c3 = tn(Fp_, Fp_.neg(c1)); //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    const c4 = (P + _7n) / _16n; //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    return (Fp, n) => {\n      let tv1 = Fp.pow(n, c4); //  1. tv1 = x^c4\n      let tv2 = Fp.mul(tv1, c1); //  2. tv2 = c1 * tv1\n      const tv3 = Fp.mul(tv1, c2); //  3. tv3 = c2 * tv1\n      const tv4 = Fp.mul(tv1, c3); //  4. tv4 = c3 * tv1\n      const e1 = Fp.eql(Fp.sqr(tv2), n); //  5.  e1 = (tv2^2) == x\n      const e2 = Fp.eql(Fp.sqr(tv3), n); //  6.  e2 = (tv3^2) == x\n      tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n      tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n      const e3 = Fp.eql(Fp.sqr(tv2), n); //  9.  e3 = (tv2^2) == x\n      const root = Fp.cmov(tv1, tv2, e3); // 10.  z = CMOV(tv1, tv2, e3)   # Select sqrt from tv1 & tv2\n      assertIsSquare(Fp, root, n);\n      return root;\n    };\n  }\n  /**\n   * Tonelli-Shanks square root search algorithm.\n   * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n   * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n   * @param P field order\n   * @returns function that takes field Fp (created from P) and number n\n   */\n  function tonelliShanks(P) {\n    // Initialization (precomputation).\n    // Caching initialization could boost perf by 7%.\n    if (P < _3n) throw new Error('sqrt is not defined for small field');\n    // Factor P - 1 = Q * 2^S, where Q is odd\n    let Q = P - _1n;\n    let S = 0;\n    while (Q % _2n === _0n) {\n      Q /= _2n;\n      S++;\n    }\n    // Find the first quadratic non-residue Z >= 2\n    let Z = _2n;\n    const _Fp = Field(P);\n    while (FpLegendre(_Fp, Z) === 1) {\n      // Basic primality test for P. After x iterations, chance of\n      // not finding quadratic non-residue is 2^x, so 2^1000.\n      if (Z++ > 1000) throw new Error('Cannot find square root: probably non-prime P');\n    }\n    // Fast-path; usually done before Z, but we do \"primality test\".\n    if (S === 1) return sqrt3mod4;\n    // Slow-path\n    // TODO: test on Fp2 and others\n    let cc = _Fp.pow(Z, Q); // c = z^Q\n    const Q1div2 = (Q + _1n) / _2n;\n    return function tonelliSlow(Fp, n) {\n      if (Fp.is0(n)) return n;\n      // Check if n is a quadratic residue using Legendre symbol\n      if (FpLegendre(Fp, n) !== 1) throw new Error('Cannot find square root');\n      // Initialize variables for the main loop\n      let M = S;\n      let c = Fp.mul(Fp.ONE, cc); // c = z^Q, move cc from field _Fp into field Fp\n      let t = Fp.pow(n, Q); // t = n^Q, first guess at the fudge factor\n      let R = Fp.pow(n, Q1div2); // R = n^((Q+1)/2), first guess at the square root\n      // Main loop\n      // while t != 1\n      while (!Fp.eql(t, Fp.ONE)) {\n        if (Fp.is0(t)) return Fp.ZERO; // if t=0 return R=0\n        let i = 1;\n        // Find the smallest i >= 1 such that t^(2^i) ≡ 1 (mod P)\n        let t_tmp = Fp.sqr(t); // t^(2^1)\n        while (!Fp.eql(t_tmp, Fp.ONE)) {\n          i++;\n          t_tmp = Fp.sqr(t_tmp); // t^(2^2)...\n          if (i === M) throw new Error('Cannot find square root');\n        }\n        // Calculate the exponent for b: 2^(M - i - 1)\n        const exponent = _1n << BigInt(M - i - 1); // bigint is important\n        const b = Fp.pow(c, exponent); // b = 2^(M - i - 1)\n        // Update variables\n        M = i;\n        c = Fp.sqr(b); // c = b^2\n        t = Fp.mul(t, c); // t = (t * b^2)\n        R = Fp.mul(R, b); // R = R*b\n      }\n      return R;\n    };\n  }\n  /**\n   * Square root for a finite field. Will try optimized versions first:\n   *\n   * 1. P ≡ 3 (mod 4)\n   * 2. P ≡ 5 (mod 8)\n   * 3. P ≡ 9 (mod 16)\n   * 4. Tonelli-Shanks algorithm\n   *\n   * Different algorithms can give different roots, it is up to user to decide which one they want.\n   * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n   */\n  function FpSqrt(P) {\n    // P ≡ 3 (mod 4) => √n = n^((P+1)/4)\n    if (P % _4n === _3n) return sqrt3mod4;\n    // P ≡ 5 (mod 8) => Atkin algorithm, page 10 of https://eprint.iacr.org/2012/685.pdf\n    if (P % _8n === _5n) return sqrt5mod8;\n    // P ≡ 9 (mod 16) => Kong algorithm, page 11 of https://eprint.iacr.org/2012/685.pdf (algorithm 4)\n    if (P % _16n === _9n) return sqrt9mod16(P);\n    // Tonelli-Shanks algorithm\n    return tonelliShanks(P);\n  }\n  // Little-endian check for first LE bit (last BE bit);\n  const isNegativeLE = (num, modulo) => (mod(num, modulo) & _1n) === _1n;\n  exports.isNegativeLE = isNegativeLE;\n  // prettier-ignore\n  const FIELD_FIELDS = ['create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr', 'eql', 'add', 'sub', 'mul', 'pow', 'div', 'addN', 'subN', 'mulN', 'sqrN'];\n  function validateField(field) {\n    const initial = {\n      ORDER: 'bigint',\n      MASK: 'bigint',\n      BYTES: 'number',\n      BITS: 'number'\n    };\n    const opts = FIELD_FIELDS.reduce((map, val) => {\n      map[val] = 'function';\n      return map;\n    }, initial);\n    (0, utils_ts_1._validateObject)(field, opts);\n    // const max = 16384;\n    // if (field.BYTES < 1 || field.BYTES > max) throw new Error('invalid field');\n    // if (field.BITS < 1 || field.BITS > 8 * max) throw new Error('invalid field');\n    return field;\n  }\n  // Generic field functions\n  /**\n   * Same as `pow` but for Fp: non-constant-time.\n   * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n   */\n  function FpPow(Fp, num, power) {\n    if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n    if (power === _0n) return Fp.ONE;\n    if (power === _1n) return num;\n    let p = Fp.ONE;\n    let d = num;\n    while (power > _0n) {\n      if (power & _1n) p = Fp.mul(p, d);\n      d = Fp.sqr(d);\n      power >>= _1n;\n    }\n    return p;\n  }\n  /**\n   * Efficiently invert an array of Field elements.\n   * Exception-free. Will return `undefined` for 0 elements.\n   * @param passZero map 0 to 0 (instead of undefined)\n   */\n  function FpInvertBatch(Fp, nums, passZero = false) {\n    const inverted = new Array(nums.length).fill(passZero ? Fp.ZERO : undefined);\n    // Walk from first to last, multiply them by each other MOD p\n    const multipliedAcc = nums.reduce((acc, num, i) => {\n      if (Fp.is0(num)) return acc;\n      inverted[i] = acc;\n      return Fp.mul(acc, num);\n    }, Fp.ONE);\n    // Invert last element\n    const invertedAcc = Fp.inv(multipliedAcc);\n    // Walk from last to first, multiply them by inverted each other MOD p\n    nums.reduceRight((acc, num, i) => {\n      if (Fp.is0(num)) return acc;\n      inverted[i] = Fp.mul(acc, inverted[i]);\n      return Fp.mul(acc, num);\n    }, invertedAcc);\n    return inverted;\n  }\n  // TODO: remove\n  function FpDiv(Fp, lhs, rhs) {\n    return Fp.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, Fp.ORDER) : Fp.inv(rhs));\n  }\n  /**\n   * Legendre symbol.\n   * Legendre constant is used to calculate Legendre symbol (a | p)\n   * which denotes the value of a^((p-1)/2) (mod p).\n   *\n   * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n   * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n   * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n   */\n  function FpLegendre(Fp, n) {\n    // We can use 3rd argument as optional cache of this value\n    // but seems unneeded for now. The operation is very fast.\n    const p1mod2 = (Fp.ORDER - _1n) / _2n;\n    const powered = Fp.pow(n, p1mod2);\n    const yes = Fp.eql(powered, Fp.ONE);\n    const zero = Fp.eql(powered, Fp.ZERO);\n    const no = Fp.eql(powered, Fp.neg(Fp.ONE));\n    if (!yes && !zero && !no) throw new Error('invalid Legendre symbol result');\n    return yes ? 1 : zero ? 0 : -1;\n  }\n  // This function returns True whenever the value x is a square in the field F.\n  function FpIsSquare(Fp, n) {\n    const l = FpLegendre(Fp, n);\n    return l === 1;\n  }\n  // CURVE.n lengths\n  function nLength(n, nBitLength) {\n    // Bit size, byte size of CURVE.n\n    if (nBitLength !== undefined) (0, utils_ts_1.anumber)(nBitLength);\n    const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n    const nByteLength = Math.ceil(_nBitLength / 8);\n    return {\n      nBitLength: _nBitLength,\n      nByteLength\n    };\n  }\n  /**\n   * Creates a finite field. Major performance optimizations:\n   * * 1. Denormalized operations like mulN instead of mul.\n   * * 2. Identical object shape: never add or remove keys.\n   * * 3. `Object.freeze`.\n   * Fragile: always run a benchmark on a change.\n   * Security note: operations don't check 'isValid' for all elements for performance reasons,\n   * it is caller responsibility to check this.\n   * This is low-level code, please make sure you know what you're doing.\n   *\n   * Note about field properties:\n   * * CHARACTERISTIC p = prime number, number of elements in main subgroup.\n   * * ORDER q = similar to cofactor in curves, may be composite `q = p^m`.\n   *\n   * @param ORDER field order, probably prime, or could be composite\n   * @param bitLen how many bits the field consumes\n   * @param isLE (default: false) if encoding / decoding should be in little-endian\n   * @param redef optional faster redefinitions of sqrt and other methods\n   */\n  function Field(ORDER, bitLenOrOpts,\n  // TODO: use opts only in v2?\n  isLE = false, opts = {}) {\n    if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n    let _nbitLength = undefined;\n    let _sqrt = undefined;\n    let modFromBytes = false;\n    let allowedLengths = undefined;\n    if (typeof bitLenOrOpts === 'object' && bitLenOrOpts != null) {\n      if (opts.sqrt || isLE) throw new Error('cannot specify opts in two arguments');\n      const _opts = bitLenOrOpts;\n      if (_opts.BITS) _nbitLength = _opts.BITS;\n      if (_opts.sqrt) _sqrt = _opts.sqrt;\n      if (typeof _opts.isLE === 'boolean') isLE = _opts.isLE;\n      if (typeof _opts.modFromBytes === 'boolean') modFromBytes = _opts.modFromBytes;\n      allowedLengths = _opts.allowedLengths;\n    } else {\n      if (typeof bitLenOrOpts === 'number') _nbitLength = bitLenOrOpts;\n      if (opts.sqrt) _sqrt = opts.sqrt;\n    }\n    const {\n      nBitLength: BITS,\n      nByteLength: BYTES\n    } = nLength(ORDER, _nbitLength);\n    if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n    let sqrtP; // cached sqrtP\n    const f = Object.freeze({\n      ORDER,\n      isLE,\n      BITS,\n      BYTES,\n      MASK: (0, utils_ts_1.bitMask)(BITS),\n      ZERO: _0n,\n      ONE: _1n,\n      allowedLengths: allowedLengths,\n      create: num => mod(num, ORDER),\n      isValid: num => {\n        if (typeof num !== 'bigint') throw new Error('invalid field element: expected bigint, got ' + typeof num);\n        return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n      },\n      is0: num => num === _0n,\n      // is valid and invertible\n      isValidNot0: num => !f.is0(num) && f.isValid(num),\n      isOdd: num => (num & _1n) === _1n,\n      neg: num => mod(-num, ORDER),\n      eql: (lhs, rhs) => lhs === rhs,\n      sqr: num => mod(num * num, ORDER),\n      add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n      sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n      mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n      pow: (num, power) => FpPow(f, num, power),\n      div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n      // Same as above, but doesn't normalize\n      sqrN: num => num * num,\n      addN: (lhs, rhs) => lhs + rhs,\n      subN: (lhs, rhs) => lhs - rhs,\n      mulN: (lhs, rhs) => lhs * rhs,\n      inv: num => invert(num, ORDER),\n      sqrt: _sqrt || (n => {\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\n        return sqrtP(f, n);\n      }),\n      toBytes: num => isLE ? (0, utils_ts_1.numberToBytesLE)(num, BYTES) : (0, utils_ts_1.numberToBytesBE)(num, BYTES),\n      fromBytes: (bytes, skipValidation = true) => {\n        if (allowedLengths) {\n          if (!allowedLengths.includes(bytes.length) || bytes.length > BYTES) {\n            throw new Error('Field.fromBytes: expected ' + allowedLengths + ' bytes, got ' + bytes.length);\n          }\n          const padded = new Uint8Array(BYTES);\n          // isLE add 0 to right, !isLE to the left.\n          padded.set(bytes, isLE ? 0 : padded.length - bytes.length);\n          bytes = padded;\n        }\n        if (bytes.length !== BYTES) throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n        let scalar = isLE ? (0, utils_ts_1.bytesToNumberLE)(bytes) : (0, utils_ts_1.bytesToNumberBE)(bytes);\n        if (modFromBytes) scalar = mod(scalar, ORDER);\n        if (!skipValidation) if (!f.isValid(scalar)) throw new Error('invalid field element: outside of range 0..ORDER');\n        // NOTE: we don't validate scalar here, please use isValid. This done such way because some\n        // protocol may allow non-reduced scalar that reduced later or changed some other way.\n        return scalar;\n      },\n      // TODO: we don't need it here, move out to separate fn\n      invertBatch: lst => FpInvertBatch(f, lst),\n      // We can't move this out because Fp6, Fp12 implement it\n      // and it's unclear what to return in there.\n      cmov: (a, b, c) => c ? b : a\n    });\n    return Object.freeze(f);\n  }\n  // Generic random scalar, we can do same for other fields if via Fp2.mul(Fp2.ONE, Fp2.random)?\n  // This allows unsafe methods like ignore bias or zero. These unsafe, but often used in different protocols (if deterministic RNG).\n  // which mean we cannot force this via opts.\n  // Not sure what to do with randomBytes, we can accept it inside opts if wanted.\n  // Probably need to export getMinHashLength somewhere?\n  // random(bytes?: Uint8Array, unsafeAllowZero = false, unsafeAllowBias = false) {\n  //   const LEN = !unsafeAllowBias ? getMinHashLength(ORDER) : BYTES;\n  //   if (bytes === undefined) bytes = randomBytes(LEN); // _opts.randomBytes?\n  //   const num = isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n  //   // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  //   const reduced = unsafeAllowZero ? mod(num, ORDER) : mod(num, ORDER - _1n) + _1n;\n  //   return reduced;\n  // },\n  function FpSqrtOdd(Fp, elm) {\n    if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? root : Fp.neg(root);\n  }\n  function FpSqrtEven(Fp, elm) {\n    if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n    const root = Fp.sqrt(elm);\n    return Fp.isOdd(root) ? Fp.neg(root) : root;\n  }\n  /**\n   * \"Constant-time\" private key generation utility.\n   * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n   * Which makes it slightly more biased, less secure.\n   * @deprecated use `mapKeyToField` instead\n   */\n  function hashToPrivateScalar(hash, groupOrder, isLE = false) {\n    hash = (0, utils_ts_1.ensureBytes)('privateHash', hash);\n    const hashLen = hash.length;\n    const minLen = nLength(groupOrder).nByteLength + 8;\n    if (minLen < 24 || hashLen < minLen || hashLen > 1024) throw new Error('hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen);\n    const num = isLE ? (0, utils_ts_1.bytesToNumberLE)(hash) : (0, utils_ts_1.bytesToNumberBE)(hash);\n    return mod(num, groupOrder - _1n) + _1n;\n  }\n  /**\n   * Returns total number of bytes consumed by the field element.\n   * For example, 32 bytes for usual 256-bit weierstrass curve.\n   * @param fieldOrder number of field elements, usually CURVE.n\n   * @returns byte length of field\n   */\n  function getFieldBytesLength(fieldOrder) {\n    if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n    const bitLength = fieldOrder.toString(2).length;\n    return Math.ceil(bitLength / 8);\n  }\n  /**\n   * Returns minimal amount of bytes that can be safely reduced\n   * by field order.\n   * Should be 2^-128 for 128-bit curve such as P256.\n   * @param fieldOrder number of field elements, usually CURVE.n\n   * @returns byte length of target hash\n   */\n  function getMinHashLength(fieldOrder) {\n    const length = getFieldBytesLength(fieldOrder);\n    return length + Math.ceil(length / 2);\n  }\n  /**\n   * \"Constant-time\" private key generation utility.\n   * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n   * and convert them into private scalar, with the modulo bias being negligible.\n   * Needs at least 48 bytes of input for 32-byte private key.\n   * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n   * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n   * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n   * @param hash hash output from SHA3 or a similar function\n   * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n   * @param isLE interpret hash bytes as LE num\n   * @returns valid private scalar\n   */\n  function mapHashToField(key, fieldOrder, isLE = false) {\n    const len = key.length;\n    const fieldLen = getFieldBytesLength(fieldOrder);\n    const minLen = getMinHashLength(fieldOrder);\n    // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n    if (len < 16 || len < minLen || len > 1024) throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n    const num = isLE ? (0, utils_ts_1.bytesToNumberLE)(key) : (0, utils_ts_1.bytesToNumberBE)(key);\n    // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n    const reduced = mod(num, fieldOrder - _1n) + _1n;\n    return isLE ? (0, utils_ts_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_ts_1.numberToBytesBE)(reduced, fieldLen);\n  }\n});","lineCount":527,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"isNegativeLE"],[7,22,3,20],[7,25,3,23],[7,30,3,28],[7,31,3,29],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"mod"],[8,13,4,11],[8,16,4,14,"mod"],[8,19,4,17],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"pow"],[9,13,5,11],[9,16,5,14,"pow"],[9,19,5,17],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"pow2"],[10,14,6,12],[10,17,6,15,"pow2"],[10,21,6,19],[11,2,7,0,"exports"],[11,9,7,7],[11,10,7,8,"invert"],[11,16,7,14],[11,19,7,17,"invert"],[11,25,7,23],[12,2,8,0,"exports"],[12,9,8,7],[12,10,8,8,"tonelliShanks"],[12,23,8,21],[12,26,8,24,"tonelliShanks"],[12,39,8,37],[13,2,9,0,"exports"],[13,9,9,7],[13,10,9,8,"FpSqrt"],[13,16,9,14],[13,19,9,17,"FpSqrt"],[13,25,9,23],[14,2,10,0,"exports"],[14,9,10,7],[14,10,10,8,"validateField"],[14,23,10,21],[14,26,10,24,"validateField"],[14,39,10,37],[15,2,11,0,"exports"],[15,9,11,7],[15,10,11,8,"FpPow"],[15,15,11,13],[15,18,11,16,"FpPow"],[15,23,11,21],[16,2,12,0,"exports"],[16,9,12,7],[16,10,12,8,"FpInvertBatch"],[16,23,12,21],[16,26,12,24,"FpInvertBatch"],[16,39,12,37],[17,2,13,0,"exports"],[17,9,13,7],[17,10,13,8,"FpDiv"],[17,15,13,13],[17,18,13,16,"FpDiv"],[17,23,13,21],[18,2,14,0,"exports"],[18,9,14,7],[18,10,14,8,"FpLegendre"],[18,20,14,18],[18,23,14,21,"FpLegendre"],[18,33,14,31],[19,2,15,0,"exports"],[19,9,15,7],[19,10,15,8,"FpIsSquare"],[19,20,15,18],[19,23,15,21,"FpIsSquare"],[19,33,15,31],[20,2,16,0,"exports"],[20,9,16,7],[20,10,16,8,"nLength"],[20,17,16,15],[20,20,16,18,"nLength"],[20,27,16,25],[21,2,17,0,"exports"],[21,9,17,7],[21,10,17,8,"Field"],[21,15,17,13],[21,18,17,16,"Field"],[21,23,17,21],[22,2,18,0,"exports"],[22,9,18,7],[22,10,18,8,"FpSqrtOdd"],[22,19,18,17],[22,22,18,20,"FpSqrtOdd"],[22,31,18,29],[23,2,19,0,"exports"],[23,9,19,7],[23,10,19,8,"FpSqrtEven"],[23,20,19,18],[23,23,19,21,"FpSqrtEven"],[23,33,19,31],[24,2,20,0,"exports"],[24,9,20,7],[24,10,20,8,"hashToPrivateScalar"],[24,29,20,27],[24,32,20,30,"hashToPrivateScalar"],[24,51,20,49],[25,2,21,0,"exports"],[25,9,21,7],[25,10,21,8,"getFieldBytesLength"],[25,29,21,27],[25,32,21,30,"getFieldBytesLength"],[25,51,21,49],[26,2,22,0,"exports"],[26,9,22,7],[26,10,22,8,"getMinHashLength"],[26,26,22,24],[26,29,22,27,"getMinHashLength"],[26,45,22,43],[27,2,23,0,"exports"],[27,9,23,7],[27,10,23,8,"mapHashToField"],[27,24,23,22],[27,27,23,25,"mapHashToField"],[27,41,23,39],[28,2,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,0,29,0],[34,2,30,0],[35,2,31,0],[35,8,31,6,"utils_ts_1"],[35,18,31,16],[35,21,31,19,"require"],[35,28,31,26],[35,29,31,26,"_dependencyMap"],[35,43,31,26],[35,61,31,40],[35,62,31,41],[36,2,32,0],[37,2,33,0],[37,8,33,6,"_0n"],[37,11,33,9],[37,14,33,12,"BigInt"],[37,20,33,18],[37,21,33,19],[37,22,33,20],[37,23,33,21],[38,4,33,23,"_1n"],[38,7,33,26],[38,10,33,29,"BigInt"],[38,16,33,35],[38,17,33,36],[38,18,33,37],[38,19,33,38],[39,4,33,40,"_2n"],[39,7,33,43],[39,10,33,46],[39,25,33,62,"BigInt"],[39,31,33,68],[39,32,33,69],[39,33,33,70],[39,34,33,71],[40,4,33,73,"_3n"],[40,7,33,76],[40,10,33,79],[40,25,33,95,"BigInt"],[40,31,33,101],[40,32,33,102],[40,33,33,103],[40,34,33,104],[41,2,34,0],[42,2,35,0],[42,8,35,6,"_4n"],[42,11,35,9],[42,14,35,12],[42,29,35,28,"BigInt"],[42,35,35,34],[42,36,35,35],[42,37,35,36],[42,38,35,37],[43,4,35,39,"_5n"],[43,7,35,42],[43,10,35,45],[43,25,35,61,"BigInt"],[43,31,35,67],[43,32,35,68],[43,33,35,69],[43,34,35,70],[44,4,35,72,"_7n"],[44,7,35,75],[44,10,35,78],[44,25,35,94,"BigInt"],[44,31,35,100],[44,32,35,101],[44,33,35,102],[44,34,35,103],[45,2,36,0],[46,2,37,0],[46,8,37,6,"_8n"],[46,11,37,9],[46,14,37,12],[46,29,37,28,"BigInt"],[46,35,37,34],[46,36,37,35],[46,37,37,36],[46,38,37,37],[47,4,37,39,"_9n"],[47,7,37,42],[47,10,37,45],[47,25,37,61,"BigInt"],[47,31,37,67],[47,32,37,68],[47,33,37,69],[47,34,37,70],[48,4,37,72,"_16n"],[48,8,37,76],[48,11,37,79],[48,26,37,95,"BigInt"],[48,32,37,101],[48,33,37,102],[48,35,37,104],[48,36,37,105],[49,2,38,0],[50,2,39,0],[50,11,39,9,"mod"],[50,14,39,12,"mod"],[50,15,39,13,"a"],[50,16,39,14],[50,18,39,16,"b"],[50,19,39,17],[50,21,39,19],[51,4,40,4],[51,10,40,10,"result"],[51,16,40,16],[51,19,40,19,"a"],[51,20,40,20],[51,23,40,23,"b"],[51,24,40,24],[52,4,41,4],[52,11,41,11,"result"],[52,17,41,17],[52,21,41,21,"_0n"],[52,24,41,24],[52,27,41,27,"result"],[52,33,41,33],[52,36,41,36,"b"],[52,37,41,37],[52,40,41,40,"result"],[52,46,41,46],[53,2,42,0],[54,2,43,0],[55,0,44,0],[56,0,45,0],[57,0,46,0],[58,0,47,0],[59,0,48,0],[60,2,49,0],[60,11,49,9,"pow"],[60,14,49,12,"pow"],[60,15,49,13,"num"],[60,18,49,16],[60,20,49,18,"power"],[60,25,49,23],[60,27,49,25,"modulo"],[60,33,49,31],[60,35,49,33],[61,4,50,4],[61,11,50,11,"FpPow"],[61,16,50,16],[61,17,50,17,"Field"],[61,22,50,22],[61,23,50,23,"modulo"],[61,29,50,29],[61,30,50,30],[61,32,50,32,"num"],[61,35,50,35],[61,37,50,37,"power"],[61,42,50,42],[61,43,50,43],[62,2,51,0],[63,2,52,0],[64,2,53,0],[64,11,53,9,"pow2"],[64,15,53,13,"pow2"],[64,16,53,14,"x"],[64,17,53,15],[64,19,53,17,"power"],[64,24,53,22],[64,26,53,24,"modulo"],[64,32,53,30],[64,34,53,32],[65,4,54,4],[65,8,54,8,"res"],[65,11,54,11],[65,14,54,14,"x"],[65,15,54,15],[66,4,55,4],[66,11,55,11,"power"],[66,16,55,16],[66,18,55,18],[66,21,55,21,"_0n"],[66,24,55,24],[66,26,55,26],[67,6,56,8,"res"],[67,9,56,11],[67,13,56,15,"res"],[67,16,56,18],[68,6,57,8,"res"],[68,9,57,11],[68,13,57,15,"modulo"],[68,19,57,21],[69,4,58,4],[70,4,59,4],[70,11,59,11,"res"],[70,14,59,14],[71,2,60,0],[72,2,61,0],[73,0,62,0],[74,0,63,0],[75,0,64,0],[76,2,65,0],[76,11,65,9,"invert"],[76,17,65,15,"invert"],[76,18,65,16,"number"],[76,24,65,22],[76,26,65,24,"modulo"],[76,32,65,30],[76,34,65,32],[77,4,66,4],[77,8,66,8,"number"],[77,14,66,14],[77,19,66,19,"_0n"],[77,22,66,22],[77,24,67,8],[77,30,67,14],[77,34,67,18,"Error"],[77,39,67,23],[77,40,67,24],[77,74,67,58],[77,75,67,59],[78,4,68,4],[78,8,68,8,"modulo"],[78,14,68,14],[78,18,68,18,"_0n"],[78,21,68,21],[78,23,69,8],[78,29,69,14],[78,33,69,18,"Error"],[78,38,69,23],[78,39,69,24],[78,80,69,65],[78,83,69,68,"modulo"],[78,89,69,74],[78,90,69,75],[79,4,70,4],[80,4,71,4],[80,8,71,8,"a"],[80,9,71,9],[80,12,71,12,"mod"],[80,15,71,15],[80,16,71,16,"number"],[80,22,71,22],[80,24,71,24,"modulo"],[80,30,71,30],[80,31,71,31],[81,4,72,4],[81,8,72,8,"b"],[81,9,72,9],[81,12,72,12,"modulo"],[81,18,72,18],[82,4,73,4],[83,4,74,4],[83,8,74,8,"x"],[83,9,74,9],[83,12,74,12,"_0n"],[83,15,74,15],[84,6,74,17,"y"],[84,7,74,18],[84,10,74,21,"_1n"],[84,13,74,24],[85,6,74,26,"u"],[85,7,74,27],[85,10,74,30,"_1n"],[85,13,74,33],[86,6,74,35,"v"],[86,7,74,36],[86,10,74,39,"_0n"],[86,13,74,42],[87,4,75,4],[87,11,75,11,"a"],[87,12,75,12],[87,17,75,17,"_0n"],[87,20,75,20],[87,22,75,22],[88,6,76,8],[89,6,77,8],[89,12,77,14,"q"],[89,13,77,15],[89,16,77,18,"b"],[89,17,77,19],[89,20,77,22,"a"],[89,21,77,23],[90,6,78,8],[90,12,78,14,"r"],[90,13,78,15],[90,16,78,18,"b"],[90,17,78,19],[90,20,78,22,"a"],[90,21,78,23],[91,6,79,8],[91,12,79,14,"m"],[91,13,79,15],[91,16,79,18,"x"],[91,17,79,19],[91,20,79,22,"u"],[91,21,79,23],[91,24,79,26,"q"],[91,25,79,27],[92,6,80,8],[92,12,80,14,"n"],[92,13,80,15],[92,16,80,18,"y"],[92,17,80,19],[92,20,80,22,"v"],[92,21,80,23],[92,24,80,26,"q"],[92,25,80,27],[93,6,81,8],[94,6,82,8,"b"],[94,7,82,9],[94,10,82,12,"a"],[94,11,82,13],[94,13,82,15,"a"],[94,14,82,16],[94,17,82,19,"r"],[94,18,82,20],[94,20,82,22,"x"],[94,21,82,23],[94,24,82,26,"u"],[94,25,82,27],[94,27,82,29,"y"],[94,28,82,30],[94,31,82,33,"v"],[94,32,82,34],[94,34,82,36,"u"],[94,35,82,37],[94,38,82,40,"m"],[94,39,82,41],[94,41,82,43,"v"],[94,42,82,44],[94,45,82,47,"n"],[94,46,82,48],[95,4,83,4],[96,4,84,4],[96,10,84,10,"gcd"],[96,13,84,13],[96,16,84,16,"b"],[96,17,84,17],[97,4,85,4],[97,8,85,8,"gcd"],[97,11,85,11],[97,16,85,16,"_1n"],[97,19,85,19],[97,21,86,8],[97,27,86,14],[97,31,86,18,"Error"],[97,36,86,23],[97,37,86,24],[97,61,86,48],[97,62,86,49],[98,4,87,4],[98,11,87,11,"mod"],[98,14,87,14],[98,15,87,15,"x"],[98,16,87,16],[98,18,87,18,"modulo"],[98,24,87,24],[98,25,87,25],[99,2,88,0],[100,2,89,0],[100,11,89,9,"assertIsSquare"],[100,25,89,23,"assertIsSquare"],[100,26,89,24,"Fp"],[100,28,89,26],[100,30,89,28,"root"],[100,34,89,32],[100,36,89,34,"n"],[100,37,89,35],[100,39,89,37],[101,4,90,4],[101,8,90,8],[101,9,90,9,"Fp"],[101,11,90,11],[101,12,90,12,"eql"],[101,15,90,15],[101,16,90,16,"Fp"],[101,18,90,18],[101,19,90,19,"sqr"],[101,22,90,22],[101,23,90,23,"root"],[101,27,90,27],[101,28,90,28],[101,30,90,30,"n"],[101,31,90,31],[101,32,90,32],[101,34,91,8],[101,40,91,14],[101,44,91,18,"Error"],[101,49,91,23],[101,50,91,24],[101,75,91,49],[101,76,91,50],[102,2,92,0],[103,2,93,0],[104,2,94,0],[105,2,95,0],[106,2,96,0],[107,2,97,0],[107,11,97,9,"sqrt3mod4"],[107,20,97,18,"sqrt3mod4"],[107,21,97,19,"Fp"],[107,23,97,21],[107,25,97,23,"n"],[107,26,97,24],[107,28,97,26],[108,4,98,4],[108,10,98,10,"p1div4"],[108,16,98,16],[108,19,98,19],[108,20,98,20,"Fp"],[108,22,98,22],[108,23,98,23,"ORDER"],[108,28,98,28],[108,31,98,31,"_1n"],[108,34,98,34],[108,38,98,38,"_4n"],[108,41,98,41],[109,4,99,4],[109,10,99,10,"root"],[109,14,99,14],[109,17,99,17,"Fp"],[109,19,99,19],[109,20,99,20,"pow"],[109,23,99,23],[109,24,99,24,"n"],[109,25,99,25],[109,27,99,27,"p1div4"],[109,33,99,33],[109,34,99,34],[110,4,100,4,"assertIsSquare"],[110,18,100,18],[110,19,100,19,"Fp"],[110,21,100,21],[110,23,100,23,"root"],[110,27,100,27],[110,29,100,29,"n"],[110,30,100,30],[110,31,100,31],[111,4,101,4],[111,11,101,11,"root"],[111,15,101,15],[112,2,102,0],[113,2,103,0],[113,11,103,9,"sqrt5mod8"],[113,20,103,18,"sqrt5mod8"],[113,21,103,19,"Fp"],[113,23,103,21],[113,25,103,23,"n"],[113,26,103,24],[113,28,103,26],[114,4,104,4],[114,10,104,10,"p5div8"],[114,16,104,16],[114,19,104,19],[114,20,104,20,"Fp"],[114,22,104,22],[114,23,104,23,"ORDER"],[114,28,104,28],[114,31,104,31,"_5n"],[114,34,104,34],[114,38,104,38,"_8n"],[114,41,104,41],[115,4,105,4],[115,10,105,10,"n2"],[115,12,105,12],[115,15,105,15,"Fp"],[115,17,105,17],[115,18,105,18,"mul"],[115,21,105,21],[115,22,105,22,"n"],[115,23,105,23],[115,25,105,25,"_2n"],[115,28,105,28],[115,29,105,29],[116,4,106,4],[116,10,106,10,"v"],[116,11,106,11],[116,14,106,14,"Fp"],[116,16,106,16],[116,17,106,17,"pow"],[116,20,106,20],[116,21,106,21,"n2"],[116,23,106,23],[116,25,106,25,"p5div8"],[116,31,106,31],[116,32,106,32],[117,4,107,4],[117,10,107,10,"nv"],[117,12,107,12],[117,15,107,15,"Fp"],[117,17,107,17],[117,18,107,18,"mul"],[117,21,107,21],[117,22,107,22,"n"],[117,23,107,23],[117,25,107,25,"v"],[117,26,107,26],[117,27,107,27],[118,4,108,4],[118,10,108,10,"i"],[118,11,108,11],[118,14,108,14,"Fp"],[118,16,108,16],[118,17,108,17,"mul"],[118,20,108,20],[118,21,108,21,"Fp"],[118,23,108,23],[118,24,108,24,"mul"],[118,27,108,27],[118,28,108,28,"nv"],[118,30,108,30],[118,32,108,32,"_2n"],[118,35,108,35],[118,36,108,36],[118,38,108,38,"v"],[118,39,108,39],[118,40,108,40],[119,4,109,4],[119,10,109,10,"root"],[119,14,109,14],[119,17,109,17,"Fp"],[119,19,109,19],[119,20,109,20,"mul"],[119,23,109,23],[119,24,109,24,"nv"],[119,26,109,26],[119,28,109,28,"Fp"],[119,30,109,30],[119,31,109,31,"sub"],[119,34,109,34],[119,35,109,35,"i"],[119,36,109,36],[119,38,109,38,"Fp"],[119,40,109,40],[119,41,109,41,"ONE"],[119,44,109,44],[119,45,109,45],[119,46,109,46],[120,4,110,4,"assertIsSquare"],[120,18,110,18],[120,19,110,19,"Fp"],[120,21,110,21],[120,23,110,23,"root"],[120,27,110,27],[120,29,110,29,"n"],[120,30,110,30],[120,31,110,31],[121,4,111,4],[121,11,111,11,"root"],[121,15,111,15],[122,2,112,0],[123,2,113,0],[124,2,114,0],[125,2,115,0],[125,11,115,9,"sqrt9mod16"],[125,21,115,19,"sqrt9mod16"],[125,22,115,20,"P"],[125,23,115,21],[125,25,115,23],[126,4,116,4],[126,10,116,10,"Fp_"],[126,13,116,13],[126,16,116,16,"Field"],[126,21,116,21],[126,22,116,22,"P"],[126,23,116,23],[126,24,116,24],[127,4,117,4],[127,10,117,10,"tn"],[127,12,117,12],[127,15,117,15,"tonelliShanks"],[127,28,117,28],[127,29,117,29,"P"],[127,30,117,30],[127,31,117,31],[128,4,118,4],[128,10,118,10,"c1"],[128,12,118,12],[128,15,118,15,"tn"],[128,17,118,17],[128,18,118,18,"Fp_"],[128,21,118,21],[128,23,118,23,"Fp_"],[128,26,118,26],[128,27,118,27,"neg"],[128,30,118,30],[128,31,118,31,"Fp_"],[128,34,118,34],[128,35,118,35,"ONE"],[128,38,118,38],[128,39,118,39],[128,40,118,40],[128,41,118,41],[128,42,118,42],[129,4,119,4],[129,10,119,10,"c2"],[129,12,119,12],[129,15,119,15,"tn"],[129,17,119,17],[129,18,119,18,"Fp_"],[129,21,119,21],[129,23,119,23,"c1"],[129,25,119,25],[129,26,119,26],[129,27,119,27],[129,28,119,28],[130,4,120,4],[130,10,120,10,"c3"],[130,12,120,12],[130,15,120,15,"tn"],[130,17,120,17],[130,18,120,18,"Fp_"],[130,21,120,21],[130,23,120,23,"Fp_"],[130,26,120,26],[130,27,120,27,"neg"],[130,30,120,30],[130,31,120,31,"c1"],[130,33,120,33],[130,34,120,34],[130,35,120,35],[130,36,120,36],[130,37,120,37],[131,4,121,4],[131,10,121,10,"c4"],[131,12,121,12],[131,15,121,15],[131,16,121,16,"P"],[131,17,121,17],[131,20,121,20,"_7n"],[131,23,121,23],[131,27,121,27,"_16n"],[131,31,121,31],[131,32,121,32],[131,33,121,33],[132,4,122,4],[132,11,122,11],[132,12,122,12,"Fp"],[132,14,122,14],[132,16,122,16,"n"],[132,17,122,17],[132,22,122,22],[133,6,123,8],[133,10,123,12,"tv1"],[133,13,123,15],[133,16,123,18,"Fp"],[133,18,123,20],[133,19,123,21,"pow"],[133,22,123,24],[133,23,123,25,"n"],[133,24,123,26],[133,26,123,28,"c4"],[133,28,123,30],[133,29,123,31],[133,30,123,32],[133,31,123,33],[134,6,124,8],[134,10,124,12,"tv2"],[134,13,124,15],[134,16,124,18,"Fp"],[134,18,124,20],[134,19,124,21,"mul"],[134,22,124,24],[134,23,124,25,"tv1"],[134,26,124,28],[134,28,124,30,"c1"],[134,30,124,32],[134,31,124,33],[134,32,124,34],[134,33,124,35],[135,6,125,8],[135,12,125,14,"tv3"],[135,15,125,17],[135,18,125,20,"Fp"],[135,20,125,22],[135,21,125,23,"mul"],[135,24,125,26],[135,25,125,27,"tv1"],[135,28,125,30],[135,30,125,32,"c2"],[135,32,125,34],[135,33,125,35],[135,34,125,36],[135,35,125,37],[136,6,126,8],[136,12,126,14,"tv4"],[136,15,126,17],[136,18,126,20,"Fp"],[136,20,126,22],[136,21,126,23,"mul"],[136,24,126,26],[136,25,126,27,"tv1"],[136,28,126,30],[136,30,126,32,"c3"],[136,32,126,34],[136,33,126,35],[136,34,126,36],[136,35,126,37],[137,6,127,8],[137,12,127,14,"e1"],[137,14,127,16],[137,17,127,19,"Fp"],[137,19,127,21],[137,20,127,22,"eql"],[137,23,127,25],[137,24,127,26,"Fp"],[137,26,127,28],[137,27,127,29,"sqr"],[137,30,127,32],[137,31,127,33,"tv2"],[137,34,127,36],[137,35,127,37],[137,37,127,39,"n"],[137,38,127,40],[137,39,127,41],[137,40,127,42],[137,41,127,43],[138,6,128,8],[138,12,128,14,"e2"],[138,14,128,16],[138,17,128,19,"Fp"],[138,19,128,21],[138,20,128,22,"eql"],[138,23,128,25],[138,24,128,26,"Fp"],[138,26,128,28],[138,27,128,29,"sqr"],[138,30,128,32],[138,31,128,33,"tv3"],[138,34,128,36],[138,35,128,37],[138,37,128,39,"n"],[138,38,128,40],[138,39,128,41],[138,40,128,42],[138,41,128,43],[139,6,129,8,"tv1"],[139,9,129,11],[139,12,129,14,"Fp"],[139,14,129,16],[139,15,129,17,"cmov"],[139,19,129,21],[139,20,129,22,"tv1"],[139,23,129,25],[139,25,129,27,"tv2"],[139,28,129,30],[139,30,129,32,"e1"],[139,32,129,34],[139,33,129,35],[139,34,129,36],[139,35,129,37],[140,6,130,8,"tv2"],[140,9,130,11],[140,12,130,14,"Fp"],[140,14,130,16],[140,15,130,17,"cmov"],[140,19,130,21],[140,20,130,22,"tv4"],[140,23,130,25],[140,25,130,27,"tv3"],[140,28,130,30],[140,30,130,32,"e2"],[140,32,130,34],[140,33,130,35],[140,34,130,36],[140,35,130,37],[141,6,131,8],[141,12,131,14,"e3"],[141,14,131,16],[141,17,131,19,"Fp"],[141,19,131,21],[141,20,131,22,"eql"],[141,23,131,25],[141,24,131,26,"Fp"],[141,26,131,28],[141,27,131,29,"sqr"],[141,30,131,32],[141,31,131,33,"tv2"],[141,34,131,36],[141,35,131,37],[141,37,131,39,"n"],[141,38,131,40],[141,39,131,41],[141,40,131,42],[141,41,131,43],[142,6,132,8],[142,12,132,14,"root"],[142,16,132,18],[142,19,132,21,"Fp"],[142,21,132,23],[142,22,132,24,"cmov"],[142,26,132,28],[142,27,132,29,"tv1"],[142,30,132,32],[142,32,132,34,"tv2"],[142,35,132,37],[142,37,132,39,"e3"],[142,39,132,41],[142,40,132,42],[142,41,132,43],[142,42,132,44],[143,6,133,8,"assertIsSquare"],[143,20,133,22],[143,21,133,23,"Fp"],[143,23,133,25],[143,25,133,27,"root"],[143,29,133,31],[143,31,133,33,"n"],[143,32,133,34],[143,33,133,35],[144,6,134,8],[144,13,134,15,"root"],[144,17,134,19],[145,4,135,4],[145,5,135,5],[146,2,136,0],[147,2,137,0],[148,0,138,0],[149,0,139,0],[150,0,140,0],[151,0,141,0],[152,0,142,0],[153,0,143,0],[154,2,144,0],[154,11,144,9,"tonelliShanks"],[154,24,144,22,"tonelliShanks"],[154,25,144,23,"P"],[154,26,144,24],[154,28,144,26],[155,4,145,4],[156,4,146,4],[157,4,147,4],[157,8,147,8,"P"],[157,9,147,9],[157,12,147,12,"_3n"],[157,15,147,15],[157,17,148,8],[157,23,148,14],[157,27,148,18,"Error"],[157,32,148,23],[157,33,148,24],[157,70,148,61],[157,71,148,62],[158,4,149,4],[159,4,150,4],[159,8,150,8,"Q"],[159,9,150,9],[159,12,150,12,"P"],[159,13,150,13],[159,16,150,16,"_1n"],[159,19,150,19],[160,4,151,4],[160,8,151,8,"S"],[160,9,151,9],[160,12,151,12],[160,13,151,13],[161,4,152,4],[161,11,152,11,"Q"],[161,12,152,12],[161,15,152,15,"_2n"],[161,18,152,18],[161,23,152,23,"_0n"],[161,26,152,26],[161,28,152,28],[162,6,153,8,"Q"],[162,7,153,9],[162,11,153,13,"_2n"],[162,14,153,16],[163,6,154,8,"S"],[163,7,154,9],[163,9,154,11],[164,4,155,4],[165,4,156,4],[166,4,157,4],[166,8,157,8,"Z"],[166,9,157,9],[166,12,157,12,"_2n"],[166,15,157,15],[167,4,158,4],[167,10,158,10,"_Fp"],[167,13,158,13],[167,16,158,16,"Field"],[167,21,158,21],[167,22,158,22,"P"],[167,23,158,23],[167,24,158,24],[168,4,159,4],[168,11,159,11,"FpLegendre"],[168,21,159,21],[168,22,159,22,"_Fp"],[168,25,159,25],[168,27,159,27,"Z"],[168,28,159,28],[168,29,159,29],[168,34,159,34],[168,35,159,35],[168,37,159,37],[169,6,160,8],[170,6,161,8],[171,6,162,8],[171,10,162,12,"Z"],[171,11,162,13],[171,13,162,15],[171,16,162,18],[171,20,162,22],[171,22,163,12],[171,28,163,18],[171,32,163,22,"Error"],[171,37,163,27],[171,38,163,28],[171,85,163,75],[171,86,163,76],[172,4,164,4],[173,4,165,4],[174,4,166,4],[174,8,166,8,"S"],[174,9,166,9],[174,14,166,14],[174,15,166,15],[174,17,167,8],[174,24,167,15,"sqrt3mod4"],[174,33,167,24],[175,4,168,4],[176,4,169,4],[177,4,170,4],[177,8,170,8,"cc"],[177,10,170,10],[177,13,170,13,"_Fp"],[177,16,170,16],[177,17,170,17,"pow"],[177,20,170,20],[177,21,170,21,"Z"],[177,22,170,22],[177,24,170,24,"Q"],[177,25,170,25],[177,26,170,26],[177,27,170,27],[177,28,170,28],[178,4,171,4],[178,10,171,10,"Q1div2"],[178,16,171,16],[178,19,171,19],[178,20,171,20,"Q"],[178,21,171,21],[178,24,171,24,"_1n"],[178,27,171,27],[178,31,171,31,"_2n"],[178,34,171,34],[179,4,172,4],[179,11,172,11],[179,20,172,20,"tonelliSlow"],[179,31,172,31,"tonelliSlow"],[179,32,172,32,"Fp"],[179,34,172,34],[179,36,172,36,"n"],[179,37,172,37],[179,39,172,39],[180,6,173,8],[180,10,173,12,"Fp"],[180,12,173,14],[180,13,173,15,"is0"],[180,16,173,18],[180,17,173,19,"n"],[180,18,173,20],[180,19,173,21],[180,21,174,12],[180,28,174,19,"n"],[180,29,174,20],[181,6,175,8],[182,6,176,8],[182,10,176,12,"FpLegendre"],[182,20,176,22],[182,21,176,23,"Fp"],[182,23,176,25],[182,25,176,27,"n"],[182,26,176,28],[182,27,176,29],[182,32,176,34],[182,33,176,35],[182,35,177,12],[182,41,177,18],[182,45,177,22,"Error"],[182,50,177,27],[182,51,177,28],[182,76,177,53],[182,77,177,54],[183,6,178,8],[184,6,179,8],[184,10,179,12,"M"],[184,11,179,13],[184,14,179,16,"S"],[184,15,179,17],[185,6,180,8],[185,10,180,12,"c"],[185,11,180,13],[185,14,180,16,"Fp"],[185,16,180,18],[185,17,180,19,"mul"],[185,20,180,22],[185,21,180,23,"Fp"],[185,23,180,25],[185,24,180,26,"ONE"],[185,27,180,29],[185,29,180,31,"cc"],[185,31,180,33],[185,32,180,34],[185,33,180,35],[185,34,180,36],[186,6,181,8],[186,10,181,12,"t"],[186,11,181,13],[186,14,181,16,"Fp"],[186,16,181,18],[186,17,181,19,"pow"],[186,20,181,22],[186,21,181,23,"n"],[186,22,181,24],[186,24,181,26,"Q"],[186,25,181,27],[186,26,181,28],[186,27,181,29],[186,28,181,30],[187,6,182,8],[187,10,182,12,"R"],[187,11,182,13],[187,14,182,16,"Fp"],[187,16,182,18],[187,17,182,19,"pow"],[187,20,182,22],[187,21,182,23,"n"],[187,22,182,24],[187,24,182,26,"Q1div2"],[187,30,182,32],[187,31,182,33],[187,32,182,34],[187,33,182,35],[188,6,183,8],[189,6,184,8],[190,6,185,8],[190,13,185,15],[190,14,185,16,"Fp"],[190,16,185,18],[190,17,185,19,"eql"],[190,20,185,22],[190,21,185,23,"t"],[190,22,185,24],[190,24,185,26,"Fp"],[190,26,185,28],[190,27,185,29,"ONE"],[190,30,185,32],[190,31,185,33],[190,33,185,35],[191,8,186,12],[191,12,186,16,"Fp"],[191,14,186,18],[191,15,186,19,"is0"],[191,18,186,22],[191,19,186,23,"t"],[191,20,186,24],[191,21,186,25],[191,23,187,16],[191,30,187,23,"Fp"],[191,32,187,25],[191,33,187,26,"ZERO"],[191,37,187,30],[191,38,187,31],[191,39,187,32],[192,8,188,12],[192,12,188,16,"i"],[192,13,188,17],[192,16,188,20],[192,17,188,21],[193,8,189,12],[194,8,190,12],[194,12,190,16,"t_tmp"],[194,17,190,21],[194,20,190,24,"Fp"],[194,22,190,26],[194,23,190,27,"sqr"],[194,26,190,30],[194,27,190,31,"t"],[194,28,190,32],[194,29,190,33],[194,30,190,34],[194,31,190,35],[195,8,191,12],[195,15,191,19],[195,16,191,20,"Fp"],[195,18,191,22],[195,19,191,23,"eql"],[195,22,191,26],[195,23,191,27,"t_tmp"],[195,28,191,32],[195,30,191,34,"Fp"],[195,32,191,36],[195,33,191,37,"ONE"],[195,36,191,40],[195,37,191,41],[195,39,191,43],[196,10,192,16,"i"],[196,11,192,17],[196,13,192,19],[197,10,193,16,"t_tmp"],[197,15,193,21],[197,18,193,24,"Fp"],[197,20,193,26],[197,21,193,27,"sqr"],[197,24,193,30],[197,25,193,31,"t_tmp"],[197,30,193,36],[197,31,193,37],[197,32,193,38],[197,33,193,39],[198,10,194,16],[198,14,194,20,"i"],[198,15,194,21],[198,20,194,26,"M"],[198,21,194,27],[198,23,195,20],[198,29,195,26],[198,33,195,30,"Error"],[198,38,195,35],[198,39,195,36],[198,64,195,61],[198,65,195,62],[199,8,196,12],[200,8,197,12],[201,8,198,12],[201,14,198,18,"exponent"],[201,22,198,26],[201,25,198,29,"_1n"],[201,28,198,32],[201,32,198,36,"BigInt"],[201,38,198,42],[201,39,198,43,"M"],[201,40,198,44],[201,43,198,47,"i"],[201,44,198,48],[201,47,198,51],[201,48,198,52],[201,49,198,53],[201,50,198,54],[201,51,198,55],[202,8,199,12],[202,14,199,18,"b"],[202,15,199,19],[202,18,199,22,"Fp"],[202,20,199,24],[202,21,199,25,"pow"],[202,24,199,28],[202,25,199,29,"c"],[202,26,199,30],[202,28,199,32,"exponent"],[202,36,199,40],[202,37,199,41],[202,38,199,42],[202,39,199,43],[203,8,200,12],[204,8,201,12,"M"],[204,9,201,13],[204,12,201,16,"i"],[204,13,201,17],[205,8,202,12,"c"],[205,9,202,13],[205,12,202,16,"Fp"],[205,14,202,18],[205,15,202,19,"sqr"],[205,18,202,22],[205,19,202,23,"b"],[205,20,202,24],[205,21,202,25],[205,22,202,26],[205,23,202,27],[206,8,203,12,"t"],[206,9,203,13],[206,12,203,16,"Fp"],[206,14,203,18],[206,15,203,19,"mul"],[206,18,203,22],[206,19,203,23,"t"],[206,20,203,24],[206,22,203,26,"c"],[206,23,203,27],[206,24,203,28],[206,25,203,29],[206,26,203,30],[207,8,204,12,"R"],[207,9,204,13],[207,12,204,16,"Fp"],[207,14,204,18],[207,15,204,19,"mul"],[207,18,204,22],[207,19,204,23,"R"],[207,20,204,24],[207,22,204,26,"b"],[207,23,204,27],[207,24,204,28],[207,25,204,29],[207,26,204,30],[208,6,205,8],[209,6,206,8],[209,13,206,15,"R"],[209,14,206,16],[210,4,207,4],[210,5,207,5],[211,2,208,0],[212,2,209,0],[213,0,210,0],[214,0,211,0],[215,0,212,0],[216,0,213,0],[217,0,214,0],[218,0,215,0],[219,0,216,0],[220,0,217,0],[221,0,218,0],[222,0,219,0],[223,2,220,0],[223,11,220,9,"FpSqrt"],[223,17,220,15,"FpSqrt"],[223,18,220,16,"P"],[223,19,220,17],[223,21,220,19],[224,4,221,4],[225,4,222,4],[225,8,222,8,"P"],[225,9,222,9],[225,12,222,12,"_4n"],[225,15,222,15],[225,20,222,20,"_3n"],[225,23,222,23],[225,25,223,8],[225,32,223,15,"sqrt3mod4"],[225,41,223,24],[226,4,224,4],[227,4,225,4],[227,8,225,8,"P"],[227,9,225,9],[227,12,225,12,"_8n"],[227,15,225,15],[227,20,225,20,"_5n"],[227,23,225,23],[227,25,226,8],[227,32,226,15,"sqrt5mod8"],[227,41,226,24],[228,4,227,4],[229,4,228,4],[229,8,228,8,"P"],[229,9,228,9],[229,12,228,12,"_16n"],[229,16,228,16],[229,21,228,21,"_9n"],[229,24,228,24],[229,26,229,8],[229,33,229,15,"sqrt9mod16"],[229,43,229,25],[229,44,229,26,"P"],[229,45,229,27],[229,46,229,28],[230,4,230,4],[231,4,231,4],[231,11,231,11,"tonelliShanks"],[231,24,231,24],[231,25,231,25,"P"],[231,26,231,26],[231,27,231,27],[232,2,232,0],[233,2,233,0],[234,2,234,0],[234,8,234,6,"isNegativeLE"],[234,20,234,18],[234,23,234,21,"isNegativeLE"],[234,24,234,22,"num"],[234,27,234,25],[234,29,234,27,"modulo"],[234,35,234,33],[234,40,234,38],[234,41,234,39,"mod"],[234,44,234,42],[234,45,234,43,"num"],[234,48,234,46],[234,50,234,48,"modulo"],[234,56,234,54],[234,57,234,55],[234,60,234,58,"_1n"],[234,63,234,61],[234,69,234,67,"_1n"],[234,72,234,70],[235,2,235,0,"exports"],[235,9,235,7],[235,10,235,8,"isNegativeLE"],[235,22,235,20],[235,25,235,23,"isNegativeLE"],[235,37,235,35],[236,2,236,0],[237,2,237,0],[237,8,237,6,"FIELD_FIELDS"],[237,20,237,18],[237,23,237,21],[237,24,238,4],[237,32,238,12],[237,34,238,14],[237,43,238,23],[237,45,238,25],[237,50,238,30],[237,52,238,32],[237,57,238,37],[237,59,238,39],[237,64,238,44],[237,66,238,46],[237,72,238,52],[237,74,238,54],[237,79,238,59],[237,81,239,4],[237,86,239,9],[237,88,239,11],[237,93,239,16],[237,95,239,18],[237,100,239,23],[237,102,239,25],[237,107,239,30],[237,109,239,32],[237,114,239,37],[237,116,239,39],[237,121,239,44],[237,123,240,4],[237,129,240,10],[237,131,240,12],[237,137,240,18],[237,139,240,20],[237,145,240,26],[237,147,240,28],[237,153,240,34],[237,154,241,1],[238,2,242,0],[238,11,242,9,"validateField"],[238,24,242,22,"validateField"],[238,25,242,23,"field"],[238,30,242,28],[238,32,242,30],[239,4,243,4],[239,10,243,10,"initial"],[239,17,243,17],[239,20,243,20],[240,6,244,8,"ORDER"],[240,11,244,13],[240,13,244,15],[240,21,244,23],[241,6,245,8,"MASK"],[241,10,245,12],[241,12,245,14],[241,20,245,22],[242,6,246,8,"BYTES"],[242,11,246,13],[242,13,246,15],[242,21,246,23],[243,6,247,8,"BITS"],[243,10,247,12],[243,12,247,14],[244,4,248,4],[244,5,248,5],[245,4,249,4],[245,10,249,10,"opts"],[245,14,249,14],[245,17,249,17,"FIELD_FIELDS"],[245,29,249,29],[245,30,249,30,"reduce"],[245,36,249,36],[245,37,249,37],[245,38,249,38,"map"],[245,41,249,41],[245,43,249,43,"val"],[245,46,249,46],[245,51,249,51],[246,6,250,8,"map"],[246,9,250,11],[246,10,250,12,"val"],[246,13,250,15],[246,14,250,16],[246,17,250,19],[246,27,250,29],[247,6,251,8],[247,13,251,15,"map"],[247,16,251,18],[248,4,252,4],[248,5,252,5],[248,7,252,7,"initial"],[248,14,252,14],[248,15,252,15],[249,4,253,4],[249,5,253,5],[249,6,253,6],[249,8,253,8,"utils_ts_1"],[249,18,253,18],[249,19,253,19,"_validateObject"],[249,34,253,34],[249,36,253,36,"field"],[249,41,253,41],[249,43,253,43,"opts"],[249,47,253,47],[249,48,253,48],[250,4,254,4],[251,4,255,4],[252,4,256,4],[253,4,257,4],[253,11,257,11,"field"],[253,16,257,16],[254,2,258,0],[255,2,259,0],[256,2,260,0],[257,0,261,0],[258,0,262,0],[259,0,263,0],[260,2,264,0],[260,11,264,9,"FpPow"],[260,16,264,14,"FpPow"],[260,17,264,15,"Fp"],[260,19,264,17],[260,21,264,19,"num"],[260,24,264,22],[260,26,264,24,"power"],[260,31,264,29],[260,33,264,31],[261,4,265,4],[261,8,265,8,"power"],[261,13,265,13],[261,16,265,16,"_0n"],[261,19,265,19],[261,21,266,8],[261,27,266,14],[261,31,266,18,"Error"],[261,36,266,23],[261,37,266,24],[261,78,266,65],[261,79,266,66],[262,4,267,4],[262,8,267,8,"power"],[262,13,267,13],[262,18,267,18,"_0n"],[262,21,267,21],[262,23,268,8],[262,30,268,15,"Fp"],[262,32,268,17],[262,33,268,18,"ONE"],[262,36,268,21],[263,4,269,4],[263,8,269,8,"power"],[263,13,269,13],[263,18,269,18,"_1n"],[263,21,269,21],[263,23,270,8],[263,30,270,15,"num"],[263,33,270,18],[264,4,271,4],[264,8,271,8,"p"],[264,9,271,9],[264,12,271,12,"Fp"],[264,14,271,14],[264,15,271,15,"ONE"],[264,18,271,18],[265,4,272,4],[265,8,272,8,"d"],[265,9,272,9],[265,12,272,12,"num"],[265,15,272,15],[266,4,273,4],[266,11,273,11,"power"],[266,16,273,16],[266,19,273,19,"_0n"],[266,22,273,22],[266,24,273,24],[267,6,274,8],[267,10,274,12,"power"],[267,15,274,17],[267,18,274,20,"_1n"],[267,21,274,23],[267,23,275,12,"p"],[267,24,275,13],[267,27,275,16,"Fp"],[267,29,275,18],[267,30,275,19,"mul"],[267,33,275,22],[267,34,275,23,"p"],[267,35,275,24],[267,37,275,26,"d"],[267,38,275,27],[267,39,275,28],[268,6,276,8,"d"],[268,7,276,9],[268,10,276,12,"Fp"],[268,12,276,14],[268,13,276,15,"sqr"],[268,16,276,18],[268,17,276,19,"d"],[268,18,276,20],[268,19,276,21],[269,6,277,8,"power"],[269,11,277,13],[269,16,277,18,"_1n"],[269,19,277,21],[270,4,278,4],[271,4,279,4],[271,11,279,11,"p"],[271,12,279,12],[272,2,280,0],[273,2,281,0],[274,0,282,0],[275,0,283,0],[276,0,284,0],[277,0,285,0],[278,2,286,0],[278,11,286,9,"FpInvertBatch"],[278,24,286,22,"FpInvertBatch"],[278,25,286,23,"Fp"],[278,27,286,25],[278,29,286,27,"nums"],[278,33,286,31],[278,35,286,33,"passZero"],[278,43,286,41],[278,46,286,44],[278,51,286,49],[278,53,286,51],[279,4,287,4],[279,10,287,10,"inverted"],[279,18,287,18],[279,21,287,21],[279,25,287,25,"Array"],[279,30,287,30],[279,31,287,31,"nums"],[279,35,287,35],[279,36,287,36,"length"],[279,42,287,42],[279,43,287,43],[279,44,287,44,"fill"],[279,48,287,48],[279,49,287,49,"passZero"],[279,57,287,57],[279,60,287,60,"Fp"],[279,62,287,62],[279,63,287,63,"ZERO"],[279,67,287,67],[279,70,287,70,"undefined"],[279,79,287,79],[279,80,287,80],[280,4,288,4],[281,4,289,4],[281,10,289,10,"multipliedAcc"],[281,23,289,23],[281,26,289,26,"nums"],[281,30,289,30],[281,31,289,31,"reduce"],[281,37,289,37],[281,38,289,38],[281,39,289,39,"acc"],[281,42,289,42],[281,44,289,44,"num"],[281,47,289,47],[281,49,289,49,"i"],[281,50,289,50],[281,55,289,55],[282,6,290,8],[282,10,290,12,"Fp"],[282,12,290,14],[282,13,290,15,"is0"],[282,16,290,18],[282,17,290,19,"num"],[282,20,290,22],[282,21,290,23],[282,23,291,12],[282,30,291,19,"acc"],[282,33,291,22],[283,6,292,8,"inverted"],[283,14,292,16],[283,15,292,17,"i"],[283,16,292,18],[283,17,292,19],[283,20,292,22,"acc"],[283,23,292,25],[284,6,293,8],[284,13,293,15,"Fp"],[284,15,293,17],[284,16,293,18,"mul"],[284,19,293,21],[284,20,293,22,"acc"],[284,23,293,25],[284,25,293,27,"num"],[284,28,293,30],[284,29,293,31],[285,4,294,4],[285,5,294,5],[285,7,294,7,"Fp"],[285,9,294,9],[285,10,294,10,"ONE"],[285,13,294,13],[285,14,294,14],[286,4,295,4],[287,4,296,4],[287,10,296,10,"invertedAcc"],[287,21,296,21],[287,24,296,24,"Fp"],[287,26,296,26],[287,27,296,27,"inv"],[287,30,296,30],[287,31,296,31,"multipliedAcc"],[287,44,296,44],[287,45,296,45],[288,4,297,4],[289,4,298,4,"nums"],[289,8,298,8],[289,9,298,9,"reduceRight"],[289,20,298,20],[289,21,298,21],[289,22,298,22,"acc"],[289,25,298,25],[289,27,298,27,"num"],[289,30,298,30],[289,32,298,32,"i"],[289,33,298,33],[289,38,298,38],[290,6,299,8],[290,10,299,12,"Fp"],[290,12,299,14],[290,13,299,15,"is0"],[290,16,299,18],[290,17,299,19,"num"],[290,20,299,22],[290,21,299,23],[290,23,300,12],[290,30,300,19,"acc"],[290,33,300,22],[291,6,301,8,"inverted"],[291,14,301,16],[291,15,301,17,"i"],[291,16,301,18],[291,17,301,19],[291,20,301,22,"Fp"],[291,22,301,24],[291,23,301,25,"mul"],[291,26,301,28],[291,27,301,29,"acc"],[291,30,301,32],[291,32,301,34,"inverted"],[291,40,301,42],[291,41,301,43,"i"],[291,42,301,44],[291,43,301,45],[291,44,301,46],[292,6,302,8],[292,13,302,15,"Fp"],[292,15,302,17],[292,16,302,18,"mul"],[292,19,302,21],[292,20,302,22,"acc"],[292,23,302,25],[292,25,302,27,"num"],[292,28,302,30],[292,29,302,31],[293,4,303,4],[293,5,303,5],[293,7,303,7,"invertedAcc"],[293,18,303,18],[293,19,303,19],[294,4,304,4],[294,11,304,11,"inverted"],[294,19,304,19],[295,2,305,0],[296,2,306,0],[297,2,307,0],[297,11,307,9,"FpDiv"],[297,16,307,14,"FpDiv"],[297,17,307,15,"Fp"],[297,19,307,17],[297,21,307,19,"lhs"],[297,24,307,22],[297,26,307,24,"rhs"],[297,29,307,27],[297,31,307,29],[298,4,308,4],[298,11,308,11,"Fp"],[298,13,308,13],[298,14,308,14,"mul"],[298,17,308,17],[298,18,308,18,"lhs"],[298,21,308,21],[298,23,308,23],[298,30,308,30,"rhs"],[298,33,308,33],[298,38,308,38],[298,46,308,46],[298,49,308,49,"invert"],[298,55,308,55],[298,56,308,56,"rhs"],[298,59,308,59],[298,61,308,61,"Fp"],[298,63,308,63],[298,64,308,64,"ORDER"],[298,69,308,69],[298,70,308,70],[298,73,308,73,"Fp"],[298,75,308,75],[298,76,308,76,"inv"],[298,79,308,79],[298,80,308,80,"rhs"],[298,83,308,83],[298,84,308,84],[298,85,308,85],[299,2,309,0],[300,2,310,0],[301,0,311,0],[302,0,312,0],[303,0,313,0],[304,0,314,0],[305,0,315,0],[306,0,316,0],[307,0,317,0],[308,0,318,0],[309,2,319,0],[309,11,319,9,"FpLegendre"],[309,21,319,19,"FpLegendre"],[309,22,319,20,"Fp"],[309,24,319,22],[309,26,319,24,"n"],[309,27,319,25],[309,29,319,27],[310,4,320,4],[311,4,321,4],[312,4,322,4],[312,10,322,10,"p1mod2"],[312,16,322,16],[312,19,322,19],[312,20,322,20,"Fp"],[312,22,322,22],[312,23,322,23,"ORDER"],[312,28,322,28],[312,31,322,31,"_1n"],[312,34,322,34],[312,38,322,38,"_2n"],[312,41,322,41],[313,4,323,4],[313,10,323,10,"powered"],[313,17,323,17],[313,20,323,20,"Fp"],[313,22,323,22],[313,23,323,23,"pow"],[313,26,323,26],[313,27,323,27,"n"],[313,28,323,28],[313,30,323,30,"p1mod2"],[313,36,323,36],[313,37,323,37],[314,4,324,4],[314,10,324,10,"yes"],[314,13,324,13],[314,16,324,16,"Fp"],[314,18,324,18],[314,19,324,19,"eql"],[314,22,324,22],[314,23,324,23,"powered"],[314,30,324,30],[314,32,324,32,"Fp"],[314,34,324,34],[314,35,324,35,"ONE"],[314,38,324,38],[314,39,324,39],[315,4,325,4],[315,10,325,10,"zero"],[315,14,325,14],[315,17,325,17,"Fp"],[315,19,325,19],[315,20,325,20,"eql"],[315,23,325,23],[315,24,325,24,"powered"],[315,31,325,31],[315,33,325,33,"Fp"],[315,35,325,35],[315,36,325,36,"ZERO"],[315,40,325,40],[315,41,325,41],[316,4,326,4],[316,10,326,10,"no"],[316,12,326,12],[316,15,326,15,"Fp"],[316,17,326,17],[316,18,326,18,"eql"],[316,21,326,21],[316,22,326,22,"powered"],[316,29,326,29],[316,31,326,31,"Fp"],[316,33,326,33],[316,34,326,34,"neg"],[316,37,326,37],[316,38,326,38,"Fp"],[316,40,326,40],[316,41,326,41,"ONE"],[316,44,326,44],[316,45,326,45],[316,46,326,46],[317,4,327,4],[317,8,327,8],[317,9,327,9,"yes"],[317,12,327,12],[317,16,327,16],[317,17,327,17,"zero"],[317,21,327,21],[317,25,327,25],[317,26,327,26,"no"],[317,28,327,28],[317,30,328,8],[317,36,328,14],[317,40,328,18,"Error"],[317,45,328,23],[317,46,328,24],[317,78,328,56],[317,79,328,57],[318,4,329,4],[318,11,329,11,"yes"],[318,14,329,14],[318,17,329,17],[318,18,329,18],[318,21,329,21,"zero"],[318,25,329,25],[318,28,329,28],[318,29,329,29],[318,32,329,32],[318,33,329,33],[318,34,329,34],[319,2,330,0],[320,2,331,0],[321,2,332,0],[321,11,332,9,"FpIsSquare"],[321,21,332,19,"FpIsSquare"],[321,22,332,20,"Fp"],[321,24,332,22],[321,26,332,24,"n"],[321,27,332,25],[321,29,332,27],[322,4,333,4],[322,10,333,10,"l"],[322,11,333,11],[322,14,333,14,"FpLegendre"],[322,24,333,24],[322,25,333,25,"Fp"],[322,27,333,27],[322,29,333,29,"n"],[322,30,333,30],[322,31,333,31],[323,4,334,4],[323,11,334,11,"l"],[323,12,334,12],[323,17,334,17],[323,18,334,18],[324,2,335,0],[325,2,336,0],[326,2,337,0],[326,11,337,9,"nLength"],[326,18,337,16,"nLength"],[326,19,337,17,"n"],[326,20,337,18],[326,22,337,20,"nBitLength"],[326,32,337,30],[326,34,337,32],[327,4,338,4],[328,4,339,4],[328,8,339,8,"nBitLength"],[328,18,339,18],[328,23,339,23,"undefined"],[328,32,339,32],[328,34,340,8],[328,35,340,9],[328,36,340,10],[328,38,340,12,"utils_ts_1"],[328,48,340,22],[328,49,340,23,"anumber"],[328,56,340,30],[328,58,340,32,"nBitLength"],[328,68,340,42],[328,69,340,43],[329,4,341,4],[329,10,341,10,"_nBitLength"],[329,21,341,21],[329,24,341,24,"nBitLength"],[329,34,341,34],[329,39,341,39,"undefined"],[329,48,341,48],[329,51,341,51,"nBitLength"],[329,61,341,61],[329,64,341,64,"n"],[329,65,341,65],[329,66,341,66,"toString"],[329,74,341,74],[329,75,341,75],[329,76,341,76],[329,77,341,77],[329,78,341,78,"length"],[329,84,341,84],[330,4,342,4],[330,10,342,10,"nByteLength"],[330,21,342,21],[330,24,342,24,"Math"],[330,28,342,28],[330,29,342,29,"ceil"],[330,33,342,33],[330,34,342,34,"_nBitLength"],[330,45,342,45],[330,48,342,48],[330,49,342,49],[330,50,342,50],[331,4,343,4],[331,11,343,11],[332,6,343,13,"nBitLength"],[332,16,343,23],[332,18,343,25,"_nBitLength"],[332,29,343,36],[333,6,343,38,"nByteLength"],[334,4,343,50],[334,5,343,51],[335,2,344,0],[336,2,345,0],[337,0,346,0],[338,0,347,0],[339,0,348,0],[340,0,349,0],[341,0,350,0],[342,0,351,0],[343,0,352,0],[344,0,353,0],[345,0,354,0],[346,0,355,0],[347,0,356,0],[348,0,357,0],[349,0,358,0],[350,0,359,0],[351,0,360,0],[352,0,361,0],[353,0,362,0],[354,0,363,0],[355,2,364,0],[355,11,364,9,"Field"],[355,16,364,14,"Field"],[355,17,364,15,"ORDER"],[355,22,364,20],[355,24,364,22,"bitLenOrOpts"],[355,36,364,34],[356,2,364,36],[357,2,365,0,"isLE"],[357,6,365,4],[357,9,365,7],[357,14,365,12],[357,16,365,14,"opts"],[357,20,365,18],[357,23,365,21],[357,24,365,22],[357,25,365,23],[357,27,365,25],[358,4,366,4],[358,8,366,8,"ORDER"],[358,13,366,13],[358,17,366,17,"_0n"],[358,20,366,20],[358,22,367,8],[358,28,367,14],[358,32,367,18,"Error"],[358,37,367,23],[358,38,367,24],[358,79,367,65],[358,82,367,68,"ORDER"],[358,87,367,73],[358,88,367,74],[359,4,368,4],[359,8,368,8,"_nbitLength"],[359,19,368,19],[359,22,368,22,"undefined"],[359,31,368,31],[360,4,369,4],[360,8,369,8,"_sqrt"],[360,13,369,13],[360,16,369,16,"undefined"],[360,25,369,25],[361,4,370,4],[361,8,370,8,"modFromBytes"],[361,20,370,20],[361,23,370,23],[361,28,370,28],[362,4,371,4],[362,8,371,8,"allowedLengths"],[362,22,371,22],[362,25,371,25,"undefined"],[362,34,371,34],[363,4,372,4],[363,8,372,8],[363,15,372,15,"bitLenOrOpts"],[363,27,372,27],[363,32,372,32],[363,40,372,40],[363,44,372,44,"bitLenOrOpts"],[363,56,372,56],[363,60,372,60],[363,64,372,64],[363,66,372,66],[364,6,373,8],[364,10,373,12,"opts"],[364,14,373,16],[364,15,373,17,"sqrt"],[364,19,373,21],[364,23,373,25,"isLE"],[364,27,373,29],[364,29,374,12],[364,35,374,18],[364,39,374,22,"Error"],[364,44,374,27],[364,45,374,28],[364,83,374,66],[364,84,374,67],[365,6,375,8],[365,12,375,14,"_opts"],[365,17,375,19],[365,20,375,22,"bitLenOrOpts"],[365,32,375,34],[366,6,376,8],[366,10,376,12,"_opts"],[366,15,376,17],[366,16,376,18,"BITS"],[366,20,376,22],[366,22,377,12,"_nbitLength"],[366,33,377,23],[366,36,377,26,"_opts"],[366,41,377,31],[366,42,377,32,"BITS"],[366,46,377,36],[367,6,378,8],[367,10,378,12,"_opts"],[367,15,378,17],[367,16,378,18,"sqrt"],[367,20,378,22],[367,22,379,12,"_sqrt"],[367,27,379,17],[367,30,379,20,"_opts"],[367,35,379,25],[367,36,379,26,"sqrt"],[367,40,379,30],[368,6,380,8],[368,10,380,12],[368,17,380,19,"_opts"],[368,22,380,24],[368,23,380,25,"isLE"],[368,27,380,29],[368,32,380,34],[368,41,380,43],[368,43,381,12,"isLE"],[368,47,381,16],[368,50,381,19,"_opts"],[368,55,381,24],[368,56,381,25,"isLE"],[368,60,381,29],[369,6,382,8],[369,10,382,12],[369,17,382,19,"_opts"],[369,22,382,24],[369,23,382,25,"modFromBytes"],[369,35,382,37],[369,40,382,42],[369,49,382,51],[369,51,383,12,"modFromBytes"],[369,63,383,24],[369,66,383,27,"_opts"],[369,71,383,32],[369,72,383,33,"modFromBytes"],[369,84,383,45],[370,6,384,8,"allowedLengths"],[370,20,384,22],[370,23,384,25,"_opts"],[370,28,384,30],[370,29,384,31,"allowedLengths"],[370,43,384,45],[371,4,385,4],[371,5,385,5],[371,11,386,9],[372,6,387,8],[372,10,387,12],[372,17,387,19,"bitLenOrOpts"],[372,29,387,31],[372,34,387,36],[372,42,387,44],[372,44,388,12,"_nbitLength"],[372,55,388,23],[372,58,388,26,"bitLenOrOpts"],[372,70,388,38],[373,6,389,8],[373,10,389,12,"opts"],[373,14,389,16],[373,15,389,17,"sqrt"],[373,19,389,21],[373,21,390,12,"_sqrt"],[373,26,390,17],[373,29,390,20,"opts"],[373,33,390,24],[373,34,390,25,"sqrt"],[373,38,390,29],[374,4,391,4],[375,4,392,4],[375,10,392,10],[376,6,392,12,"nBitLength"],[376,16,392,22],[376,18,392,24,"BITS"],[376,22,392,28],[377,6,392,30,"nByteLength"],[377,17,392,41],[377,19,392,43,"BYTES"],[378,4,392,49],[378,5,392,50],[378,8,392,53,"nLength"],[378,15,392,60],[378,16,392,61,"ORDER"],[378,21,392,66],[378,23,392,68,"_nbitLength"],[378,34,392,79],[378,35,392,80],[379,4,393,4],[379,8,393,8,"BYTES"],[379,13,393,13],[379,16,393,16],[379,20,393,20],[379,22,394,8],[379,28,394,14],[379,32,394,18,"Error"],[379,37,394,23],[379,38,394,24],[379,86,394,72],[379,87,394,73],[380,4,395,4],[380,8,395,8,"sqrtP"],[380,13,395,13],[380,14,395,14],[380,15,395,15],[381,4,396,4],[381,10,396,10,"f"],[381,11,396,11],[381,14,396,14,"Object"],[381,20,396,20],[381,21,396,21,"freeze"],[381,27,396,27],[381,28,396,28],[382,6,397,8,"ORDER"],[382,11,397,13],[383,6,398,8,"isLE"],[383,10,398,12],[384,6,399,8,"BITS"],[384,10,399,12],[385,6,400,8,"BYTES"],[385,11,400,13],[386,6,401,8,"MASK"],[386,10,401,12],[386,12,401,14],[386,13,401,15],[386,14,401,16],[386,16,401,18,"utils_ts_1"],[386,26,401,28],[386,27,401,29,"bitMask"],[386,34,401,36],[386,36,401,38,"BITS"],[386,40,401,42],[386,41,401,43],[387,6,402,8,"ZERO"],[387,10,402,12],[387,12,402,14,"_0n"],[387,15,402,17],[388,6,403,8,"ONE"],[388,9,403,11],[388,11,403,13,"_1n"],[388,14,403,16],[389,6,404,8,"allowedLengths"],[389,20,404,22],[389,22,404,24,"allowedLengths"],[389,36,404,38],[390,6,405,8,"create"],[390,12,405,14],[390,14,405,17,"num"],[390,17,405,20],[390,21,405,25,"mod"],[390,24,405,28],[390,25,405,29,"num"],[390,28,405,32],[390,30,405,34,"ORDER"],[390,35,405,39],[390,36,405,40],[391,6,406,8,"isValid"],[391,13,406,15],[391,15,406,18,"num"],[391,18,406,21],[391,22,406,26],[392,8,407,12],[392,12,407,16],[392,19,407,23,"num"],[392,22,407,26],[392,27,407,31],[392,35,407,39],[392,37,408,16],[392,43,408,22],[392,47,408,26,"Error"],[392,52,408,31],[392,53,408,32],[392,99,408,78],[392,102,408,81],[392,109,408,88,"num"],[392,112,408,91],[392,113,408,92],[393,8,409,12],[393,15,409,19,"_0n"],[393,18,409,22],[393,22,409,26,"num"],[393,25,409,29],[393,29,409,33,"num"],[393,32,409,36],[393,35,409,39,"ORDER"],[393,40,409,44],[393,41,409,45],[393,42,409,46],[394,6,410,8],[394,7,410,9],[395,6,411,8,"is0"],[395,9,411,11],[395,11,411,14,"num"],[395,14,411,17],[395,18,411,22,"num"],[395,21,411,25],[395,26,411,30,"_0n"],[395,29,411,33],[396,6,412,8],[397,6,413,8,"isValidNot0"],[397,17,413,19],[397,19,413,22,"num"],[397,22,413,25],[397,26,413,30],[397,27,413,31,"f"],[397,28,413,32],[397,29,413,33,"is0"],[397,32,413,36],[397,33,413,37,"num"],[397,36,413,40],[397,37,413,41],[397,41,413,45,"f"],[397,42,413,46],[397,43,413,47,"isValid"],[397,50,413,54],[397,51,413,55,"num"],[397,54,413,58],[397,55,413,59],[398,6,414,8,"isOdd"],[398,11,414,13],[398,13,414,16,"num"],[398,16,414,19],[398,20,414,24],[398,21,414,25,"num"],[398,24,414,28],[398,27,414,31,"_1n"],[398,30,414,34],[398,36,414,40,"_1n"],[398,39,414,43],[399,6,415,8,"neg"],[399,9,415,11],[399,11,415,14,"num"],[399,14,415,17],[399,18,415,22,"mod"],[399,21,415,25],[399,22,415,26],[399,23,415,27,"num"],[399,26,415,30],[399,28,415,32,"ORDER"],[399,33,415,37],[399,34,415,38],[400,6,416,8,"eql"],[400,9,416,11],[400,11,416,13,"eql"],[400,12,416,14,"lhs"],[400,15,416,17],[400,17,416,19,"rhs"],[400,20,416,22],[400,25,416,27,"lhs"],[400,28,416,30],[400,33,416,35,"rhs"],[400,36,416,38],[401,6,417,8,"sqr"],[401,9,417,11],[401,11,417,14,"num"],[401,14,417,17],[401,18,417,22,"mod"],[401,21,417,25],[401,22,417,26,"num"],[401,25,417,29],[401,28,417,32,"num"],[401,31,417,35],[401,33,417,37,"ORDER"],[401,38,417,42],[401,39,417,43],[402,6,418,8,"add"],[402,9,418,11],[402,11,418,13,"add"],[402,12,418,14,"lhs"],[402,15,418,17],[402,17,418,19,"rhs"],[402,20,418,22],[402,25,418,27,"mod"],[402,28,418,30],[402,29,418,31,"lhs"],[402,32,418,34],[402,35,418,37,"rhs"],[402,38,418,40],[402,40,418,42,"ORDER"],[402,45,418,47],[402,46,418,48],[403,6,419,8,"sub"],[403,9,419,11],[403,11,419,13,"sub"],[403,12,419,14,"lhs"],[403,15,419,17],[403,17,419,19,"rhs"],[403,20,419,22],[403,25,419,27,"mod"],[403,28,419,30],[403,29,419,31,"lhs"],[403,32,419,34],[403,35,419,37,"rhs"],[403,38,419,40],[403,40,419,42,"ORDER"],[403,45,419,47],[403,46,419,48],[404,6,420,8,"mul"],[404,9,420,11],[404,11,420,13,"mul"],[404,12,420,14,"lhs"],[404,15,420,17],[404,17,420,19,"rhs"],[404,20,420,22],[404,25,420,27,"mod"],[404,28,420,30],[404,29,420,31,"lhs"],[404,32,420,34],[404,35,420,37,"rhs"],[404,38,420,40],[404,40,420,42,"ORDER"],[404,45,420,47],[404,46,420,48],[405,6,421,8,"pow"],[405,9,421,11],[405,11,421,13,"pow"],[405,12,421,14,"num"],[405,15,421,17],[405,17,421,19,"power"],[405,22,421,24],[405,27,421,29,"FpPow"],[405,32,421,34],[405,33,421,35,"f"],[405,34,421,36],[405,36,421,38,"num"],[405,39,421,41],[405,41,421,43,"power"],[405,46,421,48],[405,47,421,49],[406,6,422,8,"div"],[406,9,422,11],[406,11,422,13,"div"],[406,12,422,14,"lhs"],[406,15,422,17],[406,17,422,19,"rhs"],[406,20,422,22],[406,25,422,27,"mod"],[406,28,422,30],[406,29,422,31,"lhs"],[406,32,422,34],[406,35,422,37,"invert"],[406,41,422,43],[406,42,422,44,"rhs"],[406,45,422,47],[406,47,422,49,"ORDER"],[406,52,422,54],[406,53,422,55],[406,55,422,57,"ORDER"],[406,60,422,62],[406,61,422,63],[407,6,423,8],[408,6,424,8,"sqrN"],[408,10,424,12],[408,12,424,15,"num"],[408,15,424,18],[408,19,424,23,"num"],[408,22,424,26],[408,25,424,29,"num"],[408,28,424,32],[409,6,425,8,"addN"],[409,10,425,12],[409,12,425,14,"addN"],[409,13,425,15,"lhs"],[409,16,425,18],[409,18,425,20,"rhs"],[409,21,425,23],[409,26,425,28,"lhs"],[409,29,425,31],[409,32,425,34,"rhs"],[409,35,425,37],[410,6,426,8,"subN"],[410,10,426,12],[410,12,426,14,"subN"],[410,13,426,15,"lhs"],[410,16,426,18],[410,18,426,20,"rhs"],[410,21,426,23],[410,26,426,28,"lhs"],[410,29,426,31],[410,32,426,34,"rhs"],[410,35,426,37],[411,6,427,8,"mulN"],[411,10,427,12],[411,12,427,14,"mulN"],[411,13,427,15,"lhs"],[411,16,427,18],[411,18,427,20,"rhs"],[411,21,427,23],[411,26,427,28,"lhs"],[411,29,427,31],[411,32,427,34,"rhs"],[411,35,427,37],[412,6,428,8,"inv"],[412,9,428,11],[412,11,428,14,"num"],[412,14,428,17],[412,18,428,22,"invert"],[412,24,428,28],[412,25,428,29,"num"],[412,28,428,32],[412,30,428,34,"ORDER"],[412,35,428,39],[412,36,428,40],[413,6,429,8,"sqrt"],[413,10,429,12],[413,12,429,14,"_sqrt"],[413,17,429,19],[413,22,430,14,"n"],[413,23,430,15],[413,27,430,20],[414,8,431,16],[414,12,431,20],[414,13,431,21,"sqrtP"],[414,18,431,26],[414,20,432,20,"sqrtP"],[414,25,432,25],[414,28,432,28,"FpSqrt"],[414,34,432,34],[414,35,432,35,"ORDER"],[414,40,432,40],[414,41,432,41],[415,8,433,16],[415,15,433,23,"sqrtP"],[415,20,433,28],[415,21,433,29,"f"],[415,22,433,30],[415,24,433,32,"n"],[415,25,433,33],[415,26,433,34],[416,6,434,12],[416,7,434,13],[416,8,434,14],[417,6,435,8,"toBytes"],[417,13,435,15],[417,15,435,18,"num"],[417,18,435,21],[417,22,435,27,"isLE"],[417,26,435,31],[417,29,435,34],[417,30,435,35],[417,31,435,36],[417,33,435,38,"utils_ts_1"],[417,43,435,48],[417,44,435,49,"numberToBytesLE"],[417,59,435,64],[417,61,435,66,"num"],[417,64,435,69],[417,66,435,71,"BYTES"],[417,71,435,76],[417,72,435,77],[417,75,435,80],[417,76,435,81],[417,77,435,82],[417,79,435,84,"utils_ts_1"],[417,89,435,94],[417,90,435,95,"numberToBytesBE"],[417,105,435,110],[417,107,435,112,"num"],[417,110,435,115],[417,112,435,117,"BYTES"],[417,117,435,122],[417,118,435,124],[418,6,436,8,"fromBytes"],[418,15,436,17],[418,17,436,19,"fromBytes"],[418,18,436,20,"bytes"],[418,23,436,25],[418,25,436,27,"skipValidation"],[418,39,436,41],[418,42,436,44],[418,46,436,48],[418,51,436,53],[419,8,437,12],[419,12,437,16,"allowedLengths"],[419,26,437,30],[419,28,437,32],[420,10,438,16],[420,14,438,20],[420,15,438,21,"allowedLengths"],[420,29,438,35],[420,30,438,36,"includes"],[420,38,438,44],[420,39,438,45,"bytes"],[420,44,438,50],[420,45,438,51,"length"],[420,51,438,57],[420,52,438,58],[420,56,438,62,"bytes"],[420,61,438,67],[420,62,438,68,"length"],[420,68,438,74],[420,71,438,77,"BYTES"],[420,76,438,82],[420,78,438,84],[421,12,439,20],[421,18,439,26],[421,22,439,30,"Error"],[421,27,439,35],[421,28,439,36],[421,56,439,64],[421,59,439,67,"allowedLengths"],[421,73,439,81],[421,76,439,84],[421,90,439,98],[421,93,439,101,"bytes"],[421,98,439,106],[421,99,439,107,"length"],[421,105,439,113],[421,106,439,114],[422,10,440,16],[423,10,441,16],[423,16,441,22,"padded"],[423,22,441,28],[423,25,441,31],[423,29,441,35,"Uint8Array"],[423,39,441,45],[423,40,441,46,"BYTES"],[423,45,441,51],[423,46,441,52],[424,10,442,16],[425,10,443,16,"padded"],[425,16,443,22],[425,17,443,23,"set"],[425,20,443,26],[425,21,443,27,"bytes"],[425,26,443,32],[425,28,443,34,"isLE"],[425,32,443,38],[425,35,443,41],[425,36,443,42],[425,39,443,45,"padded"],[425,45,443,51],[425,46,443,52,"length"],[425,52,443,58],[425,55,443,61,"bytes"],[425,60,443,66],[425,61,443,67,"length"],[425,67,443,73],[425,68,443,74],[426,10,444,16,"bytes"],[426,15,444,21],[426,18,444,24,"padded"],[426,24,444,30],[427,8,445,12],[428,8,446,12],[428,12,446,16,"bytes"],[428,17,446,21],[428,18,446,22,"length"],[428,24,446,28],[428,29,446,33,"BYTES"],[428,34,446,38],[428,36,447,16],[428,42,447,22],[428,46,447,26,"Error"],[428,51,447,31],[428,52,447,32],[428,80,447,60],[428,83,447,63,"BYTES"],[428,88,447,68],[428,91,447,71],[428,105,447,85],[428,108,447,88,"bytes"],[428,113,447,93],[428,114,447,94,"length"],[428,120,447,100],[428,121,447,101],[429,8,448,12],[429,12,448,16,"scalar"],[429,18,448,22],[429,21,448,25,"isLE"],[429,25,448,29],[429,28,448,32],[429,29,448,33],[429,30,448,34],[429,32,448,36,"utils_ts_1"],[429,42,448,46],[429,43,448,47,"bytesToNumberLE"],[429,58,448,62],[429,60,448,64,"bytes"],[429,65,448,69],[429,66,448,70],[429,69,448,73],[429,70,448,74],[429,71,448,75],[429,73,448,77,"utils_ts_1"],[429,83,448,87],[429,84,448,88,"bytesToNumberBE"],[429,99,448,103],[429,101,448,105,"bytes"],[429,106,448,110],[429,107,448,111],[430,8,449,12],[430,12,449,16,"modFromBytes"],[430,24,449,28],[430,26,450,16,"scalar"],[430,32,450,22],[430,35,450,25,"mod"],[430,38,450,28],[430,39,450,29,"scalar"],[430,45,450,35],[430,47,450,37,"ORDER"],[430,52,450,42],[430,53,450,43],[431,8,451,12],[431,12,451,16],[431,13,451,17,"skipValidation"],[431,27,451,31],[431,29,452,16],[431,33,452,20],[431,34,452,21,"f"],[431,35,452,22],[431,36,452,23,"isValid"],[431,43,452,30],[431,44,452,31,"scalar"],[431,50,452,37],[431,51,452,38],[431,53,453,20],[431,59,453,26],[431,63,453,30,"Error"],[431,68,453,35],[431,69,453,36],[431,119,453,86],[431,120,453,87],[432,8,454,12],[433,8,455,12],[434,8,456,12],[434,15,456,19,"scalar"],[434,21,456,25],[435,6,457,8],[435,7,457,9],[436,6,458,8],[437,6,459,8,"invertBatch"],[437,17,459,19],[437,19,459,22,"lst"],[437,22,459,25],[437,26,459,30,"FpInvertBatch"],[437,39,459,43],[437,40,459,44,"f"],[437,41,459,45],[437,43,459,47,"lst"],[437,46,459,50],[437,47,459,51],[438,6,460,8],[439,6,461,8],[440,6,462,8,"cmov"],[440,10,462,12],[440,12,462,14,"cmov"],[440,13,462,15,"a"],[440,14,462,16],[440,16,462,18,"b"],[440,17,462,19],[440,19,462,21,"c"],[440,20,462,22],[440,25,462,28,"c"],[440,26,462,29],[440,29,462,32,"b"],[440,30,462,33],[440,33,462,36,"a"],[441,4,463,4],[441,5,463,5],[441,6,463,6],[442,4,464,4],[442,11,464,11,"Object"],[442,17,464,17],[442,18,464,18,"freeze"],[442,24,464,24],[442,25,464,25,"f"],[442,26,464,26],[442,27,464,27],[443,2,465,0],[444,2,466,0],[445,2,467,0],[446,2,468,0],[447,2,469,0],[448,2,470,0],[449,2,471,0],[450,2,472,0],[451,2,473,0],[452,2,474,0],[453,2,475,0],[454,2,476,0],[455,2,477,0],[456,2,478,0],[457,2,479,0],[457,11,479,9,"FpSqrtOdd"],[457,20,479,18,"FpSqrtOdd"],[457,21,479,19,"Fp"],[457,23,479,21],[457,25,479,23,"elm"],[457,28,479,26],[457,30,479,28],[458,4,480,4],[458,8,480,8],[458,9,480,9,"Fp"],[458,11,480,11],[458,12,480,12,"isOdd"],[458,17,480,17],[458,19,481,8],[458,25,481,14],[458,29,481,18,"Error"],[458,34,481,23],[458,35,481,24],[458,61,481,50],[458,62,481,51],[459,4,482,4],[459,10,482,10,"root"],[459,14,482,14],[459,17,482,17,"Fp"],[459,19,482,19],[459,20,482,20,"sqrt"],[459,24,482,24],[459,25,482,25,"elm"],[459,28,482,28],[459,29,482,29],[460,4,483,4],[460,11,483,11,"Fp"],[460,13,483,13],[460,14,483,14,"isOdd"],[460,19,483,19],[460,20,483,20,"root"],[460,24,483,24],[460,25,483,25],[460,28,483,28,"root"],[460,32,483,32],[460,35,483,35,"Fp"],[460,37,483,37],[460,38,483,38,"neg"],[460,41,483,41],[460,42,483,42,"root"],[460,46,483,46],[460,47,483,47],[461,2,484,0],[462,2,485,0],[462,11,485,9,"FpSqrtEven"],[462,21,485,19,"FpSqrtEven"],[462,22,485,20,"Fp"],[462,24,485,22],[462,26,485,24,"elm"],[462,29,485,27],[462,31,485,29],[463,4,486,4],[463,8,486,8],[463,9,486,9,"Fp"],[463,11,486,11],[463,12,486,12,"isOdd"],[463,17,486,17],[463,19,487,8],[463,25,487,14],[463,29,487,18,"Error"],[463,34,487,23],[463,35,487,24],[463,61,487,50],[463,62,487,51],[464,4,488,4],[464,10,488,10,"root"],[464,14,488,14],[464,17,488,17,"Fp"],[464,19,488,19],[464,20,488,20,"sqrt"],[464,24,488,24],[464,25,488,25,"elm"],[464,28,488,28],[464,29,488,29],[465,4,489,4],[465,11,489,11,"Fp"],[465,13,489,13],[465,14,489,14,"isOdd"],[465,19,489,19],[465,20,489,20,"root"],[465,24,489,24],[465,25,489,25],[465,28,489,28,"Fp"],[465,30,489,30],[465,31,489,31,"neg"],[465,34,489,34],[465,35,489,35,"root"],[465,39,489,39],[465,40,489,40],[465,43,489,43,"root"],[465,47,489,47],[466,2,490,0],[467,2,491,0],[468,0,492,0],[469,0,493,0],[470,0,494,0],[471,0,495,0],[472,0,496,0],[473,2,497,0],[473,11,497,9,"hashToPrivateScalar"],[473,30,497,28,"hashToPrivateScalar"],[473,31,497,29,"hash"],[473,35,497,33],[473,37,497,35,"groupOrder"],[473,47,497,45],[473,49,497,47,"isLE"],[473,53,497,51],[473,56,497,54],[473,61,497,59],[473,63,497,61],[474,4,498,4,"hash"],[474,8,498,8],[474,11,498,11],[474,12,498,12],[474,13,498,13],[474,15,498,15,"utils_ts_1"],[474,25,498,25],[474,26,498,26,"ensureBytes"],[474,37,498,37],[474,39,498,39],[474,52,498,52],[474,54,498,54,"hash"],[474,58,498,58],[474,59,498,59],[475,4,499,4],[475,10,499,10,"hashLen"],[475,17,499,17],[475,20,499,20,"hash"],[475,24,499,24],[475,25,499,25,"length"],[475,31,499,31],[476,4,500,4],[476,10,500,10,"minLen"],[476,16,500,16],[476,19,500,19,"nLength"],[476,26,500,26],[476,27,500,27,"groupOrder"],[476,37,500,37],[476,38,500,38],[476,39,500,39,"nByteLength"],[476,50,500,50],[476,53,500,53],[476,54,500,54],[477,4,501,4],[477,8,501,8,"minLen"],[477,14,501,14],[477,17,501,17],[477,19,501,19],[477,23,501,23,"hashLen"],[477,30,501,30],[477,33,501,33,"minLen"],[477,39,501,39],[477,43,501,43,"hashLen"],[477,50,501,50],[477,53,501,53],[477,57,501,57],[477,59,502,8],[477,65,502,14],[477,69,502,18,"Error"],[477,74,502,23],[477,75,502,24],[477,107,502,56],[477,110,502,59,"minLen"],[477,116,502,65],[477,119,502,68],[477,147,502,96],[477,150,502,99,"hashLen"],[477,157,502,106],[477,158,502,107],[478,4,503,4],[478,10,503,10,"num"],[478,13,503,13],[478,16,503,16,"isLE"],[478,20,503,20],[478,23,503,23],[478,24,503,24],[478,25,503,25],[478,27,503,27,"utils_ts_1"],[478,37,503,37],[478,38,503,38,"bytesToNumberLE"],[478,53,503,53],[478,55,503,55,"hash"],[478,59,503,59],[478,60,503,60],[478,63,503,63],[478,64,503,64],[478,65,503,65],[478,67,503,67,"utils_ts_1"],[478,77,503,77],[478,78,503,78,"bytesToNumberBE"],[478,93,503,93],[478,95,503,95,"hash"],[478,99,503,99],[478,100,503,100],[479,4,504,4],[479,11,504,11,"mod"],[479,14,504,14],[479,15,504,15,"num"],[479,18,504,18],[479,20,504,20,"groupOrder"],[479,30,504,30],[479,33,504,33,"_1n"],[479,36,504,36],[479,37,504,37],[479,40,504,40,"_1n"],[479,43,504,43],[480,2,505,0],[481,2,506,0],[482,0,507,0],[483,0,508,0],[484,0,509,0],[485,0,510,0],[486,0,511,0],[487,2,512,0],[487,11,512,9,"getFieldBytesLength"],[487,30,512,28,"getFieldBytesLength"],[487,31,512,29,"fieldOrder"],[487,41,512,39],[487,43,512,41],[488,4,513,4],[488,8,513,8],[488,15,513,15,"fieldOrder"],[488,25,513,25],[488,30,513,30],[488,38,513,38],[488,40,514,8],[488,46,514,14],[488,50,514,18,"Error"],[488,55,514,23],[488,56,514,24],[488,84,514,52],[488,85,514,53],[489,4,515,4],[489,10,515,10,"bitLength"],[489,19,515,19],[489,22,515,22,"fieldOrder"],[489,32,515,32],[489,33,515,33,"toString"],[489,41,515,41],[489,42,515,42],[489,43,515,43],[489,44,515,44],[489,45,515,45,"length"],[489,51,515,51],[490,4,516,4],[490,11,516,11,"Math"],[490,15,516,15],[490,16,516,16,"ceil"],[490,20,516,20],[490,21,516,21,"bitLength"],[490,30,516,30],[490,33,516,33],[490,34,516,34],[490,35,516,35],[491,2,517,0],[492,2,518,0],[493,0,519,0],[494,0,520,0],[495,0,521,0],[496,0,522,0],[497,0,523,0],[498,0,524,0],[499,2,525,0],[499,11,525,9,"getMinHashLength"],[499,27,525,25,"getMinHashLength"],[499,28,525,26,"fieldOrder"],[499,38,525,36],[499,40,525,38],[500,4,526,4],[500,10,526,10,"length"],[500,16,526,16],[500,19,526,19,"getFieldBytesLength"],[500,38,526,38],[500,39,526,39,"fieldOrder"],[500,49,526,49],[500,50,526,50],[501,4,527,4],[501,11,527,11,"length"],[501,17,527,17],[501,20,527,20,"Math"],[501,24,527,24],[501,25,527,25,"ceil"],[501,29,527,29],[501,30,527,30,"length"],[501,36,527,36],[501,39,527,39],[501,40,527,40],[501,41,527,41],[502,2,528,0],[503,2,529,0],[504,0,530,0],[505,0,531,0],[506,0,532,0],[507,0,533,0],[508,0,534,0],[509,0,535,0],[510,0,536,0],[511,0,537,0],[512,0,538,0],[513,0,539,0],[514,0,540,0],[515,0,541,0],[516,2,542,0],[516,11,542,9,"mapHashToField"],[516,25,542,23,"mapHashToField"],[516,26,542,24,"key"],[516,29,542,27],[516,31,542,29,"fieldOrder"],[516,41,542,39],[516,43,542,41,"isLE"],[516,47,542,45],[516,50,542,48],[516,55,542,53],[516,57,542,55],[517,4,543,4],[517,10,543,10,"len"],[517,13,543,13],[517,16,543,16,"key"],[517,19,543,19],[517,20,543,20,"length"],[517,26,543,26],[518,4,544,4],[518,10,544,10,"fieldLen"],[518,18,544,18],[518,21,544,21,"getFieldBytesLength"],[518,40,544,40],[518,41,544,41,"fieldOrder"],[518,51,544,51],[518,52,544,52],[519,4,545,4],[519,10,545,10,"minLen"],[519,16,545,16],[519,19,545,19,"getMinHashLength"],[519,35,545,35],[519,36,545,36,"fieldOrder"],[519,46,545,46],[519,47,545,47],[520,4,546,4],[521,4,547,4],[521,8,547,8,"len"],[521,11,547,11],[521,14,547,14],[521,16,547,16],[521,20,547,20,"len"],[521,23,547,23],[521,26,547,26,"minLen"],[521,32,547,32],[521,36,547,36,"len"],[521,39,547,39],[521,42,547,42],[521,46,547,46],[521,48,548,8],[521,54,548,14],[521,58,548,18,"Error"],[521,63,548,23],[521,64,548,24],[521,75,548,35],[521,78,548,38,"minLen"],[521,84,548,44],[521,87,548,47],[521,115,548,75],[521,118,548,78,"len"],[521,121,548,81],[521,122,548,82],[522,4,549,4],[522,10,549,10,"num"],[522,13,549,13],[522,16,549,16,"isLE"],[522,20,549,20],[522,23,549,23],[522,24,549,24],[522,25,549,25],[522,27,549,27,"utils_ts_1"],[522,37,549,37],[522,38,549,38,"bytesToNumberLE"],[522,53,549,53],[522,55,549,55,"key"],[522,58,549,58],[522,59,549,59],[522,62,549,62],[522,63,549,63],[522,64,549,64],[522,66,549,66,"utils_ts_1"],[522,76,549,76],[522,77,549,77,"bytesToNumberBE"],[522,92,549,92],[522,94,549,94,"key"],[522,97,549,97],[522,98,549,98],[523,4,550,4],[524,4,551,4],[524,10,551,10,"reduced"],[524,17,551,17],[524,20,551,20,"mod"],[524,23,551,23],[524,24,551,24,"num"],[524,27,551,27],[524,29,551,29,"fieldOrder"],[524,39,551,39],[524,42,551,42,"_1n"],[524,45,551,45],[524,46,551,46],[524,49,551,49,"_1n"],[524,52,551,52],[525,4,552,4],[525,11,552,11,"isLE"],[525,15,552,15],[525,18,552,18],[525,19,552,19],[525,20,552,20],[525,22,552,22,"utils_ts_1"],[525,32,552,32],[525,33,552,33,"numberToBytesLE"],[525,48,552,48],[525,50,552,50,"reduced"],[525,57,552,57],[525,59,552,59,"fieldLen"],[525,67,552,67],[525,68,552,68],[525,71,552,71],[525,72,552,72],[525,73,552,73],[525,75,552,75,"utils_ts_1"],[525,85,552,85],[525,86,552,86,"numberToBytesBE"],[525,101,552,101],[525,103,552,103,"reduced"],[525,110,552,110],[525,112,552,112,"fieldLen"],[525,120,552,120],[525,121,552,121],[526,2,553,0],[527,0,553,1],[527,3]],"functionMap":{"names":["<global>","mod","pow","pow2","invert","assertIsSquare","sqrt3mod4","sqrt5mod8","sqrt9mod16","<anonymous>","tonelliShanks","tonelliSlow","FpSqrt","isNegativeLE","validateField","FIELD_FIELDS.reduce$argument_0","FpPow","FpInvertBatch","nums.reduce$argument_0","nums.reduceRight$argument_0","FpDiv","FpLegendre","FpIsSquare","nLength","Field","f.create","f.isValid","f.is0","f.isValidNot0","f.isOdd","f.neg","f.eql","f.sqr","f.add","f.sub","f.mul","f.pow","f.div","f.sqrN","f.addN","f.subN","f.mulN","f.inv","f.toBytes","f.fromBytes","f.invertBatch","f.cmov","FpSqrtOdd","FpSqrtEven","hashToPrivateScalar","getFieldBytesLength","getMinHashLength","mapHashToField"],"mappings":"AAA;ACsC;CDG;AEO;CFE;AGE;CHO;AIK;CJuB;AKC;CLG;AMK;CNK;AOC;CPS;AQG;WCO;KDa;CRC;AUQ;WC4B;KDmC;CVC;AYY;CZY;qBaE,iDb;AcQ;qCCO;KDG;CdM;AgBM;ChBgB;AiBM;sCCG;KDK;qBEI;KFK;CjBE;AoBE;CpBE;AqBU;CrBW;AsBE;CtBG;AuBE;CvBO;AwBoB;gBCyC,wBD;iBEC;SFI;aGC,oBH;qBIE,sCJ;eKC,4BL;aMC,yBN;aOC,yBP;aQC,8BR;aSC,mCT;aUC,mCV;aWC,mCX;aYC,oCZ;aaC,kDb;ccE,kBd;ceC,uBf;cgBC,uBhB;ciBC,uBjB;akBC,2BlB;afE;aeI;iBmBC,2GnB;mBoBC;SpBqB;qBqBE,8BrB;csBG,wBtB;CxBG;A+Cc;C/CK;AgDC;ChDK;AiDO;CjDQ;AkDO;ClDK;AmDQ;CnDG;AoDc;CpDW"}},"type":"js/module"}]}