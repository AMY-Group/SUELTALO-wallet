{"dependencies":[{"name":"buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":135,"column":17,"index":7088},"end":{"line":135,"column":34,"index":7105}}],"key":"kYC7RadcB7k9ZEYd5zOmBbv1F14=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /* The MIT License (MIT)\n   *\n   * Copyright 2015-2018 Peter A. Bigot\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  /**\n   * Support for translating between Uint8Array instances and JavaScript\n   * native types.\n   *\n   * {@link module:Layout~Layout|Layout} is the basis of a class\n   * hierarchy that associates property names with sequences of encoded\n   * bytes.\n   *\n   * Layouts are supported for these scalar (numeric) types:\n   * * {@link module:Layout~UInt|Unsigned integers in little-endian\n   *   format} with {@link module:Layout.u8|8-bit}, {@link\n   *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n   *   {@link module:Layout.u32|32-bit}, {@link\n   *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n   *   representation ranges;\n   * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n   *   format} with {@link module:Layout.u16be|16-bit}, {@link\n   *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n   *   {@link module:Layout.u40be|40-bit}, and {@link\n   *   module:Layout.u48be|48-bit} representation ranges;\n   * * {@link module:Layout~Int|Signed integers in little-endian\n   *   format} with {@link module:Layout.s8|8-bit}, {@link\n   *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n   *   {@link module:Layout.s32|32-bit}, {@link\n   *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n   *   representation ranges;\n   * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n   *   with {@link module:Layout.s16be|16-bit}, {@link\n   *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n   *   {@link module:Layout.s40be|40-bit}, and {@link\n   *   module:Layout.s48be|48-bit} representation ranges;\n   * * 64-bit integral values that decode to an exact (if magnitude is\n   *   less than 2^53) or nearby integral Number in {@link\n   *   module:Layout.nu64|unsigned little-endian}, {@link\n   *   module:Layout.nu64be|unsigned big-endian}, {@link\n   *   module:Layout.ns64|signed little-endian}, and {@link\n   *   module:Layout.ns64be|unsigned big-endian} encodings;\n   * * 32-bit floating point values with {@link\n   *   module:Layout.f32|little-endian} and {@link\n   *   module:Layout.f32be|big-endian} representations;\n   * * 64-bit floating point values with {@link\n   *   module:Layout.f64|little-endian} and {@link\n   *   module:Layout.f64be|big-endian} representations;\n   * * {@link module:Layout.const|Constants} that take no space in the\n   *   encoded expression.\n   *\n   * and for these aggregate types:\n   * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n   *   module:Layout~Layout|Layout}, with JavaScript representation as\n   *   an Array and constant or data-dependent {@link\n   *   module:Layout~Sequence#count|length};\n   * * {@link module:Layout.struct|Structure}s that aggregate a\n   *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n   *   instances, with JavaScript representation as an Object;\n   * * {@link module:Layout.union|Union}s that support multiple {@link\n   *   module:Layout~VariantLayout|variant layouts} over a fixed\n   *   (padded) or variable (not padded) span of bytes, using an\n   *   unsigned integer at the start of the data or a separate {@link\n   *   module:Layout.unionLayoutDiscriminator|layout element} to\n   *   determine which layout to use when interpreting the buffer\n   *   contents;\n   * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n   *   of individual {@link\n   *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n   *   16, 24, or 32-bit unsigned integer starting at the least- or\n   *   most-significant bit;\n   * * {@link module:Layout.cstr|C strings} of varying length;\n   * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n   *   module:Layout~Blob#length|length} raw data.\n   *\n   * All {@link module:Layout~Layout|Layout} instances are immutable\n   * after construction, to prevent internal state from becoming\n   * inconsistent.\n   *\n   * @local Layout\n   * @local ExternalLayout\n   * @local GreedyCount\n   * @local OffsetLayout\n   * @local UInt\n   * @local UIntBE\n   * @local Int\n   * @local IntBE\n   * @local NearUInt64\n   * @local NearUInt64BE\n   * @local NearInt64\n   * @local NearInt64BE\n   * @local Float\n   * @local FloatBE\n   * @local Double\n   * @local DoubleBE\n   * @local Sequence\n   * @local Structure\n   * @local UnionDiscriminator\n   * @local UnionLayoutDiscriminator\n   * @local Union\n   * @local VariantLayout\n   * @local BitStructure\n   * @local BitField\n   * @local Boolean\n   * @local Blob\n   * @local CString\n   * @local Constant\n   * @local bindConstructorLayout\n   * @module Layout\n   * @license MIT\n   * @author Peter A. Bigot\n   * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n   */\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.s16 = exports.s8 = exports.nu64be = exports.u48be = exports.u40be = exports.u32be = exports.u24be = exports.u16be = exports.nu64 = exports.u48 = exports.u40 = exports.u32 = exports.u24 = exports.u16 = exports.u8 = exports.offset = exports.greedy = exports.Constant = exports.UTF8 = exports.CString = exports.Blob = exports.Boolean = exports.BitField = exports.BitStructure = exports.VariantLayout = exports.Union = exports.UnionLayoutDiscriminator = exports.UnionDiscriminator = exports.Structure = exports.Sequence = exports.DoubleBE = exports.Double = exports.FloatBE = exports.Float = exports.NearInt64BE = exports.NearInt64 = exports.NearUInt64BE = exports.NearUInt64 = exports.IntBE = exports.Int = exports.UIntBE = exports.UInt = exports.OffsetLayout = exports.GreedyCount = exports.ExternalLayout = exports.bindConstructorLayout = exports.nameWithProperty = exports.Layout = exports.uint8ArrayToBuffer = exports.checkUint8Array = void 0;\n  exports.constant = exports.utf8 = exports.cstr = exports.blob = exports.unionLayoutDiscriminator = exports.union = exports.seq = exports.bits = exports.struct = exports.f64be = exports.f64 = exports.f32be = exports.f32 = exports.ns64be = exports.s48be = exports.s40be = exports.s32be = exports.s24be = exports.s16be = exports.ns64 = exports.s48 = exports.s40 = exports.s32 = exports.s24 = void 0;\n  const buffer_1 = require(_dependencyMap[0], \"buffer\");\n  /* Check if a value is a Uint8Array.\n   *\n   * @ignore */\n  function checkUint8Array(b) {\n    if (!(b instanceof Uint8Array)) {\n      throw new TypeError('b must be a Uint8Array');\n    }\n  }\n  exports.checkUint8Array = checkUint8Array;\n  /* Create a Buffer instance from a Uint8Array.\n   *\n   * @ignore */\n  function uint8ArrayToBuffer(b) {\n    checkUint8Array(b);\n    return buffer_1.Buffer.from(b.buffer, b.byteOffset, b.length);\n  }\n  exports.uint8ArrayToBuffer = uint8ArrayToBuffer;\n  /**\n   * Base class for layout objects.\n   *\n   * **NOTE** This is an abstract base class; you can create instances\n   * if it amuses you, but they won't support the {@link\n   * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n   *\n   * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n   * parameter must be an integer; a negative value signifies that the\n   * span is {@link Layout#getSpan|value-specific}.\n   *\n   * @param {string} [property] - Initializer for {@link\n   * Layout#property|property}.\n   *\n   * @abstract\n   */\n  class Layout {\n    constructor(span, property) {\n      if (!Number.isInteger(span)) {\n        throw new TypeError('span must be an integer');\n      }\n      /** The span of the layout in bytes.\n       *\n       * Positive values are generally expected.\n       *\n       * Zero will only appear in {@link Constant}s and in {@link\n       * Sequence}s where the {@link Sequence#count|count} is zero.\n       *\n       * A negative value indicates that the span is value-specific, and\n       * must be obtained using {@link Layout#getSpan|getSpan}. */\n      this.span = span;\n      /** The property name used when this layout is represented in an\n       * Object.\n       *\n       * Used only for layouts that {@link Layout#decode|decode} to Object\n       * instances.  If left undefined the span of the unnamed layout will\n       * be treated as padding: it will not be mutated by {@link\n       * Layout#encode|encode} nor represented as a property in the\n       * decoded Object. */\n      this.property = property;\n    }\n    /** Function to create an Object into which decoded properties will\n     * be written.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances, which means:\n     * * {@link Structure}\n     * * {@link Union}\n     * * {@link VariantLayout}\n     * * {@link BitStructure}\n     *\n     * If left undefined the JavaScript representation of these layouts\n     * will be Object instances.\n     *\n     * See {@link bindConstructorLayout}.\n     */\n    makeDestinationObject() {\n      return {};\n    }\n    /**\n     * Calculate the span of a specific instance of a layout.\n     *\n     * @param {Uint8Array} b - the buffer that contains an encoded instance.\n     *\n     * @param {Number} [offset] - the offset at which the encoded instance\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @return {Number} - the number of bytes covered by the layout\n     * instance.  If this method is not overridden in a subclass the\n     * definition-time constant {@link Layout#span|span} will be\n     * returned.\n     *\n     * @throws {RangeError} - if the length of the value cannot be\n     * determined.\n     */\n    getSpan(b, offset) {\n      if (0 > this.span) {\n        throw new RangeError('indeterminate span');\n      }\n      return this.span;\n    }\n    /**\n     * Replicate the layout using a new property.\n     *\n     * This function must be used to get a structurally-equivalent layout\n     * with a different name since all {@link Layout} instances are\n     * immutable.\n     *\n     * **NOTE** This is a shallow copy.  All fields except {@link\n     * Layout#property|property} are strictly equal to the origin layout.\n     *\n     * @param {String} property - the value for {@link\n     * Layout#property|property} in the replica.\n     *\n     * @returns {Layout} - the copy with {@link Layout#property|property}\n     * set to `property`.\n     */\n    replicate(property) {\n      const rv = Object.create(this.constructor.prototype);\n      Object.assign(rv, this);\n      rv.property = property;\n      return rv;\n    }\n    /**\n     * Create an object from layout properties and an array of values.\n     *\n     * **NOTE** This function returns `undefined` if invoked on a layout\n     * that does not return its value as an Object.  Objects are\n     * returned for things that are a {@link Structure}, which includes\n     * {@link VariantLayout|variant layouts} if they are structures, and\n     * excludes {@link Union}s.  If you want this feature for a union\n     * you must use {@link Union.getVariant|getVariant} to select the\n     * desired layout.\n     *\n     * @param {Array} values - an array of values that correspond to the\n     * default order for properties.  As with {@link Layout#decode|decode}\n     * layout elements that have no property name are skipped when\n     * iterating over the array values.  Only the top-level properties are\n     * assigned; arguments are not assigned to properties of contained\n     * layouts.  Any unused values are ignored.\n     *\n     * @return {(Object|undefined)}\n     */\n    fromArray(values) {\n      return undefined;\n    }\n  }\n  exports.Layout = Layout;\n  /* Provide text that carries a name (such as for a function that will\n   * be throwing an error) annotated with the property of a given layout\n   * (such as one for which the value was unacceptable).\n   *\n   * @ignore */\n  function nameWithProperty(name, lo) {\n    if (lo.property) {\n      return name + '[' + lo.property + ']';\n    }\n    return name;\n  }\n  exports.nameWithProperty = nameWithProperty;\n  /**\n   * Augment a class so that instances can be encoded/decoded using a\n   * given layout.\n   *\n   * Calling this function couples `Class` with `layout` in several ways:\n   *\n   * * `Class.layout_` becomes a static member property equal to `layout`;\n   * * `layout.boundConstructor_` becomes a static member property equal\n   *    to `Class`;\n   * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n   *   property of `layout` is set to a function that returns a `new\n   *   Class()`;\n   * * `Class.decode(b, offset)` becomes a static member function that\n   *   delegates to {@link Layout#decode|layout.decode}.  The\n   *   synthesized function may be captured and extended.\n   * * `Class.prototype.encode(b, offset)` provides an instance member\n   *   function that delegates to {@link Layout#encode|layout.encode}\n   *   with `src` set to `this`.  The synthesized function may be\n   *   captured and extended, but when the extension is invoked `this`\n   *   must be explicitly bound to the instance.\n   *\n   * @param {class} Class - a JavaScript class with a nullary\n   * constructor.\n   *\n   * @param {Layout} layout - the {@link Layout} instance used to encode\n   * instances of `Class`.\n   */\n  // `Class` must be a constructor Function, but the assignment of a `layout_` property to it makes it difficult to type\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  function bindConstructorLayout(Class, layout) {\n    if ('function' !== typeof Class) {\n      throw new TypeError('Class must be constructor');\n    }\n    if (Object.prototype.hasOwnProperty.call(Class, 'layout_')) {\n      throw new Error('Class is already bound to a layout');\n    }\n    if (!(layout && layout instanceof Layout)) {\n      throw new TypeError('layout must be a Layout');\n    }\n    if (Object.prototype.hasOwnProperty.call(layout, 'boundConstructor_')) {\n      throw new Error('layout is already bound to a constructor');\n    }\n    Class.layout_ = layout;\n    layout.boundConstructor_ = Class;\n    layout.makeDestinationObject = () => new Class();\n    Object.defineProperty(Class.prototype, 'encode', {\n      value(b, offset) {\n        return layout.encode(this, b, offset);\n      },\n      writable: true\n    });\n    Object.defineProperty(Class, 'decode', {\n      value(b, offset) {\n        return layout.decode(b, offset);\n      },\n      writable: true\n    });\n  }\n  exports.bindConstructorLayout = bindConstructorLayout;\n  /**\n   * An object that behaves like a layout but does not consume space\n   * within its containing layout.\n   *\n   * This is primarily used to obtain metadata about a member, such as a\n   * {@link OffsetLayout} that can provide data about a {@link\n   * Layout#getSpan|value-specific span}.\n   *\n   * **NOTE** This is an abstract base class; you can create instances\n   * if it amuses you, but they won't support {@link\n   * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n   *\n   * @param {Number} span - initializer for {@link Layout#span|span}.\n   * The parameter can range from 1 through 6.\n   *\n   * @param {string} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @abstract\n   * @augments {Layout}\n   */\n  class ExternalLayout extends Layout {\n    /**\n     * Return `true` iff the external layout decodes to an unsigned\n     * integer layout.\n     *\n     * In that case it can be used as the source of {@link\n     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n     * or as {@link UnionLayoutDiscriminator#layout|external union\n     * discriminators}.\n     *\n     * @abstract\n     */\n    isCount() {\n      throw new Error('ExternalLayout is abstract');\n    }\n  }\n  exports.ExternalLayout = ExternalLayout;\n  /**\n   * An {@link ExternalLayout} that determines its {@link\n   * Layout#decode|value} based on offset into and length of the buffer\n   * on which it is invoked.\n   *\n   * *Factory*: {@link module:Layout.greedy|greedy}\n   *\n   * @param {Number} [elementSpan] - initializer for {@link\n   * GreedyCount#elementSpan|elementSpan}.\n   *\n   * @param {string} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @augments {ExternalLayout}\n   */\n  class GreedyCount extends ExternalLayout {\n    constructor(elementSpan = 1, property) {\n      if (!Number.isInteger(elementSpan) || 0 >= elementSpan) {\n        throw new TypeError('elementSpan must be a (positive) integer');\n      }\n      super(-1, property);\n      /** The layout for individual elements of the sequence.  The value\n       * must be a positive integer.  If not provided, the value will be\n       * 1. */\n      this.elementSpan = elementSpan;\n    }\n    /** @override */\n    isCount() {\n      return true;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      checkUint8Array(b);\n      const rem = b.length - offset;\n      return Math.floor(rem / this.elementSpan);\n    }\n    /** @override */\n    encode(src, b, offset) {\n      return 0;\n    }\n  }\n  exports.GreedyCount = GreedyCount;\n  /**\n   * An {@link ExternalLayout} that supports accessing a {@link Layout}\n   * at a fixed offset from the start of another Layout.  The offset may\n   * be before, within, or after the base layout.\n   *\n   * *Factory*: {@link module:Layout.offset|offset}\n   *\n   * @param {Layout} layout - initializer for {@link\n   * OffsetLayout#layout|layout}, modulo `property`.\n   *\n   * @param {Number} [offset] - Initializes {@link\n   * OffsetLayout#offset|offset}.  Defaults to zero.\n   *\n   * @param {string} [property] - Optional new property name for a\n   * {@link Layout#replicate| replica} of `layout` to be used as {@link\n   * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n   * unchanged.\n   *\n   * @augments {Layout}\n   */\n  class OffsetLayout extends ExternalLayout {\n    constructor(layout, offset = 0, property) {\n      if (!(layout instanceof Layout)) {\n        throw new TypeError('layout must be a Layout');\n      }\n      if (!Number.isInteger(offset)) {\n        throw new TypeError('offset must be integer or undefined');\n      }\n      super(layout.span, property || layout.property);\n      /** The subordinated layout. */\n      this.layout = layout;\n      /** The location of {@link OffsetLayout#layout} relative to the\n       * start of another layout.\n       *\n       * The value may be positive or negative, but an error will thrown\n       * if at the point of use it goes outside the span of the Uint8Array\n       * being accessed.  */\n      this.offset = offset;\n    }\n    /** @override */\n    isCount() {\n      return this.layout instanceof UInt || this.layout instanceof UIntBE;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      return this.layout.decode(b, offset + this.offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n      return this.layout.encode(src, b, offset + this.offset);\n    }\n  }\n  exports.OffsetLayout = OffsetLayout;\n  /**\n   * Represent an unsigned integer in little-endian format.\n   *\n   * *Factory*: {@link module:Layout.u8|u8}, {@link\n   *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n   *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n   *  module:Layout.u48|u48}\n   *\n   * @param {Number} span - initializer for {@link Layout#span|span}.\n   * The parameter can range from 1 through 6.\n   *\n   * @param {string} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @augments {Layout}\n   */\n  class UInt extends Layout {\n    constructor(span, property) {\n      super(span, property);\n      if (6 < this.span) {\n        throw new RangeError('span must not exceed 6 bytes');\n      }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      return uint8ArrayToBuffer(b).readUIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n      uint8ArrayToBuffer(b).writeUIntLE(src, offset, this.span);\n      return this.span;\n    }\n  }\n  exports.UInt = UInt;\n  /**\n   * Represent an unsigned integer in big-endian format.\n   *\n   * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n   * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n   * {@link module:Layout.u32be|u32be}, {@link\n   * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n   *\n   * @param {Number} span - initializer for {@link Layout#span|span}.\n   * The parameter can range from 1 through 6.\n   *\n   * @param {string} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @augments {Layout}\n   */\n  class UIntBE extends Layout {\n    constructor(span, property) {\n      super(span, property);\n      if (6 < this.span) {\n        throw new RangeError('span must not exceed 6 bytes');\n      }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      return uint8ArrayToBuffer(b).readUIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n      uint8ArrayToBuffer(b).writeUIntBE(src, offset, this.span);\n      return this.span;\n    }\n  }\n  exports.UIntBE = UIntBE;\n  /**\n   * Represent a signed integer in little-endian format.\n   *\n   * *Factory*: {@link module:Layout.s8|s8}, {@link\n   *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n   *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n   *  module:Layout.s48|s48}\n   *\n   * @param {Number} span - initializer for {@link Layout#span|span}.\n   * The parameter can range from 1 through 6.\n   *\n   * @param {string} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @augments {Layout}\n   */\n  class Int extends Layout {\n    constructor(span, property) {\n      super(span, property);\n      if (6 < this.span) {\n        throw new RangeError('span must not exceed 6 bytes');\n      }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      return uint8ArrayToBuffer(b).readIntLE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n      uint8ArrayToBuffer(b).writeIntLE(src, offset, this.span);\n      return this.span;\n    }\n  }\n  exports.Int = Int;\n  /**\n   * Represent a signed integer in big-endian format.\n   *\n   * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n   * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n   * {@link module:Layout.s32be|s32be}, {@link\n   * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n   *\n   * @param {Number} span - initializer for {@link Layout#span|span}.\n   * The parameter can range from 1 through 6.\n   *\n   * @param {string} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @augments {Layout}\n   */\n  class IntBE extends Layout {\n    constructor(span, property) {\n      super(span, property);\n      if (6 < this.span) {\n        throw new RangeError('span must not exceed 6 bytes');\n      }\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      return uint8ArrayToBuffer(b).readIntBE(offset, this.span);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n      uint8ArrayToBuffer(b).writeIntBE(src, offset, this.span);\n      return this.span;\n    }\n  }\n  exports.IntBE = IntBE;\n  const V2E32 = Math.pow(2, 32);\n  /* True modulus high and low 32-bit words, where low word is always\n   * non-negative. */\n  function divmodInt64(src) {\n    const hi32 = Math.floor(src / V2E32);\n    const lo32 = src - hi32 * V2E32;\n    return {\n      hi32,\n      lo32\n    };\n  }\n  /* Reconstruct Number from quotient and non-negative remainder */\n  function roundedInt64(hi32, lo32) {\n    return hi32 * V2E32 + lo32;\n  }\n  /**\n   * Represent an unsigned 64-bit integer in little-endian format when\n   * encoded and as a near integral JavaScript Number when decoded.\n   *\n   * *Factory*: {@link module:Layout.nu64|nu64}\n   *\n   * **NOTE** Values with magnitude greater than 2^52 may not decode to\n   * the exact value of the encoded representation.\n   *\n   * @augments {Layout}\n   */\n  class NearUInt64 extends Layout {\n    constructor(property) {\n      super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      const buffer = uint8ArrayToBuffer(b);\n      const lo32 = buffer.readUInt32LE(offset);\n      const hi32 = buffer.readUInt32LE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n      const split = divmodInt64(src);\n      const buffer = uint8ArrayToBuffer(b);\n      buffer.writeUInt32LE(split.lo32, offset);\n      buffer.writeUInt32LE(split.hi32, offset + 4);\n      return 8;\n    }\n  }\n  exports.NearUInt64 = NearUInt64;\n  /**\n   * Represent an unsigned 64-bit integer in big-endian format when\n   * encoded and as a near integral JavaScript Number when decoded.\n   *\n   * *Factory*: {@link module:Layout.nu64be|nu64be}\n   *\n   * **NOTE** Values with magnitude greater than 2^52 may not decode to\n   * the exact value of the encoded representation.\n   *\n   * @augments {Layout}\n   */\n  class NearUInt64BE extends Layout {\n    constructor(property) {\n      super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      const buffer = uint8ArrayToBuffer(b);\n      const hi32 = buffer.readUInt32BE(offset);\n      const lo32 = buffer.readUInt32BE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n      const split = divmodInt64(src);\n      const buffer = uint8ArrayToBuffer(b);\n      buffer.writeUInt32BE(split.hi32, offset);\n      buffer.writeUInt32BE(split.lo32, offset + 4);\n      return 8;\n    }\n  }\n  exports.NearUInt64BE = NearUInt64BE;\n  /**\n   * Represent a signed 64-bit integer in little-endian format when\n   * encoded and as a near integral JavaScript Number when decoded.\n   *\n   * *Factory*: {@link module:Layout.ns64|ns64}\n   *\n   * **NOTE** Values with magnitude greater than 2^52 may not decode to\n   * the exact value of the encoded representation.\n   *\n   * @augments {Layout}\n   */\n  class NearInt64 extends Layout {\n    constructor(property) {\n      super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      const buffer = uint8ArrayToBuffer(b);\n      const lo32 = buffer.readUInt32LE(offset);\n      const hi32 = buffer.readInt32LE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n      const split = divmodInt64(src);\n      const buffer = uint8ArrayToBuffer(b);\n      buffer.writeUInt32LE(split.lo32, offset);\n      buffer.writeInt32LE(split.hi32, offset + 4);\n      return 8;\n    }\n  }\n  exports.NearInt64 = NearInt64;\n  /**\n   * Represent a signed 64-bit integer in big-endian format when\n   * encoded and as a near integral JavaScript Number when decoded.\n   *\n   * *Factory*: {@link module:Layout.ns64be|ns64be}\n   *\n   * **NOTE** Values with magnitude greater than 2^52 may not decode to\n   * the exact value of the encoded representation.\n   *\n   * @augments {Layout}\n   */\n  class NearInt64BE extends Layout {\n    constructor(property) {\n      super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      const buffer = uint8ArrayToBuffer(b);\n      const hi32 = buffer.readInt32BE(offset);\n      const lo32 = buffer.readUInt32BE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n      const split = divmodInt64(src);\n      const buffer = uint8ArrayToBuffer(b);\n      buffer.writeInt32BE(split.hi32, offset);\n      buffer.writeUInt32BE(split.lo32, offset + 4);\n      return 8;\n    }\n  }\n  exports.NearInt64BE = NearInt64BE;\n  /**\n   * Represent a 32-bit floating point number in little-endian format.\n   *\n   * *Factory*: {@link module:Layout.f32|f32}\n   *\n   * @param {string} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @augments {Layout}\n   */\n  class Float extends Layout {\n    constructor(property) {\n      super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      return uint8ArrayToBuffer(b).readFloatLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n      uint8ArrayToBuffer(b).writeFloatLE(src, offset);\n      return 4;\n    }\n  }\n  exports.Float = Float;\n  /**\n   * Represent a 32-bit floating point number in big-endian format.\n   *\n   * *Factory*: {@link module:Layout.f32be|f32be}\n   *\n   * @param {string} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @augments {Layout}\n   */\n  class FloatBE extends Layout {\n    constructor(property) {\n      super(4, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      return uint8ArrayToBuffer(b).readFloatBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n      uint8ArrayToBuffer(b).writeFloatBE(src, offset);\n      return 4;\n    }\n  }\n  exports.FloatBE = FloatBE;\n  /**\n   * Represent a 64-bit floating point number in little-endian format.\n   *\n   * *Factory*: {@link module:Layout.f64|f64}\n   *\n   * @param {string} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @augments {Layout}\n   */\n  class Double extends Layout {\n    constructor(property) {\n      super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      return uint8ArrayToBuffer(b).readDoubleLE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n      uint8ArrayToBuffer(b).writeDoubleLE(src, offset);\n      return 8;\n    }\n  }\n  exports.Double = Double;\n  /**\n   * Represent a 64-bit floating point number in big-endian format.\n   *\n   * *Factory*: {@link module:Layout.f64be|f64be}\n   *\n   * @param {string} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @augments {Layout}\n   */\n  class DoubleBE extends Layout {\n    constructor(property) {\n      super(8, property);\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      return uint8ArrayToBuffer(b).readDoubleBE(offset);\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n      uint8ArrayToBuffer(b).writeDoubleBE(src, offset);\n      return 8;\n    }\n  }\n  exports.DoubleBE = DoubleBE;\n  /**\n   * Represent a contiguous sequence of a specific layout as an Array.\n   *\n   * *Factory*: {@link module:Layout.seq|seq}\n   *\n   * @param {Layout} elementLayout - initializer for {@link\n   * Sequence#elementLayout|elementLayout}.\n   *\n   * @param {(Number|ExternalLayout)} count - initializer for {@link\n   * Sequence#count|count}.  The parameter must be either a positive\n   * integer or an instance of {@link ExternalLayout}.\n   *\n   * @param {string} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @augments {Layout}\n   */\n  class Sequence extends Layout {\n    constructor(elementLayout, count, property) {\n      if (!(elementLayout instanceof Layout)) {\n        throw new TypeError('elementLayout must be a Layout');\n      }\n      if (!(count instanceof ExternalLayout && count.isCount() || Number.isInteger(count) && 0 <= count)) {\n        throw new TypeError('count must be non-negative integer ' + 'or an unsigned integer ExternalLayout');\n      }\n      let span = -1;\n      if (!(count instanceof ExternalLayout) && 0 < elementLayout.span) {\n        span = count * elementLayout.span;\n      }\n      super(span, property);\n      /** The layout for individual elements of the sequence. */\n      this.elementLayout = elementLayout;\n      /** The number of elements in the sequence.\n       *\n       * This will be either a non-negative integer or an instance of\n       * {@link ExternalLayout} for which {@link\n       * ExternalLayout#isCount|isCount()} is `true`. */\n      this.count = count;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n      if (0 <= this.span) {\n        return this.span;\n      }\n      let span = 0;\n      let count = this.count;\n      if (count instanceof ExternalLayout) {\n        count = count.decode(b, offset);\n      }\n      if (0 < this.elementLayout.span) {\n        span = count * this.elementLayout.span;\n      } else {\n        let idx = 0;\n        while (idx < count) {\n          span += this.elementLayout.getSpan(b, offset + span);\n          ++idx;\n        }\n      }\n      return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      const rv = [];\n      let i = 0;\n      let count = this.count;\n      if (count instanceof ExternalLayout) {\n        count = count.decode(b, offset);\n      }\n      while (i < count) {\n        rv.push(this.elementLayout.decode(b, offset));\n        offset += this.elementLayout.getSpan(b, offset);\n        i += 1;\n      }\n      return rv;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n     *\n     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n     * the unused space in the buffer is left unchanged.  If `src` is\n     * longer than {@link Sequence#count|count} the unneeded elements are\n     * ignored.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset = 0) {\n      const elo = this.elementLayout;\n      const span = src.reduce((span, v) => {\n        return span + elo.encode(v, b, offset + span);\n      }, 0);\n      if (this.count instanceof ExternalLayout) {\n        this.count.encode(src.length, b, offset);\n      }\n      return span;\n    }\n  }\n  exports.Sequence = Sequence;\n  /**\n   * Represent a contiguous sequence of arbitrary layout elements as an\n   * Object.\n   *\n   * *Factory*: {@link module:Layout.struct|struct}\n   *\n   * **NOTE** The {@link Layout#span|span} of the structure is variable\n   * if any layout in {@link Structure#fields|fields} has a variable\n   * span.  When {@link Layout#encode|encoding} we must have a value for\n   * all variable-length fields, or we wouldn't be able to figure out\n   * how much space to use for storage.  We can only identify the value\n   * for a field when it has a {@link Layout#property|property}.  As\n   * such, although a structure may contain both unnamed fields and\n   * variable-length fields, it cannot contain an unnamed\n   * variable-length field.\n   *\n   * @param {Layout[]} fields - initializer for {@link\n   * Structure#fields|fields}.  An error is raised if this contains a\n   * variable-length field for which a {@link Layout#property|property}\n   * is not defined.\n   *\n   * @param {string} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @param {Boolean} [decodePrefixes] - initializer for {@link\n   * Structure#decodePrefixes|property}.\n   *\n   * @throws {Error} - if `fields` contains an unnamed variable-length\n   * layout.\n   *\n   * @augments {Layout}\n   */\n  class Structure extends Layout {\n    constructor(fields, property, decodePrefixes) {\n      if (!(Array.isArray(fields) && fields.reduce((acc, v) => acc && v instanceof Layout, true))) {\n        throw new TypeError('fields must be array of Layout instances');\n      }\n      if ('boolean' === typeof property && undefined === decodePrefixes) {\n        decodePrefixes = property;\n        property = undefined;\n      }\n      /* Verify absence of unnamed variable-length fields. */\n      for (const fd of fields) {\n        if (0 > fd.span && undefined === fd.property) {\n          throw new Error('fields cannot contain unnamed variable-length layout');\n        }\n      }\n      let span = -1;\n      try {\n        span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n      } catch (e) {\n        // ignore error\n      }\n      super(span, property);\n      /** The sequence of {@link Layout} values that comprise the\n       * structure.\n       *\n       * The individual elements need not be the same type, and may be\n       * either scalar or aggregate layouts.  If a member layout leaves\n       * its {@link Layout#property|property} undefined the\n       * corresponding region of the buffer associated with the element\n       * will not be mutated.\n       *\n       * @type {Layout[]} */\n      this.fields = fields;\n      /** Control behavior of {@link Layout#decode|decode()} given short\n       * buffers.\n       *\n       * In some situations a structure many be extended with additional\n       * fields over time, with older installations providing only a\n       * prefix of the full structure.  If this property is `true`\n       * decoding will accept those buffers and leave subsequent fields\n       * undefined, as long as the buffer ends at a field boundary.\n       * Defaults to `false`. */\n      this.decodePrefixes = !!decodePrefixes;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n      if (0 <= this.span) {\n        return this.span;\n      }\n      let span = 0;\n      try {\n        span = this.fields.reduce((span, fd) => {\n          const fsp = fd.getSpan(b, offset);\n          offset += fsp;\n          return span + fsp;\n        }, 0);\n      } catch (e) {\n        throw new RangeError('indeterminate span');\n      }\n      return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      checkUint8Array(b);\n      const dest = this.makeDestinationObject();\n      for (const fd of this.fields) {\n        if (undefined !== fd.property) {\n          dest[fd.property] = fd.decode(b, offset);\n        }\n        offset += fd.getSpan(b, offset);\n        if (this.decodePrefixes && b.length === offset) {\n          break;\n        }\n      }\n      return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Structure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the buffer is\n     * left unmodified. */\n    encode(src, b, offset = 0) {\n      const firstOffset = offset;\n      let lastOffset = 0;\n      let lastWrote = 0;\n      for (const fd of this.fields) {\n        let span = fd.span;\n        lastWrote = 0 < span ? span : 0;\n        if (undefined !== fd.property) {\n          const fv = src[fd.property];\n          if (undefined !== fv) {\n            lastWrote = fd.encode(fv, b, offset);\n            if (0 > span) {\n              /* Read the as-encoded span, which is not necessarily the\n               * same as what we wrote. */\n              span = fd.getSpan(b, offset);\n            }\n          }\n        }\n        lastOffset = offset;\n        offset += span;\n      }\n      /* Use (lastOffset + lastWrote) instead of offset because the last\n       * item may have had a dynamic length and we don't want to include\n       * the padding between it and the end of the space reserved for\n       * it. */\n      return lastOffset + lastWrote - firstOffset;\n    }\n    /** @override */\n    fromArray(values) {\n      const dest = this.makeDestinationObject();\n      for (const fd of this.fields) {\n        if (undefined !== fd.property && 0 < values.length) {\n          dest[fd.property] = values.shift();\n        }\n      }\n      return dest;\n    }\n    /**\n     * Get access to the layout of a given property.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Layout} - the layout associated with `property`, or\n     * undefined if there is no such property.\n     */\n    layoutFor(property) {\n      if ('string' !== typeof property) {\n        throw new TypeError('property must be string');\n      }\n      for (const fd of this.fields) {\n        if (fd.property === property) {\n          return fd;\n        }\n      }\n      return undefined;\n    }\n    /**\n     * Get the offset of a structure member.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Number} - the offset in bytes to the start of `property`\n     * within the structure, or undefined if `property` is not a field\n     * within the structure.  If the property is a member but follows a\n     * variable-length structure member a negative number will be\n     * returned.\n     */\n    offsetOf(property) {\n      if ('string' !== typeof property) {\n        throw new TypeError('property must be string');\n      }\n      let offset = 0;\n      for (const fd of this.fields) {\n        if (fd.property === property) {\n          return offset;\n        }\n        if (0 > fd.span) {\n          offset = -1;\n        } else if (0 <= offset) {\n          offset += fd.span;\n        }\n      }\n      return undefined;\n    }\n  }\n  exports.Structure = Structure;\n  /**\n   * An object that can provide a {@link\n   * Union#discriminator|discriminator} API for {@link Union}.\n   *\n   * **NOTE** This is an abstract base class; you can create instances\n   * if it amuses you, but they won't support the {@link\n   * UnionDiscriminator#encode|encode} or {@link\n   * UnionDiscriminator#decode|decode} functions.\n   *\n   * @param {string} [property] - Default for {@link\n   * UnionDiscriminator#property|property}.\n   *\n   * @abstract\n   */\n  class UnionDiscriminator {\n    constructor(property) {\n      /** The {@link Layout#property|property} to be used when the\n       * discriminator is referenced in isolation (generally when {@link\n       * Union#decode|Union decode} cannot delegate to a specific\n       * variant). */\n      this.property = property;\n    }\n    /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n     *\n     * The implementation of this method need not reference the buffer if\n     * variant information is available through other means. */\n    decode(b, offset) {\n      throw new Error('UnionDiscriminator is abstract');\n    }\n    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n     *\n     * The implementation of this method need not store the value if\n     * variant information is maintained through other means. */\n    encode(src, b, offset) {\n      throw new Error('UnionDiscriminator is abstract');\n    }\n  }\n  exports.UnionDiscriminator = UnionDiscriminator;\n  /**\n   * An object that can provide a {@link\n   * UnionDiscriminator|discriminator API} for {@link Union} using an\n   * unsigned integral {@link Layout} instance located either inside or\n   * outside the union.\n   *\n   * @param {ExternalLayout} layout - initializes {@link\n   * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n   * ExternalLayout#isCount|isCount()}.\n   *\n   * @param {string} [property] - Default for {@link\n   * UnionDiscriminator#property|property}, superseding the property\n   * from `layout`, but defaulting to `variant` if neither `property`\n   * nor layout provide a property name.\n   *\n   * @augments {UnionDiscriminator}\n   */\n  class UnionLayoutDiscriminator extends UnionDiscriminator {\n    constructor(layout, property) {\n      if (!(layout instanceof ExternalLayout && layout.isCount())) {\n        throw new TypeError('layout must be an unsigned integer ExternalLayout');\n      }\n      super(property || layout.property || 'variant');\n      /** The {@link ExternalLayout} used to access the discriminator\n       * value. */\n      this.layout = layout;\n    }\n    /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    decode(b, offset) {\n      return this.layout.decode(b, offset);\n    }\n    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n    encode(src, b, offset) {\n      return this.layout.encode(src, b, offset);\n    }\n  }\n  exports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\n  /**\n   * Represent any number of span-compatible layouts.\n   *\n   * *Factory*: {@link module:Layout.union|union}\n   *\n   * If the union has a {@link Union#defaultLayout|default layout} that\n   * layout must have a non-negative {@link Layout#span|span}.  The span\n   * of a fixed-span union includes its {@link\n   * Union#discriminator|discriminator} if the variant is a {@link\n   * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n   * of its {@link Union#defaultLayout|default layout}.\n   *\n   * If the union does not have a default layout then the encoded span\n   * of the union depends on the encoded span of its variant (which may\n   * be fixed or variable).\n   *\n   * {@link VariantLayout#layout|Variant layout}s are added through\n   * {@link Union#addVariant|addVariant}.  If the union has a default\n   * layout, the span of the {@link VariantLayout#layout|layout\n   * contained by the variant} must not exceed the span of the {@link\n   * Union#defaultLayout|default layout} (minus the span of a {@link\n   * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n   * span of the variant will equal the span of the union itself.\n   *\n   * The variant for a buffer can only be identified from the {@link\n   * Union#discriminator|discriminator} {@link\n   * UnionDiscriminator#property|property} (in the case of the {@link\n   * Union#defaultLayout|default layout}), or by using {@link\n   * Union#getVariant|getVariant} and examining the resulting {@link\n   * VariantLayout} instance.\n   *\n   * A variant compatible with a JavaScript object can be identified\n   * using {@link Union#getSourceVariant|getSourceVariant}.\n   *\n   * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n   * identify the layout used to interpret the union contents.  The\n   * parameter must be an instance of {@link UnionDiscriminator}, an\n   * {@link ExternalLayout} that satisfies {@link\n   * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n   * UIntBE}).  When a non-external layout element is passed the layout\n   * appears at the start of the union.  In all cases the (synthesized)\n   * {@link UnionDiscriminator} instance is recorded as {@link\n   * Union#discriminator|discriminator}.\n   *\n   * @param {(Layout|null)} defaultLayout - initializer for {@link\n   * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n   * If `null` there is no default layout: the union has data-dependent\n   * length and attempts to decode or encode unrecognized variants will\n   * throw an exception.  A {@link Layout} instance must have a\n   * non-negative {@link Layout#span|span}, and if it lacks a {@link\n   * Layout#property|property} the {@link\n   * Union#defaultLayout|defaultLayout} will be a {@link\n   * Layout#replicate|replica} with property `content`.\n   *\n   * @param {string} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @augments {Layout}\n   */\n  class Union extends Layout {\n    constructor(discr, defaultLayout, property) {\n      let discriminator;\n      if (discr instanceof UInt || discr instanceof UIntBE) {\n        discriminator = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n      } else if (discr instanceof ExternalLayout && discr.isCount()) {\n        discriminator = new UnionLayoutDiscriminator(discr);\n      } else if (!(discr instanceof UnionDiscriminator)) {\n        throw new TypeError('discr must be a UnionDiscriminator ' + 'or an unsigned integer layout');\n      } else {\n        discriminator = discr;\n      }\n      if (undefined === defaultLayout) {\n        defaultLayout = null;\n      }\n      if (!(null === defaultLayout || defaultLayout instanceof Layout)) {\n        throw new TypeError('defaultLayout must be null or a Layout');\n      }\n      if (null !== defaultLayout) {\n        if (0 > defaultLayout.span) {\n          throw new Error('defaultLayout must have constant span');\n        }\n        if (undefined === defaultLayout.property) {\n          defaultLayout = defaultLayout.replicate('content');\n        }\n      }\n      /* The union span can be estimated only if there's a default\n       * layout.  The union spans its default layout, plus any prefix\n       * variant layout.  By construction both layouts, if present, have\n       * non-negative span. */\n      let span = -1;\n      if (defaultLayout) {\n        span = defaultLayout.span;\n        if (0 <= span && (discr instanceof UInt || discr instanceof UIntBE)) {\n          span += discriminator.layout.span;\n        }\n      }\n      super(span, property);\n      /** The interface for the discriminator value in isolation.\n       *\n       * This a {@link UnionDiscriminator} either passed to the\n       * constructor or synthesized from the `discr` constructor\n       * argument.  {@link\n       * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n       * `true` iff the `discr` parameter was a non-offset {@link\n       * Layout} instance. */\n      this.discriminator = discriminator;\n      /** `true` if the {@link Union#discriminator|discriminator} is the\n       * first field in the union.\n       *\n       * If `false` the discriminator is obtained from somewhere\n       * else. */\n      this.usesPrefixDiscriminator = discr instanceof UInt || discr instanceof UIntBE;\n      /** The layout for non-discriminator content when the value of the\n       * discriminator is not recognized.\n       *\n       * This is the value passed to the constructor.  It is\n       * structurally equivalent to the second component of {@link\n       * Union#layout|layout} but may have a different property\n       * name. */\n      this.defaultLayout = defaultLayout;\n      /** A registry of allowed variants.\n       *\n       * The keys are unsigned integers which should be compatible with\n       * {@link Union.discriminator|discriminator}.  The property value\n       * is the corresponding {@link VariantLayout} instances assigned\n       * to this union by {@link Union#addVariant|addVariant}.\n       *\n       * **NOTE** The registry remains mutable so that variants can be\n       * {@link Union#addVariant|added} at any time.  Users should not\n       * manipulate the content of this property. */\n      this.registry = {};\n      /* Private variable used when invoking getSourceVariant */\n      let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n      /** Function to infer the variant selected by a source object.\n       *\n       * Defaults to {@link\n       * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n       * be overridden using {@link\n       * Union#configGetSourceVariant|configGetSourceVariant}.\n       *\n       * @param {Object} src - as with {@link\n       * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n       *\n       * @returns {(undefined|VariantLayout)} The default variant\n       * (`undefined`) or first registered variant that uses a property\n       * available in `src`. */\n      this.getSourceVariant = function (src) {\n        return boundGetSourceVariant(src);\n      };\n      /** Function to override the implementation of {@link\n       * Union#getSourceVariant|getSourceVariant}.\n       *\n       * Use this if the desired variant cannot be identified using the\n       * algorithm of {@link\n       * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n       *\n       * **NOTE** The provided function will be invoked bound to this\n       * Union instance, providing local access to {@link\n       * Union#registry|registry}.\n       *\n       * @param {Function} gsv - a function that follows the API of\n       * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n      this.configGetSourceVariant = function (gsv) {\n        boundGetSourceVariant = gsv.bind(this);\n      };\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n      if (0 <= this.span) {\n        return this.span;\n      }\n      /* Default layouts always have non-negative span, so we don't have\n       * one and we have to recognize the variant which will in turn\n       * determine the span. */\n      const vlo = this.getVariant(b, offset);\n      if (!vlo) {\n        throw new Error('unable to determine span for unrecognized variant');\n      }\n      return vlo.getSpan(b, offset);\n    }\n    /**\n     * Method to infer a registered Union variant compatible with `src`.\n     *\n     * The first satisfied rule in the following sequence defines the\n     * return value:\n     * * If `src` has properties matching the Union discriminator and\n     *   the default layout, `undefined` is returned regardless of the\n     *   value of the discriminator property (this ensures the default\n     *   layout will be used);\n     * * If `src` has a property matching the Union discriminator, the\n     *   value of the discriminator identifies a registered variant, and\n     *   either (a) the variant has no layout, or (b) `src` has the\n     *   variant's property, then the variant is returned (because the\n     *   source satisfies the constraints of the variant it identifies);\n     * * If `src` does not have a property matching the Union\n     *   discriminator, but does have a property matching a registered\n     *   variant, then the variant is returned (because the source\n     *   matches a variant without an explicit conflict);\n     * * An error is thrown (because we either can't identify a variant,\n     *   or we were explicitly told the variant but can't satisfy it).\n     *\n     * @param {Object} src - an object presumed to be compatible with\n     * the content of the Union.\n     *\n     * @return {(undefined|VariantLayout)} - as described above.\n     *\n     * @throws {Error} - if `src` cannot be associated with a default or\n     * registered variant.\n     */\n    defaultGetSourceVariant(src) {\n      if (Object.prototype.hasOwnProperty.call(src, this.discriminator.property)) {\n        if (this.defaultLayout && this.defaultLayout.property && Object.prototype.hasOwnProperty.call(src, this.defaultLayout.property)) {\n          return undefined;\n        }\n        const vlo = this.registry[src[this.discriminator.property]];\n        if (vlo && (!vlo.layout || vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property))) {\n          return vlo;\n        }\n      } else {\n        for (const tag in this.registry) {\n          const vlo = this.registry[tag];\n          if (vlo.property && Object.prototype.hasOwnProperty.call(src, vlo.property)) {\n            return vlo;\n          }\n        }\n      }\n      throw new Error('unable to infer src variant');\n    }\n    /** Implement {@link Layout#decode|decode} for {@link Union}.\n     *\n     * If the variant is {@link Union#addVariant|registered} the return\n     * value is an instance of that variant, with no explicit\n     * discriminator.  Otherwise the {@link Union#defaultLayout|default\n     * layout} is used to decode the content. */\n    decode(b, offset = 0) {\n      let dest;\n      const dlo = this.discriminator;\n      const discr = dlo.decode(b, offset);\n      const clo = this.registry[discr];\n      if (undefined === clo) {\n        const defaultLayout = this.defaultLayout;\n        let contentOffset = 0;\n        if (this.usesPrefixDiscriminator) {\n          contentOffset = dlo.layout.span;\n        }\n        dest = this.makeDestinationObject();\n        dest[dlo.property] = discr;\n        // defaultLayout.property can be undefined, but this is allowed by buffer-layout\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        dest[defaultLayout.property] = defaultLayout.decode(b, offset + contentOffset);\n      } else {\n        dest = clo.decode(b, offset);\n      }\n      return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Union}.\n     *\n     * This API assumes the `src` object is consistent with the union's\n     * {@link Union#defaultLayout|default layout}.  To encode variants\n     * use the appropriate variant-specific {@link VariantLayout#encode}\n     * method. */\n    encode(src, b, offset = 0) {\n      const vlo = this.getSourceVariant(src);\n      if (undefined === vlo) {\n        const dlo = this.discriminator;\n        // this.defaultLayout is not undefined when vlo is undefined\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        const clo = this.defaultLayout;\n        let contentOffset = 0;\n        if (this.usesPrefixDiscriminator) {\n          contentOffset = dlo.layout.span;\n        }\n        dlo.encode(src[dlo.property], b, offset);\n        // clo.property is not undefined when vlo is undefined\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n      }\n      return vlo.encode(src, b, offset);\n    }\n    /** Register a new variant structure within a union.  The newly\n     * created variant is returned.\n     *\n     * @param {Number} variant - initializer for {@link\n     * VariantLayout#variant|variant}.\n     *\n     * @param {Layout} layout - initializer for {@link\n     * VariantLayout#layout|layout}.\n     *\n     * @param {String} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {VariantLayout} */\n    addVariant(variant, layout, property) {\n      const rv = new VariantLayout(this, variant, layout, property);\n      this.registry[variant] = rv;\n      return rv;\n    }\n    /**\n     * Get the layout associated with a registered variant.\n     *\n     * If `vb` does not produce a registered variant the function returns\n     * `undefined`.\n     *\n     * @param {(Number|Uint8Array)} vb - either the variant number, or a\n     * buffer from which the discriminator is to be read.\n     *\n     * @param {Number} offset - offset into `vb` for the start of the\n     * union.  Used only when `vb` is an instance of {Uint8Array}.\n     *\n     * @return {({VariantLayout}|undefined)}\n     */\n    getVariant(vb, offset = 0) {\n      let variant;\n      if (vb instanceof Uint8Array) {\n        variant = this.discriminator.decode(vb, offset);\n      } else {\n        variant = vb;\n      }\n      return this.registry[variant];\n    }\n  }\n  exports.Union = Union;\n  /**\n   * Represent a specific variant within a containing union.\n   *\n   * **NOTE** The {@link Layout#span|span} of the variant may include\n   * the span of the {@link Union#discriminator|discriminator} used to\n   * identify it, but values read and written using the variant strictly\n   * conform to the content of {@link VariantLayout#layout|layout}.\n   *\n   * **NOTE** User code should not invoke this constructor directly.  Use\n   * the union {@link Union#addVariant|addVariant} helper method.\n   *\n   * @param {Union} union - initializer for {@link\n   * VariantLayout#union|union}.\n   *\n   * @param {Number} variant - initializer for {@link\n   * VariantLayout#variant|variant}.\n   *\n   * @param {Layout} [layout] - initializer for {@link\n   * VariantLayout#layout|layout}.  If absent the variant carries no\n   * data.\n   *\n   * @param {String} [property] - initializer for {@link\n   * Layout#property|property}.  Unlike many other layouts, variant\n   * layouts normally include a property name so they can be identified\n   * within their containing {@link Union}.  The property identifier may\n   * be absent only if `layout` is is absent.\n   *\n   * @augments {Layout}\n   */\n  class VariantLayout extends Layout {\n    constructor(union, variant, layout, property) {\n      if (!(union instanceof Union)) {\n        throw new TypeError('union must be a Union');\n      }\n      if (!Number.isInteger(variant) || 0 > variant) {\n        throw new TypeError('variant must be a (non-negative) integer');\n      }\n      if ('string' === typeof layout && undefined === property) {\n        property = layout;\n        layout = null;\n      }\n      if (layout) {\n        if (!(layout instanceof Layout)) {\n          throw new TypeError('layout must be a Layout');\n        }\n        if (null !== union.defaultLayout && 0 <= layout.span && layout.span > union.defaultLayout.span) {\n          throw new Error('variant span exceeds span of containing union');\n        }\n        if ('string' !== typeof property) {\n          throw new TypeError('variant must have a String property');\n        }\n      }\n      let span = union.span;\n      if (0 > union.span) {\n        span = layout ? layout.span : 0;\n        if (0 <= span && union.usesPrefixDiscriminator) {\n          span += union.discriminator.layout.span;\n        }\n      }\n      super(span, property);\n      /** The {@link Union} to which this variant belongs. */\n      this.union = union;\n      /** The unsigned integral value identifying this variant within\n       * the {@link Union#discriminator|discriminator} of the containing\n       * union. */\n      this.variant = variant;\n      /** The {@link Layout} to be used when reading/writing the\n       * non-discriminator part of the {@link\n       * VariantLayout#union|union}.  If `null` the variant carries no\n       * data. */\n      this.layout = layout || null;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n      if (0 <= this.span) {\n        /* Will be equal to the containing union span if that is not\n         * variable. */\n        return this.span;\n      }\n      let contentOffset = 0;\n      if (this.union.usesPrefixDiscriminator) {\n        contentOffset = this.union.discriminator.layout.span;\n      }\n      /* Span is defined solely by the variant (and prefix discriminator) */\n      let span = 0;\n      if (this.layout) {\n        span = this.layout.getSpan(b, offset + contentOffset);\n      }\n      return contentOffset + span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      const dest = this.makeDestinationObject();\n      if (this !== this.union.getVariant(b, offset)) {\n        throw new Error('variant mismatch');\n      }\n      let contentOffset = 0;\n      if (this.union.usesPrefixDiscriminator) {\n        contentOffset = this.union.discriminator.layout.span;\n      }\n      if (this.layout) {\n        dest[this.property] = this.layout.decode(b, offset + contentOffset);\n      } else if (this.property) {\n        dest[this.property] = true;\n      } else if (this.union.usesPrefixDiscriminator) {\n        dest[this.union.discriminator.property] = this.variant;\n      }\n      return dest;\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n      let contentOffset = 0;\n      if (this.union.usesPrefixDiscriminator) {\n        contentOffset = this.union.discriminator.layout.span;\n      }\n      if (this.layout && !Object.prototype.hasOwnProperty.call(src, this.property)) {\n        throw new TypeError('variant lacks property ' + this.property);\n      }\n      this.union.discriminator.encode(this.variant, b, offset);\n      let span = contentOffset;\n      if (this.layout) {\n        this.layout.encode(src[this.property], b, offset + contentOffset);\n        span += this.layout.getSpan(b, offset + contentOffset);\n        if (0 <= this.union.span && span > this.union.span) {\n          throw new Error('encoded variant overruns containing union');\n        }\n      }\n      return span;\n    }\n    /** Delegate {@link Layout#fromArray|fromArray} to {@link\n     * VariantLayout#layout|layout}. */\n    fromArray(values) {\n      if (this.layout) {\n        return this.layout.fromArray(values);\n      }\n      return undefined;\n    }\n  }\n  exports.VariantLayout = VariantLayout;\n  /** JavaScript chose to define bitwise operations as operating on\n   * signed 32-bit values in 2's complement form, meaning any integer\n   * with bit 31 set is going to look negative.  For right shifts that's\n   * not a problem, because `>>>` is a logical shift, but for every\n   * other bitwise operator we have to compensate for possible negative\n   * results. */\n  function fixBitwiseResult(v) {\n    if (0 > v) {\n      v += 0x100000000;\n    }\n    return v;\n  }\n  /**\n   * Contain a sequence of bit fields as an unsigned integer.\n   *\n   * *Factory*: {@link module:Layout.bits|bits}\n   *\n   * This is a container element; within it there are {@link BitField}\n   * instances that provide the extracted properties.  The container\n   * simply defines the aggregate representation and its bit ordering.\n   * The representation is an object containing properties with numeric\n   * or {@link Boolean} values.\n   *\n   * {@link BitField}s are added with the {@link\n   * BitStructure#addField|addField} and {@link\n   * BitStructure#addBoolean|addBoolean} methods.\n  \n   * @param {Layout} word - initializer for {@link\n   * BitStructure#word|word}.  The parameter must be an instance of\n   * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n   *\n   * @param {bool} [msb] - `true` if the bit numbering starts at the\n   * most significant bit of the containing word; `false` (default) if\n   * it starts at the least significant bit of the containing word.  If\n   * the parameter at this position is a string and `property` is\n   * `undefined` the value of this argument will instead be used as the\n   * value of `property`.\n   *\n   * @param {string} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @augments {Layout}\n   */\n  class BitStructure extends Layout {\n    constructor(word, msb, property) {\n      if (!(word instanceof UInt || word instanceof UIntBE)) {\n        throw new TypeError('word must be a UInt or UIntBE layout');\n      }\n      if ('string' === typeof msb && undefined === property) {\n        property = msb;\n        msb = false;\n      }\n      if (4 < word.span) {\n        throw new RangeError('word cannot exceed 32 bits');\n      }\n      super(word.span, property);\n      /** The layout used for the packed value.  {@link BitField}\n       * instances are packed sequentially depending on {@link\n       * BitStructure#msb|msb}. */\n      this.word = word;\n      /** Whether the bit sequences are packed starting at the most\n       * significant bit growing down (`true`), or the least significant\n       * bit growing up (`false`).\n       *\n       * **NOTE** Regardless of this value, the least significant bit of\n       * any {@link BitField} value is the least significant bit of the\n       * corresponding section of the packed value. */\n      this.msb = !!msb;\n      /** The sequence of {@link BitField} layouts that comprise the\n       * packed structure.\n       *\n       * **NOTE** The array remains mutable to allow fields to be {@link\n       * BitStructure#addField|added} after construction.  Users should\n       * not manipulate the content of this property.*/\n      this.fields = [];\n      /* Storage for the value.  Capture a variable instead of using an\n       * instance property because we don't want anything to change the\n       * value without going through the mutator. */\n      let value = 0;\n      this._packedSetValue = function (v) {\n        value = fixBitwiseResult(v);\n        return this;\n      };\n      this._packedGetValue = function () {\n        return value;\n      };\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      const dest = this.makeDestinationObject();\n      const value = this.word.decode(b, offset);\n      this._packedSetValue(value);\n      for (const fd of this.fields) {\n        if (undefined !== fd.property) {\n          dest[fd.property] = fd.decode(b);\n        }\n      }\n      return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the packed\n     * value is left unmodified.  Unused bits are also left unmodified. */\n    encode(src, b, offset = 0) {\n      const value = this.word.decode(b, offset);\n      this._packedSetValue(value);\n      for (const fd of this.fields) {\n        if (undefined !== fd.property) {\n          const fv = src[fd.property];\n          if (undefined !== fv) {\n            fd.encode(fv);\n          }\n        }\n      }\n      return this.word.encode(this._packedGetValue(), b, offset);\n    }\n    /** Register a new bitfield with a containing bit structure.  The\n     * resulting bitfield is returned.\n     *\n     * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {BitField} */\n    addField(bits, property) {\n      const bf = new BitField(this, bits, property);\n      this.fields.push(bf);\n      return bf;\n    }\n    /** As with {@link BitStructure#addField|addField} for single-bit\n     * fields with `boolean` value representation.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {Boolean} */\n    // `Boolean` conflicts with the native primitive type\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    addBoolean(property) {\n      // This is my Boolean, not the Javascript one.\n      const bf = new Boolean(this, property);\n      this.fields.push(bf);\n      return bf;\n    }\n    /**\n     * Get access to the bit field for a given property.\n     *\n     * @param {String} property - the bit field of interest.\n     *\n     * @return {BitField} - the field associated with `property`, or\n     * undefined if there is no such property.\n     */\n    fieldFor(property) {\n      if ('string' !== typeof property) {\n        throw new TypeError('property must be string');\n      }\n      for (const fd of this.fields) {\n        if (fd.property === property) {\n          return fd;\n        }\n      }\n      return undefined;\n    }\n  }\n  exports.BitStructure = BitStructure;\n  /**\n   * Represent a sequence of bits within a {@link BitStructure}.\n   *\n   * All bit field values are represented as unsigned integers.\n   *\n   * **NOTE** User code should not invoke this constructor directly.\n   * Use the container {@link BitStructure#addField|addField} helper\n   * method.\n   *\n   * **NOTE** BitField instances are not instances of {@link Layout}\n   * since {@link Layout#span|span} measures 8-bit units.\n   *\n   * @param {BitStructure} container - initializer for {@link\n   * BitField#container|container}.\n   *\n   * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n   *\n   * @param {string} [property] - initializer for {@link\n   * Layout#property|property}.\n   */\n  class BitField {\n    constructor(container, bits, property) {\n      if (!(container instanceof BitStructure)) {\n        throw new TypeError('container must be a BitStructure');\n      }\n      if (!Number.isInteger(bits) || 0 >= bits) {\n        throw new TypeError('bits must be positive integer');\n      }\n      const totalBits = 8 * container.span;\n      const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n      if (bits + usedBits > totalBits) {\n        throw new Error('bits too long for span remainder (' + (totalBits - usedBits) + ' of ' + totalBits + ' remain)');\n      }\n      /** The {@link BitStructure} instance to which this bit field\n       * belongs. */\n      this.container = container;\n      /** The span of this value in bits. */\n      this.bits = bits;\n      /** A mask of {@link BitField#bits|bits} bits isolating value bits\n       * that fit within the field.\n       *\n       * That is, it masks a value that has not yet been shifted into\n       * position within its containing packed integer. */\n      this.valueMask = (1 << bits) - 1;\n      if (32 === bits) {\n        // shifted value out of range\n        this.valueMask = 0xFFFFFFFF;\n      }\n      /** The offset of the value within the containing packed unsigned\n       * integer.  The least significant bit of the packed value is at\n       * offset zero, regardless of bit ordering used. */\n      this.start = usedBits;\n      if (this.container.msb) {\n        this.start = totalBits - usedBits - bits;\n      }\n      /** A mask of {@link BitField#bits|bits} isolating the field value\n       * within the containing packed unsigned integer. */\n      this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n      /** The property name used when this bitfield is represented in an\n       * Object.\n       *\n       * Intended to be functionally equivalent to {@link\n       * Layout#property}.\n       *\n       * If left undefined the corresponding span of bits will be\n       * treated as padding: it will not be mutated by {@link\n       * Layout#encode|encode} nor represented as a property in the\n       * decoded Object. */\n      this.property = property;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field. */\n    decode(b, offset) {\n      const word = this.container._packedGetValue();\n      const wordValue = fixBitwiseResult(word & this.wordMask);\n      const value = wordValue >>> this.start;\n      return value;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field.\n     *\n     * **NOTE** This is not a specialization of {@link\n     * Layout#encode|Layout.encode} and there is no return value. */\n    encode(value) {\n      if ('number' !== typeof value || !Number.isInteger(value) || value !== fixBitwiseResult(value & this.valueMask)) {\n        throw new TypeError(nameWithProperty('BitField.encode', this) + ' value must be integer not exceeding ' + this.valueMask);\n      }\n      const word = this.container._packedGetValue();\n      const wordValue = fixBitwiseResult(value << this.start);\n      this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask) | wordValue);\n    }\n  }\n  exports.BitField = BitField;\n  /**\n   * Represent a single bit within a {@link BitStructure} as a\n   * JavaScript boolean.\n   *\n   * **NOTE** User code should not invoke this constructor directly.\n   * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n   * method.\n   *\n   * @param {BitStructure} container - initializer for {@link\n   * BitField#container|container}.\n   *\n   * @param {string} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @augments {BitField}\n   */\n  /* eslint-disable no-extend-native */\n  class Boolean extends BitField {\n    constructor(container, property) {\n      super(container, 1, property);\n    }\n    /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n     *\n     * @returns {boolean} */\n    decode(b, offset) {\n      return !!super.decode(b, offset);\n    }\n    /** @override */\n    encode(value) {\n      if ('boolean' === typeof value) {\n        // BitField requires integer values\n        value = +value;\n      }\n      super.encode(value);\n    }\n  }\n  exports.Boolean = Boolean;\n  /* eslint-enable no-extend-native */\n  /**\n   * Contain a fixed-length block of arbitrary data, represented as a\n   * Uint8Array.\n   *\n   * *Factory*: {@link module:Layout.blob|blob}\n   *\n   * @param {(Number|ExternalLayout)} length - initializes {@link\n   * Blob#length|length}.\n   *\n   * @param {String} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @augments {Layout}\n   */\n  class Blob extends Layout {\n    constructor(length, property) {\n      if (!(length instanceof ExternalLayout && length.isCount() || Number.isInteger(length) && 0 <= length)) {\n        throw new TypeError('length must be positive integer ' + 'or an unsigned integer ExternalLayout');\n      }\n      let span = -1;\n      if (!(length instanceof ExternalLayout)) {\n        span = length;\n      }\n      super(span, property);\n      /** The number of bytes in the blob.\n       *\n       * This may be a non-negative integer, or an instance of {@link\n       * ExternalLayout} that satisfies {@link\n       * ExternalLayout#isCount|isCount()}. */\n      this.length = length;\n    }\n    /** @override */\n    getSpan(b, offset) {\n      let span = this.span;\n      if (0 > span) {\n        span = this.length.decode(b, offset);\n      }\n      return span;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      let span = this.span;\n      if (0 > span) {\n        span = this.length.decode(b, offset);\n      }\n      return uint8ArrayToBuffer(b).slice(offset, offset + span);\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Blob}.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n    encode(src, b, offset) {\n      let span = this.length;\n      if (this.length instanceof ExternalLayout) {\n        span = src.length;\n      }\n      if (!(src instanceof Uint8Array && span === src.length)) {\n        throw new TypeError(nameWithProperty('Blob.encode', this) + ' requires (length ' + span + ') Uint8Array as src');\n      }\n      if (offset + span > b.length) {\n        throw new RangeError('encoding overruns Uint8Array');\n      }\n      const srcBuffer = uint8ArrayToBuffer(src);\n      uint8ArrayToBuffer(b).write(srcBuffer.toString('hex'), offset, span, 'hex');\n      if (this.length instanceof ExternalLayout) {\n        this.length.encode(span, b, offset);\n      }\n      return span;\n    }\n  }\n  exports.Blob = Blob;\n  /**\n   * Contain a `NUL`-terminated UTF8 string.\n   *\n   * *Factory*: {@link module:Layout.cstr|cstr}\n   *\n   * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n   * not be correctly decoded by this layout.\n   *\n   * @param {String} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @augments {Layout}\n   */\n  class CString extends Layout {\n    constructor(property) {\n      super(-1, property);\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n      checkUint8Array(b);\n      let idx = offset;\n      while (idx < b.length && 0 !== b[idx]) {\n        idx += 1;\n      }\n      return 1 + idx - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      const span = this.getSpan(b, offset);\n      return uint8ArrayToBuffer(b).slice(offset, offset + span - 1).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n      /* Must force this to a string, lest it be a number and the\n       * \"utf8-encoding\" below actually allocate a buffer of length\n       * src */\n      if ('string' !== typeof src) {\n        src = String(src);\n      }\n      const srcb = buffer_1.Buffer.from(src, 'utf8');\n      const span = srcb.length;\n      if (offset + span > b.length) {\n        throw new RangeError('encoding overruns Buffer');\n      }\n      const buffer = uint8ArrayToBuffer(b);\n      srcb.copy(buffer, offset);\n      buffer[offset + span] = 0;\n      return span + 1;\n    }\n  }\n  exports.CString = CString;\n  /**\n   * Contain a UTF8 string with implicit length.\n   *\n   * *Factory*: {@link module:Layout.utf8|utf8}\n   *\n   * **NOTE** Because the length is implicit in the size of the buffer\n   * this layout should be used only in isolation, or in a situation\n   * where the length can be expressed by operating on a slice of the\n   * containing buffer.\n   *\n   * @param {Number} [maxSpan] - the maximum length allowed for encoded\n   * string content.  If not provided there is no bound on the allowed\n   * content.\n   *\n   * @param {String} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @augments {Layout}\n   */\n  class UTF8 extends Layout {\n    constructor(maxSpan, property) {\n      if ('string' === typeof maxSpan && undefined === property) {\n        property = maxSpan;\n        maxSpan = undefined;\n      }\n      if (undefined === maxSpan) {\n        maxSpan = -1;\n      } else if (!Number.isInteger(maxSpan)) {\n        throw new TypeError('maxSpan must be an integer');\n      }\n      super(-1, property);\n      /** The maximum span of the layout in bytes.\n       *\n       * Positive values are generally expected.  Zero is abnormal.\n       * Attempts to encode or decode a value that exceeds this length\n       * will throw a `RangeError`.\n       *\n       * A negative value indicates that there is no bound on the length\n       * of the content. */\n      this.maxSpan = maxSpan;\n    }\n    /** @override */\n    getSpan(b, offset = 0) {\n      checkUint8Array(b);\n      return b.length - offset;\n    }\n    /** @override */\n    decode(b, offset = 0) {\n      const span = this.getSpan(b, offset);\n      if (0 <= this.maxSpan && this.maxSpan < span) {\n        throw new RangeError('text length exceeds maxSpan');\n      }\n      return uint8ArrayToBuffer(b).slice(offset, offset + span).toString('utf-8');\n    }\n    /** @override */\n    encode(src, b, offset = 0) {\n      /* Must force this to a string, lest it be a number and the\n       * \"utf8-encoding\" below actually allocate a buffer of length\n       * src */\n      if ('string' !== typeof src) {\n        src = String(src);\n      }\n      const srcb = buffer_1.Buffer.from(src, 'utf8');\n      const span = srcb.length;\n      if (0 <= this.maxSpan && this.maxSpan < span) {\n        throw new RangeError('text length exceeds maxSpan');\n      }\n      if (offset + span > b.length) {\n        throw new RangeError('encoding overruns Buffer');\n      }\n      srcb.copy(uint8ArrayToBuffer(b), offset);\n      return span;\n    }\n  }\n  exports.UTF8 = UTF8;\n  /**\n   * Contain a constant value.\n   *\n   * This layout may be used in cases where a JavaScript value can be\n   * inferred without an expression in the binary encoding.  An example\n   * would be a {@link VariantLayout|variant layout} where the content\n   * is implied by the union {@link Union#discriminator|discriminator}.\n   *\n   * @param {Object|Number|String} value - initializer for {@link\n   * Constant#value|value}.  If the value is an object (or array) and\n   * the application intends the object to remain unchanged regardless\n   * of what is done to values decoded by this layout, the value should\n   * be frozen prior passing it to this constructor.\n   *\n   * @param {String} [property] - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @augments {Layout}\n   */\n  class Constant extends Layout {\n    constructor(value, property) {\n      super(0, property);\n      /** The value produced by this constant when the layout is {@link\n       * Constant#decode|decoded}.\n       *\n       * Any JavaScript value including `null` and `undefined` is\n       * permitted.\n       *\n       * **WARNING** If `value` passed in the constructor was not\n       * frozen, it is possible for users of decoded values to change\n       * the content of the value. */\n      this.value = value;\n    }\n    /** @override */\n    decode(b, offset) {\n      return this.value;\n    }\n    /** @override */\n    encode(src, b, offset) {\n      /* Constants take no space */\n      return 0;\n    }\n  }\n  exports.Constant = Constant;\n  /** Factory for {@link GreedyCount}. */\n  exports.greedy = (elementSpan, property) => new GreedyCount(elementSpan, property);\n  /** Factory for {@link OffsetLayout}. */\n  exports.offset = (layout, offset, property) => new OffsetLayout(layout, offset, property);\n  /** Factory for {@link UInt|unsigned int layouts} spanning one\n   * byte. */\n  exports.u8 = property => new UInt(1, property);\n  /** Factory for {@link UInt|little-endian unsigned int layouts}\n   * spanning two bytes. */\n  exports.u16 = property => new UInt(2, property);\n  /** Factory for {@link UInt|little-endian unsigned int layouts}\n   * spanning three bytes. */\n  exports.u24 = property => new UInt(3, property);\n  /** Factory for {@link UInt|little-endian unsigned int layouts}\n   * spanning four bytes. */\n  exports.u32 = property => new UInt(4, property);\n  /** Factory for {@link UInt|little-endian unsigned int layouts}\n   * spanning five bytes. */\n  exports.u40 = property => new UInt(5, property);\n  /** Factory for {@link UInt|little-endian unsigned int layouts}\n   * spanning six bytes. */\n  exports.u48 = property => new UInt(6, property);\n  /** Factory for {@link NearUInt64|little-endian unsigned int\n   * layouts} interpreted as Numbers. */\n  exports.nu64 = property => new NearUInt64(property);\n  /** Factory for {@link UInt|big-endian unsigned int layouts}\n   * spanning two bytes. */\n  exports.u16be = property => new UIntBE(2, property);\n  /** Factory for {@link UInt|big-endian unsigned int layouts}\n   * spanning three bytes. */\n  exports.u24be = property => new UIntBE(3, property);\n  /** Factory for {@link UInt|big-endian unsigned int layouts}\n   * spanning four bytes. */\n  exports.u32be = property => new UIntBE(4, property);\n  /** Factory for {@link UInt|big-endian unsigned int layouts}\n   * spanning five bytes. */\n  exports.u40be = property => new UIntBE(5, property);\n  /** Factory for {@link UInt|big-endian unsigned int layouts}\n   * spanning six bytes. */\n  exports.u48be = property => new UIntBE(6, property);\n  /** Factory for {@link NearUInt64BE|big-endian unsigned int\n   * layouts} interpreted as Numbers. */\n  exports.nu64be = property => new NearUInt64BE(property);\n  /** Factory for {@link Int|signed int layouts} spanning one\n   * byte. */\n  exports.s8 = property => new Int(1, property);\n  /** Factory for {@link Int|little-endian signed int layouts}\n   * spanning two bytes. */\n  exports.s16 = property => new Int(2, property);\n  /** Factory for {@link Int|little-endian signed int layouts}\n   * spanning three bytes. */\n  exports.s24 = property => new Int(3, property);\n  /** Factory for {@link Int|little-endian signed int layouts}\n   * spanning four bytes. */\n  exports.s32 = property => new Int(4, property);\n  /** Factory for {@link Int|little-endian signed int layouts}\n   * spanning five bytes. */\n  exports.s40 = property => new Int(5, property);\n  /** Factory for {@link Int|little-endian signed int layouts}\n   * spanning six bytes. */\n  exports.s48 = property => new Int(6, property);\n  /** Factory for {@link NearInt64|little-endian signed int layouts}\n   * interpreted as Numbers. */\n  exports.ns64 = property => new NearInt64(property);\n  /** Factory for {@link Int|big-endian signed int layouts}\n   * spanning two bytes. */\n  exports.s16be = property => new IntBE(2, property);\n  /** Factory for {@link Int|big-endian signed int layouts}\n   * spanning three bytes. */\n  exports.s24be = property => new IntBE(3, property);\n  /** Factory for {@link Int|big-endian signed int layouts}\n   * spanning four bytes. */\n  exports.s32be = property => new IntBE(4, property);\n  /** Factory for {@link Int|big-endian signed int layouts}\n   * spanning five bytes. */\n  exports.s40be = property => new IntBE(5, property);\n  /** Factory for {@link Int|big-endian signed int layouts}\n   * spanning six bytes. */\n  exports.s48be = property => new IntBE(6, property);\n  /** Factory for {@link NearInt64BE|big-endian signed int layouts}\n   * interpreted as Numbers. */\n  exports.ns64be = property => new NearInt64BE(property);\n  /** Factory for {@link Float|little-endian 32-bit floating point} values. */\n  exports.f32 = property => new Float(property);\n  /** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\n  exports.f32be = property => new FloatBE(property);\n  /** Factory for {@link Double|little-endian 64-bit floating point} values. */\n  exports.f64 = property => new Double(property);\n  /** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\n  exports.f64be = property => new DoubleBE(property);\n  /** Factory for {@link Structure} values. */\n  exports.struct = (fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes);\n  /** Factory for {@link BitStructure} values. */\n  exports.bits = (word, msb, property) => new BitStructure(word, msb, property);\n  /** Factory for {@link Sequence} values. */\n  exports.seq = (elementLayout, count, property) => new Sequence(elementLayout, count, property);\n  /** Factory for {@link Union} values. */\n  exports.union = (discr, defaultLayout, property) => new Union(discr, defaultLayout, property);\n  /** Factory for {@link UnionLayoutDiscriminator} values. */\n  exports.unionLayoutDiscriminator = (layout, property) => new UnionLayoutDiscriminator(layout, property);\n  /** Factory for {@link Blob} values. */\n  exports.blob = (length, property) => new Blob(length, property);\n  /** Factory for {@link CString} values. */\n  exports.cstr = property => new CString(property);\n  /** Factory for {@link UTF8} values. */\n  exports.utf8 = (maxSpan, property) => new UTF8(maxSpan, property);\n  /** Factory for {@link Constant} values. */\n  exports.constant = (value, property) => new Constant(value, property);\n});","lineCount":2348,"map":[[2,2,1,0],[3,0,2,0],[4,0,3,0],[5,0,4,0],[6,0,5,0],[7,0,6,0],[8,0,7,0],[9,0,8,0],[10,0,9,0],[11,0,10,0],[12,0,11,0],[13,0,12,0],[14,0,13,0],[15,0,14,0],[16,0,15,0],[17,0,16,0],[18,0,17,0],[19,0,18,0],[20,0,19,0],[21,0,20,0],[22,0,21,0],[23,0,22,0],[24,2,23,0],[25,0,24,0],[26,0,25,0],[27,0,26,0],[28,0,27,0],[29,0,28,0],[30,0,29,0],[31,0,30,0],[32,0,31,0],[33,0,32,0],[34,0,33,0],[35,0,34,0],[36,0,35,0],[37,0,36,0],[38,0,37,0],[39,0,38,0],[40,0,39,0],[41,0,40,0],[42,0,41,0],[43,0,42,0],[44,0,43,0],[45,0,44,0],[46,0,45,0],[47,0,46,0],[48,0,47,0],[49,0,48,0],[50,0,49,0],[51,0,50,0],[52,0,51,0],[53,0,52,0],[54,0,53,0],[55,0,54,0],[56,0,55,0],[57,0,56,0],[58,0,57,0],[59,0,58,0],[60,0,59,0],[61,0,60,0],[62,0,61,0],[63,0,62,0],[64,0,63,0],[65,0,64,0],[66,0,65,0],[67,0,66,0],[68,0,67,0],[69,0,68,0],[70,0,69,0],[71,0,70,0],[72,0,71,0],[73,0,72,0],[74,0,73,0],[75,0,74,0],[76,0,75,0],[77,0,76,0],[78,0,77,0],[79,0,78,0],[80,0,79,0],[81,0,80,0],[82,0,81,0],[83,0,82,0],[84,0,83,0],[85,0,84,0],[86,0,85,0],[87,0,86,0],[88,0,87,0],[89,0,88,0],[90,0,89,0],[91,0,90,0],[92,0,91,0],[93,0,92,0],[94,0,93,0],[95,0,94,0],[96,0,95,0],[97,0,96,0],[98,0,97,0],[99,0,98,0],[100,0,99,0],[101,0,100,0],[102,0,101,0],[103,0,102,0],[104,0,103,0],[105,0,104,0],[106,0,105,0],[107,0,106,0],[108,0,107,0],[109,0,108,0],[110,0,109,0],[111,0,110,0],[112,0,111,0],[113,0,112,0],[114,0,113,0],[115,0,114,0],[116,0,115,0],[117,0,116,0],[118,0,117,0],[119,0,118,0],[120,0,119,0],[121,0,120,0],[122,0,121,0],[123,0,122,0],[124,0,123,0],[125,0,124,0],[126,0,125,0],[127,0,126,0],[128,0,127,0],[129,0,128,0],[130,0,129,0],[131,0,130,0],[132,2,131,0],[132,14,131,12],[134,2,132,0,"Object"],[134,8,132,6],[134,9,132,7,"defineProperty"],[134,23,132,21],[134,24,132,22,"exports"],[134,31,132,29],[134,33,132,31],[134,45,132,43],[134,47,132,45],[135,4,132,47,"value"],[135,9,132,52],[135,11,132,54],[136,2,132,59],[136,3,132,60],[136,4,132,61],[137,2,133,0,"exports"],[137,9,133,7],[137,10,133,8,"s16"],[137,13,133,11],[137,16,133,14,"exports"],[137,23,133,21],[137,24,133,22,"s8"],[137,26,133,24],[137,29,133,27,"exports"],[137,36,133,34],[137,37,133,35,"nu64be"],[137,43,133,41],[137,46,133,44,"exports"],[137,53,133,51],[137,54,133,52,"u48be"],[137,59,133,57],[137,62,133,60,"exports"],[137,69,133,67],[137,70,133,68,"u40be"],[137,75,133,73],[137,78,133,76,"exports"],[137,85,133,83],[137,86,133,84,"u32be"],[137,91,133,89],[137,94,133,92,"exports"],[137,101,133,99],[137,102,133,100,"u24be"],[137,107,133,105],[137,110,133,108,"exports"],[137,117,133,115],[137,118,133,116,"u16be"],[137,123,133,121],[137,126,133,124,"exports"],[137,133,133,131],[137,134,133,132,"nu64"],[137,138,133,136],[137,141,133,139,"exports"],[137,148,133,146],[137,149,133,147,"u48"],[137,152,133,150],[137,155,133,153,"exports"],[137,162,133,160],[137,163,133,161,"u40"],[137,166,133,164],[137,169,133,167,"exports"],[137,176,133,174],[137,177,133,175,"u32"],[137,180,133,178],[137,183,133,181,"exports"],[137,190,133,188],[137,191,133,189,"u24"],[137,194,133,192],[137,197,133,195,"exports"],[137,204,133,202],[137,205,133,203,"u16"],[137,208,133,206],[137,211,133,209,"exports"],[137,218,133,216],[137,219,133,217,"u8"],[137,221,133,219],[137,224,133,222,"exports"],[137,231,133,229],[137,232,133,230,"offset"],[137,238,133,236],[137,241,133,239,"exports"],[137,248,133,246],[137,249,133,247,"greedy"],[137,255,133,253],[137,258,133,256,"exports"],[137,265,133,263],[137,266,133,264,"Constant"],[137,274,133,272],[137,277,133,275,"exports"],[137,284,133,282],[137,285,133,283,"UTF8"],[137,289,133,287],[137,292,133,290,"exports"],[137,299,133,297],[137,300,133,298,"CString"],[137,307,133,305],[137,310,133,308,"exports"],[137,317,133,315],[137,318,133,316,"Blob"],[137,322,133,320],[137,325,133,323,"exports"],[137,332,133,330],[137,333,133,331,"Boolean"],[137,340,133,338],[137,343,133,341,"exports"],[137,350,133,348],[137,351,133,349,"BitField"],[137,359,133,357],[137,362,133,360,"exports"],[137,369,133,367],[137,370,133,368,"BitStructure"],[137,382,133,380],[137,385,133,383,"exports"],[137,392,133,390],[137,393,133,391,"VariantLayout"],[137,406,133,404],[137,409,133,407,"exports"],[137,416,133,414],[137,417,133,415,"Union"],[137,422,133,420],[137,425,133,423,"exports"],[137,432,133,430],[137,433,133,431,"UnionLayoutDiscriminator"],[137,457,133,455],[137,460,133,458,"exports"],[137,467,133,465],[137,468,133,466,"UnionDiscriminator"],[137,486,133,484],[137,489,133,487,"exports"],[137,496,133,494],[137,497,133,495,"Structure"],[137,506,133,504],[137,509,133,507,"exports"],[137,516,133,514],[137,517,133,515,"Sequence"],[137,525,133,523],[137,528,133,526,"exports"],[137,535,133,533],[137,536,133,534,"DoubleBE"],[137,544,133,542],[137,547,133,545,"exports"],[137,554,133,552],[137,555,133,553,"Double"],[137,561,133,559],[137,564,133,562,"exports"],[137,571,133,569],[137,572,133,570,"FloatBE"],[137,579,133,577],[137,582,133,580,"exports"],[137,589,133,587],[137,590,133,588,"Float"],[137,595,133,593],[137,598,133,596,"exports"],[137,605,133,603],[137,606,133,604,"NearInt64BE"],[137,617,133,615],[137,620,133,618,"exports"],[137,627,133,625],[137,628,133,626,"NearInt64"],[137,637,133,635],[137,640,133,638,"exports"],[137,647,133,645],[137,648,133,646,"NearUInt64BE"],[137,660,133,658],[137,663,133,661,"exports"],[137,670,133,668],[137,671,133,669,"NearUInt64"],[137,681,133,679],[137,684,133,682,"exports"],[137,691,133,689],[137,692,133,690,"IntBE"],[137,697,133,695],[137,700,133,698,"exports"],[137,707,133,705],[137,708,133,706,"Int"],[137,711,133,709],[137,714,133,712,"exports"],[137,721,133,719],[137,722,133,720,"UIntBE"],[137,728,133,726],[137,731,133,729,"exports"],[137,738,133,736],[137,739,133,737,"UInt"],[137,743,133,741],[137,746,133,744,"exports"],[137,753,133,751],[137,754,133,752,"OffsetLayout"],[137,766,133,764],[137,769,133,767,"exports"],[137,776,133,774],[137,777,133,775,"GreedyCount"],[137,788,133,786],[137,791,133,789,"exports"],[137,798,133,796],[137,799,133,797,"ExternalLayout"],[137,813,133,811],[137,816,133,814,"exports"],[137,823,133,821],[137,824,133,822,"bindConstructorLayout"],[137,845,133,843],[137,848,133,846,"exports"],[137,855,133,853],[137,856,133,854,"nameWithProperty"],[137,872,133,870],[137,875,133,873,"exports"],[137,882,133,880],[137,883,133,881,"Layout"],[137,889,133,887],[137,892,133,890,"exports"],[137,899,133,897],[137,900,133,898,"uint8ArrayToBuffer"],[137,918,133,916],[137,921,133,919,"exports"],[137,928,133,926],[137,929,133,927,"checkUint8Array"],[137,944,133,942],[137,947,133,945],[137,952,133,950],[137,953,133,951],[138,2,134,0,"exports"],[138,9,134,7],[138,10,134,8,"constant"],[138,18,134,16],[138,21,134,19,"exports"],[138,28,134,26],[138,29,134,27,"utf8"],[138,33,134,31],[138,36,134,34,"exports"],[138,43,134,41],[138,44,134,42,"cstr"],[138,48,134,46],[138,51,134,49,"exports"],[138,58,134,56],[138,59,134,57,"blob"],[138,63,134,61],[138,66,134,64,"exports"],[138,73,134,71],[138,74,134,72,"unionLayoutDiscriminator"],[138,98,134,96],[138,101,134,99,"exports"],[138,108,134,106],[138,109,134,107,"union"],[138,114,134,112],[138,117,134,115,"exports"],[138,124,134,122],[138,125,134,123,"seq"],[138,128,134,126],[138,131,134,129,"exports"],[138,138,134,136],[138,139,134,137,"bits"],[138,143,134,141],[138,146,134,144,"exports"],[138,153,134,151],[138,154,134,152,"struct"],[138,160,134,158],[138,163,134,161,"exports"],[138,170,134,168],[138,171,134,169,"f64be"],[138,176,134,174],[138,179,134,177,"exports"],[138,186,134,184],[138,187,134,185,"f64"],[138,190,134,188],[138,193,134,191,"exports"],[138,200,134,198],[138,201,134,199,"f32be"],[138,206,134,204],[138,209,134,207,"exports"],[138,216,134,214],[138,217,134,215,"f32"],[138,220,134,218],[138,223,134,221,"exports"],[138,230,134,228],[138,231,134,229,"ns64be"],[138,237,134,235],[138,240,134,238,"exports"],[138,247,134,245],[138,248,134,246,"s48be"],[138,253,134,251],[138,256,134,254,"exports"],[138,263,134,261],[138,264,134,262,"s40be"],[138,269,134,267],[138,272,134,270,"exports"],[138,279,134,277],[138,280,134,278,"s32be"],[138,285,134,283],[138,288,134,286,"exports"],[138,295,134,293],[138,296,134,294,"s24be"],[138,301,134,299],[138,304,134,302,"exports"],[138,311,134,309],[138,312,134,310,"s16be"],[138,317,134,315],[138,320,134,318,"exports"],[138,327,134,325],[138,328,134,326,"ns64"],[138,332,134,330],[138,335,134,333,"exports"],[138,342,134,340],[138,343,134,341,"s48"],[138,346,134,344],[138,349,134,347,"exports"],[138,356,134,354],[138,357,134,355,"s40"],[138,360,134,358],[138,363,134,361,"exports"],[138,370,134,368],[138,371,134,369,"s32"],[138,374,134,372],[138,377,134,375,"exports"],[138,384,134,382],[138,385,134,383,"s24"],[138,388,134,386],[138,391,134,389],[138,396,134,394],[138,397,134,395],[139,2,135,0],[139,8,135,6,"buffer_1"],[139,16,135,14],[139,19,135,17,"require"],[139,26,135,24],[139,27,135,24,"_dependencyMap"],[139,41,135,24],[139,54,135,33],[139,55,135,34],[140,2,136,0],[141,0,137,0],[142,0,138,0],[143,2,139,0],[143,11,139,9,"checkUint8Array"],[143,26,139,24,"checkUint8Array"],[143,27,139,25,"b"],[143,28,139,26],[143,30,139,28],[144,4,140,4],[144,8,140,8],[144,10,140,10,"b"],[144,11,140,11],[144,23,140,23,"Uint8Array"],[144,33,140,33],[144,34,140,34],[144,36,140,36],[145,6,141,8],[145,12,141,14],[145,16,141,18,"TypeError"],[145,25,141,27],[145,26,141,28],[145,50,141,52],[145,51,141,53],[146,4,142,4],[147,2,143,0],[148,2,144,0,"exports"],[148,9,144,7],[148,10,144,8,"checkUint8Array"],[148,25,144,23],[148,28,144,26,"checkUint8Array"],[148,43,144,41],[149,2,145,0],[150,0,146,0],[151,0,147,0],[152,2,148,0],[152,11,148,9,"uint8ArrayToBuffer"],[152,29,148,27,"uint8ArrayToBuffer"],[152,30,148,28,"b"],[152,31,148,29],[152,33,148,31],[153,4,149,4,"checkUint8Array"],[153,19,149,19],[153,20,149,20,"b"],[153,21,149,21],[153,22,149,22],[154,4,150,4],[154,11,150,11,"buffer_1"],[154,19,150,19],[154,20,150,20,"Buffer"],[154,26,150,26],[154,27,150,27,"from"],[154,31,150,31],[154,32,150,32,"b"],[154,33,150,33],[154,34,150,34,"buffer"],[154,40,150,40],[154,42,150,42,"b"],[154,43,150,43],[154,44,150,44,"byteOffset"],[154,54,150,54],[154,56,150,56,"b"],[154,57,150,57],[154,58,150,58,"length"],[154,64,150,64],[154,65,150,65],[155,2,151,0],[156,2,152,0,"exports"],[156,9,152,7],[156,10,152,8,"uint8ArrayToBuffer"],[156,28,152,26],[156,31,152,29,"uint8ArrayToBuffer"],[156,49,152,47],[157,2,153,0],[158,0,154,0],[159,0,155,0],[160,0,156,0],[161,0,157,0],[162,0,158,0],[163,0,159,0],[164,0,160,0],[165,0,161,0],[166,0,162,0],[167,0,163,0],[168,0,164,0],[169,0,165,0],[170,0,166,0],[171,0,167,0],[172,0,168,0],[173,2,169,0],[173,8,169,6,"Layout"],[173,14,169,12],[173,15,169,13],[174,4,170,4,"constructor"],[174,15,170,15,"constructor"],[174,16,170,16,"span"],[174,20,170,20],[174,22,170,22,"property"],[174,30,170,30],[174,32,170,32],[175,6,171,8],[175,10,171,12],[175,11,171,13,"Number"],[175,17,171,19],[175,18,171,20,"isInteger"],[175,27,171,29],[175,28,171,30,"span"],[175,32,171,34],[175,33,171,35],[175,35,171,37],[176,8,172,12],[176,14,172,18],[176,18,172,22,"TypeError"],[176,27,172,31],[176,28,172,32],[176,53,172,57],[176,54,172,58],[177,6,173,8],[178,6,174,8],[179,0,175,0],[180,0,176,0],[181,0,177,0],[182,0,178,0],[183,0,179,0],[184,0,180,0],[185,0,181,0],[186,0,182,0],[187,6,183,8],[187,10,183,12],[187,11,183,13,"span"],[187,15,183,17],[187,18,183,20,"span"],[187,22,183,24],[188,6,184,8],[189,0,185,0],[190,0,186,0],[191,0,187,0],[192,0,188,0],[193,0,189,0],[194,0,190,0],[195,0,191,0],[196,6,192,8],[196,10,192,12],[196,11,192,13,"property"],[196,19,192,21],[196,22,192,24,"property"],[196,30,192,32],[197,4,193,4],[198,4,194,4],[199,0,195,0],[200,0,196,0],[201,0,197,0],[202,0,198,0],[203,0,199,0],[204,0,200,0],[205,0,201,0],[206,0,202,0],[207,0,203,0],[208,0,204,0],[209,0,205,0],[210,0,206,0],[211,0,207,0],[212,0,208,0],[213,4,209,4,"makeDestinationObject"],[213,25,209,25,"makeDestinationObject"],[213,26,209,25],[213,28,209,28],[214,6,210,8],[214,13,210,15],[214,14,210,16],[214,15,210,17],[215,4,211,4],[216,4,212,4],[217,0,213,0],[218,0,214,0],[219,0,215,0],[220,0,216,0],[221,0,217,0],[222,0,218,0],[223,0,219,0],[224,0,220,0],[225,0,221,0],[226,0,222,0],[227,0,223,0],[228,0,224,0],[229,0,225,0],[230,0,226,0],[231,0,227,0],[232,4,228,4,"getSpan"],[232,11,228,11,"getSpan"],[232,12,228,12,"b"],[232,13,228,13],[232,15,228,15,"offset"],[232,21,228,21],[232,23,228,23],[233,6,229,8],[233,10,229,12],[233,11,229,13],[233,14,229,16],[233,18,229,20],[233,19,229,21,"span"],[233,23,229,25],[233,25,229,27],[234,8,230,12],[234,14,230,18],[234,18,230,22,"RangeError"],[234,28,230,32],[234,29,230,33],[234,49,230,53],[234,50,230,54],[235,6,231,8],[236,6,232,8],[236,13,232,15],[236,17,232,19],[236,18,232,20,"span"],[236,22,232,24],[237,4,233,4],[238,4,234,4],[239,0,235,0],[240,0,236,0],[241,0,237,0],[242,0,238,0],[243,0,239,0],[244,0,240,0],[245,0,241,0],[246,0,242,0],[247,0,243,0],[248,0,244,0],[249,0,245,0],[250,0,246,0],[251,0,247,0],[252,0,248,0],[253,0,249,0],[254,4,250,4,"replicate"],[254,13,250,13,"replicate"],[254,14,250,14,"property"],[254,22,250,22],[254,24,250,24],[255,6,251,8],[255,12,251,14,"rv"],[255,14,251,16],[255,17,251,19,"Object"],[255,23,251,25],[255,24,251,26,"create"],[255,30,251,32],[255,31,251,33],[255,35,251,37],[255,36,251,38,"constructor"],[255,47,251,49],[255,48,251,50,"prototype"],[255,57,251,59],[255,58,251,60],[256,6,252,8,"Object"],[256,12,252,14],[256,13,252,15,"assign"],[256,19,252,21],[256,20,252,22,"rv"],[256,22,252,24],[256,24,252,26],[256,28,252,30],[256,29,252,31],[257,6,253,8,"rv"],[257,8,253,10],[257,9,253,11,"property"],[257,17,253,19],[257,20,253,22,"property"],[257,28,253,30],[258,6,254,8],[258,13,254,15,"rv"],[258,15,254,17],[259,4,255,4],[260,4,256,4],[261,0,257,0],[262,0,258,0],[263,0,259,0],[264,0,260,0],[265,0,261,0],[266,0,262,0],[267,0,263,0],[268,0,264,0],[269,0,265,0],[270,0,266,0],[271,0,267,0],[272,0,268,0],[273,0,269,0],[274,0,270,0],[275,0,271,0],[276,0,272,0],[277,0,273,0],[278,0,274,0],[279,0,275,0],[280,4,276,4,"fromArray"],[280,13,276,13,"fromArray"],[280,14,276,14,"values"],[280,20,276,20],[280,22,276,22],[281,6,277,8],[281,13,277,15,"undefined"],[281,22,277,24],[282,4,278,4],[283,2,279,0],[284,2,280,0,"exports"],[284,9,280,7],[284,10,280,8,"Layout"],[284,16,280,14],[284,19,280,17,"Layout"],[284,25,280,23],[285,2,281,0],[286,0,282,0],[287,0,283,0],[288,0,284,0],[289,0,285,0],[290,2,286,0],[290,11,286,9,"nameWithProperty"],[290,27,286,25,"nameWithProperty"],[290,28,286,26,"name"],[290,32,286,30],[290,34,286,32,"lo"],[290,36,286,34],[290,38,286,36],[291,4,287,4],[291,8,287,8,"lo"],[291,10,287,10],[291,11,287,11,"property"],[291,19,287,19],[291,21,287,21],[292,6,288,8],[292,13,288,15,"name"],[292,17,288,19],[292,20,288,22],[292,23,288,25],[292,26,288,28,"lo"],[292,28,288,30],[292,29,288,31,"property"],[292,37,288,39],[292,40,288,42],[292,43,288,45],[293,4,289,4],[294,4,290,4],[294,11,290,11,"name"],[294,15,290,15],[295,2,291,0],[296,2,292,0,"exports"],[296,9,292,7],[296,10,292,8,"nameWithProperty"],[296,26,292,24],[296,29,292,27,"nameWithProperty"],[296,45,292,43],[297,2,293,0],[298,0,294,0],[299,0,295,0],[300,0,296,0],[301,0,297,0],[302,0,298,0],[303,0,299,0],[304,0,300,0],[305,0,301,0],[306,0,302,0],[307,0,303,0],[308,0,304,0],[309,0,305,0],[310,0,306,0],[311,0,307,0],[312,0,308,0],[313,0,309,0],[314,0,310,0],[315,0,311,0],[316,0,312,0],[317,0,313,0],[318,0,314,0],[319,0,315,0],[320,0,316,0],[321,0,317,0],[322,0,318,0],[323,0,319,0],[324,2,320,0],[325,2,321,0],[326,2,322,0],[326,11,322,9,"bindConstructorLayout"],[326,32,322,30,"bindConstructorLayout"],[326,33,322,31,"Class"],[326,38,322,36],[326,40,322,38,"layout"],[326,46,322,44],[326,48,322,46],[327,4,323,4],[327,8,323,8],[327,18,323,18],[327,23,323,23],[327,30,323,30,"Class"],[327,35,323,35],[327,37,323,37],[328,6,324,8],[328,12,324,14],[328,16,324,18,"TypeError"],[328,25,324,27],[328,26,324,28],[328,53,324,55],[328,54,324,56],[329,4,325,4],[330,4,326,4],[330,8,326,8,"Object"],[330,14,326,14],[330,15,326,15,"prototype"],[330,24,326,24],[330,25,326,25,"hasOwnProperty"],[330,39,326,39],[330,40,326,40,"call"],[330,44,326,44],[330,45,326,45,"Class"],[330,50,326,50],[330,52,326,52],[330,61,326,61],[330,62,326,62],[330,64,326,64],[331,6,327,8],[331,12,327,14],[331,16,327,18,"Error"],[331,21,327,23],[331,22,327,24],[331,58,327,60],[331,59,327,61],[332,4,328,4],[333,4,329,4],[333,8,329,8],[333,10,329,10,"layout"],[333,16,329,16],[333,20,329,21,"layout"],[333,26,329,27],[333,38,329,39,"Layout"],[333,44,329,46],[333,45,329,47],[333,47,329,49],[334,6,330,8],[334,12,330,14],[334,16,330,18,"TypeError"],[334,25,330,27],[334,26,330,28],[334,51,330,53],[334,52,330,54],[335,4,331,4],[336,4,332,4],[336,8,332,8,"Object"],[336,14,332,14],[336,15,332,15,"prototype"],[336,24,332,24],[336,25,332,25,"hasOwnProperty"],[336,39,332,39],[336,40,332,40,"call"],[336,44,332,44],[336,45,332,45,"layout"],[336,51,332,51],[336,53,332,53],[336,72,332,72],[336,73,332,73],[336,75,332,75],[337,6,333,8],[337,12,333,14],[337,16,333,18,"Error"],[337,21,333,23],[337,22,333,24],[337,64,333,66],[337,65,333,67],[338,4,334,4],[339,4,335,4,"Class"],[339,9,335,9],[339,10,335,10,"layout_"],[339,17,335,17],[339,20,335,20,"layout"],[339,26,335,26],[340,4,336,4,"layout"],[340,10,336,10],[340,11,336,11,"boundConstructor_"],[340,28,336,28],[340,31,336,31,"Class"],[340,36,336,36],[341,4,337,4,"layout"],[341,10,337,10],[341,11,337,11,"makeDestinationObject"],[341,32,337,32],[341,35,337,36],[341,41,337,42],[341,45,337,46,"Class"],[341,50,337,51],[341,51,337,52],[341,52,337,54],[342,4,338,4,"Object"],[342,10,338,10],[342,11,338,11,"defineProperty"],[342,25,338,25],[342,26,338,26,"Class"],[342,31,338,31],[342,32,338,32,"prototype"],[342,41,338,41],[342,43,338,43],[342,51,338,51],[342,53,338,53],[343,6,339,8,"value"],[343,11,339,13,"value"],[343,12,339,14,"b"],[343,13,339,15],[343,15,339,17,"offset"],[343,21,339,23],[343,23,339,25],[344,8,340,12],[344,15,340,19,"layout"],[344,21,340,25],[344,22,340,26,"encode"],[344,28,340,32],[344,29,340,33],[344,33,340,37],[344,35,340,39,"b"],[344,36,340,40],[344,38,340,42,"offset"],[344,44,340,48],[344,45,340,49],[345,6,341,8],[345,7,341,9],[346,6,342,8,"writable"],[346,14,342,16],[346,16,342,18],[347,4,343,4],[347,5,343,5],[347,6,343,6],[348,4,344,4,"Object"],[348,10,344,10],[348,11,344,11,"defineProperty"],[348,25,344,25],[348,26,344,26,"Class"],[348,31,344,31],[348,33,344,33],[348,41,344,41],[348,43,344,43],[349,6,345,8,"value"],[349,11,345,13,"value"],[349,12,345,14,"b"],[349,13,345,15],[349,15,345,17,"offset"],[349,21,345,23],[349,23,345,25],[350,8,346,12],[350,15,346,19,"layout"],[350,21,346,25],[350,22,346,26,"decode"],[350,28,346,32],[350,29,346,33,"b"],[350,30,346,34],[350,32,346,36,"offset"],[350,38,346,42],[350,39,346,43],[351,6,347,8],[351,7,347,9],[352,6,348,8,"writable"],[352,14,348,16],[352,16,348,18],[353,4,349,4],[353,5,349,5],[353,6,349,6],[354,2,350,0],[355,2,351,0,"exports"],[355,9,351,7],[355,10,351,8,"bindConstructorLayout"],[355,31,351,29],[355,34,351,32,"bindConstructorLayout"],[355,55,351,53],[356,2,352,0],[357,0,353,0],[358,0,354,0],[359,0,355,0],[360,0,356,0],[361,0,357,0],[362,0,358,0],[363,0,359,0],[364,0,360,0],[365,0,361,0],[366,0,362,0],[367,0,363,0],[368,0,364,0],[369,0,365,0],[370,0,366,0],[371,0,367,0],[372,0,368,0],[373,0,369,0],[374,0,370,0],[375,0,371,0],[376,0,372,0],[377,2,373,0],[377,8,373,6,"ExternalLayout"],[377,22,373,20],[377,31,373,29,"Layout"],[377,37,373,35],[377,38,373,36],[378,4,374,4],[379,0,375,0],[380,0,376,0],[381,0,377,0],[382,0,378,0],[383,0,379,0],[384,0,380,0],[385,0,381,0],[386,0,382,0],[387,0,383,0],[388,0,384,0],[389,4,385,4,"isCount"],[389,11,385,11,"isCount"],[389,12,385,11],[389,14,385,14],[390,6,386,8],[390,12,386,14],[390,16,386,18,"Error"],[390,21,386,23],[390,22,386,24],[390,50,386,52],[390,51,386,53],[391,4,387,4],[392,2,388,0],[393,2,389,0,"exports"],[393,9,389,7],[393,10,389,8,"ExternalLayout"],[393,24,389,22],[393,27,389,25,"ExternalLayout"],[393,41,389,39],[394,2,390,0],[395,0,391,0],[396,0,392,0],[397,0,393,0],[398,0,394,0],[399,0,395,0],[400,0,396,0],[401,0,397,0],[402,0,398,0],[403,0,399,0],[404,0,400,0],[405,0,401,0],[406,0,402,0],[407,0,403,0],[408,0,404,0],[409,2,405,0],[409,8,405,6,"GreedyCount"],[409,19,405,17],[409,28,405,26,"ExternalLayout"],[409,42,405,40],[409,43,405,41],[410,4,406,4,"constructor"],[410,15,406,15,"constructor"],[410,16,406,16,"elementSpan"],[410,27,406,27],[410,30,406,30],[410,31,406,31],[410,33,406,33,"property"],[410,41,406,41],[410,43,406,43],[411,6,407,8],[411,10,407,13],[411,11,407,14,"Number"],[411,17,407,20],[411,18,407,21,"isInteger"],[411,27,407,30],[411,28,407,31,"elementSpan"],[411,39,407,42],[411,40,407,43],[411,44,407,49],[411,45,407,50],[411,49,407,54,"elementSpan"],[411,60,407,66],[411,62,407,68],[412,8,408,12],[412,14,408,18],[412,18,408,22,"TypeError"],[412,27,408,31],[412,28,408,32],[412,70,408,74],[412,71,408,75],[413,6,409,8],[414,6,410,8],[414,11,410,13],[414,12,410,14],[414,13,410,15],[414,14,410,16],[414,16,410,18,"property"],[414,24,410,26],[414,25,410,27],[415,6,411,8],[416,0,412,0],[417,0,413,0],[418,6,414,8],[418,10,414,12],[418,11,414,13,"elementSpan"],[418,22,414,24],[418,25,414,27,"elementSpan"],[418,36,414,38],[419,4,415,4],[420,4,416,4],[421,4,417,4,"isCount"],[421,11,417,11,"isCount"],[421,12,417,11],[421,14,417,14],[422,6,418,8],[422,13,418,15],[422,17,418,19],[423,4,419,4],[424,4,420,4],[425,4,421,4,"decode"],[425,10,421,10,"decode"],[425,11,421,11,"b"],[425,12,421,12],[425,14,421,14,"offset"],[425,20,421,20],[425,23,421,23],[425,24,421,24],[425,26,421,26],[426,6,422,8,"checkUint8Array"],[426,21,422,23],[426,22,422,24,"b"],[426,23,422,25],[426,24,422,26],[427,6,423,8],[427,12,423,14,"rem"],[427,15,423,17],[427,18,423,20,"b"],[427,19,423,21],[427,20,423,22,"length"],[427,26,423,28],[427,29,423,31,"offset"],[427,35,423,37],[428,6,424,8],[428,13,424,15,"Math"],[428,17,424,19],[428,18,424,20,"floor"],[428,23,424,25],[428,24,424,26,"rem"],[428,27,424,29],[428,30,424,32],[428,34,424,36],[428,35,424,37,"elementSpan"],[428,46,424,48],[428,47,424,49],[429,4,425,4],[430,4,426,4],[431,4,427,4,"encode"],[431,10,427,10,"encode"],[431,11,427,11,"src"],[431,14,427,14],[431,16,427,16,"b"],[431,17,427,17],[431,19,427,19,"offset"],[431,25,427,25],[431,27,427,27],[432,6,428,8],[432,13,428,15],[432,14,428,16],[433,4,429,4],[434,2,430,0],[435,2,431,0,"exports"],[435,9,431,7],[435,10,431,8,"GreedyCount"],[435,21,431,19],[435,24,431,22,"GreedyCount"],[435,35,431,33],[436,2,432,0],[437,0,433,0],[438,0,434,0],[439,0,435,0],[440,0,436,0],[441,0,437,0],[442,0,438,0],[443,0,439,0],[444,0,440,0],[445,0,441,0],[446,0,442,0],[447,0,443,0],[448,0,444,0],[449,0,445,0],[450,0,446,0],[451,0,447,0],[452,0,448,0],[453,0,449,0],[454,0,450,0],[455,0,451,0],[456,2,452,0],[456,8,452,6,"OffsetLayout"],[456,20,452,18],[456,29,452,27,"ExternalLayout"],[456,43,452,41],[456,44,452,42],[457,4,453,4,"constructor"],[457,15,453,15,"constructor"],[457,16,453,16,"layout"],[457,22,453,22],[457,24,453,24,"offset"],[457,30,453,30],[457,33,453,33],[457,34,453,34],[457,36,453,36,"property"],[457,44,453,44],[457,46,453,46],[458,6,454,8],[458,10,454,12],[458,12,454,14,"layout"],[458,18,454,20],[458,30,454,32,"Layout"],[458,36,454,38],[458,37,454,39],[458,39,454,41],[459,8,455,12],[459,14,455,18],[459,18,455,22,"TypeError"],[459,27,455,31],[459,28,455,32],[459,53,455,57],[459,54,455,58],[460,6,456,8],[461,6,457,8],[461,10,457,12],[461,11,457,13,"Number"],[461,17,457,19],[461,18,457,20,"isInteger"],[461,27,457,29],[461,28,457,30,"offset"],[461,34,457,36],[461,35,457,37],[461,37,457,39],[462,8,458,12],[462,14,458,18],[462,18,458,22,"TypeError"],[462,27,458,31],[462,28,458,32],[462,65,458,69],[462,66,458,70],[463,6,459,8],[464,6,460,8],[464,11,460,13],[464,12,460,14,"layout"],[464,18,460,20],[464,19,460,21,"span"],[464,23,460,25],[464,25,460,27,"property"],[464,33,460,35],[464,37,460,39,"layout"],[464,43,460,45],[464,44,460,46,"property"],[464,52,460,54],[464,53,460,55],[465,6,461,8],[466,6,462,8],[466,10,462,12],[466,11,462,13,"layout"],[466,17,462,19],[466,20,462,22,"layout"],[466,26,462,28],[467,6,463,8],[468,0,464,0],[469,0,465,0],[470,0,466,0],[471,0,467,0],[472,0,468,0],[473,6,469,8],[473,10,469,12],[473,11,469,13,"offset"],[473,17,469,19],[473,20,469,22,"offset"],[473,26,469,28],[474,4,470,4],[475,4,471,4],[476,4,472,4,"isCount"],[476,11,472,11,"isCount"],[476,12,472,11],[476,14,472,14],[477,6,473,8],[477,13,473,17],[477,17,473,21],[477,18,473,22,"layout"],[477,24,473,28],[477,36,473,40,"UInt"],[477,40,473,44],[477,44,474,16],[477,48,474,20],[477,49,474,21,"layout"],[477,55,474,27],[477,67,474,39,"UIntBE"],[477,73,474,46],[478,4,475,4],[479,4,476,4],[480,4,477,4,"decode"],[480,10,477,10,"decode"],[480,11,477,11,"b"],[480,12,477,12],[480,14,477,14,"offset"],[480,20,477,20],[480,23,477,23],[480,24,477,24],[480,26,477,26],[481,6,478,8],[481,13,478,15],[481,17,478,19],[481,18,478,20,"layout"],[481,24,478,26],[481,25,478,27,"decode"],[481,31,478,33],[481,32,478,34,"b"],[481,33,478,35],[481,35,478,37,"offset"],[481,41,478,43],[481,44,478,46],[481,48,478,50],[481,49,478,51,"offset"],[481,55,478,57],[481,56,478,58],[482,4,479,4],[483,4,480,4],[484,4,481,4,"encode"],[484,10,481,10,"encode"],[484,11,481,11,"src"],[484,14,481,14],[484,16,481,16,"b"],[484,17,481,17],[484,19,481,19,"offset"],[484,25,481,25],[484,28,481,28],[484,29,481,29],[484,31,481,31],[485,6,482,8],[485,13,482,15],[485,17,482,19],[485,18,482,20,"layout"],[485,24,482,26],[485,25,482,27,"encode"],[485,31,482,33],[485,32,482,34,"src"],[485,35,482,37],[485,37,482,39,"b"],[485,38,482,40],[485,40,482,42,"offset"],[485,46,482,48],[485,49,482,51],[485,53,482,55],[485,54,482,56,"offset"],[485,60,482,62],[485,61,482,63],[486,4,483,4],[487,2,484,0],[488,2,485,0,"exports"],[488,9,485,7],[488,10,485,8,"OffsetLayout"],[488,22,485,20],[488,25,485,23,"OffsetLayout"],[488,37,485,35],[489,2,486,0],[490,0,487,0],[491,0,488,0],[492,0,489,0],[493,0,490,0],[494,0,491,0],[495,0,492,0],[496,0,493,0],[497,0,494,0],[498,0,495,0],[499,0,496,0],[500,0,497,0],[501,0,498,0],[502,0,499,0],[503,0,500,0],[504,0,501,0],[505,2,502,0],[505,8,502,6,"UInt"],[505,12,502,10],[505,21,502,19,"Layout"],[505,27,502,25],[505,28,502,26],[506,4,503,4,"constructor"],[506,15,503,15,"constructor"],[506,16,503,16,"span"],[506,20,503,20],[506,22,503,22,"property"],[506,30,503,30],[506,32,503,32],[507,6,504,8],[507,11,504,13],[507,12,504,14,"span"],[507,16,504,18],[507,18,504,20,"property"],[507,26,504,28],[507,27,504,29],[508,6,505,8],[508,10,505,12],[508,11,505,13],[508,14,505,16],[508,18,505,20],[508,19,505,21,"span"],[508,23,505,25],[508,25,505,27],[509,8,506,12],[509,14,506,18],[509,18,506,22,"RangeError"],[509,28,506,32],[509,29,506,33],[509,59,506,63],[509,60,506,64],[510,6,507,8],[511,4,508,4],[512,4,509,4],[513,4,510,4,"decode"],[513,10,510,10,"decode"],[513,11,510,11,"b"],[513,12,510,12],[513,14,510,14,"offset"],[513,20,510,20],[513,23,510,23],[513,24,510,24],[513,26,510,26],[514,6,511,8],[514,13,511,15,"uint8ArrayToBuffer"],[514,31,511,33],[514,32,511,34,"b"],[514,33,511,35],[514,34,511,36],[514,35,511,37,"readUIntLE"],[514,45,511,47],[514,46,511,48,"offset"],[514,52,511,54],[514,54,511,56],[514,58,511,60],[514,59,511,61,"span"],[514,63,511,65],[514,64,511,66],[515,4,512,4],[516,4,513,4],[517,4,514,4,"encode"],[517,10,514,10,"encode"],[517,11,514,11,"src"],[517,14,514,14],[517,16,514,16,"b"],[517,17,514,17],[517,19,514,19,"offset"],[517,25,514,25],[517,28,514,28],[517,29,514,29],[517,31,514,31],[518,6,515,8,"uint8ArrayToBuffer"],[518,24,515,26],[518,25,515,27,"b"],[518,26,515,28],[518,27,515,29],[518,28,515,30,"writeUIntLE"],[518,39,515,41],[518,40,515,42,"src"],[518,43,515,45],[518,45,515,47,"offset"],[518,51,515,53],[518,53,515,55],[518,57,515,59],[518,58,515,60,"span"],[518,62,515,64],[518,63,515,65],[519,6,516,8],[519,13,516,15],[519,17,516,19],[519,18,516,20,"span"],[519,22,516,24],[520,4,517,4],[521,2,518,0],[522,2,519,0,"exports"],[522,9,519,7],[522,10,519,8,"UInt"],[522,14,519,12],[522,17,519,15,"UInt"],[522,21,519,19],[523,2,520,0],[524,0,521,0],[525,0,522,0],[526,0,523,0],[527,0,524,0],[528,0,525,0],[529,0,526,0],[530,0,527,0],[531,0,528,0],[532,0,529,0],[533,0,530,0],[534,0,531,0],[535,0,532,0],[536,0,533,0],[537,0,534,0],[538,0,535,0],[539,2,536,0],[539,8,536,6,"UIntBE"],[539,14,536,12],[539,23,536,21,"Layout"],[539,29,536,27],[539,30,536,28],[540,4,537,4,"constructor"],[540,15,537,15,"constructor"],[540,16,537,16,"span"],[540,20,537,20],[540,22,537,22,"property"],[540,30,537,30],[540,32,537,32],[541,6,538,8],[541,11,538,13],[541,12,538,14,"span"],[541,16,538,18],[541,18,538,20,"property"],[541,26,538,28],[541,27,538,29],[542,6,539,8],[542,10,539,12],[542,11,539,13],[542,14,539,16],[542,18,539,20],[542,19,539,21,"span"],[542,23,539,25],[542,25,539,27],[543,8,540,12],[543,14,540,18],[543,18,540,22,"RangeError"],[543,28,540,32],[543,29,540,33],[543,59,540,63],[543,60,540,64],[544,6,541,8],[545,4,542,4],[546,4,543,4],[547,4,544,4,"decode"],[547,10,544,10,"decode"],[547,11,544,11,"b"],[547,12,544,12],[547,14,544,14,"offset"],[547,20,544,20],[547,23,544,23],[547,24,544,24],[547,26,544,26],[548,6,545,8],[548,13,545,15,"uint8ArrayToBuffer"],[548,31,545,33],[548,32,545,34,"b"],[548,33,545,35],[548,34,545,36],[548,35,545,37,"readUIntBE"],[548,45,545,47],[548,46,545,48,"offset"],[548,52,545,54],[548,54,545,56],[548,58,545,60],[548,59,545,61,"span"],[548,63,545,65],[548,64,545,66],[549,4,546,4],[550,4,547,4],[551,4,548,4,"encode"],[551,10,548,10,"encode"],[551,11,548,11,"src"],[551,14,548,14],[551,16,548,16,"b"],[551,17,548,17],[551,19,548,19,"offset"],[551,25,548,25],[551,28,548,28],[551,29,548,29],[551,31,548,31],[552,6,549,8,"uint8ArrayToBuffer"],[552,24,549,26],[552,25,549,27,"b"],[552,26,549,28],[552,27,549,29],[552,28,549,30,"writeUIntBE"],[552,39,549,41],[552,40,549,42,"src"],[552,43,549,45],[552,45,549,47,"offset"],[552,51,549,53],[552,53,549,55],[552,57,549,59],[552,58,549,60,"span"],[552,62,549,64],[552,63,549,65],[553,6,550,8],[553,13,550,15],[553,17,550,19],[553,18,550,20,"span"],[553,22,550,24],[554,4,551,4],[555,2,552,0],[556,2,553,0,"exports"],[556,9,553,7],[556,10,553,8,"UIntBE"],[556,16,553,14],[556,19,553,17,"UIntBE"],[556,25,553,23],[557,2,554,0],[558,0,555,0],[559,0,556,0],[560,0,557,0],[561,0,558,0],[562,0,559,0],[563,0,560,0],[564,0,561,0],[565,0,562,0],[566,0,563,0],[567,0,564,0],[568,0,565,0],[569,0,566,0],[570,0,567,0],[571,0,568,0],[572,0,569,0],[573,2,570,0],[573,8,570,6,"Int"],[573,11,570,9],[573,20,570,18,"Layout"],[573,26,570,24],[573,27,570,25],[574,4,571,4,"constructor"],[574,15,571,15,"constructor"],[574,16,571,16,"span"],[574,20,571,20],[574,22,571,22,"property"],[574,30,571,30],[574,32,571,32],[575,6,572,8],[575,11,572,13],[575,12,572,14,"span"],[575,16,572,18],[575,18,572,20,"property"],[575,26,572,28],[575,27,572,29],[576,6,573,8],[576,10,573,12],[576,11,573,13],[576,14,573,16],[576,18,573,20],[576,19,573,21,"span"],[576,23,573,25],[576,25,573,27],[577,8,574,12],[577,14,574,18],[577,18,574,22,"RangeError"],[577,28,574,32],[577,29,574,33],[577,59,574,63],[577,60,574,64],[578,6,575,8],[579,4,576,4],[580,4,577,4],[581,4,578,4,"decode"],[581,10,578,10,"decode"],[581,11,578,11,"b"],[581,12,578,12],[581,14,578,14,"offset"],[581,20,578,20],[581,23,578,23],[581,24,578,24],[581,26,578,26],[582,6,579,8],[582,13,579,15,"uint8ArrayToBuffer"],[582,31,579,33],[582,32,579,34,"b"],[582,33,579,35],[582,34,579,36],[582,35,579,37,"readIntLE"],[582,44,579,46],[582,45,579,47,"offset"],[582,51,579,53],[582,53,579,55],[582,57,579,59],[582,58,579,60,"span"],[582,62,579,64],[582,63,579,65],[583,4,580,4],[584,4,581,4],[585,4,582,4,"encode"],[585,10,582,10,"encode"],[585,11,582,11,"src"],[585,14,582,14],[585,16,582,16,"b"],[585,17,582,17],[585,19,582,19,"offset"],[585,25,582,25],[585,28,582,28],[585,29,582,29],[585,31,582,31],[586,6,583,8,"uint8ArrayToBuffer"],[586,24,583,26],[586,25,583,27,"b"],[586,26,583,28],[586,27,583,29],[586,28,583,30,"writeIntLE"],[586,38,583,40],[586,39,583,41,"src"],[586,42,583,44],[586,44,583,46,"offset"],[586,50,583,52],[586,52,583,54],[586,56,583,58],[586,57,583,59,"span"],[586,61,583,63],[586,62,583,64],[587,6,584,8],[587,13,584,15],[587,17,584,19],[587,18,584,20,"span"],[587,22,584,24],[588,4,585,4],[589,2,586,0],[590,2,587,0,"exports"],[590,9,587,7],[590,10,587,8,"Int"],[590,13,587,11],[590,16,587,14,"Int"],[590,19,587,17],[591,2,588,0],[592,0,589,0],[593,0,590,0],[594,0,591,0],[595,0,592,0],[596,0,593,0],[597,0,594,0],[598,0,595,0],[599,0,596,0],[600,0,597,0],[601,0,598,0],[602,0,599,0],[603,0,600,0],[604,0,601,0],[605,0,602,0],[606,0,603,0],[607,2,604,0],[607,8,604,6,"IntBE"],[607,13,604,11],[607,22,604,20,"Layout"],[607,28,604,26],[607,29,604,27],[608,4,605,4,"constructor"],[608,15,605,15,"constructor"],[608,16,605,16,"span"],[608,20,605,20],[608,22,605,22,"property"],[608,30,605,30],[608,32,605,32],[609,6,606,8],[609,11,606,13],[609,12,606,14,"span"],[609,16,606,18],[609,18,606,20,"property"],[609,26,606,28],[609,27,606,29],[610,6,607,8],[610,10,607,12],[610,11,607,13],[610,14,607,16],[610,18,607,20],[610,19,607,21,"span"],[610,23,607,25],[610,25,607,27],[611,8,608,12],[611,14,608,18],[611,18,608,22,"RangeError"],[611,28,608,32],[611,29,608,33],[611,59,608,63],[611,60,608,64],[612,6,609,8],[613,4,610,4],[614,4,611,4],[615,4,612,4,"decode"],[615,10,612,10,"decode"],[615,11,612,11,"b"],[615,12,612,12],[615,14,612,14,"offset"],[615,20,612,20],[615,23,612,23],[615,24,612,24],[615,26,612,26],[616,6,613,8],[616,13,613,15,"uint8ArrayToBuffer"],[616,31,613,33],[616,32,613,34,"b"],[616,33,613,35],[616,34,613,36],[616,35,613,37,"readIntBE"],[616,44,613,46],[616,45,613,47,"offset"],[616,51,613,53],[616,53,613,55],[616,57,613,59],[616,58,613,60,"span"],[616,62,613,64],[616,63,613,65],[617,4,614,4],[618,4,615,4],[619,4,616,4,"encode"],[619,10,616,10,"encode"],[619,11,616,11,"src"],[619,14,616,14],[619,16,616,16,"b"],[619,17,616,17],[619,19,616,19,"offset"],[619,25,616,25],[619,28,616,28],[619,29,616,29],[619,31,616,31],[620,6,617,8,"uint8ArrayToBuffer"],[620,24,617,26],[620,25,617,27,"b"],[620,26,617,28],[620,27,617,29],[620,28,617,30,"writeIntBE"],[620,38,617,40],[620,39,617,41,"src"],[620,42,617,44],[620,44,617,46,"offset"],[620,50,617,52],[620,52,617,54],[620,56,617,58],[620,57,617,59,"span"],[620,61,617,63],[620,62,617,64],[621,6,618,8],[621,13,618,15],[621,17,618,19],[621,18,618,20,"span"],[621,22,618,24],[622,4,619,4],[623,2,620,0],[624,2,621,0,"exports"],[624,9,621,7],[624,10,621,8,"IntBE"],[624,15,621,13],[624,18,621,16,"IntBE"],[624,23,621,21],[625,2,622,0],[625,8,622,6,"V2E32"],[625,13,622,11],[625,16,622,14,"Math"],[625,20,622,18],[625,21,622,19,"pow"],[625,24,622,22],[625,25,622,23],[625,26,622,24],[625,28,622,26],[625,30,622,28],[625,31,622,29],[626,2,623,0],[627,0,624,0],[628,2,625,0],[628,11,625,9,"divmodInt64"],[628,22,625,20,"divmodInt64"],[628,23,625,21,"src"],[628,26,625,24],[628,28,625,26],[629,4,626,4],[629,10,626,10,"hi32"],[629,14,626,14],[629,17,626,17,"Math"],[629,21,626,21],[629,22,626,22,"floor"],[629,27,626,27],[629,28,626,28,"src"],[629,31,626,31],[629,34,626,34,"V2E32"],[629,39,626,39],[629,40,626,40],[630,4,627,4],[630,10,627,10,"lo32"],[630,14,627,14],[630,17,627,17,"src"],[630,20,627,20],[630,23,627,24,"hi32"],[630,27,627,28],[630,30,627,31,"V2E32"],[630,35,627,37],[631,4,628,4],[631,11,628,11],[632,6,628,13,"hi32"],[632,10,628,17],[633,6,628,19,"lo32"],[634,4,628,24],[634,5,628,25],[635,2,629,0],[636,2,630,0],[637,2,631,0],[637,11,631,9,"roundedInt64"],[637,23,631,21,"roundedInt64"],[637,24,631,22,"hi32"],[637,28,631,26],[637,30,631,28,"lo32"],[637,34,631,32],[637,36,631,34],[638,4,632,4],[638,11,632,11,"hi32"],[638,15,632,15],[638,18,632,18,"V2E32"],[638,23,632,23],[638,26,632,26,"lo32"],[638,30,632,30],[639,2,633,0],[640,2,634,0],[641,0,635,0],[642,0,636,0],[643,0,637,0],[644,0,638,0],[645,0,639,0],[646,0,640,0],[647,0,641,0],[648,0,642,0],[649,0,643,0],[650,0,644,0],[651,2,645,0],[651,8,645,6,"NearUInt64"],[651,18,645,16],[651,27,645,25,"Layout"],[651,33,645,31],[651,34,645,32],[652,4,646,4,"constructor"],[652,15,646,15,"constructor"],[652,16,646,16,"property"],[652,24,646,24],[652,26,646,26],[653,6,647,8],[653,11,647,13],[653,12,647,14],[653,13,647,15],[653,15,647,17,"property"],[653,23,647,25],[653,24,647,26],[654,4,648,4],[655,4,649,4],[656,4,650,4,"decode"],[656,10,650,10,"decode"],[656,11,650,11,"b"],[656,12,650,12],[656,14,650,14,"offset"],[656,20,650,20],[656,23,650,23],[656,24,650,24],[656,26,650,26],[657,6,651,8],[657,12,651,14,"buffer"],[657,18,651,20],[657,21,651,23,"uint8ArrayToBuffer"],[657,39,651,41],[657,40,651,42,"b"],[657,41,651,43],[657,42,651,44],[658,6,652,8],[658,12,652,14,"lo32"],[658,16,652,18],[658,19,652,21,"buffer"],[658,25,652,27],[658,26,652,28,"readUInt32LE"],[658,38,652,40],[658,39,652,41,"offset"],[658,45,652,47],[658,46,652,48],[659,6,653,8],[659,12,653,14,"hi32"],[659,16,653,18],[659,19,653,21,"buffer"],[659,25,653,27],[659,26,653,28,"readUInt32LE"],[659,38,653,40],[659,39,653,41,"offset"],[659,45,653,47],[659,48,653,50],[659,49,653,51],[659,50,653,52],[660,6,654,8],[660,13,654,15,"roundedInt64"],[660,25,654,27],[660,26,654,28,"hi32"],[660,30,654,32],[660,32,654,34,"lo32"],[660,36,654,38],[660,37,654,39],[661,4,655,4],[662,4,656,4],[663,4,657,4,"encode"],[663,10,657,10,"encode"],[663,11,657,11,"src"],[663,14,657,14],[663,16,657,16,"b"],[663,17,657,17],[663,19,657,19,"offset"],[663,25,657,25],[663,28,657,28],[663,29,657,29],[663,31,657,31],[664,6,658,8],[664,12,658,14,"split"],[664,17,658,19],[664,20,658,22,"divmodInt64"],[664,31,658,33],[664,32,658,34,"src"],[664,35,658,37],[664,36,658,38],[665,6,659,8],[665,12,659,14,"buffer"],[665,18,659,20],[665,21,659,23,"uint8ArrayToBuffer"],[665,39,659,41],[665,40,659,42,"b"],[665,41,659,43],[665,42,659,44],[666,6,660,8,"buffer"],[666,12,660,14],[666,13,660,15,"writeUInt32LE"],[666,26,660,28],[666,27,660,29,"split"],[666,32,660,34],[666,33,660,35,"lo32"],[666,37,660,39],[666,39,660,41,"offset"],[666,45,660,47],[666,46,660,48],[667,6,661,8,"buffer"],[667,12,661,14],[667,13,661,15,"writeUInt32LE"],[667,26,661,28],[667,27,661,29,"split"],[667,32,661,34],[667,33,661,35,"hi32"],[667,37,661,39],[667,39,661,41,"offset"],[667,45,661,47],[667,48,661,50],[667,49,661,51],[667,50,661,52],[668,6,662,8],[668,13,662,15],[668,14,662,16],[669,4,663,4],[670,2,664,0],[671,2,665,0,"exports"],[671,9,665,7],[671,10,665,8,"NearUInt64"],[671,20,665,18],[671,23,665,21,"NearUInt64"],[671,33,665,31],[672,2,666,0],[673,0,667,0],[674,0,668,0],[675,0,669,0],[676,0,670,0],[677,0,671,0],[678,0,672,0],[679,0,673,0],[680,0,674,0],[681,0,675,0],[682,0,676,0],[683,2,677,0],[683,8,677,6,"NearUInt64BE"],[683,20,677,18],[683,29,677,27,"Layout"],[683,35,677,33],[683,36,677,34],[684,4,678,4,"constructor"],[684,15,678,15,"constructor"],[684,16,678,16,"property"],[684,24,678,24],[684,26,678,26],[685,6,679,8],[685,11,679,13],[685,12,679,14],[685,13,679,15],[685,15,679,17,"property"],[685,23,679,25],[685,24,679,26],[686,4,680,4],[687,4,681,4],[688,4,682,4,"decode"],[688,10,682,10,"decode"],[688,11,682,11,"b"],[688,12,682,12],[688,14,682,14,"offset"],[688,20,682,20],[688,23,682,23],[688,24,682,24],[688,26,682,26],[689,6,683,8],[689,12,683,14,"buffer"],[689,18,683,20],[689,21,683,23,"uint8ArrayToBuffer"],[689,39,683,41],[689,40,683,42,"b"],[689,41,683,43],[689,42,683,44],[690,6,684,8],[690,12,684,14,"hi32"],[690,16,684,18],[690,19,684,21,"buffer"],[690,25,684,27],[690,26,684,28,"readUInt32BE"],[690,38,684,40],[690,39,684,41,"offset"],[690,45,684,47],[690,46,684,48],[691,6,685,8],[691,12,685,14,"lo32"],[691,16,685,18],[691,19,685,21,"buffer"],[691,25,685,27],[691,26,685,28,"readUInt32BE"],[691,38,685,40],[691,39,685,41,"offset"],[691,45,685,47],[691,48,685,50],[691,49,685,51],[691,50,685,52],[692,6,686,8],[692,13,686,15,"roundedInt64"],[692,25,686,27],[692,26,686,28,"hi32"],[692,30,686,32],[692,32,686,34,"lo32"],[692,36,686,38],[692,37,686,39],[693,4,687,4],[694,4,688,4],[695,4,689,4,"encode"],[695,10,689,10,"encode"],[695,11,689,11,"src"],[695,14,689,14],[695,16,689,16,"b"],[695,17,689,17],[695,19,689,19,"offset"],[695,25,689,25],[695,28,689,28],[695,29,689,29],[695,31,689,31],[696,6,690,8],[696,12,690,14,"split"],[696,17,690,19],[696,20,690,22,"divmodInt64"],[696,31,690,33],[696,32,690,34,"src"],[696,35,690,37],[696,36,690,38],[697,6,691,8],[697,12,691,14,"buffer"],[697,18,691,20],[697,21,691,23,"uint8ArrayToBuffer"],[697,39,691,41],[697,40,691,42,"b"],[697,41,691,43],[697,42,691,44],[698,6,692,8,"buffer"],[698,12,692,14],[698,13,692,15,"writeUInt32BE"],[698,26,692,28],[698,27,692,29,"split"],[698,32,692,34],[698,33,692,35,"hi32"],[698,37,692,39],[698,39,692,41,"offset"],[698,45,692,47],[698,46,692,48],[699,6,693,8,"buffer"],[699,12,693,14],[699,13,693,15,"writeUInt32BE"],[699,26,693,28],[699,27,693,29,"split"],[699,32,693,34],[699,33,693,35,"lo32"],[699,37,693,39],[699,39,693,41,"offset"],[699,45,693,47],[699,48,693,50],[699,49,693,51],[699,50,693,52],[700,6,694,8],[700,13,694,15],[700,14,694,16],[701,4,695,4],[702,2,696,0],[703,2,697,0,"exports"],[703,9,697,7],[703,10,697,8,"NearUInt64BE"],[703,22,697,20],[703,25,697,23,"NearUInt64BE"],[703,37,697,35],[704,2,698,0],[705,0,699,0],[706,0,700,0],[707,0,701,0],[708,0,702,0],[709,0,703,0],[710,0,704,0],[711,0,705,0],[712,0,706,0],[713,0,707,0],[714,0,708,0],[715,2,709,0],[715,8,709,6,"NearInt64"],[715,17,709,15],[715,26,709,24,"Layout"],[715,32,709,30],[715,33,709,31],[716,4,710,4,"constructor"],[716,15,710,15,"constructor"],[716,16,710,16,"property"],[716,24,710,24],[716,26,710,26],[717,6,711,8],[717,11,711,13],[717,12,711,14],[717,13,711,15],[717,15,711,17,"property"],[717,23,711,25],[717,24,711,26],[718,4,712,4],[719,4,713,4],[720,4,714,4,"decode"],[720,10,714,10,"decode"],[720,11,714,11,"b"],[720,12,714,12],[720,14,714,14,"offset"],[720,20,714,20],[720,23,714,23],[720,24,714,24],[720,26,714,26],[721,6,715,8],[721,12,715,14,"buffer"],[721,18,715,20],[721,21,715,23,"uint8ArrayToBuffer"],[721,39,715,41],[721,40,715,42,"b"],[721,41,715,43],[721,42,715,44],[722,6,716,8],[722,12,716,14,"lo32"],[722,16,716,18],[722,19,716,21,"buffer"],[722,25,716,27],[722,26,716,28,"readUInt32LE"],[722,38,716,40],[722,39,716,41,"offset"],[722,45,716,47],[722,46,716,48],[723,6,717,8],[723,12,717,14,"hi32"],[723,16,717,18],[723,19,717,21,"buffer"],[723,25,717,27],[723,26,717,28,"readInt32LE"],[723,37,717,39],[723,38,717,40,"offset"],[723,44,717,46],[723,47,717,49],[723,48,717,50],[723,49,717,51],[724,6,718,8],[724,13,718,15,"roundedInt64"],[724,25,718,27],[724,26,718,28,"hi32"],[724,30,718,32],[724,32,718,34,"lo32"],[724,36,718,38],[724,37,718,39],[725,4,719,4],[726,4,720,4],[727,4,721,4,"encode"],[727,10,721,10,"encode"],[727,11,721,11,"src"],[727,14,721,14],[727,16,721,16,"b"],[727,17,721,17],[727,19,721,19,"offset"],[727,25,721,25],[727,28,721,28],[727,29,721,29],[727,31,721,31],[728,6,722,8],[728,12,722,14,"split"],[728,17,722,19],[728,20,722,22,"divmodInt64"],[728,31,722,33],[728,32,722,34,"src"],[728,35,722,37],[728,36,722,38],[729,6,723,8],[729,12,723,14,"buffer"],[729,18,723,20],[729,21,723,23,"uint8ArrayToBuffer"],[729,39,723,41],[729,40,723,42,"b"],[729,41,723,43],[729,42,723,44],[730,6,724,8,"buffer"],[730,12,724,14],[730,13,724,15,"writeUInt32LE"],[730,26,724,28],[730,27,724,29,"split"],[730,32,724,34],[730,33,724,35,"lo32"],[730,37,724,39],[730,39,724,41,"offset"],[730,45,724,47],[730,46,724,48],[731,6,725,8,"buffer"],[731,12,725,14],[731,13,725,15,"writeInt32LE"],[731,25,725,27],[731,26,725,28,"split"],[731,31,725,33],[731,32,725,34,"hi32"],[731,36,725,38],[731,38,725,40,"offset"],[731,44,725,46],[731,47,725,49],[731,48,725,50],[731,49,725,51],[732,6,726,8],[732,13,726,15],[732,14,726,16],[733,4,727,4],[734,2,728,0],[735,2,729,0,"exports"],[735,9,729,7],[735,10,729,8,"NearInt64"],[735,19,729,17],[735,22,729,20,"NearInt64"],[735,31,729,29],[736,2,730,0],[737,0,731,0],[738,0,732,0],[739,0,733,0],[740,0,734,0],[741,0,735,0],[742,0,736,0],[743,0,737,0],[744,0,738,0],[745,0,739,0],[746,0,740,0],[747,2,741,0],[747,8,741,6,"NearInt64BE"],[747,19,741,17],[747,28,741,26,"Layout"],[747,34,741,32],[747,35,741,33],[748,4,742,4,"constructor"],[748,15,742,15,"constructor"],[748,16,742,16,"property"],[748,24,742,24],[748,26,742,26],[749,6,743,8],[749,11,743,13],[749,12,743,14],[749,13,743,15],[749,15,743,17,"property"],[749,23,743,25],[749,24,743,26],[750,4,744,4],[751,4,745,4],[752,4,746,4,"decode"],[752,10,746,10,"decode"],[752,11,746,11,"b"],[752,12,746,12],[752,14,746,14,"offset"],[752,20,746,20],[752,23,746,23],[752,24,746,24],[752,26,746,26],[753,6,747,8],[753,12,747,14,"buffer"],[753,18,747,20],[753,21,747,23,"uint8ArrayToBuffer"],[753,39,747,41],[753,40,747,42,"b"],[753,41,747,43],[753,42,747,44],[754,6,748,8],[754,12,748,14,"hi32"],[754,16,748,18],[754,19,748,21,"buffer"],[754,25,748,27],[754,26,748,28,"readInt32BE"],[754,37,748,39],[754,38,748,40,"offset"],[754,44,748,46],[754,45,748,47],[755,6,749,8],[755,12,749,14,"lo32"],[755,16,749,18],[755,19,749,21,"buffer"],[755,25,749,27],[755,26,749,28,"readUInt32BE"],[755,38,749,40],[755,39,749,41,"offset"],[755,45,749,47],[755,48,749,50],[755,49,749,51],[755,50,749,52],[756,6,750,8],[756,13,750,15,"roundedInt64"],[756,25,750,27],[756,26,750,28,"hi32"],[756,30,750,32],[756,32,750,34,"lo32"],[756,36,750,38],[756,37,750,39],[757,4,751,4],[758,4,752,4],[759,4,753,4,"encode"],[759,10,753,10,"encode"],[759,11,753,11,"src"],[759,14,753,14],[759,16,753,16,"b"],[759,17,753,17],[759,19,753,19,"offset"],[759,25,753,25],[759,28,753,28],[759,29,753,29],[759,31,753,31],[760,6,754,8],[760,12,754,14,"split"],[760,17,754,19],[760,20,754,22,"divmodInt64"],[760,31,754,33],[760,32,754,34,"src"],[760,35,754,37],[760,36,754,38],[761,6,755,8],[761,12,755,14,"buffer"],[761,18,755,20],[761,21,755,23,"uint8ArrayToBuffer"],[761,39,755,41],[761,40,755,42,"b"],[761,41,755,43],[761,42,755,44],[762,6,756,8,"buffer"],[762,12,756,14],[762,13,756,15,"writeInt32BE"],[762,25,756,27],[762,26,756,28,"split"],[762,31,756,33],[762,32,756,34,"hi32"],[762,36,756,38],[762,38,756,40,"offset"],[762,44,756,46],[762,45,756,47],[763,6,757,8,"buffer"],[763,12,757,14],[763,13,757,15,"writeUInt32BE"],[763,26,757,28],[763,27,757,29,"split"],[763,32,757,34],[763,33,757,35,"lo32"],[763,37,757,39],[763,39,757,41,"offset"],[763,45,757,47],[763,48,757,50],[763,49,757,51],[763,50,757,52],[764,6,758,8],[764,13,758,15],[764,14,758,16],[765,4,759,4],[766,2,760,0],[767,2,761,0,"exports"],[767,9,761,7],[767,10,761,8,"NearInt64BE"],[767,21,761,19],[767,24,761,22,"NearInt64BE"],[767,35,761,33],[768,2,762,0],[769,0,763,0],[770,0,764,0],[771,0,765,0],[772,0,766,0],[773,0,767,0],[774,0,768,0],[775,0,769,0],[776,0,770,0],[777,0,771,0],[778,2,772,0],[778,8,772,6,"Float"],[778,13,772,11],[778,22,772,20,"Layout"],[778,28,772,26],[778,29,772,27],[779,4,773,4,"constructor"],[779,15,773,15,"constructor"],[779,16,773,16,"property"],[779,24,773,24],[779,26,773,26],[780,6,774,8],[780,11,774,13],[780,12,774,14],[780,13,774,15],[780,15,774,17,"property"],[780,23,774,25],[780,24,774,26],[781,4,775,4],[782,4,776,4],[783,4,777,4,"decode"],[783,10,777,10,"decode"],[783,11,777,11,"b"],[783,12,777,12],[783,14,777,14,"offset"],[783,20,777,20],[783,23,777,23],[783,24,777,24],[783,26,777,26],[784,6,778,8],[784,13,778,15,"uint8ArrayToBuffer"],[784,31,778,33],[784,32,778,34,"b"],[784,33,778,35],[784,34,778,36],[784,35,778,37,"readFloatLE"],[784,46,778,48],[784,47,778,49,"offset"],[784,53,778,55],[784,54,778,56],[785,4,779,4],[786,4,780,4],[787,4,781,4,"encode"],[787,10,781,10,"encode"],[787,11,781,11,"src"],[787,14,781,14],[787,16,781,16,"b"],[787,17,781,17],[787,19,781,19,"offset"],[787,25,781,25],[787,28,781,28],[787,29,781,29],[787,31,781,31],[788,6,782,8,"uint8ArrayToBuffer"],[788,24,782,26],[788,25,782,27,"b"],[788,26,782,28],[788,27,782,29],[788,28,782,30,"writeFloatLE"],[788,40,782,42],[788,41,782,43,"src"],[788,44,782,46],[788,46,782,48,"offset"],[788,52,782,54],[788,53,782,55],[789,6,783,8],[789,13,783,15],[789,14,783,16],[790,4,784,4],[791,2,785,0],[792,2,786,0,"exports"],[792,9,786,7],[792,10,786,8,"Float"],[792,15,786,13],[792,18,786,16,"Float"],[792,23,786,21],[793,2,787,0],[794,0,788,0],[795,0,789,0],[796,0,790,0],[797,0,791,0],[798,0,792,0],[799,0,793,0],[800,0,794,0],[801,0,795,0],[802,0,796,0],[803,2,797,0],[803,8,797,6,"FloatBE"],[803,15,797,13],[803,24,797,22,"Layout"],[803,30,797,28],[803,31,797,29],[804,4,798,4,"constructor"],[804,15,798,15,"constructor"],[804,16,798,16,"property"],[804,24,798,24],[804,26,798,26],[805,6,799,8],[805,11,799,13],[805,12,799,14],[805,13,799,15],[805,15,799,17,"property"],[805,23,799,25],[805,24,799,26],[806,4,800,4],[807,4,801,4],[808,4,802,4,"decode"],[808,10,802,10,"decode"],[808,11,802,11,"b"],[808,12,802,12],[808,14,802,14,"offset"],[808,20,802,20],[808,23,802,23],[808,24,802,24],[808,26,802,26],[809,6,803,8],[809,13,803,15,"uint8ArrayToBuffer"],[809,31,803,33],[809,32,803,34,"b"],[809,33,803,35],[809,34,803,36],[809,35,803,37,"readFloatBE"],[809,46,803,48],[809,47,803,49,"offset"],[809,53,803,55],[809,54,803,56],[810,4,804,4],[811,4,805,4],[812,4,806,4,"encode"],[812,10,806,10,"encode"],[812,11,806,11,"src"],[812,14,806,14],[812,16,806,16,"b"],[812,17,806,17],[812,19,806,19,"offset"],[812,25,806,25],[812,28,806,28],[812,29,806,29],[812,31,806,31],[813,6,807,8,"uint8ArrayToBuffer"],[813,24,807,26],[813,25,807,27,"b"],[813,26,807,28],[813,27,807,29],[813,28,807,30,"writeFloatBE"],[813,40,807,42],[813,41,807,43,"src"],[813,44,807,46],[813,46,807,48,"offset"],[813,52,807,54],[813,53,807,55],[814,6,808,8],[814,13,808,15],[814,14,808,16],[815,4,809,4],[816,2,810,0],[817,2,811,0,"exports"],[817,9,811,7],[817,10,811,8,"FloatBE"],[817,17,811,15],[817,20,811,18,"FloatBE"],[817,27,811,25],[818,2,812,0],[819,0,813,0],[820,0,814,0],[821,0,815,0],[822,0,816,0],[823,0,817,0],[824,0,818,0],[825,0,819,0],[826,0,820,0],[827,0,821,0],[828,2,822,0],[828,8,822,6,"Double"],[828,14,822,12],[828,23,822,21,"Layout"],[828,29,822,27],[828,30,822,28],[829,4,823,4,"constructor"],[829,15,823,15,"constructor"],[829,16,823,16,"property"],[829,24,823,24],[829,26,823,26],[830,6,824,8],[830,11,824,13],[830,12,824,14],[830,13,824,15],[830,15,824,17,"property"],[830,23,824,25],[830,24,824,26],[831,4,825,4],[832,4,826,4],[833,4,827,4,"decode"],[833,10,827,10,"decode"],[833,11,827,11,"b"],[833,12,827,12],[833,14,827,14,"offset"],[833,20,827,20],[833,23,827,23],[833,24,827,24],[833,26,827,26],[834,6,828,8],[834,13,828,15,"uint8ArrayToBuffer"],[834,31,828,33],[834,32,828,34,"b"],[834,33,828,35],[834,34,828,36],[834,35,828,37,"readDoubleLE"],[834,47,828,49],[834,48,828,50,"offset"],[834,54,828,56],[834,55,828,57],[835,4,829,4],[836,4,830,4],[837,4,831,4,"encode"],[837,10,831,10,"encode"],[837,11,831,11,"src"],[837,14,831,14],[837,16,831,16,"b"],[837,17,831,17],[837,19,831,19,"offset"],[837,25,831,25],[837,28,831,28],[837,29,831,29],[837,31,831,31],[838,6,832,8,"uint8ArrayToBuffer"],[838,24,832,26],[838,25,832,27,"b"],[838,26,832,28],[838,27,832,29],[838,28,832,30,"writeDoubleLE"],[838,41,832,43],[838,42,832,44,"src"],[838,45,832,47],[838,47,832,49,"offset"],[838,53,832,55],[838,54,832,56],[839,6,833,8],[839,13,833,15],[839,14,833,16],[840,4,834,4],[841,2,835,0],[842,2,836,0,"exports"],[842,9,836,7],[842,10,836,8,"Double"],[842,16,836,14],[842,19,836,17,"Double"],[842,25,836,23],[843,2,837,0],[844,0,838,0],[845,0,839,0],[846,0,840,0],[847,0,841,0],[848,0,842,0],[849,0,843,0],[850,0,844,0],[851,0,845,0],[852,0,846,0],[853,2,847,0],[853,8,847,6,"DoubleBE"],[853,16,847,14],[853,25,847,23,"Layout"],[853,31,847,29],[853,32,847,30],[854,4,848,4,"constructor"],[854,15,848,15,"constructor"],[854,16,848,16,"property"],[854,24,848,24],[854,26,848,26],[855,6,849,8],[855,11,849,13],[855,12,849,14],[855,13,849,15],[855,15,849,17,"property"],[855,23,849,25],[855,24,849,26],[856,4,850,4],[857,4,851,4],[858,4,852,4,"decode"],[858,10,852,10,"decode"],[858,11,852,11,"b"],[858,12,852,12],[858,14,852,14,"offset"],[858,20,852,20],[858,23,852,23],[858,24,852,24],[858,26,852,26],[859,6,853,8],[859,13,853,15,"uint8ArrayToBuffer"],[859,31,853,33],[859,32,853,34,"b"],[859,33,853,35],[859,34,853,36],[859,35,853,37,"readDoubleBE"],[859,47,853,49],[859,48,853,50,"offset"],[859,54,853,56],[859,55,853,57],[860,4,854,4],[861,4,855,4],[862,4,856,4,"encode"],[862,10,856,10,"encode"],[862,11,856,11,"src"],[862,14,856,14],[862,16,856,16,"b"],[862,17,856,17],[862,19,856,19,"offset"],[862,25,856,25],[862,28,856,28],[862,29,856,29],[862,31,856,31],[863,6,857,8,"uint8ArrayToBuffer"],[863,24,857,26],[863,25,857,27,"b"],[863,26,857,28],[863,27,857,29],[863,28,857,30,"writeDoubleBE"],[863,41,857,43],[863,42,857,44,"src"],[863,45,857,47],[863,47,857,49,"offset"],[863,53,857,55],[863,54,857,56],[864,6,858,8],[864,13,858,15],[864,14,858,16],[865,4,859,4],[866,2,860,0],[867,2,861,0,"exports"],[867,9,861,7],[867,10,861,8,"DoubleBE"],[867,18,861,16],[867,21,861,19,"DoubleBE"],[867,29,861,27],[868,2,862,0],[869,0,863,0],[870,0,864,0],[871,0,865,0],[872,0,866,0],[873,0,867,0],[874,0,868,0],[875,0,869,0],[876,0,870,0],[877,0,871,0],[878,0,872,0],[879,0,873,0],[880,0,874,0],[881,0,875,0],[882,0,876,0],[883,0,877,0],[884,0,878,0],[885,2,879,0],[885,8,879,6,"Sequence"],[885,16,879,14],[885,25,879,23,"Layout"],[885,31,879,29],[885,32,879,30],[886,4,880,4,"constructor"],[886,15,880,15,"constructor"],[886,16,880,16,"elementLayout"],[886,29,880,29],[886,31,880,31,"count"],[886,36,880,36],[886,38,880,38,"property"],[886,46,880,46],[886,48,880,48],[887,6,881,8],[887,10,881,12],[887,12,881,14,"elementLayout"],[887,25,881,27],[887,37,881,39,"Layout"],[887,43,881,45],[887,44,881,46],[887,46,881,48],[888,8,882,12],[888,14,882,18],[888,18,882,22,"TypeError"],[888,27,882,31],[888,28,882,32],[888,60,882,64],[888,61,882,65],[889,6,883,8],[890,6,884,8],[890,10,884,12],[890,12,884,16,"count"],[890,17,884,21],[890,29,884,33,"ExternalLayout"],[890,43,884,47],[890,47,884,52,"count"],[890,52,884,57],[890,53,884,58,"isCount"],[890,60,884,65],[890,61,884,66],[890,62,884,67],[890,66,885,16,"Number"],[890,72,885,22],[890,73,885,23,"isInteger"],[890,82,885,32],[890,83,885,33,"count"],[890,88,885,38],[890,89,885,39],[890,93,885,44],[890,94,885,45],[890,98,885,49,"count"],[890,103,885,56],[890,104,885,57],[890,106,885,59],[891,8,886,12],[891,14,886,18],[891,18,886,22,"TypeError"],[891,27,886,31],[891,28,886,32],[891,65,886,69],[891,68,887,18],[891,107,887,57],[891,108,887,58],[892,6,888,8],[893,6,889,8],[893,10,889,12,"span"],[893,14,889,16],[893,17,889,19],[893,18,889,20],[893,19,889,21],[894,6,890,8],[894,10,890,13],[894,12,890,15,"count"],[894,17,890,20],[894,29,890,32,"ExternalLayout"],[894,43,890,46],[894,44,890,47],[894,48,891,16],[894,49,891,17],[894,52,891,20,"elementLayout"],[894,65,891,33],[894,66,891,34,"span"],[894,70,891,39],[894,72,891,41],[895,8,892,12,"span"],[895,12,892,16],[895,15,892,19,"count"],[895,20,892,24],[895,23,892,27,"elementLayout"],[895,36,892,40],[895,37,892,41,"span"],[895,41,892,45],[896,6,893,8],[897,6,894,8],[897,11,894,13],[897,12,894,14,"span"],[897,16,894,18],[897,18,894,20,"property"],[897,26,894,28],[897,27,894,29],[898,6,895,8],[899,6,896,8],[899,10,896,12],[899,11,896,13,"elementLayout"],[899,24,896,26],[899,27,896,29,"elementLayout"],[899,40,896,42],[900,6,897,8],[901,0,898,0],[902,0,899,0],[903,0,900,0],[904,0,901,0],[905,6,902,8],[905,10,902,12],[905,11,902,13,"count"],[905,16,902,18],[905,19,902,21,"count"],[905,24,902,26],[906,4,903,4],[907,4,904,4],[908,4,905,4,"getSpan"],[908,11,905,11,"getSpan"],[908,12,905,12,"b"],[908,13,905,13],[908,15,905,15,"offset"],[908,21,905,21],[908,24,905,24],[908,25,905,25],[908,27,905,27],[909,6,906,8],[909,10,906,12],[909,11,906,13],[909,15,906,17],[909,19,906,21],[909,20,906,22,"span"],[909,24,906,26],[909,26,906,28],[910,8,907,12],[910,15,907,19],[910,19,907,23],[910,20,907,24,"span"],[910,24,907,28],[911,6,908,8],[912,6,909,8],[912,10,909,12,"span"],[912,14,909,16],[912,17,909,19],[912,18,909,20],[913,6,910,8],[913,10,910,12,"count"],[913,15,910,17],[913,18,910,20],[913,22,910,24],[913,23,910,25,"count"],[913,28,910,30],[914,6,911,8],[914,10,911,12,"count"],[914,15,911,17],[914,27,911,29,"ExternalLayout"],[914,41,911,43],[914,43,911,45],[915,8,912,12,"count"],[915,13,912,17],[915,16,912,20,"count"],[915,21,912,25],[915,22,912,26,"decode"],[915,28,912,32],[915,29,912,33,"b"],[915,30,912,34],[915,32,912,36,"offset"],[915,38,912,42],[915,39,912,43],[916,6,913,8],[917,6,914,8],[917,10,914,12],[917,11,914,13],[917,14,914,16],[917,18,914,20],[917,19,914,21,"elementLayout"],[917,32,914,34],[917,33,914,35,"span"],[917,37,914,39],[917,39,914,41],[918,8,915,12,"span"],[918,12,915,16],[918,15,915,19,"count"],[918,20,915,24],[918,23,915,27],[918,27,915,31],[918,28,915,32,"elementLayout"],[918,41,915,45],[918,42,915,46,"span"],[918,46,915,50],[919,6,916,8],[919,7,916,9],[919,13,917,13],[920,8,918,12],[920,12,918,16,"idx"],[920,15,918,19],[920,18,918,22],[920,19,918,23],[921,8,919,12],[921,15,919,19,"idx"],[921,18,919,22],[921,21,919,25,"count"],[921,26,919,30],[921,28,919,32],[922,10,920,16,"span"],[922,14,920,20],[922,18,920,24],[922,22,920,28],[922,23,920,29,"elementLayout"],[922,36,920,42],[922,37,920,43,"getSpan"],[922,44,920,50],[922,45,920,51,"b"],[922,46,920,52],[922,48,920,54,"offset"],[922,54,920,60],[922,57,920,63,"span"],[922,61,920,67],[922,62,920,68],[923,10,921,16],[923,12,921,18,"idx"],[923,15,921,21],[924,8,922,12],[925,6,923,8],[926,6,924,8],[926,13,924,15,"span"],[926,17,924,19],[927,4,925,4],[928,4,926,4],[929,4,927,4,"decode"],[929,10,927,10,"decode"],[929,11,927,11,"b"],[929,12,927,12],[929,14,927,14,"offset"],[929,20,927,20],[929,23,927,23],[929,24,927,24],[929,26,927,26],[930,6,928,8],[930,12,928,14,"rv"],[930,14,928,16],[930,17,928,19],[930,19,928,21],[931,6,929,8],[931,10,929,12,"i"],[931,11,929,13],[931,14,929,16],[931,15,929,17],[932,6,930,8],[932,10,930,12,"count"],[932,15,930,17],[932,18,930,20],[932,22,930,24],[932,23,930,25,"count"],[932,28,930,30],[933,6,931,8],[933,10,931,12,"count"],[933,15,931,17],[933,27,931,29,"ExternalLayout"],[933,41,931,43],[933,43,931,45],[934,8,932,12,"count"],[934,13,932,17],[934,16,932,20,"count"],[934,21,932,25],[934,22,932,26,"decode"],[934,28,932,32],[934,29,932,33,"b"],[934,30,932,34],[934,32,932,36,"offset"],[934,38,932,42],[934,39,932,43],[935,6,933,8],[936,6,934,8],[936,13,934,15,"i"],[936,14,934,16],[936,17,934,19,"count"],[936,22,934,24],[936,24,934,26],[937,8,935,12,"rv"],[937,10,935,14],[937,11,935,15,"push"],[937,15,935,19],[937,16,935,20],[937,20,935,24],[937,21,935,25,"elementLayout"],[937,34,935,38],[937,35,935,39,"decode"],[937,41,935,45],[937,42,935,46,"b"],[937,43,935,47],[937,45,935,49,"offset"],[937,51,935,55],[937,52,935,56],[937,53,935,57],[938,8,936,12,"offset"],[938,14,936,18],[938,18,936,22],[938,22,936,26],[938,23,936,27,"elementLayout"],[938,36,936,40],[938,37,936,41,"getSpan"],[938,44,936,48],[938,45,936,49,"b"],[938,46,936,50],[938,48,936,52,"offset"],[938,54,936,58],[938,55,936,59],[939,8,937,12,"i"],[939,9,937,13],[939,13,937,17],[939,14,937,18],[940,6,938,8],[941,6,939,8],[941,13,939,15,"rv"],[941,15,939,17],[942,4,940,4],[943,4,941,4],[944,0,942,0],[945,0,943,0],[946,0,944,0],[947,0,945,0],[948,0,946,0],[949,0,947,0],[950,0,948,0],[951,0,949,0],[952,0,950,0],[953,4,951,4,"encode"],[953,10,951,10,"encode"],[953,11,951,11,"src"],[953,14,951,14],[953,16,951,16,"b"],[953,17,951,17],[953,19,951,19,"offset"],[953,25,951,25],[953,28,951,28],[953,29,951,29],[953,31,951,31],[954,6,952,8],[954,12,952,14,"elo"],[954,15,952,17],[954,18,952,20],[954,22,952,24],[954,23,952,25,"elementLayout"],[954,36,952,38],[955,6,953,8],[955,12,953,14,"span"],[955,16,953,18],[955,19,953,21,"src"],[955,22,953,24],[955,23,953,25,"reduce"],[955,29,953,31],[955,30,953,32],[955,31,953,33,"span"],[955,35,953,37],[955,37,953,39,"v"],[955,38,953,40],[955,43,953,45],[956,8,954,12],[956,15,954,19,"span"],[956,19,954,23],[956,22,954,26,"elo"],[956,25,954,29],[956,26,954,30,"encode"],[956,32,954,36],[956,33,954,37,"v"],[956,34,954,38],[956,36,954,40,"b"],[956,37,954,41],[956,39,954,43,"offset"],[956,45,954,49],[956,48,954,52,"span"],[956,52,954,56],[956,53,954,57],[957,6,955,8],[957,7,955,9],[957,9,955,11],[957,10,955,12],[957,11,955,13],[958,6,956,8],[958,10,956,12],[958,14,956,16],[958,15,956,17,"count"],[958,20,956,22],[958,32,956,34,"ExternalLayout"],[958,46,956,48],[958,48,956,50],[959,8,957,12],[959,12,957,16],[959,13,957,17,"count"],[959,18,957,22],[959,19,957,23,"encode"],[959,25,957,29],[959,26,957,30,"src"],[959,29,957,33],[959,30,957,34,"length"],[959,36,957,40],[959,38,957,42,"b"],[959,39,957,43],[959,41,957,45,"offset"],[959,47,957,51],[959,48,957,52],[960,6,958,8],[961,6,959,8],[961,13,959,15,"span"],[961,17,959,19],[962,4,960,4],[963,2,961,0],[964,2,962,0,"exports"],[964,9,962,7],[964,10,962,8,"Sequence"],[964,18,962,16],[964,21,962,19,"Sequence"],[964,29,962,27],[965,2,963,0],[966,0,964,0],[967,0,965,0],[968,0,966,0],[969,0,967,0],[970,0,968,0],[971,0,969,0],[972,0,970,0],[973,0,971,0],[974,0,972,0],[975,0,973,0],[976,0,974,0],[977,0,975,0],[978,0,976,0],[979,0,977,0],[980,0,978,0],[981,0,979,0],[982,0,980,0],[983,0,981,0],[984,0,982,0],[985,0,983,0],[986,0,984,0],[987,0,985,0],[988,0,986,0],[989,0,987,0],[990,0,988,0],[991,0,989,0],[992,0,990,0],[993,0,991,0],[994,0,992,0],[995,0,993,0],[996,0,994,0],[997,2,995,0],[997,8,995,6,"Structure"],[997,17,995,15],[997,26,995,24,"Layout"],[997,32,995,30],[997,33,995,31],[998,4,996,4,"constructor"],[998,15,996,15,"constructor"],[998,16,996,16,"fields"],[998,22,996,22],[998,24,996,24,"property"],[998,32,996,32],[998,34,996,34,"decodePrefixes"],[998,48,996,48],[998,50,996,50],[999,6,997,8],[999,10,997,12],[999,12,997,14,"Array"],[999,17,997,19],[999,18,997,20,"isArray"],[999,25,997,27],[999,26,997,28,"fields"],[999,32,997,34],[999,33,997,35],[999,37,998,15,"fields"],[999,43,998,21],[999,44,998,22,"reduce"],[999,50,998,28],[999,51,998,29],[999,52,998,30,"acc"],[999,55,998,33],[999,57,998,35,"v"],[999,58,998,36],[999,63,998,41,"acc"],[999,66,998,44],[999,70,998,49,"v"],[999,71,998,50],[999,83,998,62,"Layout"],[999,89,998,69],[999,91,998,71],[999,95,998,75],[999,96,998,76],[999,97,998,77],[999,99,998,79],[1000,8,999,12],[1000,14,999,18],[1000,18,999,22,"TypeError"],[1000,27,999,31],[1000,28,999,32],[1000,70,999,74],[1000,71,999,75],[1001,6,1000,8],[1002,6,1001,8],[1002,10,1001,13],[1002,19,1001,22],[1002,24,1001,27],[1002,31,1001,34,"property"],[1002,39,1001,42],[1002,43,1002,16,"undefined"],[1002,52,1002,25],[1002,57,1002,30,"decodePrefixes"],[1002,71,1002,45],[1002,73,1002,47],[1003,8,1003,12,"decodePrefixes"],[1003,22,1003,26],[1003,25,1003,29,"property"],[1003,33,1003,37],[1004,8,1004,12,"property"],[1004,16,1004,20],[1004,19,1004,23,"undefined"],[1004,28,1004,32],[1005,6,1005,8],[1006,6,1006,8],[1007,6,1007,8],[1007,11,1007,13],[1007,17,1007,19,"fd"],[1007,19,1007,21],[1007,23,1007,25,"fields"],[1007,29,1007,31],[1007,31,1007,33],[1008,8,1008,12],[1008,12,1008,17],[1008,13,1008,18],[1008,16,1008,21,"fd"],[1008,18,1008,23],[1008,19,1008,24,"span"],[1008,23,1008,28],[1008,27,1009,20,"undefined"],[1008,36,1009,29],[1008,41,1009,34,"fd"],[1008,43,1009,36],[1008,44,1009,37,"property"],[1008,52,1009,46],[1008,54,1009,48],[1009,10,1010,16],[1009,16,1010,22],[1009,20,1010,26,"Error"],[1009,25,1010,31],[1009,26,1010,32],[1009,80,1010,86],[1009,81,1010,87],[1010,8,1011,12],[1011,6,1012,8],[1012,6,1013,8],[1012,10,1013,12,"span"],[1012,14,1013,16],[1012,17,1013,19],[1012,18,1013,20],[1012,19,1013,21],[1013,6,1014,8],[1013,10,1014,12],[1014,8,1015,12,"span"],[1014,12,1015,16],[1014,15,1015,19,"fields"],[1014,21,1015,25],[1014,22,1015,26,"reduce"],[1014,28,1015,32],[1014,29,1015,33],[1014,30,1015,34,"span"],[1014,34,1015,38],[1014,36,1015,40,"fd"],[1014,38,1015,42],[1014,43,1015,47,"span"],[1014,47,1015,51],[1014,50,1015,54,"fd"],[1014,52,1015,56],[1014,53,1015,57,"getSpan"],[1014,60,1015,64],[1014,61,1015,65],[1014,62,1015,66],[1014,64,1015,68],[1014,65,1015,69],[1014,66,1015,70],[1015,6,1016,8],[1015,7,1016,9],[1015,8,1017,8],[1015,15,1017,15,"e"],[1015,16,1017,16],[1015,18,1017,18],[1016,8,1018,12],[1017,6,1018,12],[1018,6,1020,8],[1018,11,1020,13],[1018,12,1020,14,"span"],[1018,16,1020,18],[1018,18,1020,20,"property"],[1018,26,1020,28],[1018,27,1020,29],[1019,6,1021,8],[1020,0,1022,0],[1021,0,1023,0],[1022,0,1024,0],[1023,0,1025,0],[1024,0,1026,0],[1025,0,1027,0],[1026,0,1028,0],[1027,0,1029,0],[1028,0,1030,0],[1029,6,1031,8],[1029,10,1031,12],[1029,11,1031,13,"fields"],[1029,17,1031,19],[1029,20,1031,22,"fields"],[1029,26,1031,28],[1030,6,1032,8],[1031,0,1033,0],[1032,0,1034,0],[1033,0,1035,0],[1034,0,1036,0],[1035,0,1037,0],[1036,0,1038,0],[1037,0,1039,0],[1038,0,1040,0],[1039,6,1041,8],[1039,10,1041,12],[1039,11,1041,13,"decodePrefixes"],[1039,25,1041,27],[1039,28,1041,30],[1039,29,1041,31],[1039,30,1041,32,"decodePrefixes"],[1039,44,1041,46],[1040,4,1042,4],[1041,4,1043,4],[1042,4,1044,4,"getSpan"],[1042,11,1044,11,"getSpan"],[1042,12,1044,12,"b"],[1042,13,1044,13],[1042,15,1044,15,"offset"],[1042,21,1044,21],[1042,24,1044,24],[1042,25,1044,25],[1042,27,1044,27],[1043,6,1045,8],[1043,10,1045,12],[1043,11,1045,13],[1043,15,1045,17],[1043,19,1045,21],[1043,20,1045,22,"span"],[1043,24,1045,26],[1043,26,1045,28],[1044,8,1046,12],[1044,15,1046,19],[1044,19,1046,23],[1044,20,1046,24,"span"],[1044,24,1046,28],[1045,6,1047,8],[1046,6,1048,8],[1046,10,1048,12,"span"],[1046,14,1048,16],[1046,17,1048,19],[1046,18,1048,20],[1047,6,1049,8],[1047,10,1049,12],[1048,8,1050,12,"span"],[1048,12,1050,16],[1048,15,1050,19],[1048,19,1050,23],[1048,20,1050,24,"fields"],[1048,26,1050,30],[1048,27,1050,31,"reduce"],[1048,33,1050,37],[1048,34,1050,38],[1048,35,1050,39,"span"],[1048,39,1050,43],[1048,41,1050,45,"fd"],[1048,43,1050,47],[1048,48,1050,52],[1049,10,1051,16],[1049,16,1051,22,"fsp"],[1049,19,1051,25],[1049,22,1051,28,"fd"],[1049,24,1051,30],[1049,25,1051,31,"getSpan"],[1049,32,1051,38],[1049,33,1051,39,"b"],[1049,34,1051,40],[1049,36,1051,42,"offset"],[1049,42,1051,48],[1049,43,1051,49],[1050,10,1052,16,"offset"],[1050,16,1052,22],[1050,20,1052,26,"fsp"],[1050,23,1052,29],[1051,10,1053,16],[1051,17,1053,23,"span"],[1051,21,1053,27],[1051,24,1053,30,"fsp"],[1051,27,1053,33],[1052,8,1054,12],[1052,9,1054,13],[1052,11,1054,15],[1052,12,1054,16],[1052,13,1054,17],[1053,6,1055,8],[1053,7,1055,9],[1053,8,1056,8],[1053,15,1056,15,"e"],[1053,16,1056,16],[1053,18,1056,18],[1054,8,1057,12],[1054,14,1057,18],[1054,18,1057,22,"RangeError"],[1054,28,1057,32],[1054,29,1057,33],[1054,49,1057,53],[1054,50,1057,54],[1055,6,1058,8],[1056,6,1059,8],[1056,13,1059,15,"span"],[1056,17,1059,19],[1057,4,1060,4],[1058,4,1061,4],[1059,4,1062,4,"decode"],[1059,10,1062,10,"decode"],[1059,11,1062,11,"b"],[1059,12,1062,12],[1059,14,1062,14,"offset"],[1059,20,1062,20],[1059,23,1062,23],[1059,24,1062,24],[1059,26,1062,26],[1060,6,1063,8,"checkUint8Array"],[1060,21,1063,23],[1060,22,1063,24,"b"],[1060,23,1063,25],[1060,24,1063,26],[1061,6,1064,8],[1061,12,1064,14,"dest"],[1061,16,1064,18],[1061,19,1064,21],[1061,23,1064,25],[1061,24,1064,26,"makeDestinationObject"],[1061,45,1064,47],[1061,46,1064,48],[1061,47,1064,49],[1062,6,1065,8],[1062,11,1065,13],[1062,17,1065,19,"fd"],[1062,19,1065,21],[1062,23,1065,25],[1062,27,1065,29],[1062,28,1065,30,"fields"],[1062,34,1065,36],[1062,36,1065,38],[1063,8,1066,12],[1063,12,1066,16,"undefined"],[1063,21,1066,25],[1063,26,1066,30,"fd"],[1063,28,1066,32],[1063,29,1066,33,"property"],[1063,37,1066,41],[1063,39,1066,43],[1064,10,1067,16,"dest"],[1064,14,1067,20],[1064,15,1067,21,"fd"],[1064,17,1067,23],[1064,18,1067,24,"property"],[1064,26,1067,32],[1064,27,1067,33],[1064,30,1067,36,"fd"],[1064,32,1067,38],[1064,33,1067,39,"decode"],[1064,39,1067,45],[1064,40,1067,46,"b"],[1064,41,1067,47],[1064,43,1067,49,"offset"],[1064,49,1067,55],[1064,50,1067,56],[1065,8,1068,12],[1066,8,1069,12,"offset"],[1066,14,1069,18],[1066,18,1069,22,"fd"],[1066,20,1069,24],[1066,21,1069,25,"getSpan"],[1066,28,1069,32],[1066,29,1069,33,"b"],[1066,30,1069,34],[1066,32,1069,36,"offset"],[1066,38,1069,42],[1066,39,1069,43],[1067,8,1070,12],[1067,12,1070,16],[1067,16,1070,20],[1067,17,1070,21,"decodePrefixes"],[1067,31,1070,35],[1067,35,1071,20,"b"],[1067,36,1071,21],[1067,37,1071,22,"length"],[1067,43,1071,28],[1067,48,1071,33,"offset"],[1067,54,1071,40],[1067,56,1071,42],[1068,10,1072,16],[1069,8,1073,12],[1070,6,1074,8],[1071,6,1075,8],[1071,13,1075,15,"dest"],[1071,17,1075,19],[1072,4,1076,4],[1073,4,1077,4],[1074,0,1078,0],[1075,0,1079,0],[1076,0,1080,0],[1077,0,1081,0],[1078,4,1082,4,"encode"],[1078,10,1082,10,"encode"],[1078,11,1082,11,"src"],[1078,14,1082,14],[1078,16,1082,16,"b"],[1078,17,1082,17],[1078,19,1082,19,"offset"],[1078,25,1082,25],[1078,28,1082,28],[1078,29,1082,29],[1078,31,1082,31],[1079,6,1083,8],[1079,12,1083,14,"firstOffset"],[1079,23,1083,25],[1079,26,1083,28,"offset"],[1079,32,1083,34],[1080,6,1084,8],[1080,10,1084,12,"lastOffset"],[1080,20,1084,22],[1080,23,1084,25],[1080,24,1084,26],[1081,6,1085,8],[1081,10,1085,12,"lastWrote"],[1081,19,1085,21],[1081,22,1085,24],[1081,23,1085,25],[1082,6,1086,8],[1082,11,1086,13],[1082,17,1086,19,"fd"],[1082,19,1086,21],[1082,23,1086,25],[1082,27,1086,29],[1082,28,1086,30,"fields"],[1082,34,1086,36],[1082,36,1086,38],[1083,8,1087,12],[1083,12,1087,16,"span"],[1083,16,1087,20],[1083,19,1087,23,"fd"],[1083,21,1087,25],[1083,22,1087,26,"span"],[1083,26,1087,30],[1084,8,1088,12,"lastWrote"],[1084,17,1088,21],[1084,20,1088,25],[1084,21,1088,26],[1084,24,1088,29,"span"],[1084,28,1088,33],[1084,31,1088,37,"span"],[1084,35,1088,41],[1084,38,1088,44],[1084,39,1088,45],[1085,8,1089,12],[1085,12,1089,16,"undefined"],[1085,21,1089,25],[1085,26,1089,30,"fd"],[1085,28,1089,32],[1085,29,1089,33,"property"],[1085,37,1089,41],[1085,39,1089,43],[1086,10,1090,16],[1086,16,1090,22,"fv"],[1086,18,1090,24],[1086,21,1090,27,"src"],[1086,24,1090,30],[1086,25,1090,31,"fd"],[1086,27,1090,33],[1086,28,1090,34,"property"],[1086,36,1090,42],[1086,37,1090,43],[1087,10,1091,16],[1087,14,1091,20,"undefined"],[1087,23,1091,29],[1087,28,1091,34,"fv"],[1087,30,1091,36],[1087,32,1091,38],[1088,12,1092,20,"lastWrote"],[1088,21,1092,29],[1088,24,1092,32,"fd"],[1088,26,1092,34],[1088,27,1092,35,"encode"],[1088,33,1092,41],[1088,34,1092,42,"fv"],[1088,36,1092,44],[1088,38,1092,46,"b"],[1088,39,1092,47],[1088,41,1092,49,"offset"],[1088,47,1092,55],[1088,48,1092,56],[1089,12,1093,20],[1089,16,1093,24],[1089,17,1093,25],[1089,20,1093,28,"span"],[1089,24,1093,32],[1089,26,1093,34],[1090,14,1094,24],[1091,0,1095,0],[1092,14,1096,24,"span"],[1092,18,1096,28],[1092,21,1096,31,"fd"],[1092,23,1096,33],[1092,24,1096,34,"getSpan"],[1092,31,1096,41],[1092,32,1096,42,"b"],[1092,33,1096,43],[1092,35,1096,45,"offset"],[1092,41,1096,51],[1092,42,1096,52],[1093,12,1097,20],[1094,10,1098,16],[1095,8,1099,12],[1096,8,1100,12,"lastOffset"],[1096,18,1100,22],[1096,21,1100,25,"offset"],[1096,27,1100,31],[1097,8,1101,12,"offset"],[1097,14,1101,18],[1097,18,1101,22,"span"],[1097,22,1101,26],[1098,6,1102,8],[1099,6,1103,8],[1100,0,1104,0],[1101,0,1105,0],[1102,0,1106,0],[1103,6,1107,8],[1103,13,1107,16,"lastOffset"],[1103,23,1107,26],[1103,26,1107,29,"lastWrote"],[1103,35,1107,38],[1103,38,1107,42,"firstOffset"],[1103,49,1107,53],[1104,4,1108,4],[1105,4,1109,4],[1106,4,1110,4,"fromArray"],[1106,13,1110,13,"fromArray"],[1106,14,1110,14,"values"],[1106,20,1110,20],[1106,22,1110,22],[1107,6,1111,8],[1107,12,1111,14,"dest"],[1107,16,1111,18],[1107,19,1111,21],[1107,23,1111,25],[1107,24,1111,26,"makeDestinationObject"],[1107,45,1111,47],[1107,46,1111,48],[1107,47,1111,49],[1108,6,1112,8],[1108,11,1112,13],[1108,17,1112,19,"fd"],[1108,19,1112,21],[1108,23,1112,25],[1108,27,1112,29],[1108,28,1112,30,"fields"],[1108,34,1112,36],[1108,36,1112,38],[1109,8,1113,12],[1109,12,1113,17,"undefined"],[1109,21,1113,26],[1109,26,1113,31,"fd"],[1109,28,1113,33],[1109,29,1113,34,"property"],[1109,37,1113,42],[1109,41,1114,20],[1109,42,1114,21],[1109,45,1114,24,"values"],[1109,51,1114,30],[1109,52,1114,31,"length"],[1109,58,1114,38],[1109,60,1114,40],[1110,10,1115,16,"dest"],[1110,14,1115,20],[1110,15,1115,21,"fd"],[1110,17,1115,23],[1110,18,1115,24,"property"],[1110,26,1115,32],[1110,27,1115,33],[1110,30,1115,36,"values"],[1110,36,1115,42],[1110,37,1115,43,"shift"],[1110,42,1115,48],[1110,43,1115,49],[1110,44,1115,50],[1111,8,1116,12],[1112,6,1117,8],[1113,6,1118,8],[1113,13,1118,15,"dest"],[1113,17,1118,19],[1114,4,1119,4],[1115,4,1120,4],[1116,0,1121,0],[1117,0,1122,0],[1118,0,1123,0],[1119,0,1124,0],[1120,0,1125,0],[1121,0,1126,0],[1122,0,1127,0],[1123,4,1128,4,"layoutFor"],[1123,13,1128,13,"layoutFor"],[1123,14,1128,14,"property"],[1123,22,1128,22],[1123,24,1128,24],[1124,6,1129,8],[1124,10,1129,12],[1124,18,1129,20],[1124,23,1129,25],[1124,30,1129,32,"property"],[1124,38,1129,40],[1124,40,1129,42],[1125,8,1130,12],[1125,14,1130,18],[1125,18,1130,22,"TypeError"],[1125,27,1130,31],[1125,28,1130,32],[1125,53,1130,57],[1125,54,1130,58],[1126,6,1131,8],[1127,6,1132,8],[1127,11,1132,13],[1127,17,1132,19,"fd"],[1127,19,1132,21],[1127,23,1132,25],[1127,27,1132,29],[1127,28,1132,30,"fields"],[1127,34,1132,36],[1127,36,1132,38],[1128,8,1133,12],[1128,12,1133,16,"fd"],[1128,14,1133,18],[1128,15,1133,19,"property"],[1128,23,1133,27],[1128,28,1133,32,"property"],[1128,36,1133,40],[1128,38,1133,42],[1129,10,1134,16],[1129,17,1134,23,"fd"],[1129,19,1134,25],[1130,8,1135,12],[1131,6,1136,8],[1132,6,1137,8],[1132,13,1137,15,"undefined"],[1132,22,1137,24],[1133,4,1138,4],[1134,4,1139,4],[1135,0,1140,0],[1136,0,1141,0],[1137,0,1142,0],[1138,0,1143,0],[1139,0,1144,0],[1140,0,1145,0],[1141,0,1146,0],[1142,0,1147,0],[1143,0,1148,0],[1144,0,1149,0],[1145,4,1150,4,"offsetOf"],[1145,12,1150,12,"offsetOf"],[1145,13,1150,13,"property"],[1145,21,1150,21],[1145,23,1150,23],[1146,6,1151,8],[1146,10,1151,12],[1146,18,1151,20],[1146,23,1151,25],[1146,30,1151,32,"property"],[1146,38,1151,40],[1146,40,1151,42],[1147,8,1152,12],[1147,14,1152,18],[1147,18,1152,22,"TypeError"],[1147,27,1152,31],[1147,28,1152,32],[1147,53,1152,57],[1147,54,1152,58],[1148,6,1153,8],[1149,6,1154,8],[1149,10,1154,12,"offset"],[1149,16,1154,18],[1149,19,1154,21],[1149,20,1154,22],[1150,6,1155,8],[1150,11,1155,13],[1150,17,1155,19,"fd"],[1150,19,1155,21],[1150,23,1155,25],[1150,27,1155,29],[1150,28,1155,30,"fields"],[1150,34,1155,36],[1150,36,1155,38],[1151,8,1156,12],[1151,12,1156,16,"fd"],[1151,14,1156,18],[1151,15,1156,19,"property"],[1151,23,1156,27],[1151,28,1156,32,"property"],[1151,36,1156,40],[1151,38,1156,42],[1152,10,1157,16],[1152,17,1157,23,"offset"],[1152,23,1157,29],[1153,8,1158,12],[1154,8,1159,12],[1154,12,1159,16],[1154,13,1159,17],[1154,16,1159,20,"fd"],[1154,18,1159,22],[1154,19,1159,23,"span"],[1154,23,1159,27],[1154,25,1159,29],[1155,10,1160,16,"offset"],[1155,16,1160,22],[1155,19,1160,25],[1155,20,1160,26],[1155,21,1160,27],[1156,8,1161,12],[1156,9,1161,13],[1156,15,1162,17],[1156,19,1162,21],[1156,20,1162,22],[1156,24,1162,26,"offset"],[1156,30,1162,32],[1156,32,1162,34],[1157,10,1163,16,"offset"],[1157,16,1163,22],[1157,20,1163,26,"fd"],[1157,22,1163,28],[1157,23,1163,29,"span"],[1157,27,1163,33],[1158,8,1164,12],[1159,6,1165,8],[1160,6,1166,8],[1160,13,1166,15,"undefined"],[1160,22,1166,24],[1161,4,1167,4],[1162,2,1168,0],[1163,2,1169,0,"exports"],[1163,9,1169,7],[1163,10,1169,8,"Structure"],[1163,19,1169,17],[1163,22,1169,20,"Structure"],[1163,31,1169,29],[1164,2,1170,0],[1165,0,1171,0],[1166,0,1172,0],[1167,0,1173,0],[1168,0,1174,0],[1169,0,1175,0],[1170,0,1176,0],[1171,0,1177,0],[1172,0,1178,0],[1173,0,1179,0],[1174,0,1180,0],[1175,0,1181,0],[1176,0,1182,0],[1177,0,1183,0],[1178,2,1184,0],[1178,8,1184,6,"UnionDiscriminator"],[1178,26,1184,24],[1178,27,1184,25],[1179,4,1185,4,"constructor"],[1179,15,1185,15,"constructor"],[1179,16,1185,16,"property"],[1179,24,1185,24],[1179,26,1185,26],[1180,6,1186,8],[1181,0,1187,0],[1182,0,1188,0],[1183,0,1189,0],[1184,6,1190,8],[1184,10,1190,12],[1184,11,1190,13,"property"],[1184,19,1190,21],[1184,22,1190,24,"property"],[1184,30,1190,32],[1185,4,1191,4],[1186,4,1192,4],[1187,0,1193,0],[1188,0,1194,0],[1189,0,1195,0],[1190,4,1196,4,"decode"],[1190,10,1196,10,"decode"],[1190,11,1196,11,"b"],[1190,12,1196,12],[1190,14,1196,14,"offset"],[1190,20,1196,20],[1190,22,1196,22],[1191,6,1197,8],[1191,12,1197,14],[1191,16,1197,18,"Error"],[1191,21,1197,23],[1191,22,1197,24],[1191,54,1197,56],[1191,55,1197,57],[1192,4,1198,4],[1193,4,1199,4],[1194,0,1200,0],[1195,0,1201,0],[1196,0,1202,0],[1197,4,1203,4,"encode"],[1197,10,1203,10,"encode"],[1197,11,1203,11,"src"],[1197,14,1203,14],[1197,16,1203,16,"b"],[1197,17,1203,17],[1197,19,1203,19,"offset"],[1197,25,1203,25],[1197,27,1203,27],[1198,6,1204,8],[1198,12,1204,14],[1198,16,1204,18,"Error"],[1198,21,1204,23],[1198,22,1204,24],[1198,54,1204,56],[1198,55,1204,57],[1199,4,1205,4],[1200,2,1206,0],[1201,2,1207,0,"exports"],[1201,9,1207,7],[1201,10,1207,8,"UnionDiscriminator"],[1201,28,1207,26],[1201,31,1207,29,"UnionDiscriminator"],[1201,49,1207,47],[1202,2,1208,0],[1203,0,1209,0],[1204,0,1210,0],[1205,0,1211,0],[1206,0,1212,0],[1207,0,1213,0],[1208,0,1214,0],[1209,0,1215,0],[1210,0,1216,0],[1211,0,1217,0],[1212,0,1218,0],[1213,0,1219,0],[1214,0,1220,0],[1215,0,1221,0],[1216,0,1222,0],[1217,0,1223,0],[1218,0,1224,0],[1219,2,1225,0],[1219,8,1225,6,"UnionLayoutDiscriminator"],[1219,32,1225,30],[1219,41,1225,39,"UnionDiscriminator"],[1219,59,1225,57],[1219,60,1225,58],[1220,4,1226,4,"constructor"],[1220,15,1226,15,"constructor"],[1220,16,1226,16,"layout"],[1220,22,1226,22],[1220,24,1226,24,"property"],[1220,32,1226,32],[1220,34,1226,34],[1221,6,1227,8],[1221,10,1227,12],[1221,12,1227,15,"layout"],[1221,18,1227,21],[1221,30,1227,33,"ExternalLayout"],[1221,44,1227,47],[1221,48,1228,15,"layout"],[1221,54,1228,21],[1221,55,1228,22,"isCount"],[1221,62,1228,29],[1221,63,1228,30],[1221,64,1228,31],[1221,65,1228,32],[1221,67,1228,34],[1222,8,1229,12],[1222,14,1229,18],[1222,18,1229,22,"TypeError"],[1222,27,1229,31],[1222,28,1229,32],[1222,79,1229,83],[1222,80,1229,84],[1223,6,1230,8],[1224,6,1231,8],[1224,11,1231,13],[1224,12,1231,14,"property"],[1224,20,1231,22],[1224,24,1231,26,"layout"],[1224,30,1231,32],[1224,31,1231,33,"property"],[1224,39,1231,41],[1224,43,1231,45],[1224,52,1231,54],[1224,53,1231,55],[1225,6,1232,8],[1226,0,1233,0],[1227,6,1234,8],[1227,10,1234,12],[1227,11,1234,13,"layout"],[1227,17,1234,19],[1227,20,1234,22,"layout"],[1227,26,1234,28],[1228,4,1235,4],[1229,4,1236,4],[1230,4,1237,4,"decode"],[1230,10,1237,10,"decode"],[1230,11,1237,11,"b"],[1230,12,1237,12],[1230,14,1237,14,"offset"],[1230,20,1237,20],[1230,22,1237,22],[1231,6,1238,8],[1231,13,1238,15],[1231,17,1238,19],[1231,18,1238,20,"layout"],[1231,24,1238,26],[1231,25,1238,27,"decode"],[1231,31,1238,33],[1231,32,1238,34,"b"],[1231,33,1238,35],[1231,35,1238,37,"offset"],[1231,41,1238,43],[1231,42,1238,44],[1232,4,1239,4],[1233,4,1240,4],[1234,4,1241,4,"encode"],[1234,10,1241,10,"encode"],[1234,11,1241,11,"src"],[1234,14,1241,14],[1234,16,1241,16,"b"],[1234,17,1241,17],[1234,19,1241,19,"offset"],[1234,25,1241,25],[1234,27,1241,27],[1235,6,1242,8],[1235,13,1242,15],[1235,17,1242,19],[1235,18,1242,20,"layout"],[1235,24,1242,26],[1235,25,1242,27,"encode"],[1235,31,1242,33],[1235,32,1242,34,"src"],[1235,35,1242,37],[1235,37,1242,39,"b"],[1235,38,1242,40],[1235,40,1242,42,"offset"],[1235,46,1242,48],[1235,47,1242,49],[1236,4,1243,4],[1237,2,1244,0],[1238,2,1245,0,"exports"],[1238,9,1245,7],[1238,10,1245,8,"UnionLayoutDiscriminator"],[1238,34,1245,32],[1238,37,1245,35,"UnionLayoutDiscriminator"],[1238,61,1245,59],[1239,2,1246,0],[1240,0,1247,0],[1241,0,1248,0],[1242,0,1249,0],[1243,0,1250,0],[1244,0,1251,0],[1245,0,1252,0],[1246,0,1253,0],[1247,0,1254,0],[1248,0,1255,0],[1249,0,1256,0],[1250,0,1257,0],[1251,0,1258,0],[1252,0,1259,0],[1253,0,1260,0],[1254,0,1261,0],[1255,0,1262,0],[1256,0,1263,0],[1257,0,1264,0],[1258,0,1265,0],[1259,0,1266,0],[1260,0,1267,0],[1261,0,1268,0],[1262,0,1269,0],[1263,0,1270,0],[1264,0,1271,0],[1265,0,1272,0],[1266,0,1273,0],[1267,0,1274,0],[1268,0,1275,0],[1269,0,1276,0],[1270,0,1277,0],[1271,0,1278,0],[1272,0,1279,0],[1273,0,1280,0],[1274,0,1281,0],[1275,0,1282,0],[1276,0,1283,0],[1277,0,1284,0],[1278,0,1285,0],[1279,0,1286,0],[1280,0,1287,0],[1281,0,1288,0],[1282,0,1289,0],[1283,0,1290,0],[1284,0,1291,0],[1285,0,1292,0],[1286,0,1293,0],[1287,0,1294,0],[1288,0,1295,0],[1289,0,1296,0],[1290,0,1297,0],[1291,0,1298,0],[1292,0,1299,0],[1293,0,1300,0],[1294,0,1301,0],[1295,0,1302,0],[1296,0,1303,0],[1297,0,1304,0],[1298,2,1305,0],[1298,8,1305,6,"Union"],[1298,13,1305,11],[1298,22,1305,20,"Layout"],[1298,28,1305,26],[1298,29,1305,27],[1299,4,1306,4,"constructor"],[1299,15,1306,15,"constructor"],[1299,16,1306,16,"discr"],[1299,21,1306,21],[1299,23,1306,23,"defaultLayout"],[1299,36,1306,36],[1299,38,1306,38,"property"],[1299,46,1306,46],[1299,48,1306,48],[1300,6,1307,8],[1300,10,1307,12,"discriminator"],[1300,23,1307,25],[1301,6,1308,8],[1301,10,1308,13,"discr"],[1301,15,1308,18],[1301,27,1308,30,"UInt"],[1301,31,1308,34],[1301,35,1309,16,"discr"],[1301,40,1309,21],[1301,52,1309,33,"UIntBE"],[1301,58,1309,40],[1301,60,1309,42],[1302,8,1310,12,"discriminator"],[1302,21,1310,25],[1302,24,1310,28],[1302,28,1310,32,"UnionLayoutDiscriminator"],[1302,52,1310,56],[1302,53,1310,57],[1302,57,1310,61,"OffsetLayout"],[1302,69,1310,73],[1302,70,1310,74,"discr"],[1302,75,1310,79],[1302,76,1310,80],[1302,77,1310,81],[1303,6,1311,8],[1303,7,1311,9],[1303,13,1312,13],[1303,17,1312,18,"discr"],[1303,22,1312,23],[1303,34,1312,35,"ExternalLayout"],[1303,48,1312,49],[1303,52,1313,15,"discr"],[1303,57,1313,20],[1303,58,1313,21,"isCount"],[1303,65,1313,28],[1303,66,1313,29],[1303,67,1313,30],[1303,69,1313,32],[1304,8,1314,12,"discriminator"],[1304,21,1314,25],[1304,24,1314,28],[1304,28,1314,32,"UnionLayoutDiscriminator"],[1304,52,1314,56],[1304,53,1314,57,"discr"],[1304,58,1314,62],[1304,59,1314,63],[1305,6,1315,8],[1305,7,1315,9],[1305,13,1316,13],[1305,17,1316,17],[1305,19,1316,19,"discr"],[1305,24,1316,24],[1305,36,1316,36,"UnionDiscriminator"],[1305,54,1316,54],[1305,55,1316,55],[1305,57,1316,57],[1306,8,1317,12],[1306,14,1317,18],[1306,18,1317,22,"TypeError"],[1306,27,1317,31],[1306,28,1317,32],[1306,65,1317,69],[1306,68,1318,18],[1306,99,1318,49],[1306,100,1318,50],[1307,6,1319,8],[1307,7,1319,9],[1307,13,1320,13],[1308,8,1321,12,"discriminator"],[1308,21,1321,25],[1308,24,1321,28,"discr"],[1308,29,1321,33],[1309,6,1322,8],[1310,6,1323,8],[1310,10,1323,12,"undefined"],[1310,19,1323,21],[1310,24,1323,26,"defaultLayout"],[1310,37,1323,39],[1310,39,1323,41],[1311,8,1324,12,"defaultLayout"],[1311,21,1324,25],[1311,24,1324,28],[1311,28,1324,32],[1312,6,1325,8],[1313,6,1326,8],[1313,10,1326,12],[1313,12,1326,15],[1313,16,1326,19],[1313,21,1326,24,"defaultLayout"],[1313,34,1326,37],[1313,38,1327,16,"defaultLayout"],[1313,51,1327,29],[1313,63,1327,41,"Layout"],[1313,69,1327,48],[1313,70,1327,49],[1313,72,1327,51],[1314,8,1328,12],[1314,14,1328,18],[1314,18,1328,22,"TypeError"],[1314,27,1328,31],[1314,28,1328,32],[1314,68,1328,72],[1314,69,1328,73],[1315,6,1329,8],[1316,6,1330,8],[1316,10,1330,12],[1316,14,1330,16],[1316,19,1330,21,"defaultLayout"],[1316,32,1330,34],[1316,34,1330,36],[1317,8,1331,12],[1317,12,1331,16],[1317,13,1331,17],[1317,16,1331,20,"defaultLayout"],[1317,29,1331,33],[1317,30,1331,34,"span"],[1317,34,1331,38],[1317,36,1331,40],[1318,10,1332,16],[1318,16,1332,22],[1318,20,1332,26,"Error"],[1318,25,1332,31],[1318,26,1332,32],[1318,65,1332,71],[1318,66,1332,72],[1319,8,1333,12],[1320,8,1334,12],[1320,12,1334,16,"undefined"],[1320,21,1334,25],[1320,26,1334,30,"defaultLayout"],[1320,39,1334,43],[1320,40,1334,44,"property"],[1320,48,1334,52],[1320,50,1334,54],[1321,10,1335,16,"defaultLayout"],[1321,23,1335,29],[1321,26,1335,32,"defaultLayout"],[1321,39,1335,45],[1321,40,1335,46,"replicate"],[1321,49,1335,55],[1321,50,1335,56],[1321,59,1335,65],[1321,60,1335,66],[1322,8,1336,12],[1323,6,1337,8],[1324,6,1338,8],[1325,0,1339,0],[1326,0,1340,0],[1327,0,1341,0],[1328,6,1342,8],[1328,10,1342,12,"span"],[1328,14,1342,16],[1328,17,1342,19],[1328,18,1342,20],[1328,19,1342,21],[1329,6,1343,8],[1329,10,1343,12,"defaultLayout"],[1329,23,1343,25],[1329,25,1343,27],[1330,8,1344,12,"span"],[1330,12,1344,16],[1330,15,1344,19,"defaultLayout"],[1330,28,1344,32],[1330,29,1344,33,"span"],[1330,33,1344,37],[1331,8,1345,12],[1331,12,1345,17],[1331,13,1345,18],[1331,17,1345,22,"span"],[1331,21,1345,26],[1331,26,1345,33,"discr"],[1331,31,1345,38],[1331,43,1345,50,"UInt"],[1331,47,1345,54],[1331,51,1346,20,"discr"],[1331,56,1346,25],[1331,68,1346,37,"UIntBE"],[1331,74,1346,44],[1331,75,1346,45],[1331,77,1346,47],[1332,10,1347,16,"span"],[1332,14,1347,20],[1332,18,1347,24,"discriminator"],[1332,31,1347,37],[1332,32,1347,38,"layout"],[1332,38,1347,44],[1332,39,1347,45,"span"],[1332,43,1347,49],[1333,8,1348,12],[1334,6,1349,8],[1335,6,1350,8],[1335,11,1350,13],[1335,12,1350,14,"span"],[1335,16,1350,18],[1335,18,1350,20,"property"],[1335,26,1350,28],[1335,27,1350,29],[1336,6,1351,8],[1337,0,1352,0],[1338,0,1353,0],[1339,0,1354,0],[1340,0,1355,0],[1341,0,1356,0],[1342,0,1357,0],[1343,0,1358,0],[1344,6,1359,8],[1344,10,1359,12],[1344,11,1359,13,"discriminator"],[1344,24,1359,26],[1344,27,1359,29,"discriminator"],[1344,40,1359,42],[1345,6,1360,8],[1346,0,1361,0],[1347,0,1362,0],[1348,0,1363,0],[1349,0,1364,0],[1350,6,1365,8],[1350,10,1365,12],[1350,11,1365,13,"usesPrefixDiscriminator"],[1350,34,1365,36],[1350,37,1365,40,"discr"],[1350,42,1365,45],[1350,54,1365,57,"UInt"],[1350,58,1365,61],[1350,62,1366,16,"discr"],[1350,67,1366,21],[1350,79,1366,33,"UIntBE"],[1350,85,1366,40],[1351,6,1367,8],[1352,0,1368,0],[1353,0,1369,0],[1354,0,1370,0],[1355,0,1371,0],[1356,0,1372,0],[1357,0,1373,0],[1358,6,1374,8],[1358,10,1374,12],[1358,11,1374,13,"defaultLayout"],[1358,24,1374,26],[1358,27,1374,29,"defaultLayout"],[1358,40,1374,42],[1359,6,1375,8],[1360,0,1376,0],[1361,0,1377,0],[1362,0,1378,0],[1363,0,1379,0],[1364,0,1380,0],[1365,0,1381,0],[1366,0,1382,0],[1367,0,1383,0],[1368,0,1384,0],[1369,6,1385,8],[1369,10,1385,12],[1369,11,1385,13,"registry"],[1369,19,1385,21],[1369,22,1385,24],[1369,23,1385,25],[1369,24,1385,26],[1370,6,1386,8],[1371,6,1387,8],[1371,10,1387,12,"boundGetSourceVariant"],[1371,31,1387,33],[1371,34,1387,36],[1371,38,1387,40],[1371,39,1387,41,"defaultGetSourceVariant"],[1371,62,1387,64],[1371,63,1387,65,"bind"],[1371,67,1387,69],[1371,68,1387,70],[1371,72,1387,74],[1371,73,1387,75],[1372,6,1388,8],[1373,0,1389,0],[1374,0,1390,0],[1375,0,1391,0],[1376,0,1392,0],[1377,0,1393,0],[1378,0,1394,0],[1379,0,1395,0],[1380,0,1396,0],[1381,0,1397,0],[1382,0,1398,0],[1383,0,1399,0],[1384,0,1400,0],[1385,6,1401,8],[1385,10,1401,12],[1385,11,1401,13,"getSourceVariant"],[1385,27,1401,29],[1385,30,1401,32],[1385,40,1401,42,"src"],[1385,43,1401,45],[1385,45,1401,47],[1386,8,1402,12],[1386,15,1402,19,"boundGetSourceVariant"],[1386,36,1402,40],[1386,37,1402,41,"src"],[1386,40,1402,44],[1386,41,1402,45],[1387,6,1403,8],[1387,7,1403,9],[1388,6,1404,8],[1389,0,1405,0],[1390,0,1406,0],[1391,0,1407,0],[1392,0,1408,0],[1393,0,1409,0],[1394,0,1410,0],[1395,0,1411,0],[1396,0,1412,0],[1397,0,1413,0],[1398,0,1414,0],[1399,0,1415,0],[1400,0,1416,0],[1401,6,1417,8],[1401,10,1417,12],[1401,11,1417,13,"configGetSourceVariant"],[1401,33,1417,35],[1401,36,1417,38],[1401,46,1417,48,"gsv"],[1401,49,1417,51],[1401,51,1417,53],[1402,8,1418,12,"boundGetSourceVariant"],[1402,29,1418,33],[1402,32,1418,36,"gsv"],[1402,35,1418,39],[1402,36,1418,40,"bind"],[1402,40,1418,44],[1402,41,1418,45],[1402,45,1418,49],[1402,46,1418,50],[1403,6,1419,8],[1403,7,1419,9],[1404,4,1420,4],[1405,4,1421,4],[1406,4,1422,4,"getSpan"],[1406,11,1422,11,"getSpan"],[1406,12,1422,12,"b"],[1406,13,1422,13],[1406,15,1422,15,"offset"],[1406,21,1422,21],[1406,24,1422,24],[1406,25,1422,25],[1406,27,1422,27],[1407,6,1423,8],[1407,10,1423,12],[1407,11,1423,13],[1407,15,1423,17],[1407,19,1423,21],[1407,20,1423,22,"span"],[1407,24,1423,26],[1407,26,1423,28],[1408,8,1424,12],[1408,15,1424,19],[1408,19,1424,23],[1408,20,1424,24,"span"],[1408,24,1424,28],[1409,6,1425,8],[1410,6,1426,8],[1411,0,1427,0],[1412,0,1428,0],[1413,6,1429,8],[1413,12,1429,14,"vlo"],[1413,15,1429,17],[1413,18,1429,20],[1413,22,1429,24],[1413,23,1429,25,"getVariant"],[1413,33,1429,35],[1413,34,1429,36,"b"],[1413,35,1429,37],[1413,37,1429,39,"offset"],[1413,43,1429,45],[1413,44,1429,46],[1414,6,1430,8],[1414,10,1430,12],[1414,11,1430,13,"vlo"],[1414,14,1430,16],[1414,16,1430,18],[1415,8,1431,12],[1415,14,1431,18],[1415,18,1431,22,"Error"],[1415,23,1431,27],[1415,24,1431,28],[1415,75,1431,79],[1415,76,1431,80],[1416,6,1432,8],[1417,6,1433,8],[1417,13,1433,15,"vlo"],[1417,16,1433,18],[1417,17,1433,19,"getSpan"],[1417,24,1433,26],[1417,25,1433,27,"b"],[1417,26,1433,28],[1417,28,1433,30,"offset"],[1417,34,1433,36],[1417,35,1433,37],[1418,4,1434,4],[1419,4,1435,4],[1420,0,1436,0],[1421,0,1437,0],[1422,0,1438,0],[1423,0,1439,0],[1424,0,1440,0],[1425,0,1441,0],[1426,0,1442,0],[1427,0,1443,0],[1428,0,1444,0],[1429,0,1445,0],[1430,0,1446,0],[1431,0,1447,0],[1432,0,1448,0],[1433,0,1449,0],[1434,0,1450,0],[1435,0,1451,0],[1436,0,1452,0],[1437,0,1453,0],[1438,0,1454,0],[1439,0,1455,0],[1440,0,1456,0],[1441,0,1457,0],[1442,0,1458,0],[1443,0,1459,0],[1444,0,1460,0],[1445,0,1461,0],[1446,0,1462,0],[1447,0,1463,0],[1448,4,1464,4,"defaultGetSourceVariant"],[1448,27,1464,27,"defaultGetSourceVariant"],[1448,28,1464,28,"src"],[1448,31,1464,31],[1448,33,1464,33],[1449,6,1465,8],[1449,10,1465,12,"Object"],[1449,16,1465,18],[1449,17,1465,19,"prototype"],[1449,26,1465,28],[1449,27,1465,29,"hasOwnProperty"],[1449,41,1465,43],[1449,42,1465,44,"call"],[1449,46,1465,48],[1449,47,1465,49,"src"],[1449,50,1465,52],[1449,52,1465,54],[1449,56,1465,58],[1449,57,1465,59,"discriminator"],[1449,70,1465,72],[1449,71,1465,73,"property"],[1449,79,1465,81],[1449,80,1465,82],[1449,82,1465,84],[1450,8,1466,12],[1450,12,1466,16],[1450,16,1466,20],[1450,17,1466,21,"defaultLayout"],[1450,30,1466,34],[1450,34,1466,38],[1450,38,1466,42],[1450,39,1466,43,"defaultLayout"],[1450,52,1466,56],[1450,53,1466,57,"property"],[1450,61,1466,65],[1450,65,1467,19,"Object"],[1450,71,1467,25],[1450,72,1467,26,"prototype"],[1450,81,1467,35],[1450,82,1467,36,"hasOwnProperty"],[1450,96,1467,50],[1450,97,1467,51,"call"],[1450,101,1467,55],[1450,102,1467,56,"src"],[1450,105,1467,59],[1450,107,1467,61],[1450,111,1467,65],[1450,112,1467,66,"defaultLayout"],[1450,125,1467,79],[1450,126,1467,80,"property"],[1450,134,1467,88],[1450,135,1467,89],[1450,137,1467,91],[1451,10,1468,16],[1451,17,1468,23,"undefined"],[1451,26,1468,32],[1452,8,1469,12],[1453,8,1470,12],[1453,14,1470,18,"vlo"],[1453,17,1470,21],[1453,20,1470,24],[1453,24,1470,28],[1453,25,1470,29,"registry"],[1453,33,1470,37],[1453,34,1470,38,"src"],[1453,37,1470,41],[1453,38,1470,42],[1453,42,1470,46],[1453,43,1470,47,"discriminator"],[1453,56,1470,60],[1453,57,1470,61,"property"],[1453,65,1470,69],[1453,66,1470,70],[1453,67,1470,71],[1454,8,1471,12],[1454,12,1471,16,"vlo"],[1454,15,1471,19],[1454,20,1472,21],[1454,21,1472,22,"vlo"],[1454,24,1472,25],[1454,25,1472,26,"layout"],[1454,31,1472,32],[1454,35,1473,24,"vlo"],[1454,38,1473,27],[1454,39,1473,28,"property"],[1454,47,1473,36],[1454,51,1473,40,"Object"],[1454,57,1473,46],[1454,58,1473,47,"prototype"],[1454,67,1473,56],[1454,68,1473,57,"hasOwnProperty"],[1454,82,1473,71],[1454,83,1473,72,"call"],[1454,87,1473,76],[1454,88,1473,77,"src"],[1454,91,1473,80],[1454,93,1473,82,"vlo"],[1454,96,1473,85],[1454,97,1473,86,"property"],[1454,105,1473,94],[1454,106,1473,96],[1454,107,1473,97],[1454,109,1473,99],[1455,10,1474,16],[1455,17,1474,23,"vlo"],[1455,20,1474,26],[1456,8,1475,12],[1457,6,1476,8],[1457,7,1476,9],[1457,13,1477,13],[1458,8,1478,12],[1458,13,1478,17],[1458,19,1478,23,"tag"],[1458,22,1478,26],[1458,26,1478,30],[1458,30,1478,34],[1458,31,1478,35,"registry"],[1458,39,1478,43],[1458,41,1478,45],[1459,10,1479,16],[1459,16,1479,22,"vlo"],[1459,19,1479,25],[1459,22,1479,28],[1459,26,1479,32],[1459,27,1479,33,"registry"],[1459,35,1479,41],[1459,36,1479,42,"tag"],[1459,39,1479,45],[1459,40,1479,46],[1460,10,1480,16],[1460,14,1480,20,"vlo"],[1460,17,1480,23],[1460,18,1480,24,"property"],[1460,26,1480,32],[1460,30,1480,36,"Object"],[1460,36,1480,42],[1460,37,1480,43,"prototype"],[1460,46,1480,52],[1460,47,1480,53,"hasOwnProperty"],[1460,61,1480,67],[1460,62,1480,68,"call"],[1460,66,1480,72],[1460,67,1480,73,"src"],[1460,70,1480,76],[1460,72,1480,78,"vlo"],[1460,75,1480,81],[1460,76,1480,82,"property"],[1460,84,1480,90],[1460,85,1480,91],[1460,87,1480,93],[1461,12,1481,20],[1461,19,1481,27,"vlo"],[1461,22,1481,30],[1462,10,1482,16],[1463,8,1483,12],[1464,6,1484,8],[1465,6,1485,8],[1465,12,1485,14],[1465,16,1485,18,"Error"],[1465,21,1485,23],[1465,22,1485,24],[1465,51,1485,53],[1465,52,1485,54],[1466,4,1486,4],[1467,4,1487,4],[1468,0,1488,0],[1469,0,1489,0],[1470,0,1490,0],[1471,0,1491,0],[1472,0,1492,0],[1473,4,1493,4,"decode"],[1473,10,1493,10,"decode"],[1473,11,1493,11,"b"],[1473,12,1493,12],[1473,14,1493,14,"offset"],[1473,20,1493,20],[1473,23,1493,23],[1473,24,1493,24],[1473,26,1493,26],[1474,6,1494,8],[1474,10,1494,12,"dest"],[1474,14,1494,16],[1475,6,1495,8],[1475,12,1495,14,"dlo"],[1475,15,1495,17],[1475,18,1495,20],[1475,22,1495,24],[1475,23,1495,25,"discriminator"],[1475,36,1495,38],[1476,6,1496,8],[1476,12,1496,14,"discr"],[1476,17,1496,19],[1476,20,1496,22,"dlo"],[1476,23,1496,25],[1476,24,1496,26,"decode"],[1476,30,1496,32],[1476,31,1496,33,"b"],[1476,32,1496,34],[1476,34,1496,36,"offset"],[1476,40,1496,42],[1476,41,1496,43],[1477,6,1497,8],[1477,12,1497,14,"clo"],[1477,15,1497,17],[1477,18,1497,20],[1477,22,1497,24],[1477,23,1497,25,"registry"],[1477,31,1497,33],[1477,32,1497,34,"discr"],[1477,37,1497,39],[1477,38,1497,40],[1478,6,1498,8],[1478,10,1498,12,"undefined"],[1478,19,1498,21],[1478,24,1498,26,"clo"],[1478,27,1498,29],[1478,29,1498,31],[1479,8,1499,12],[1479,14,1499,18,"defaultLayout"],[1479,27,1499,31],[1479,30,1499,34],[1479,34,1499,38],[1479,35,1499,39,"defaultLayout"],[1479,48,1499,52],[1480,8,1500,12],[1480,12,1500,16,"contentOffset"],[1480,25,1500,29],[1480,28,1500,32],[1480,29,1500,33],[1481,8,1501,12],[1481,12,1501,16],[1481,16,1501,20],[1481,17,1501,21,"usesPrefixDiscriminator"],[1481,40,1501,44],[1481,42,1501,46],[1482,10,1502,16,"contentOffset"],[1482,23,1502,29],[1482,26,1502,32,"dlo"],[1482,29,1502,35],[1482,30,1502,36,"layout"],[1482,36,1502,42],[1482,37,1502,43,"span"],[1482,41,1502,47],[1483,8,1503,12],[1484,8,1504,12,"dest"],[1484,12,1504,16],[1484,15,1504,19],[1484,19,1504,23],[1484,20,1504,24,"makeDestinationObject"],[1484,41,1504,45],[1484,42,1504,46],[1484,43,1504,47],[1485,8,1505,12,"dest"],[1485,12,1505,16],[1485,13,1505,17,"dlo"],[1485,16,1505,20],[1485,17,1505,21,"property"],[1485,25,1505,29],[1485,26,1505,30],[1485,29,1505,33,"discr"],[1485,34,1505,38],[1486,8,1506,12],[1487,8,1507,12],[1488,8,1508,12,"dest"],[1488,12,1508,16],[1488,13,1508,17,"defaultLayout"],[1488,26,1508,30],[1488,27,1508,31,"property"],[1488,35,1508,39],[1488,36,1508,40],[1488,39,1508,43,"defaultLayout"],[1488,52,1508,56],[1488,53,1508,57,"decode"],[1488,59,1508,63],[1488,60,1508,64,"b"],[1488,61,1508,65],[1488,63,1508,67,"offset"],[1488,69,1508,73],[1488,72,1508,76,"contentOffset"],[1488,85,1508,89],[1488,86,1508,90],[1489,6,1509,8],[1489,7,1509,9],[1489,13,1510,13],[1490,8,1511,12,"dest"],[1490,12,1511,16],[1490,15,1511,19,"clo"],[1490,18,1511,22],[1490,19,1511,23,"decode"],[1490,25,1511,29],[1490,26,1511,30,"b"],[1490,27,1511,31],[1490,29,1511,33,"offset"],[1490,35,1511,39],[1490,36,1511,40],[1491,6,1512,8],[1492,6,1513,8],[1492,13,1513,15,"dest"],[1492,17,1513,19],[1493,4,1514,4],[1494,4,1515,4],[1495,0,1516,0],[1496,0,1517,0],[1497,0,1518,0],[1498,0,1519,0],[1499,0,1520,0],[1500,4,1521,4,"encode"],[1500,10,1521,10,"encode"],[1500,11,1521,11,"src"],[1500,14,1521,14],[1500,16,1521,16,"b"],[1500,17,1521,17],[1500,19,1521,19,"offset"],[1500,25,1521,25],[1500,28,1521,28],[1500,29,1521,29],[1500,31,1521,31],[1501,6,1522,8],[1501,12,1522,14,"vlo"],[1501,15,1522,17],[1501,18,1522,20],[1501,22,1522,24],[1501,23,1522,25,"getSourceVariant"],[1501,39,1522,41],[1501,40,1522,42,"src"],[1501,43,1522,45],[1501,44,1522,46],[1502,6,1523,8],[1502,10,1523,12,"undefined"],[1502,19,1523,21],[1502,24,1523,26,"vlo"],[1502,27,1523,29],[1502,29,1523,31],[1503,8,1524,12],[1503,14,1524,18,"dlo"],[1503,17,1524,21],[1503,20,1524,24],[1503,24,1524,28],[1503,25,1524,29,"discriminator"],[1503,38,1524,42],[1504,8,1525,12],[1505,8,1526,12],[1506,8,1527,12],[1506,14,1527,18,"clo"],[1506,17,1527,21],[1506,20,1527,24],[1506,24,1527,28],[1506,25,1527,29,"defaultLayout"],[1506,38,1527,42],[1507,8,1528,12],[1507,12,1528,16,"contentOffset"],[1507,25,1528,29],[1507,28,1528,32],[1507,29,1528,33],[1508,8,1529,12],[1508,12,1529,16],[1508,16,1529,20],[1508,17,1529,21,"usesPrefixDiscriminator"],[1508,40,1529,44],[1508,42,1529,46],[1509,10,1530,16,"contentOffset"],[1509,23,1530,29],[1509,26,1530,32,"dlo"],[1509,29,1530,35],[1509,30,1530,36,"layout"],[1509,36,1530,42],[1509,37,1530,43,"span"],[1509,41,1530,47],[1510,8,1531,12],[1511,8,1532,12,"dlo"],[1511,11,1532,15],[1511,12,1532,16,"encode"],[1511,18,1532,22],[1511,19,1532,23,"src"],[1511,22,1532,26],[1511,23,1532,27,"dlo"],[1511,26,1532,30],[1511,27,1532,31,"property"],[1511,35,1532,39],[1511,36,1532,40],[1511,38,1532,42,"b"],[1511,39,1532,43],[1511,41,1532,45,"offset"],[1511,47,1532,51],[1511,48,1532,52],[1512,8,1533,12],[1513,8,1534,12],[1514,8,1535,12],[1514,15,1535,19,"contentOffset"],[1514,28,1535,32],[1514,31,1535,35,"clo"],[1514,34,1535,38],[1514,35,1535,39,"encode"],[1514,41,1535,45],[1514,42,1535,46,"src"],[1514,45,1535,49],[1514,46,1535,50,"clo"],[1514,49,1535,53],[1514,50,1535,54,"property"],[1514,58,1535,62],[1514,59,1535,63],[1514,61,1535,65,"b"],[1514,62,1535,66],[1514,64,1535,68,"offset"],[1514,70,1535,74],[1514,73,1535,77,"contentOffset"],[1514,86,1535,90],[1514,87,1535,91],[1515,6,1536,8],[1516,6,1537,8],[1516,13,1537,15,"vlo"],[1516,16,1537,18],[1516,17,1537,19,"encode"],[1516,23,1537,25],[1516,24,1537,26,"src"],[1516,27,1537,29],[1516,29,1537,31,"b"],[1516,30,1537,32],[1516,32,1537,34,"offset"],[1516,38,1537,40],[1516,39,1537,41],[1517,4,1538,4],[1518,4,1539,4],[1519,0,1540,0],[1520,0,1541,0],[1521,0,1542,0],[1522,0,1543,0],[1523,0,1544,0],[1524,0,1545,0],[1525,0,1546,0],[1526,0,1547,0],[1527,0,1548,0],[1528,0,1549,0],[1529,0,1550,0],[1530,0,1551,0],[1531,4,1552,4,"addVariant"],[1531,14,1552,14,"addVariant"],[1531,15,1552,15,"variant"],[1531,22,1552,22],[1531,24,1552,24,"layout"],[1531,30,1552,30],[1531,32,1552,32,"property"],[1531,40,1552,40],[1531,42,1552,42],[1532,6,1553,8],[1532,12,1553,14,"rv"],[1532,14,1553,16],[1532,17,1553,19],[1532,21,1553,23,"VariantLayout"],[1532,34,1553,36],[1532,35,1553,37],[1532,39,1553,41],[1532,41,1553,43,"variant"],[1532,48,1553,50],[1532,50,1553,52,"layout"],[1532,56,1553,58],[1532,58,1553,60,"property"],[1532,66,1553,68],[1532,67,1553,69],[1533,6,1554,8],[1533,10,1554,12],[1533,11,1554,13,"registry"],[1533,19,1554,21],[1533,20,1554,22,"variant"],[1533,27,1554,29],[1533,28,1554,30],[1533,31,1554,33,"rv"],[1533,33,1554,35],[1534,6,1555,8],[1534,13,1555,15,"rv"],[1534,15,1555,17],[1535,4,1556,4],[1536,4,1557,4],[1537,0,1558,0],[1538,0,1559,0],[1539,0,1560,0],[1540,0,1561,0],[1541,0,1562,0],[1542,0,1563,0],[1543,0,1564,0],[1544,0,1565,0],[1545,0,1566,0],[1546,0,1567,0],[1547,0,1568,0],[1548,0,1569,0],[1549,0,1570,0],[1550,4,1571,4,"getVariant"],[1550,14,1571,14,"getVariant"],[1550,15,1571,15,"vb"],[1550,17,1571,17],[1550,19,1571,19,"offset"],[1550,25,1571,25],[1550,28,1571,28],[1550,29,1571,29],[1550,31,1571,31],[1551,6,1572,8],[1551,10,1572,12,"variant"],[1551,17,1572,19],[1552,6,1573,8],[1552,10,1573,12,"vb"],[1552,12,1573,14],[1552,24,1573,26,"Uint8Array"],[1552,34,1573,36],[1552,36,1573,38],[1553,8,1574,12,"variant"],[1553,15,1574,19],[1553,18,1574,22],[1553,22,1574,26],[1553,23,1574,27,"discriminator"],[1553,36,1574,40],[1553,37,1574,41,"decode"],[1553,43,1574,47],[1553,44,1574,48,"vb"],[1553,46,1574,50],[1553,48,1574,52,"offset"],[1553,54,1574,58],[1553,55,1574,59],[1554,6,1575,8],[1554,7,1575,9],[1554,13,1576,13],[1555,8,1577,12,"variant"],[1555,15,1577,19],[1555,18,1577,22,"vb"],[1555,20,1577,24],[1556,6,1578,8],[1557,6,1579,8],[1557,13,1579,15],[1557,17,1579,19],[1557,18,1579,20,"registry"],[1557,26,1579,28],[1557,27,1579,29,"variant"],[1557,34,1579,36],[1557,35,1579,37],[1558,4,1580,4],[1559,2,1581,0],[1560,2,1582,0,"exports"],[1560,9,1582,7],[1560,10,1582,8,"Union"],[1560,15,1582,13],[1560,18,1582,16,"Union"],[1560,23,1582,21],[1561,2,1583,0],[1562,0,1584,0],[1563,0,1585,0],[1564,0,1586,0],[1565,0,1587,0],[1566,0,1588,0],[1567,0,1589,0],[1568,0,1590,0],[1569,0,1591,0],[1570,0,1592,0],[1571,0,1593,0],[1572,0,1594,0],[1573,0,1595,0],[1574,0,1596,0],[1575,0,1597,0],[1576,0,1598,0],[1577,0,1599,0],[1578,0,1600,0],[1579,0,1601,0],[1580,0,1602,0],[1581,0,1603,0],[1582,0,1604,0],[1583,0,1605,0],[1584,0,1606,0],[1585,0,1607,0],[1586,0,1608,0],[1587,0,1609,0],[1588,0,1610,0],[1589,0,1611,0],[1590,2,1612,0],[1590,8,1612,6,"VariantLayout"],[1590,21,1612,19],[1590,30,1612,28,"Layout"],[1590,36,1612,34],[1590,37,1612,35],[1591,4,1613,4,"constructor"],[1591,15,1613,15,"constructor"],[1591,16,1613,16,"union"],[1591,21,1613,21],[1591,23,1613,23,"variant"],[1591,30,1613,30],[1591,32,1613,32,"layout"],[1591,38,1613,38],[1591,40,1613,40,"property"],[1591,48,1613,48],[1591,50,1613,50],[1592,6,1614,8],[1592,10,1614,12],[1592,12,1614,14,"union"],[1592,17,1614,19],[1592,29,1614,31,"Union"],[1592,34,1614,36],[1592,35,1614,37],[1592,37,1614,39],[1593,8,1615,12],[1593,14,1615,18],[1593,18,1615,22,"TypeError"],[1593,27,1615,31],[1593,28,1615,32],[1593,51,1615,55],[1593,52,1615,56],[1594,6,1616,8],[1595,6,1617,8],[1595,10,1617,13],[1595,11,1617,14,"Number"],[1595,17,1617,20],[1595,18,1617,21,"isInteger"],[1595,27,1617,30],[1595,28,1617,31,"variant"],[1595,35,1617,38],[1595,36,1617,39],[1595,40,1617,45],[1595,41,1617,46],[1595,44,1617,49,"variant"],[1595,51,1617,57],[1595,53,1617,59],[1596,8,1618,12],[1596,14,1618,18],[1596,18,1618,22,"TypeError"],[1596,27,1618,31],[1596,28,1618,32],[1596,70,1618,74],[1596,71,1618,75],[1597,6,1619,8],[1598,6,1620,8],[1598,10,1620,13],[1598,18,1620,21],[1598,23,1620,26],[1598,30,1620,33,"layout"],[1598,36,1620,39],[1598,40,1621,16,"undefined"],[1598,49,1621,25],[1598,54,1621,30,"property"],[1598,62,1621,39],[1598,64,1621,41],[1599,8,1622,12,"property"],[1599,16,1622,20],[1599,19,1622,23,"layout"],[1599,25,1622,29],[1600,8,1623,12,"layout"],[1600,14,1623,18],[1600,17,1623,21],[1600,21,1623,25],[1601,6,1624,8],[1602,6,1625,8],[1602,10,1625,12,"layout"],[1602,16,1625,18],[1602,18,1625,20],[1603,8,1626,12],[1603,12,1626,16],[1603,14,1626,18,"layout"],[1603,20,1626,24],[1603,32,1626,36,"Layout"],[1603,38,1626,42],[1603,39,1626,43],[1603,41,1626,45],[1604,10,1627,16],[1604,16,1627,22],[1604,20,1627,26,"TypeError"],[1604,29,1627,35],[1604,30,1627,36],[1604,55,1627,61],[1604,56,1627,62],[1605,8,1628,12],[1606,8,1629,12],[1606,12,1629,17],[1606,16,1629,21],[1606,21,1629,26,"union"],[1606,26,1629,31],[1606,27,1629,32,"defaultLayout"],[1606,40,1629,45],[1606,44,1630,20],[1606,45,1630,21],[1606,49,1630,25,"layout"],[1606,55,1630,31],[1606,56,1630,32,"span"],[1606,60,1630,37],[1606,64,1631,20,"layout"],[1606,70,1631,26],[1606,71,1631,27,"span"],[1606,75,1631,31],[1606,78,1631,34,"union"],[1606,83,1631,39],[1606,84,1631,40,"defaultLayout"],[1606,97,1631,53],[1606,98,1631,54,"span"],[1606,102,1631,59],[1606,104,1631,61],[1607,10,1632,16],[1607,16,1632,22],[1607,20,1632,26,"Error"],[1607,25,1632,31],[1607,26,1632,32],[1607,73,1632,79],[1607,74,1632,80],[1608,8,1633,12],[1609,8,1634,12],[1609,12,1634,16],[1609,20,1634,24],[1609,25,1634,29],[1609,32,1634,36,"property"],[1609,40,1634,44],[1609,42,1634,46],[1610,10,1635,16],[1610,16,1635,22],[1610,20,1635,26,"TypeError"],[1610,29,1635,35],[1610,30,1635,36],[1610,67,1635,73],[1610,68,1635,74],[1611,8,1636,12],[1612,6,1637,8],[1613,6,1638,8],[1613,10,1638,12,"span"],[1613,14,1638,16],[1613,17,1638,19,"union"],[1613,22,1638,24],[1613,23,1638,25,"span"],[1613,27,1638,29],[1614,6,1639,8],[1614,10,1639,12],[1614,11,1639,13],[1614,14,1639,16,"union"],[1614,19,1639,21],[1614,20,1639,22,"span"],[1614,24,1639,26],[1614,26,1639,28],[1615,8,1640,12,"span"],[1615,12,1640,16],[1615,15,1640,19,"layout"],[1615,21,1640,25],[1615,24,1640,28,"layout"],[1615,30,1640,34],[1615,31,1640,35,"span"],[1615,35,1640,39],[1615,38,1640,42],[1615,39,1640,43],[1616,8,1641,12],[1616,12,1641,17],[1616,13,1641,18],[1616,17,1641,22,"span"],[1616,21,1641,26],[1616,25,1641,31,"union"],[1616,30,1641,36],[1616,31,1641,37,"usesPrefixDiscriminator"],[1616,54,1641,60],[1616,56,1641,62],[1617,10,1642,16,"span"],[1617,14,1642,20],[1617,18,1642,24,"union"],[1617,23,1642,29],[1617,24,1642,30,"discriminator"],[1617,37,1642,43],[1617,38,1642,44,"layout"],[1617,44,1642,50],[1617,45,1642,51,"span"],[1617,49,1642,55],[1618,8,1643,12],[1619,6,1644,8],[1620,6,1645,8],[1620,11,1645,13],[1620,12,1645,14,"span"],[1620,16,1645,18],[1620,18,1645,20,"property"],[1620,26,1645,28],[1620,27,1645,29],[1621,6,1646,8],[1622,6,1647,8],[1622,10,1647,12],[1622,11,1647,13,"union"],[1622,16,1647,18],[1622,19,1647,21,"union"],[1622,24,1647,26],[1623,6,1648,8],[1624,0,1649,0],[1625,0,1650,0],[1626,6,1651,8],[1626,10,1651,12],[1626,11,1651,13,"variant"],[1626,18,1651,20],[1626,21,1651,23,"variant"],[1626,28,1651,30],[1627,6,1652,8],[1628,0,1653,0],[1629,0,1654,0],[1630,0,1655,0],[1631,6,1656,8],[1631,10,1656,12],[1631,11,1656,13,"layout"],[1631,17,1656,19],[1631,20,1656,22,"layout"],[1631,26,1656,28],[1631,30,1656,32],[1631,34,1656,36],[1632,4,1657,4],[1633,4,1658,4],[1634,4,1659,4,"getSpan"],[1634,11,1659,11,"getSpan"],[1634,12,1659,12,"b"],[1634,13,1659,13],[1634,15,1659,15,"offset"],[1634,21,1659,21],[1634,24,1659,24],[1634,25,1659,25],[1634,27,1659,27],[1635,6,1660,8],[1635,10,1660,12],[1635,11,1660,13],[1635,15,1660,17],[1635,19,1660,21],[1635,20,1660,22,"span"],[1635,24,1660,26],[1635,26,1660,28],[1636,8,1661,12],[1637,0,1662,0],[1638,8,1663,12],[1638,15,1663,19],[1638,19,1663,23],[1638,20,1663,24,"span"],[1638,24,1663,28],[1639,6,1664,8],[1640,6,1665,8],[1640,10,1665,12,"contentOffset"],[1640,23,1665,25],[1640,26,1665,28],[1640,27,1665,29],[1641,6,1666,8],[1641,10,1666,12],[1641,14,1666,16],[1641,15,1666,17,"union"],[1641,20,1666,22],[1641,21,1666,23,"usesPrefixDiscriminator"],[1641,44,1666,46],[1641,46,1666,48],[1642,8,1667,12,"contentOffset"],[1642,21,1667,25],[1642,24,1667,28],[1642,28,1667,32],[1642,29,1667,33,"union"],[1642,34,1667,38],[1642,35,1667,39,"discriminator"],[1642,48,1667,52],[1642,49,1667,53,"layout"],[1642,55,1667,59],[1642,56,1667,60,"span"],[1642,60,1667,64],[1643,6,1668,8],[1644,6,1669,8],[1645,6,1670,8],[1645,10,1670,12,"span"],[1645,14,1670,16],[1645,17,1670,19],[1645,18,1670,20],[1646,6,1671,8],[1646,10,1671,12],[1646,14,1671,16],[1646,15,1671,17,"layout"],[1646,21,1671,23],[1646,23,1671,25],[1647,8,1672,12,"span"],[1647,12,1672,16],[1647,15,1672,19],[1647,19,1672,23],[1647,20,1672,24,"layout"],[1647,26,1672,30],[1647,27,1672,31,"getSpan"],[1647,34,1672,38],[1647,35,1672,39,"b"],[1647,36,1672,40],[1647,38,1672,42,"offset"],[1647,44,1672,48],[1647,47,1672,51,"contentOffset"],[1647,60,1672,64],[1647,61,1672,65],[1648,6,1673,8],[1649,6,1674,8],[1649,13,1674,15,"contentOffset"],[1649,26,1674,28],[1649,29,1674,31,"span"],[1649,33,1674,35],[1650,4,1675,4],[1651,4,1676,4],[1652,4,1677,4,"decode"],[1652,10,1677,10,"decode"],[1652,11,1677,11,"b"],[1652,12,1677,12],[1652,14,1677,14,"offset"],[1652,20,1677,20],[1652,23,1677,23],[1652,24,1677,24],[1652,26,1677,26],[1653,6,1678,8],[1653,12,1678,14,"dest"],[1653,16,1678,18],[1653,19,1678,21],[1653,23,1678,25],[1653,24,1678,26,"makeDestinationObject"],[1653,45,1678,47],[1653,46,1678,48],[1653,47,1678,49],[1654,6,1679,8],[1654,10,1679,12],[1654,14,1679,16],[1654,19,1679,21],[1654,23,1679,25],[1654,24,1679,26,"union"],[1654,29,1679,31],[1654,30,1679,32,"getVariant"],[1654,40,1679,42],[1654,41,1679,43,"b"],[1654,42,1679,44],[1654,44,1679,46,"offset"],[1654,50,1679,52],[1654,51,1679,53],[1654,53,1679,55],[1655,8,1680,12],[1655,14,1680,18],[1655,18,1680,22,"Error"],[1655,23,1680,27],[1655,24,1680,28],[1655,42,1680,46],[1655,43,1680,47],[1656,6,1681,8],[1657,6,1682,8],[1657,10,1682,12,"contentOffset"],[1657,23,1682,25],[1657,26,1682,28],[1657,27,1682,29],[1658,6,1683,8],[1658,10,1683,12],[1658,14,1683,16],[1658,15,1683,17,"union"],[1658,20,1683,22],[1658,21,1683,23,"usesPrefixDiscriminator"],[1658,44,1683,46],[1658,46,1683,48],[1659,8,1684,12,"contentOffset"],[1659,21,1684,25],[1659,24,1684,28],[1659,28,1684,32],[1659,29,1684,33,"union"],[1659,34,1684,38],[1659,35,1684,39,"discriminator"],[1659,48,1684,52],[1659,49,1684,53,"layout"],[1659,55,1684,59],[1659,56,1684,60,"span"],[1659,60,1684,64],[1660,6,1685,8],[1661,6,1686,8],[1661,10,1686,12],[1661,14,1686,16],[1661,15,1686,17,"layout"],[1661,21,1686,23],[1661,23,1686,25],[1662,8,1687,12,"dest"],[1662,12,1687,16],[1662,13,1687,17],[1662,17,1687,21],[1662,18,1687,22,"property"],[1662,26,1687,30],[1662,27,1687,31],[1662,30,1687,34],[1662,34,1687,38],[1662,35,1687,39,"layout"],[1662,41,1687,45],[1662,42,1687,46,"decode"],[1662,48,1687,52],[1662,49,1687,53,"b"],[1662,50,1687,54],[1662,52,1687,56,"offset"],[1662,58,1687,62],[1662,61,1687,65,"contentOffset"],[1662,74,1687,78],[1662,75,1687,79],[1663,6,1688,8],[1663,7,1688,9],[1663,13,1689,13],[1663,17,1689,17],[1663,21,1689,21],[1663,22,1689,22,"property"],[1663,30,1689,30],[1663,32,1689,32],[1664,8,1690,12,"dest"],[1664,12,1690,16],[1664,13,1690,17],[1664,17,1690,21],[1664,18,1690,22,"property"],[1664,26,1690,30],[1664,27,1690,31],[1664,30,1690,34],[1664,34,1690,38],[1665,6,1691,8],[1665,7,1691,9],[1665,13,1692,13],[1665,17,1692,17],[1665,21,1692,21],[1665,22,1692,22,"union"],[1665,27,1692,27],[1665,28,1692,28,"usesPrefixDiscriminator"],[1665,51,1692,51],[1665,53,1692,53],[1666,8,1693,12,"dest"],[1666,12,1693,16],[1666,13,1693,17],[1666,17,1693,21],[1666,18,1693,22,"union"],[1666,23,1693,27],[1666,24,1693,28,"discriminator"],[1666,37,1693,41],[1666,38,1693,42,"property"],[1666,46,1693,50],[1666,47,1693,51],[1666,50,1693,54],[1666,54,1693,58],[1666,55,1693,59,"variant"],[1666,62,1693,66],[1667,6,1694,8],[1668,6,1695,8],[1668,13,1695,15,"dest"],[1668,17,1695,19],[1669,4,1696,4],[1670,4,1697,4],[1671,4,1698,4,"encode"],[1671,10,1698,10,"encode"],[1671,11,1698,11,"src"],[1671,14,1698,14],[1671,16,1698,16,"b"],[1671,17,1698,17],[1671,19,1698,19,"offset"],[1671,25,1698,25],[1671,28,1698,28],[1671,29,1698,29],[1671,31,1698,31],[1672,6,1699,8],[1672,10,1699,12,"contentOffset"],[1672,23,1699,25],[1672,26,1699,28],[1672,27,1699,29],[1673,6,1700,8],[1673,10,1700,12],[1673,14,1700,16],[1673,15,1700,17,"union"],[1673,20,1700,22],[1673,21,1700,23,"usesPrefixDiscriminator"],[1673,44,1700,46],[1673,46,1700,48],[1674,8,1701,12,"contentOffset"],[1674,21,1701,25],[1674,24,1701,28],[1674,28,1701,32],[1674,29,1701,33,"union"],[1674,34,1701,38],[1674,35,1701,39,"discriminator"],[1674,48,1701,52],[1674,49,1701,53,"layout"],[1674,55,1701,59],[1674,56,1701,60,"span"],[1674,60,1701,64],[1675,6,1702,8],[1676,6,1703,8],[1676,10,1703,12],[1676,14,1703,16],[1676,15,1703,17,"layout"],[1676,21,1703,23],[1676,25,1704,16],[1676,26,1704,17,"Object"],[1676,32,1704,23],[1676,33,1704,24,"prototype"],[1676,42,1704,33],[1676,43,1704,34,"hasOwnProperty"],[1676,57,1704,48],[1676,58,1704,49,"call"],[1676,62,1704,53],[1676,63,1704,54,"src"],[1676,66,1704,57],[1676,68,1704,59],[1676,72,1704,63],[1676,73,1704,64,"property"],[1676,81,1704,72],[1676,82,1704,74],[1676,84,1704,76],[1677,8,1705,12],[1677,14,1705,18],[1677,18,1705,22,"TypeError"],[1677,27,1705,31],[1677,28,1705,32],[1677,53,1705,57],[1677,56,1705,60],[1677,60,1705,64],[1677,61,1705,65,"property"],[1677,69,1705,73],[1677,70,1705,74],[1678,6,1706,8],[1679,6,1707,8],[1679,10,1707,12],[1679,11,1707,13,"union"],[1679,16,1707,18],[1679,17,1707,19,"discriminator"],[1679,30,1707,32],[1679,31,1707,33,"encode"],[1679,37,1707,39],[1679,38,1707,40],[1679,42,1707,44],[1679,43,1707,45,"variant"],[1679,50,1707,52],[1679,52,1707,54,"b"],[1679,53,1707,55],[1679,55,1707,57,"offset"],[1679,61,1707,63],[1679,62,1707,64],[1680,6,1708,8],[1680,10,1708,12,"span"],[1680,14,1708,16],[1680,17,1708,19,"contentOffset"],[1680,30,1708,32],[1681,6,1709,8],[1681,10,1709,12],[1681,14,1709,16],[1681,15,1709,17,"layout"],[1681,21,1709,23],[1681,23,1709,25],[1682,8,1710,12],[1682,12,1710,16],[1682,13,1710,17,"layout"],[1682,19,1710,23],[1682,20,1710,24,"encode"],[1682,26,1710,30],[1682,27,1710,31,"src"],[1682,30,1710,34],[1682,31,1710,35],[1682,35,1710,39],[1682,36,1710,40,"property"],[1682,44,1710,48],[1682,45,1710,49],[1682,47,1710,51,"b"],[1682,48,1710,52],[1682,50,1710,54,"offset"],[1682,56,1710,60],[1682,59,1710,63,"contentOffset"],[1682,72,1710,76],[1682,73,1710,77],[1683,8,1711,12,"span"],[1683,12,1711,16],[1683,16,1711,20],[1683,20,1711,24],[1683,21,1711,25,"layout"],[1683,27,1711,31],[1683,28,1711,32,"getSpan"],[1683,35,1711,39],[1683,36,1711,40,"b"],[1683,37,1711,41],[1683,39,1711,43,"offset"],[1683,45,1711,49],[1683,48,1711,52,"contentOffset"],[1683,61,1711,65],[1683,62,1711,66],[1684,8,1712,12],[1684,12,1712,17],[1684,13,1712,18],[1684,17,1712,22],[1684,21,1712,26],[1684,22,1712,27,"union"],[1684,27,1712,32],[1684,28,1712,33,"span"],[1684,32,1712,37],[1684,36,1713,20,"span"],[1684,40,1713,24],[1684,43,1713,27],[1684,47,1713,31],[1684,48,1713,32,"union"],[1684,53,1713,37],[1684,54,1713,38,"span"],[1684,58,1713,43],[1684,60,1713,45],[1685,10,1714,16],[1685,16,1714,22],[1685,20,1714,26,"Error"],[1685,25,1714,31],[1685,26,1714,32],[1685,69,1714,75],[1685,70,1714,76],[1686,8,1715,12],[1687,6,1716,8],[1688,6,1717,8],[1688,13,1717,15,"span"],[1688,17,1717,19],[1689,4,1718,4],[1690,4,1719,4],[1691,0,1720,0],[1692,4,1721,4,"fromArray"],[1692,13,1721,13,"fromArray"],[1692,14,1721,14,"values"],[1692,20,1721,20],[1692,22,1721,22],[1693,6,1722,8],[1693,10,1722,12],[1693,14,1722,16],[1693,15,1722,17,"layout"],[1693,21,1722,23],[1693,23,1722,25],[1694,8,1723,12],[1694,15,1723,19],[1694,19,1723,23],[1694,20,1723,24,"layout"],[1694,26,1723,30],[1694,27,1723,31,"fromArray"],[1694,36,1723,40],[1694,37,1723,41,"values"],[1694,43,1723,47],[1694,44,1723,48],[1695,6,1724,8],[1696,6,1725,8],[1696,13,1725,15,"undefined"],[1696,22,1725,24],[1697,4,1726,4],[1698,2,1727,0],[1699,2,1728,0,"exports"],[1699,9,1728,7],[1699,10,1728,8,"VariantLayout"],[1699,23,1728,21],[1699,26,1728,24,"VariantLayout"],[1699,39,1728,37],[1700,2,1729,0],[1701,0,1730,0],[1702,0,1731,0],[1703,0,1732,0],[1704,0,1733,0],[1705,0,1734,0],[1706,2,1735,0],[1706,11,1735,9,"fixBitwiseResult"],[1706,27,1735,25,"fixBitwiseResult"],[1706,28,1735,26,"v"],[1706,29,1735,27],[1706,31,1735,29],[1707,4,1736,4],[1707,8,1736,8],[1707,9,1736,9],[1707,12,1736,12,"v"],[1707,13,1736,13],[1707,15,1736,15],[1708,6,1737,8,"v"],[1708,7,1737,9],[1708,11,1737,13],[1708,22,1737,24],[1709,4,1738,4],[1710,4,1739,4],[1710,11,1739,11,"v"],[1710,12,1739,12],[1711,2,1740,0],[1712,2,1741,0],[1713,0,1742,0],[1714,0,1743,0],[1715,0,1744,0],[1716,0,1745,0],[1717,0,1746,0],[1718,0,1747,0],[1719,0,1748,0],[1720,0,1749,0],[1721,0,1750,0],[1722,0,1751,0],[1723,0,1752,0],[1724,0,1753,0],[1725,0,1754,0],[1726,0,1755,0],[1727,0,1756,0],[1728,0,1757,0],[1729,0,1758,0],[1730,0,1759,0],[1731,0,1760,0],[1732,0,1761,0],[1733,0,1762,0],[1734,0,1763,0],[1735,0,1764,0],[1736,0,1765,0],[1737,0,1766,0],[1738,0,1767,0],[1739,0,1768,0],[1740,0,1769,0],[1741,0,1770,0],[1742,0,1771,0],[1743,2,1772,0],[1743,8,1772,6,"BitStructure"],[1743,20,1772,18],[1743,29,1772,27,"Layout"],[1743,35,1772,33],[1743,36,1772,34],[1744,4,1773,4,"constructor"],[1744,15,1773,15,"constructor"],[1744,16,1773,16,"word"],[1744,20,1773,20],[1744,22,1773,22,"msb"],[1744,25,1773,25],[1744,27,1773,27,"property"],[1744,35,1773,35],[1744,37,1773,37],[1745,6,1774,8],[1745,10,1774,12],[1745,12,1774,15,"word"],[1745,16,1774,19],[1745,28,1774,31,"UInt"],[1745,32,1774,35],[1745,36,1775,16,"word"],[1745,40,1775,20],[1745,52,1775,32,"UIntBE"],[1745,58,1775,39],[1745,59,1775,40],[1745,61,1775,42],[1746,8,1776,12],[1746,14,1776,18],[1746,18,1776,22,"TypeError"],[1746,27,1776,31],[1746,28,1776,32],[1746,66,1776,70],[1746,67,1776,71],[1747,6,1777,8],[1748,6,1778,8],[1748,10,1778,13],[1748,18,1778,21],[1748,23,1778,26],[1748,30,1778,33,"msb"],[1748,33,1778,36],[1748,37,1779,16,"undefined"],[1748,46,1779,25],[1748,51,1779,30,"property"],[1748,59,1779,39],[1748,61,1779,41],[1749,8,1780,12,"property"],[1749,16,1780,20],[1749,19,1780,23,"msb"],[1749,22,1780,26],[1750,8,1781,12,"msb"],[1750,11,1781,15],[1750,14,1781,18],[1750,19,1781,23],[1751,6,1782,8],[1752,6,1783,8],[1752,10,1783,12],[1752,11,1783,13],[1752,14,1783,16,"word"],[1752,18,1783,20],[1752,19,1783,21,"span"],[1752,23,1783,25],[1752,25,1783,27],[1753,8,1784,12],[1753,14,1784,18],[1753,18,1784,22,"RangeError"],[1753,28,1784,32],[1753,29,1784,33],[1753,57,1784,61],[1753,58,1784,62],[1754,6,1785,8],[1755,6,1786,8],[1755,11,1786,13],[1755,12,1786,14,"word"],[1755,16,1786,18],[1755,17,1786,19,"span"],[1755,21,1786,23],[1755,23,1786,25,"property"],[1755,31,1786,33],[1755,32,1786,34],[1756,6,1787,8],[1757,0,1788,0],[1758,0,1789,0],[1759,6,1790,8],[1759,10,1790,12],[1759,11,1790,13,"word"],[1759,15,1790,17],[1759,18,1790,20,"word"],[1759,22,1790,24],[1760,6,1791,8],[1761,0,1792,0],[1762,0,1793,0],[1763,0,1794,0],[1764,0,1795,0],[1765,0,1796,0],[1766,0,1797,0],[1767,6,1798,8],[1767,10,1798,12],[1767,11,1798,13,"msb"],[1767,14,1798,16],[1767,17,1798,19],[1767,18,1798,20],[1767,19,1798,21,"msb"],[1767,22,1798,24],[1768,6,1799,8],[1769,0,1800,0],[1770,0,1801,0],[1771,0,1802,0],[1772,0,1803,0],[1773,0,1804,0],[1774,6,1805,8],[1774,10,1805,12],[1774,11,1805,13,"fields"],[1774,17,1805,19],[1774,20,1805,22],[1774,22,1805,24],[1775,6,1806,8],[1776,0,1807,0],[1777,0,1808,0],[1778,6,1809,8],[1778,10,1809,12,"value"],[1778,15,1809,17],[1778,18,1809,20],[1778,19,1809,21],[1779,6,1810,8],[1779,10,1810,12],[1779,11,1810,13,"_packedSetValue"],[1779,26,1810,28],[1779,29,1810,31],[1779,39,1810,41,"v"],[1779,40,1810,42],[1779,42,1810,44],[1780,8,1811,12,"value"],[1780,13,1811,17],[1780,16,1811,20,"fixBitwiseResult"],[1780,32,1811,36],[1780,33,1811,37,"v"],[1780,34,1811,38],[1780,35,1811,39],[1781,8,1812,12],[1781,15,1812,19],[1781,19,1812,23],[1782,6,1813,8],[1782,7,1813,9],[1783,6,1814,8],[1783,10,1814,12],[1783,11,1814,13,"_packedGetValue"],[1783,26,1814,28],[1783,29,1814,31],[1783,41,1814,43],[1784,8,1815,12],[1784,15,1815,19,"value"],[1784,20,1815,24],[1785,6,1816,8],[1785,7,1816,9],[1786,4,1817,4],[1787,4,1818,4],[1788,4,1819,4,"decode"],[1788,10,1819,10,"decode"],[1788,11,1819,11,"b"],[1788,12,1819,12],[1788,14,1819,14,"offset"],[1788,20,1819,20],[1788,23,1819,23],[1788,24,1819,24],[1788,26,1819,26],[1789,6,1820,8],[1789,12,1820,14,"dest"],[1789,16,1820,18],[1789,19,1820,21],[1789,23,1820,25],[1789,24,1820,26,"makeDestinationObject"],[1789,45,1820,47],[1789,46,1820,48],[1789,47,1820,49],[1790,6,1821,8],[1790,12,1821,14,"value"],[1790,17,1821,19],[1790,20,1821,22],[1790,24,1821,26],[1790,25,1821,27,"word"],[1790,29,1821,31],[1790,30,1821,32,"decode"],[1790,36,1821,38],[1790,37,1821,39,"b"],[1790,38,1821,40],[1790,40,1821,42,"offset"],[1790,46,1821,48],[1790,47,1821,49],[1791,6,1822,8],[1791,10,1822,12],[1791,11,1822,13,"_packedSetValue"],[1791,26,1822,28],[1791,27,1822,29,"value"],[1791,32,1822,34],[1791,33,1822,35],[1792,6,1823,8],[1792,11,1823,13],[1792,17,1823,19,"fd"],[1792,19,1823,21],[1792,23,1823,25],[1792,27,1823,29],[1792,28,1823,30,"fields"],[1792,34,1823,36],[1792,36,1823,38],[1793,8,1824,12],[1793,12,1824,16,"undefined"],[1793,21,1824,25],[1793,26,1824,30,"fd"],[1793,28,1824,32],[1793,29,1824,33,"property"],[1793,37,1824,41],[1793,39,1824,43],[1794,10,1825,16,"dest"],[1794,14,1825,20],[1794,15,1825,21,"fd"],[1794,17,1825,23],[1794,18,1825,24,"property"],[1794,26,1825,32],[1794,27,1825,33],[1794,30,1825,36,"fd"],[1794,32,1825,38],[1794,33,1825,39,"decode"],[1794,39,1825,45],[1794,40,1825,46,"b"],[1794,41,1825,47],[1794,42,1825,48],[1795,8,1826,12],[1796,6,1827,8],[1797,6,1828,8],[1797,13,1828,15,"dest"],[1797,17,1828,19],[1798,4,1829,4],[1799,4,1830,4],[1800,0,1831,0],[1801,0,1832,0],[1802,0,1833,0],[1803,0,1834,0],[1804,4,1835,4,"encode"],[1804,10,1835,10,"encode"],[1804,11,1835,11,"src"],[1804,14,1835,14],[1804,16,1835,16,"b"],[1804,17,1835,17],[1804,19,1835,19,"offset"],[1804,25,1835,25],[1804,28,1835,28],[1804,29,1835,29],[1804,31,1835,31],[1805,6,1836,8],[1805,12,1836,14,"value"],[1805,17,1836,19],[1805,20,1836,22],[1805,24,1836,26],[1805,25,1836,27,"word"],[1805,29,1836,31],[1805,30,1836,32,"decode"],[1805,36,1836,38],[1805,37,1836,39,"b"],[1805,38,1836,40],[1805,40,1836,42,"offset"],[1805,46,1836,48],[1805,47,1836,49],[1806,6,1837,8],[1806,10,1837,12],[1806,11,1837,13,"_packedSetValue"],[1806,26,1837,28],[1806,27,1837,29,"value"],[1806,32,1837,34],[1806,33,1837,35],[1807,6,1838,8],[1807,11,1838,13],[1807,17,1838,19,"fd"],[1807,19,1838,21],[1807,23,1838,25],[1807,27,1838,29],[1807,28,1838,30,"fields"],[1807,34,1838,36],[1807,36,1838,38],[1808,8,1839,12],[1808,12,1839,16,"undefined"],[1808,21,1839,25],[1808,26,1839,30,"fd"],[1808,28,1839,32],[1808,29,1839,33,"property"],[1808,37,1839,41],[1808,39,1839,43],[1809,10,1840,16],[1809,16,1840,22,"fv"],[1809,18,1840,24],[1809,21,1840,27,"src"],[1809,24,1840,30],[1809,25,1840,31,"fd"],[1809,27,1840,33],[1809,28,1840,34,"property"],[1809,36,1840,42],[1809,37,1840,43],[1810,10,1841,16],[1810,14,1841,20,"undefined"],[1810,23,1841,29],[1810,28,1841,34,"fv"],[1810,30,1841,36],[1810,32,1841,38],[1811,12,1842,20,"fd"],[1811,14,1842,22],[1811,15,1842,23,"encode"],[1811,21,1842,29],[1811,22,1842,30,"fv"],[1811,24,1842,32],[1811,25,1842,33],[1812,10,1843,16],[1813,8,1844,12],[1814,6,1845,8],[1815,6,1846,8],[1815,13,1846,15],[1815,17,1846,19],[1815,18,1846,20,"word"],[1815,22,1846,24],[1815,23,1846,25,"encode"],[1815,29,1846,31],[1815,30,1846,32],[1815,34,1846,36],[1815,35,1846,37,"_packedGetValue"],[1815,50,1846,52],[1815,51,1846,53],[1815,52,1846,54],[1815,54,1846,56,"b"],[1815,55,1846,57],[1815,57,1846,59,"offset"],[1815,63,1846,65],[1815,64,1846,66],[1816,4,1847,4],[1817,4,1848,4],[1818,0,1849,0],[1819,0,1850,0],[1820,0,1851,0],[1821,0,1852,0],[1822,0,1853,0],[1823,0,1854,0],[1824,0,1855,0],[1825,0,1856,0],[1826,4,1857,4,"addField"],[1826,12,1857,12,"addField"],[1826,13,1857,13,"bits"],[1826,17,1857,17],[1826,19,1857,19,"property"],[1826,27,1857,27],[1826,29,1857,29],[1827,6,1858,8],[1827,12,1858,14,"bf"],[1827,14,1858,16],[1827,17,1858,19],[1827,21,1858,23,"BitField"],[1827,29,1858,31],[1827,30,1858,32],[1827,34,1858,36],[1827,36,1858,38,"bits"],[1827,40,1858,42],[1827,42,1858,44,"property"],[1827,50,1858,52],[1827,51,1858,53],[1828,6,1859,8],[1828,10,1859,12],[1828,11,1859,13,"fields"],[1828,17,1859,19],[1828,18,1859,20,"push"],[1828,22,1859,24],[1828,23,1859,25,"bf"],[1828,25,1859,27],[1828,26,1859,28],[1829,6,1860,8],[1829,13,1860,15,"bf"],[1829,15,1860,17],[1830,4,1861,4],[1831,4,1862,4],[1832,0,1863,0],[1833,0,1864,0],[1834,0,1865,0],[1835,0,1866,0],[1836,0,1867,0],[1837,0,1868,0],[1838,4,1869,4],[1839,4,1870,4],[1840,4,1871,4,"addBoolean"],[1840,14,1871,14,"addBoolean"],[1840,15,1871,15,"property"],[1840,23,1871,23],[1840,25,1871,25],[1841,6,1872,8],[1842,6,1873,8],[1842,12,1873,14,"bf"],[1842,14,1873,16],[1842,17,1873,19],[1842,21,1873,23,"Boolean"],[1842,28,1873,30],[1842,29,1873,31],[1842,33,1873,35],[1842,35,1873,37,"property"],[1842,43,1873,45],[1842,44,1873,46],[1843,6,1874,8],[1843,10,1874,12],[1843,11,1874,13,"fields"],[1843,17,1874,19],[1843,18,1874,20,"push"],[1843,22,1874,24],[1843,23,1874,25,"bf"],[1843,25,1874,27],[1843,26,1874,28],[1844,6,1875,8],[1844,13,1875,15,"bf"],[1844,15,1875,17],[1845,4,1876,4],[1846,4,1877,4],[1847,0,1878,0],[1848,0,1879,0],[1849,0,1880,0],[1850,0,1881,0],[1851,0,1882,0],[1852,0,1883,0],[1853,0,1884,0],[1854,4,1885,4,"fieldFor"],[1854,12,1885,12,"fieldFor"],[1854,13,1885,13,"property"],[1854,21,1885,21],[1854,23,1885,23],[1855,6,1886,8],[1855,10,1886,12],[1855,18,1886,20],[1855,23,1886,25],[1855,30,1886,32,"property"],[1855,38,1886,40],[1855,40,1886,42],[1856,8,1887,12],[1856,14,1887,18],[1856,18,1887,22,"TypeError"],[1856,27,1887,31],[1856,28,1887,32],[1856,53,1887,57],[1856,54,1887,58],[1857,6,1888,8],[1858,6,1889,8],[1858,11,1889,13],[1858,17,1889,19,"fd"],[1858,19,1889,21],[1858,23,1889,25],[1858,27,1889,29],[1858,28,1889,30,"fields"],[1858,34,1889,36],[1858,36,1889,38],[1859,8,1890,12],[1859,12,1890,16,"fd"],[1859,14,1890,18],[1859,15,1890,19,"property"],[1859,23,1890,27],[1859,28,1890,32,"property"],[1859,36,1890,40],[1859,38,1890,42],[1860,10,1891,16],[1860,17,1891,23,"fd"],[1860,19,1891,25],[1861,8,1892,12],[1862,6,1893,8],[1863,6,1894,8],[1863,13,1894,15,"undefined"],[1863,22,1894,24],[1864,4,1895,4],[1865,2,1896,0],[1866,2,1897,0,"exports"],[1866,9,1897,7],[1866,10,1897,8,"BitStructure"],[1866,22,1897,20],[1866,25,1897,23,"BitStructure"],[1866,37,1897,35],[1867,2,1898,0],[1868,0,1899,0],[1869,0,1900,0],[1870,0,1901,0],[1871,0,1902,0],[1872,0,1903,0],[1873,0,1904,0],[1874,0,1905,0],[1875,0,1906,0],[1876,0,1907,0],[1877,0,1908,0],[1878,0,1909,0],[1879,0,1910,0],[1880,0,1911,0],[1881,0,1912,0],[1882,0,1913,0],[1883,0,1914,0],[1884,0,1915,0],[1885,0,1916,0],[1886,0,1917,0],[1887,2,1918,0],[1887,8,1918,6,"BitField"],[1887,16,1918,14],[1887,17,1918,15],[1888,4,1919,4,"constructor"],[1888,15,1919,15,"constructor"],[1888,16,1919,16,"container"],[1888,25,1919,25],[1888,27,1919,27,"bits"],[1888,31,1919,31],[1888,33,1919,33,"property"],[1888,41,1919,41],[1888,43,1919,43],[1889,6,1920,8],[1889,10,1920,12],[1889,12,1920,14,"container"],[1889,21,1920,23],[1889,33,1920,35,"BitStructure"],[1889,45,1920,47],[1889,46,1920,48],[1889,48,1920,50],[1890,8,1921,12],[1890,14,1921,18],[1890,18,1921,22,"TypeError"],[1890,27,1921,31],[1890,28,1921,32],[1890,62,1921,66],[1890,63,1921,67],[1891,6,1922,8],[1892,6,1923,8],[1892,10,1923,13],[1892,11,1923,14,"Number"],[1892,17,1923,20],[1892,18,1923,21,"isInteger"],[1892,27,1923,30],[1892,28,1923,31,"bits"],[1892,32,1923,35],[1892,33,1923,36],[1892,37,1923,42],[1892,38,1923,43],[1892,42,1923,47,"bits"],[1892,46,1923,52],[1892,48,1923,54],[1893,8,1924,12],[1893,14,1924,18],[1893,18,1924,22,"TypeError"],[1893,27,1924,31],[1893,28,1924,32],[1893,59,1924,63],[1893,60,1924,64],[1894,6,1925,8],[1895,6,1926,8],[1895,12,1926,14,"totalBits"],[1895,21,1926,23],[1895,24,1926,26],[1895,25,1926,27],[1895,28,1926,30,"container"],[1895,37,1926,39],[1895,38,1926,40,"span"],[1895,42,1926,44],[1896,6,1927,8],[1896,12,1927,14,"usedBits"],[1896,20,1927,22],[1896,23,1927,25,"container"],[1896,32,1927,34],[1896,33,1927,35,"fields"],[1896,39,1927,41],[1896,40,1927,42,"reduce"],[1896,46,1927,48],[1896,47,1927,49],[1896,48,1927,50,"sum"],[1896,51,1927,53],[1896,53,1927,55,"fd"],[1896,55,1927,57],[1896,60,1927,62,"sum"],[1896,63,1927,65],[1896,66,1927,68,"fd"],[1896,68,1927,70],[1896,69,1927,71,"bits"],[1896,73,1927,75],[1896,75,1927,77],[1896,76,1927,78],[1896,77,1927,79],[1897,6,1928,8],[1897,10,1928,13,"bits"],[1897,14,1928,17],[1897,17,1928,20,"usedBits"],[1897,25,1928,28],[1897,28,1928,32,"totalBits"],[1897,37,1928,41],[1897,39,1928,43],[1898,8,1929,12],[1898,14,1929,18],[1898,18,1929,22,"Error"],[1898,23,1929,27],[1898,24,1929,28],[1898,60,1929,64],[1898,64,1930,19,"totalBits"],[1898,73,1930,28],[1898,76,1930,31,"usedBits"],[1898,84,1930,39],[1898,85,1930,40],[1898,88,1930,43],[1898,94,1930,49],[1898,97,1931,18,"totalBits"],[1898,106,1931,27],[1898,109,1931,30],[1898,119,1931,40],[1898,120,1931,41],[1899,6,1932,8],[1900,6,1933,8],[1901,0,1934,0],[1902,6,1935,8],[1902,10,1935,12],[1902,11,1935,13,"container"],[1902,20,1935,22],[1902,23,1935,25,"container"],[1902,32,1935,34],[1903,6,1936,8],[1904,6,1937,8],[1904,10,1937,12],[1904,11,1937,13,"bits"],[1904,15,1937,17],[1904,18,1937,20,"bits"],[1904,22,1937,24],[1905,6,1938,8],[1906,0,1939,0],[1907,0,1940,0],[1908,0,1941,0],[1909,0,1942,0],[1910,6,1943,8],[1910,10,1943,12],[1910,11,1943,13,"valueMask"],[1910,20,1943,22],[1910,23,1943,25],[1910,24,1943,26],[1910,25,1943,27],[1910,29,1943,31,"bits"],[1910,33,1943,35],[1910,37,1943,39],[1910,38,1943,40],[1911,6,1944,8],[1911,10,1944,12],[1911,12,1944,14],[1911,17,1944,19,"bits"],[1911,21,1944,23],[1911,23,1944,25],[1912,8,1944,27],[1913,8,1945,12],[1913,12,1945,16],[1913,13,1945,17,"valueMask"],[1913,22,1945,26],[1913,25,1945,29],[1913,35,1945,39],[1914,6,1946,8],[1915,6,1947,8],[1916,0,1948,0],[1917,0,1949,0],[1918,6,1950,8],[1918,10,1950,12],[1918,11,1950,13,"start"],[1918,16,1950,18],[1918,19,1950,21,"usedBits"],[1918,27,1950,29],[1919,6,1951,8],[1919,10,1951,12],[1919,14,1951,16],[1919,15,1951,17,"container"],[1919,24,1951,26],[1919,25,1951,27,"msb"],[1919,28,1951,30],[1919,30,1951,32],[1920,8,1952,12],[1920,12,1952,16],[1920,13,1952,17,"start"],[1920,18,1952,22],[1920,21,1952,25,"totalBits"],[1920,30,1952,34],[1920,33,1952,37,"usedBits"],[1920,41,1952,45],[1920,44,1952,48,"bits"],[1920,48,1952,52],[1921,6,1953,8],[1922,6,1954,8],[1923,0,1955,0],[1924,6,1956,8],[1924,10,1956,12],[1924,11,1956,13,"wordMask"],[1924,19,1956,21],[1924,22,1956,24,"fixBitwiseResult"],[1924,38,1956,40],[1924,39,1956,41],[1924,43,1956,45],[1924,44,1956,46,"valueMask"],[1924,53,1956,55],[1924,57,1956,59],[1924,61,1956,63],[1924,62,1956,64,"start"],[1924,67,1956,69],[1924,68,1956,70],[1925,6,1957,8],[1926,0,1958,0],[1927,0,1959,0],[1928,0,1960,0],[1929,0,1961,0],[1930,0,1962,0],[1931,0,1963,0],[1932,0,1964,0],[1933,0,1965,0],[1934,0,1966,0],[1935,6,1967,8],[1935,10,1967,12],[1935,11,1967,13,"property"],[1935,19,1967,21],[1935,22,1967,24,"property"],[1935,30,1967,32],[1936,4,1968,4],[1937,4,1969,4],[1938,0,1970,0],[1939,4,1971,4,"decode"],[1939,10,1971,10,"decode"],[1939,11,1971,11,"b"],[1939,12,1971,12],[1939,14,1971,14,"offset"],[1939,20,1971,20],[1939,22,1971,22],[1940,6,1972,8],[1940,12,1972,14,"word"],[1940,16,1972,18],[1940,19,1972,21],[1940,23,1972,25],[1940,24,1972,26,"container"],[1940,33,1972,35],[1940,34,1972,36,"_packedGetValue"],[1940,49,1972,51],[1940,50,1972,52],[1940,51,1972,53],[1941,6,1973,8],[1941,12,1973,14,"wordValue"],[1941,21,1973,23],[1941,24,1973,26,"fixBitwiseResult"],[1941,40,1973,42],[1941,41,1973,43,"word"],[1941,45,1973,47],[1941,48,1973,50],[1941,52,1973,54],[1941,53,1973,55,"wordMask"],[1941,61,1973,63],[1941,62,1973,64],[1942,6,1974,8],[1942,12,1974,14,"value"],[1942,17,1974,19],[1942,20,1974,22,"wordValue"],[1942,29,1974,31],[1942,34,1974,36],[1942,38,1974,40],[1942,39,1974,41,"start"],[1942,44,1974,46],[1943,6,1975,8],[1943,13,1975,15,"value"],[1943,18,1975,20],[1944,4,1976,4],[1945,4,1977,4],[1946,0,1978,0],[1947,0,1979,0],[1948,0,1980,0],[1949,0,1981,0],[1950,4,1982,4,"encode"],[1950,10,1982,10,"encode"],[1950,11,1982,11,"value"],[1950,16,1982,16],[1950,18,1982,18],[1951,6,1983,8],[1951,10,1983,12],[1951,18,1983,20],[1951,23,1983,25],[1951,30,1983,32,"value"],[1951,35,1983,37],[1951,39,1984,15],[1951,40,1984,16,"Number"],[1951,46,1984,22],[1951,47,1984,23,"isInteger"],[1951,56,1984,32],[1951,57,1984,33,"value"],[1951,62,1984,38],[1951,63,1984,39],[1951,67,1985,16,"value"],[1951,72,1985,21],[1951,77,1985,26,"fixBitwiseResult"],[1951,93,1985,42],[1951,94,1985,43,"value"],[1951,99,1985,48],[1951,102,1985,51],[1951,106,1985,55],[1951,107,1985,56,"valueMask"],[1951,116,1985,65],[1951,117,1985,67],[1951,119,1985,69],[1952,8,1986,12],[1952,14,1986,18],[1952,18,1986,22,"TypeError"],[1952,27,1986,31],[1952,28,1986,32,"nameWithProperty"],[1952,44,1986,48],[1952,45,1986,49],[1952,62,1986,66],[1952,64,1986,68],[1952,68,1986,72],[1952,69,1986,73],[1952,72,1987,18],[1952,111,1987,57],[1952,114,1987,60],[1952,118,1987,64],[1952,119,1987,65,"valueMask"],[1952,128,1987,74],[1952,129,1987,75],[1953,6,1988,8],[1954,6,1989,8],[1954,12,1989,14,"word"],[1954,16,1989,18],[1954,19,1989,21],[1954,23,1989,25],[1954,24,1989,26,"container"],[1954,33,1989,35],[1954,34,1989,36,"_packedGetValue"],[1954,49,1989,51],[1954,50,1989,52],[1954,51,1989,53],[1955,6,1990,8],[1955,12,1990,14,"wordValue"],[1955,21,1990,23],[1955,24,1990,26,"fixBitwiseResult"],[1955,40,1990,42],[1955,41,1990,43,"value"],[1955,46,1990,48],[1955,50,1990,52],[1955,54,1990,56],[1955,55,1990,57,"start"],[1955,60,1990,62],[1955,61,1990,63],[1956,6,1991,8],[1956,10,1991,12],[1956,11,1991,13,"container"],[1956,20,1991,22],[1956,21,1991,23,"_packedSetValue"],[1956,36,1991,38],[1956,37,1991,39,"fixBitwiseResult"],[1956,53,1991,55],[1956,54,1991,56,"word"],[1956,58,1991,60],[1956,61,1991,63],[1956,62,1991,64],[1956,66,1991,68],[1956,67,1991,69,"wordMask"],[1956,75,1991,77],[1956,76,1991,78],[1956,79,1992,14,"wordValue"],[1956,88,1992,23],[1956,89,1992,24],[1957,4,1993,4],[1958,2,1994,0],[1959,2,1995,0,"exports"],[1959,9,1995,7],[1959,10,1995,8,"BitField"],[1959,18,1995,16],[1959,21,1995,19,"BitField"],[1959,29,1995,27],[1960,2,1996,0],[1961,0,1997,0],[1962,0,1998,0],[1963,0,1999,0],[1964,0,2000,0],[1965,0,2001,0],[1966,0,2002,0],[1967,0,2003,0],[1968,0,2004,0],[1969,0,2005,0],[1970,0,2006,0],[1971,0,2007,0],[1972,0,2008,0],[1973,0,2009,0],[1974,0,2010,0],[1975,0,2011,0],[1976,2,2012,0],[1977,2,2013,0],[1977,8,2013,6,"Boolean"],[1977,15,2013,13],[1977,24,2013,22,"BitField"],[1977,32,2013,30],[1977,33,2013,31],[1978,4,2014,4,"constructor"],[1978,15,2014,15,"constructor"],[1978,16,2014,16,"container"],[1978,25,2014,25],[1978,27,2014,27,"property"],[1978,35,2014,35],[1978,37,2014,37],[1979,6,2015,8],[1979,11,2015,13],[1979,12,2015,14,"container"],[1979,21,2015,23],[1979,23,2015,25],[1979,24,2015,26],[1979,26,2015,28,"property"],[1979,34,2015,36],[1979,35,2015,37],[1980,4,2016,4],[1981,4,2017,4],[1982,0,2018,0],[1983,0,2019,0],[1984,4,2020,4,"decode"],[1984,10,2020,10,"decode"],[1984,11,2020,11,"b"],[1984,12,2020,12],[1984,14,2020,14,"offset"],[1984,20,2020,20],[1984,22,2020,22],[1985,6,2021,8],[1985,13,2021,15],[1985,14,2021,16],[1985,15,2021,17],[1985,20,2021,22],[1985,21,2021,23,"decode"],[1985,27,2021,29],[1985,28,2021,30,"b"],[1985,29,2021,31],[1985,31,2021,33,"offset"],[1985,37,2021,39],[1985,38,2021,40],[1986,4,2022,4],[1987,4,2023,4],[1988,4,2024,4,"encode"],[1988,10,2024,10,"encode"],[1988,11,2024,11,"value"],[1988,16,2024,16],[1988,18,2024,18],[1989,6,2025,8],[1989,10,2025,12],[1989,19,2025,21],[1989,24,2025,26],[1989,31,2025,33,"value"],[1989,36,2025,38],[1989,38,2025,40],[1990,8,2026,12],[1991,8,2027,12,"value"],[1991,13,2027,17],[1991,16,2027,20],[1991,17,2027,21,"value"],[1991,22,2027,26],[1992,6,2028,8],[1993,6,2029,8],[1993,11,2029,13],[1993,12,2029,14,"encode"],[1993,18,2029,20],[1993,19,2029,21,"value"],[1993,24,2029,26],[1993,25,2029,27],[1994,4,2030,4],[1995,2,2031,0],[1996,2,2032,0,"exports"],[1996,9,2032,7],[1996,10,2032,8,"Boolean"],[1996,17,2032,15],[1996,20,2032,18,"Boolean"],[1996,27,2032,25],[1997,2,2033,0],[1998,2,2034,0],[1999,0,2035,0],[2000,0,2036,0],[2001,0,2037,0],[2002,0,2038,0],[2003,0,2039,0],[2004,0,2040,0],[2005,0,2041,0],[2006,0,2042,0],[2007,0,2043,0],[2008,0,2044,0],[2009,0,2045,0],[2010,0,2046,0],[2011,0,2047,0],[2012,2,2048,0],[2012,8,2048,6,"Blob"],[2012,12,2048,10],[2012,21,2048,19,"Layout"],[2012,27,2048,25],[2012,28,2048,26],[2013,4,2049,4,"constructor"],[2013,15,2049,15,"constructor"],[2013,16,2049,16,"length"],[2013,22,2049,22],[2013,24,2049,24,"property"],[2013,32,2049,32],[2013,34,2049,34],[2014,6,2050,8],[2014,10,2050,12],[2014,12,2050,16,"length"],[2014,18,2050,22],[2014,30,2050,34,"ExternalLayout"],[2014,44,2050,48],[2014,48,2050,53,"length"],[2014,54,2050,59],[2014,55,2050,60,"isCount"],[2014,62,2050,67],[2014,63,2050,68],[2014,64,2050,69],[2014,68,2051,16,"Number"],[2014,74,2051,22],[2014,75,2051,23,"isInteger"],[2014,84,2051,32],[2014,85,2051,33,"length"],[2014,91,2051,39],[2014,92,2051,40],[2014,96,2051,45],[2014,97,2051,46],[2014,101,2051,50,"length"],[2014,107,2051,58],[2014,108,2051,59],[2014,110,2051,61],[2015,8,2052,12],[2015,14,2052,18],[2015,18,2052,22,"TypeError"],[2015,27,2052,31],[2015,28,2052,32],[2015,62,2052,66],[2015,65,2053,18],[2015,104,2053,57],[2015,105,2053,58],[2016,6,2054,8],[2017,6,2055,8],[2017,10,2055,12,"span"],[2017,14,2055,16],[2017,17,2055,19],[2017,18,2055,20],[2017,19,2055,21],[2018,6,2056,8],[2018,10,2056,12],[2018,12,2056,14,"length"],[2018,18,2056,20],[2018,30,2056,32,"ExternalLayout"],[2018,44,2056,46],[2018,45,2056,47],[2018,47,2056,49],[2019,8,2057,12,"span"],[2019,12,2057,16],[2019,15,2057,19,"length"],[2019,21,2057,25],[2020,6,2058,8],[2021,6,2059,8],[2021,11,2059,13],[2021,12,2059,14,"span"],[2021,16,2059,18],[2021,18,2059,20,"property"],[2021,26,2059,28],[2021,27,2059,29],[2022,6,2060,8],[2023,0,2061,0],[2024,0,2062,0],[2025,0,2063,0],[2026,0,2064,0],[2027,6,2065,8],[2027,10,2065,12],[2027,11,2065,13,"length"],[2027,17,2065,19],[2027,20,2065,22,"length"],[2027,26,2065,28],[2028,4,2066,4],[2029,4,2067,4],[2030,4,2068,4,"getSpan"],[2030,11,2068,11,"getSpan"],[2030,12,2068,12,"b"],[2030,13,2068,13],[2030,15,2068,15,"offset"],[2030,21,2068,21],[2030,23,2068,23],[2031,6,2069,8],[2031,10,2069,12,"span"],[2031,14,2069,16],[2031,17,2069,19],[2031,21,2069,23],[2031,22,2069,24,"span"],[2031,26,2069,28],[2032,6,2070,8],[2032,10,2070,12],[2032,11,2070,13],[2032,14,2070,16,"span"],[2032,18,2070,20],[2032,20,2070,22],[2033,8,2071,12,"span"],[2033,12,2071,16],[2033,15,2071,19],[2033,19,2071,23],[2033,20,2071,24,"length"],[2033,26,2071,30],[2033,27,2071,31,"decode"],[2033,33,2071,37],[2033,34,2071,38,"b"],[2033,35,2071,39],[2033,37,2071,41,"offset"],[2033,43,2071,47],[2033,44,2071,48],[2034,6,2072,8],[2035,6,2073,8],[2035,13,2073,15,"span"],[2035,17,2073,19],[2036,4,2074,4],[2037,4,2075,4],[2038,4,2076,4,"decode"],[2038,10,2076,10,"decode"],[2038,11,2076,11,"b"],[2038,12,2076,12],[2038,14,2076,14,"offset"],[2038,20,2076,20],[2038,23,2076,23],[2038,24,2076,24],[2038,26,2076,26],[2039,6,2077,8],[2039,10,2077,12,"span"],[2039,14,2077,16],[2039,17,2077,19],[2039,21,2077,23],[2039,22,2077,24,"span"],[2039,26,2077,28],[2040,6,2078,8],[2040,10,2078,12],[2040,11,2078,13],[2040,14,2078,16,"span"],[2040,18,2078,20],[2040,20,2078,22],[2041,8,2079,12,"span"],[2041,12,2079,16],[2041,15,2079,19],[2041,19,2079,23],[2041,20,2079,24,"length"],[2041,26,2079,30],[2041,27,2079,31,"decode"],[2041,33,2079,37],[2041,34,2079,38,"b"],[2041,35,2079,39],[2041,37,2079,41,"offset"],[2041,43,2079,47],[2041,44,2079,48],[2042,6,2080,8],[2043,6,2081,8],[2043,13,2081,15,"uint8ArrayToBuffer"],[2043,31,2081,33],[2043,32,2081,34,"b"],[2043,33,2081,35],[2043,34,2081,36],[2043,35,2081,37,"slice"],[2043,40,2081,42],[2043,41,2081,43,"offset"],[2043,47,2081,49],[2043,49,2081,51,"offset"],[2043,55,2081,57],[2043,58,2081,60,"span"],[2043,62,2081,64],[2043,63,2081,65],[2044,4,2082,4],[2045,4,2083,4],[2046,0,2084,0],[2047,0,2085,0],[2048,0,2086,0],[2049,0,2087,0],[2050,4,2088,4,"encode"],[2050,10,2088,10,"encode"],[2050,11,2088,11,"src"],[2050,14,2088,14],[2050,16,2088,16,"b"],[2050,17,2088,17],[2050,19,2088,19,"offset"],[2050,25,2088,25],[2050,27,2088,27],[2051,6,2089,8],[2051,10,2089,12,"span"],[2051,14,2089,16],[2051,17,2089,19],[2051,21,2089,23],[2051,22,2089,24,"length"],[2051,28,2089,30],[2052,6,2090,8],[2052,10,2090,12],[2052,14,2090,16],[2052,15,2090,17,"length"],[2052,21,2090,23],[2052,33,2090,35,"ExternalLayout"],[2052,47,2090,49],[2052,49,2090,51],[2053,8,2091,12,"span"],[2053,12,2091,16],[2053,15,2091,19,"src"],[2053,18,2091,22],[2053,19,2091,23,"length"],[2053,25,2091,29],[2054,6,2092,8],[2055,6,2093,8],[2055,10,2093,12],[2055,12,2093,14,"src"],[2055,15,2093,17],[2055,27,2093,29,"Uint8Array"],[2055,37,2093,39],[2055,41,2093,43,"span"],[2055,45,2093,47],[2055,50,2093,52,"src"],[2055,53,2093,55],[2055,54,2093,56,"length"],[2055,60,2093,62],[2055,61,2093,63],[2055,63,2093,65],[2056,8,2094,12],[2056,14,2094,18],[2056,18,2094,22,"TypeError"],[2056,27,2094,31],[2056,28,2094,32,"nameWithProperty"],[2056,44,2094,48],[2056,45,2094,49],[2056,58,2094,62],[2056,60,2094,64],[2056,64,2094,68],[2056,65,2094,69],[2056,68,2095,18],[2056,88,2095,38],[2056,91,2095,41,"span"],[2056,95,2095,45],[2056,98,2095,48],[2056,119,2095,69],[2056,120,2095,70],[2057,6,2096,8],[2058,6,2097,8],[2058,10,2097,13,"offset"],[2058,16,2097,19],[2058,19,2097,22,"span"],[2058,23,2097,26],[2058,26,2097,30,"b"],[2058,27,2097,31],[2058,28,2097,32,"length"],[2058,34,2097,38],[2058,36,2097,40],[2059,8,2098,12],[2059,14,2098,18],[2059,18,2098,22,"RangeError"],[2059,28,2098,32],[2059,29,2098,33],[2059,59,2098,63],[2059,60,2098,64],[2060,6,2099,8],[2061,6,2100,8],[2061,12,2100,14,"srcBuffer"],[2061,21,2100,23],[2061,24,2100,26,"uint8ArrayToBuffer"],[2061,42,2100,44],[2061,43,2100,45,"src"],[2061,46,2100,48],[2061,47,2100,49],[2062,6,2101,8,"uint8ArrayToBuffer"],[2062,24,2101,26],[2062,25,2101,27,"b"],[2062,26,2101,28],[2062,27,2101,29],[2062,28,2101,30,"write"],[2062,33,2101,35],[2062,34,2101,36,"srcBuffer"],[2062,43,2101,45],[2062,44,2101,46,"toString"],[2062,52,2101,54],[2062,53,2101,55],[2062,58,2101,60],[2062,59,2101,61],[2062,61,2101,63,"offset"],[2062,67,2101,69],[2062,69,2101,71,"span"],[2062,73,2101,75],[2062,75,2101,77],[2062,80,2101,82],[2062,81,2101,83],[2063,6,2102,8],[2063,10,2102,12],[2063,14,2102,16],[2063,15,2102,17,"length"],[2063,21,2102,23],[2063,33,2102,35,"ExternalLayout"],[2063,47,2102,49],[2063,49,2102,51],[2064,8,2103,12],[2064,12,2103,16],[2064,13,2103,17,"length"],[2064,19,2103,23],[2064,20,2103,24,"encode"],[2064,26,2103,30],[2064,27,2103,31,"span"],[2064,31,2103,35],[2064,33,2103,37,"b"],[2064,34,2103,38],[2064,36,2103,40,"offset"],[2064,42,2103,46],[2064,43,2103,47],[2065,6,2104,8],[2066,6,2105,8],[2066,13,2105,15,"span"],[2066,17,2105,19],[2067,4,2106,4],[2068,2,2107,0],[2069,2,2108,0,"exports"],[2069,9,2108,7],[2069,10,2108,8,"Blob"],[2069,14,2108,12],[2069,17,2108,15,"Blob"],[2069,21,2108,19],[2070,2,2109,0],[2071,0,2110,0],[2072,0,2111,0],[2073,0,2112,0],[2074,0,2113,0],[2075,0,2114,0],[2076,0,2115,0],[2077,0,2116,0],[2078,0,2117,0],[2079,0,2118,0],[2080,0,2119,0],[2081,0,2120,0],[2082,0,2121,0],[2083,2,2122,0],[2083,8,2122,6,"CString"],[2083,15,2122,13],[2083,24,2122,22,"Layout"],[2083,30,2122,28],[2083,31,2122,29],[2084,4,2123,4,"constructor"],[2084,15,2123,15,"constructor"],[2084,16,2123,16,"property"],[2084,24,2123,24],[2084,26,2123,26],[2085,6,2124,8],[2085,11,2124,13],[2085,12,2124,14],[2085,13,2124,15],[2085,14,2124,16],[2085,16,2124,18,"property"],[2085,24,2124,26],[2085,25,2124,27],[2086,4,2125,4],[2087,4,2126,4],[2088,4,2127,4,"getSpan"],[2088,11,2127,11,"getSpan"],[2088,12,2127,12,"b"],[2088,13,2127,13],[2088,15,2127,15,"offset"],[2088,21,2127,21],[2088,24,2127,24],[2088,25,2127,25],[2088,27,2127,27],[2089,6,2128,8,"checkUint8Array"],[2089,21,2128,23],[2089,22,2128,24,"b"],[2089,23,2128,25],[2089,24,2128,26],[2090,6,2129,8],[2090,10,2129,12,"idx"],[2090,13,2129,15],[2090,16,2129,18,"offset"],[2090,22,2129,24],[2091,6,2130,8],[2091,13,2130,16,"idx"],[2091,16,2130,19],[2091,19,2130,22,"b"],[2091,20,2130,23],[2091,21,2130,24,"length"],[2091,27,2130,30],[2091,31,2130,36],[2091,32,2130,37],[2091,37,2130,42,"b"],[2091,38,2130,43],[2091,39,2130,44,"idx"],[2091,42,2130,47],[2091,43,2130,49],[2091,45,2130,51],[2092,8,2131,12,"idx"],[2092,11,2131,15],[2092,15,2131,19],[2092,16,2131,20],[2093,6,2132,8],[2094,6,2133,8],[2094,13,2133,15],[2094,14,2133,16],[2094,17,2133,19,"idx"],[2094,20,2133,22],[2094,23,2133,25,"offset"],[2094,29,2133,31],[2095,4,2134,4],[2096,4,2135,4],[2097,4,2136,4,"decode"],[2097,10,2136,10,"decode"],[2097,11,2136,11,"b"],[2097,12,2136,12],[2097,14,2136,14,"offset"],[2097,20,2136,20],[2097,23,2136,23],[2097,24,2136,24],[2097,26,2136,26],[2098,6,2137,8],[2098,12,2137,14,"span"],[2098,16,2137,18],[2098,19,2137,21],[2098,23,2137,25],[2098,24,2137,26,"getSpan"],[2098,31,2137,33],[2098,32,2137,34,"b"],[2098,33,2137,35],[2098,35,2137,37,"offset"],[2098,41,2137,43],[2098,42,2137,44],[2099,6,2138,8],[2099,13,2138,15,"uint8ArrayToBuffer"],[2099,31,2138,33],[2099,32,2138,34,"b"],[2099,33,2138,35],[2099,34,2138,36],[2099,35,2138,37,"slice"],[2099,40,2138,42],[2099,41,2138,43,"offset"],[2099,47,2138,49],[2099,49,2138,51,"offset"],[2099,55,2138,57],[2099,58,2138,60,"span"],[2099,62,2138,64],[2099,65,2138,67],[2099,66,2138,68],[2099,67,2138,69],[2099,68,2138,70,"toString"],[2099,76,2138,78],[2099,77,2138,79],[2099,84,2138,86],[2099,85,2138,87],[2100,4,2139,4],[2101,4,2140,4],[2102,4,2141,4,"encode"],[2102,10,2141,10,"encode"],[2102,11,2141,11,"src"],[2102,14,2141,14],[2102,16,2141,16,"b"],[2102,17,2141,17],[2102,19,2141,19,"offset"],[2102,25,2141,25],[2102,28,2141,28],[2102,29,2141,29],[2102,31,2141,31],[2103,6,2142,8],[2104,0,2143,0],[2105,0,2144,0],[2106,6,2145,8],[2106,10,2145,12],[2106,18,2145,20],[2106,23,2145,25],[2106,30,2145,32,"src"],[2106,33,2145,35],[2106,35,2145,37],[2107,8,2146,12,"src"],[2107,11,2146,15],[2107,14,2146,18,"String"],[2107,20,2146,24],[2107,21,2146,25,"src"],[2107,24,2146,28],[2107,25,2146,29],[2108,6,2147,8],[2109,6,2148,8],[2109,12,2148,14,"srcb"],[2109,16,2148,18],[2109,19,2148,21,"buffer_1"],[2109,27,2148,29],[2109,28,2148,30,"Buffer"],[2109,34,2148,36],[2109,35,2148,37,"from"],[2109,39,2148,41],[2109,40,2148,42,"src"],[2109,43,2148,45],[2109,45,2148,47],[2109,51,2148,53],[2109,52,2148,54],[2110,6,2149,8],[2110,12,2149,14,"span"],[2110,16,2149,18],[2110,19,2149,21,"srcb"],[2110,23,2149,25],[2110,24,2149,26,"length"],[2110,30,2149,32],[2111,6,2150,8],[2111,10,2150,13,"offset"],[2111,16,2150,19],[2111,19,2150,22,"span"],[2111,23,2150,26],[2111,26,2150,30,"b"],[2111,27,2150,31],[2111,28,2150,32,"length"],[2111,34,2150,38],[2111,36,2150,40],[2112,8,2151,12],[2112,14,2151,18],[2112,18,2151,22,"RangeError"],[2112,28,2151,32],[2112,29,2151,33],[2112,55,2151,59],[2112,56,2151,60],[2113,6,2152,8],[2114,6,2153,8],[2114,12,2153,14,"buffer"],[2114,18,2153,20],[2114,21,2153,23,"uint8ArrayToBuffer"],[2114,39,2153,41],[2114,40,2153,42,"b"],[2114,41,2153,43],[2114,42,2153,44],[2115,6,2154,8,"srcb"],[2115,10,2154,12],[2115,11,2154,13,"copy"],[2115,15,2154,17],[2115,16,2154,18,"buffer"],[2115,22,2154,24],[2115,24,2154,26,"offset"],[2115,30,2154,32],[2115,31,2154,33],[2116,6,2155,8,"buffer"],[2116,12,2155,14],[2116,13,2155,15,"offset"],[2116,19,2155,21],[2116,22,2155,24,"span"],[2116,26,2155,28],[2116,27,2155,29],[2116,30,2155,32],[2116,31,2155,33],[2117,6,2156,8],[2117,13,2156,15,"span"],[2117,17,2156,19],[2117,20,2156,22],[2117,21,2156,23],[2118,4,2157,4],[2119,2,2158,0],[2120,2,2159,0,"exports"],[2120,9,2159,7],[2120,10,2159,8,"CString"],[2120,17,2159,15],[2120,20,2159,18,"CString"],[2120,27,2159,25],[2121,2,2160,0],[2122,0,2161,0],[2123,0,2162,0],[2124,0,2163,0],[2125,0,2164,0],[2126,0,2165,0],[2127,0,2166,0],[2128,0,2167,0],[2129,0,2168,0],[2130,0,2169,0],[2131,0,2170,0],[2132,0,2171,0],[2133,0,2172,0],[2134,0,2173,0],[2135,0,2174,0],[2136,0,2175,0],[2137,0,2176,0],[2138,0,2177,0],[2139,0,2178,0],[2140,2,2179,0],[2140,8,2179,6,"UTF8"],[2140,12,2179,10],[2140,21,2179,19,"Layout"],[2140,27,2179,25],[2140,28,2179,26],[2141,4,2180,4,"constructor"],[2141,15,2180,15,"constructor"],[2141,16,2180,16,"maxSpan"],[2141,23,2180,23],[2141,25,2180,25,"property"],[2141,33,2180,33],[2141,35,2180,35],[2142,6,2181,8],[2142,10,2181,13],[2142,18,2181,21],[2142,23,2181,26],[2142,30,2181,33,"maxSpan"],[2142,37,2181,40],[2142,41,2181,46,"undefined"],[2142,50,2181,55],[2142,55,2181,60,"property"],[2142,63,2181,69],[2142,65,2181,71],[2143,8,2182,12,"property"],[2143,16,2182,20],[2143,19,2182,23,"maxSpan"],[2143,26,2182,30],[2144,8,2183,12,"maxSpan"],[2144,15,2183,19],[2144,18,2183,22,"undefined"],[2144,27,2183,31],[2145,6,2184,8],[2146,6,2185,8],[2146,10,2185,12,"undefined"],[2146,19,2185,21],[2146,24,2185,26,"maxSpan"],[2146,31,2185,33],[2146,33,2185,35],[2147,8,2186,12,"maxSpan"],[2147,15,2186,19],[2147,18,2186,22],[2147,19,2186,23],[2147,20,2186,24],[2148,6,2187,8],[2148,7,2187,9],[2148,13,2188,13],[2148,17,2188,17],[2148,18,2188,18,"Number"],[2148,24,2188,24],[2148,25,2188,25,"isInteger"],[2148,34,2188,34],[2148,35,2188,35,"maxSpan"],[2148,42,2188,42],[2148,43,2188,43],[2148,45,2188,45],[2149,8,2189,12],[2149,14,2189,18],[2149,18,2189,22,"TypeError"],[2149,27,2189,31],[2149,28,2189,32],[2149,56,2189,60],[2149,57,2189,61],[2150,6,2190,8],[2151,6,2191,8],[2151,11,2191,13],[2151,12,2191,14],[2151,13,2191,15],[2151,14,2191,16],[2151,16,2191,18,"property"],[2151,24,2191,26],[2151,25,2191,27],[2152,6,2192,8],[2153,0,2193,0],[2154,0,2194,0],[2155,0,2195,0],[2156,0,2196,0],[2157,0,2197,0],[2158,0,2198,0],[2159,0,2199,0],[2160,6,2200,8],[2160,10,2200,12],[2160,11,2200,13,"maxSpan"],[2160,18,2200,20],[2160,21,2200,23,"maxSpan"],[2160,28,2200,30],[2161,4,2201,4],[2162,4,2202,4],[2163,4,2203,4,"getSpan"],[2163,11,2203,11,"getSpan"],[2163,12,2203,12,"b"],[2163,13,2203,13],[2163,15,2203,15,"offset"],[2163,21,2203,21],[2163,24,2203,24],[2163,25,2203,25],[2163,27,2203,27],[2164,6,2204,8,"checkUint8Array"],[2164,21,2204,23],[2164,22,2204,24,"b"],[2164,23,2204,25],[2164,24,2204,26],[2165,6,2205,8],[2165,13,2205,15,"b"],[2165,14,2205,16],[2165,15,2205,17,"length"],[2165,21,2205,23],[2165,24,2205,26,"offset"],[2165,30,2205,32],[2166,4,2206,4],[2167,4,2207,4],[2168,4,2208,4,"decode"],[2168,10,2208,10,"decode"],[2168,11,2208,11,"b"],[2168,12,2208,12],[2168,14,2208,14,"offset"],[2168,20,2208,20],[2168,23,2208,23],[2168,24,2208,24],[2168,26,2208,26],[2169,6,2209,8],[2169,12,2209,14,"span"],[2169,16,2209,18],[2169,19,2209,21],[2169,23,2209,25],[2169,24,2209,26,"getSpan"],[2169,31,2209,33],[2169,32,2209,34,"b"],[2169,33,2209,35],[2169,35,2209,37,"offset"],[2169,41,2209,43],[2169,42,2209,44],[2170,6,2210,8],[2170,10,2210,13],[2170,11,2210,14],[2170,15,2210,18],[2170,19,2210,22],[2170,20,2210,23,"maxSpan"],[2170,27,2210,30],[2170,31,2211,16],[2170,35,2211,20],[2170,36,2211,21,"maxSpan"],[2170,43,2211,28],[2170,46,2211,31,"span"],[2170,50,2211,36],[2170,52,2211,38],[2171,8,2212,12],[2171,14,2212,18],[2171,18,2212,22,"RangeError"],[2171,28,2212,32],[2171,29,2212,33],[2171,58,2212,62],[2171,59,2212,63],[2172,6,2213,8],[2173,6,2214,8],[2173,13,2214,15,"uint8ArrayToBuffer"],[2173,31,2214,33],[2173,32,2214,34,"b"],[2173,33,2214,35],[2173,34,2214,36],[2173,35,2214,37,"slice"],[2173,40,2214,42],[2173,41,2214,43,"offset"],[2173,47,2214,49],[2173,49,2214,51,"offset"],[2173,55,2214,57],[2173,58,2214,60,"span"],[2173,62,2214,64],[2173,63,2214,65],[2173,64,2214,66,"toString"],[2173,72,2214,74],[2173,73,2214,75],[2173,80,2214,82],[2173,81,2214,83],[2174,4,2215,4],[2175,4,2216,4],[2176,4,2217,4,"encode"],[2176,10,2217,10,"encode"],[2176,11,2217,11,"src"],[2176,14,2217,14],[2176,16,2217,16,"b"],[2176,17,2217,17],[2176,19,2217,19,"offset"],[2176,25,2217,25],[2176,28,2217,28],[2176,29,2217,29],[2176,31,2217,31],[2177,6,2218,8],[2178,0,2219,0],[2179,0,2220,0],[2180,6,2221,8],[2180,10,2221,12],[2180,18,2221,20],[2180,23,2221,25],[2180,30,2221,32,"src"],[2180,33,2221,35],[2180,35,2221,37],[2181,8,2222,12,"src"],[2181,11,2222,15],[2181,14,2222,18,"String"],[2181,20,2222,24],[2181,21,2222,25,"src"],[2181,24,2222,28],[2181,25,2222,29],[2182,6,2223,8],[2183,6,2224,8],[2183,12,2224,14,"srcb"],[2183,16,2224,18],[2183,19,2224,21,"buffer_1"],[2183,27,2224,29],[2183,28,2224,30,"Buffer"],[2183,34,2224,36],[2183,35,2224,37,"from"],[2183,39,2224,41],[2183,40,2224,42,"src"],[2183,43,2224,45],[2183,45,2224,47],[2183,51,2224,53],[2183,52,2224,54],[2184,6,2225,8],[2184,12,2225,14,"span"],[2184,16,2225,18],[2184,19,2225,21,"srcb"],[2184,23,2225,25],[2184,24,2225,26,"length"],[2184,30,2225,32],[2185,6,2226,8],[2185,10,2226,13],[2185,11,2226,14],[2185,15,2226,18],[2185,19,2226,22],[2185,20,2226,23,"maxSpan"],[2185,27,2226,30],[2185,31,2227,16],[2185,35,2227,20],[2185,36,2227,21,"maxSpan"],[2185,43,2227,28],[2185,46,2227,31,"span"],[2185,50,2227,36],[2185,52,2227,38],[2186,8,2228,12],[2186,14,2228,18],[2186,18,2228,22,"RangeError"],[2186,28,2228,32],[2186,29,2228,33],[2186,58,2228,62],[2186,59,2228,63],[2187,6,2229,8],[2188,6,2230,8],[2188,10,2230,13,"offset"],[2188,16,2230,19],[2188,19,2230,22,"span"],[2188,23,2230,26],[2188,26,2230,30,"b"],[2188,27,2230,31],[2188,28,2230,32,"length"],[2188,34,2230,38],[2188,36,2230,40],[2189,8,2231,12],[2189,14,2231,18],[2189,18,2231,22,"RangeError"],[2189,28,2231,32],[2189,29,2231,33],[2189,55,2231,59],[2189,56,2231,60],[2190,6,2232,8],[2191,6,2233,8,"srcb"],[2191,10,2233,12],[2191,11,2233,13,"copy"],[2191,15,2233,17],[2191,16,2233,18,"uint8ArrayToBuffer"],[2191,34,2233,36],[2191,35,2233,37,"b"],[2191,36,2233,38],[2191,37,2233,39],[2191,39,2233,41,"offset"],[2191,45,2233,47],[2191,46,2233,48],[2192,6,2234,8],[2192,13,2234,15,"span"],[2192,17,2234,19],[2193,4,2235,4],[2194,2,2236,0],[2195,2,2237,0,"exports"],[2195,9,2237,7],[2195,10,2237,8,"UTF8"],[2195,14,2237,12],[2195,17,2237,15,"UTF8"],[2195,21,2237,19],[2196,2,2238,0],[2197,0,2239,0],[2198,0,2240,0],[2199,0,2241,0],[2200,0,2242,0],[2201,0,2243,0],[2202,0,2244,0],[2203,0,2245,0],[2204,0,2246,0],[2205,0,2247,0],[2206,0,2248,0],[2207,0,2249,0],[2208,0,2250,0],[2209,0,2251,0],[2210,0,2252,0],[2211,0,2253,0],[2212,0,2254,0],[2213,0,2255,0],[2214,0,2256,0],[2215,2,2257,0],[2215,8,2257,6,"Constant"],[2215,16,2257,14],[2215,25,2257,23,"Layout"],[2215,31,2257,29],[2215,32,2257,30],[2216,4,2258,4,"constructor"],[2216,15,2258,15,"constructor"],[2216,16,2258,16,"value"],[2216,21,2258,21],[2216,23,2258,23,"property"],[2216,31,2258,31],[2216,33,2258,33],[2217,6,2259,8],[2217,11,2259,13],[2217,12,2259,14],[2217,13,2259,15],[2217,15,2259,17,"property"],[2217,23,2259,25],[2217,24,2259,26],[2218,6,2260,8],[2219,0,2261,0],[2220,0,2262,0],[2221,0,2263,0],[2222,0,2264,0],[2223,0,2265,0],[2224,0,2266,0],[2225,0,2267,0],[2226,0,2268,0],[2227,6,2269,8],[2227,10,2269,12],[2227,11,2269,13,"value"],[2227,16,2269,18],[2227,19,2269,21,"value"],[2227,24,2269,26],[2228,4,2270,4],[2229,4,2271,4],[2230,4,2272,4,"decode"],[2230,10,2272,10,"decode"],[2230,11,2272,11,"b"],[2230,12,2272,12],[2230,14,2272,14,"offset"],[2230,20,2272,20],[2230,22,2272,22],[2231,6,2273,8],[2231,13,2273,15],[2231,17,2273,19],[2231,18,2273,20,"value"],[2231,23,2273,25],[2232,4,2274,4],[2233,4,2275,4],[2234,4,2276,4,"encode"],[2234,10,2276,10,"encode"],[2234,11,2276,11,"src"],[2234,14,2276,14],[2234,16,2276,16,"b"],[2234,17,2276,17],[2234,19,2276,19,"offset"],[2234,25,2276,25],[2234,27,2276,27],[2235,6,2277,8],[2236,6,2278,8],[2236,13,2278,15],[2236,14,2278,16],[2237,4,2279,4],[2238,2,2280,0],[2239,2,2281,0,"exports"],[2239,9,2281,7],[2239,10,2281,8,"Constant"],[2239,18,2281,16],[2239,21,2281,19,"Constant"],[2239,29,2281,27],[2240,2,2282,0],[2241,2,2283,0,"exports"],[2241,9,2283,7],[2241,10,2283,8,"greedy"],[2241,16,2283,14],[2241,19,2283,18],[2241,20,2283,19,"elementSpan"],[2241,31,2283,30],[2241,33,2283,32,"property"],[2241,41,2283,40],[2241,46,2283,45],[2241,50,2283,49,"GreedyCount"],[2241,61,2283,60],[2241,62,2283,61,"elementSpan"],[2241,73,2283,72],[2241,75,2283,74,"property"],[2241,83,2283,82],[2241,84,2283,84],[2242,2,2284,0],[2243,2,2285,0,"exports"],[2243,9,2285,7],[2243,10,2285,8,"offset"],[2243,16,2285,14],[2243,19,2285,18],[2243,20,2285,19,"layout"],[2243,26,2285,25],[2243,28,2285,27,"offset"],[2243,34,2285,33],[2243,36,2285,35,"property"],[2243,44,2285,43],[2243,49,2285,48],[2243,53,2285,52,"OffsetLayout"],[2243,65,2285,64],[2243,66,2285,65,"layout"],[2243,72,2285,71],[2243,74,2285,73,"offset"],[2243,80,2285,79],[2243,82,2285,81,"property"],[2243,90,2285,89],[2243,91,2285,91],[2244,2,2286,0],[2245,0,2287,0],[2246,2,2288,0,"exports"],[2246,9,2288,7],[2246,10,2288,8,"u8"],[2246,12,2288,10],[2246,15,2288,15,"property"],[2246,23,2288,23],[2246,27,2288,28],[2246,31,2288,32,"UInt"],[2246,35,2288,36],[2246,36,2288,37],[2246,37,2288,38],[2246,39,2288,40,"property"],[2246,47,2288,48],[2246,48,2288,50],[2247,2,2289,0],[2248,0,2290,0],[2249,2,2291,0,"exports"],[2249,9,2291,7],[2249,10,2291,8,"u16"],[2249,13,2291,11],[2249,16,2291,16,"property"],[2249,24,2291,24],[2249,28,2291,29],[2249,32,2291,33,"UInt"],[2249,36,2291,37],[2249,37,2291,38],[2249,38,2291,39],[2249,40,2291,41,"property"],[2249,48,2291,49],[2249,49,2291,51],[2250,2,2292,0],[2251,0,2293,0],[2252,2,2294,0,"exports"],[2252,9,2294,7],[2252,10,2294,8,"u24"],[2252,13,2294,11],[2252,16,2294,16,"property"],[2252,24,2294,24],[2252,28,2294,29],[2252,32,2294,33,"UInt"],[2252,36,2294,37],[2252,37,2294,38],[2252,38,2294,39],[2252,40,2294,41,"property"],[2252,48,2294,49],[2252,49,2294,51],[2253,2,2295,0],[2254,0,2296,0],[2255,2,2297,0,"exports"],[2255,9,2297,7],[2255,10,2297,8,"u32"],[2255,13,2297,11],[2255,16,2297,16,"property"],[2255,24,2297,24],[2255,28,2297,29],[2255,32,2297,33,"UInt"],[2255,36,2297,37],[2255,37,2297,38],[2255,38,2297,39],[2255,40,2297,41,"property"],[2255,48,2297,49],[2255,49,2297,51],[2256,2,2298,0],[2257,0,2299,0],[2258,2,2300,0,"exports"],[2258,9,2300,7],[2258,10,2300,8,"u40"],[2258,13,2300,11],[2258,16,2300,16,"property"],[2258,24,2300,24],[2258,28,2300,29],[2258,32,2300,33,"UInt"],[2258,36,2300,37],[2258,37,2300,38],[2258,38,2300,39],[2258,40,2300,41,"property"],[2258,48,2300,49],[2258,49,2300,51],[2259,2,2301,0],[2260,0,2302,0],[2261,2,2303,0,"exports"],[2261,9,2303,7],[2261,10,2303,8,"u48"],[2261,13,2303,11],[2261,16,2303,16,"property"],[2261,24,2303,24],[2261,28,2303,29],[2261,32,2303,33,"UInt"],[2261,36,2303,37],[2261,37,2303,38],[2261,38,2303,39],[2261,40,2303,41,"property"],[2261,48,2303,49],[2261,49,2303,51],[2262,2,2304,0],[2263,0,2305,0],[2264,2,2306,0,"exports"],[2264,9,2306,7],[2264,10,2306,8,"nu64"],[2264,14,2306,12],[2264,17,2306,17,"property"],[2264,25,2306,25],[2264,29,2306,30],[2264,33,2306,34,"NearUInt64"],[2264,43,2306,44],[2264,44,2306,45,"property"],[2264,52,2306,53],[2264,53,2306,55],[2265,2,2307,0],[2266,0,2308,0],[2267,2,2309,0,"exports"],[2267,9,2309,7],[2267,10,2309,8,"u16be"],[2267,15,2309,13],[2267,18,2309,18,"property"],[2267,26,2309,26],[2267,30,2309,31],[2267,34,2309,35,"UIntBE"],[2267,40,2309,41],[2267,41,2309,42],[2267,42,2309,43],[2267,44,2309,45,"property"],[2267,52,2309,53],[2267,53,2309,55],[2268,2,2310,0],[2269,0,2311,0],[2270,2,2312,0,"exports"],[2270,9,2312,7],[2270,10,2312,8,"u24be"],[2270,15,2312,13],[2270,18,2312,18,"property"],[2270,26,2312,26],[2270,30,2312,31],[2270,34,2312,35,"UIntBE"],[2270,40,2312,41],[2270,41,2312,42],[2270,42,2312,43],[2270,44,2312,45,"property"],[2270,52,2312,53],[2270,53,2312,55],[2271,2,2313,0],[2272,0,2314,0],[2273,2,2315,0,"exports"],[2273,9,2315,7],[2273,10,2315,8,"u32be"],[2273,15,2315,13],[2273,18,2315,18,"property"],[2273,26,2315,26],[2273,30,2315,31],[2273,34,2315,35,"UIntBE"],[2273,40,2315,41],[2273,41,2315,42],[2273,42,2315,43],[2273,44,2315,45,"property"],[2273,52,2315,53],[2273,53,2315,55],[2274,2,2316,0],[2275,0,2317,0],[2276,2,2318,0,"exports"],[2276,9,2318,7],[2276,10,2318,8,"u40be"],[2276,15,2318,13],[2276,18,2318,18,"property"],[2276,26,2318,26],[2276,30,2318,31],[2276,34,2318,35,"UIntBE"],[2276,40,2318,41],[2276,41,2318,42],[2276,42,2318,43],[2276,44,2318,45,"property"],[2276,52,2318,53],[2276,53,2318,55],[2277,2,2319,0],[2278,0,2320,0],[2279,2,2321,0,"exports"],[2279,9,2321,7],[2279,10,2321,8,"u48be"],[2279,15,2321,13],[2279,18,2321,18,"property"],[2279,26,2321,26],[2279,30,2321,31],[2279,34,2321,35,"UIntBE"],[2279,40,2321,41],[2279,41,2321,42],[2279,42,2321,43],[2279,44,2321,45,"property"],[2279,52,2321,53],[2279,53,2321,55],[2280,2,2322,0],[2281,0,2323,0],[2282,2,2324,0,"exports"],[2282,9,2324,7],[2282,10,2324,8,"nu64be"],[2282,16,2324,14],[2282,19,2324,19,"property"],[2282,27,2324,27],[2282,31,2324,32],[2282,35,2324,36,"NearUInt64BE"],[2282,47,2324,48],[2282,48,2324,49,"property"],[2282,56,2324,57],[2282,57,2324,59],[2283,2,2325,0],[2284,0,2326,0],[2285,2,2327,0,"exports"],[2285,9,2327,7],[2285,10,2327,8,"s8"],[2285,12,2327,10],[2285,15,2327,15,"property"],[2285,23,2327,23],[2285,27,2327,28],[2285,31,2327,32,"Int"],[2285,34,2327,35],[2285,35,2327,36],[2285,36,2327,37],[2285,38,2327,39,"property"],[2285,46,2327,47],[2285,47,2327,49],[2286,2,2328,0],[2287,0,2329,0],[2288,2,2330,0,"exports"],[2288,9,2330,7],[2288,10,2330,8,"s16"],[2288,13,2330,11],[2288,16,2330,16,"property"],[2288,24,2330,24],[2288,28,2330,29],[2288,32,2330,33,"Int"],[2288,35,2330,36],[2288,36,2330,37],[2288,37,2330,38],[2288,39,2330,40,"property"],[2288,47,2330,48],[2288,48,2330,50],[2289,2,2331,0],[2290,0,2332,0],[2291,2,2333,0,"exports"],[2291,9,2333,7],[2291,10,2333,8,"s24"],[2291,13,2333,11],[2291,16,2333,16,"property"],[2291,24,2333,24],[2291,28,2333,29],[2291,32,2333,33,"Int"],[2291,35,2333,36],[2291,36,2333,37],[2291,37,2333,38],[2291,39,2333,40,"property"],[2291,47,2333,48],[2291,48,2333,50],[2292,2,2334,0],[2293,0,2335,0],[2294,2,2336,0,"exports"],[2294,9,2336,7],[2294,10,2336,8,"s32"],[2294,13,2336,11],[2294,16,2336,16,"property"],[2294,24,2336,24],[2294,28,2336,29],[2294,32,2336,33,"Int"],[2294,35,2336,36],[2294,36,2336,37],[2294,37,2336,38],[2294,39,2336,40,"property"],[2294,47,2336,48],[2294,48,2336,50],[2295,2,2337,0],[2296,0,2338,0],[2297,2,2339,0,"exports"],[2297,9,2339,7],[2297,10,2339,8,"s40"],[2297,13,2339,11],[2297,16,2339,16,"property"],[2297,24,2339,24],[2297,28,2339,29],[2297,32,2339,33,"Int"],[2297,35,2339,36],[2297,36,2339,37],[2297,37,2339,38],[2297,39,2339,40,"property"],[2297,47,2339,48],[2297,48,2339,50],[2298,2,2340,0],[2299,0,2341,0],[2300,2,2342,0,"exports"],[2300,9,2342,7],[2300,10,2342,8,"s48"],[2300,13,2342,11],[2300,16,2342,16,"property"],[2300,24,2342,24],[2300,28,2342,29],[2300,32,2342,33,"Int"],[2300,35,2342,36],[2300,36,2342,37],[2300,37,2342,38],[2300,39,2342,40,"property"],[2300,47,2342,48],[2300,48,2342,50],[2301,2,2343,0],[2302,0,2344,0],[2303,2,2345,0,"exports"],[2303,9,2345,7],[2303,10,2345,8,"ns64"],[2303,14,2345,12],[2303,17,2345,17,"property"],[2303,25,2345,25],[2303,29,2345,30],[2303,33,2345,34,"NearInt64"],[2303,42,2345,43],[2303,43,2345,44,"property"],[2303,51,2345,52],[2303,52,2345,54],[2304,2,2346,0],[2305,0,2347,0],[2306,2,2348,0,"exports"],[2306,9,2348,7],[2306,10,2348,8,"s16be"],[2306,15,2348,13],[2306,18,2348,18,"property"],[2306,26,2348,26],[2306,30,2348,31],[2306,34,2348,35,"IntBE"],[2306,39,2348,40],[2306,40,2348,41],[2306,41,2348,42],[2306,43,2348,44,"property"],[2306,51,2348,52],[2306,52,2348,54],[2307,2,2349,0],[2308,0,2350,0],[2309,2,2351,0,"exports"],[2309,9,2351,7],[2309,10,2351,8,"s24be"],[2309,15,2351,13],[2309,18,2351,18,"property"],[2309,26,2351,26],[2309,30,2351,31],[2309,34,2351,35,"IntBE"],[2309,39,2351,40],[2309,40,2351,41],[2309,41,2351,42],[2309,43,2351,44,"property"],[2309,51,2351,52],[2309,52,2351,54],[2310,2,2352,0],[2311,0,2353,0],[2312,2,2354,0,"exports"],[2312,9,2354,7],[2312,10,2354,8,"s32be"],[2312,15,2354,13],[2312,18,2354,18,"property"],[2312,26,2354,26],[2312,30,2354,31],[2312,34,2354,35,"IntBE"],[2312,39,2354,40],[2312,40,2354,41],[2312,41,2354,42],[2312,43,2354,44,"property"],[2312,51,2354,52],[2312,52,2354,54],[2313,2,2355,0],[2314,0,2356,0],[2315,2,2357,0,"exports"],[2315,9,2357,7],[2315,10,2357,8,"s40be"],[2315,15,2357,13],[2315,18,2357,18,"property"],[2315,26,2357,26],[2315,30,2357,31],[2315,34,2357,35,"IntBE"],[2315,39,2357,40],[2315,40,2357,41],[2315,41,2357,42],[2315,43,2357,44,"property"],[2315,51,2357,52],[2315,52,2357,54],[2316,2,2358,0],[2317,0,2359,0],[2318,2,2360,0,"exports"],[2318,9,2360,7],[2318,10,2360,8,"s48be"],[2318,15,2360,13],[2318,18,2360,18,"property"],[2318,26,2360,26],[2318,30,2360,31],[2318,34,2360,35,"IntBE"],[2318,39,2360,40],[2318,40,2360,41],[2318,41,2360,42],[2318,43,2360,44,"property"],[2318,51,2360,52],[2318,52,2360,54],[2319,2,2361,0],[2320,0,2362,0],[2321,2,2363,0,"exports"],[2321,9,2363,7],[2321,10,2363,8,"ns64be"],[2321,16,2363,14],[2321,19,2363,19,"property"],[2321,27,2363,27],[2321,31,2363,32],[2321,35,2363,36,"NearInt64BE"],[2321,46,2363,47],[2321,47,2363,48,"property"],[2321,55,2363,56],[2321,56,2363,58],[2322,2,2364,0],[2323,2,2365,0,"exports"],[2323,9,2365,7],[2323,10,2365,8,"f32"],[2323,13,2365,11],[2323,16,2365,16,"property"],[2323,24,2365,24],[2323,28,2365,29],[2323,32,2365,33,"Float"],[2323,37,2365,38],[2323,38,2365,39,"property"],[2323,46,2365,47],[2323,47,2365,49],[2324,2,2366,0],[2325,2,2367,0,"exports"],[2325,9,2367,7],[2325,10,2367,8,"f32be"],[2325,15,2367,13],[2325,18,2367,18,"property"],[2325,26,2367,26],[2325,30,2367,31],[2325,34,2367,35,"FloatBE"],[2325,41,2367,42],[2325,42,2367,43,"property"],[2325,50,2367,51],[2325,51,2367,53],[2326,2,2368,0],[2327,2,2369,0,"exports"],[2327,9,2369,7],[2327,10,2369,8,"f64"],[2327,13,2369,11],[2327,16,2369,16,"property"],[2327,24,2369,24],[2327,28,2369,29],[2327,32,2369,33,"Double"],[2327,38,2369,39],[2327,39,2369,40,"property"],[2327,47,2369,48],[2327,48,2369,50],[2328,2,2370,0],[2329,2,2371,0,"exports"],[2329,9,2371,7],[2329,10,2371,8,"f64be"],[2329,15,2371,13],[2329,18,2371,18,"property"],[2329,26,2371,26],[2329,30,2371,31],[2329,34,2371,35,"DoubleBE"],[2329,42,2371,43],[2329,43,2371,44,"property"],[2329,51,2371,52],[2329,52,2371,54],[2330,2,2372,0],[2331,2,2373,0,"exports"],[2331,9,2373,7],[2331,10,2373,8,"struct"],[2331,16,2373,14],[2331,19,2373,18],[2331,20,2373,19,"fields"],[2331,26,2373,25],[2331,28,2373,27,"property"],[2331,36,2373,35],[2331,38,2373,37,"decodePrefixes"],[2331,52,2373,51],[2331,57,2373,56],[2331,61,2373,60,"Structure"],[2331,70,2373,69],[2331,71,2373,70,"fields"],[2331,77,2373,76],[2331,79,2373,78,"property"],[2331,87,2373,86],[2331,89,2373,88,"decodePrefixes"],[2331,103,2373,102],[2331,104,2373,104],[2332,2,2374,0],[2333,2,2375,0,"exports"],[2333,9,2375,7],[2333,10,2375,8,"bits"],[2333,14,2375,12],[2333,17,2375,16],[2333,18,2375,17,"word"],[2333,22,2375,21],[2333,24,2375,23,"msb"],[2333,27,2375,26],[2333,29,2375,28,"property"],[2333,37,2375,36],[2333,42,2375,41],[2333,46,2375,45,"BitStructure"],[2333,58,2375,57],[2333,59,2375,58,"word"],[2333,63,2375,62],[2333,65,2375,64,"msb"],[2333,68,2375,67],[2333,70,2375,69,"property"],[2333,78,2375,77],[2333,79,2375,79],[2334,2,2376,0],[2335,2,2377,0,"exports"],[2335,9,2377,7],[2335,10,2377,8,"seq"],[2335,13,2377,11],[2335,16,2377,15],[2335,17,2377,16,"elementLayout"],[2335,30,2377,29],[2335,32,2377,31,"count"],[2335,37,2377,36],[2335,39,2377,38,"property"],[2335,47,2377,46],[2335,52,2377,51],[2335,56,2377,55,"Sequence"],[2335,64,2377,63],[2335,65,2377,64,"elementLayout"],[2335,78,2377,77],[2335,80,2377,79,"count"],[2335,85,2377,84],[2335,87,2377,86,"property"],[2335,95,2377,94],[2335,96,2377,96],[2336,2,2378,0],[2337,2,2379,0,"exports"],[2337,9,2379,7],[2337,10,2379,8,"union"],[2337,15,2379,13],[2337,18,2379,17],[2337,19,2379,18,"discr"],[2337,24,2379,23],[2337,26,2379,25,"defaultLayout"],[2337,39,2379,38],[2337,41,2379,40,"property"],[2337,49,2379,48],[2337,54,2379,53],[2337,58,2379,57,"Union"],[2337,63,2379,62],[2337,64,2379,63,"discr"],[2337,69,2379,68],[2337,71,2379,70,"defaultLayout"],[2337,84,2379,83],[2337,86,2379,85,"property"],[2337,94,2379,93],[2337,95,2379,95],[2338,2,2380,0],[2339,2,2381,0,"exports"],[2339,9,2381,7],[2339,10,2381,8,"unionLayoutDiscriminator"],[2339,34,2381,32],[2339,37,2381,36],[2339,38,2381,37,"layout"],[2339,44,2381,43],[2339,46,2381,45,"property"],[2339,54,2381,53],[2339,59,2381,58],[2339,63,2381,62,"UnionLayoutDiscriminator"],[2339,87,2381,86],[2339,88,2381,87,"layout"],[2339,94,2381,93],[2339,96,2381,95,"property"],[2339,104,2381,103],[2339,105,2381,105],[2340,2,2382,0],[2341,2,2383,0,"exports"],[2341,9,2383,7],[2341,10,2383,8,"blob"],[2341,14,2383,12],[2341,17,2383,16],[2341,18,2383,17,"length"],[2341,24,2383,23],[2341,26,2383,25,"property"],[2341,34,2383,33],[2341,39,2383,38],[2341,43,2383,42,"Blob"],[2341,47,2383,46],[2341,48,2383,47,"length"],[2341,54,2383,53],[2341,56,2383,55,"property"],[2341,64,2383,63],[2341,65,2383,65],[2342,2,2384,0],[2343,2,2385,0,"exports"],[2343,9,2385,7],[2343,10,2385,8,"cstr"],[2343,14,2385,12],[2343,17,2385,17,"property"],[2343,25,2385,25],[2343,29,2385,30],[2343,33,2385,34,"CString"],[2343,40,2385,41],[2343,41,2385,42,"property"],[2343,49,2385,50],[2343,50,2385,52],[2344,2,2386,0],[2345,2,2387,0,"exports"],[2345,9,2387,7],[2345,10,2387,8,"utf8"],[2345,14,2387,12],[2345,17,2387,16],[2345,18,2387,17,"maxSpan"],[2345,25,2387,24],[2345,27,2387,26,"property"],[2345,35,2387,34],[2345,40,2387,39],[2345,44,2387,43,"UTF8"],[2345,48,2387,47],[2345,49,2387,48,"maxSpan"],[2345,56,2387,55],[2345,58,2387,57,"property"],[2345,66,2387,65],[2345,67,2387,67],[2346,2,2388,0],[2347,2,2389,0,"exports"],[2347,9,2389,7],[2347,10,2389,8,"constant"],[2347,18,2389,16],[2347,21,2389,20],[2347,22,2389,21,"value"],[2347,27,2389,26],[2347,29,2389,28,"property"],[2347,37,2389,36],[2347,42,2389,41],[2347,46,2389,45,"Constant"],[2347,54,2389,53],[2347,55,2389,54,"value"],[2347,60,2389,59],[2347,62,2389,61,"property"],[2347,70,2389,69],[2347,71,2389,71],[2348,0,2389,72],[2348,3]],"functionMap":{"names":["<global>","checkUint8Array","uint8ArrayToBuffer","Layout","constructor","makeDestinationObject","getSpan","replicate","fromArray","nameWithProperty","bindConstructorLayout","layout.makeDestinationObject","Object.defineProperty$argument_2.value","ExternalLayout","ExternalLayout#isCount","GreedyCount","GreedyCount#constructor","GreedyCount#isCount","GreedyCount#decode","GreedyCount#encode","OffsetLayout","OffsetLayout#constructor","OffsetLayout#isCount","OffsetLayout#decode","OffsetLayout#encode","UInt","UInt#constructor","UInt#decode","UInt#encode","UIntBE","UIntBE#constructor","UIntBE#decode","UIntBE#encode","Int","Int#constructor","Int#decode","Int#encode","IntBE","IntBE#constructor","IntBE#decode","IntBE#encode","divmodInt64","roundedInt64","NearUInt64","NearUInt64#constructor","NearUInt64#decode","NearUInt64#encode","NearUInt64BE","NearUInt64BE#constructor","NearUInt64BE#decode","NearUInt64BE#encode","NearInt64","NearInt64#constructor","NearInt64#decode","NearInt64#encode","NearInt64BE","NearInt64BE#constructor","NearInt64BE#decode","NearInt64BE#encode","Float","Float#constructor","Float#decode","Float#encode","FloatBE","FloatBE#constructor","FloatBE#decode","FloatBE#encode","Double","Double#constructor","Double#decode","Double#encode","DoubleBE","DoubleBE#constructor","DoubleBE#decode","DoubleBE#encode","Sequence","Sequence#constructor","Sequence#getSpan","Sequence#decode","Sequence#encode","src.reduce$argument_0","Structure","Structure#constructor","fields.reduce$argument_0","Structure#getSpan","Structure#decode","Structure#encode","Structure#fromArray","Structure#layoutFor","Structure#offsetOf","UnionDiscriminator","UnionDiscriminator#constructor","UnionDiscriminator#decode","UnionDiscriminator#encode","UnionLayoutDiscriminator","UnionLayoutDiscriminator#constructor","UnionLayoutDiscriminator#decode","UnionLayoutDiscriminator#encode","Union","Union#constructor","getSourceVariant","configGetSourceVariant","Union#getSpan","Union#defaultGetSourceVariant","Union#decode","Union#encode","Union#addVariant","Union#getVariant","VariantLayout","VariantLayout#constructor","VariantLayout#getSpan","VariantLayout#decode","VariantLayout#encode","VariantLayout#fromArray","fixBitwiseResult","BitStructure","BitStructure#constructor","_packedSetValue","_packedGetValue","BitStructure#decode","BitStructure#encode","BitStructure#addField","BitStructure#addBoolean","BitStructure#fieldFor","BitField","BitField#constructor","container.fields.reduce$argument_0","BitField#decode","BitField#encode","Boolean","Boolean#constructor","Boolean#decode","Boolean#encode","Blob","Blob#constructor","Blob#getSpan","Blob#decode","Blob#encode","CString","CString#constructor","CString#getSpan","CString#decode","CString#encode","UTF8","UTF8#constructor","UTF8#getSpan","UTF8#decode","UTF8#encode","Constant","Constant#constructor","Constant#decode","Constant#encode","exports.greedy","exports.offset","exports.u8","exports.u16","exports.u24","exports.u32","exports.u40","exports.u48","exports.nu64","exports.u16be","exports.u24be","exports.u32be","exports.u40be","exports.u48be","exports.nu64be","exports.s8","exports.s16","exports.s24","exports.s32","exports.s40","exports.s48","exports.ns64","exports.s16be","exports.s24be","exports.s32be","exports.s40be","exports.s48be","exports.ns64be","exports.f32","exports.f32be","exports.f64","exports.f64be","exports.struct","exports.bits","exports.seq","exports.union","exports.unionLayoutDiscriminator","exports.blob","exports.cstr","exports.utf8","exports.constant"],"mappings":"AAA;AC0I;CDI;AEK;CFG;AGkB;ICC;KDuB;IEgB;KFE;IGiB;KHK;IIiB;KJK;IKqB;KLE;CHC;ASO;CTK;AU+B;oCCe,iBD;QEE;SFE;QEI;SFE;CVG;AauB;ICY;KDE;CbC;AeiB;ICC;KDS;IEE;KFE;IGE;KHI;IIE;KJE;CfC;AoBsB;ICC;KDiB;IEE;KFG;IGE;KHE;IIE;KJE;CpBC;AyBkB;ICC;KDK;IEE;KFE;IGE;KHG;CzBC;A6BkB;ICC;KDK;IEE;KFE;IGE;KHG;C7BC;AiCkB;ICC;KDK;IEE;KFE;IGE;KHG;CjCC;AqCkB;ICC;KDK;IEE;KFE;IGE;KHG;CrCC;AyCK;CzCI;A0CE;C1CE;A2CY;ICC;KDE;IEE;KFK;IGE;KHM;C3CC;A+Ca;ICC;KDE;IEE;KFK;IGE;KHM;C/CC;AmDa;ICC;KDE;IEE;KFK;IGE;KHM;CnDC;AuDa;ICC;KDE;IEE;KFK;IGE;KHM;CvDC;A2DY;ICC;KDE;IEE;KFE;IGE;KHG;C3DC;A+DY;ICC;KDE;IEE;KFE;IGE;KHG;C/DC;AmEY;ICC;KDE;IEE;KFE;IGE;KHG;CnEC;AuEY;ICC;KDE;IEE;KFE;IGE;KHG;CvEC;A2EmB;ICC;KDuB;IEE;KFoB;IGE;KHa;IIW;gCCE;SDE;KJK;C3EC;AiFkC;ICC;6BCE,wCD;iCCiB,iCD;KD2B;IGE;sCDM;aCI;KHM;IIE;KJc;IKM;KL0B;IME;KNS;IOS;KPU;IQY;KRiB;CjFC;A0FgB;ICC;KDM;IEK;KFE;IGK;KHE;C1FC;A8FmB;ICC;KDS;IEE;KFE;IGE;KHE;C9FC;AkG6D;ICC;gCC+F;SDE;sCEc;SFE;KDC;IIE;KJY;IK8B;KLsB;IMO;KNqB;IOO;KPiB;IQc;KRI;ISe;KTS;ClGC;A4G+B;ICC;KD4C;IEE;KFgB;IGE;KHmB;IIE;KJoB;IKG;KLK;C5GC;AkHQ;ClHK;AmHgC;ICC;+BCqC;SDG;+BEC;SFE;KDC;IIE;KJU;IKM;KLY;IMU;KNI;IOU;KPK;IQS;KRU;CnHC;A4HsB;ICC;iDCQ,0BD;KDyC;IGG;KHK;IIM;KJW;C5HC;AiImB;ICC;KDE;IEI;KFE;IGE;KHM;CjIC;AqIiB;ICC;KDiB;IEE;KFM;IGE;KHM;IIM;KJkB;CrIC;A0Ie;ICC;KDE;IEE;KFO;IGE;KHG;IIE;KJgB;C1IC;A+IqB;ICC;KDqB;IEE;KFG;IGE;KHO;IIE;KJkB;C/IC;AoJqB;ICC;KDY;IEE;KFE;IGE;KHG;CpJC;kBwJG,iExJ;kByJE,wEzJ;c0JG,mC1J;e2JG,mC3J;e4JG,mC5J;e6JG,mC7J;e8JG,mC9J;e+JG,mC/J;gBgKG,sChK;iBiKG,qCjK;iBkKG,qClK;iBmKG,qCnK;iBoKG,qCpK;iBqKG,qCrK;kBsKG,wCtK;cuKG,kCvK;ewKG,kCxK;eyKG,kCzK;e0KG,kC1K;e2KG,kC3K;e4KG,kC5K;gB6KG,qC7K;iB8KG,oC9K;iB+KG,oC/K;iBgLG,oChL;iBiLG,oCjL;iBkLG,oClL;kBmLG,uCnL;eoLE,iCpL;iBqLE,mCrL;esLE,kCtL;iBuLE,oCvL;kBwLE,qFxL;gByLE,8DzL;e0LE,gF1L;iB2LE,6E3L;oC4LE,oE5L;gB6LE,gD7L;gB8LE,mC9L;gB+LE,kD/L;oBgME,kDhM"}},"type":"js/module"}]}