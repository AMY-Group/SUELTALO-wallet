{"dependencies":[{"name":"buffer-xor","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":10,"index":10},"end":{"line":1,"column":31,"index":31}}],"key":"loeSrW6/3vzsFLRxgE5dDkO1O/w=","exportNames":["*"]}},{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":13,"index":45},"end":{"line":2,"column":35,"index":67}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI=","exportNames":["*"]}},{"name":"../incr32","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":13,"index":88},"end":{"line":3,"column":33,"index":108}}],"key":"B8DQaqiyx6bM6Jooc7nBaW6t2jg=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var xor = require(_dependencyMap[0], \"buffer-xor\");\n  var Buffer = require(_dependencyMap[1], \"safe-buffer\").Buffer;\n  var incr32 = require(_dependencyMap[2], \"../incr32\");\n  function getBlock(self) {\n    var out = self._cipher.encryptBlockRaw(self._prev);\n    incr32(self._prev);\n    return out;\n  }\n  var blockSize = 16;\n  exports.encrypt = function (self, chunk) {\n    var chunkNum = Math.ceil(chunk.length / blockSize);\n    var start = self._cache.length;\n    self._cache = Buffer.concat([self._cache, Buffer.allocUnsafe(chunkNum * blockSize)]);\n    for (var i = 0; i < chunkNum; i++) {\n      var out = getBlock(self);\n      var offset = start + i * blockSize;\n      self._cache.writeUInt32BE(out[0], offset + 0);\n      self._cache.writeUInt32BE(out[1], offset + 4);\n      self._cache.writeUInt32BE(out[2], offset + 8);\n      self._cache.writeUInt32BE(out[3], offset + 12);\n    }\n    var pad = self._cache.slice(0, chunk.length);\n    self._cache = self._cache.slice(chunk.length);\n    return xor(chunk, pad);\n  };\n});","lineCount":27,"map":[[2,2,1,0],[2,6,1,4,"xor"],[2,9,1,7],[2,12,1,10,"require"],[2,19,1,17],[2,20,1,17,"_dependencyMap"],[2,34,1,17],[2,51,1,30],[2,52,1,31],[3,2,2,0],[3,6,2,4,"Buffer"],[3,12,2,10],[3,15,2,13,"require"],[3,22,2,20],[3,23,2,20,"_dependencyMap"],[3,37,2,20],[3,55,2,34],[3,56,2,35],[3,57,2,36,"Buffer"],[3,63,2,42],[4,2,3,0],[4,6,3,4,"incr32"],[4,12,3,10],[4,15,3,13,"require"],[4,22,3,20],[4,23,3,20,"_dependencyMap"],[4,37,3,20],[4,53,3,32],[4,54,3,33],[5,2,5,0],[5,11,5,9,"getBlock"],[5,19,5,17,"getBlock"],[5,20,5,19,"self"],[5,24,5,23],[5,26,5,25],[6,4,6,2],[6,8,6,6,"out"],[6,11,6,9],[6,14,6,12,"self"],[6,18,6,16],[6,19,6,17,"_cipher"],[6,26,6,24],[6,27,6,25,"encryptBlockRaw"],[6,42,6,40],[6,43,6,41,"self"],[6,47,6,45],[6,48,6,46,"_prev"],[6,53,6,51],[6,54,6,52],[7,4,7,2,"incr32"],[7,10,7,8],[7,11,7,9,"self"],[7,15,7,13],[7,16,7,14,"_prev"],[7,21,7,19],[7,22,7,20],[8,4,8,2],[8,11,8,9,"out"],[8,14,8,12],[9,2,9,0],[10,2,11,0],[10,6,11,4,"blockSize"],[10,15,11,13],[10,18,11,16],[10,20,11,18],[11,2,12,0,"exports"],[11,9,12,7],[11,10,12,8,"encrypt"],[11,17,12,15],[11,20,12,18],[11,30,12,28,"self"],[11,34,12,32],[11,36,12,34,"chunk"],[11,41,12,39],[11,43,12,41],[12,4,13,2],[12,8,13,6,"chunkNum"],[12,16,13,14],[12,19,13,17,"Math"],[12,23,13,21],[12,24,13,22,"ceil"],[12,28,13,26],[12,29,13,27,"chunk"],[12,34,13,32],[12,35,13,33,"length"],[12,41,13,39],[12,44,13,42,"blockSize"],[12,53,13,51],[12,54,13,52],[13,4,14,2],[13,8,14,6,"start"],[13,13,14,11],[13,16,14,14,"self"],[13,20,14,18],[13,21,14,19,"_cache"],[13,27,14,25],[13,28,14,26,"length"],[13,34,14,32],[14,4,15,2,"self"],[14,8,15,6],[14,9,15,7,"_cache"],[14,15,15,13],[14,18,15,16,"Buffer"],[14,24,15,22],[14,25,15,23,"concat"],[14,31,15,29],[14,32,15,30],[14,33,16,4,"self"],[14,37,16,8],[14,38,16,9,"_cache"],[14,44,16,15],[14,46,17,4,"Buffer"],[14,52,17,10],[14,53,17,11,"allocUnsafe"],[14,64,17,22],[14,65,17,23,"chunkNum"],[14,73,17,31],[14,76,17,34,"blockSize"],[14,85,17,43],[14,86,17,44],[14,87,18,3],[14,88,18,4],[15,4,19,2],[15,9,19,7],[15,13,19,11,"i"],[15,14,19,12],[15,17,19,15],[15,18,19,16],[15,20,19,18,"i"],[15,21,19,19],[15,24,19,22,"chunkNum"],[15,32,19,30],[15,34,19,32,"i"],[15,35,19,33],[15,37,19,35],[15,39,19,37],[16,6,20,4],[16,10,20,8,"out"],[16,13,20,11],[16,16,20,14,"getBlock"],[16,24,20,22],[16,25,20,23,"self"],[16,29,20,27],[16,30,20,28],[17,6,21,4],[17,10,21,8,"offset"],[17,16,21,14],[17,19,21,17,"start"],[17,24,21,22],[17,27,21,25,"i"],[17,28,21,26],[17,31,21,29,"blockSize"],[17,40,21,38],[18,6,22,4,"self"],[18,10,22,8],[18,11,22,9,"_cache"],[18,17,22,15],[18,18,22,16,"writeUInt32BE"],[18,31,22,29],[18,32,22,30,"out"],[18,35,22,33],[18,36,22,34],[18,37,22,35],[18,38,22,36],[18,40,22,38,"offset"],[18,46,22,44],[18,49,22,47],[18,50,22,48],[18,51,22,49],[19,6,23,4,"self"],[19,10,23,8],[19,11,23,9,"_cache"],[19,17,23,15],[19,18,23,16,"writeUInt32BE"],[19,31,23,29],[19,32,23,30,"out"],[19,35,23,33],[19,36,23,34],[19,37,23,35],[19,38,23,36],[19,40,23,38,"offset"],[19,46,23,44],[19,49,23,47],[19,50,23,48],[19,51,23,49],[20,6,24,4,"self"],[20,10,24,8],[20,11,24,9,"_cache"],[20,17,24,15],[20,18,24,16,"writeUInt32BE"],[20,31,24,29],[20,32,24,30,"out"],[20,35,24,33],[20,36,24,34],[20,37,24,35],[20,38,24,36],[20,40,24,38,"offset"],[20,46,24,44],[20,49,24,47],[20,50,24,48],[20,51,24,49],[21,6,25,4,"self"],[21,10,25,8],[21,11,25,9,"_cache"],[21,17,25,15],[21,18,25,16,"writeUInt32BE"],[21,31,25,29],[21,32,25,30,"out"],[21,35,25,33],[21,36,25,34],[21,37,25,35],[21,38,25,36],[21,40,25,38,"offset"],[21,46,25,44],[21,49,25,47],[21,51,25,49],[21,52,25,50],[22,4,26,2],[23,4,27,2],[23,8,27,6,"pad"],[23,11,27,9],[23,14,27,12,"self"],[23,18,27,16],[23,19,27,17,"_cache"],[23,25,27,23],[23,26,27,24,"slice"],[23,31,27,29],[23,32,27,30],[23,33,27,31],[23,35,27,33,"chunk"],[23,40,27,38],[23,41,27,39,"length"],[23,47,27,45],[23,48,27,46],[24,4,28,2,"self"],[24,8,28,6],[24,9,28,7,"_cache"],[24,15,28,13],[24,18,28,16,"self"],[24,22,28,20],[24,23,28,21,"_cache"],[24,29,28,27],[24,30,28,28,"slice"],[24,35,28,33],[24,36,28,34,"chunk"],[24,41,28,39],[24,42,28,40,"length"],[24,48,28,46],[24,49,28,47],[25,4,29,2],[25,11,29,9,"xor"],[25,14,29,12],[25,15,29,13,"chunk"],[25,20,29,18],[25,22,29,20,"pad"],[25,25,29,23],[25,26,29,24],[26,2,30,0],[26,3,30,1],[27,0,30,1],[27,3]],"functionMap":{"names":["<global>","getBlock","exports.encrypt"],"mappings":"AAA;ACI;CDI;kBEG;CFkB"}},"type":"js/module"}]}