{"dependencies":[{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":13,"index":28},"end":{"line":3,"column":35,"index":50}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI=","exportNames":["*"]}},{"name":"isarray","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":14,"index":73},"end":{"line":4,"column":32,"index":91}}],"key":"eagCqBb6ezDe1aH7mloH46KFq4A=","exportNames":["*"]}},{"name":"typed-array-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":23,"index":116},"end":{"line":5,"column":52,"index":145}}],"key":"lA1g7ncVP/iZl9S2kCBMDrjpztM=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var Buffer = require(_dependencyMap[0], \"safe-buffer\").Buffer;\n  var isArray = require(_dependencyMap[1], \"isarray\");\n  var typedArrayBuffer = require(_dependencyMap[2], \"typed-array-buffer\");\n  var isView = ArrayBuffer.isView || function isView(obj) {\n    try {\n      typedArrayBuffer(obj);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n  var useUint8Array = typeof Uint8Array !== 'undefined';\n  var useArrayBuffer = typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined';\n  var useFromArrayBuffer = useArrayBuffer && (Buffer.prototype instanceof Uint8Array || Buffer.TYPED_ARRAY_SUPPORT);\n  module.exports = function toBuffer(data, encoding) {\n    /*\n     * No need to do anything for exact instance\n     * This is only valid when safe-buffer.Buffer === buffer.Buffer, i.e. when Buffer.from/Buffer.alloc existed\n     */\n    if (data instanceof Buffer) {\n      return data;\n    }\n    if (typeof data === 'string') {\n      return Buffer.from(data, encoding);\n    }\n\n    /*\n     * Wrap any TypedArray instances and DataViews\n     * Makes sense only on engines with full TypedArray support -- let Buffer detect that\n     */\n    if (useArrayBuffer && isView(data)) {\n      // Bug in Node.js <6.3.1, which treats this as out-of-bounds\n      if (data.byteLength === 0) {\n        return Buffer.alloc(0);\n      }\n\n      // When Buffer is based on Uint8Array, we can just construct it from ArrayBuffer\n      if (useFromArrayBuffer) {\n        var res = Buffer.from(data.buffer, data.byteOffset, data.byteLength);\n        /*\n         * Recheck result size, as offset/length doesn't work on Node.js <5.10\n         * We just go to Uint8Array case if this fails\n         */\n        if (res.byteLength === data.byteLength) {\n          return res;\n        }\n      }\n\n      // Convert to Uint8Array bytes and then to Buffer\n      var uint8 = data instanceof Uint8Array ? data : new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n      var result = Buffer.from(uint8);\n\n      /*\n       * Let's recheck that conversion succeeded\n       * We have .length but not .byteLength when useFromArrayBuffer is false\n       */\n      if (result.length === data.byteLength) {\n        return result;\n      }\n    }\n\n    /*\n     * Uint8Array in engines where Buffer.from might not work with ArrayBuffer, just copy over\n     * Doesn't make sense with other TypedArray instances\n     */\n    if (useUint8Array && data instanceof Uint8Array) {\n      return Buffer.from(data);\n    }\n    var isArr = isArray(data);\n    if (isArr) {\n      for (var i = 0; i < data.length; i += 1) {\n        var x = data[i];\n        if (typeof x !== 'number' || x < 0 || x > 255 || ~~x !== x // NaN and integer check\n        ) {\n          throw new RangeError('Array items must be numbers in the range 0-255.');\n        }\n      }\n    }\n\n    /*\n     * Old Buffer polyfill on an engine that doesn't have TypedArray support\n     * Also, this is from a different Buffer polyfill implementation then we have, as instanceof check failed\n     * Convert to our current Buffer implementation\n     */\n    if (isArr || Buffer.isBuffer(data) && data.constructor && typeof data.constructor.isBuffer === 'function' && data.constructor.isBuffer(data)) {\n      return Buffer.from(data);\n    }\n    throw new TypeError('The \"data\" argument must be a string, an Array, a Buffer, a Uint8Array, or a DataView.');\n  };\n});","lineCount":93,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"Buffer"],[4,12,3,10],[4,15,3,13,"require"],[4,22,3,20],[4,23,3,20,"_dependencyMap"],[4,37,3,20],[4,55,3,34],[4,56,3,35],[4,57,3,36,"Buffer"],[4,63,3,42],[5,2,4,0],[5,6,4,4,"isArray"],[5,13,4,11],[5,16,4,14,"require"],[5,23,4,21],[5,24,4,21,"_dependencyMap"],[5,38,4,21],[5,52,4,31],[5,53,4,32],[6,2,5,0],[6,6,5,4,"typedArrayBuffer"],[6,22,5,20],[6,25,5,23,"require"],[6,32,5,30],[6,33,5,30,"_dependencyMap"],[6,47,5,30],[6,72,5,51],[6,73,5,52],[7,2,7,0],[7,6,7,4,"isView"],[7,12,7,10],[7,15,7,13,"ArrayBuffer"],[7,26,7,24],[7,27,7,25,"isView"],[7,33,7,31],[7,37,7,35],[7,46,7,44,"isView"],[7,52,7,50,"isView"],[7,53,7,51,"obj"],[7,56,7,54],[7,58,7,56],[8,4,8,1],[8,8,8,5],[9,6,9,2,"typedArrayBuffer"],[9,22,9,18],[9,23,9,19,"obj"],[9,26,9,22],[9,27,9,23],[10,6,10,2],[10,13,10,9],[10,17,10,13],[11,4,11,1],[11,5,11,2],[11,6,11,3],[11,13,11,10,"e"],[11,14,11,11],[11,16,11,13],[12,6,12,2],[12,13,12,9],[12,18,12,14],[13,4,13,1],[14,2,14,0],[14,3,14,1],[15,2,16,0],[15,6,16,4,"useUint8Array"],[15,19,16,17],[15,22,16,20],[15,29,16,27,"Uint8Array"],[15,39,16,37],[15,44,16,42],[15,55,16,53],[16,2,17,0],[16,6,17,4,"useArrayBuffer"],[16,20,17,18],[16,23,17,21],[16,30,17,28,"ArrayBuffer"],[16,41,17,39],[16,46,17,44],[16,57,17,55],[16,61,18,4],[16,68,18,11,"Uint8Array"],[16,78,18,21],[16,83,18,26],[16,94,18,37],[17,2,19,0],[17,6,19,4,"useFromArrayBuffer"],[17,24,19,22],[17,27,19,25,"useArrayBuffer"],[17,41,19,39],[17,46,19,44,"Buffer"],[17,52,19,50],[17,53,19,51,"prototype"],[17,62,19,60],[17,74,19,72,"Uint8Array"],[17,84,19,82],[17,88,19,86,"Buffer"],[17,94,19,92],[17,95,19,93,"TYPED_ARRAY_SUPPORT"],[17,114,19,112],[17,115,19,113],[18,2,21,0,"module"],[18,8,21,6],[18,9,21,7,"exports"],[18,16,21,14],[18,19,21,17],[18,28,21,26,"toBuffer"],[18,36,21,34,"toBuffer"],[18,37,21,35,"data"],[18,41,21,39],[18,43,21,41,"encoding"],[18,51,21,49],[18,53,21,51],[19,4,22,1],[20,0,23,0],[21,0,24,0],[22,0,25,0],[23,4,26,1],[23,8,26,5,"data"],[23,12,26,9],[23,24,26,21,"Buffer"],[23,30,26,27],[23,32,26,29],[24,6,27,2],[24,13,27,9,"data"],[24,17,27,13],[25,4,28,1],[26,4,30,1],[26,8,30,5],[26,15,30,12,"data"],[26,19,30,16],[26,24,30,21],[26,32,30,29],[26,34,30,31],[27,6,31,2],[27,13,31,9,"Buffer"],[27,19,31,15],[27,20,31,16,"from"],[27,24,31,20],[27,25,31,21,"data"],[27,29,31,25],[27,31,31,27,"encoding"],[27,39,31,35],[27,40,31,36],[28,4,32,1],[30,4,34,1],[31,0,35,0],[32,0,36,0],[33,0,37,0],[34,4,38,1],[34,8,38,5,"useArrayBuffer"],[34,22,38,19],[34,26,38,23,"isView"],[34,32,38,29],[34,33,38,30,"data"],[34,37,38,34],[34,38,38,35],[34,40,38,37],[35,6,39,2],[36,6,40,2],[36,10,40,6,"data"],[36,14,40,10],[36,15,40,11,"byteLength"],[36,25,40,21],[36,30,40,26],[36,31,40,27],[36,33,40,29],[37,8,41,3],[37,15,41,10,"Buffer"],[37,21,41,16],[37,22,41,17,"alloc"],[37,27,41,22],[37,28,41,23],[37,29,41,24],[37,30,41,25],[38,6,42,2],[40,6,44,2],[41,6,45,2],[41,10,45,6,"useFromArrayBuffer"],[41,28,45,24],[41,30,45,26],[42,8,46,3],[42,12,46,7,"res"],[42,15,46,10],[42,18,46,13,"Buffer"],[42,24,46,19],[42,25,46,20,"from"],[42,29,46,24],[42,30,46,25,"data"],[42,34,46,29],[42,35,46,30,"buffer"],[42,41,46,36],[42,43,46,38,"data"],[42,47,46,42],[42,48,46,43,"byteOffset"],[42,58,46,53],[42,60,46,55,"data"],[42,64,46,59],[42,65,46,60,"byteLength"],[42,75,46,70],[42,76,46,71],[43,8,47,3],[44,0,48,0],[45,0,49,0],[46,0,50,0],[47,8,51,3],[47,12,51,7,"res"],[47,15,51,10],[47,16,51,11,"byteLength"],[47,26,51,21],[47,31,51,26,"data"],[47,35,51,30],[47,36,51,31,"byteLength"],[47,46,51,41],[47,48,51,43],[48,10,52,4],[48,17,52,11,"res"],[48,20,52,14],[49,8,53,3],[50,6,54,2],[52,6,56,2],[53,6,57,2],[53,10,57,6,"uint8"],[53,15,57,11],[53,18,57,14,"data"],[53,22,57,18],[53,34,57,30,"Uint8Array"],[53,44,57,40],[53,47,57,43,"data"],[53,51,57,47],[53,54,57,50],[53,58,57,54,"Uint8Array"],[53,68,57,64],[53,69,57,65,"data"],[53,73,57,69],[53,74,57,70,"buffer"],[53,80,57,76],[53,82,57,78,"data"],[53,86,57,82],[53,87,57,83,"byteOffset"],[53,97,57,93],[53,99,57,95,"data"],[53,103,57,99],[53,104,57,100,"byteLength"],[53,114,57,110],[53,115,57,111],[54,6,58,2],[54,10,58,6,"result"],[54,16,58,12],[54,19,58,15,"Buffer"],[54,25,58,21],[54,26,58,22,"from"],[54,30,58,26],[54,31,58,27,"uint8"],[54,36,58,32],[54,37,58,33],[56,6,60,2],[57,0,61,0],[58,0,62,0],[59,0,63,0],[60,6,64,2],[60,10,64,6,"result"],[60,16,64,12],[60,17,64,13,"length"],[60,23,64,19],[60,28,64,24,"data"],[60,32,64,28],[60,33,64,29,"byteLength"],[60,43,64,39],[60,45,64,41],[61,8,65,3],[61,15,65,10,"result"],[61,21,65,16],[62,6,66,2],[63,4,67,1],[65,4,69,1],[66,0,70,0],[67,0,71,0],[68,0,72,0],[69,4,73,1],[69,8,73,5,"useUint8Array"],[69,21,73,18],[69,25,73,22,"data"],[69,29,73,26],[69,41,73,38,"Uint8Array"],[69,51,73,48],[69,53,73,50],[70,6,74,2],[70,13,74,9,"Buffer"],[70,19,74,15],[70,20,74,16,"from"],[70,24,74,20],[70,25,74,21,"data"],[70,29,74,25],[70,30,74,26],[71,4,75,1],[72,4,77,1],[72,8,77,5,"isArr"],[72,13,77,10],[72,16,77,13,"isArray"],[72,23,77,20],[72,24,77,21,"data"],[72,28,77,25],[72,29,77,26],[73,4,78,1],[73,8,78,5,"isArr"],[73,13,78,10],[73,15,78,12],[74,6,79,2],[74,11,79,7],[74,15,79,11,"i"],[74,16,79,12],[74,19,79,15],[74,20,79,16],[74,22,79,18,"i"],[74,23,79,19],[74,26,79,22,"data"],[74,30,79,26],[74,31,79,27,"length"],[74,37,79,33],[74,39,79,35,"i"],[74,40,79,36],[74,44,79,40],[74,45,79,41],[74,47,79,43],[75,8,80,3],[75,12,80,7,"x"],[75,13,80,8],[75,16,80,11,"data"],[75,20,80,15],[75,21,80,16,"i"],[75,22,80,17],[75,23,80,18],[76,8,81,3],[76,12,82,4],[76,19,82,11,"x"],[76,20,82,12],[76,25,82,17],[76,33,82,25],[76,37,83,7,"x"],[76,38,83,8],[76,41,83,11],[76,42,83,12],[76,46,84,7,"x"],[76,47,84,8],[76,50,84,11],[76,53,84,14],[76,57,85,7],[76,58,85,8],[76,59,85,9,"x"],[76,60,85,10],[76,65,85,15,"x"],[76,66,85,16],[76,67,85,17],[77,8,85,17],[77,10,86,5],[78,10,87,4],[78,16,87,10],[78,20,87,14,"RangeError"],[78,30,87,24],[78,31,87,25],[78,80,87,74],[78,81,87,75],[79,8,88,3],[80,6,89,2],[81,4,90,1],[83,4,92,1],[84,0,93,0],[85,0,94,0],[86,0,95,0],[87,0,96,0],[88,4,97,1],[88,8,98,2,"isArr"],[88,13,98,7],[88,17,99,3,"Buffer"],[88,23,99,9],[88,24,99,10,"isBuffer"],[88,32,99,18],[88,33,99,19,"data"],[88,37,99,23],[88,38,99,24],[88,42,100,7,"data"],[88,46,100,11],[88,47,100,12,"constructor"],[88,58,100,23],[88,62,101,7],[88,69,101,14,"data"],[88,73,101,18],[88,74,101,19,"constructor"],[88,85,101,30],[88,86,101,31,"isBuffer"],[88,94,101,39],[88,99,101,44],[88,109,101,54],[88,113,102,7,"data"],[88,117,102,11],[88,118,102,12,"constructor"],[88,129,102,23],[88,130,102,24,"isBuffer"],[88,138,102,32],[88,139,102,33,"data"],[88,143,102,37],[88,144,103,3],[88,146,104,3],[89,6,105,2],[89,13,105,9,"Buffer"],[89,19,105,15],[89,20,105,16,"from"],[89,24,105,20],[89,25,105,21,"data"],[89,29,105,25],[89,30,105,26],[90,4,106,1],[91,4,108,1],[91,10,108,7],[91,14,108,11,"TypeError"],[91,23,108,20],[91,24,108,21],[91,112,108,109],[91,113,108,110],[92,2,109,0],[92,3,109,1],[93,0,109,2],[93,3]],"functionMap":{"names":["<global>","isView","toBuffer"],"mappings":"AAA;mCCM;CDO;iBEO;CFwF"}},"type":"js/module"}]}