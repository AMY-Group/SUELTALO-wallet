{"dependencies":[{"name":"inherits","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":15,"index":15},"end":{"line":1,"column":34,"index":34}}],"key":"UFs2L1Ma7NUz/WYD3lQMkA8Bn/s=","exportNames":["*"]}},{"name":"buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":2,"column":13,"index":49},"end":{"line":2,"column":30,"index":66}}],"key":"kYC7RadcB7k9ZEYd5zOmBbv1F14=","exportNames":["*"]}},{"name":"./der","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":17,"index":93},"end":{"line":4,"column":33,"index":109}}],"key":"BlI4/vbsRxwJlEC6qraeAHvtN/g=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var inherits = require(_dependencyMap[0], \"inherits\");\n  var Buffer = require(_dependencyMap[1], \"buffer\").Buffer;\n  var DERDecoder = require(_dependencyMap[2], \"./der\");\n  function PEMDecoder(entity) {\n    DERDecoder.call(this, entity);\n    this.enc = 'pem';\n  }\n  ;\n  inherits(PEMDecoder, DERDecoder);\n  module.exports = PEMDecoder;\n  PEMDecoder.prototype.decode = function decode(data, options) {\n    var lines = data.toString().split(/[\\r\\n]+/g);\n    var label = options.label.toUpperCase();\n    var re = /^-----(BEGIN|END) ([^-]+)-----$/;\n    var start = -1;\n    var end = -1;\n    for (var i = 0; i < lines.length; i++) {\n      var match = lines[i].match(re);\n      if (match === null) continue;\n      if (match[2] !== label) continue;\n      if (start === -1) {\n        if (match[1] !== 'BEGIN') break;\n        start = i;\n      } else {\n        if (match[1] !== 'END') break;\n        end = i;\n        break;\n      }\n    }\n    if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);\n    var base64 = lines.slice(start + 1, end).join('');\n    // Remove excessive symbols\n    base64.replace(/[^a-z0-9\\+\\/=]+/gi, '');\n    var input = new Buffer(base64, 'base64');\n    return DERDecoder.prototype.decode.call(this, input, options);\n  };\n});","lineCount":38,"map":[[2,2,1,0],[2,6,1,4,"inherits"],[2,14,1,12],[2,17,1,15,"require"],[2,24,1,22],[2,25,1,22,"_dependencyMap"],[2,39,1,22],[2,54,1,33],[2,55,1,34],[3,2,2,0],[3,6,2,4,"Buffer"],[3,12,2,10],[3,15,2,13,"require"],[3,22,2,20],[3,23,2,20,"_dependencyMap"],[3,37,2,20],[3,50,2,29],[3,51,2,30],[3,52,2,31,"Buffer"],[3,58,2,37],[4,2,4,0],[4,6,4,4,"DERDecoder"],[4,16,4,14],[4,19,4,17,"require"],[4,26,4,24],[4,27,4,24,"_dependencyMap"],[4,41,4,24],[4,53,4,32],[4,54,4,33],[5,2,6,0],[5,11,6,9,"PEMDecoder"],[5,21,6,19,"PEMDecoder"],[5,22,6,20,"entity"],[5,28,6,26],[5,30,6,28],[6,4,7,2,"DERDecoder"],[6,14,7,12],[6,15,7,13,"call"],[6,19,7,17],[6,20,7,18],[6,24,7,22],[6,26,7,24,"entity"],[6,32,7,30],[6,33,7,31],[7,4,8,2],[7,8,8,6],[7,9,8,7,"enc"],[7,12,8,10],[7,15,8,13],[7,20,8,18],[8,2,9,0],[9,2,9,1],[10,2,10,0,"inherits"],[10,10,10,8],[10,11,10,9,"PEMDecoder"],[10,21,10,19],[10,23,10,21,"DERDecoder"],[10,33,10,31],[10,34,10,32],[11,2,11,0,"module"],[11,8,11,6],[11,9,11,7,"exports"],[11,16,11,14],[11,19,11,17,"PEMDecoder"],[11,29,11,27],[12,2,13,0,"PEMDecoder"],[12,12,13,10],[12,13,13,11,"prototype"],[12,22,13,20],[12,23,13,21,"decode"],[12,29,13,27],[12,32,13,30],[12,41,13,39,"decode"],[12,47,13,45,"decode"],[12,48,13,46,"data"],[12,52,13,50],[12,54,13,52,"options"],[12,61,13,59],[12,63,13,61],[13,4,14,2],[13,8,14,6,"lines"],[13,13,14,11],[13,16,14,14,"data"],[13,20,14,18],[13,21,14,19,"toString"],[13,29,14,27],[13,30,14,28],[13,31,14,29],[13,32,14,30,"split"],[13,37,14,35],[13,38,14,36],[13,48,14,46],[13,49,14,47],[14,4,16,2],[14,8,16,6,"label"],[14,13,16,11],[14,16,16,14,"options"],[14,23,16,21],[14,24,16,22,"label"],[14,29,16,27],[14,30,16,28,"toUpperCase"],[14,41,16,39],[14,42,16,40],[14,43,16,41],[15,4,18,2],[15,8,18,6,"re"],[15,10,18,8],[15,13,18,11],[15,46,18,44],[16,4,19,2],[16,8,19,6,"start"],[16,13,19,11],[16,16,19,14],[16,17,19,15],[16,18,19,16],[17,4,20,2],[17,8,20,6,"end"],[17,11,20,9],[17,14,20,12],[17,15,20,13],[17,16,20,14],[18,4,21,2],[18,9,21,7],[18,13,21,11,"i"],[18,14,21,12],[18,17,21,15],[18,18,21,16],[18,20,21,18,"i"],[18,21,21,19],[18,24,21,22,"lines"],[18,29,21,27],[18,30,21,28,"length"],[18,36,21,34],[18,38,21,36,"i"],[18,39,21,37],[18,41,21,39],[18,43,21,41],[19,6,22,4],[19,10,22,8,"match"],[19,15,22,13],[19,18,22,16,"lines"],[19,23,22,21],[19,24,22,22,"i"],[19,25,22,23],[19,26,22,24],[19,27,22,25,"match"],[19,32,22,30],[19,33,22,31,"re"],[19,35,22,33],[19,36,22,34],[20,6,23,4],[20,10,23,8,"match"],[20,15,23,13],[20,20,23,18],[20,24,23,22],[20,26,24,6],[21,6,26,4],[21,10,26,8,"match"],[21,15,26,13],[21,16,26,14],[21,17,26,15],[21,18,26,16],[21,23,26,21,"label"],[21,28,26,26],[21,30,27,6],[22,6,29,4],[22,10,29,8,"start"],[22,15,29,13],[22,20,29,18],[22,21,29,19],[22,22,29,20],[22,24,29,22],[23,8,30,6],[23,12,30,10,"match"],[23,17,30,15],[23,18,30,16],[23,19,30,17],[23,20,30,18],[23,25,30,23],[23,32,30,30],[23,34,31,8],[24,8,32,6,"start"],[24,13,32,11],[24,16,32,14,"i"],[24,17,32,15],[25,6,33,4],[25,7,33,5],[25,13,33,11],[26,8,34,6],[26,12,34,10,"match"],[26,17,34,15],[26,18,34,16],[26,19,34,17],[26,20,34,18],[26,25,34,23],[26,30,34,28],[26,32,35,8],[27,8,36,6,"end"],[27,11,36,9],[27,14,36,12,"i"],[27,15,36,13],[28,8,37,6],[29,6,38,4],[30,4,39,2],[31,4,40,2],[31,8,40,6,"start"],[31,13,40,11],[31,18,40,16],[31,19,40,17],[31,20,40,18],[31,24,40,22,"end"],[31,27,40,25],[31,32,40,30],[31,33,40,31],[31,34,40,32],[31,36,41,4],[31,42,41,10],[31,46,41,14,"Error"],[31,51,41,19],[31,52,41,20],[31,81,41,49],[31,84,41,52,"label"],[31,89,41,57],[31,90,41,58],[32,4,43,2],[32,8,43,6,"base64"],[32,14,43,12],[32,17,43,15,"lines"],[32,22,43,20],[32,23,43,21,"slice"],[32,28,43,26],[32,29,43,27,"start"],[32,34,43,32],[32,37,43,35],[32,38,43,36],[32,40,43,38,"end"],[32,43,43,41],[32,44,43,42],[32,45,43,43,"join"],[32,49,43,47],[32,50,43,48],[32,52,43,50],[32,53,43,51],[33,4,44,2],[34,4,45,2,"base64"],[34,10,45,8],[34,11,45,9,"replace"],[34,18,45,16],[34,19,45,17],[34,38,45,36],[34,40,45,38],[34,42,45,40],[34,43,45,41],[35,4,47,2],[35,8,47,6,"input"],[35,13,47,11],[35,16,47,14],[35,20,47,18,"Buffer"],[35,26,47,24],[35,27,47,25,"base64"],[35,33,47,31],[35,35,47,33],[35,43,47,41],[35,44,47,42],[36,4,48,2],[36,11,48,9,"DERDecoder"],[36,21,48,19],[36,22,48,20,"prototype"],[36,31,48,29],[36,32,48,30,"decode"],[36,38,48,36],[36,39,48,37,"call"],[36,43,48,41],[36,44,48,42],[36,48,48,46],[36,50,48,48,"input"],[36,55,48,53],[36,57,48,55,"options"],[36,64,48,62],[36,65,48,63],[37,2,49,0],[37,3,49,1],[38,0,49,2],[38,3]],"functionMap":{"names":["<global>","PEMDecoder","decode"],"mappings":"AAA;ACK;CDG;8BEI;CFoC"}},"type":"js/module"}]}