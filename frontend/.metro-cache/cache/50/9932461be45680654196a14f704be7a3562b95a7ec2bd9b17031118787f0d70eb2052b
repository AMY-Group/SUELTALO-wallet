{"dependencies":[{"name":"@solana/web3.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":1,"column":0,"index":0},"end":{"line":1,"column":88,"index":88}}],"key":"hVqIgOgXAH1+S7mu7qk6LJzdVc8=","exportNames":["*"]}},{"name":"../constants.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":2,"column":0,"index":89},"end":{"line":2,"column":51,"index":140}}],"key":"w33QN4nlqAZn5CNK6M5HKbLWgBA=","exportNames":["*"]}},{"name":"../extensions/extensionType.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":141},"end":{"line":3,"column":70,"index":211}}],"key":"y3u/cMP7otnZeHZKZ6Kju8Npotg=","exportNames":["*"]}},{"name":"../instructions/initializeAccount.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":212},"end":{"line":4,"column":90,"index":302}}],"key":"dE4fJwAVNG2oH+zvJ+krAhoxQLo=","exportNames":["*"]}},{"name":"../state/mint.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":5,"column":0,"index":303},"end":{"line":5,"column":43,"index":346}}],"key":"v3pX84XwBjgEzA16Wj3LfwCi9fI=","exportNames":["*"]}},{"name":"./createAssociatedTokenAccount.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":6,"column":0,"index":347},"end":{"line":6,"column":81,"index":428}}],"key":"yhLraVF+bgfxgRIwOGRfktplUgE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.createAccount = createAccount;\n  var _web = require(_dependencyMap[0], \"@solana/web3.js\");\n  var _constants = require(_dependencyMap[1], \"../constants.js\");\n  var _extensionType = require(_dependencyMap[2], \"../extensions/extensionType.js\");\n  var _initializeAccount = require(_dependencyMap[3], \"../instructions/initializeAccount.js\");\n  var _mint = require(_dependencyMap[4], \"../state/mint.js\");\n  var _createAssociatedTokenAccount = require(_dependencyMap[5], \"./createAssociatedTokenAccount.js\");\n  /**\n   * Create and initialize a new token account\n   *\n   * @param connection     Connection to use\n   * @param payer          Payer of the transaction and initialization fees\n   * @param mint           Mint for the account\n   * @param owner          Owner of the new account\n   * @param keypair        Optional keypair, defaulting to the associated token account for the `mint` and `owner`\n   * @param confirmOptions Options for confirming the transaction\n   * @param programId      SPL Token program account\n   *\n   * @return Address of the new token account\n   */\n  async function createAccount(connection, payer, mint, owner, keypair, confirmOptions, programId = _constants.TOKEN_PROGRAM_ID) {\n    // If a keypair isn't provided, create the associated token account and return its address\n    if (!keypair) return await (0, _createAssociatedTokenAccount.createAssociatedTokenAccount)(connection, payer, mint, owner, confirmOptions, programId);\n    // Otherwise, create the account with the provided keypair and return its public key\n    const mintState = await (0, _mint.getMint)(connection, mint, confirmOptions?.commitment, programId);\n    const space = (0, _extensionType.getAccountLenForMint)(mintState);\n    const lamports = await connection.getMinimumBalanceForRentExemption(space);\n    const transaction = new _web.Transaction().add(_web.SystemProgram.createAccount({\n      fromPubkey: payer.publicKey,\n      newAccountPubkey: keypair.publicKey,\n      space,\n      lamports,\n      programId\n    }), (0, _initializeAccount.createInitializeAccountInstruction)(keypair.publicKey, mint, owner, programId));\n    await (0, _web.sendAndConfirmTransaction)(connection, transaction, [payer, keypair], confirmOptions);\n    return keypair.publicKey;\n  }\n});","lineCount":42,"map":[[6,2,1,0],[6,6,1,0,"_web"],[6,10,1,0],[6,13,1,0,"require"],[6,20,1,0],[6,21,1,0,"_dependencyMap"],[6,35,1,0],[7,2,2,0],[7,6,2,0,"_constants"],[7,16,2,0],[7,19,2,0,"require"],[7,26,2,0],[7,27,2,0,"_dependencyMap"],[7,41,2,0],[8,2,3,0],[8,6,3,0,"_extensionType"],[8,20,3,0],[8,23,3,0,"require"],[8,30,3,0],[8,31,3,0,"_dependencyMap"],[8,45,3,0],[9,2,4,0],[9,6,4,0,"_initializeAccount"],[9,24,4,0],[9,27,4,0,"require"],[9,34,4,0],[9,35,4,0,"_dependencyMap"],[9,49,4,0],[10,2,5,0],[10,6,5,0,"_mint"],[10,11,5,0],[10,14,5,0,"require"],[10,21,5,0],[10,22,5,0,"_dependencyMap"],[10,36,5,0],[11,2,6,0],[11,6,6,0,"_createAssociatedTokenAccount"],[11,35,6,0],[11,38,6,0,"require"],[11,45,6,0],[11,46,6,0,"_dependencyMap"],[11,60,6,0],[12,2,7,0],[13,0,8,0],[14,0,9,0],[15,0,10,0],[16,0,11,0],[17,0,12,0],[18,0,13,0],[19,0,14,0],[20,0,15,0],[21,0,16,0],[22,0,17,0],[23,0,18,0],[24,0,19,0],[25,2,20,7],[25,17,20,22,"createAccount"],[25,30,20,35,"createAccount"],[25,31,20,36,"connection"],[25,41,20,46],[25,43,20,48,"payer"],[25,48,20,53],[25,50,20,55,"mint"],[25,54,20,59],[25,56,20,61,"owner"],[25,61,20,66],[25,63,20,68,"keypair"],[25,70,20,75],[25,72,20,77,"confirmOptions"],[25,86,20,91],[25,88,20,93,"programId"],[25,97,20,102],[25,100,20,105,"TOKEN_PROGRAM_ID"],[25,127,20,121],[25,129,20,123],[26,4,21,4],[27,4,22,4],[27,8,22,8],[27,9,22,9,"keypair"],[27,16,22,16],[27,18,23,8],[27,25,23,15],[27,31,23,21],[27,35,23,21,"createAssociatedTokenAccount"],[27,93,23,49],[27,95,23,50,"connection"],[27,105,23,60],[27,107,23,62,"payer"],[27,112,23,67],[27,114,23,69,"mint"],[27,118,23,73],[27,120,23,75,"owner"],[27,125,23,80],[27,127,23,82,"confirmOptions"],[27,141,23,96],[27,143,23,98,"programId"],[27,152,23,107],[27,153,23,108],[28,4,24,4],[29,4,25,4],[29,10,25,10,"mintState"],[29,19,25,19],[29,22,25,22],[29,28,25,28],[29,32,25,28,"getMint"],[29,45,25,35],[29,47,25,36,"connection"],[29,57,25,46],[29,59,25,48,"mint"],[29,63,25,52],[29,65,25,54,"confirmOptions"],[29,79,25,68],[29,81,25,70,"commitment"],[29,91,25,80],[29,93,25,82,"programId"],[29,102,25,91],[29,103,25,92],[30,4,26,4],[30,10,26,10,"space"],[30,15,26,15],[30,18,26,18],[30,22,26,18,"getAccountLenForMint"],[30,57,26,38],[30,59,26,39,"mintState"],[30,68,26,48],[30,69,26,49],[31,4,27,4],[31,10,27,10,"lamports"],[31,18,27,18],[31,21,27,21],[31,27,27,27,"connection"],[31,37,27,37],[31,38,27,38,"getMinimumBalanceForRentExemption"],[31,71,27,71],[31,72,27,72,"space"],[31,77,27,77],[31,78,27,78],[32,4,28,4],[32,10,28,10,"transaction"],[32,21,28,21],[32,24,28,24],[32,28,28,28,"Transaction"],[32,44,28,39],[32,45,28,40],[32,46,28,41],[32,47,28,42,"add"],[32,50,28,45],[32,51,28,46,"SystemProgram"],[32,69,28,59],[32,70,28,60,"createAccount"],[32,83,28,73],[32,84,28,74],[33,6,29,8,"fromPubkey"],[33,16,29,18],[33,18,29,20,"payer"],[33,23,29,25],[33,24,29,26,"publicKey"],[33,33,29,35],[34,6,30,8,"newAccountPubkey"],[34,22,30,24],[34,24,30,26,"keypair"],[34,31,30,33],[34,32,30,34,"publicKey"],[34,41,30,43],[35,6,31,8,"space"],[35,11,31,13],[36,6,32,8,"lamports"],[36,14,32,16],[37,6,33,8,"programId"],[38,4,34,4],[38,5,34,5],[38,6,34,6],[38,8,34,8],[38,12,34,8,"createInitializeAccountInstruction"],[38,65,34,42],[38,67,34,43,"keypair"],[38,74,34,50],[38,75,34,51,"publicKey"],[38,84,34,60],[38,86,34,62,"mint"],[38,90,34,66],[38,92,34,68,"owner"],[38,97,34,73],[38,99,34,75,"programId"],[38,108,34,84],[38,109,34,85],[38,110,34,86],[39,4,35,4],[39,10,35,10],[39,14,35,10,"sendAndConfirmTransaction"],[39,44,35,35],[39,46,35,36,"connection"],[39,56,35,46],[39,58,35,48,"transaction"],[39,69,35,59],[39,71,35,61],[39,72,35,62,"payer"],[39,77,35,67],[39,79,35,69,"keypair"],[39,86,35,76],[39,87,35,77],[39,89,35,79,"confirmOptions"],[39,103,35,93],[39,104,35,94],[40,4,36,4],[40,11,36,11,"keypair"],[40,18,36,18],[40,19,36,19,"publicKey"],[40,28,36,28],[41,2,37,0],[42,0,37,1],[42,3]],"functionMap":{"names":["<global>","createAccount"],"mappings":"AAA;OCmB;CDiB"}},"type":"js/module"}]}