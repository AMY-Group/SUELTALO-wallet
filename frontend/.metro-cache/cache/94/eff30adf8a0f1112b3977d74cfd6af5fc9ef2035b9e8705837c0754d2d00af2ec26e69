{"dependencies":[{"name":"@noble/hashes/hmac.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":41,"column":18,"index":1888},"end":{"line":41,"column":50,"index":1920}}],"key":"OsRgxCpwQqHSRFLXuLW2hZmZg64=","exportNames":["*"]}},{"name":"@noble/hashes/utils","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":42,"column":16,"index":1938},"end":{"line":42,"column":46,"index":1968}}],"key":"2Rf0wxfrJFf/X13KhBJ3DUHOYWE=","exportNames":["*"]}},{"name":"../utils.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":43,"column":19,"index":1989},"end":{"line":43,"column":41,"index":2011}}],"key":"Yc7DmwhweSDBIC4bv+r2fO8xp6U=","exportNames":["*"]}},{"name":"./curve.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":44,"column":19,"index":2032},"end":{"line":44,"column":40,"index":2053}}],"key":"D2lpvogjUpmMFXMnxIh5QgGQVQM=","exportNames":["*"]}},{"name":"./modular.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":45,"column":21,"index":2076},"end":{"line":45,"column":44,"index":2099}}],"key":"pkHxIsiyj9LvPZma2E+OjOIbg7k=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.DER = exports.DERErr = void 0;\n  exports._splitEndoScalar = _splitEndoScalar;\n  exports._normFnElement = _normFnElement;\n  exports.weierstrassN = weierstrassN;\n  exports.SWUFpSqrtRatio = SWUFpSqrtRatio;\n  exports.mapToCurveSimpleSWU = mapToCurveSimpleSWU;\n  exports.ecdh = ecdh;\n  exports.ecdsa = ecdsa;\n  exports.weierstrassPoints = weierstrassPoints;\n  exports._legacyHelperEquat = _legacyHelperEquat;\n  exports.weierstrass = weierstrass;\n  /**\n   * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n   *\n   * ### Design rationale for types\n   *\n   * * Interaction between classes from different curves should fail:\n   *   `k256.Point.BASE.add(p256.Point.BASE)`\n   * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n   * * Different calls of `curve()` would return different classes -\n   *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n   *   it won't affect others\n   *\n   * TypeScript can't infer types for classes created inside a function. Classes is one instance\n   * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n   * unique type for every function call.\n   *\n   * We can use generic types via some param, like curve opts, but that would:\n   *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n   *     which is hard to debug.\n   *     2. Params can be generic and we can't enforce them to be constant value:\n   *     if somebody creates curve from non-constant params,\n   *     it would be allowed to interact with other curves with non-constant params\n   *\n   * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n  const hmac_js_1 = require(_dependencyMap[0], \"@noble/hashes/hmac.js\");\n  const utils_1 = require(_dependencyMap[1], \"@noble/hashes/utils\");\n  const utils_ts_1 = require(_dependencyMap[2], \"../utils.js\");\n  const curve_ts_1 = require(_dependencyMap[3], \"./curve.js\");\n  const modular_ts_1 = require(_dependencyMap[4], \"./modular.js\");\n  // We construct basis in such way that den is always positive and equals n, but num sign depends on basis (not on secret value)\n  const divNearest = (num, den) => (num + (num >= 0 ? den : -den) / _2n) / den;\n  /**\n   * Splits scalar for GLV endomorphism.\n   */\n  function _splitEndoScalar(k, basis, n) {\n    // Split scalar into two such that part is ~half bits: `abs(part) < sqrt(N)`\n    // Since part can be negative, we need to do this on point.\n    // TODO: verifyScalar function which consumes lambda\n    const [[a1, b1], [a2, b2]] = basis;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    // |k1|/|k2| is < sqrt(N), but can be negative.\n    // If we do `k1 mod N`, we'll get big scalar (`> sqrt(N)`): so, we do cheaper negation instead.\n    let k1 = k - c1 * a1 - c2 * a2;\n    let k2 = -c1 * b1 - c2 * b2;\n    const k1neg = k1 < _0n;\n    const k2neg = k2 < _0n;\n    if (k1neg) k1 = -k1;\n    if (k2neg) k2 = -k2;\n    // Double check that resulting scalar less than half bits of N: otherwise wNAF will fail.\n    // This should only happen on wrong basises. Also, math inside is too complex and I don't trust it.\n    const MAX_NUM = (0, utils_ts_1.bitMask)(Math.ceil((0, utils_ts_1.bitLen)(n) / 2)) + _1n; // Half bits of N\n    if (k1 < _0n || k1 >= MAX_NUM || k2 < _0n || k2 >= MAX_NUM) {\n      throw new Error('splitScalar (endomorphism): failed, k=' + k);\n    }\n    return {\n      k1neg,\n      k1,\n      k2neg,\n      k2\n    };\n  }\n  function validateSigFormat(format) {\n    if (!['compact', 'recovered', 'der'].includes(format)) throw new Error('Signature format must be \"compact\", \"recovered\", or \"der\"');\n    return format;\n  }\n  function validateSigOpts(opts, def) {\n    const optsn = {};\n    for (let optName of Object.keys(def)) {\n      // @ts-ignore\n      optsn[optName] = opts[optName] === undefined ? def[optName] : opts[optName];\n    }\n    (0, utils_ts_1._abool2)(optsn.lowS, 'lowS');\n    (0, utils_ts_1._abool2)(optsn.prehash, 'prehash');\n    if (optsn.format !== undefined) validateSigFormat(optsn.format);\n    return optsn;\n  }\n  class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  }\n  exports.DERErr = DERErr;\n  /**\n   * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n   *\n   *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n   *\n   * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n   */\n  exports.DER = {\n    // asn.1 DER encoding utils\n    Err: DERErr,\n    // Basic building block is TLV (Tag-Length-Value)\n    _tlv: {\n      encode: (tag, data) => {\n        const {\n          Err: E\n        } = exports.DER;\n        if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n        if (data.length & 1) throw new E('tlv.encode: unpadded data');\n        const dataLen = data.length / 2;\n        const len = (0, utils_ts_1.numberToHexUnpadded)(dataLen);\n        if (len.length / 2 & 128) throw new E('tlv.encode: long form length too big');\n        // length of length with long form flag\n        const lenLen = dataLen > 127 ? (0, utils_ts_1.numberToHexUnpadded)(len.length / 2 | 128) : '';\n        const t = (0, utils_ts_1.numberToHexUnpadded)(tag);\n        return t + lenLen + len + data;\n      },\n      // v - value, l - left bytes (unparsed)\n      decode(tag, data) {\n        const {\n          Err: E\n        } = exports.DER;\n        let pos = 0;\n        if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n        if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n        const first = data[pos++];\n        const isLong = !!(first & 128); // First bit of first length byte is flag for short/long form\n        let length = 0;\n        if (!isLong) length = first;else {\n          // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n          const lenLen = first & 127;\n          if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n          if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n          const lengthBytes = data.subarray(pos, pos + lenLen);\n          if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n          if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n          for (const b of lengthBytes) length = length << 8 | b;\n          pos += lenLen;\n          if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n        }\n        const v = data.subarray(pos, pos + length);\n        if (v.length !== length) throw new E('tlv.decode: wrong value length');\n        return {\n          v,\n          l: data.subarray(pos + length)\n        };\n      }\n    },\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    _int: {\n      encode(num) {\n        const {\n          Err: E\n        } = exports.DER;\n        if (num < _0n) throw new E('integer: negative integers are not allowed');\n        let hex = (0, utils_ts_1.numberToHexUnpadded)(num);\n        // Pad with zero byte if negative flag is present\n        if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n        if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n        return hex;\n      },\n      decode(data) {\n        const {\n          Err: E\n        } = exports.DER;\n        if (data[0] & 128) throw new E('invalid signature integer: negative');\n        if (data[0] === 0x00 && !(data[1] & 128)) throw new E('invalid signature integer: unnecessary leading zero');\n        return (0, utils_ts_1.bytesToNumberBE)(data);\n      }\n    },\n    toSig(hex) {\n      // parse DER signature\n      const {\n        Err: E,\n        _int: int,\n        _tlv: tlv\n      } = exports.DER;\n      const data = (0, utils_ts_1.ensureBytes)('signature', hex);\n      const {\n        v: seqBytes,\n        l: seqLeftBytes\n      } = tlv.decode(0x30, data);\n      if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n      const {\n        v: rBytes,\n        l: rLeftBytes\n      } = tlv.decode(0x02, seqBytes);\n      const {\n        v: sBytes,\n        l: sLeftBytes\n      } = tlv.decode(0x02, rLeftBytes);\n      if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n      return {\n        r: int.decode(rBytes),\n        s: int.decode(sBytes)\n      };\n    },\n    hexFromSig(sig) {\n      const {\n        _tlv: tlv,\n        _int: int\n      } = exports.DER;\n      const rs = tlv.encode(0x02, int.encode(sig.r));\n      const ss = tlv.encode(0x02, int.encode(sig.s));\n      const seq = rs + ss;\n      return tlv.encode(0x30, seq);\n    }\n  };\n  // Be friendly to bad ECMAScript parsers by not using bigint literals\n  // prettier-ignore\n  const _0n = BigInt(0),\n    _1n = BigInt(1),\n    _2n = BigInt(2),\n    _3n = BigInt(3),\n    _4n = BigInt(4);\n  function _normFnElement(Fn, key) {\n    const {\n      BYTES: expected\n    } = Fn;\n    let num;\n    if (typeof key === 'bigint') {\n      num = key;\n    } else {\n      let bytes = (0, utils_ts_1.ensureBytes)('private key', key);\n      try {\n        num = Fn.fromBytes(bytes);\n      } catch (error) {\n        throw new Error(`invalid private key: expected ui8a of size ${expected}, got ${typeof key}`);\n      }\n    }\n    if (!Fn.isValidNot0(num)) throw new Error('invalid private key: out of range [1..N-1]');\n    return num;\n  }\n  /**\n   * Creates weierstrass Point constructor, based on specified curve options.\n   *\n   * @example\n  ```js\n  const opts = {\n    p: BigInt('0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff'),\n    n: BigInt('0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551'),\n    h: BigInt(1),\n    a: BigInt('0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc'),\n    b: BigInt('0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b'),\n    Gx: BigInt('0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296'),\n    Gy: BigInt('0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5'),\n  };\n  const p256_Point = weierstrass(opts);\n  ```\n   */\n  function weierstrassN(params, extraOpts = {}) {\n    const validated = (0, curve_ts_1._createCurveFields)('weierstrass', params, extraOpts);\n    const {\n      Fp,\n      Fn\n    } = validated;\n    let CURVE = validated.CURVE;\n    const {\n      h: cofactor,\n      n: CURVE_ORDER\n    } = CURVE;\n    (0, utils_ts_1._validateObject)(extraOpts, {}, {\n      allowInfinityPoint: 'boolean',\n      clearCofactor: 'function',\n      isTorsionFree: 'function',\n      fromBytes: 'function',\n      toBytes: 'function',\n      endo: 'object',\n      wrapPrivateKey: 'boolean'\n    });\n    const {\n      endo\n    } = extraOpts;\n    if (endo) {\n      // validateObject(endo, { beta: 'bigint', splitScalar: 'function' });\n      if (!Fp.is0(CURVE.a) || typeof endo.beta !== 'bigint' || !Array.isArray(endo.basises)) {\n        throw new Error('invalid endo: expected \"beta\": bigint and \"basises\": array');\n      }\n    }\n    const lengths = getWLengths(Fp, Fn);\n    function assertCompressionIsSupported() {\n      if (!Fp.isOdd) throw new Error('compression is not supported: Field does not have .isOdd()');\n    }\n    // Implements IEEE P1363 point encoding\n    function pointToBytes(_c, point, isCompressed) {\n      const {\n        x,\n        y\n      } = point.toAffine();\n      const bx = Fp.toBytes(x);\n      (0, utils_ts_1._abool2)(isCompressed, 'isCompressed');\n      if (isCompressed) {\n        assertCompressionIsSupported();\n        const hasEvenY = !Fp.isOdd(y);\n        return (0, utils_ts_1.concatBytes)(pprefix(hasEvenY), bx);\n      } else {\n        return (0, utils_ts_1.concatBytes)(Uint8Array.of(0x04), bx, Fp.toBytes(y));\n      }\n    }\n    function pointFromBytes(bytes) {\n      (0, utils_ts_1._abytes2)(bytes, undefined, 'Point');\n      const {\n        publicKey: comp,\n        publicKeyUncompressed: uncomp\n      } = lengths; // e.g. for 32-byte: 33, 65\n      const length = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // No actual validation is done here: use .assertValidity()\n      if (length === comp && (head === 0x02 || head === 0x03)) {\n        const x = Fp.fromBytes(tail);\n        if (!Fp.isValid(x)) throw new Error('bad point: is not on curve, wrong x');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const err = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('bad point: is not on curve, sqrt error' + err);\n        }\n        assertCompressionIsSupported();\n        const isYOdd = Fp.isOdd(y); // (y & _1n) === _1n;\n        const isHeadOdd = (head & 1) === 1; // ECDSA-specific\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return {\n          x,\n          y\n        };\n      } else if (length === uncomp && head === 0x04) {\n        // TODO: more checks\n        const L = Fp.BYTES;\n        const x = Fp.fromBytes(tail.subarray(0, L));\n        const y = Fp.fromBytes(tail.subarray(L, L * 2));\n        if (!isValidXY(x, y)) throw new Error('bad point: is not on curve');\n        return {\n          x,\n          y\n        };\n      } else {\n        throw new Error(`bad point: got length ${length}, expected compressed=${comp} or uncompressed=${uncomp}`);\n      }\n    }\n    const encodePoint = extraOpts.toBytes || pointToBytes;\n    const decodePoint = extraOpts.fromBytes || pointFromBytes;\n    function weierstrassEquation(x) {\n      const x2 = Fp.sqr(x); // x * x\n      const x3 = Fp.mul(x2, x); // x² * x\n      return Fp.add(Fp.add(x3, Fp.mul(x, CURVE.a)), CURVE.b); // x³ + a * x + b\n    }\n    // TODO: move top-level\n    /** Checks whether equation holds for given x, y: y² == x³ + ax + b */\n    function isValidXY(x, y) {\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      return Fp.eql(left, right);\n    }\n    // Validate whether the passed curve params are valid.\n    // Test 1: equation y² = x³ + ax + b should work for generator point.\n    if (!isValidXY(CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\n    // Test 2: discriminant Δ part should be non-zero: 4a³ + 27b² != 0.\n    // Guarantees curve is genus-1, smooth (non-singular).\n    const _4a3 = Fp.mul(Fp.pow(CURVE.a, _3n), _4n);\n    const _27b2 = Fp.mul(Fp.sqr(CURVE.b), BigInt(27));\n    if (Fp.is0(Fp.add(_4a3, _27b2))) throw new Error('bad curve params: a or b');\n    /** Asserts coordinate is valid: 0 <= n < Fp.ORDER. */\n    function acoord(title, n, banZero = false) {\n      if (!Fp.isValid(n) || banZero && Fp.is0(n)) throw new Error(`bad point coordinate ${title}`);\n      return n;\n    }\n    function aprjpoint(other) {\n      if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n    }\n    function splitEndoScalarN(k) {\n      if (!endo || !endo.basises) throw new Error('no endo');\n      return _splitEndoScalar(k, endo.basises, Fn.ORDER);\n    }\n    // Memoized toAffine / validity check. They are heavy. Points are immutable.\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (X, Y, Z) ∋ (x=X/Z, y=Y/Z)\n    const toAffineMemo = (0, utils_ts_1.memoized)((p, iz) => {\n      const {\n        X,\n        Y,\n        Z\n      } = p;\n      // Fast-path for normalized points\n      if (Fp.eql(Z, Fp.ONE)) return {\n        x: X,\n        y: Y\n      };\n      const is0 = p.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(Z);\n      const x = Fp.mul(X, iz);\n      const y = Fp.mul(Y, iz);\n      const zz = Fp.mul(Z, iz);\n      if (is0) return {\n        x: Fp.ZERO,\n        y: Fp.ZERO\n      };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return {\n        x,\n        y\n      };\n    });\n    // NOTE: on exception this will crash 'cached' and no value will be set.\n    // Otherwise true will be return\n    const assertValidMemo = (0, utils_ts_1.memoized)(p => {\n      if (p.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is invalid representation of ZERO.\n        if (extraOpts.allowInfinityPoint && !Fp.is0(p.Y)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const {\n        x,\n        y\n      } = p.toAffine();\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not field elements');\n      if (!isValidXY(x, y)) throw new Error('bad point: equation left != right');\n      if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n      return true;\n    });\n    function finishEndo(endoBeta, k1p, k2p, k1neg, k2neg) {\n      k2p = new Point(Fp.mul(k2p.X, endoBeta), k2p.Y, k2p.Z);\n      k1p = (0, curve_ts_1.negateCt)(k1neg, k1p);\n      k2p = (0, curve_ts_1.negateCt)(k2neg, k2p);\n      return k1p.add(k2p);\n    }\n    /**\n     * Projective Point works in 3d / projective (homogeneous) coordinates:(X, Y, Z) ∋ (x=X/Z, y=Y/Z).\n     * Default Point works in 2d / affine coordinates: (x, y).\n     * We're doing calculations in projective, because its operations don't require costly inversion.\n     */\n    class Point {\n      /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n      constructor(X, Y, Z) {\n        this.X = acoord('x', X);\n        this.Y = acoord('y', Y, true);\n        this.Z = acoord('z', Z);\n        Object.freeze(this);\n      }\n      static CURVE() {\n        return CURVE;\n      }\n      /** Does NOT validate if the point is valid. Use `.assertValidity()`. */\n      static fromAffine(p) {\n        const {\n          x,\n          y\n        } = p || {};\n        if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n        if (p instanceof Point) throw new Error('projective point not allowed');\n        // (0, 0) would've produced (0, 0, 1) - instead, we need (0, 1, 0)\n        if (Fp.is0(x) && Fp.is0(y)) return Point.ZERO;\n        return new Point(x, y, Fp.ONE);\n      }\n      static fromBytes(bytes) {\n        const P = Point.fromAffine(decodePoint((0, utils_ts_1._abytes2)(bytes, undefined, 'point')));\n        P.assertValidity();\n        return P;\n      }\n      static fromHex(hex) {\n        return Point.fromBytes((0, utils_ts_1.ensureBytes)('pointHex', hex));\n      }\n      get x() {\n        return this.toAffine().x;\n      }\n      get y() {\n        return this.toAffine().y;\n      }\n      /**\n       *\n       * @param windowSize\n       * @param isLazy true will defer table computation until the first multiplication\n       * @returns\n       */\n      precompute(windowSize = 8, isLazy = true) {\n        wnaf.createCache(this, windowSize);\n        if (!isLazy) this.multiply(_3n); // random number\n        return this;\n      }\n      // TODO: return `this`\n      /** A point on curve is valid if it conforms to equation. */\n      assertValidity() {\n        assertValidMemo(this);\n      }\n      hasEvenY() {\n        const {\n          y\n        } = this.toAffine();\n        if (!Fp.isOdd) throw new Error(\"Field doesn't support isOdd\");\n        return !Fp.isOdd(y);\n      }\n      /** Compare one point to another. */\n      equals(other) {\n        aprjpoint(other);\n        const {\n          X: X1,\n          Y: Y1,\n          Z: Z1\n        } = this;\n        const {\n          X: X2,\n          Y: Y2,\n          Z: Z2\n        } = other;\n        const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n        const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n        return U1 && U2;\n      }\n      /** Flips point to one corresponding to (x, -y) in Affine coordinates. */\n      negate() {\n        return new Point(this.X, Fp.neg(this.Y), this.Z);\n      }\n      // Renes-Costello-Batina exception-free doubling formula.\n      // There is 30% faster Jacobian formula, but it is not complete.\n      // https://eprint.iacr.org/2015/1060, algorithm 3\n      // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n      double() {\n        const {\n          a,\n          b\n        } = CURVE;\n        const b3 = Fp.mul(b, _3n);\n        const {\n          X: X1,\n          Y: Y1,\n          Z: Z1\n        } = this;\n        let X3 = Fp.ZERO,\n          Y3 = Fp.ZERO,\n          Z3 = Fp.ZERO; // prettier-ignore\n        let t0 = Fp.mul(X1, X1); // step 1\n        let t1 = Fp.mul(Y1, Y1);\n        let t2 = Fp.mul(Z1, Z1);\n        let t3 = Fp.mul(X1, Y1);\n        t3 = Fp.add(t3, t3); // step 5\n        Z3 = Fp.mul(X1, Z1);\n        Z3 = Fp.add(Z3, Z3);\n        X3 = Fp.mul(a, Z3);\n        Y3 = Fp.mul(b3, t2);\n        Y3 = Fp.add(X3, Y3); // step 10\n        X3 = Fp.sub(t1, Y3);\n        Y3 = Fp.add(t1, Y3);\n        Y3 = Fp.mul(X3, Y3);\n        X3 = Fp.mul(t3, X3);\n        Z3 = Fp.mul(b3, Z3); // step 15\n        t2 = Fp.mul(a, t2);\n        t3 = Fp.sub(t0, t2);\n        t3 = Fp.mul(a, t3);\n        t3 = Fp.add(t3, Z3);\n        Z3 = Fp.add(t0, t0); // step 20\n        t0 = Fp.add(Z3, t0);\n        t0 = Fp.add(t0, t2);\n        t0 = Fp.mul(t0, t3);\n        Y3 = Fp.add(Y3, t0);\n        t2 = Fp.mul(Y1, Z1); // step 25\n        t2 = Fp.add(t2, t2);\n        t0 = Fp.mul(t2, t3);\n        X3 = Fp.sub(X3, t0);\n        Z3 = Fp.mul(t2, t1);\n        Z3 = Fp.add(Z3, Z3); // step 30\n        Z3 = Fp.add(Z3, Z3);\n        return new Point(X3, Y3, Z3);\n      }\n      // Renes-Costello-Batina exception-free addition formula.\n      // There is 30% faster Jacobian formula, but it is not complete.\n      // https://eprint.iacr.org/2015/1060, algorithm 1\n      // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n      add(other) {\n        aprjpoint(other);\n        const {\n          X: X1,\n          Y: Y1,\n          Z: Z1\n        } = this;\n        const {\n          X: X2,\n          Y: Y2,\n          Z: Z2\n        } = other;\n        let X3 = Fp.ZERO,\n          Y3 = Fp.ZERO,\n          Z3 = Fp.ZERO; // prettier-ignore\n        const a = CURVE.a;\n        const b3 = Fp.mul(CURVE.b, _3n);\n        let t0 = Fp.mul(X1, X2); // step 1\n        let t1 = Fp.mul(Y1, Y2);\n        let t2 = Fp.mul(Z1, Z2);\n        let t3 = Fp.add(X1, Y1);\n        let t4 = Fp.add(X2, Y2); // step 5\n        t3 = Fp.mul(t3, t4);\n        t4 = Fp.add(t0, t1);\n        t3 = Fp.sub(t3, t4);\n        t4 = Fp.add(X1, Z1);\n        let t5 = Fp.add(X2, Z2); // step 10\n        t4 = Fp.mul(t4, t5);\n        t5 = Fp.add(t0, t2);\n        t4 = Fp.sub(t4, t5);\n        t5 = Fp.add(Y1, Z1);\n        X3 = Fp.add(Y2, Z2); // step 15\n        t5 = Fp.mul(t5, X3);\n        X3 = Fp.add(t1, t2);\n        t5 = Fp.sub(t5, X3);\n        Z3 = Fp.mul(a, t4);\n        X3 = Fp.mul(b3, t2); // step 20\n        Z3 = Fp.add(X3, Z3);\n        X3 = Fp.sub(t1, Z3);\n        Z3 = Fp.add(t1, Z3);\n        Y3 = Fp.mul(X3, Z3);\n        t1 = Fp.add(t0, t0); // step 25\n        t1 = Fp.add(t1, t0);\n        t2 = Fp.mul(a, t2);\n        t4 = Fp.mul(b3, t4);\n        t1 = Fp.add(t1, t2);\n        t2 = Fp.sub(t0, t2); // step 30\n        t2 = Fp.mul(a, t2);\n        t4 = Fp.add(t4, t2);\n        t0 = Fp.mul(t1, t4);\n        Y3 = Fp.add(Y3, t0);\n        t0 = Fp.mul(t5, t4); // step 35\n        X3 = Fp.mul(t3, X3);\n        X3 = Fp.sub(X3, t0);\n        t0 = Fp.mul(t3, t1);\n        Z3 = Fp.mul(t5, Z3);\n        Z3 = Fp.add(Z3, t0); // step 40\n        return new Point(X3, Y3, Z3);\n      }\n      subtract(other) {\n        return this.add(other.negate());\n      }\n      is0() {\n        return this.equals(Point.ZERO);\n      }\n      /**\n       * Constant time multiplication.\n       * Uses wNAF method. Windowed method may be 10% faster,\n       * but takes 2x longer to generate and consumes 2x memory.\n       * Uses precomputes when available.\n       * Uses endomorphism for Koblitz curves.\n       * @param scalar by which the point would be multiplied\n       * @returns New point\n       */\n      multiply(scalar) {\n        const {\n          endo\n        } = extraOpts;\n        if (!Fn.isValidNot0(scalar)) throw new Error('invalid scalar: out of range'); // 0 is invalid\n        let point, fake; // Fake point is used to const-time mult\n        const mul = n => wnaf.cached(this, n, p => (0, curve_ts_1.normalizeZ)(Point, p));\n        /** See docs for {@link EndomorphismOpts} */\n        if (endo) {\n          const {\n            k1neg,\n            k1,\n            k2neg,\n            k2\n          } = splitEndoScalarN(scalar);\n          const {\n            p: k1p,\n            f: k1f\n          } = mul(k1);\n          const {\n            p: k2p,\n            f: k2f\n          } = mul(k2);\n          fake = k1f.add(k2f);\n          point = finishEndo(endo.beta, k1p, k2p, k1neg, k2neg);\n        } else {\n          const {\n            p,\n            f\n          } = mul(scalar);\n          point = p;\n          fake = f;\n        }\n        // Normalize `z` for both points, but return only real one\n        return (0, curve_ts_1.normalizeZ)(Point, [point, fake])[0];\n      }\n      /**\n       * Non-constant-time multiplication. Uses double-and-add algorithm.\n       * It's faster, but should only be used when you don't care about\n       * an exposed secret key e.g. sig verification, which works over *public* keys.\n       */\n      multiplyUnsafe(sc) {\n        const {\n          endo\n        } = extraOpts;\n        const p = this;\n        if (!Fn.isValid(sc)) throw new Error('invalid scalar: out of range'); // 0 is valid\n        if (sc === _0n || p.is0()) return Point.ZERO;\n        if (sc === _1n) return p; // fast-path\n        if (wnaf.hasCache(this)) return this.multiply(sc);\n        if (endo) {\n          const {\n            k1neg,\n            k1,\n            k2neg,\n            k2\n          } = splitEndoScalarN(sc);\n          const {\n            p1,\n            p2\n          } = (0, curve_ts_1.mulEndoUnsafe)(Point, p, k1, k2); // 30% faster vs wnaf.unsafe\n          return finishEndo(endo.beta, p1, p2, k1neg, k2neg);\n        } else {\n          return wnaf.unsafe(p, sc);\n        }\n      }\n      multiplyAndAddUnsafe(Q, a, b) {\n        const sum = this.multiplyUnsafe(a).add(Q.multiplyUnsafe(b));\n        return sum.is0() ? undefined : sum;\n      }\n      /**\n       * Converts Projective point to affine (x, y) coordinates.\n       * @param invertedZ Z^-1 (inverted zero) - optional, precomputation is useful for invertBatch\n       */\n      toAffine(invertedZ) {\n        return toAffineMemo(this, invertedZ);\n      }\n      /**\n       * Checks whether Point is free of torsion elements (is in prime subgroup).\n       * Always torsion-free for cofactor=1 curves.\n       */\n      isTorsionFree() {\n        const {\n          isTorsionFree\n        } = extraOpts;\n        if (cofactor === _1n) return true;\n        if (isTorsionFree) return isTorsionFree(Point, this);\n        return wnaf.unsafe(this, CURVE_ORDER).is0();\n      }\n      clearCofactor() {\n        const {\n          clearCofactor\n        } = extraOpts;\n        if (cofactor === _1n) return this; // Fast-path\n        if (clearCofactor) return clearCofactor(Point, this);\n        return this.multiplyUnsafe(cofactor);\n      }\n      isSmallOrder() {\n        // can we use this.clearCofactor()?\n        return this.multiplyUnsafe(cofactor).is0();\n      }\n      toBytes(isCompressed = true) {\n        (0, utils_ts_1._abool2)(isCompressed, 'isCompressed');\n        this.assertValidity();\n        return encodePoint(Point, this, isCompressed);\n      }\n      toHex(isCompressed = true) {\n        return (0, utils_ts_1.bytesToHex)(this.toBytes(isCompressed));\n      }\n      toString() {\n        return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n      }\n      // TODO: remove\n      get px() {\n        return this.X;\n      }\n      get py() {\n        return this.X;\n      }\n      get pz() {\n        return this.Z;\n      }\n      toRawBytes(isCompressed = true) {\n        return this.toBytes(isCompressed);\n      }\n      _setWindowSize(windowSize) {\n        this.precompute(windowSize);\n      }\n      static normalizeZ(points) {\n        return (0, curve_ts_1.normalizeZ)(Point, points);\n      }\n      static msm(points, scalars) {\n        return (0, curve_ts_1.pippenger)(Point, Fn, points, scalars);\n      }\n      static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(_normFnElement(Fn, privateKey));\n      }\n    }\n    // base / generator point\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    // zero / infinity / identity point\n    Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO); // 0, 1, 0\n    // math field\n    Point.Fp = Fp;\n    // scalar field\n    Point.Fn = Fn;\n    const bits = Fn.BITS;\n    const wnaf = new curve_ts_1.wNAF(Point, extraOpts.endo ? Math.ceil(bits / 2) : bits);\n    Point.BASE.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    return Point;\n  }\n  // Points start with byte 0x02 when y is even; otherwise 0x03\n  function pprefix(hasEvenY) {\n    return Uint8Array.of(hasEvenY ? 0x02 : 0x03);\n  }\n  /**\n   * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n   * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n   * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n   * b = False and y = sqrt(Z * (u / v)) otherwise.\n   * @param Fp\n   * @param Z\n   * @returns\n   */\n  function SWUFpSqrtRatio(Fp, Z) {\n    // Generic implementation\n    const q = Fp.ORDER;\n    let l = _0n;\n    for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n    const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n    // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n    // 2n ** c1 == 2n << (c1-1)\n    const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;\n    const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n    const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n    const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n    const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n    const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n    const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n    const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n    let sqrtRatio = (u, v) => {\n      let tv1 = c6; // 1. tv1 = c6\n      let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n      let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n      tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n      let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n      tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n      tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n      tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n      tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n      let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n      tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n      let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n      tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n      tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n      tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n      // 17. for i in (c1, c1 - 1, ..., 2):\n      for (let i = c1; i > _1n; i--) {\n        let tv5 = i - _2n; // 18.    tv5 = i - 2\n        tv5 = _2n << tv5 - _1n; // 19.    tv5 = 2^tv5\n        let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n        const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n        tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n        tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n        tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n        tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n        tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n      }\n      return {\n        isValid: isQR,\n        value: tv3\n      };\n    };\n    if (Fp.ORDER % _4n === _3n) {\n      // sqrt_ratio_3mod4(u, v)\n      const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n      const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n      sqrtRatio = (u, v) => {\n        let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n        const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n        tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n        let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n        y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n        const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n        const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n        const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n        let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n        return {\n          isValid: isQR,\n          value: y\n        }; // 11. return (isQR, y) isQR ? y : y*c2\n      };\n    }\n    // No curves uses that\n    // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n    return sqrtRatio;\n  }\n  /**\n   * Simplified Shallue-van de Woestijne-Ulas Method\n   * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n   */\n  function mapToCurveSimpleSWU(Fp, opts) {\n    (0, modular_ts_1.validateField)(Fp);\n    const {\n      A,\n      B,\n      Z\n    } = opts;\n    if (!Fp.isValid(A) || !Fp.isValid(B) || !Fp.isValid(Z)) throw new Error('mapToCurveSimpleSWU: invalid opts');\n    const sqrtRatio = SWUFpSqrtRatio(Fp, Z);\n    if (!Fp.isOdd) throw new Error('Field does not have .isOdd()');\n    // Input: u, an element of F.\n    // Output: (x, y), a point on E.\n    return u => {\n      // prettier-ignore\n      let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n      tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n      tv1 = Fp.mul(tv1, Z); // 2.  tv1 = Z * tv1\n      tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n      tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n      tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n      tv3 = Fp.mul(tv3, B); // 6.  tv3 = B * tv3\n      tv4 = Fp.cmov(Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n      tv4 = Fp.mul(tv4, A); // 8.  tv4 = A * tv4\n      tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n      tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n      tv5 = Fp.mul(tv6, A); // 11. tv5 = A * tv6\n      tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n      tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n      tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n      tv5 = Fp.mul(tv6, B); // 15. tv5 = B * tv6\n      tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n      x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n      const {\n        isValid,\n        value\n      } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n      y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n      y = Fp.mul(y, value); // 20.   y = y * y1\n      x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n      y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n      const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n      y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n      const tv4_inv = (0, modular_ts_1.FpInvertBatch)(Fp, [tv4], true)[0];\n      x = Fp.mul(x, tv4_inv); // 25.   x = x / tv4\n      return {\n        x,\n        y\n      };\n    };\n  }\n  function getWLengths(Fp, Fn) {\n    return {\n      secretKey: Fn.BYTES,\n      publicKey: 1 + Fp.BYTES,\n      publicKeyUncompressed: 1 + 2 * Fp.BYTES,\n      publicKeyHasPrefix: true,\n      signature: 2 * Fn.BYTES\n    };\n  }\n  /**\n   * Sometimes users only need getPublicKey, getSharedSecret, and secret key handling.\n   * This helper ensures no signature functionality is present. Less code, smaller bundle size.\n   */\n  function ecdh(Point, ecdhOpts = {}) {\n    const {\n      Fn\n    } = Point;\n    const randomBytes_ = ecdhOpts.randomBytes || utils_ts_1.randomBytes;\n    const lengths = Object.assign(getWLengths(Point.Fp, Fn), {\n      seed: (0, modular_ts_1.getMinHashLength)(Fn.ORDER)\n    });\n    function isValidSecretKey(secretKey) {\n      try {\n        return !!_normFnElement(Fn, secretKey);\n      } catch (error) {\n        return false;\n      }\n    }\n    function isValidPublicKey(publicKey, isCompressed) {\n      const {\n        publicKey: comp,\n        publicKeyUncompressed\n      } = lengths;\n      try {\n        const l = publicKey.length;\n        if (isCompressed === true && l !== comp) return false;\n        if (isCompressed === false && l !== publicKeyUncompressed) return false;\n        return !!Point.fromBytes(publicKey);\n      } catch (error) {\n        return false;\n      }\n    }\n    /**\n     * Produces cryptographically secure secret key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    function randomSecretKey(seed = randomBytes_(lengths.seed)) {\n      return (0, modular_ts_1.mapHashToField)((0, utils_ts_1._abytes2)(seed, lengths.seed, 'seed'), Fn.ORDER);\n    }\n    /**\n     * Computes public key for a secret key. Checks for validity of the secret key.\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns Public key, full when isCompressed=false; short when isCompressed=true\n     */\n    function getPublicKey(secretKey, isCompressed = true) {\n      return Point.BASE.multiply(_normFnElement(Fn, secretKey)).toBytes(isCompressed);\n    }\n    function keygen(seed) {\n      const secretKey = randomSecretKey(seed);\n      return {\n        secretKey,\n        publicKey: getPublicKey(secretKey)\n      };\n    }\n    /**\n     * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n     */\n    function isProbPub(item) {\n      if (typeof item === 'bigint') return false;\n      if (item instanceof Point) return true;\n      const {\n        secretKey,\n        publicKey,\n        publicKeyUncompressed\n      } = lengths;\n      if (Fn.allowedLengths || secretKey === publicKey) return undefined;\n      const l = (0, utils_ts_1.ensureBytes)('key', item).length;\n      return l === publicKey || l === publicKeyUncompressed;\n    }\n    /**\n     * ECDH (Elliptic Curve Diffie Hellman).\n     * Computes shared public key from secret key A and public key B.\n     * Checks: 1) secret key validity 2) shared key is on-curve.\n     * Does NOT hash the result.\n     * @param isCompressed whether to return compact (default), or full key\n     * @returns shared public key\n     */\n    function getSharedSecret(secretKeyA, publicKeyB, isCompressed = true) {\n      if (isProbPub(secretKeyA) === true) throw new Error('first arg must be private key');\n      if (isProbPub(publicKeyB) === false) throw new Error('second arg must be public key');\n      const s = _normFnElement(Fn, secretKeyA);\n      const b = Point.fromHex(publicKeyB); // checks for being on-curve\n      return b.multiply(s).toBytes(isCompressed);\n    }\n    const utils = {\n      isValidSecretKey,\n      isValidPublicKey,\n      randomSecretKey,\n      // TODO: remove\n      isValidPrivateKey: isValidSecretKey,\n      randomPrivateKey: randomSecretKey,\n      normPrivateKeyToScalar: key => _normFnElement(Fn, key),\n      precompute(windowSize = 8, point = Point.BASE) {\n        return point.precompute(windowSize, false);\n      }\n    };\n    return Object.freeze({\n      getPublicKey,\n      getSharedSecret,\n      keygen,\n      Point,\n      utils,\n      lengths\n    });\n  }\n  /**\n   * Creates ECDSA signing interface for given elliptic curve `Point` and `hash` function.\n   * We need `hash` for 2 features:\n   * 1. Message prehash-ing. NOT used if `sign` / `verify` are called with `prehash: false`\n   * 2. k generation in `sign`, using HMAC-drbg(hash)\n   *\n   * ECDSAOpts are only rarely needed.\n   *\n   * @example\n   * ```js\n   * const p256_Point = weierstrass(...);\n   * const p256_sha256 = ecdsa(p256_Point, sha256);\n   * const p256_sha224 = ecdsa(p256_Point, sha224);\n   * const p256_sha224_r = ecdsa(p256_Point, sha224, { randomBytes: (length) => { ... } });\n   * ```\n   */\n  function ecdsa(Point, hash, ecdsaOpts = {}) {\n    (0, utils_1.ahash)(hash);\n    (0, utils_ts_1._validateObject)(ecdsaOpts, {}, {\n      hmac: 'function',\n      lowS: 'boolean',\n      randomBytes: 'function',\n      bits2int: 'function',\n      bits2int_modN: 'function'\n    });\n    const randomBytes = ecdsaOpts.randomBytes || utils_ts_1.randomBytes;\n    const hmac = ecdsaOpts.hmac || ((key, ...msgs) => (0, hmac_js_1.hmac)(hash, key, (0, utils_ts_1.concatBytes)(...msgs)));\n    const {\n      Fp,\n      Fn\n    } = Point;\n    const {\n      ORDER: CURVE_ORDER,\n      BITS: fnBits\n    } = Fn;\n    const {\n      keygen,\n      getPublicKey,\n      getSharedSecret,\n      utils,\n      lengths\n    } = ecdh(Point, ecdsaOpts);\n    const defaultSigOpts = {\n      prehash: false,\n      lowS: typeof ecdsaOpts.lowS === 'boolean' ? ecdsaOpts.lowS : false,\n      format: undefined,\n      //'compact' as ECDSASigFormat,\n      extraEntropy: false\n    };\n    const defaultSigOpts_format = 'compact';\n    function isBiggerThanHalfOrder(number) {\n      const HALF = CURVE_ORDER >> _1n;\n      return number > HALF;\n    }\n    function validateRS(title, num) {\n      if (!Fn.isValidNot0(num)) throw new Error(`invalid signature ${title}: out of range 1..Point.Fn.ORDER`);\n      return num;\n    }\n    function validateSigLength(bytes, format) {\n      validateSigFormat(format);\n      const size = lengths.signature;\n      const sizer = format === 'compact' ? size : format === 'recovered' ? size + 1 : undefined;\n      return (0, utils_ts_1._abytes2)(bytes, sizer, `${format} signature`);\n    }\n    /**\n     * ECDSA signature with its (r, s) properties. Supports compact, recovered & DER representations.\n     */\n    class Signature {\n      constructor(r, s, recovery) {\n        this.r = validateRS('r', r); // r in [1..N-1];\n        this.s = validateRS('s', s); // s in [1..N-1];\n        if (recovery != null) this.recovery = recovery;\n        Object.freeze(this);\n      }\n      static fromBytes(bytes, format = defaultSigOpts_format) {\n        validateSigLength(bytes, format);\n        let recid;\n        if (format === 'der') {\n          const {\n            r,\n            s\n          } = exports.DER.toSig((0, utils_ts_1._abytes2)(bytes));\n          return new Signature(r, s);\n        }\n        if (format === 'recovered') {\n          recid = bytes[0];\n          format = 'compact';\n          bytes = bytes.subarray(1);\n        }\n        const L = Fn.BYTES;\n        const r = bytes.subarray(0, L);\n        const s = bytes.subarray(L, L * 2);\n        return new Signature(Fn.fromBytes(r), Fn.fromBytes(s), recid);\n      }\n      static fromHex(hex, format) {\n        return this.fromBytes((0, utils_ts_1.hexToBytes)(hex), format);\n      }\n      addRecoveryBit(recovery) {\n        return new Signature(this.r, this.s, recovery);\n      }\n      recoverPublicKey(messageHash) {\n        const FIELD_ORDER = Fp.ORDER;\n        const {\n          r,\n          s,\n          recovery: rec\n        } = this;\n        if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n        // ECDSA recovery is hard for cofactor > 1 curves.\n        // In sign, `r = q.x mod n`, and here we recover q.x from r.\n        // While recovering q.x >= n, we need to add r+n for cofactor=1 curves.\n        // However, for cofactor>1, r+n may not get q.x:\n        // r+n*i would need to be done instead where i is unknown.\n        // To easily get i, we either need to:\n        // a. increase amount of valid recid values (4, 5...); OR\n        // b. prohibit non-prime-order signatures (recid > 1).\n        const hasCofactor = CURVE_ORDER * _2n < FIELD_ORDER;\n        if (hasCofactor && rec > 1) throw new Error('recovery id is ambiguous for h>1 curve');\n        const radj = rec === 2 || rec === 3 ? r + CURVE_ORDER : r;\n        if (!Fp.isValid(radj)) throw new Error('recovery id 2 or 3 invalid');\n        const x = Fp.toBytes(radj);\n        const R = Point.fromBytes((0, utils_ts_1.concatBytes)(pprefix((rec & 1) === 0), x));\n        const ir = Fn.inv(radj); // r^-1\n        const h = bits2int_modN((0, utils_ts_1.ensureBytes)('msgHash', messageHash)); // Truncate hash\n        const u1 = Fn.create(-h * ir); // -hr^-1\n        const u2 = Fn.create(s * ir); // sr^-1\n        // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1). unsafe is fine: there is no private data.\n        const Q = Point.BASE.multiplyUnsafe(u1).add(R.multiplyUnsafe(u2));\n        if (Q.is0()) throw new Error('point at infinify');\n        Q.assertValidity();\n        return Q;\n      }\n      // Signatures should be low-s, to prevent malleability.\n      hasHighS() {\n        return isBiggerThanHalfOrder(this.s);\n      }\n      toBytes(format = defaultSigOpts_format) {\n        validateSigFormat(format);\n        if (format === 'der') return (0, utils_ts_1.hexToBytes)(exports.DER.hexFromSig(this));\n        const r = Fn.toBytes(this.r);\n        const s = Fn.toBytes(this.s);\n        if (format === 'recovered') {\n          if (this.recovery == null) throw new Error('recovery bit must be present');\n          return (0, utils_ts_1.concatBytes)(Uint8Array.of(this.recovery), r, s);\n        }\n        return (0, utils_ts_1.concatBytes)(r, s);\n      }\n      toHex(format) {\n        return (0, utils_ts_1.bytesToHex)(this.toBytes(format));\n      }\n      // TODO: remove\n      assertValidity() {}\n      static fromCompact(hex) {\n        return Signature.fromBytes((0, utils_ts_1.ensureBytes)('sig', hex), 'compact');\n      }\n      static fromDER(hex) {\n        return Signature.fromBytes((0, utils_ts_1.ensureBytes)('sig', hex), 'der');\n      }\n      normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, Fn.neg(this.s), this.recovery) : this;\n      }\n      toDERRawBytes() {\n        return this.toBytes('der');\n      }\n      toDERHex() {\n        return (0, utils_ts_1.bytesToHex)(this.toBytes('der'));\n      }\n      toCompactRawBytes() {\n        return this.toBytes('compact');\n      }\n      toCompactHex() {\n        return (0, utils_ts_1.bytesToHex)(this.toBytes('compact'));\n      }\n    }\n    // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n    // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n    // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n    // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n    const bits2int = ecdsaOpts.bits2int || function bits2int_def(bytes) {\n      // Our custom check \"just in case\", for protection against DoS\n      if (bytes.length > 8192) throw new Error('input is too large');\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = (0, utils_ts_1.bytesToNumberBE)(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - fnBits; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n    const bits2int_modN = ecdsaOpts.bits2int_modN || function bits2int_modN_def(bytes) {\n      return Fn.create(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n    // Pads output with zero as per spec\n    const ORDER_MASK = (0, utils_ts_1.bitMask)(fnBits);\n    /** Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`. */\n    function int2octets(num) {\n      // IMPORTANT: the check ensures working for case `Fn.BYTES != Fn.BITS * 8`\n      (0, utils_ts_1.aInRange)('num < 2^' + fnBits, num, _0n, ORDER_MASK);\n      return Fn.toBytes(num);\n    }\n    function validateMsgAndHash(message, prehash) {\n      (0, utils_ts_1._abytes2)(message, undefined, 'message');\n      return prehash ? (0, utils_ts_1._abytes2)(hash(message), undefined, 'prehashed message') : message;\n    }\n    /**\n     * Steps A, D of RFC6979 3.2.\n     * Creates RFC6979 seed; converts msg/privKey to numbers.\n     * Used only in sign, not in verify.\n     *\n     * Warning: we cannot assume here that message has same amount of bytes as curve order,\n     * this will be invalid at least for P521. Also it can be bigger for P224 + SHA256.\n     */\n    function prepSig(message, privateKey, opts) {\n      if (['recovered', 'canonical'].some(k => k in opts)) throw new Error('sign() legacy options not supported');\n      const {\n        lowS,\n        prehash,\n        extraEntropy\n      } = validateSigOpts(opts, defaultSigOpts);\n      message = validateMsgAndHash(message, prehash); // RFC6979 3.2 A: h1 = H(m)\n      // We can't later call bits2octets, since nested bits2int is broken for curves\n      // with fnBits % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n      // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n      const h1int = bits2int_modN(message);\n      const d = _normFnElement(Fn, privateKey); // validate secret key, convert to bigint\n      const seedArgs = [int2octets(d), int2octets(h1int)];\n      // extraEntropy. RFC6979 3.6: additional k' (optional).\n      if (extraEntropy != null && extraEntropy !== false) {\n        // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n        // gen random bytes OR pass as-is\n        const e = extraEntropy === true ? randomBytes(lengths.secretKey) : extraEntropy;\n        seedArgs.push((0, utils_ts_1.ensureBytes)('extraEntropy', e)); // check for being bytes\n      }\n      const seed = (0, utils_ts_1.concatBytes)(...seedArgs); // Step D of RFC6979 3.2\n      const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n      // Converts signature params into point w r/s, checks result for validity.\n      // To transform k => Signature:\n      // q = k⋅G\n      // r = q.x mod n\n      // s = k^-1(m + rd) mod n\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      function k2sig(kBytes) {\n        // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n        // Important: all mod() calls here must be done over N\n        const k = bits2int(kBytes); // mod n, not mod p\n        if (!Fn.isValidNot0(k)) return; // Valid scalars (including k) must be in 1..N-1\n        const ik = Fn.inv(k); // k^-1 mod n\n        const q = Point.BASE.multiply(k).toAffine(); // q = k⋅G\n        const r = Fn.create(q.x); // r = q.x mod n\n        if (r === _0n) return;\n        const s = Fn.create(ik * Fn.create(m + r * d)); // Not using blinding here, see comment above\n        if (s === _0n) return;\n        let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n        let normS = s;\n        if (lowS && isBiggerThanHalfOrder(s)) {\n          normS = Fn.neg(s); // if lowS was passed, ensure s is always\n          recovery ^= 1; // // in the bottom half of N\n        }\n        return new Signature(r, normS, recovery); // use normS, not s\n      }\n      return {\n        seed,\n        k2sig\n      };\n    }\n    /**\n     * Signs message hash with a secret key.\n     *\n     * ```\n     * sign(m, d) where\n     *   k = rfc6979_hmac_drbg(m, d)\n     *   (x, y) = G × k\n     *   r = x mod n\n     *   s = (m + dr) / k mod n\n     * ```\n     */\n    function sign(message, secretKey, opts = {}) {\n      message = (0, utils_ts_1.ensureBytes)('message', message);\n      const {\n        seed,\n        k2sig\n      } = prepSig(message, secretKey, opts); // Steps A, D of RFC6979 3.2.\n      const drbg = (0, utils_ts_1.createHmacDrbg)(hash.outputLen, Fn.BYTES, hmac);\n      const sig = drbg(seed, k2sig); // Steps B, C, D, E, F, G\n      return sig;\n    }\n    function tryParsingSig(sg) {\n      // Try to deduce format\n      let sig = undefined;\n      const isHex = typeof sg === 'string' || (0, utils_ts_1.isBytes)(sg);\n      const isObj = !isHex && sg !== null && typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint';\n      if (!isHex && !isObj) throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n      if (isObj) {\n        sig = new Signature(sg.r, sg.s);\n      } else if (isHex) {\n        try {\n          sig = Signature.fromBytes((0, utils_ts_1.ensureBytes)('sig', sg), 'der');\n        } catch (derError) {\n          if (!(derError instanceof exports.DER.Err)) throw derError;\n        }\n        if (!sig) {\n          try {\n            sig = Signature.fromBytes((0, utils_ts_1.ensureBytes)('sig', sg), 'compact');\n          } catch (error) {\n            return false;\n          }\n        }\n      }\n      if (!sig) return false;\n      return sig;\n    }\n    /**\n     * Verifies a signature against message and public key.\n     * Rejects lowS signatures by default: see {@link ECDSAVerifyOpts}.\n     * Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n     *\n     * ```\n     * verify(r, s, h, P) where\n     *   u1 = hs^-1 mod n\n     *   u2 = rs^-1 mod n\n     *   R = u1⋅G + u2⋅P\n     *   mod(R.x, n) == r\n     * ```\n     */\n    function verify(signature, message, publicKey, opts = {}) {\n      const {\n        lowS,\n        prehash,\n        format\n      } = validateSigOpts(opts, defaultSigOpts);\n      publicKey = (0, utils_ts_1.ensureBytes)('publicKey', publicKey);\n      message = validateMsgAndHash((0, utils_ts_1.ensureBytes)('message', message), prehash);\n      if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n      const sig = format === undefined ? tryParsingSig(signature) : Signature.fromBytes((0, utils_ts_1.ensureBytes)('sig', signature), format);\n      if (sig === false) return false;\n      try {\n        const P = Point.fromBytes(publicKey);\n        if (lowS && sig.hasHighS()) return false;\n        const {\n          r,\n          s\n        } = sig;\n        const h = bits2int_modN(message); // mod n, not mod p\n        const is = Fn.inv(s); // s^-1 mod n\n        const u1 = Fn.create(h * is); // u1 = hs^-1 mod n\n        const u2 = Fn.create(r * is); // u2 = rs^-1 mod n\n        const R = Point.BASE.multiplyUnsafe(u1).add(P.multiplyUnsafe(u2)); // u1⋅G + u2⋅P\n        if (R.is0()) return false;\n        const v = Fn.create(R.x); // v = r.x mod n\n        return v === r;\n      } catch (e) {\n        return false;\n      }\n    }\n    function recoverPublicKey(signature, message, opts = {}) {\n      const {\n        prehash\n      } = validateSigOpts(opts, defaultSigOpts);\n      message = validateMsgAndHash(message, prehash);\n      return Signature.fromBytes(signature, 'recovered').recoverPublicKey(message).toBytes();\n    }\n    return Object.freeze({\n      keygen,\n      getPublicKey,\n      getSharedSecret,\n      utils,\n      lengths,\n      Point,\n      sign,\n      verify,\n      recoverPublicKey,\n      Signature,\n      hash\n    });\n  }\n  /** @deprecated use `weierstrass` in newer releases */\n  function weierstrassPoints(c) {\n    const {\n      CURVE,\n      curveOpts\n    } = _weierstrass_legacy_opts_to_new(c);\n    const Point = weierstrassN(CURVE, curveOpts);\n    return _weierstrass_new_output_to_legacy(c, Point);\n  }\n  function _weierstrass_legacy_opts_to_new(c) {\n    const CURVE = {\n      a: c.a,\n      b: c.b,\n      p: c.Fp.ORDER,\n      n: c.n,\n      h: c.h,\n      Gx: c.Gx,\n      Gy: c.Gy\n    };\n    const Fp = c.Fp;\n    let allowedLengths = c.allowedPrivateKeyLengths ? Array.from(new Set(c.allowedPrivateKeyLengths.map(l => Math.ceil(l / 2)))) : undefined;\n    const Fn = (0, modular_ts_1.Field)(CURVE.n, {\n      BITS: c.nBitLength,\n      allowedLengths: allowedLengths,\n      modFromBytes: c.wrapPrivateKey\n    });\n    const curveOpts = {\n      Fp,\n      Fn,\n      allowInfinityPoint: c.allowInfinityPoint,\n      endo: c.endo,\n      isTorsionFree: c.isTorsionFree,\n      clearCofactor: c.clearCofactor,\n      fromBytes: c.fromBytes,\n      toBytes: c.toBytes\n    };\n    return {\n      CURVE,\n      curveOpts\n    };\n  }\n  function _ecdsa_legacy_opts_to_new(c) {\n    const {\n      CURVE,\n      curveOpts\n    } = _weierstrass_legacy_opts_to_new(c);\n    const ecdsaOpts = {\n      hmac: c.hmac,\n      randomBytes: c.randomBytes,\n      lowS: c.lowS,\n      bits2int: c.bits2int,\n      bits2int_modN: c.bits2int_modN\n    };\n    return {\n      CURVE,\n      curveOpts,\n      hash: c.hash,\n      ecdsaOpts\n    };\n  }\n  function _legacyHelperEquat(Fp, a, b) {\n    /**\n     * y² = x³ + ax + b: Short weierstrass curve formula. Takes x, returns y².\n     * @returns y²\n     */\n    function weierstrassEquation(x) {\n      const x2 = Fp.sqr(x); // x * x\n      const x3 = Fp.mul(x2, x); // x² * x\n      return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x³ + a * x + b\n    }\n    return weierstrassEquation;\n  }\n  function _weierstrass_new_output_to_legacy(c, Point) {\n    const {\n      Fp,\n      Fn\n    } = Point;\n    function isWithinCurveOrder(num) {\n      return (0, utils_ts_1.inRange)(num, _1n, Fn.ORDER);\n    }\n    const weierstrassEquation = _legacyHelperEquat(Fp, c.a, c.b);\n    return Object.assign({}, {\n      CURVE: c,\n      Point: Point,\n      ProjectivePoint: Point,\n      normPrivateKeyToScalar: key => _normFnElement(Fn, key),\n      weierstrassEquation,\n      isWithinCurveOrder\n    });\n  }\n  function _ecdsa_new_output_to_legacy(c, _ecdsa) {\n    const Point = _ecdsa.Point;\n    return Object.assign({}, _ecdsa, {\n      ProjectivePoint: Point,\n      CURVE: Object.assign({}, c, (0, modular_ts_1.nLength)(Point.Fn.ORDER, Point.Fn.BITS))\n    });\n  }\n  // _ecdsa_legacy\n  function weierstrass(c) {\n    const {\n      CURVE,\n      curveOpts,\n      hash,\n      ecdsaOpts\n    } = _ecdsa_legacy_opts_to_new(c);\n    const Point = weierstrassN(CURVE, curveOpts);\n    const signs = ecdsa(Point, hash, ecdsaOpts);\n    return _ecdsa_new_output_to_legacy(c, signs);\n  }\n});","lineCount":1556,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"DER"],[7,13,3,11],[7,16,3,14,"exports"],[7,23,3,21],[7,24,3,22,"DERErr"],[7,30,3,28],[7,33,3,31],[7,38,3,36],[7,39,3,37],[8,2,4,0,"exports"],[8,9,4,7],[8,10,4,8,"_splitEndoScalar"],[8,26,4,24],[8,29,4,27,"_splitEndoScalar"],[8,45,4,43],[9,2,5,0,"exports"],[9,9,5,7],[9,10,5,8,"_normFnElement"],[9,24,5,22],[9,27,5,25,"_normFnElement"],[9,41,5,39],[10,2,6,0,"exports"],[10,9,6,7],[10,10,6,8,"weierstrassN"],[10,22,6,20],[10,25,6,23,"weierstrassN"],[10,37,6,35],[11,2,7,0,"exports"],[11,9,7,7],[11,10,7,8,"SWUFpSqrtRatio"],[11,24,7,22],[11,27,7,25,"SWUFpSqrtRatio"],[11,41,7,39],[12,2,8,0,"exports"],[12,9,8,7],[12,10,8,8,"mapToCurveSimpleSWU"],[12,29,8,27],[12,32,8,30,"mapToCurveSimpleSWU"],[12,51,8,49],[13,2,9,0,"exports"],[13,9,9,7],[13,10,9,8,"ecdh"],[13,14,9,12],[13,17,9,15,"ecdh"],[13,21,9,19],[14,2,10,0,"exports"],[14,9,10,7],[14,10,10,8,"ecdsa"],[14,15,10,13],[14,18,10,16,"ecdsa"],[14,23,10,21],[15,2,11,0,"exports"],[15,9,11,7],[15,10,11,8,"weierstrassPoints"],[15,27,11,25],[15,30,11,28,"weierstrassPoints"],[15,47,11,45],[16,2,12,0,"exports"],[16,9,12,7],[16,10,12,8,"_legacyHelperEquat"],[16,28,12,26],[16,31,12,29,"_legacyHelperEquat"],[16,49,12,47],[17,2,13,0,"exports"],[17,9,13,7],[17,10,13,8,"weierstrass"],[17,21,13,19],[17,24,13,22,"weierstrass"],[17,35,13,33],[18,2,14,0],[19,0,15,0],[20,0,16,0],[21,0,17,0],[22,0,18,0],[23,0,19,0],[24,0,20,0],[25,0,21,0],[26,0,22,0],[27,0,23,0],[28,0,24,0],[29,0,25,0],[30,0,26,0],[31,0,27,0],[32,0,28,0],[33,0,29,0],[34,0,30,0],[35,0,31,0],[36,0,32,0],[37,0,33,0],[38,0,34,0],[39,0,35,0],[40,0,36,0],[41,0,37,0],[42,0,38,0],[43,0,39,0],[44,2,40,0],[45,2,41,0],[45,8,41,6,"hmac_js_1"],[45,17,41,15],[45,20,41,18,"require"],[45,27,41,25],[45,28,41,25,"_dependencyMap"],[45,42,41,25],[45,70,41,49],[45,71,41,50],[46,2,42,0],[46,8,42,6,"utils_1"],[46,15,42,13],[46,18,42,16,"require"],[46,25,42,23],[46,26,42,23,"_dependencyMap"],[46,40,42,23],[46,66,42,45],[46,67,42,46],[47,2,43,0],[47,8,43,6,"utils_ts_1"],[47,18,43,16],[47,21,43,19,"require"],[47,28,43,26],[47,29,43,26,"_dependencyMap"],[47,43,43,26],[47,61,43,40],[47,62,43,41],[48,2,44,0],[48,8,44,6,"curve_ts_1"],[48,18,44,16],[48,21,44,19,"require"],[48,28,44,26],[48,29,44,26,"_dependencyMap"],[48,43,44,26],[48,60,44,39],[48,61,44,40],[49,2,45,0],[49,8,45,6,"modular_ts_1"],[49,20,45,18],[49,23,45,21,"require"],[49,30,45,28],[49,31,45,28,"_dependencyMap"],[49,45,45,28],[49,64,45,43],[49,65,45,44],[50,2,46,0],[51,2,47,0],[51,8,47,6,"divNearest"],[51,18,47,16],[51,21,47,19,"divNearest"],[51,22,47,20,"num"],[51,25,47,23],[51,27,47,25,"den"],[51,30,47,28],[51,35,47,33],[51,36,47,34,"num"],[51,39,47,37],[51,42,47,40],[51,43,47,41,"num"],[51,46,47,44],[51,50,47,48],[51,51,47,49],[51,54,47,52,"den"],[51,57,47,55],[51,60,47,58],[51,61,47,59,"den"],[51,64,47,62],[51,68,47,66,"_2n"],[51,71,47,69],[51,75,47,73,"den"],[51,78,47,76],[52,2,48,0],[53,0,49,0],[54,0,50,0],[55,2,51,0],[55,11,51,9,"_splitEndoScalar"],[55,27,51,25,"_splitEndoScalar"],[55,28,51,26,"k"],[55,29,51,27],[55,31,51,29,"basis"],[55,36,51,34],[55,38,51,36,"n"],[55,39,51,37],[55,41,51,39],[56,4,52,4],[57,4,53,4],[58,4,54,4],[59,4,55,4],[59,10,55,10],[59,11,55,11],[59,12,55,12,"a1"],[59,14,55,14],[59,16,55,16,"b1"],[59,18,55,18],[59,19,55,19],[59,21,55,21],[59,22,55,22,"a2"],[59,24,55,24],[59,26,55,26,"b2"],[59,28,55,28],[59,29,55,29],[59,30,55,30],[59,33,55,33,"basis"],[59,38,55,38],[60,4,56,4],[60,10,56,10,"c1"],[60,12,56,12],[60,15,56,15,"divNearest"],[60,25,56,25],[60,26,56,26,"b2"],[60,28,56,28],[60,31,56,31,"k"],[60,32,56,32],[60,34,56,34,"n"],[60,35,56,35],[60,36,56,36],[61,4,57,4],[61,10,57,10,"c2"],[61,12,57,12],[61,15,57,15,"divNearest"],[61,25,57,25],[61,26,57,26],[61,27,57,27,"b1"],[61,29,57,29],[61,32,57,32,"k"],[61,33,57,33],[61,35,57,35,"n"],[61,36,57,36],[61,37,57,37],[62,4,58,4],[63,4,59,4],[64,4,60,4],[64,8,60,8,"k1"],[64,10,60,10],[64,13,60,13,"k"],[64,14,60,14],[64,17,60,17,"c1"],[64,19,60,19],[64,22,60,22,"a1"],[64,24,60,24],[64,27,60,27,"c2"],[64,29,60,29],[64,32,60,32,"a2"],[64,34,60,34],[65,4,61,4],[65,8,61,8,"k2"],[65,10,61,10],[65,13,61,13],[65,14,61,14,"c1"],[65,16,61,16],[65,19,61,19,"b1"],[65,21,61,21],[65,24,61,24,"c2"],[65,26,61,26],[65,29,61,29,"b2"],[65,31,61,31],[66,4,62,4],[66,10,62,10,"k1neg"],[66,15,62,15],[66,18,62,18,"k1"],[66,20,62,20],[66,23,62,23,"_0n"],[66,26,62,26],[67,4,63,4],[67,10,63,10,"k2neg"],[67,15,63,15],[67,18,63,18,"k2"],[67,20,63,20],[67,23,63,23,"_0n"],[67,26,63,26],[68,4,64,4],[68,8,64,8,"k1neg"],[68,13,64,13],[68,15,65,8,"k1"],[68,17,65,10],[68,20,65,13],[68,21,65,14,"k1"],[68,23,65,16],[69,4,66,4],[69,8,66,8,"k2neg"],[69,13,66,13],[69,15,67,8,"k2"],[69,17,67,10],[69,20,67,13],[69,21,67,14,"k2"],[69,23,67,16],[70,4,68,4],[71,4,69,4],[72,4,70,4],[72,10,70,10,"MAX_NUM"],[72,17,70,17],[72,20,70,20],[72,21,70,21],[72,22,70,22],[72,24,70,24,"utils_ts_1"],[72,34,70,34],[72,35,70,35,"bitMask"],[72,42,70,42],[72,44,70,44,"Math"],[72,48,70,48],[72,49,70,49,"ceil"],[72,53,70,53],[72,54,70,54],[72,55,70,55],[72,56,70,56],[72,58,70,58,"utils_ts_1"],[72,68,70,68],[72,69,70,69,"bitLen"],[72,75,70,75],[72,77,70,77,"n"],[72,78,70,78],[72,79,70,79],[72,82,70,82],[72,83,70,83],[72,84,70,84],[72,85,70,85],[72,88,70,88,"_1n"],[72,91,70,91],[72,92,70,92],[72,93,70,93],[73,4,71,4],[73,8,71,8,"k1"],[73,10,71,10],[73,13,71,13,"_0n"],[73,16,71,16],[73,20,71,20,"k1"],[73,22,71,22],[73,26,71,26,"MAX_NUM"],[73,33,71,33],[73,37,71,37,"k2"],[73,39,71,39],[73,42,71,42,"_0n"],[73,45,71,45],[73,49,71,49,"k2"],[73,51,71,51],[73,55,71,55,"MAX_NUM"],[73,62,71,62],[73,64,71,64],[74,6,72,8],[74,12,72,14],[74,16,72,18,"Error"],[74,21,72,23],[74,22,72,24],[74,62,72,64],[74,65,72,67,"k"],[74,66,72,68],[74,67,72,69],[75,4,73,4],[76,4,74,4],[76,11,74,11],[77,6,74,13,"k1neg"],[77,11,74,18],[78,6,74,20,"k1"],[78,8,74,22],[79,6,74,24,"k2neg"],[79,11,74,29],[80,6,74,31,"k2"],[81,4,74,34],[81,5,74,35],[82,2,75,0],[83,2,76,0],[83,11,76,9,"validateSigFormat"],[83,28,76,26,"validateSigFormat"],[83,29,76,27,"format"],[83,35,76,33],[83,37,76,35],[84,4,77,4],[84,8,77,8],[84,9,77,9],[84,10,77,10],[84,19,77,19],[84,21,77,21],[84,32,77,32],[84,34,77,34],[84,39,77,39],[84,40,77,40],[84,41,77,41,"includes"],[84,49,77,49],[84,50,77,50,"format"],[84,56,77,56],[84,57,77,57],[84,59,78,8],[84,65,78,14],[84,69,78,18,"Error"],[84,74,78,23],[84,75,78,24],[84,134,78,83],[84,135,78,84],[85,4,79,4],[85,11,79,11,"format"],[85,17,79,17],[86,2,80,0],[87,2,81,0],[87,11,81,9,"validateSigOpts"],[87,26,81,24,"validateSigOpts"],[87,27,81,25,"opts"],[87,31,81,29],[87,33,81,31,"def"],[87,36,81,34],[87,38,81,36],[88,4,82,4],[88,10,82,10,"optsn"],[88,15,82,15],[88,18,82,18],[88,19,82,19],[88,20,82,20],[89,4,83,4],[89,9,83,9],[89,13,83,13,"optName"],[89,20,83,20],[89,24,83,24,"Object"],[89,30,83,30],[89,31,83,31,"keys"],[89,35,83,35],[89,36,83,36,"def"],[89,39,83,39],[89,40,83,40],[89,42,83,42],[90,6,84,8],[91,6,85,8,"optsn"],[91,11,85,13],[91,12,85,14,"optName"],[91,19,85,21],[91,20,85,22],[91,23,85,25,"opts"],[91,27,85,29],[91,28,85,30,"optName"],[91,35,85,37],[91,36,85,38],[91,41,85,43,"undefined"],[91,50,85,52],[91,53,85,55,"def"],[91,56,85,58],[91,57,85,59,"optName"],[91,64,85,66],[91,65,85,67],[91,68,85,70,"opts"],[91,72,85,74],[91,73,85,75,"optName"],[91,80,85,82],[91,81,85,83],[92,4,86,4],[93,4,87,4],[93,5,87,5],[93,6,87,6],[93,8,87,8,"utils_ts_1"],[93,18,87,18],[93,19,87,19,"_abool2"],[93,26,87,26],[93,28,87,28,"optsn"],[93,33,87,33],[93,34,87,34,"lowS"],[93,38,87,38],[93,40,87,40],[93,46,87,46],[93,47,87,47],[94,4,88,4],[94,5,88,5],[94,6,88,6],[94,8,88,8,"utils_ts_1"],[94,18,88,18],[94,19,88,19,"_abool2"],[94,26,88,26],[94,28,88,28,"optsn"],[94,33,88,33],[94,34,88,34,"prehash"],[94,41,88,41],[94,43,88,43],[94,52,88,52],[94,53,88,53],[95,4,89,4],[95,8,89,8,"optsn"],[95,13,89,13],[95,14,89,14,"format"],[95,20,89,20],[95,25,89,25,"undefined"],[95,34,89,34],[95,36,90,8,"validateSigFormat"],[95,53,90,25],[95,54,90,26,"optsn"],[95,59,90,31],[95,60,90,32,"format"],[95,66,90,38],[95,67,90,39],[96,4,91,4],[96,11,91,11,"optsn"],[96,16,91,16],[97,2,92,0],[98,2,93,0],[98,8,93,6,"DERErr"],[98,14,93,12],[98,23,93,21,"Error"],[98,28,93,26],[98,29,93,27],[99,4,94,4,"constructor"],[99,15,94,15,"constructor"],[99,16,94,16,"m"],[99,17,94,17],[99,20,94,20],[99,22,94,22],[99,24,94,24],[100,6,95,8],[100,11,95,13],[100,12,95,14,"m"],[100,13,95,15],[100,14,95,16],[101,4,96,4],[102,2,97,0],[103,2,98,0,"exports"],[103,9,98,7],[103,10,98,8,"DERErr"],[103,16,98,14],[103,19,98,17,"DERErr"],[103,25,98,23],[104,2,99,0],[105,0,100,0],[106,0,101,0],[107,0,102,0],[108,0,103,0],[109,0,104,0],[110,0,105,0],[111,2,106,0,"exports"],[111,9,106,7],[111,10,106,8,"DER"],[111,13,106,11],[111,16,106,14],[112,4,107,4],[113,4,108,4,"Err"],[113,7,108,7],[113,9,108,9,"DERErr"],[113,15,108,15],[114,4,109,4],[115,4,110,4,"_tlv"],[115,8,110,8],[115,10,110,10],[116,6,111,8,"encode"],[116,12,111,14],[116,14,111,16,"encode"],[116,15,111,17,"tag"],[116,18,111,20],[116,20,111,22,"data"],[116,24,111,26],[116,29,111,31],[117,8,112,12],[117,14,112,18],[118,10,112,20,"Err"],[118,13,112,23],[118,15,112,25,"E"],[119,8,112,27],[119,9,112,28],[119,12,112,31,"exports"],[119,19,112,38],[119,20,112,39,"DER"],[119,23,112,42],[120,8,113,12],[120,12,113,16,"tag"],[120,15,113,19],[120,18,113,22],[120,19,113,23],[120,23,113,27,"tag"],[120,26,113,30],[120,29,113,33],[120,32,113,36],[120,34,114,16],[120,40,114,22],[120,44,114,26,"E"],[120,45,114,27],[120,46,114,28],[120,69,114,51],[120,70,114,52],[121,8,115,12],[121,12,115,16,"data"],[121,16,115,20],[121,17,115,21,"length"],[121,23,115,27],[121,26,115,30],[121,27,115,31],[121,29,116,16],[121,35,116,22],[121,39,116,26,"E"],[121,40,116,27],[121,41,116,28],[121,68,116,55],[121,69,116,56],[122,8,117,12],[122,14,117,18,"dataLen"],[122,21,117,25],[122,24,117,28,"data"],[122,28,117,32],[122,29,117,33,"length"],[122,35,117,39],[122,38,117,42],[122,39,117,43],[123,8,118,12],[123,14,118,18,"len"],[123,17,118,21],[123,20,118,24],[123,21,118,25],[123,22,118,26],[123,24,118,28,"utils_ts_1"],[123,34,118,38],[123,35,118,39,"numberToHexUnpadded"],[123,54,118,58],[123,56,118,60,"dataLen"],[123,63,118,67],[123,64,118,68],[124,8,119,12],[124,12,119,17,"len"],[124,15,119,20],[124,16,119,21,"length"],[124,22,119,27],[124,25,119,30],[124,26,119,31],[124,29,119,35],[124,32,119,38],[124,34,120,16],[124,40,120,22],[124,44,120,26,"E"],[124,45,120,27],[124,46,120,28],[124,84,120,66],[124,85,120,67],[125,8,121,12],[126,8,122,12],[126,14,122,18,"lenLen"],[126,20,122,24],[126,23,122,27,"dataLen"],[126,30,122,34],[126,33,122,37],[126,36,122,40],[126,39,122,43],[126,40,122,44],[126,41,122,45],[126,43,122,47,"utils_ts_1"],[126,53,122,57],[126,54,122,58,"numberToHexUnpadded"],[126,73,122,77],[126,75,122,80,"len"],[126,78,122,83],[126,79,122,84,"length"],[126,85,122,90],[126,88,122,93],[126,89,122,94],[126,92,122,98],[126,95,122,101],[126,96,122,102],[126,99,122,105],[126,101,122,107],[127,8,123,12],[127,14,123,18,"t"],[127,15,123,19],[127,18,123,22],[127,19,123,23],[127,20,123,24],[127,22,123,26,"utils_ts_1"],[127,32,123,36],[127,33,123,37,"numberToHexUnpadded"],[127,52,123,56],[127,54,123,58,"tag"],[127,57,123,61],[127,58,123,62],[128,8,124,12],[128,15,124,19,"t"],[128,16,124,20],[128,19,124,23,"lenLen"],[128,25,124,29],[128,28,124,32,"len"],[128,31,124,35],[128,34,124,38,"data"],[128,38,124,42],[129,6,125,8],[129,7,125,9],[130,6,126,8],[131,6,127,8,"decode"],[131,12,127,14,"decode"],[131,13,127,15,"tag"],[131,16,127,18],[131,18,127,20,"data"],[131,22,127,24],[131,24,127,26],[132,8,128,12],[132,14,128,18],[133,10,128,20,"Err"],[133,13,128,23],[133,15,128,25,"E"],[134,8,128,27],[134,9,128,28],[134,12,128,31,"exports"],[134,19,128,38],[134,20,128,39,"DER"],[134,23,128,42],[135,8,129,12],[135,12,129,16,"pos"],[135,15,129,19],[135,18,129,22],[135,19,129,23],[136,8,130,12],[136,12,130,16,"tag"],[136,15,130,19],[136,18,130,22],[136,19,130,23],[136,23,130,27,"tag"],[136,26,130,30],[136,29,130,33],[136,32,130,36],[136,34,131,16],[136,40,131,22],[136,44,131,26,"E"],[136,45,131,27],[136,46,131,28],[136,69,131,51],[136,70,131,52],[137,8,132,12],[137,12,132,16,"data"],[137,16,132,20],[137,17,132,21,"length"],[137,23,132,27],[137,26,132,30],[137,27,132,31],[137,31,132,35,"data"],[137,35,132,39],[137,36,132,40,"pos"],[137,39,132,43],[137,41,132,45],[137,42,132,46],[137,47,132,51,"tag"],[137,50,132,54],[137,52,133,16],[137,58,133,22],[137,62,133,26,"E"],[137,63,133,27],[137,64,133,28],[137,87,133,51],[137,88,133,52],[138,8,134,12],[138,14,134,18,"first"],[138,19,134,23],[138,22,134,26,"data"],[138,26,134,30],[138,27,134,31,"pos"],[138,30,134,34],[138,32,134,36],[138,33,134,37],[139,8,135,12],[139,14,135,18,"isLong"],[139,20,135,24],[139,23,135,27],[139,24,135,28],[139,26,135,30,"first"],[139,31,135,35],[139,34,135,38],[139,37,135,41],[139,38,135,42],[139,39,135,43],[139,40,135,44],[140,8,136,12],[140,12,136,16,"length"],[140,18,136,22],[140,21,136,25],[140,22,136,26],[141,8,137,12],[141,12,137,16],[141,13,137,17,"isLong"],[141,19,137,23],[141,21,138,16,"length"],[141,27,138,22],[141,30,138,25,"first"],[141,35,138,30],[141,36,138,31],[141,41,139,17],[142,10,140,16],[143,10,141,16],[143,16,141,22,"lenLen"],[143,22,141,28],[143,25,141,31,"first"],[143,30,141,36],[143,33,141,39],[143,36,141,42],[144,10,142,16],[144,14,142,20],[144,15,142,21,"lenLen"],[144,21,142,27],[144,23,143,20],[144,29,143,26],[144,33,143,30,"E"],[144,34,143,31],[144,35,143,32],[144,86,143,83],[144,87,143,84],[145,10,144,16],[145,14,144,20,"lenLen"],[145,20,144,26],[145,23,144,29],[145,24,144,30],[145,26,145,20],[145,32,145,26],[145,36,145,30,"E"],[145,37,145,31],[145,38,145,32],[145,80,145,74],[145,81,145,75],[145,82,145,76],[145,83,145,77],[146,10,146,16],[146,16,146,22,"lengthBytes"],[146,27,146,33],[146,30,146,36,"data"],[146,34,146,40],[146,35,146,41,"subarray"],[146,43,146,49],[146,44,146,50,"pos"],[146,47,146,53],[146,49,146,55,"pos"],[146,52,146,58],[146,55,146,61,"lenLen"],[146,61,146,67],[146,62,146,68],[147,10,147,16],[147,14,147,20,"lengthBytes"],[147,25,147,31],[147,26,147,32,"length"],[147,32,147,38],[147,37,147,43,"lenLen"],[147,43,147,49],[147,45,148,20],[147,51,148,26],[147,55,148,30,"E"],[147,56,148,31],[147,57,148,32],[147,96,148,71],[147,97,148,72],[148,10,149,16],[148,14,149,20,"lengthBytes"],[148,25,149,31],[148,26,149,32],[148,27,149,33],[148,28,149,34],[148,33,149,39],[148,34,149,40],[148,36,150,20],[148,42,150,26],[148,46,150,30,"E"],[148,47,150,31],[148,48,150,32],[148,86,150,70],[148,87,150,71],[149,10,151,16],[149,15,151,21],[149,21,151,27,"b"],[149,22,151,28],[149,26,151,32,"lengthBytes"],[149,37,151,43],[149,39,152,20,"length"],[149,45,152,26],[149,48,152,30,"length"],[149,54,152,36],[149,58,152,40],[149,59,152,41],[149,62,152,45,"b"],[149,63,152,46],[150,10,153,16,"pos"],[150,13,153,19],[150,17,153,23,"lenLen"],[150,23,153,29],[151,10,154,16],[151,14,154,20,"length"],[151,20,154,26],[151,23,154,29],[151,26,154,32],[151,28,155,20],[151,34,155,26],[151,38,155,30,"E"],[151,39,155,31],[151,40,155,32],[151,80,155,72],[151,81,155,73],[152,8,156,12],[153,8,157,12],[153,14,157,18,"v"],[153,15,157,19],[153,18,157,22,"data"],[153,22,157,26],[153,23,157,27,"subarray"],[153,31,157,35],[153,32,157,36,"pos"],[153,35,157,39],[153,37,157,41,"pos"],[153,40,157,44],[153,43,157,47,"length"],[153,49,157,53],[153,50,157,54],[154,8,158,12],[154,12,158,16,"v"],[154,13,158,17],[154,14,158,18,"length"],[154,20,158,24],[154,25,158,29,"length"],[154,31,158,35],[154,33,159,16],[154,39,159,22],[154,43,159,26,"E"],[154,44,159,27],[154,45,159,28],[154,77,159,60],[154,78,159,61],[155,8,160,12],[155,15,160,19],[156,10,160,21,"v"],[156,11,160,22],[157,10,160,24,"l"],[157,11,160,25],[157,13,160,27,"data"],[157,17,160,31],[157,18,160,32,"subarray"],[157,26,160,40],[157,27,160,41,"pos"],[157,30,160,44],[157,33,160,47,"length"],[157,39,160,53],[158,8,160,55],[158,9,160,56],[159,6,161,8],[160,4,162,4],[160,5,162,5],[161,4,163,4],[162,4,164,4],[163,4,165,4],[164,4,166,4],[165,4,167,4,"_int"],[165,8,167,8],[165,10,167,10],[166,6,168,8,"encode"],[166,12,168,14,"encode"],[166,13,168,15,"num"],[166,16,168,18],[166,18,168,20],[167,8,169,12],[167,14,169,18],[168,10,169,20,"Err"],[168,13,169,23],[168,15,169,25,"E"],[169,8,169,27],[169,9,169,28],[169,12,169,31,"exports"],[169,19,169,38],[169,20,169,39,"DER"],[169,23,169,42],[170,8,170,12],[170,12,170,16,"num"],[170,15,170,19],[170,18,170,22,"_0n"],[170,21,170,25],[170,23,171,16],[170,29,171,22],[170,33,171,26,"E"],[170,34,171,27],[170,35,171,28],[170,79,171,72],[170,80,171,73],[171,8,172,12],[171,12,172,16,"hex"],[171,15,172,19],[171,18,172,22],[171,19,172,23],[171,20,172,24],[171,22,172,26,"utils_ts_1"],[171,32,172,36],[171,33,172,37,"numberToHexUnpadded"],[171,52,172,56],[171,54,172,58,"num"],[171,57,172,61],[171,58,172,62],[172,8,173,12],[173,8,174,12],[173,12,174,16,"Number"],[173,18,174,22],[173,19,174,23,"parseInt"],[173,27,174,31],[173,28,174,32,"hex"],[173,31,174,35],[173,32,174,36],[173,33,174,37],[173,34,174,38],[173,36,174,40],[173,38,174,42],[173,39,174,43],[173,42,174,46],[173,48,174,52],[173,50,175,16,"hex"],[173,53,175,19],[173,56,175,22],[173,60,175,26],[173,63,175,29,"hex"],[173,66,175,32],[174,8,176,12],[174,12,176,16,"hex"],[174,15,176,19],[174,16,176,20,"length"],[174,22,176,26],[174,25,176,29],[174,26,176,30],[174,28,177,16],[174,34,177,22],[174,38,177,26,"E"],[174,39,177,27],[174,40,177,28],[174,88,177,76],[174,89,177,77],[175,8,178,12],[175,15,178,19,"hex"],[175,18,178,22],[176,6,179,8],[176,7,179,9],[177,6,180,8,"decode"],[177,12,180,14,"decode"],[177,13,180,15,"data"],[177,17,180,19],[177,19,180,21],[178,8,181,12],[178,14,181,18],[179,10,181,20,"Err"],[179,13,181,23],[179,15,181,25,"E"],[180,8,181,27],[180,9,181,28],[180,12,181,31,"exports"],[180,19,181,38],[180,20,181,39,"DER"],[180,23,181,42],[181,8,182,12],[181,12,182,16,"data"],[181,16,182,20],[181,17,182,21],[181,18,182,22],[181,19,182,23],[181,22,182,26],[181,25,182,29],[181,27,183,16],[181,33,183,22],[181,37,183,26,"E"],[181,38,183,27],[181,39,183,28],[181,76,183,65],[181,77,183,66],[182,8,184,12],[182,12,184,16,"data"],[182,16,184,20],[182,17,184,21],[182,18,184,22],[182,19,184,23],[182,24,184,28],[182,28,184,32],[182,32,184,36],[182,34,184,38,"data"],[182,38,184,42],[182,39,184,43],[182,40,184,44],[182,41,184,45],[182,44,184,48],[182,47,184,51],[182,48,184,52],[182,50,185,16],[182,56,185,22],[182,60,185,26,"E"],[182,61,185,27],[182,62,185,28],[182,115,185,81],[182,116,185,82],[183,8,186,12],[183,15,186,19],[183,16,186,20],[183,17,186,21],[183,19,186,23,"utils_ts_1"],[183,29,186,33],[183,30,186,34,"bytesToNumberBE"],[183,45,186,49],[183,47,186,51,"data"],[183,51,186,55],[183,52,186,56],[184,6,187,8],[185,4,188,4],[185,5,188,5],[186,4,189,4,"toSig"],[186,9,189,9,"toSig"],[186,10,189,10,"hex"],[186,13,189,13],[186,15,189,15],[187,6,190,8],[188,6,191,8],[188,12,191,14],[189,8,191,16,"Err"],[189,11,191,19],[189,13,191,21,"E"],[189,14,191,22],[190,8,191,24,"_int"],[190,12,191,28],[190,14,191,30,"int"],[190,17,191,33],[191,8,191,35,"_tlv"],[191,12,191,39],[191,14,191,41,"tlv"],[192,6,191,45],[192,7,191,46],[192,10,191,49,"exports"],[192,17,191,56],[192,18,191,57,"DER"],[192,21,191,60],[193,6,192,8],[193,12,192,14,"data"],[193,16,192,18],[193,19,192,21],[193,20,192,22],[193,21,192,23],[193,23,192,25,"utils_ts_1"],[193,33,192,35],[193,34,192,36,"ensureBytes"],[193,45,192,47],[193,47,192,49],[193,58,192,60],[193,60,192,62,"hex"],[193,63,192,65],[193,64,192,66],[194,6,193,8],[194,12,193,14],[195,8,193,16,"v"],[195,9,193,17],[195,11,193,19,"seqBytes"],[195,19,193,27],[196,8,193,29,"l"],[196,9,193,30],[196,11,193,32,"seqLeftBytes"],[197,6,193,45],[197,7,193,46],[197,10,193,49,"tlv"],[197,13,193,52],[197,14,193,53,"decode"],[197,20,193,59],[197,21,193,60],[197,25,193,64],[197,27,193,66,"data"],[197,31,193,70],[197,32,193,71],[198,6,194,8],[198,10,194,12,"seqLeftBytes"],[198,22,194,24],[198,23,194,25,"length"],[198,29,194,31],[198,31,195,12],[198,37,195,18],[198,41,195,22,"E"],[198,42,195,23],[198,43,195,24],[198,88,195,69],[198,89,195,70],[199,6,196,8],[199,12,196,14],[200,8,196,16,"v"],[200,9,196,17],[200,11,196,19,"rBytes"],[200,17,196,25],[201,8,196,27,"l"],[201,9,196,28],[201,11,196,30,"rLeftBytes"],[202,6,196,41],[202,7,196,42],[202,10,196,45,"tlv"],[202,13,196,48],[202,14,196,49,"decode"],[202,20,196,55],[202,21,196,56],[202,25,196,60],[202,27,196,62,"seqBytes"],[202,35,196,70],[202,36,196,71],[203,6,197,8],[203,12,197,14],[204,8,197,16,"v"],[204,9,197,17],[204,11,197,19,"sBytes"],[204,17,197,25],[205,8,197,27,"l"],[205,9,197,28],[205,11,197,30,"sLeftBytes"],[206,6,197,41],[206,7,197,42],[206,10,197,45,"tlv"],[206,13,197,48],[206,14,197,49,"decode"],[206,20,197,55],[206,21,197,56],[206,25,197,60],[206,27,197,62,"rLeftBytes"],[206,37,197,72],[206,38,197,73],[207,6,198,8],[207,10,198,12,"sLeftBytes"],[207,20,198,22],[207,21,198,23,"length"],[207,27,198,29],[207,29,199,12],[207,35,199,18],[207,39,199,22,"E"],[207,40,199,23],[207,41,199,24],[207,86,199,69],[207,87,199,70],[208,6,200,8],[208,13,200,15],[209,8,200,17,"r"],[209,9,200,18],[209,11,200,20,"int"],[209,14,200,23],[209,15,200,24,"decode"],[209,21,200,30],[209,22,200,31,"rBytes"],[209,28,200,37],[209,29,200,38],[210,8,200,40,"s"],[210,9,200,41],[210,11,200,43,"int"],[210,14,200,46],[210,15,200,47,"decode"],[210,21,200,53],[210,22,200,54,"sBytes"],[210,28,200,60],[211,6,200,62],[211,7,200,63],[212,4,201,4],[212,5,201,5],[213,4,202,4,"hexFromSig"],[213,14,202,14,"hexFromSig"],[213,15,202,15,"sig"],[213,18,202,18],[213,20,202,20],[214,6,203,8],[214,12,203,14],[215,8,203,16,"_tlv"],[215,12,203,20],[215,14,203,22,"tlv"],[215,17,203,25],[216,8,203,27,"_int"],[216,12,203,31],[216,14,203,33,"int"],[217,6,203,37],[217,7,203,38],[217,10,203,41,"exports"],[217,17,203,48],[217,18,203,49,"DER"],[217,21,203,52],[218,6,204,8],[218,12,204,14,"rs"],[218,14,204,16],[218,17,204,19,"tlv"],[218,20,204,22],[218,21,204,23,"encode"],[218,27,204,29],[218,28,204,30],[218,32,204,34],[218,34,204,36,"int"],[218,37,204,39],[218,38,204,40,"encode"],[218,44,204,46],[218,45,204,47,"sig"],[218,48,204,50],[218,49,204,51,"r"],[218,50,204,52],[218,51,204,53],[218,52,204,54],[219,6,205,8],[219,12,205,14,"ss"],[219,14,205,16],[219,17,205,19,"tlv"],[219,20,205,22],[219,21,205,23,"encode"],[219,27,205,29],[219,28,205,30],[219,32,205,34],[219,34,205,36,"int"],[219,37,205,39],[219,38,205,40,"encode"],[219,44,205,46],[219,45,205,47,"sig"],[219,48,205,50],[219,49,205,51,"s"],[219,50,205,52],[219,51,205,53],[219,52,205,54],[220,6,206,8],[220,12,206,14,"seq"],[220,15,206,17],[220,18,206,20,"rs"],[220,20,206,22],[220,23,206,25,"ss"],[220,25,206,27],[221,6,207,8],[221,13,207,15,"tlv"],[221,16,207,18],[221,17,207,19,"encode"],[221,23,207,25],[221,24,207,26],[221,28,207,30],[221,30,207,32,"seq"],[221,33,207,35],[221,34,207,36],[222,4,208,4],[223,2,209,0],[223,3,209,1],[224,2,210,0],[225,2,211,0],[226,2,212,0],[226,8,212,6,"_0n"],[226,11,212,9],[226,14,212,12,"BigInt"],[226,20,212,18],[226,21,212,19],[226,22,212,20],[226,23,212,21],[227,4,212,23,"_1n"],[227,7,212,26],[227,10,212,29,"BigInt"],[227,16,212,35],[227,17,212,36],[227,18,212,37],[227,19,212,38],[228,4,212,40,"_2n"],[228,7,212,43],[228,10,212,46,"BigInt"],[228,16,212,52],[228,17,212,53],[228,18,212,54],[228,19,212,55],[229,4,212,57,"_3n"],[229,7,212,60],[229,10,212,63,"BigInt"],[229,16,212,69],[229,17,212,70],[229,18,212,71],[229,19,212,72],[230,4,212,74,"_4n"],[230,7,212,77],[230,10,212,80,"BigInt"],[230,16,212,86],[230,17,212,87],[230,18,212,88],[230,19,212,89],[231,2,213,0],[231,11,213,9,"_normFnElement"],[231,25,213,23,"_normFnElement"],[231,26,213,24,"Fn"],[231,28,213,26],[231,30,213,28,"key"],[231,33,213,31],[231,35,213,33],[232,4,214,4],[232,10,214,10],[233,6,214,12,"BYTES"],[233,11,214,17],[233,13,214,19,"expected"],[234,4,214,28],[234,5,214,29],[234,8,214,32,"Fn"],[234,10,214,34],[235,4,215,4],[235,8,215,8,"num"],[235,11,215,11],[236,4,216,4],[236,8,216,8],[236,15,216,15,"key"],[236,18,216,18],[236,23,216,23],[236,31,216,31],[236,33,216,33],[237,6,217,8,"num"],[237,9,217,11],[237,12,217,14,"key"],[237,15,217,17],[238,4,218,4],[238,5,218,5],[238,11,219,9],[239,6,220,8],[239,10,220,12,"bytes"],[239,15,220,17],[239,18,220,20],[239,19,220,21],[239,20,220,22],[239,22,220,24,"utils_ts_1"],[239,32,220,34],[239,33,220,35,"ensureBytes"],[239,44,220,46],[239,46,220,48],[239,59,220,61],[239,61,220,63,"key"],[239,64,220,66],[239,65,220,67],[240,6,221,8],[240,10,221,12],[241,8,222,12,"num"],[241,11,222,15],[241,14,222,18,"Fn"],[241,16,222,20],[241,17,222,21,"fromBytes"],[241,26,222,30],[241,27,222,31,"bytes"],[241,32,222,36],[241,33,222,37],[242,6,223,8],[242,7,223,9],[242,8,224,8],[242,15,224,15,"error"],[242,20,224,20],[242,22,224,22],[243,8,225,12],[243,14,225,18],[243,18,225,22,"Error"],[243,23,225,27],[243,24,225,28],[243,70,225,74,"expected"],[243,78,225,82],[243,87,225,91],[243,94,225,98,"key"],[243,97,225,101],[243,99,225,103],[243,100,225,104],[244,6,226,8],[245,4,227,4],[246,4,228,4],[246,8,228,8],[246,9,228,9,"Fn"],[246,11,228,11],[246,12,228,12,"isValidNot0"],[246,23,228,23],[246,24,228,24,"num"],[246,27,228,27],[246,28,228,28],[246,30,229,8],[246,36,229,14],[246,40,229,18,"Error"],[246,45,229,23],[246,46,229,24],[246,90,229,68],[246,91,229,69],[247,4,230,4],[247,11,230,11,"num"],[247,14,230,14],[248,2,231,0],[249,2,232,0],[250,0,233,0],[251,0,234,0],[252,0,235,0],[253,0,236,0],[254,0,237,0],[255,0,238,0],[256,0,239,0],[257,0,240,0],[258,0,241,0],[259,0,242,0],[260,0,243,0],[261,0,244,0],[262,0,245,0],[263,0,246,0],[264,0,247,0],[265,0,248,0],[266,2,249,0],[266,11,249,9,"weierstrassN"],[266,23,249,21,"weierstrassN"],[266,24,249,22,"params"],[266,30,249,28],[266,32,249,30,"extraOpts"],[266,41,249,39],[266,44,249,42],[266,45,249,43],[266,46,249,44],[266,48,249,46],[267,4,250,4],[267,10,250,10,"validated"],[267,19,250,19],[267,22,250,22],[267,23,250,23],[267,24,250,24],[267,26,250,26,"curve_ts_1"],[267,36,250,36],[267,37,250,37,"_createCurveFields"],[267,55,250,55],[267,57,250,57],[267,70,250,70],[267,72,250,72,"params"],[267,78,250,78],[267,80,250,80,"extraOpts"],[267,89,250,89],[267,90,250,90],[268,4,251,4],[268,10,251,10],[269,6,251,12,"Fp"],[269,8,251,14],[270,6,251,16,"Fn"],[271,4,251,19],[271,5,251,20],[271,8,251,23,"validated"],[271,17,251,32],[272,4,252,4],[272,8,252,8,"CURVE"],[272,13,252,13],[272,16,252,16,"validated"],[272,25,252,25],[272,26,252,26,"CURVE"],[272,31,252,31],[273,4,253,4],[273,10,253,10],[274,6,253,12,"h"],[274,7,253,13],[274,9,253,15,"cofactor"],[274,17,253,23],[275,6,253,25,"n"],[275,7,253,26],[275,9,253,28,"CURVE_ORDER"],[276,4,253,40],[276,5,253,41],[276,8,253,44,"CURVE"],[276,13,253,49],[277,4,254,4],[277,5,254,5],[277,6,254,6],[277,8,254,8,"utils_ts_1"],[277,18,254,18],[277,19,254,19,"_validateObject"],[277,34,254,34],[277,36,254,36,"extraOpts"],[277,45,254,45],[277,47,254,47],[277,48,254,48],[277,49,254,49],[277,51,254,51],[278,6,255,8,"allowInfinityPoint"],[278,24,255,26],[278,26,255,28],[278,35,255,37],[279,6,256,8,"clearCofactor"],[279,19,256,21],[279,21,256,23],[279,31,256,33],[280,6,257,8,"isTorsionFree"],[280,19,257,21],[280,21,257,23],[280,31,257,33],[281,6,258,8,"fromBytes"],[281,15,258,17],[281,17,258,19],[281,27,258,29],[282,6,259,8,"toBytes"],[282,13,259,15],[282,15,259,17],[282,25,259,27],[283,6,260,8,"endo"],[283,10,260,12],[283,12,260,14],[283,20,260,22],[284,6,261,8,"wrapPrivateKey"],[284,20,261,22],[284,22,261,24],[285,4,262,4],[285,5,262,5],[285,6,262,6],[286,4,263,4],[286,10,263,10],[287,6,263,12,"endo"],[288,4,263,17],[288,5,263,18],[288,8,263,21,"extraOpts"],[288,17,263,30],[289,4,264,4],[289,8,264,8,"endo"],[289,12,264,12],[289,14,264,14],[290,6,265,8],[291,6,266,8],[291,10,266,12],[291,11,266,13,"Fp"],[291,13,266,15],[291,14,266,16,"is0"],[291,17,266,19],[291,18,266,20,"CURVE"],[291,23,266,25],[291,24,266,26,"a"],[291,25,266,27],[291,26,266,28],[291,30,266,32],[291,37,266,39,"endo"],[291,41,266,43],[291,42,266,44,"beta"],[291,46,266,48],[291,51,266,53],[291,59,266,61],[291,63,266,65],[291,64,266,66,"Array"],[291,69,266,71],[291,70,266,72,"isArray"],[291,77,266,79],[291,78,266,80,"endo"],[291,82,266,84],[291,83,266,85,"basises"],[291,90,266,92],[291,91,266,93],[291,93,266,95],[292,8,267,12],[292,14,267,18],[292,18,267,22,"Error"],[292,23,267,27],[292,24,267,28],[292,84,267,88],[292,85,267,89],[293,6,268,8],[294,4,269,4],[295,4,270,4],[295,10,270,10,"lengths"],[295,17,270,17],[295,20,270,20,"getWLengths"],[295,31,270,31],[295,32,270,32,"Fp"],[295,34,270,34],[295,36,270,36,"Fn"],[295,38,270,38],[295,39,270,39],[296,4,271,4],[296,13,271,13,"assertCompressionIsSupported"],[296,41,271,41,"assertCompressionIsSupported"],[296,42,271,41],[296,44,271,44],[297,6,272,8],[297,10,272,12],[297,11,272,13,"Fp"],[297,13,272,15],[297,14,272,16,"isOdd"],[297,19,272,21],[297,21,273,12],[297,27,273,18],[297,31,273,22,"Error"],[297,36,273,27],[297,37,273,28],[297,97,273,88],[297,98,273,89],[298,4,274,4],[299,4,275,4],[300,4,276,4],[300,13,276,13,"pointToBytes"],[300,25,276,25,"pointToBytes"],[300,26,276,26,"_c"],[300,28,276,28],[300,30,276,30,"point"],[300,35,276,35],[300,37,276,37,"isCompressed"],[300,49,276,49],[300,51,276,51],[301,6,277,8],[301,12,277,14],[302,8,277,16,"x"],[302,9,277,17],[303,8,277,19,"y"],[304,6,277,21],[304,7,277,22],[304,10,277,25,"point"],[304,15,277,30],[304,16,277,31,"toAffine"],[304,24,277,39],[304,25,277,40],[304,26,277,41],[305,6,278,8],[305,12,278,14,"bx"],[305,14,278,16],[305,17,278,19,"Fp"],[305,19,278,21],[305,20,278,22,"toBytes"],[305,27,278,29],[305,28,278,30,"x"],[305,29,278,31],[305,30,278,32],[306,6,279,8],[306,7,279,9],[306,8,279,10],[306,10,279,12,"utils_ts_1"],[306,20,279,22],[306,21,279,23,"_abool2"],[306,28,279,30],[306,30,279,32,"isCompressed"],[306,42,279,44],[306,44,279,46],[306,58,279,60],[306,59,279,61],[307,6,280,8],[307,10,280,12,"isCompressed"],[307,22,280,24],[307,24,280,26],[308,8,281,12,"assertCompressionIsSupported"],[308,36,281,40],[308,37,281,41],[308,38,281,42],[309,8,282,12],[309,14,282,18,"hasEvenY"],[309,22,282,26],[309,25,282,29],[309,26,282,30,"Fp"],[309,28,282,32],[309,29,282,33,"isOdd"],[309,34,282,38],[309,35,282,39,"y"],[309,36,282,40],[309,37,282,41],[310,8,283,12],[310,15,283,19],[310,16,283,20],[310,17,283,21],[310,19,283,23,"utils_ts_1"],[310,29,283,33],[310,30,283,34,"concatBytes"],[310,41,283,45],[310,43,283,47,"pprefix"],[310,50,283,54],[310,51,283,55,"hasEvenY"],[310,59,283,63],[310,60,283,64],[310,62,283,66,"bx"],[310,64,283,68],[310,65,283,69],[311,6,284,8],[311,7,284,9],[311,13,285,13],[312,8,286,12],[312,15,286,19],[312,16,286,20],[312,17,286,21],[312,19,286,23,"utils_ts_1"],[312,29,286,33],[312,30,286,34,"concatBytes"],[312,41,286,45],[312,43,286,47,"Uint8Array"],[312,53,286,57],[312,54,286,58,"of"],[312,56,286,60],[312,57,286,61],[312,61,286,65],[312,62,286,66],[312,64,286,68,"bx"],[312,66,286,70],[312,68,286,72,"Fp"],[312,70,286,74],[312,71,286,75,"toBytes"],[312,78,286,82],[312,79,286,83,"y"],[312,80,286,84],[312,81,286,85],[312,82,286,86],[313,6,287,8],[314,4,288,4],[315,4,289,4],[315,13,289,13,"pointFromBytes"],[315,27,289,27,"pointFromBytes"],[315,28,289,28,"bytes"],[315,33,289,33],[315,35,289,35],[316,6,290,8],[316,7,290,9],[316,8,290,10],[316,10,290,12,"utils_ts_1"],[316,20,290,22],[316,21,290,23,"_abytes2"],[316,29,290,31],[316,31,290,33,"bytes"],[316,36,290,38],[316,38,290,40,"undefined"],[316,47,290,49],[316,49,290,51],[316,56,290,58],[316,57,290,59],[317,6,291,8],[317,12,291,14],[318,8,291,16,"publicKey"],[318,17,291,25],[318,19,291,27,"comp"],[318,23,291,31],[319,8,291,33,"publicKeyUncompressed"],[319,29,291,54],[319,31,291,56,"uncomp"],[320,6,291,63],[320,7,291,64],[320,10,291,67,"lengths"],[320,17,291,74],[320,18,291,75],[320,19,291,76],[321,6,292,8],[321,12,292,14,"length"],[321,18,292,20],[321,21,292,23,"bytes"],[321,26,292,28],[321,27,292,29,"length"],[321,33,292,35],[322,6,293,8],[322,12,293,14,"head"],[322,16,293,18],[322,19,293,21,"bytes"],[322,24,293,26],[322,25,293,27],[322,26,293,28],[322,27,293,29],[323,6,294,8],[323,12,294,14,"tail"],[323,16,294,18],[323,19,294,21,"bytes"],[323,24,294,26],[323,25,294,27,"subarray"],[323,33,294,35],[323,34,294,36],[323,35,294,37],[323,36,294,38],[324,6,295,8],[325,6,296,8],[325,10,296,12,"length"],[325,16,296,18],[325,21,296,23,"comp"],[325,25,296,27],[325,30,296,32,"head"],[325,34,296,36],[325,39,296,41],[325,43,296,45],[325,47,296,49,"head"],[325,51,296,53],[325,56,296,58],[325,60,296,62],[325,61,296,63],[325,63,296,65],[326,8,297,12],[326,14,297,18,"x"],[326,15,297,19],[326,18,297,22,"Fp"],[326,20,297,24],[326,21,297,25,"fromBytes"],[326,30,297,34],[326,31,297,35,"tail"],[326,35,297,39],[326,36,297,40],[327,8,298,12],[327,12,298,16],[327,13,298,17,"Fp"],[327,15,298,19],[327,16,298,20,"isValid"],[327,23,298,27],[327,24,298,28,"x"],[327,25,298,29],[327,26,298,30],[327,28,299,16],[327,34,299,22],[327,38,299,26,"Error"],[327,43,299,31],[327,44,299,32],[327,81,299,69],[327,82,299,70],[328,8,300,12],[328,14,300,18,"y2"],[328,16,300,20],[328,19,300,23,"weierstrassEquation"],[328,38,300,42],[328,39,300,43,"x"],[328,40,300,44],[328,41,300,45],[328,42,300,46],[328,43,300,47],[329,8,301,12],[329,12,301,16,"y"],[329,13,301,17],[330,8,302,12],[330,12,302,16],[331,10,303,16,"y"],[331,11,303,17],[331,14,303,20,"Fp"],[331,16,303,22],[331,17,303,23,"sqrt"],[331,21,303,27],[331,22,303,28,"y2"],[331,24,303,30],[331,25,303,31],[331,26,303,32],[331,27,303,33],[332,8,304,12],[332,9,304,13],[332,10,305,12],[332,17,305,19,"sqrtError"],[332,26,305,28],[332,28,305,30],[333,10,306,16],[333,16,306,22,"err"],[333,19,306,25],[333,22,306,28,"sqrtError"],[333,31,306,37],[333,43,306,49,"Error"],[333,48,306,54],[333,51,306,57],[333,55,306,61],[333,58,306,64,"sqrtError"],[333,67,306,73],[333,68,306,74,"message"],[333,75,306,81],[333,78,306,84],[333,80,306,86],[334,10,307,16],[334,16,307,22],[334,20,307,26,"Error"],[334,25,307,31],[334,26,307,32],[334,66,307,72],[334,69,307,75,"err"],[334,72,307,78],[334,73,307,79],[335,8,308,12],[336,8,309,12,"assertCompressionIsSupported"],[336,36,309,40],[336,37,309,41],[336,38,309,42],[337,8,310,12],[337,14,310,18,"isYOdd"],[337,20,310,24],[337,23,310,27,"Fp"],[337,25,310,29],[337,26,310,30,"isOdd"],[337,31,310,35],[337,32,310,36,"y"],[337,33,310,37],[337,34,310,38],[337,35,310,39],[337,36,310,40],[338,8,311,12],[338,14,311,18,"isHeadOdd"],[338,23,311,27],[338,26,311,30],[338,27,311,31,"head"],[338,31,311,35],[338,34,311,38],[338,35,311,39],[338,41,311,45],[338,42,311,46],[338,43,311,47],[338,44,311,48],[339,8,312,12],[339,12,312,16,"isHeadOdd"],[339,21,312,25],[339,26,312,30,"isYOdd"],[339,32,312,36],[339,34,313,16,"y"],[339,35,313,17],[339,38,313,20,"Fp"],[339,40,313,22],[339,41,313,23,"neg"],[339,44,313,26],[339,45,313,27,"y"],[339,46,313,28],[339,47,313,29],[340,8,314,12],[340,15,314,19],[341,10,314,21,"x"],[341,11,314,22],[342,10,314,24,"y"],[343,8,314,26],[343,9,314,27],[344,6,315,8],[344,7,315,9],[344,13,316,13],[344,17,316,17,"length"],[344,23,316,23],[344,28,316,28,"uncomp"],[344,34,316,34],[344,38,316,38,"head"],[344,42,316,42],[344,47,316,47],[344,51,316,51],[344,53,316,53],[345,8,317,12],[346,8,318,12],[346,14,318,18,"L"],[346,15,318,19],[346,18,318,22,"Fp"],[346,20,318,24],[346,21,318,25,"BYTES"],[346,26,318,30],[347,8,319,12],[347,14,319,18,"x"],[347,15,319,19],[347,18,319,22,"Fp"],[347,20,319,24],[347,21,319,25,"fromBytes"],[347,30,319,34],[347,31,319,35,"tail"],[347,35,319,39],[347,36,319,40,"subarray"],[347,44,319,48],[347,45,319,49],[347,46,319,50],[347,48,319,52,"L"],[347,49,319,53],[347,50,319,54],[347,51,319,55],[348,8,320,12],[348,14,320,18,"y"],[348,15,320,19],[348,18,320,22,"Fp"],[348,20,320,24],[348,21,320,25,"fromBytes"],[348,30,320,34],[348,31,320,35,"tail"],[348,35,320,39],[348,36,320,40,"subarray"],[348,44,320,48],[348,45,320,49,"L"],[348,46,320,50],[348,48,320,52,"L"],[348,49,320,53],[348,52,320,56],[348,53,320,57],[348,54,320,58],[348,55,320,59],[349,8,321,12],[349,12,321,16],[349,13,321,17,"isValidXY"],[349,22,321,26],[349,23,321,27,"x"],[349,24,321,28],[349,26,321,30,"y"],[349,27,321,31],[349,28,321,32],[349,30,322,16],[349,36,322,22],[349,40,322,26,"Error"],[349,45,322,31],[349,46,322,32],[349,74,322,60],[349,75,322,61],[350,8,323,12],[350,15,323,19],[351,10,323,21,"x"],[351,11,323,22],[352,10,323,24,"y"],[353,8,323,26],[353,9,323,27],[354,6,324,8],[354,7,324,9],[354,13,325,13],[355,8,326,12],[355,14,326,18],[355,18,326,22,"Error"],[355,23,326,27],[355,24,326,28],[355,49,326,53,"length"],[355,55,326,59],[355,80,326,84,"comp"],[355,84,326,88],[355,104,326,108,"uncomp"],[355,110,326,114],[355,112,326,116],[355,113,326,117],[356,6,327,8],[357,4,328,4],[358,4,329,4],[358,10,329,10,"encodePoint"],[358,21,329,21],[358,24,329,24,"extraOpts"],[358,33,329,33],[358,34,329,34,"toBytes"],[358,41,329,41],[358,45,329,45,"pointToBytes"],[358,57,329,57],[359,4,330,4],[359,10,330,10,"decodePoint"],[359,21,330,21],[359,24,330,24,"extraOpts"],[359,33,330,33],[359,34,330,34,"fromBytes"],[359,43,330,43],[359,47,330,47,"pointFromBytes"],[359,61,330,61],[360,4,331,4],[360,13,331,13,"weierstrassEquation"],[360,32,331,32,"weierstrassEquation"],[360,33,331,33,"x"],[360,34,331,34],[360,36,331,36],[361,6,332,8],[361,12,332,14,"x2"],[361,14,332,16],[361,17,332,19,"Fp"],[361,19,332,21],[361,20,332,22,"sqr"],[361,23,332,25],[361,24,332,26,"x"],[361,25,332,27],[361,26,332,28],[361,27,332,29],[361,28,332,30],[362,6,333,8],[362,12,333,14,"x3"],[362,14,333,16],[362,17,333,19,"Fp"],[362,19,333,21],[362,20,333,22,"mul"],[362,23,333,25],[362,24,333,26,"x2"],[362,26,333,28],[362,28,333,30,"x"],[362,29,333,31],[362,30,333,32],[362,31,333,33],[362,32,333,34],[363,6,334,8],[363,13,334,15,"Fp"],[363,15,334,17],[363,16,334,18,"add"],[363,19,334,21],[363,20,334,22,"Fp"],[363,22,334,24],[363,23,334,25,"add"],[363,26,334,28],[363,27,334,29,"x3"],[363,29,334,31],[363,31,334,33,"Fp"],[363,33,334,35],[363,34,334,36,"mul"],[363,37,334,39],[363,38,334,40,"x"],[363,39,334,41],[363,41,334,43,"CURVE"],[363,46,334,48],[363,47,334,49,"a"],[363,48,334,50],[363,49,334,51],[363,50,334,52],[363,52,334,54,"CURVE"],[363,57,334,59],[363,58,334,60,"b"],[363,59,334,61],[363,60,334,62],[363,61,334,63],[363,62,334,64],[364,4,335,4],[365,4,336,4],[366,4,337,4],[367,4,338,4],[367,13,338,13,"isValidXY"],[367,22,338,22,"isValidXY"],[367,23,338,23,"x"],[367,24,338,24],[367,26,338,26,"y"],[367,27,338,27],[367,29,338,29],[368,6,339,8],[368,12,339,14,"left"],[368,16,339,18],[368,19,339,21,"Fp"],[368,21,339,23],[368,22,339,24,"sqr"],[368,25,339,27],[368,26,339,28,"y"],[368,27,339,29],[368,28,339,30],[368,29,339,31],[368,30,339,32],[369,6,340,8],[369,12,340,14,"right"],[369,17,340,19],[369,20,340,22,"weierstrassEquation"],[369,39,340,41],[369,40,340,42,"x"],[369,41,340,43],[369,42,340,44],[369,43,340,45],[369,44,340,46],[370,6,341,8],[370,13,341,15,"Fp"],[370,15,341,17],[370,16,341,18,"eql"],[370,19,341,21],[370,20,341,22,"left"],[370,24,341,26],[370,26,341,28,"right"],[370,31,341,33],[370,32,341,34],[371,4,342,4],[372,4,343,4],[373,4,344,4],[374,4,345,4],[374,8,345,8],[374,9,345,9,"isValidXY"],[374,18,345,18],[374,19,345,19,"CURVE"],[374,24,345,24],[374,25,345,25,"Gx"],[374,27,345,27],[374,29,345,29,"CURVE"],[374,34,345,34],[374,35,345,35,"Gy"],[374,37,345,37],[374,38,345,38],[374,40,346,8],[374,46,346,14],[374,50,346,18,"Error"],[374,55,346,23],[374,56,346,24],[374,91,346,59],[374,92,346,60],[375,4,347,4],[376,4,348,4],[377,4,349,4],[377,10,349,10,"_4a3"],[377,14,349,14],[377,17,349,17,"Fp"],[377,19,349,19],[377,20,349,20,"mul"],[377,23,349,23],[377,24,349,24,"Fp"],[377,26,349,26],[377,27,349,27,"pow"],[377,30,349,30],[377,31,349,31,"CURVE"],[377,36,349,36],[377,37,349,37,"a"],[377,38,349,38],[377,40,349,40,"_3n"],[377,43,349,43],[377,44,349,44],[377,46,349,46,"_4n"],[377,49,349,49],[377,50,349,50],[378,4,350,4],[378,10,350,10,"_27b2"],[378,15,350,15],[378,18,350,18,"Fp"],[378,20,350,20],[378,21,350,21,"mul"],[378,24,350,24],[378,25,350,25,"Fp"],[378,27,350,27],[378,28,350,28,"sqr"],[378,31,350,31],[378,32,350,32,"CURVE"],[378,37,350,37],[378,38,350,38,"b"],[378,39,350,39],[378,40,350,40],[378,42,350,42,"BigInt"],[378,48,350,48],[378,49,350,49],[378,51,350,51],[378,52,350,52],[378,53,350,53],[379,4,351,4],[379,8,351,8,"Fp"],[379,10,351,10],[379,11,351,11,"is0"],[379,14,351,14],[379,15,351,15,"Fp"],[379,17,351,17],[379,18,351,18,"add"],[379,21,351,21],[379,22,351,22,"_4a3"],[379,26,351,26],[379,28,351,28,"_27b2"],[379,33,351,33],[379,34,351,34],[379,35,351,35],[379,37,352,8],[379,43,352,14],[379,47,352,18,"Error"],[379,52,352,23],[379,53,352,24],[379,79,352,50],[379,80,352,51],[380,4,353,4],[381,4,354,4],[381,13,354,13,"acoord"],[381,19,354,19,"acoord"],[381,20,354,20,"title"],[381,25,354,25],[381,27,354,27,"n"],[381,28,354,28],[381,30,354,30,"banZero"],[381,37,354,37],[381,40,354,40],[381,45,354,45],[381,47,354,47],[382,6,355,8],[382,10,355,12],[382,11,355,13,"Fp"],[382,13,355,15],[382,14,355,16,"isValid"],[382,21,355,23],[382,22,355,24,"n"],[382,23,355,25],[382,24,355,26],[382,28,355,31,"banZero"],[382,35,355,38],[382,39,355,42,"Fp"],[382,41,355,44],[382,42,355,45,"is0"],[382,45,355,48],[382,46,355,49,"n"],[382,47,355,50],[382,48,355,52],[382,50,356,12],[382,56,356,18],[382,60,356,22,"Error"],[382,65,356,27],[382,66,356,28],[382,90,356,52,"title"],[382,95,356,57],[382,97,356,59],[382,98,356,60],[383,6,357,8],[383,13,357,15,"n"],[383,14,357,16],[384,4,358,4],[385,4,359,4],[385,13,359,13,"aprjpoint"],[385,22,359,22,"aprjpoint"],[385,23,359,23,"other"],[385,28,359,28],[385,30,359,30],[386,6,360,8],[386,10,360,12],[386,12,360,14,"other"],[386,17,360,19],[386,29,360,31,"Point"],[386,34,360,36],[386,35,360,37],[386,37,361,12],[386,43,361,18],[386,47,361,22,"Error"],[386,52,361,27],[386,53,361,28],[386,79,361,54],[386,80,361,55],[387,4,362,4],[388,4,363,4],[388,13,363,13,"splitEndoScalarN"],[388,29,363,29,"splitEndoScalarN"],[388,30,363,30,"k"],[388,31,363,31],[388,33,363,33],[389,6,364,8],[389,10,364,12],[389,11,364,13,"endo"],[389,15,364,17],[389,19,364,21],[389,20,364,22,"endo"],[389,24,364,26],[389,25,364,27,"basises"],[389,32,364,34],[389,34,365,12],[389,40,365,18],[389,44,365,22,"Error"],[389,49,365,27],[389,50,365,28],[389,59,365,37],[389,60,365,38],[390,6,366,8],[390,13,366,15,"_splitEndoScalar"],[390,29,366,31],[390,30,366,32,"k"],[390,31,366,33],[390,33,366,35,"endo"],[390,37,366,39],[390,38,366,40,"basises"],[390,45,366,47],[390,47,366,49,"Fn"],[390,49,366,51],[390,50,366,52,"ORDER"],[390,55,366,57],[390,56,366,58],[391,4,367,4],[392,4,368,4],[393,4,369,4],[394,4,370,4],[395,4,371,4],[396,4,372,4],[396,10,372,10,"toAffineMemo"],[396,22,372,22],[396,25,372,25],[396,26,372,26],[396,27,372,27],[396,29,372,29,"utils_ts_1"],[396,39,372,39],[396,40,372,40,"memoized"],[396,48,372,48],[396,50,372,50],[396,51,372,51,"p"],[396,52,372,52],[396,54,372,54,"iz"],[396,56,372,56],[396,61,372,61],[397,6,373,8],[397,12,373,14],[398,8,373,16,"X"],[398,9,373,17],[399,8,373,19,"Y"],[399,9,373,20],[400,8,373,22,"Z"],[401,6,373,24],[401,7,373,25],[401,10,373,28,"p"],[401,11,373,29],[402,6,374,8],[403,6,375,8],[403,10,375,12,"Fp"],[403,12,375,14],[403,13,375,15,"eql"],[403,16,375,18],[403,17,375,19,"Z"],[403,18,375,20],[403,20,375,22,"Fp"],[403,22,375,24],[403,23,375,25,"ONE"],[403,26,375,28],[403,27,375,29],[403,29,376,12],[403,36,376,19],[404,8,376,21,"x"],[404,9,376,22],[404,11,376,24,"X"],[404,12,376,25],[405,8,376,27,"y"],[405,9,376,28],[405,11,376,30,"Y"],[406,6,376,32],[406,7,376,33],[407,6,377,8],[407,12,377,14,"is0"],[407,15,377,17],[407,18,377,20,"p"],[407,19,377,21],[407,20,377,22,"is0"],[407,23,377,25],[407,24,377,26],[407,25,377,27],[408,6,378,8],[409,6,379,8],[410,6,380,8],[410,10,380,12,"iz"],[410,12,380,14],[410,16,380,18],[410,20,380,22],[410,22,381,12,"iz"],[410,24,381,14],[410,27,381,17,"is0"],[410,30,381,20],[410,33,381,23,"Fp"],[410,35,381,25],[410,36,381,26,"ONE"],[410,39,381,29],[410,42,381,32,"Fp"],[410,44,381,34],[410,45,381,35,"inv"],[410,48,381,38],[410,49,381,39,"Z"],[410,50,381,40],[410,51,381,41],[411,6,382,8],[411,12,382,14,"x"],[411,13,382,15],[411,16,382,18,"Fp"],[411,18,382,20],[411,19,382,21,"mul"],[411,22,382,24],[411,23,382,25,"X"],[411,24,382,26],[411,26,382,28,"iz"],[411,28,382,30],[411,29,382,31],[412,6,383,8],[412,12,383,14,"y"],[412,13,383,15],[412,16,383,18,"Fp"],[412,18,383,20],[412,19,383,21,"mul"],[412,22,383,24],[412,23,383,25,"Y"],[412,24,383,26],[412,26,383,28,"iz"],[412,28,383,30],[412,29,383,31],[413,6,384,8],[413,12,384,14,"zz"],[413,14,384,16],[413,17,384,19,"Fp"],[413,19,384,21],[413,20,384,22,"mul"],[413,23,384,25],[413,24,384,26,"Z"],[413,25,384,27],[413,27,384,29,"iz"],[413,29,384,31],[413,30,384,32],[414,6,385,8],[414,10,385,12,"is0"],[414,13,385,15],[414,15,386,12],[414,22,386,19],[415,8,386,21,"x"],[415,9,386,22],[415,11,386,24,"Fp"],[415,13,386,26],[415,14,386,27,"ZERO"],[415,18,386,31],[416,8,386,33,"y"],[416,9,386,34],[416,11,386,36,"Fp"],[416,13,386,38],[416,14,386,39,"ZERO"],[417,6,386,44],[417,7,386,45],[418,6,387,8],[418,10,387,12],[418,11,387,13,"Fp"],[418,13,387,15],[418,14,387,16,"eql"],[418,17,387,19],[418,18,387,20,"zz"],[418,20,387,22],[418,22,387,24,"Fp"],[418,24,387,26],[418,25,387,27,"ONE"],[418,28,387,30],[418,29,387,31],[418,31,388,12],[418,37,388,18],[418,41,388,22,"Error"],[418,46,388,27],[418,47,388,28],[418,65,388,46],[418,66,388,47],[419,6,389,8],[419,13,389,15],[420,8,389,17,"x"],[420,9,389,18],[421,8,389,20,"y"],[422,6,389,22],[422,7,389,23],[423,4,390,4],[423,5,390,5],[423,6,390,6],[424,4,391,4],[425,4,392,4],[426,4,393,4],[426,10,393,10,"assertValidMemo"],[426,25,393,25],[426,28,393,28],[426,29,393,29],[426,30,393,30],[426,32,393,32,"utils_ts_1"],[426,42,393,42],[426,43,393,43,"memoized"],[426,51,393,51],[426,53,393,54,"p"],[426,54,393,55],[426,58,393,60],[427,6,394,8],[427,10,394,12,"p"],[427,11,394,13],[427,12,394,14,"is0"],[427,15,394,17],[427,16,394,18],[427,17,394,19],[427,19,394,21],[428,8,395,12],[429,8,396,12],[430,8,397,12],[431,8,398,12],[431,12,398,16,"extraOpts"],[431,21,398,25],[431,22,398,26,"allowInfinityPoint"],[431,40,398,44],[431,44,398,48],[431,45,398,49,"Fp"],[431,47,398,51],[431,48,398,52,"is0"],[431,51,398,55],[431,52,398,56,"p"],[431,53,398,57],[431,54,398,58,"Y"],[431,55,398,59],[431,56,398,60],[431,58,399,16],[432,8,400,12],[432,14,400,18],[432,18,400,22,"Error"],[432,23,400,27],[432,24,400,28],[432,41,400,45],[432,42,400,46],[433,6,401,8],[434,6,402,8],[435,6,403,8],[435,12,403,14],[436,8,403,16,"x"],[436,9,403,17],[437,8,403,19,"y"],[438,6,403,21],[438,7,403,22],[438,10,403,25,"p"],[438,11,403,26],[438,12,403,27,"toAffine"],[438,20,403,35],[438,21,403,36],[438,22,403,37],[439,6,404,8],[439,10,404,12],[439,11,404,13,"Fp"],[439,13,404,15],[439,14,404,16,"isValid"],[439,21,404,23],[439,22,404,24,"x"],[439,23,404,25],[439,24,404,26],[439,28,404,30],[439,29,404,31,"Fp"],[439,31,404,33],[439,32,404,34,"isValid"],[439,39,404,41],[439,40,404,42,"y"],[439,41,404,43],[439,42,404,44],[439,44,405,12],[439,50,405,18],[439,54,405,22,"Error"],[439,59,405,27],[439,60,405,28],[439,98,405,66],[439,99,405,67],[440,6,406,8],[440,10,406,12],[440,11,406,13,"isValidXY"],[440,20,406,22],[440,21,406,23,"x"],[440,22,406,24],[440,24,406,26,"y"],[440,25,406,27],[440,26,406,28],[440,28,407,12],[440,34,407,18],[440,38,407,22,"Error"],[440,43,407,27],[440,44,407,28],[440,79,407,63],[440,80,407,64],[441,6,408,8],[441,10,408,12],[441,11,408,13,"p"],[441,12,408,14],[441,13,408,15,"isTorsionFree"],[441,26,408,28],[441,27,408,29],[441,28,408,30],[441,30,409,12],[441,36,409,18],[441,40,409,22,"Error"],[441,45,409,27],[441,46,409,28],[441,86,409,68],[441,87,409,69],[442,6,410,8],[442,13,410,15],[442,17,410,19],[443,4,411,4],[443,5,411,5],[443,6,411,6],[444,4,412,4],[444,13,412,13,"finishEndo"],[444,23,412,23,"finishEndo"],[444,24,412,24,"endoBeta"],[444,32,412,32],[444,34,412,34,"k1p"],[444,37,412,37],[444,39,412,39,"k2p"],[444,42,412,42],[444,44,412,44,"k1neg"],[444,49,412,49],[444,51,412,51,"k2neg"],[444,56,412,56],[444,58,412,58],[445,6,413,8,"k2p"],[445,9,413,11],[445,12,413,14],[445,16,413,18,"Point"],[445,21,413,23],[445,22,413,24,"Fp"],[445,24,413,26],[445,25,413,27,"mul"],[445,28,413,30],[445,29,413,31,"k2p"],[445,32,413,34],[445,33,413,35,"X"],[445,34,413,36],[445,36,413,38,"endoBeta"],[445,44,413,46],[445,45,413,47],[445,47,413,49,"k2p"],[445,50,413,52],[445,51,413,53,"Y"],[445,52,413,54],[445,54,413,56,"k2p"],[445,57,413,59],[445,58,413,60,"Z"],[445,59,413,61],[445,60,413,62],[446,6,414,8,"k1p"],[446,9,414,11],[446,12,414,14],[446,13,414,15],[446,14,414,16],[446,16,414,18,"curve_ts_1"],[446,26,414,28],[446,27,414,29,"negateCt"],[446,35,414,37],[446,37,414,39,"k1neg"],[446,42,414,44],[446,44,414,46,"k1p"],[446,47,414,49],[446,48,414,50],[447,6,415,8,"k2p"],[447,9,415,11],[447,12,415,14],[447,13,415,15],[447,14,415,16],[447,16,415,18,"curve_ts_1"],[447,26,415,28],[447,27,415,29,"negateCt"],[447,35,415,37],[447,37,415,39,"k2neg"],[447,42,415,44],[447,44,415,46,"k2p"],[447,47,415,49],[447,48,415,50],[448,6,416,8],[448,13,416,15,"k1p"],[448,16,416,18],[448,17,416,19,"add"],[448,20,416,22],[448,21,416,23,"k2p"],[448,24,416,26],[448,25,416,27],[449,4,417,4],[450,4,418,4],[451,0,419,0],[452,0,420,0],[453,0,421,0],[454,0,422,0],[455,4,423,4],[455,10,423,10,"Point"],[455,15,423,15],[455,16,423,16],[456,6,424,8],[457,6,425,8,"constructor"],[457,17,425,19,"constructor"],[457,18,425,20,"X"],[457,19,425,21],[457,21,425,23,"Y"],[457,22,425,24],[457,24,425,26,"Z"],[457,25,425,27],[457,27,425,29],[458,8,426,12],[458,12,426,16],[458,13,426,17,"X"],[458,14,426,18],[458,17,426,21,"acoord"],[458,23,426,27],[458,24,426,28],[458,27,426,31],[458,29,426,33,"X"],[458,30,426,34],[458,31,426,35],[459,8,427,12],[459,12,427,16],[459,13,427,17,"Y"],[459,14,427,18],[459,17,427,21,"acoord"],[459,23,427,27],[459,24,427,28],[459,27,427,31],[459,29,427,33,"Y"],[459,30,427,34],[459,32,427,36],[459,36,427,40],[459,37,427,41],[460,8,428,12],[460,12,428,16],[460,13,428,17,"Z"],[460,14,428,18],[460,17,428,21,"acoord"],[460,23,428,27],[460,24,428,28],[460,27,428,31],[460,29,428,33,"Z"],[460,30,428,34],[460,31,428,35],[461,8,429,12,"Object"],[461,14,429,18],[461,15,429,19,"freeze"],[461,21,429,25],[461,22,429,26],[461,26,429,30],[461,27,429,31],[462,6,430,8],[463,6,431,8],[463,13,431,15,"CURVE"],[463,18,431,20,"CURVE"],[463,19,431,20],[463,21,431,23],[464,8,432,12],[464,15,432,19,"CURVE"],[464,20,432,24],[465,6,433,8],[466,6,434,8],[467,6,435,8],[467,13,435,15,"fromAffine"],[467,23,435,25,"fromAffine"],[467,24,435,26,"p"],[467,25,435,27],[467,27,435,29],[468,8,436,12],[468,14,436,18],[469,10,436,20,"x"],[469,11,436,21],[470,10,436,23,"y"],[471,8,436,25],[471,9,436,26],[471,12,436,29,"p"],[471,13,436,30],[471,17,436,34],[471,18,436,35],[471,19,436,36],[472,8,437,12],[472,12,437,16],[472,13,437,17,"p"],[472,14,437,18],[472,18,437,22],[472,19,437,23,"Fp"],[472,21,437,25],[472,22,437,26,"isValid"],[472,29,437,33],[472,30,437,34,"x"],[472,31,437,35],[472,32,437,36],[472,36,437,40],[472,37,437,41,"Fp"],[472,39,437,43],[472,40,437,44,"isValid"],[472,47,437,51],[472,48,437,52,"y"],[472,49,437,53],[472,50,437,54],[472,52,438,16],[472,58,438,22],[472,62,438,26,"Error"],[472,67,438,31],[472,68,438,32],[472,90,438,54],[472,91,438,55],[473,8,439,12],[473,12,439,16,"p"],[473,13,439,17],[473,25,439,29,"Point"],[473,30,439,34],[473,32,440,16],[473,38,440,22],[473,42,440,26,"Error"],[473,47,440,31],[473,48,440,32],[473,78,440,62],[473,79,440,63],[474,8,441,12],[475,8,442,12],[475,12,442,16,"Fp"],[475,14,442,18],[475,15,442,19,"is0"],[475,18,442,22],[475,19,442,23,"x"],[475,20,442,24],[475,21,442,25],[475,25,442,29,"Fp"],[475,27,442,31],[475,28,442,32,"is0"],[475,31,442,35],[475,32,442,36,"y"],[475,33,442,37],[475,34,442,38],[475,36,443,16],[475,43,443,23,"Point"],[475,48,443,28],[475,49,443,29,"ZERO"],[475,53,443,33],[476,8,444,12],[476,15,444,19],[476,19,444,23,"Point"],[476,24,444,28],[476,25,444,29,"x"],[476,26,444,30],[476,28,444,32,"y"],[476,29,444,33],[476,31,444,35,"Fp"],[476,33,444,37],[476,34,444,38,"ONE"],[476,37,444,41],[476,38,444,42],[477,6,445,8],[478,6,446,8],[478,13,446,15,"fromBytes"],[478,22,446,24,"fromBytes"],[478,23,446,25,"bytes"],[478,28,446,30],[478,30,446,32],[479,8,447,12],[479,14,447,18,"P"],[479,15,447,19],[479,18,447,22,"Point"],[479,23,447,27],[479,24,447,28,"fromAffine"],[479,34,447,38],[479,35,447,39,"decodePoint"],[479,46,447,50],[479,47,447,51],[479,48,447,52],[479,49,447,53],[479,51,447,55,"utils_ts_1"],[479,61,447,65],[479,62,447,66,"_abytes2"],[479,70,447,74],[479,72,447,76,"bytes"],[479,77,447,81],[479,79,447,83,"undefined"],[479,88,447,92],[479,90,447,94],[479,97,447,101],[479,98,447,102],[479,99,447,103],[479,100,447,104],[480,8,448,12,"P"],[480,9,448,13],[480,10,448,14,"assertValidity"],[480,24,448,28],[480,25,448,29],[480,26,448,30],[481,8,449,12],[481,15,449,19,"P"],[481,16,449,20],[482,6,450,8],[483,6,451,8],[483,13,451,15,"fromHex"],[483,20,451,22,"fromHex"],[483,21,451,23,"hex"],[483,24,451,26],[483,26,451,28],[484,8,452,12],[484,15,452,19,"Point"],[484,20,452,24],[484,21,452,25,"fromBytes"],[484,30,452,34],[484,31,452,35],[484,32,452,36],[484,33,452,37],[484,35,452,39,"utils_ts_1"],[484,45,452,49],[484,46,452,50,"ensureBytes"],[484,57,452,61],[484,59,452,63],[484,69,452,73],[484,71,452,75,"hex"],[484,74,452,78],[484,75,452,79],[484,76,452,80],[485,6,453,8],[486,6,454,8],[486,10,454,12,"x"],[486,11,454,13,"x"],[486,12,454,13],[486,14,454,16],[487,8,455,12],[487,15,455,19],[487,19,455,23],[487,20,455,24,"toAffine"],[487,28,455,32],[487,29,455,33],[487,30,455,34],[487,31,455,35,"x"],[487,32,455,36],[488,6,456,8],[489,6,457,8],[489,10,457,12,"y"],[489,11,457,13,"y"],[489,12,457,13],[489,14,457,16],[490,8,458,12],[490,15,458,19],[490,19,458,23],[490,20,458,24,"toAffine"],[490,28,458,32],[490,29,458,33],[490,30,458,34],[490,31,458,35,"y"],[490,32,458,36],[491,6,459,8],[492,6,460,8],[493,0,461,0],[494,0,462,0],[495,0,463,0],[496,0,464,0],[497,0,465,0],[498,6,466,8,"precompute"],[498,16,466,18,"precompute"],[498,17,466,19,"windowSize"],[498,27,466,29],[498,30,466,32],[498,31,466,33],[498,33,466,35,"isLazy"],[498,39,466,41],[498,42,466,44],[498,46,466,48],[498,48,466,50],[499,8,467,12,"wnaf"],[499,12,467,16],[499,13,467,17,"createCache"],[499,24,467,28],[499,25,467,29],[499,29,467,33],[499,31,467,35,"windowSize"],[499,41,467,45],[499,42,467,46],[500,8,468,12],[500,12,468,16],[500,13,468,17,"isLazy"],[500,19,468,23],[500,21,469,16],[500,25,469,20],[500,26,469,21,"multiply"],[500,34,469,29],[500,35,469,30,"_3n"],[500,38,469,33],[500,39,469,34],[500,40,469,35],[500,41,469,36],[501,8,470,12],[501,15,470,19],[501,19,470,23],[502,6,471,8],[503,6,472,8],[504,6,473,8],[505,6,474,8,"assertValidity"],[505,20,474,22,"assertValidity"],[505,21,474,22],[505,23,474,25],[506,8,475,12,"assertValidMemo"],[506,23,475,27],[506,24,475,28],[506,28,475,32],[506,29,475,33],[507,6,476,8],[508,6,477,8,"hasEvenY"],[508,14,477,16,"hasEvenY"],[508,15,477,16],[508,17,477,19],[509,8,478,12],[509,14,478,18],[510,10,478,20,"y"],[511,8,478,22],[511,9,478,23],[511,12,478,26],[511,16,478,30],[511,17,478,31,"toAffine"],[511,25,478,39],[511,26,478,40],[511,27,478,41],[512,8,479,12],[512,12,479,16],[512,13,479,17,"Fp"],[512,15,479,19],[512,16,479,20,"isOdd"],[512,21,479,25],[512,23,480,16],[512,29,480,22],[512,33,480,26,"Error"],[512,38,480,31],[512,39,480,32],[512,68,480,61],[512,69,480,62],[513,8,481,12],[513,15,481,19],[513,16,481,20,"Fp"],[513,18,481,22],[513,19,481,23,"isOdd"],[513,24,481,28],[513,25,481,29,"y"],[513,26,481,30],[513,27,481,31],[514,6,482,8],[515,6,483,8],[516,6,484,8,"equals"],[516,12,484,14,"equals"],[516,13,484,15,"other"],[516,18,484,20],[516,20,484,22],[517,8,485,12,"aprjpoint"],[517,17,485,21],[517,18,485,22,"other"],[517,23,485,27],[517,24,485,28],[518,8,486,12],[518,14,486,18],[519,10,486,20,"X"],[519,11,486,21],[519,13,486,23,"X1"],[519,15,486,25],[520,10,486,27,"Y"],[520,11,486,28],[520,13,486,30,"Y1"],[520,15,486,32],[521,10,486,34,"Z"],[521,11,486,35],[521,13,486,37,"Z1"],[522,8,486,40],[522,9,486,41],[522,12,486,44],[522,16,486,48],[523,8,487,12],[523,14,487,18],[524,10,487,20,"X"],[524,11,487,21],[524,13,487,23,"X2"],[524,15,487,25],[525,10,487,27,"Y"],[525,11,487,28],[525,13,487,30,"Y2"],[525,15,487,32],[526,10,487,34,"Z"],[526,11,487,35],[526,13,487,37,"Z2"],[527,8,487,40],[527,9,487,41],[527,12,487,44,"other"],[527,17,487,49],[528,8,488,12],[528,14,488,18,"U1"],[528,16,488,20],[528,19,488,23,"Fp"],[528,21,488,25],[528,22,488,26,"eql"],[528,25,488,29],[528,26,488,30,"Fp"],[528,28,488,32],[528,29,488,33,"mul"],[528,32,488,36],[528,33,488,37,"X1"],[528,35,488,39],[528,37,488,41,"Z2"],[528,39,488,43],[528,40,488,44],[528,42,488,46,"Fp"],[528,44,488,48],[528,45,488,49,"mul"],[528,48,488,52],[528,49,488,53,"X2"],[528,51,488,55],[528,53,488,57,"Z1"],[528,55,488,59],[528,56,488,60],[528,57,488,61],[529,8,489,12],[529,14,489,18,"U2"],[529,16,489,20],[529,19,489,23,"Fp"],[529,21,489,25],[529,22,489,26,"eql"],[529,25,489,29],[529,26,489,30,"Fp"],[529,28,489,32],[529,29,489,33,"mul"],[529,32,489,36],[529,33,489,37,"Y1"],[529,35,489,39],[529,37,489,41,"Z2"],[529,39,489,43],[529,40,489,44],[529,42,489,46,"Fp"],[529,44,489,48],[529,45,489,49,"mul"],[529,48,489,52],[529,49,489,53,"Y2"],[529,51,489,55],[529,53,489,57,"Z1"],[529,55,489,59],[529,56,489,60],[529,57,489,61],[530,8,490,12],[530,15,490,19,"U1"],[530,17,490,21],[530,21,490,25,"U2"],[530,23,490,27],[531,6,491,8],[532,6,492,8],[533,6,493,8,"negate"],[533,12,493,14,"negate"],[533,13,493,14],[533,15,493,17],[534,8,494,12],[534,15,494,19],[534,19,494,23,"Point"],[534,24,494,28],[534,25,494,29],[534,29,494,33],[534,30,494,34,"X"],[534,31,494,35],[534,33,494,37,"Fp"],[534,35,494,39],[534,36,494,40,"neg"],[534,39,494,43],[534,40,494,44],[534,44,494,48],[534,45,494,49,"Y"],[534,46,494,50],[534,47,494,51],[534,49,494,53],[534,53,494,57],[534,54,494,58,"Z"],[534,55,494,59],[534,56,494,60],[535,6,495,8],[536,6,496,8],[537,6,497,8],[538,6,498,8],[539,6,499,8],[540,6,500,8,"double"],[540,12,500,14,"double"],[540,13,500,14],[540,15,500,17],[541,8,501,12],[541,14,501,18],[542,10,501,20,"a"],[542,11,501,21],[543,10,501,23,"b"],[544,8,501,25],[544,9,501,26],[544,12,501,29,"CURVE"],[544,17,501,34],[545,8,502,12],[545,14,502,18,"b3"],[545,16,502,20],[545,19,502,23,"Fp"],[545,21,502,25],[545,22,502,26,"mul"],[545,25,502,29],[545,26,502,30,"b"],[545,27,502,31],[545,29,502,33,"_3n"],[545,32,502,36],[545,33,502,37],[546,8,503,12],[546,14,503,18],[547,10,503,20,"X"],[547,11,503,21],[547,13,503,23,"X1"],[547,15,503,25],[548,10,503,27,"Y"],[548,11,503,28],[548,13,503,30,"Y1"],[548,15,503,32],[549,10,503,34,"Z"],[549,11,503,35],[549,13,503,37,"Z1"],[550,8,503,40],[550,9,503,41],[550,12,503,44],[550,16,503,48],[551,8,504,12],[551,12,504,16,"X3"],[551,14,504,18],[551,17,504,21,"Fp"],[551,19,504,23],[551,20,504,24,"ZERO"],[551,24,504,28],[552,10,504,30,"Y3"],[552,12,504,32],[552,15,504,35,"Fp"],[552,17,504,37],[552,18,504,38,"ZERO"],[552,22,504,42],[553,10,504,44,"Z3"],[553,12,504,46],[553,15,504,49,"Fp"],[553,17,504,51],[553,18,504,52,"ZERO"],[553,22,504,56],[553,23,504,57],[553,24,504,58],[554,8,505,12],[554,12,505,16,"t0"],[554,14,505,18],[554,17,505,21,"Fp"],[554,19,505,23],[554,20,505,24,"mul"],[554,23,505,27],[554,24,505,28,"X1"],[554,26,505,30],[554,28,505,32,"X1"],[554,30,505,34],[554,31,505,35],[554,32,505,36],[554,33,505,37],[555,8,506,12],[555,12,506,16,"t1"],[555,14,506,18],[555,17,506,21,"Fp"],[555,19,506,23],[555,20,506,24,"mul"],[555,23,506,27],[555,24,506,28,"Y1"],[555,26,506,30],[555,28,506,32,"Y1"],[555,30,506,34],[555,31,506,35],[556,8,507,12],[556,12,507,16,"t2"],[556,14,507,18],[556,17,507,21,"Fp"],[556,19,507,23],[556,20,507,24,"mul"],[556,23,507,27],[556,24,507,28,"Z1"],[556,26,507,30],[556,28,507,32,"Z1"],[556,30,507,34],[556,31,507,35],[557,8,508,12],[557,12,508,16,"t3"],[557,14,508,18],[557,17,508,21,"Fp"],[557,19,508,23],[557,20,508,24,"mul"],[557,23,508,27],[557,24,508,28,"X1"],[557,26,508,30],[557,28,508,32,"Y1"],[557,30,508,34],[557,31,508,35],[558,8,509,12,"t3"],[558,10,509,14],[558,13,509,17,"Fp"],[558,15,509,19],[558,16,509,20,"add"],[558,19,509,23],[558,20,509,24,"t3"],[558,22,509,26],[558,24,509,28,"t3"],[558,26,509,30],[558,27,509,31],[558,28,509,32],[558,29,509,33],[559,8,510,12,"Z3"],[559,10,510,14],[559,13,510,17,"Fp"],[559,15,510,19],[559,16,510,20,"mul"],[559,19,510,23],[559,20,510,24,"X1"],[559,22,510,26],[559,24,510,28,"Z1"],[559,26,510,30],[559,27,510,31],[560,8,511,12,"Z3"],[560,10,511,14],[560,13,511,17,"Fp"],[560,15,511,19],[560,16,511,20,"add"],[560,19,511,23],[560,20,511,24,"Z3"],[560,22,511,26],[560,24,511,28,"Z3"],[560,26,511,30],[560,27,511,31],[561,8,512,12,"X3"],[561,10,512,14],[561,13,512,17,"Fp"],[561,15,512,19],[561,16,512,20,"mul"],[561,19,512,23],[561,20,512,24,"a"],[561,21,512,25],[561,23,512,27,"Z3"],[561,25,512,29],[561,26,512,30],[562,8,513,12,"Y3"],[562,10,513,14],[562,13,513,17,"Fp"],[562,15,513,19],[562,16,513,20,"mul"],[562,19,513,23],[562,20,513,24,"b3"],[562,22,513,26],[562,24,513,28,"t2"],[562,26,513,30],[562,27,513,31],[563,8,514,12,"Y3"],[563,10,514,14],[563,13,514,17,"Fp"],[563,15,514,19],[563,16,514,20,"add"],[563,19,514,23],[563,20,514,24,"X3"],[563,22,514,26],[563,24,514,28,"Y3"],[563,26,514,30],[563,27,514,31],[563,28,514,32],[563,29,514,33],[564,8,515,12,"X3"],[564,10,515,14],[564,13,515,17,"Fp"],[564,15,515,19],[564,16,515,20,"sub"],[564,19,515,23],[564,20,515,24,"t1"],[564,22,515,26],[564,24,515,28,"Y3"],[564,26,515,30],[564,27,515,31],[565,8,516,12,"Y3"],[565,10,516,14],[565,13,516,17,"Fp"],[565,15,516,19],[565,16,516,20,"add"],[565,19,516,23],[565,20,516,24,"t1"],[565,22,516,26],[565,24,516,28,"Y3"],[565,26,516,30],[565,27,516,31],[566,8,517,12,"Y3"],[566,10,517,14],[566,13,517,17,"Fp"],[566,15,517,19],[566,16,517,20,"mul"],[566,19,517,23],[566,20,517,24,"X3"],[566,22,517,26],[566,24,517,28,"Y3"],[566,26,517,30],[566,27,517,31],[567,8,518,12,"X3"],[567,10,518,14],[567,13,518,17,"Fp"],[567,15,518,19],[567,16,518,20,"mul"],[567,19,518,23],[567,20,518,24,"t3"],[567,22,518,26],[567,24,518,28,"X3"],[567,26,518,30],[567,27,518,31],[568,8,519,12,"Z3"],[568,10,519,14],[568,13,519,17,"Fp"],[568,15,519,19],[568,16,519,20,"mul"],[568,19,519,23],[568,20,519,24,"b3"],[568,22,519,26],[568,24,519,28,"Z3"],[568,26,519,30],[568,27,519,31],[568,28,519,32],[568,29,519,33],[569,8,520,12,"t2"],[569,10,520,14],[569,13,520,17,"Fp"],[569,15,520,19],[569,16,520,20,"mul"],[569,19,520,23],[569,20,520,24,"a"],[569,21,520,25],[569,23,520,27,"t2"],[569,25,520,29],[569,26,520,30],[570,8,521,12,"t3"],[570,10,521,14],[570,13,521,17,"Fp"],[570,15,521,19],[570,16,521,20,"sub"],[570,19,521,23],[570,20,521,24,"t0"],[570,22,521,26],[570,24,521,28,"t2"],[570,26,521,30],[570,27,521,31],[571,8,522,12,"t3"],[571,10,522,14],[571,13,522,17,"Fp"],[571,15,522,19],[571,16,522,20,"mul"],[571,19,522,23],[571,20,522,24,"a"],[571,21,522,25],[571,23,522,27,"t3"],[571,25,522,29],[571,26,522,30],[572,8,523,12,"t3"],[572,10,523,14],[572,13,523,17,"Fp"],[572,15,523,19],[572,16,523,20,"add"],[572,19,523,23],[572,20,523,24,"t3"],[572,22,523,26],[572,24,523,28,"Z3"],[572,26,523,30],[572,27,523,31],[573,8,524,12,"Z3"],[573,10,524,14],[573,13,524,17,"Fp"],[573,15,524,19],[573,16,524,20,"add"],[573,19,524,23],[573,20,524,24,"t0"],[573,22,524,26],[573,24,524,28,"t0"],[573,26,524,30],[573,27,524,31],[573,28,524,32],[573,29,524,33],[574,8,525,12,"t0"],[574,10,525,14],[574,13,525,17,"Fp"],[574,15,525,19],[574,16,525,20,"add"],[574,19,525,23],[574,20,525,24,"Z3"],[574,22,525,26],[574,24,525,28,"t0"],[574,26,525,30],[574,27,525,31],[575,8,526,12,"t0"],[575,10,526,14],[575,13,526,17,"Fp"],[575,15,526,19],[575,16,526,20,"add"],[575,19,526,23],[575,20,526,24,"t0"],[575,22,526,26],[575,24,526,28,"t2"],[575,26,526,30],[575,27,526,31],[576,8,527,12,"t0"],[576,10,527,14],[576,13,527,17,"Fp"],[576,15,527,19],[576,16,527,20,"mul"],[576,19,527,23],[576,20,527,24,"t0"],[576,22,527,26],[576,24,527,28,"t3"],[576,26,527,30],[576,27,527,31],[577,8,528,12,"Y3"],[577,10,528,14],[577,13,528,17,"Fp"],[577,15,528,19],[577,16,528,20,"add"],[577,19,528,23],[577,20,528,24,"Y3"],[577,22,528,26],[577,24,528,28,"t0"],[577,26,528,30],[577,27,528,31],[578,8,529,12,"t2"],[578,10,529,14],[578,13,529,17,"Fp"],[578,15,529,19],[578,16,529,20,"mul"],[578,19,529,23],[578,20,529,24,"Y1"],[578,22,529,26],[578,24,529,28,"Z1"],[578,26,529,30],[578,27,529,31],[578,28,529,32],[578,29,529,33],[579,8,530,12,"t2"],[579,10,530,14],[579,13,530,17,"Fp"],[579,15,530,19],[579,16,530,20,"add"],[579,19,530,23],[579,20,530,24,"t2"],[579,22,530,26],[579,24,530,28,"t2"],[579,26,530,30],[579,27,530,31],[580,8,531,12,"t0"],[580,10,531,14],[580,13,531,17,"Fp"],[580,15,531,19],[580,16,531,20,"mul"],[580,19,531,23],[580,20,531,24,"t2"],[580,22,531,26],[580,24,531,28,"t3"],[580,26,531,30],[580,27,531,31],[581,8,532,12,"X3"],[581,10,532,14],[581,13,532,17,"Fp"],[581,15,532,19],[581,16,532,20,"sub"],[581,19,532,23],[581,20,532,24,"X3"],[581,22,532,26],[581,24,532,28,"t0"],[581,26,532,30],[581,27,532,31],[582,8,533,12,"Z3"],[582,10,533,14],[582,13,533,17,"Fp"],[582,15,533,19],[582,16,533,20,"mul"],[582,19,533,23],[582,20,533,24,"t2"],[582,22,533,26],[582,24,533,28,"t1"],[582,26,533,30],[582,27,533,31],[583,8,534,12,"Z3"],[583,10,534,14],[583,13,534,17,"Fp"],[583,15,534,19],[583,16,534,20,"add"],[583,19,534,23],[583,20,534,24,"Z3"],[583,22,534,26],[583,24,534,28,"Z3"],[583,26,534,30],[583,27,534,31],[583,28,534,32],[583,29,534,33],[584,8,535,12,"Z3"],[584,10,535,14],[584,13,535,17,"Fp"],[584,15,535,19],[584,16,535,20,"add"],[584,19,535,23],[584,20,535,24,"Z3"],[584,22,535,26],[584,24,535,28,"Z3"],[584,26,535,30],[584,27,535,31],[585,8,536,12],[585,15,536,19],[585,19,536,23,"Point"],[585,24,536,28],[585,25,536,29,"X3"],[585,27,536,31],[585,29,536,33,"Y3"],[585,31,536,35],[585,33,536,37,"Z3"],[585,35,536,39],[585,36,536,40],[586,6,537,8],[587,6,538,8],[588,6,539,8],[589,6,540,8],[590,6,541,8],[591,6,542,8,"add"],[591,9,542,11,"add"],[591,10,542,12,"other"],[591,15,542,17],[591,17,542,19],[592,8,543,12,"aprjpoint"],[592,17,543,21],[592,18,543,22,"other"],[592,23,543,27],[592,24,543,28],[593,8,544,12],[593,14,544,18],[594,10,544,20,"X"],[594,11,544,21],[594,13,544,23,"X1"],[594,15,544,25],[595,10,544,27,"Y"],[595,11,544,28],[595,13,544,30,"Y1"],[595,15,544,32],[596,10,544,34,"Z"],[596,11,544,35],[596,13,544,37,"Z1"],[597,8,544,40],[597,9,544,41],[597,12,544,44],[597,16,544,48],[598,8,545,12],[598,14,545,18],[599,10,545,20,"X"],[599,11,545,21],[599,13,545,23,"X2"],[599,15,545,25],[600,10,545,27,"Y"],[600,11,545,28],[600,13,545,30,"Y2"],[600,15,545,32],[601,10,545,34,"Z"],[601,11,545,35],[601,13,545,37,"Z2"],[602,8,545,40],[602,9,545,41],[602,12,545,44,"other"],[602,17,545,49],[603,8,546,12],[603,12,546,16,"X3"],[603,14,546,18],[603,17,546,21,"Fp"],[603,19,546,23],[603,20,546,24,"ZERO"],[603,24,546,28],[604,10,546,30,"Y3"],[604,12,546,32],[604,15,546,35,"Fp"],[604,17,546,37],[604,18,546,38,"ZERO"],[604,22,546,42],[605,10,546,44,"Z3"],[605,12,546,46],[605,15,546,49,"Fp"],[605,17,546,51],[605,18,546,52,"ZERO"],[605,22,546,56],[605,23,546,57],[605,24,546,58],[606,8,547,12],[606,14,547,18,"a"],[606,15,547,19],[606,18,547,22,"CURVE"],[606,23,547,27],[606,24,547,28,"a"],[606,25,547,29],[607,8,548,12],[607,14,548,18,"b3"],[607,16,548,20],[607,19,548,23,"Fp"],[607,21,548,25],[607,22,548,26,"mul"],[607,25,548,29],[607,26,548,30,"CURVE"],[607,31,548,35],[607,32,548,36,"b"],[607,33,548,37],[607,35,548,39,"_3n"],[607,38,548,42],[607,39,548,43],[608,8,549,12],[608,12,549,16,"t0"],[608,14,549,18],[608,17,549,21,"Fp"],[608,19,549,23],[608,20,549,24,"mul"],[608,23,549,27],[608,24,549,28,"X1"],[608,26,549,30],[608,28,549,32,"X2"],[608,30,549,34],[608,31,549,35],[608,32,549,36],[608,33,549,37],[609,8,550,12],[609,12,550,16,"t1"],[609,14,550,18],[609,17,550,21,"Fp"],[609,19,550,23],[609,20,550,24,"mul"],[609,23,550,27],[609,24,550,28,"Y1"],[609,26,550,30],[609,28,550,32,"Y2"],[609,30,550,34],[609,31,550,35],[610,8,551,12],[610,12,551,16,"t2"],[610,14,551,18],[610,17,551,21,"Fp"],[610,19,551,23],[610,20,551,24,"mul"],[610,23,551,27],[610,24,551,28,"Z1"],[610,26,551,30],[610,28,551,32,"Z2"],[610,30,551,34],[610,31,551,35],[611,8,552,12],[611,12,552,16,"t3"],[611,14,552,18],[611,17,552,21,"Fp"],[611,19,552,23],[611,20,552,24,"add"],[611,23,552,27],[611,24,552,28,"X1"],[611,26,552,30],[611,28,552,32,"Y1"],[611,30,552,34],[611,31,552,35],[612,8,553,12],[612,12,553,16,"t4"],[612,14,553,18],[612,17,553,21,"Fp"],[612,19,553,23],[612,20,553,24,"add"],[612,23,553,27],[612,24,553,28,"X2"],[612,26,553,30],[612,28,553,32,"Y2"],[612,30,553,34],[612,31,553,35],[612,32,553,36],[612,33,553,37],[613,8,554,12,"t3"],[613,10,554,14],[613,13,554,17,"Fp"],[613,15,554,19],[613,16,554,20,"mul"],[613,19,554,23],[613,20,554,24,"t3"],[613,22,554,26],[613,24,554,28,"t4"],[613,26,554,30],[613,27,554,31],[614,8,555,12,"t4"],[614,10,555,14],[614,13,555,17,"Fp"],[614,15,555,19],[614,16,555,20,"add"],[614,19,555,23],[614,20,555,24,"t0"],[614,22,555,26],[614,24,555,28,"t1"],[614,26,555,30],[614,27,555,31],[615,8,556,12,"t3"],[615,10,556,14],[615,13,556,17,"Fp"],[615,15,556,19],[615,16,556,20,"sub"],[615,19,556,23],[615,20,556,24,"t3"],[615,22,556,26],[615,24,556,28,"t4"],[615,26,556,30],[615,27,556,31],[616,8,557,12,"t4"],[616,10,557,14],[616,13,557,17,"Fp"],[616,15,557,19],[616,16,557,20,"add"],[616,19,557,23],[616,20,557,24,"X1"],[616,22,557,26],[616,24,557,28,"Z1"],[616,26,557,30],[616,27,557,31],[617,8,558,12],[617,12,558,16,"t5"],[617,14,558,18],[617,17,558,21,"Fp"],[617,19,558,23],[617,20,558,24,"add"],[617,23,558,27],[617,24,558,28,"X2"],[617,26,558,30],[617,28,558,32,"Z2"],[617,30,558,34],[617,31,558,35],[617,32,558,36],[617,33,558,37],[618,8,559,12,"t4"],[618,10,559,14],[618,13,559,17,"Fp"],[618,15,559,19],[618,16,559,20,"mul"],[618,19,559,23],[618,20,559,24,"t4"],[618,22,559,26],[618,24,559,28,"t5"],[618,26,559,30],[618,27,559,31],[619,8,560,12,"t5"],[619,10,560,14],[619,13,560,17,"Fp"],[619,15,560,19],[619,16,560,20,"add"],[619,19,560,23],[619,20,560,24,"t0"],[619,22,560,26],[619,24,560,28,"t2"],[619,26,560,30],[619,27,560,31],[620,8,561,12,"t4"],[620,10,561,14],[620,13,561,17,"Fp"],[620,15,561,19],[620,16,561,20,"sub"],[620,19,561,23],[620,20,561,24,"t4"],[620,22,561,26],[620,24,561,28,"t5"],[620,26,561,30],[620,27,561,31],[621,8,562,12,"t5"],[621,10,562,14],[621,13,562,17,"Fp"],[621,15,562,19],[621,16,562,20,"add"],[621,19,562,23],[621,20,562,24,"Y1"],[621,22,562,26],[621,24,562,28,"Z1"],[621,26,562,30],[621,27,562,31],[622,8,563,12,"X3"],[622,10,563,14],[622,13,563,17,"Fp"],[622,15,563,19],[622,16,563,20,"add"],[622,19,563,23],[622,20,563,24,"Y2"],[622,22,563,26],[622,24,563,28,"Z2"],[622,26,563,30],[622,27,563,31],[622,28,563,32],[622,29,563,33],[623,8,564,12,"t5"],[623,10,564,14],[623,13,564,17,"Fp"],[623,15,564,19],[623,16,564,20,"mul"],[623,19,564,23],[623,20,564,24,"t5"],[623,22,564,26],[623,24,564,28,"X3"],[623,26,564,30],[623,27,564,31],[624,8,565,12,"X3"],[624,10,565,14],[624,13,565,17,"Fp"],[624,15,565,19],[624,16,565,20,"add"],[624,19,565,23],[624,20,565,24,"t1"],[624,22,565,26],[624,24,565,28,"t2"],[624,26,565,30],[624,27,565,31],[625,8,566,12,"t5"],[625,10,566,14],[625,13,566,17,"Fp"],[625,15,566,19],[625,16,566,20,"sub"],[625,19,566,23],[625,20,566,24,"t5"],[625,22,566,26],[625,24,566,28,"X3"],[625,26,566,30],[625,27,566,31],[626,8,567,12,"Z3"],[626,10,567,14],[626,13,567,17,"Fp"],[626,15,567,19],[626,16,567,20,"mul"],[626,19,567,23],[626,20,567,24,"a"],[626,21,567,25],[626,23,567,27,"t4"],[626,25,567,29],[626,26,567,30],[627,8,568,12,"X3"],[627,10,568,14],[627,13,568,17,"Fp"],[627,15,568,19],[627,16,568,20,"mul"],[627,19,568,23],[627,20,568,24,"b3"],[627,22,568,26],[627,24,568,28,"t2"],[627,26,568,30],[627,27,568,31],[627,28,568,32],[627,29,568,33],[628,8,569,12,"Z3"],[628,10,569,14],[628,13,569,17,"Fp"],[628,15,569,19],[628,16,569,20,"add"],[628,19,569,23],[628,20,569,24,"X3"],[628,22,569,26],[628,24,569,28,"Z3"],[628,26,569,30],[628,27,569,31],[629,8,570,12,"X3"],[629,10,570,14],[629,13,570,17,"Fp"],[629,15,570,19],[629,16,570,20,"sub"],[629,19,570,23],[629,20,570,24,"t1"],[629,22,570,26],[629,24,570,28,"Z3"],[629,26,570,30],[629,27,570,31],[630,8,571,12,"Z3"],[630,10,571,14],[630,13,571,17,"Fp"],[630,15,571,19],[630,16,571,20,"add"],[630,19,571,23],[630,20,571,24,"t1"],[630,22,571,26],[630,24,571,28,"Z3"],[630,26,571,30],[630,27,571,31],[631,8,572,12,"Y3"],[631,10,572,14],[631,13,572,17,"Fp"],[631,15,572,19],[631,16,572,20,"mul"],[631,19,572,23],[631,20,572,24,"X3"],[631,22,572,26],[631,24,572,28,"Z3"],[631,26,572,30],[631,27,572,31],[632,8,573,12,"t1"],[632,10,573,14],[632,13,573,17,"Fp"],[632,15,573,19],[632,16,573,20,"add"],[632,19,573,23],[632,20,573,24,"t0"],[632,22,573,26],[632,24,573,28,"t0"],[632,26,573,30],[632,27,573,31],[632,28,573,32],[632,29,573,33],[633,8,574,12,"t1"],[633,10,574,14],[633,13,574,17,"Fp"],[633,15,574,19],[633,16,574,20,"add"],[633,19,574,23],[633,20,574,24,"t1"],[633,22,574,26],[633,24,574,28,"t0"],[633,26,574,30],[633,27,574,31],[634,8,575,12,"t2"],[634,10,575,14],[634,13,575,17,"Fp"],[634,15,575,19],[634,16,575,20,"mul"],[634,19,575,23],[634,20,575,24,"a"],[634,21,575,25],[634,23,575,27,"t2"],[634,25,575,29],[634,26,575,30],[635,8,576,12,"t4"],[635,10,576,14],[635,13,576,17,"Fp"],[635,15,576,19],[635,16,576,20,"mul"],[635,19,576,23],[635,20,576,24,"b3"],[635,22,576,26],[635,24,576,28,"t4"],[635,26,576,30],[635,27,576,31],[636,8,577,12,"t1"],[636,10,577,14],[636,13,577,17,"Fp"],[636,15,577,19],[636,16,577,20,"add"],[636,19,577,23],[636,20,577,24,"t1"],[636,22,577,26],[636,24,577,28,"t2"],[636,26,577,30],[636,27,577,31],[637,8,578,12,"t2"],[637,10,578,14],[637,13,578,17,"Fp"],[637,15,578,19],[637,16,578,20,"sub"],[637,19,578,23],[637,20,578,24,"t0"],[637,22,578,26],[637,24,578,28,"t2"],[637,26,578,30],[637,27,578,31],[637,28,578,32],[637,29,578,33],[638,8,579,12,"t2"],[638,10,579,14],[638,13,579,17,"Fp"],[638,15,579,19],[638,16,579,20,"mul"],[638,19,579,23],[638,20,579,24,"a"],[638,21,579,25],[638,23,579,27,"t2"],[638,25,579,29],[638,26,579,30],[639,8,580,12,"t4"],[639,10,580,14],[639,13,580,17,"Fp"],[639,15,580,19],[639,16,580,20,"add"],[639,19,580,23],[639,20,580,24,"t4"],[639,22,580,26],[639,24,580,28,"t2"],[639,26,580,30],[639,27,580,31],[640,8,581,12,"t0"],[640,10,581,14],[640,13,581,17,"Fp"],[640,15,581,19],[640,16,581,20,"mul"],[640,19,581,23],[640,20,581,24,"t1"],[640,22,581,26],[640,24,581,28,"t4"],[640,26,581,30],[640,27,581,31],[641,8,582,12,"Y3"],[641,10,582,14],[641,13,582,17,"Fp"],[641,15,582,19],[641,16,582,20,"add"],[641,19,582,23],[641,20,582,24,"Y3"],[641,22,582,26],[641,24,582,28,"t0"],[641,26,582,30],[641,27,582,31],[642,8,583,12,"t0"],[642,10,583,14],[642,13,583,17,"Fp"],[642,15,583,19],[642,16,583,20,"mul"],[642,19,583,23],[642,20,583,24,"t5"],[642,22,583,26],[642,24,583,28,"t4"],[642,26,583,30],[642,27,583,31],[642,28,583,32],[642,29,583,33],[643,8,584,12,"X3"],[643,10,584,14],[643,13,584,17,"Fp"],[643,15,584,19],[643,16,584,20,"mul"],[643,19,584,23],[643,20,584,24,"t3"],[643,22,584,26],[643,24,584,28,"X3"],[643,26,584,30],[643,27,584,31],[644,8,585,12,"X3"],[644,10,585,14],[644,13,585,17,"Fp"],[644,15,585,19],[644,16,585,20,"sub"],[644,19,585,23],[644,20,585,24,"X3"],[644,22,585,26],[644,24,585,28,"t0"],[644,26,585,30],[644,27,585,31],[645,8,586,12,"t0"],[645,10,586,14],[645,13,586,17,"Fp"],[645,15,586,19],[645,16,586,20,"mul"],[645,19,586,23],[645,20,586,24,"t3"],[645,22,586,26],[645,24,586,28,"t1"],[645,26,586,30],[645,27,586,31],[646,8,587,12,"Z3"],[646,10,587,14],[646,13,587,17,"Fp"],[646,15,587,19],[646,16,587,20,"mul"],[646,19,587,23],[646,20,587,24,"t5"],[646,22,587,26],[646,24,587,28,"Z3"],[646,26,587,30],[646,27,587,31],[647,8,588,12,"Z3"],[647,10,588,14],[647,13,588,17,"Fp"],[647,15,588,19],[647,16,588,20,"add"],[647,19,588,23],[647,20,588,24,"Z3"],[647,22,588,26],[647,24,588,28,"t0"],[647,26,588,30],[647,27,588,31],[647,28,588,32],[647,29,588,33],[648,8,589,12],[648,15,589,19],[648,19,589,23,"Point"],[648,24,589,28],[648,25,589,29,"X3"],[648,27,589,31],[648,29,589,33,"Y3"],[648,31,589,35],[648,33,589,37,"Z3"],[648,35,589,39],[648,36,589,40],[649,6,590,8],[650,6,591,8,"subtract"],[650,14,591,16,"subtract"],[650,15,591,17,"other"],[650,20,591,22],[650,22,591,24],[651,8,592,12],[651,15,592,19],[651,19,592,23],[651,20,592,24,"add"],[651,23,592,27],[651,24,592,28,"other"],[651,29,592,33],[651,30,592,34,"negate"],[651,36,592,40],[651,37,592,41],[651,38,592,42],[651,39,592,43],[652,6,593,8],[653,6,594,8,"is0"],[653,9,594,11,"is0"],[653,10,594,11],[653,12,594,14],[654,8,595,12],[654,15,595,19],[654,19,595,23],[654,20,595,24,"equals"],[654,26,595,30],[654,27,595,31,"Point"],[654,32,595,36],[654,33,595,37,"ZERO"],[654,37,595,41],[654,38,595,42],[655,6,596,8],[656,6,597,8],[657,0,598,0],[658,0,599,0],[659,0,600,0],[660,0,601,0],[661,0,602,0],[662,0,603,0],[663,0,604,0],[664,0,605,0],[665,6,606,8,"multiply"],[665,14,606,16,"multiply"],[665,15,606,17,"scalar"],[665,21,606,23],[665,23,606,25],[666,8,607,12],[666,14,607,18],[667,10,607,20,"endo"],[668,8,607,25],[668,9,607,26],[668,12,607,29,"extraOpts"],[668,21,607,38],[669,8,608,12],[669,12,608,16],[669,13,608,17,"Fn"],[669,15,608,19],[669,16,608,20,"isValidNot0"],[669,27,608,31],[669,28,608,32,"scalar"],[669,34,608,38],[669,35,608,39],[669,37,609,16],[669,43,609,22],[669,47,609,26,"Error"],[669,52,609,31],[669,53,609,32],[669,83,609,62],[669,84,609,63],[669,85,609,64],[669,86,609,65],[670,8,610,12],[670,12,610,16,"point"],[670,17,610,21],[670,19,610,23,"fake"],[670,23,610,27],[670,24,610,28],[670,25,610,29],[671,8,611,12],[671,14,611,18,"mul"],[671,17,611,21],[671,20,611,25,"n"],[671,21,611,26],[671,25,611,31,"wnaf"],[671,29,611,35],[671,30,611,36,"cached"],[671,36,611,42],[671,37,611,43],[671,41,611,47],[671,43,611,49,"n"],[671,44,611,50],[671,46,611,53,"p"],[671,47,611,54],[671,51,611,59],[671,52,611,60],[671,53,611,61],[671,55,611,63,"curve_ts_1"],[671,65,611,73],[671,66,611,74,"normalizeZ"],[671,76,611,84],[671,78,611,86,"Point"],[671,83,611,91],[671,85,611,93,"p"],[671,86,611,94],[671,87,611,95],[671,88,611,96],[672,8,612,12],[673,8,613,12],[673,12,613,16,"endo"],[673,16,613,20],[673,18,613,22],[674,10,614,16],[674,16,614,22],[675,12,614,24,"k1neg"],[675,17,614,29],[676,12,614,31,"k1"],[676,14,614,33],[677,12,614,35,"k2neg"],[677,17,614,40],[678,12,614,42,"k2"],[679,10,614,45],[679,11,614,46],[679,14,614,49,"splitEndoScalarN"],[679,30,614,65],[679,31,614,66,"scalar"],[679,37,614,72],[679,38,614,73],[680,10,615,16],[680,16,615,22],[681,12,615,24,"p"],[681,13,615,25],[681,15,615,27,"k1p"],[681,18,615,30],[682,12,615,32,"f"],[682,13,615,33],[682,15,615,35,"k1f"],[683,10,615,39],[683,11,615,40],[683,14,615,43,"mul"],[683,17,615,46],[683,18,615,47,"k1"],[683,20,615,49],[683,21,615,50],[684,10,616,16],[684,16,616,22],[685,12,616,24,"p"],[685,13,616,25],[685,15,616,27,"k2p"],[685,18,616,30],[686,12,616,32,"f"],[686,13,616,33],[686,15,616,35,"k2f"],[687,10,616,39],[687,11,616,40],[687,14,616,43,"mul"],[687,17,616,46],[687,18,616,47,"k2"],[687,20,616,49],[687,21,616,50],[688,10,617,16,"fake"],[688,14,617,20],[688,17,617,23,"k1f"],[688,20,617,26],[688,21,617,27,"add"],[688,24,617,30],[688,25,617,31,"k2f"],[688,28,617,34],[688,29,617,35],[689,10,618,16,"point"],[689,15,618,21],[689,18,618,24,"finishEndo"],[689,28,618,34],[689,29,618,35,"endo"],[689,33,618,39],[689,34,618,40,"beta"],[689,38,618,44],[689,40,618,46,"k1p"],[689,43,618,49],[689,45,618,51,"k2p"],[689,48,618,54],[689,50,618,56,"k1neg"],[689,55,618,61],[689,57,618,63,"k2neg"],[689,62,618,68],[689,63,618,69],[690,8,619,12],[690,9,619,13],[690,15,620,17],[691,10,621,16],[691,16,621,22],[692,12,621,24,"p"],[692,13,621,25],[693,12,621,27,"f"],[694,10,621,29],[694,11,621,30],[694,14,621,33,"mul"],[694,17,621,36],[694,18,621,37,"scalar"],[694,24,621,43],[694,25,621,44],[695,10,622,16,"point"],[695,15,622,21],[695,18,622,24,"p"],[695,19,622,25],[696,10,623,16,"fake"],[696,14,623,20],[696,17,623,23,"f"],[696,18,623,24],[697,8,624,12],[698,8,625,12],[699,8,626,12],[699,15,626,19],[699,16,626,20],[699,17,626,21],[699,19,626,23,"curve_ts_1"],[699,29,626,33],[699,30,626,34,"normalizeZ"],[699,40,626,44],[699,42,626,46,"Point"],[699,47,626,51],[699,49,626,53],[699,50,626,54,"point"],[699,55,626,59],[699,57,626,61,"fake"],[699,61,626,65],[699,62,626,66],[699,63,626,67],[699,64,626,68],[699,65,626,69],[699,66,626,70],[700,6,627,8],[701,6,628,8],[702,0,629,0],[703,0,630,0],[704,0,631,0],[705,0,632,0],[706,6,633,8,"multiplyUnsafe"],[706,20,633,22,"multiplyUnsafe"],[706,21,633,23,"sc"],[706,23,633,25],[706,25,633,27],[707,8,634,12],[707,14,634,18],[708,10,634,20,"endo"],[709,8,634,25],[709,9,634,26],[709,12,634,29,"extraOpts"],[709,21,634,38],[710,8,635,12],[710,14,635,18,"p"],[710,15,635,19],[710,18,635,22],[710,22,635,26],[711,8,636,12],[711,12,636,16],[711,13,636,17,"Fn"],[711,15,636,19],[711,16,636,20,"isValid"],[711,23,636,27],[711,24,636,28,"sc"],[711,26,636,30],[711,27,636,31],[711,29,637,16],[711,35,637,22],[711,39,637,26,"Error"],[711,44,637,31],[711,45,637,32],[711,75,637,62],[711,76,637,63],[711,77,637,64],[711,78,637,65],[712,8,638,12],[712,12,638,16,"sc"],[712,14,638,18],[712,19,638,23,"_0n"],[712,22,638,26],[712,26,638,30,"p"],[712,27,638,31],[712,28,638,32,"is0"],[712,31,638,35],[712,32,638,36],[712,33,638,37],[712,35,639,16],[712,42,639,23,"Point"],[712,47,639,28],[712,48,639,29,"ZERO"],[712,52,639,33],[713,8,640,12],[713,12,640,16,"sc"],[713,14,640,18],[713,19,640,23,"_1n"],[713,22,640,26],[713,24,641,16],[713,31,641,23,"p"],[713,32,641,24],[713,33,641,25],[713,34,641,26],[714,8,642,12],[714,12,642,16,"wnaf"],[714,16,642,20],[714,17,642,21,"hasCache"],[714,25,642,29],[714,26,642,30],[714,30,642,34],[714,31,642,35],[714,33,643,16],[714,40,643,23],[714,44,643,27],[714,45,643,28,"multiply"],[714,53,643,36],[714,54,643,37,"sc"],[714,56,643,39],[714,57,643,40],[715,8,644,12],[715,12,644,16,"endo"],[715,16,644,20],[715,18,644,22],[716,10,645,16],[716,16,645,22],[717,12,645,24,"k1neg"],[717,17,645,29],[718,12,645,31,"k1"],[718,14,645,33],[719,12,645,35,"k2neg"],[719,17,645,40],[720,12,645,42,"k2"],[721,10,645,45],[721,11,645,46],[721,14,645,49,"splitEndoScalarN"],[721,30,645,65],[721,31,645,66,"sc"],[721,33,645,68],[721,34,645,69],[722,10,646,16],[722,16,646,22],[723,12,646,24,"p1"],[723,14,646,26],[724,12,646,28,"p2"],[725,10,646,31],[725,11,646,32],[725,14,646,35],[725,15,646,36],[725,16,646,37],[725,18,646,39,"curve_ts_1"],[725,28,646,49],[725,29,646,50,"mulEndoUnsafe"],[725,42,646,63],[725,44,646,65,"Point"],[725,49,646,70],[725,51,646,72,"p"],[725,52,646,73],[725,54,646,75,"k1"],[725,56,646,77],[725,58,646,79,"k2"],[725,60,646,81],[725,61,646,82],[725,62,646,83],[725,63,646,84],[726,10,647,16],[726,17,647,23,"finishEndo"],[726,27,647,33],[726,28,647,34,"endo"],[726,32,647,38],[726,33,647,39,"beta"],[726,37,647,43],[726,39,647,45,"p1"],[726,41,647,47],[726,43,647,49,"p2"],[726,45,647,51],[726,47,647,53,"k1neg"],[726,52,647,58],[726,54,647,60,"k2neg"],[726,59,647,65],[726,60,647,66],[727,8,648,12],[727,9,648,13],[727,15,649,17],[728,10,650,16],[728,17,650,23,"wnaf"],[728,21,650,27],[728,22,650,28,"unsafe"],[728,28,650,34],[728,29,650,35,"p"],[728,30,650,36],[728,32,650,38,"sc"],[728,34,650,40],[728,35,650,41],[729,8,651,12],[730,6,652,8],[731,6,653,8,"multiplyAndAddUnsafe"],[731,26,653,28,"multiplyAndAddUnsafe"],[731,27,653,29,"Q"],[731,28,653,30],[731,30,653,32,"a"],[731,31,653,33],[731,33,653,35,"b"],[731,34,653,36],[731,36,653,38],[732,8,654,12],[732,14,654,18,"sum"],[732,17,654,21],[732,20,654,24],[732,24,654,28],[732,25,654,29,"multiplyUnsafe"],[732,39,654,43],[732,40,654,44,"a"],[732,41,654,45],[732,42,654,46],[732,43,654,47,"add"],[732,46,654,50],[732,47,654,51,"Q"],[732,48,654,52],[732,49,654,53,"multiplyUnsafe"],[732,63,654,67],[732,64,654,68,"b"],[732,65,654,69],[732,66,654,70],[732,67,654,71],[733,8,655,12],[733,15,655,19,"sum"],[733,18,655,22],[733,19,655,23,"is0"],[733,22,655,26],[733,23,655,27],[733,24,655,28],[733,27,655,31,"undefined"],[733,36,655,40],[733,39,655,43,"sum"],[733,42,655,46],[734,6,656,8],[735,6,657,8],[736,0,658,0],[737,0,659,0],[738,0,660,0],[739,6,661,8,"toAffine"],[739,14,661,16,"toAffine"],[739,15,661,17,"invertedZ"],[739,24,661,26],[739,26,661,28],[740,8,662,12],[740,15,662,19,"toAffineMemo"],[740,27,662,31],[740,28,662,32],[740,32,662,36],[740,34,662,38,"invertedZ"],[740,43,662,47],[740,44,662,48],[741,6,663,8],[742,6,664,8],[743,0,665,0],[744,0,666,0],[745,0,667,0],[746,6,668,8,"isTorsionFree"],[746,19,668,21,"isTorsionFree"],[746,20,668,21],[746,22,668,24],[747,8,669,12],[747,14,669,18],[748,10,669,20,"isTorsionFree"],[749,8,669,34],[749,9,669,35],[749,12,669,38,"extraOpts"],[749,21,669,47],[750,8,670,12],[750,12,670,16,"cofactor"],[750,20,670,24],[750,25,670,29,"_1n"],[750,28,670,32],[750,30,671,16],[750,37,671,23],[750,41,671,27],[751,8,672,12],[751,12,672,16,"isTorsionFree"],[751,25,672,29],[751,27,673,16],[751,34,673,23,"isTorsionFree"],[751,47,673,36],[751,48,673,37,"Point"],[751,53,673,42],[751,55,673,44],[751,59,673,48],[751,60,673,49],[752,8,674,12],[752,15,674,19,"wnaf"],[752,19,674,23],[752,20,674,24,"unsafe"],[752,26,674,30],[752,27,674,31],[752,31,674,35],[752,33,674,37,"CURVE_ORDER"],[752,44,674,48],[752,45,674,49],[752,46,674,50,"is0"],[752,49,674,53],[752,50,674,54],[752,51,674,55],[753,6,675,8],[754,6,676,8,"clearCofactor"],[754,19,676,21,"clearCofactor"],[754,20,676,21],[754,22,676,24],[755,8,677,12],[755,14,677,18],[756,10,677,20,"clearCofactor"],[757,8,677,34],[757,9,677,35],[757,12,677,38,"extraOpts"],[757,21,677,47],[758,8,678,12],[758,12,678,16,"cofactor"],[758,20,678,24],[758,25,678,29,"_1n"],[758,28,678,32],[758,30,679,16],[758,37,679,23],[758,41,679,27],[758,42,679,28],[758,43,679,29],[759,8,680,12],[759,12,680,16,"clearCofactor"],[759,25,680,29],[759,27,681,16],[759,34,681,23,"clearCofactor"],[759,47,681,36],[759,48,681,37,"Point"],[759,53,681,42],[759,55,681,44],[759,59,681,48],[759,60,681,49],[760,8,682,12],[760,15,682,19],[760,19,682,23],[760,20,682,24,"multiplyUnsafe"],[760,34,682,38],[760,35,682,39,"cofactor"],[760,43,682,47],[760,44,682,48],[761,6,683,8],[762,6,684,8,"isSmallOrder"],[762,18,684,20,"isSmallOrder"],[762,19,684,20],[762,21,684,23],[763,8,685,12],[764,8,686,12],[764,15,686,19],[764,19,686,23],[764,20,686,24,"multiplyUnsafe"],[764,34,686,38],[764,35,686,39,"cofactor"],[764,43,686,47],[764,44,686,48],[764,45,686,49,"is0"],[764,48,686,52],[764,49,686,53],[764,50,686,54],[765,6,687,8],[766,6,688,8,"toBytes"],[766,13,688,15,"toBytes"],[766,14,688,16,"isCompressed"],[766,26,688,28],[766,29,688,31],[766,33,688,35],[766,35,688,37],[767,8,689,12],[767,9,689,13],[767,10,689,14],[767,12,689,16,"utils_ts_1"],[767,22,689,26],[767,23,689,27,"_abool2"],[767,30,689,34],[767,32,689,36,"isCompressed"],[767,44,689,48],[767,46,689,50],[767,60,689,64],[767,61,689,65],[768,8,690,12],[768,12,690,16],[768,13,690,17,"assertValidity"],[768,27,690,31],[768,28,690,32],[768,29,690,33],[769,8,691,12],[769,15,691,19,"encodePoint"],[769,26,691,30],[769,27,691,31,"Point"],[769,32,691,36],[769,34,691,38],[769,38,691,42],[769,40,691,44,"isCompressed"],[769,52,691,56],[769,53,691,57],[770,6,692,8],[771,6,693,8,"toHex"],[771,11,693,13,"toHex"],[771,12,693,14,"isCompressed"],[771,24,693,26],[771,27,693,29],[771,31,693,33],[771,33,693,35],[772,8,694,12],[772,15,694,19],[772,16,694,20],[772,17,694,21],[772,19,694,23,"utils_ts_1"],[772,29,694,33],[772,30,694,34,"bytesToHex"],[772,40,694,44],[772,42,694,46],[772,46,694,50],[772,47,694,51,"toBytes"],[772,54,694,58],[772,55,694,59,"isCompressed"],[772,67,694,71],[772,68,694,72],[772,69,694,73],[773,6,695,8],[774,6,696,8,"toString"],[774,14,696,16,"toString"],[774,15,696,16],[774,17,696,19],[775,8,697,12],[775,15,697,19],[775,25,697,29],[775,29,697,33],[775,30,697,34,"is0"],[775,33,697,37],[775,34,697,38],[775,35,697,39],[775,38,697,42],[775,44,697,48],[775,47,697,51],[775,51,697,55],[775,52,697,56,"toHex"],[775,57,697,61],[775,58,697,62],[775,59,697,63],[775,62,697,66],[776,6,698,8],[777,6,699,8],[778,6,700,8],[778,10,700,12,"px"],[778,12,700,14,"px"],[778,13,700,14],[778,15,700,17],[779,8,701,12],[779,15,701,19],[779,19,701,23],[779,20,701,24,"X"],[779,21,701,25],[780,6,702,8],[781,6,703,8],[781,10,703,12,"py"],[781,12,703,14,"py"],[781,13,703,14],[781,15,703,17],[782,8,704,12],[782,15,704,19],[782,19,704,23],[782,20,704,24,"X"],[782,21,704,25],[783,6,705,8],[784,6,706,8],[784,10,706,12,"pz"],[784,12,706,14,"pz"],[784,13,706,14],[784,15,706,17],[785,8,707,12],[785,15,707,19],[785,19,707,23],[785,20,707,24,"Z"],[785,21,707,25],[786,6,708,8],[787,6,709,8,"toRawBytes"],[787,16,709,18,"toRawBytes"],[787,17,709,19,"isCompressed"],[787,29,709,31],[787,32,709,34],[787,36,709,38],[787,38,709,40],[788,8,710,12],[788,15,710,19],[788,19,710,23],[788,20,710,24,"toBytes"],[788,27,710,31],[788,28,710,32,"isCompressed"],[788,40,710,44],[788,41,710,45],[789,6,711,8],[790,6,712,8,"_setWindowSize"],[790,20,712,22,"_setWindowSize"],[790,21,712,23,"windowSize"],[790,31,712,33],[790,33,712,35],[791,8,713,12],[791,12,713,16],[791,13,713,17,"precompute"],[791,23,713,27],[791,24,713,28,"windowSize"],[791,34,713,38],[791,35,713,39],[792,6,714,8],[793,6,715,8],[793,13,715,15,"normalizeZ"],[793,23,715,25,"normalizeZ"],[793,24,715,26,"points"],[793,30,715,32],[793,32,715,34],[794,8,716,12],[794,15,716,19],[794,16,716,20],[794,17,716,21],[794,19,716,23,"curve_ts_1"],[794,29,716,33],[794,30,716,34,"normalizeZ"],[794,40,716,44],[794,42,716,46,"Point"],[794,47,716,51],[794,49,716,53,"points"],[794,55,716,59],[794,56,716,60],[795,6,717,8],[796,6,718,8],[796,13,718,15,"msm"],[796,16,718,18,"msm"],[796,17,718,19,"points"],[796,23,718,25],[796,25,718,27,"scalars"],[796,32,718,34],[796,34,718,36],[797,8,719,12],[797,15,719,19],[797,16,719,20],[797,17,719,21],[797,19,719,23,"curve_ts_1"],[797,29,719,33],[797,30,719,34,"pippenger"],[797,39,719,43],[797,41,719,45,"Point"],[797,46,719,50],[797,48,719,52,"Fn"],[797,50,719,54],[797,52,719,56,"points"],[797,58,719,62],[797,60,719,64,"scalars"],[797,67,719,71],[797,68,719,72],[798,6,720,8],[799,6,721,8],[799,13,721,15,"fromPrivateKey"],[799,27,721,29,"fromPrivateKey"],[799,28,721,30,"privateKey"],[799,38,721,40],[799,40,721,42],[800,8,722,12],[800,15,722,19,"Point"],[800,20,722,24],[800,21,722,25,"BASE"],[800,25,722,29],[800,26,722,30,"multiply"],[800,34,722,38],[800,35,722,39,"_normFnElement"],[800,49,722,53],[800,50,722,54,"Fn"],[800,52,722,56],[800,54,722,58,"privateKey"],[800,64,722,68],[800,65,722,69],[800,66,722,70],[801,6,723,8],[802,4,724,4],[803,4,725,4],[804,4,726,4,"Point"],[804,9,726,9],[804,10,726,10,"BASE"],[804,14,726,14],[804,17,726,17],[804,21,726,21,"Point"],[804,26,726,26],[804,27,726,27,"CURVE"],[804,32,726,32],[804,33,726,33,"Gx"],[804,35,726,35],[804,37,726,37,"CURVE"],[804,42,726,42],[804,43,726,43,"Gy"],[804,45,726,45],[804,47,726,47,"Fp"],[804,49,726,49],[804,50,726,50,"ONE"],[804,53,726,53],[804,54,726,54],[805,4,727,4],[806,4,728,4,"Point"],[806,9,728,9],[806,10,728,10,"ZERO"],[806,14,728,14],[806,17,728,17],[806,21,728,21,"Point"],[806,26,728,26],[806,27,728,27,"Fp"],[806,29,728,29],[806,30,728,30,"ZERO"],[806,34,728,34],[806,36,728,36,"Fp"],[806,38,728,38],[806,39,728,39,"ONE"],[806,42,728,42],[806,44,728,44,"Fp"],[806,46,728,46],[806,47,728,47,"ZERO"],[806,51,728,51],[806,52,728,52],[806,53,728,53],[806,54,728,54],[807,4,729,4],[808,4,730,4,"Point"],[808,9,730,9],[808,10,730,10,"Fp"],[808,12,730,12],[808,15,730,15,"Fp"],[808,17,730,17],[809,4,731,4],[810,4,732,4,"Point"],[810,9,732,9],[810,10,732,10,"Fn"],[810,12,732,12],[810,15,732,15,"Fn"],[810,17,732,17],[811,4,733,4],[811,10,733,10,"bits"],[811,14,733,14],[811,17,733,17,"Fn"],[811,19,733,19],[811,20,733,20,"BITS"],[811,24,733,24],[812,4,734,4],[812,10,734,10,"wnaf"],[812,14,734,14],[812,17,734,17],[812,21,734,21,"curve_ts_1"],[812,31,734,31],[812,32,734,32,"wNAF"],[812,36,734,36],[812,37,734,37,"Point"],[812,42,734,42],[812,44,734,44,"extraOpts"],[812,53,734,53],[812,54,734,54,"endo"],[812,58,734,58],[812,61,734,61,"Math"],[812,65,734,65],[812,66,734,66,"ceil"],[812,70,734,70],[812,71,734,71,"bits"],[812,75,734,75],[812,78,734,78],[812,79,734,79],[812,80,734,80],[812,83,734,83,"bits"],[812,87,734,87],[812,88,734,88],[813,4,735,4,"Point"],[813,9,735,9],[813,10,735,10,"BASE"],[813,14,735,14],[813,15,735,15,"precompute"],[813,25,735,25],[813,26,735,26],[813,27,735,27],[813,28,735,28],[813,29,735,29],[813,30,735,30],[814,4,736,4],[814,11,736,11,"Point"],[814,16,736,16],[815,2,737,0],[816,2,738,0],[817,2,739,0],[817,11,739,9,"pprefix"],[817,18,739,16,"pprefix"],[817,19,739,17,"hasEvenY"],[817,27,739,25],[817,29,739,27],[818,4,740,4],[818,11,740,11,"Uint8Array"],[818,21,740,21],[818,22,740,22,"of"],[818,24,740,24],[818,25,740,25,"hasEvenY"],[818,33,740,33],[818,36,740,36],[818,40,740,40],[818,43,740,43],[818,47,740,47],[818,48,740,48],[819,2,741,0],[820,2,742,0],[821,0,743,0],[822,0,744,0],[823,0,745,0],[824,0,746,0],[825,0,747,0],[826,0,748,0],[827,0,749,0],[828,0,750,0],[829,2,751,0],[829,11,751,9,"SWUFpSqrtRatio"],[829,25,751,23,"SWUFpSqrtRatio"],[829,26,751,24,"Fp"],[829,28,751,26],[829,30,751,28,"Z"],[829,31,751,29],[829,33,751,31],[830,4,752,4],[831,4,753,4],[831,10,753,10,"q"],[831,11,753,11],[831,14,753,14,"Fp"],[831,16,753,16],[831,17,753,17,"ORDER"],[831,22,753,22],[832,4,754,4],[832,8,754,8,"l"],[832,9,754,9],[832,12,754,12,"_0n"],[832,15,754,15],[833,4,755,4],[833,9,755,9],[833,13,755,13,"o"],[833,14,755,14],[833,17,755,17,"q"],[833,18,755,18],[833,21,755,21,"_1n"],[833,24,755,24],[833,26,755,26,"o"],[833,27,755,27],[833,30,755,30,"_2n"],[833,33,755,33],[833,38,755,38,"_0n"],[833,41,755,41],[833,43,755,43,"o"],[833,44,755,44],[833,48,755,48,"_2n"],[833,51,755,51],[833,53,756,8,"l"],[833,54,756,9],[833,58,756,13,"_1n"],[833,61,756,16],[834,4,757,4],[834,10,757,10,"c1"],[834,12,757,12],[834,15,757,15,"l"],[834,16,757,16],[834,17,757,17],[834,18,757,18],[835,4,758,4],[836,4,759,4],[837,4,760,4],[837,10,760,10,"_2n_pow_c1_1"],[837,22,760,22],[837,25,760,25,"_2n"],[837,28,760,28],[837,32,760,33,"c1"],[837,34,760,35],[837,37,760,38,"_1n"],[837,40,760,41],[837,43,760,44,"_1n"],[837,46,760,48],[838,4,761,4],[838,10,761,10,"_2n_pow_c1"],[838,20,761,20],[838,23,761,23,"_2n_pow_c1_1"],[838,35,761,35],[838,38,761,38,"_2n"],[838,41,761,41],[839,4,762,4],[839,10,762,10,"c2"],[839,12,762,12],[839,15,762,15],[839,16,762,16,"q"],[839,17,762,17],[839,20,762,20,"_1n"],[839,23,762,23],[839,27,762,27,"_2n_pow_c1"],[839,37,762,37],[839,38,762,38],[839,39,762,39],[840,4,763,4],[840,10,763,10,"c3"],[840,12,763,12],[840,15,763,15],[840,16,763,16,"c2"],[840,18,763,18],[840,21,763,21,"_1n"],[840,24,763,24],[840,28,763,28,"_2n"],[840,31,763,31],[840,32,763,32],[840,33,763,33],[841,4,764,4],[841,10,764,10,"c4"],[841,12,764,12],[841,15,764,15,"_2n_pow_c1"],[841,25,764,25],[841,28,764,28,"_1n"],[841,31,764,31],[841,32,764,32],[841,33,764,33],[842,4,765,4],[842,10,765,10,"c5"],[842,12,765,12],[842,15,765,15,"_2n_pow_c1_1"],[842,27,765,27],[842,28,765,28],[842,29,765,29],[843,4,766,4],[843,10,766,10,"c6"],[843,12,766,12],[843,15,766,15,"Fp"],[843,17,766,17],[843,18,766,18,"pow"],[843,21,766,21],[843,22,766,22,"Z"],[843,23,766,23],[843,25,766,25,"c2"],[843,27,766,27],[843,28,766,28],[843,29,766,29],[843,30,766,30],[844,4,767,4],[844,10,767,10,"c7"],[844,12,767,12],[844,15,767,15,"Fp"],[844,17,767,17],[844,18,767,18,"pow"],[844,21,767,21],[844,22,767,22,"Z"],[844,23,767,23],[844,25,767,25],[844,26,767,26,"c2"],[844,28,767,28],[844,31,767,31,"_1n"],[844,34,767,34],[844,38,767,38,"_2n"],[844,41,767,41],[844,42,767,42],[844,43,767,43],[844,44,767,44],[845,4,768,4],[845,8,768,8,"sqrtRatio"],[845,17,768,17],[845,20,768,20,"sqrtRatio"],[845,21,768,21,"u"],[845,22,768,22],[845,24,768,24,"v"],[845,25,768,25],[845,30,768,30],[846,6,769,8],[846,10,769,12,"tv1"],[846,13,769,15],[846,16,769,18,"c6"],[846,18,769,20],[846,19,769,21],[846,20,769,22],[847,6,770,8],[847,10,770,12,"tv2"],[847,13,770,15],[847,16,770,18,"Fp"],[847,18,770,20],[847,19,770,21,"pow"],[847,22,770,24],[847,23,770,25,"v"],[847,24,770,26],[847,26,770,28,"c4"],[847,28,770,30],[847,29,770,31],[847,30,770,32],[847,31,770,33],[848,6,771,8],[848,10,771,12,"tv3"],[848,13,771,15],[848,16,771,18,"Fp"],[848,18,771,20],[848,19,771,21,"sqr"],[848,22,771,24],[848,23,771,25,"tv2"],[848,26,771,28],[848,27,771,29],[848,28,771,30],[848,29,771,31],[849,6,772,8,"tv3"],[849,9,772,11],[849,12,772,14,"Fp"],[849,14,772,16],[849,15,772,17,"mul"],[849,18,772,20],[849,19,772,21,"tv3"],[849,22,772,24],[849,24,772,26,"v"],[849,25,772,27],[849,26,772,28],[849,27,772,29],[849,28,772,30],[850,6,773,8],[850,10,773,12,"tv5"],[850,13,773,15],[850,16,773,18,"Fp"],[850,18,773,20],[850,19,773,21,"mul"],[850,22,773,24],[850,23,773,25,"u"],[850,24,773,26],[850,26,773,28,"tv3"],[850,29,773,31],[850,30,773,32],[850,31,773,33],[850,32,773,34],[851,6,774,8,"tv5"],[851,9,774,11],[851,12,774,14,"Fp"],[851,14,774,16],[851,15,774,17,"pow"],[851,18,774,20],[851,19,774,21,"tv5"],[851,22,774,24],[851,24,774,26,"c3"],[851,26,774,28],[851,27,774,29],[851,28,774,30],[851,29,774,31],[852,6,775,8,"tv5"],[852,9,775,11],[852,12,775,14,"Fp"],[852,14,775,16],[852,15,775,17,"mul"],[852,18,775,20],[852,19,775,21,"tv5"],[852,22,775,24],[852,24,775,26,"tv2"],[852,27,775,29],[852,28,775,30],[852,29,775,31],[852,30,775,32],[853,6,776,8,"tv2"],[853,9,776,11],[853,12,776,14,"Fp"],[853,14,776,16],[853,15,776,17,"mul"],[853,18,776,20],[853,19,776,21,"tv5"],[853,22,776,24],[853,24,776,26,"v"],[853,25,776,27],[853,26,776,28],[853,27,776,29],[853,28,776,30],[854,6,777,8,"tv3"],[854,9,777,11],[854,12,777,14,"Fp"],[854,14,777,16],[854,15,777,17,"mul"],[854,18,777,20],[854,19,777,21,"tv5"],[854,22,777,24],[854,24,777,26,"u"],[854,25,777,27],[854,26,777,28],[854,27,777,29],[854,28,777,30],[855,6,778,8],[855,10,778,12,"tv4"],[855,13,778,15],[855,16,778,18,"Fp"],[855,18,778,20],[855,19,778,21,"mul"],[855,22,778,24],[855,23,778,25,"tv3"],[855,26,778,28],[855,28,778,30,"tv2"],[855,31,778,33],[855,32,778,34],[855,33,778,35],[855,34,778,36],[856,6,779,8,"tv5"],[856,9,779,11],[856,12,779,14,"Fp"],[856,14,779,16],[856,15,779,17,"pow"],[856,18,779,20],[856,19,779,21,"tv4"],[856,22,779,24],[856,24,779,26,"c5"],[856,26,779,28],[856,27,779,29],[856,28,779,30],[856,29,779,31],[857,6,780,8],[857,10,780,12,"isQR"],[857,14,780,16],[857,17,780,19,"Fp"],[857,19,780,21],[857,20,780,22,"eql"],[857,23,780,25],[857,24,780,26,"tv5"],[857,27,780,29],[857,29,780,31,"Fp"],[857,31,780,33],[857,32,780,34,"ONE"],[857,35,780,37],[857,36,780,38],[857,37,780,39],[857,38,780,40],[858,6,781,8,"tv2"],[858,9,781,11],[858,12,781,14,"Fp"],[858,14,781,16],[858,15,781,17,"mul"],[858,18,781,20],[858,19,781,21,"tv3"],[858,22,781,24],[858,24,781,26,"c7"],[858,26,781,28],[858,27,781,29],[858,28,781,30],[858,29,781,31],[859,6,782,8,"tv5"],[859,9,782,11],[859,12,782,14,"Fp"],[859,14,782,16],[859,15,782,17,"mul"],[859,18,782,20],[859,19,782,21,"tv4"],[859,22,782,24],[859,24,782,26,"tv1"],[859,27,782,29],[859,28,782,30],[859,29,782,31],[859,30,782,32],[860,6,783,8,"tv3"],[860,9,783,11],[860,12,783,14,"Fp"],[860,14,783,16],[860,15,783,17,"cmov"],[860,19,783,21],[860,20,783,22,"tv2"],[860,23,783,25],[860,25,783,27,"tv3"],[860,28,783,30],[860,30,783,32,"isQR"],[860,34,783,36],[860,35,783,37],[860,36,783,38],[860,37,783,39],[861,6,784,8,"tv4"],[861,9,784,11],[861,12,784,14,"Fp"],[861,14,784,16],[861,15,784,17,"cmov"],[861,19,784,21],[861,20,784,22,"tv5"],[861,23,784,25],[861,25,784,27,"tv4"],[861,28,784,30],[861,30,784,32,"isQR"],[861,34,784,36],[861,35,784,37],[861,36,784,38],[861,37,784,39],[862,6,785,8],[863,6,786,8],[863,11,786,13],[863,15,786,17,"i"],[863,16,786,18],[863,19,786,21,"c1"],[863,21,786,23],[863,23,786,25,"i"],[863,24,786,26],[863,27,786,29,"_1n"],[863,30,786,32],[863,32,786,34,"i"],[863,33,786,35],[863,35,786,37],[863,37,786,39],[864,8,787,12],[864,12,787,16,"tv5"],[864,15,787,19],[864,18,787,22,"i"],[864,19,787,23],[864,22,787,26,"_2n"],[864,25,787,29],[864,26,787,30],[864,27,787,31],[865,8,788,12,"tv5"],[865,11,788,15],[865,14,788,18,"_2n"],[865,17,788,21],[865,21,788,26,"tv5"],[865,24,788,29],[865,27,788,32,"_1n"],[865,30,788,36],[865,31,788,37],[865,32,788,38],[866,8,789,12],[866,12,789,16,"tvv5"],[866,16,789,20],[866,19,789,23,"Fp"],[866,21,789,25],[866,22,789,26,"pow"],[866,25,789,29],[866,26,789,30,"tv4"],[866,29,789,33],[866,31,789,35,"tv5"],[866,34,789,38],[866,35,789,39],[866,36,789,40],[866,37,789,41],[867,8,790,12],[867,14,790,18,"e1"],[867,16,790,20],[867,19,790,23,"Fp"],[867,21,790,25],[867,22,790,26,"eql"],[867,25,790,29],[867,26,790,30,"tvv5"],[867,30,790,34],[867,32,790,36,"Fp"],[867,34,790,38],[867,35,790,39,"ONE"],[867,38,790,42],[867,39,790,43],[867,40,790,44],[867,41,790,45],[868,8,791,12,"tv2"],[868,11,791,15],[868,14,791,18,"Fp"],[868,16,791,20],[868,17,791,21,"mul"],[868,20,791,24],[868,21,791,25,"tv3"],[868,24,791,28],[868,26,791,30,"tv1"],[868,29,791,33],[868,30,791,34],[868,31,791,35],[868,32,791,36],[869,8,792,12,"tv1"],[869,11,792,15],[869,14,792,18,"Fp"],[869,16,792,20],[869,17,792,21,"mul"],[869,20,792,24],[869,21,792,25,"tv1"],[869,24,792,28],[869,26,792,30,"tv1"],[869,29,792,33],[869,30,792,34],[869,31,792,35],[869,32,792,36],[870,8,793,12,"tvv5"],[870,12,793,16],[870,15,793,19,"Fp"],[870,17,793,21],[870,18,793,22,"mul"],[870,21,793,25],[870,22,793,26,"tv4"],[870,25,793,29],[870,27,793,31,"tv1"],[870,30,793,34],[870,31,793,35],[870,32,793,36],[870,33,793,37],[871,8,794,12,"tv3"],[871,11,794,15],[871,14,794,18,"Fp"],[871,16,794,20],[871,17,794,21,"cmov"],[871,21,794,25],[871,22,794,26,"tv2"],[871,25,794,29],[871,27,794,31,"tv3"],[871,30,794,34],[871,32,794,36,"e1"],[871,34,794,38],[871,35,794,39],[871,36,794,40],[871,37,794,41],[872,8,795,12,"tv4"],[872,11,795,15],[872,14,795,18,"Fp"],[872,16,795,20],[872,17,795,21,"cmov"],[872,21,795,25],[872,22,795,26,"tvv5"],[872,26,795,30],[872,28,795,32,"tv4"],[872,31,795,35],[872,33,795,37,"e1"],[872,35,795,39],[872,36,795,40],[872,37,795,41],[872,38,795,42],[873,6,796,8],[874,6,797,8],[874,13,797,15],[875,8,797,17,"isValid"],[875,15,797,24],[875,17,797,26,"isQR"],[875,21,797,30],[876,8,797,32,"value"],[876,13,797,37],[876,15,797,39,"tv3"],[877,6,797,43],[877,7,797,44],[878,4,798,4],[878,5,798,5],[879,4,799,4],[879,8,799,8,"Fp"],[879,10,799,10],[879,11,799,11,"ORDER"],[879,16,799,16],[879,19,799,19,"_4n"],[879,22,799,22],[879,27,799,27,"_3n"],[879,30,799,30],[879,32,799,32],[880,6,800,8],[881,6,801,8],[881,12,801,14,"c1"],[881,14,801,16],[881,17,801,19],[881,18,801,20,"Fp"],[881,20,801,22],[881,21,801,23,"ORDER"],[881,26,801,28],[881,29,801,31,"_3n"],[881,32,801,34],[881,36,801,38,"_4n"],[881,39,801,41],[881,40,801,42],[881,41,801,43],[882,6,802,8],[882,12,802,14,"c2"],[882,14,802,16],[882,17,802,19,"Fp"],[882,19,802,21],[882,20,802,22,"sqrt"],[882,24,802,26],[882,25,802,27,"Fp"],[882,27,802,29],[882,28,802,30,"neg"],[882,31,802,33],[882,32,802,34,"Z"],[882,33,802,35],[882,34,802,36],[882,35,802,37],[882,36,802,38],[882,37,802,39],[883,6,803,8,"sqrtRatio"],[883,15,803,17],[883,18,803,20,"sqrtRatio"],[883,19,803,21,"u"],[883,20,803,22],[883,22,803,24,"v"],[883,23,803,25],[883,28,803,30],[884,8,804,12],[884,12,804,16,"tv1"],[884,15,804,19],[884,18,804,22,"Fp"],[884,20,804,24],[884,21,804,25,"sqr"],[884,24,804,28],[884,25,804,29,"v"],[884,26,804,30],[884,27,804,31],[884,28,804,32],[884,29,804,33],[885,8,805,12],[885,14,805,18,"tv2"],[885,17,805,21],[885,20,805,24,"Fp"],[885,22,805,26],[885,23,805,27,"mul"],[885,26,805,30],[885,27,805,31,"u"],[885,28,805,32],[885,30,805,34,"v"],[885,31,805,35],[885,32,805,36],[885,33,805,37],[885,34,805,38],[886,8,806,12,"tv1"],[886,11,806,15],[886,14,806,18,"Fp"],[886,16,806,20],[886,17,806,21,"mul"],[886,20,806,24],[886,21,806,25,"tv1"],[886,24,806,28],[886,26,806,30,"tv2"],[886,29,806,33],[886,30,806,34],[886,31,806,35],[886,32,806,36],[887,8,807,12],[887,12,807,16,"y1"],[887,14,807,18],[887,17,807,21,"Fp"],[887,19,807,23],[887,20,807,24,"pow"],[887,23,807,27],[887,24,807,28,"tv1"],[887,27,807,31],[887,29,807,33,"c1"],[887,31,807,35],[887,32,807,36],[887,33,807,37],[887,34,807,38],[888,8,808,12,"y1"],[888,10,808,14],[888,13,808,17,"Fp"],[888,15,808,19],[888,16,808,20,"mul"],[888,19,808,23],[888,20,808,24,"y1"],[888,22,808,26],[888,24,808,28,"tv2"],[888,27,808,31],[888,28,808,32],[888,29,808,33],[888,30,808,34],[889,8,809,12],[889,14,809,18,"y2"],[889,16,809,20],[889,19,809,23,"Fp"],[889,21,809,25],[889,22,809,26,"mul"],[889,25,809,29],[889,26,809,30,"y1"],[889,28,809,32],[889,30,809,34,"c2"],[889,32,809,36],[889,33,809,37],[889,34,809,38],[889,35,809,39],[890,8,810,12],[890,14,810,18,"tv3"],[890,17,810,21],[890,20,810,24,"Fp"],[890,22,810,26],[890,23,810,27,"mul"],[890,26,810,30],[890,27,810,31,"Fp"],[890,29,810,33],[890,30,810,34,"sqr"],[890,33,810,37],[890,34,810,38,"y1"],[890,36,810,40],[890,37,810,41],[890,39,810,43,"v"],[890,40,810,44],[890,41,810,45],[890,42,810,46],[890,43,810,47],[891,8,811,12],[891,14,811,18,"isQR"],[891,18,811,22],[891,21,811,25,"Fp"],[891,23,811,27],[891,24,811,28,"eql"],[891,27,811,31],[891,28,811,32,"tv3"],[891,31,811,35],[891,33,811,37,"u"],[891,34,811,38],[891,35,811,39],[891,36,811,40],[891,37,811,41],[892,8,812,12],[892,12,812,16,"y"],[892,13,812,17],[892,16,812,20,"Fp"],[892,18,812,22],[892,19,812,23,"cmov"],[892,23,812,27],[892,24,812,28,"y2"],[892,26,812,30],[892,28,812,32,"y1"],[892,30,812,34],[892,32,812,36,"isQR"],[892,36,812,40],[892,37,812,41],[892,38,812,42],[892,39,812,43],[893,8,813,12],[893,15,813,19],[894,10,813,21,"isValid"],[894,17,813,28],[894,19,813,30,"isQR"],[894,23,813,34],[895,10,813,36,"value"],[895,15,813,41],[895,17,813,43,"y"],[896,8,813,45],[896,9,813,46],[896,10,813,47],[896,11,813,48],[897,6,814,8],[897,7,814,9],[898,4,815,4],[899,4,816,4],[900,4,817,4],[901,4,818,4],[901,11,818,11,"sqrtRatio"],[901,20,818,20],[902,2,819,0],[903,2,820,0],[904,0,821,0],[905,0,822,0],[906,0,823,0],[907,2,824,0],[907,11,824,9,"mapToCurveSimpleSWU"],[907,30,824,28,"mapToCurveSimpleSWU"],[907,31,824,29,"Fp"],[907,33,824,31],[907,35,824,33,"opts"],[907,39,824,37],[907,41,824,39],[908,4,825,4],[908,5,825,5],[908,6,825,6],[908,8,825,8,"modular_ts_1"],[908,20,825,20],[908,21,825,21,"validateField"],[908,34,825,34],[908,36,825,36,"Fp"],[908,38,825,38],[908,39,825,39],[909,4,826,4],[909,10,826,10],[910,6,826,12,"A"],[910,7,826,13],[911,6,826,15,"B"],[911,7,826,16],[912,6,826,18,"Z"],[913,4,826,20],[913,5,826,21],[913,8,826,24,"opts"],[913,12,826,28],[914,4,827,4],[914,8,827,8],[914,9,827,9,"Fp"],[914,11,827,11],[914,12,827,12,"isValid"],[914,19,827,19],[914,20,827,20,"A"],[914,21,827,21],[914,22,827,22],[914,26,827,26],[914,27,827,27,"Fp"],[914,29,827,29],[914,30,827,30,"isValid"],[914,37,827,37],[914,38,827,38,"B"],[914,39,827,39],[914,40,827,40],[914,44,827,44],[914,45,827,45,"Fp"],[914,47,827,47],[914,48,827,48,"isValid"],[914,55,827,55],[914,56,827,56,"Z"],[914,57,827,57],[914,58,827,58],[914,60,828,8],[914,66,828,14],[914,70,828,18,"Error"],[914,75,828,23],[914,76,828,24],[914,111,828,59],[914,112,828,60],[915,4,829,4],[915,10,829,10,"sqrtRatio"],[915,19,829,19],[915,22,829,22,"SWUFpSqrtRatio"],[915,36,829,36],[915,37,829,37,"Fp"],[915,39,829,39],[915,41,829,41,"Z"],[915,42,829,42],[915,43,829,43],[916,4,830,4],[916,8,830,8],[916,9,830,9,"Fp"],[916,11,830,11],[916,12,830,12,"isOdd"],[916,17,830,17],[916,19,831,8],[916,25,831,14],[916,29,831,18,"Error"],[916,34,831,23],[916,35,831,24],[916,65,831,54],[916,66,831,55],[917,4,832,4],[918,4,833,4],[919,4,834,4],[919,11,834,12,"u"],[919,12,834,13],[919,16,834,18],[920,6,835,8],[921,6,836,8],[921,10,836,12,"tv1"],[921,13,836,15],[921,15,836,17,"tv2"],[921,18,836,20],[921,20,836,22,"tv3"],[921,23,836,25],[921,25,836,27,"tv4"],[921,28,836,30],[921,30,836,32,"tv5"],[921,33,836,35],[921,35,836,37,"tv6"],[921,38,836,40],[921,40,836,42,"x"],[921,41,836,43],[921,43,836,45,"y"],[921,44,836,46],[922,6,837,8,"tv1"],[922,9,837,11],[922,12,837,14,"Fp"],[922,14,837,16],[922,15,837,17,"sqr"],[922,18,837,20],[922,19,837,21,"u"],[922,20,837,22],[922,21,837,23],[922,22,837,24],[922,23,837,25],[923,6,838,8,"tv1"],[923,9,838,11],[923,12,838,14,"Fp"],[923,14,838,16],[923,15,838,17,"mul"],[923,18,838,20],[923,19,838,21,"tv1"],[923,22,838,24],[923,24,838,26,"Z"],[923,25,838,27],[923,26,838,28],[923,27,838,29],[923,28,838,30],[924,6,839,8,"tv2"],[924,9,839,11],[924,12,839,14,"Fp"],[924,14,839,16],[924,15,839,17,"sqr"],[924,18,839,20],[924,19,839,21,"tv1"],[924,22,839,24],[924,23,839,25],[924,24,839,26],[924,25,839,27],[925,6,840,8,"tv2"],[925,9,840,11],[925,12,840,14,"Fp"],[925,14,840,16],[925,15,840,17,"add"],[925,18,840,20],[925,19,840,21,"tv2"],[925,22,840,24],[925,24,840,26,"tv1"],[925,27,840,29],[925,28,840,30],[925,29,840,31],[925,30,840,32],[926,6,841,8,"tv3"],[926,9,841,11],[926,12,841,14,"Fp"],[926,14,841,16],[926,15,841,17,"add"],[926,18,841,20],[926,19,841,21,"tv2"],[926,22,841,24],[926,24,841,26,"Fp"],[926,26,841,28],[926,27,841,29,"ONE"],[926,30,841,32],[926,31,841,33],[926,32,841,34],[926,33,841,35],[927,6,842,8,"tv3"],[927,9,842,11],[927,12,842,14,"Fp"],[927,14,842,16],[927,15,842,17,"mul"],[927,18,842,20],[927,19,842,21,"tv3"],[927,22,842,24],[927,24,842,26,"B"],[927,25,842,27],[927,26,842,28],[927,27,842,29],[927,28,842,30],[928,6,843,8,"tv4"],[928,9,843,11],[928,12,843,14,"Fp"],[928,14,843,16],[928,15,843,17,"cmov"],[928,19,843,21],[928,20,843,22,"Z"],[928,21,843,23],[928,23,843,25,"Fp"],[928,25,843,27],[928,26,843,28,"neg"],[928,29,843,31],[928,30,843,32,"tv2"],[928,33,843,35],[928,34,843,36],[928,36,843,38],[928,37,843,39,"Fp"],[928,39,843,41],[928,40,843,42,"eql"],[928,43,843,45],[928,44,843,46,"tv2"],[928,47,843,49],[928,49,843,51,"Fp"],[928,51,843,53],[928,52,843,54,"ZERO"],[928,56,843,58],[928,57,843,59],[928,58,843,60],[928,59,843,61],[928,60,843,62],[929,6,844,8,"tv4"],[929,9,844,11],[929,12,844,14,"Fp"],[929,14,844,16],[929,15,844,17,"mul"],[929,18,844,20],[929,19,844,21,"tv4"],[929,22,844,24],[929,24,844,26,"A"],[929,25,844,27],[929,26,844,28],[929,27,844,29],[929,28,844,30],[930,6,845,8,"tv2"],[930,9,845,11],[930,12,845,14,"Fp"],[930,14,845,16],[930,15,845,17,"sqr"],[930,18,845,20],[930,19,845,21,"tv3"],[930,22,845,24],[930,23,845,25],[930,24,845,26],[930,25,845,27],[931,6,846,8,"tv6"],[931,9,846,11],[931,12,846,14,"Fp"],[931,14,846,16],[931,15,846,17,"sqr"],[931,18,846,20],[931,19,846,21,"tv4"],[931,22,846,24],[931,23,846,25],[931,24,846,26],[931,25,846,27],[932,6,847,8,"tv5"],[932,9,847,11],[932,12,847,14,"Fp"],[932,14,847,16],[932,15,847,17,"mul"],[932,18,847,20],[932,19,847,21,"tv6"],[932,22,847,24],[932,24,847,26,"A"],[932,25,847,27],[932,26,847,28],[932,27,847,29],[932,28,847,30],[933,6,848,8,"tv2"],[933,9,848,11],[933,12,848,14,"Fp"],[933,14,848,16],[933,15,848,17,"add"],[933,18,848,20],[933,19,848,21,"tv2"],[933,22,848,24],[933,24,848,26,"tv5"],[933,27,848,29],[933,28,848,30],[933,29,848,31],[933,30,848,32],[934,6,849,8,"tv2"],[934,9,849,11],[934,12,849,14,"Fp"],[934,14,849,16],[934,15,849,17,"mul"],[934,18,849,20],[934,19,849,21,"tv2"],[934,22,849,24],[934,24,849,26,"tv3"],[934,27,849,29],[934,28,849,30],[934,29,849,31],[934,30,849,32],[935,6,850,8,"tv6"],[935,9,850,11],[935,12,850,14,"Fp"],[935,14,850,16],[935,15,850,17,"mul"],[935,18,850,20],[935,19,850,21,"tv6"],[935,22,850,24],[935,24,850,26,"tv4"],[935,27,850,29],[935,28,850,30],[935,29,850,31],[935,30,850,32],[936,6,851,8,"tv5"],[936,9,851,11],[936,12,851,14,"Fp"],[936,14,851,16],[936,15,851,17,"mul"],[936,18,851,20],[936,19,851,21,"tv6"],[936,22,851,24],[936,24,851,26,"B"],[936,25,851,27],[936,26,851,28],[936,27,851,29],[936,28,851,30],[937,6,852,8,"tv2"],[937,9,852,11],[937,12,852,14,"Fp"],[937,14,852,16],[937,15,852,17,"add"],[937,18,852,20],[937,19,852,21,"tv2"],[937,22,852,24],[937,24,852,26,"tv5"],[937,27,852,29],[937,28,852,30],[937,29,852,31],[937,30,852,32],[938,6,853,8,"x"],[938,7,853,9],[938,10,853,12,"Fp"],[938,12,853,14],[938,13,853,15,"mul"],[938,16,853,18],[938,17,853,19,"tv1"],[938,20,853,22],[938,22,853,24,"tv3"],[938,25,853,27],[938,26,853,28],[938,27,853,29],[938,28,853,30],[939,6,854,8],[939,12,854,14],[940,8,854,16,"isValid"],[940,15,854,23],[941,8,854,25,"value"],[942,6,854,31],[942,7,854,32],[942,10,854,35,"sqrtRatio"],[942,19,854,44],[942,20,854,45,"tv2"],[942,23,854,48],[942,25,854,50,"tv6"],[942,28,854,53],[942,29,854,54],[942,30,854,55],[942,31,854,56],[943,6,855,8,"y"],[943,7,855,9],[943,10,855,12,"Fp"],[943,12,855,14],[943,13,855,15,"mul"],[943,16,855,18],[943,17,855,19,"tv1"],[943,20,855,22],[943,22,855,24,"u"],[943,23,855,25],[943,24,855,26],[943,25,855,27],[943,26,855,28],[944,6,856,8,"y"],[944,7,856,9],[944,10,856,12,"Fp"],[944,12,856,14],[944,13,856,15,"mul"],[944,16,856,18],[944,17,856,19,"y"],[944,18,856,20],[944,20,856,22,"value"],[944,25,856,27],[944,26,856,28],[944,27,856,29],[944,28,856,30],[945,6,857,8,"x"],[945,7,857,9],[945,10,857,12,"Fp"],[945,12,857,14],[945,13,857,15,"cmov"],[945,17,857,19],[945,18,857,20,"x"],[945,19,857,21],[945,21,857,23,"tv3"],[945,24,857,26],[945,26,857,28,"isValid"],[945,33,857,35],[945,34,857,36],[945,35,857,37],[945,36,857,38],[946,6,858,8,"y"],[946,7,858,9],[946,10,858,12,"Fp"],[946,12,858,14],[946,13,858,15,"cmov"],[946,17,858,19],[946,18,858,20,"y"],[946,19,858,21],[946,21,858,23,"value"],[946,26,858,28],[946,28,858,30,"isValid"],[946,35,858,37],[946,36,858,38],[946,37,858,39],[946,38,858,40],[947,6,859,8],[947,12,859,14,"e1"],[947,14,859,16],[947,17,859,19,"Fp"],[947,19,859,21],[947,20,859,22,"isOdd"],[947,25,859,27],[947,26,859,28,"u"],[947,27,859,29],[947,28,859,30],[947,33,859,35,"Fp"],[947,35,859,37],[947,36,859,38,"isOdd"],[947,41,859,43],[947,42,859,44,"y"],[947,43,859,45],[947,44,859,46],[947,45,859,47],[947,46,859,48],[948,6,860,8,"y"],[948,7,860,9],[948,10,860,12,"Fp"],[948,12,860,14],[948,13,860,15,"cmov"],[948,17,860,19],[948,18,860,20,"Fp"],[948,20,860,22],[948,21,860,23,"neg"],[948,24,860,26],[948,25,860,27,"y"],[948,26,860,28],[948,27,860,29],[948,29,860,31,"y"],[948,30,860,32],[948,32,860,34,"e1"],[948,34,860,36],[948,35,860,37],[948,36,860,38],[948,37,860,39],[949,6,861,8],[949,12,861,14,"tv4_inv"],[949,19,861,21],[949,22,861,24],[949,23,861,25],[949,24,861,26],[949,26,861,28,"modular_ts_1"],[949,38,861,40],[949,39,861,41,"FpInvertBatch"],[949,52,861,54],[949,54,861,56,"Fp"],[949,56,861,58],[949,58,861,60],[949,59,861,61,"tv4"],[949,62,861,64],[949,63,861,65],[949,65,861,67],[949,69,861,71],[949,70,861,72],[949,71,861,73],[949,72,861,74],[949,73,861,75],[950,6,862,8,"x"],[950,7,862,9],[950,10,862,12,"Fp"],[950,12,862,14],[950,13,862,15,"mul"],[950,16,862,18],[950,17,862,19,"x"],[950,18,862,20],[950,20,862,22,"tv4_inv"],[950,27,862,29],[950,28,862,30],[950,29,862,31],[950,30,862,32],[951,6,863,8],[951,13,863,15],[952,8,863,17,"x"],[952,9,863,18],[953,8,863,20,"y"],[954,6,863,22],[954,7,863,23],[955,4,864,4],[955,5,864,5],[956,2,865,0],[957,2,866,0],[957,11,866,9,"getWLengths"],[957,22,866,20,"getWLengths"],[957,23,866,21,"Fp"],[957,25,866,23],[957,27,866,25,"Fn"],[957,29,866,27],[957,31,866,29],[958,4,867,4],[958,11,867,11],[959,6,868,8,"secretKey"],[959,15,868,17],[959,17,868,19,"Fn"],[959,19,868,21],[959,20,868,22,"BYTES"],[959,25,868,27],[960,6,869,8,"publicKey"],[960,15,869,17],[960,17,869,19],[960,18,869,20],[960,21,869,23,"Fp"],[960,23,869,25],[960,24,869,26,"BYTES"],[960,29,869,31],[961,6,870,8,"publicKeyUncompressed"],[961,27,870,29],[961,29,870,31],[961,30,870,32],[961,33,870,35],[961,34,870,36],[961,37,870,39,"Fp"],[961,39,870,41],[961,40,870,42,"BYTES"],[961,45,870,47],[962,6,871,8,"publicKeyHasPrefix"],[962,24,871,26],[962,26,871,28],[962,30,871,32],[963,6,872,8,"signature"],[963,15,872,17],[963,17,872,19],[963,18,872,20],[963,21,872,23,"Fn"],[963,23,872,25],[963,24,872,26,"BYTES"],[964,4,873,4],[964,5,873,5],[965,2,874,0],[966,2,875,0],[967,0,876,0],[968,0,877,0],[969,0,878,0],[970,2,879,0],[970,11,879,9,"ecdh"],[970,15,879,13,"ecdh"],[970,16,879,14,"Point"],[970,21,879,19],[970,23,879,21,"ecdhOpts"],[970,31,879,29],[970,34,879,32],[970,35,879,33],[970,36,879,34],[970,38,879,36],[971,4,880,4],[971,10,880,10],[972,6,880,12,"Fn"],[973,4,880,15],[973,5,880,16],[973,8,880,19,"Point"],[973,13,880,24],[974,4,881,4],[974,10,881,10,"randomBytes_"],[974,22,881,22],[974,25,881,25,"ecdhOpts"],[974,33,881,33],[974,34,881,34,"randomBytes"],[974,45,881,45],[974,49,881,49,"utils_ts_1"],[974,59,881,59],[974,60,881,60,"randomBytes"],[974,71,881,71],[975,4,882,4],[975,10,882,10,"lengths"],[975,17,882,17],[975,20,882,20,"Object"],[975,26,882,26],[975,27,882,27,"assign"],[975,33,882,33],[975,34,882,34,"getWLengths"],[975,45,882,45],[975,46,882,46,"Point"],[975,51,882,51],[975,52,882,52,"Fp"],[975,54,882,54],[975,56,882,56,"Fn"],[975,58,882,58],[975,59,882,59],[975,61,882,61],[976,6,882,63,"seed"],[976,10,882,67],[976,12,882,69],[976,13,882,70],[976,14,882,71],[976,16,882,73,"modular_ts_1"],[976,28,882,85],[976,29,882,86,"getMinHashLength"],[976,45,882,102],[976,47,882,104,"Fn"],[976,49,882,106],[976,50,882,107,"ORDER"],[976,55,882,112],[977,4,882,114],[977,5,882,115],[977,6,882,116],[978,4,883,4],[978,13,883,13,"isValidSecretKey"],[978,29,883,29,"isValidSecretKey"],[978,30,883,30,"secretKey"],[978,39,883,39],[978,41,883,41],[979,6,884,8],[979,10,884,12],[980,8,885,12],[980,15,885,19],[980,16,885,20],[980,17,885,21,"_normFnElement"],[980,31,885,35],[980,32,885,36,"Fn"],[980,34,885,38],[980,36,885,40,"secretKey"],[980,45,885,49],[980,46,885,50],[981,6,886,8],[981,7,886,9],[981,8,887,8],[981,15,887,15,"error"],[981,20,887,20],[981,22,887,22],[982,8,888,12],[982,15,888,19],[982,20,888,24],[983,6,889,8],[984,4,890,4],[985,4,891,4],[985,13,891,13,"isValidPublicKey"],[985,29,891,29,"isValidPublicKey"],[985,30,891,30,"publicKey"],[985,39,891,39],[985,41,891,41,"isCompressed"],[985,53,891,53],[985,55,891,55],[986,6,892,8],[986,12,892,14],[987,8,892,16,"publicKey"],[987,17,892,25],[987,19,892,27,"comp"],[987,23,892,31],[988,8,892,33,"publicKeyUncompressed"],[989,6,892,55],[989,7,892,56],[989,10,892,59,"lengths"],[989,17,892,66],[990,6,893,8],[990,10,893,12],[991,8,894,12],[991,14,894,18,"l"],[991,15,894,19],[991,18,894,22,"publicKey"],[991,27,894,31],[991,28,894,32,"length"],[991,34,894,38],[992,8,895,12],[992,12,895,16,"isCompressed"],[992,24,895,28],[992,29,895,33],[992,33,895,37],[992,37,895,41,"l"],[992,38,895,42],[992,43,895,47,"comp"],[992,47,895,51],[992,49,896,16],[992,56,896,23],[992,61,896,28],[993,8,897,12],[993,12,897,16,"isCompressed"],[993,24,897,28],[993,29,897,33],[993,34,897,38],[993,38,897,42,"l"],[993,39,897,43],[993,44,897,48,"publicKeyUncompressed"],[993,65,897,69],[993,67,898,16],[993,74,898,23],[993,79,898,28],[994,8,899,12],[994,15,899,19],[994,16,899,20],[994,17,899,21,"Point"],[994,22,899,26],[994,23,899,27,"fromBytes"],[994,32,899,36],[994,33,899,37,"publicKey"],[994,42,899,46],[994,43,899,47],[995,6,900,8],[995,7,900,9],[995,8,901,8],[995,15,901,15,"error"],[995,20,901,20],[995,22,901,22],[996,8,902,12],[996,15,902,19],[996,20,902,24],[997,6,903,8],[998,4,904,4],[999,4,905,4],[1000,0,906,0],[1001,0,907,0],[1002,0,908,0],[1003,4,909,4],[1003,13,909,13,"randomSecretKey"],[1003,28,909,28,"randomSecretKey"],[1003,29,909,29,"seed"],[1003,33,909,33],[1003,36,909,36,"randomBytes_"],[1003,48,909,48],[1003,49,909,49,"lengths"],[1003,56,909,56],[1003,57,909,57,"seed"],[1003,61,909,61],[1003,62,909,62],[1003,64,909,64],[1004,6,910,8],[1004,13,910,15],[1004,14,910,16],[1004,15,910,17],[1004,17,910,19,"modular_ts_1"],[1004,29,910,31],[1004,30,910,32,"mapHashToField"],[1004,44,910,46],[1004,46,910,48],[1004,47,910,49],[1004,48,910,50],[1004,50,910,52,"utils_ts_1"],[1004,60,910,62],[1004,61,910,63,"_abytes2"],[1004,69,910,71],[1004,71,910,73,"seed"],[1004,75,910,77],[1004,77,910,79,"lengths"],[1004,84,910,86],[1004,85,910,87,"seed"],[1004,89,910,91],[1004,91,910,93],[1004,97,910,99],[1004,98,910,100],[1004,100,910,102,"Fn"],[1004,102,910,104],[1004,103,910,105,"ORDER"],[1004,108,910,110],[1004,109,910,111],[1005,4,911,4],[1006,4,912,4],[1007,0,913,0],[1008,0,914,0],[1009,0,915,0],[1010,0,916,0],[1011,4,917,4],[1011,13,917,13,"getPublicKey"],[1011,25,917,25,"getPublicKey"],[1011,26,917,26,"secretKey"],[1011,35,917,35],[1011,37,917,37,"isCompressed"],[1011,49,917,49],[1011,52,917,52],[1011,56,917,56],[1011,58,917,58],[1012,6,918,8],[1012,13,918,15,"Point"],[1012,18,918,20],[1012,19,918,21,"BASE"],[1012,23,918,25],[1012,24,918,26,"multiply"],[1012,32,918,34],[1012,33,918,35,"_normFnElement"],[1012,47,918,49],[1012,48,918,50,"Fn"],[1012,50,918,52],[1012,52,918,54,"secretKey"],[1012,61,918,63],[1012,62,918,64],[1012,63,918,65],[1012,64,918,66,"toBytes"],[1012,71,918,73],[1012,72,918,74,"isCompressed"],[1012,84,918,86],[1012,85,918,87],[1013,4,919,4],[1014,4,920,4],[1014,13,920,13,"keygen"],[1014,19,920,19,"keygen"],[1014,20,920,20,"seed"],[1014,24,920,24],[1014,26,920,26],[1015,6,921,8],[1015,12,921,14,"secretKey"],[1015,21,921,23],[1015,24,921,26,"randomSecretKey"],[1015,39,921,41],[1015,40,921,42,"seed"],[1015,44,921,46],[1015,45,921,47],[1016,6,922,8],[1016,13,922,15],[1017,8,922,17,"secretKey"],[1017,17,922,26],[1018,8,922,28,"publicKey"],[1018,17,922,37],[1018,19,922,39,"getPublicKey"],[1018,31,922,51],[1018,32,922,52,"secretKey"],[1018,41,922,61],[1019,6,922,63],[1019,7,922,64],[1020,4,923,4],[1021,4,924,4],[1022,0,925,0],[1023,0,926,0],[1024,4,927,4],[1024,13,927,13,"isProbPub"],[1024,22,927,22,"isProbPub"],[1024,23,927,23,"item"],[1024,27,927,27],[1024,29,927,29],[1025,6,928,8],[1025,10,928,12],[1025,17,928,19,"item"],[1025,21,928,23],[1025,26,928,28],[1025,34,928,36],[1025,36,929,12],[1025,43,929,19],[1025,48,929,24],[1026,6,930,8],[1026,10,930,12,"item"],[1026,14,930,16],[1026,26,930,28,"Point"],[1026,31,930,33],[1026,33,931,12],[1026,40,931,19],[1026,44,931,23],[1027,6,932,8],[1027,12,932,14],[1028,8,932,16,"secretKey"],[1028,17,932,25],[1029,8,932,27,"publicKey"],[1029,17,932,36],[1030,8,932,38,"publicKeyUncompressed"],[1031,6,932,60],[1031,7,932,61],[1031,10,932,64,"lengths"],[1031,17,932,71],[1032,6,933,8],[1032,10,933,12,"Fn"],[1032,12,933,14],[1032,13,933,15,"allowedLengths"],[1032,27,933,29],[1032,31,933,33,"secretKey"],[1032,40,933,42],[1032,45,933,47,"publicKey"],[1032,54,933,56],[1032,56,934,12],[1032,63,934,19,"undefined"],[1032,72,934,28],[1033,6,935,8],[1033,12,935,14,"l"],[1033,13,935,15],[1033,16,935,18],[1033,17,935,19],[1033,18,935,20],[1033,20,935,22,"utils_ts_1"],[1033,30,935,32],[1033,31,935,33,"ensureBytes"],[1033,42,935,44],[1033,44,935,46],[1033,49,935,51],[1033,51,935,53,"item"],[1033,55,935,57],[1033,56,935,58],[1033,57,935,59,"length"],[1033,63,935,65],[1034,6,936,8],[1034,13,936,15,"l"],[1034,14,936,16],[1034,19,936,21,"publicKey"],[1034,28,936,30],[1034,32,936,34,"l"],[1034,33,936,35],[1034,38,936,40,"publicKeyUncompressed"],[1034,59,936,61],[1035,4,937,4],[1036,4,938,4],[1037,0,939,0],[1038,0,940,0],[1039,0,941,0],[1040,0,942,0],[1041,0,943,0],[1042,0,944,0],[1043,0,945,0],[1044,4,946,4],[1044,13,946,13,"getSharedSecret"],[1044,28,946,28,"getSharedSecret"],[1044,29,946,29,"secretKeyA"],[1044,39,946,39],[1044,41,946,41,"publicKeyB"],[1044,51,946,51],[1044,53,946,53,"isCompressed"],[1044,65,946,65],[1044,68,946,68],[1044,72,946,72],[1044,74,946,74],[1045,6,947,8],[1045,10,947,12,"isProbPub"],[1045,19,947,21],[1045,20,947,22,"secretKeyA"],[1045,30,947,32],[1045,31,947,33],[1045,36,947,38],[1045,40,947,42],[1045,42,948,12],[1045,48,948,18],[1045,52,948,22,"Error"],[1045,57,948,27],[1045,58,948,28],[1045,89,948,59],[1045,90,948,60],[1046,6,949,8],[1046,10,949,12,"isProbPub"],[1046,19,949,21],[1046,20,949,22,"publicKeyB"],[1046,30,949,32],[1046,31,949,33],[1046,36,949,38],[1046,41,949,43],[1046,43,950,12],[1046,49,950,18],[1046,53,950,22,"Error"],[1046,58,950,27],[1046,59,950,28],[1046,90,950,59],[1046,91,950,60],[1047,6,951,8],[1047,12,951,14,"s"],[1047,13,951,15],[1047,16,951,18,"_normFnElement"],[1047,30,951,32],[1047,31,951,33,"Fn"],[1047,33,951,35],[1047,35,951,37,"secretKeyA"],[1047,45,951,47],[1047,46,951,48],[1048,6,952,8],[1048,12,952,14,"b"],[1048,13,952,15],[1048,16,952,18,"Point"],[1048,21,952,23],[1048,22,952,24,"fromHex"],[1048,29,952,31],[1048,30,952,32,"publicKeyB"],[1048,40,952,42],[1048,41,952,43],[1048,42,952,44],[1048,43,952,45],[1049,6,953,8],[1049,13,953,15,"b"],[1049,14,953,16],[1049,15,953,17,"multiply"],[1049,23,953,25],[1049,24,953,26,"s"],[1049,25,953,27],[1049,26,953,28],[1049,27,953,29,"toBytes"],[1049,34,953,36],[1049,35,953,37,"isCompressed"],[1049,47,953,49],[1049,48,953,50],[1050,4,954,4],[1051,4,955,4],[1051,10,955,10,"utils"],[1051,15,955,15],[1051,18,955,18],[1052,6,956,8,"isValidSecretKey"],[1052,22,956,24],[1053,6,957,8,"isValidPublicKey"],[1053,22,957,24],[1054,6,958,8,"randomSecretKey"],[1054,21,958,23],[1055,6,959,8],[1056,6,960,8,"isValidPrivateKey"],[1056,23,960,25],[1056,25,960,27,"isValidSecretKey"],[1056,41,960,43],[1057,6,961,8,"randomPrivateKey"],[1057,22,961,24],[1057,24,961,26,"randomSecretKey"],[1057,39,961,41],[1058,6,962,8,"normPrivateKeyToScalar"],[1058,28,962,30],[1058,30,962,33,"key"],[1058,33,962,36],[1058,37,962,41,"_normFnElement"],[1058,51,962,55],[1058,52,962,56,"Fn"],[1058,54,962,58],[1058,56,962,60,"key"],[1058,59,962,63],[1058,60,962,64],[1059,6,963,8,"precompute"],[1059,16,963,18,"precompute"],[1059,17,963,19,"windowSize"],[1059,27,963,29],[1059,30,963,32],[1059,31,963,33],[1059,33,963,35,"point"],[1059,38,963,40],[1059,41,963,43,"Point"],[1059,46,963,48],[1059,47,963,49,"BASE"],[1059,51,963,53],[1059,53,963,55],[1060,8,964,12],[1060,15,964,19,"point"],[1060,20,964,24],[1060,21,964,25,"precompute"],[1060,31,964,35],[1060,32,964,36,"windowSize"],[1060,42,964,46],[1060,44,964,48],[1060,49,964,53],[1060,50,964,54],[1061,6,965,8],[1062,4,966,4],[1062,5,966,5],[1063,4,967,4],[1063,11,967,11,"Object"],[1063,17,967,17],[1063,18,967,18,"freeze"],[1063,24,967,24],[1063,25,967,25],[1064,6,967,27,"getPublicKey"],[1064,18,967,39],[1065,6,967,41,"getSharedSecret"],[1065,21,967,56],[1066,6,967,58,"keygen"],[1066,12,967,64],[1067,6,967,66,"Point"],[1067,11,967,71],[1068,6,967,73,"utils"],[1068,11,967,78],[1069,6,967,80,"lengths"],[1070,4,967,88],[1070,5,967,89],[1070,6,967,90],[1071,2,968,0],[1072,2,969,0],[1073,0,970,0],[1074,0,971,0],[1075,0,972,0],[1076,0,973,0],[1077,0,974,0],[1078,0,975,0],[1079,0,976,0],[1080,0,977,0],[1081,0,978,0],[1082,0,979,0],[1083,0,980,0],[1084,0,981,0],[1085,0,982,0],[1086,0,983,0],[1087,0,984,0],[1088,2,985,0],[1088,11,985,9,"ecdsa"],[1088,16,985,14,"ecdsa"],[1088,17,985,15,"Point"],[1088,22,985,20],[1088,24,985,22,"hash"],[1088,28,985,26],[1088,30,985,28,"ecdsaOpts"],[1088,39,985,37],[1088,42,985,40],[1088,43,985,41],[1088,44,985,42],[1088,46,985,44],[1089,4,986,4],[1089,5,986,5],[1089,6,986,6],[1089,8,986,8,"utils_1"],[1089,15,986,15],[1089,16,986,16,"ahash"],[1089,21,986,21],[1089,23,986,23,"hash"],[1089,27,986,27],[1089,28,986,28],[1090,4,987,4],[1090,5,987,5],[1090,6,987,6],[1090,8,987,8,"utils_ts_1"],[1090,18,987,18],[1090,19,987,19,"_validateObject"],[1090,34,987,34],[1090,36,987,36,"ecdsaOpts"],[1090,45,987,45],[1090,47,987,47],[1090,48,987,48],[1090,49,987,49],[1090,51,987,51],[1091,6,988,8,"hmac"],[1091,10,988,12],[1091,12,988,14],[1091,22,988,24],[1092,6,989,8,"lowS"],[1092,10,989,12],[1092,12,989,14],[1092,21,989,23],[1093,6,990,8,"randomBytes"],[1093,17,990,19],[1093,19,990,21],[1093,29,990,31],[1094,6,991,8,"bits2int"],[1094,14,991,16],[1094,16,991,18],[1094,26,991,28],[1095,6,992,8,"bits2int_modN"],[1095,19,992,21],[1095,21,992,23],[1096,4,993,4],[1096,5,993,5],[1096,6,993,6],[1097,4,994,4],[1097,10,994,10,"randomBytes"],[1097,21,994,21],[1097,24,994,24,"ecdsaOpts"],[1097,33,994,33],[1097,34,994,34,"randomBytes"],[1097,45,994,45],[1097,49,994,49,"utils_ts_1"],[1097,59,994,59],[1097,60,994,60,"randomBytes"],[1097,71,994,71],[1098,4,995,4],[1098,10,995,10,"hmac"],[1098,14,995,14],[1098,17,995,17,"ecdsaOpts"],[1098,26,995,26],[1098,27,995,27,"hmac"],[1098,31,995,31],[1098,36,996,9],[1098,37,996,10,"key"],[1098,40,996,13],[1098,42,996,15],[1098,45,996,18,"msgs"],[1098,49,996,22],[1098,54,996,27],[1098,55,996,28],[1098,56,996,29],[1098,58,996,31,"hmac_js_1"],[1098,67,996,40],[1098,68,996,41,"hmac"],[1098,72,996,45],[1098,74,996,47,"hash"],[1098,78,996,51],[1098,80,996,53,"key"],[1098,83,996,56],[1098,85,996,58],[1098,86,996,59],[1098,87,996,60],[1098,89,996,62,"utils_ts_1"],[1098,99,996,72],[1098,100,996,73,"concatBytes"],[1098,111,996,84],[1098,113,996,86],[1098,116,996,89,"msgs"],[1098,120,996,93],[1098,121,996,94],[1098,122,996,95],[1098,123,996,96],[1099,4,997,4],[1099,10,997,10],[1100,6,997,12,"Fp"],[1100,8,997,14],[1101,6,997,16,"Fn"],[1102,4,997,19],[1102,5,997,20],[1102,8,997,23,"Point"],[1102,13,997,28],[1103,4,998,4],[1103,10,998,10],[1104,6,998,12,"ORDER"],[1104,11,998,17],[1104,13,998,19,"CURVE_ORDER"],[1104,24,998,30],[1105,6,998,32,"BITS"],[1105,10,998,36],[1105,12,998,38,"fnBits"],[1106,4,998,45],[1106,5,998,46],[1106,8,998,49,"Fn"],[1106,10,998,51],[1107,4,999,4],[1107,10,999,10],[1108,6,999,12,"keygen"],[1108,12,999,18],[1109,6,999,20,"getPublicKey"],[1109,18,999,32],[1110,6,999,34,"getSharedSecret"],[1110,21,999,49],[1111,6,999,51,"utils"],[1111,11,999,56],[1112,6,999,58,"lengths"],[1113,4,999,66],[1113,5,999,67],[1113,8,999,70,"ecdh"],[1113,12,999,74],[1113,13,999,75,"Point"],[1113,18,999,80],[1113,20,999,82,"ecdsaOpts"],[1113,29,999,91],[1113,30,999,92],[1114,4,1000,4],[1114,10,1000,10,"defaultSigOpts"],[1114,24,1000,24],[1114,27,1000,27],[1115,6,1001,8,"prehash"],[1115,13,1001,15],[1115,15,1001,17],[1115,20,1001,22],[1116,6,1002,8,"lowS"],[1116,10,1002,12],[1116,12,1002,14],[1116,19,1002,21,"ecdsaOpts"],[1116,28,1002,30],[1116,29,1002,31,"lowS"],[1116,33,1002,35],[1116,38,1002,40],[1116,47,1002,49],[1116,50,1002,52,"ecdsaOpts"],[1116,59,1002,61],[1116,60,1002,62,"lowS"],[1116,64,1002,66],[1116,67,1002,69],[1116,72,1002,74],[1117,6,1003,8,"format"],[1117,12,1003,14],[1117,14,1003,16,"undefined"],[1117,23,1003,25],[1118,6,1003,27],[1119,6,1004,8,"extraEntropy"],[1119,18,1004,20],[1119,20,1004,22],[1120,4,1005,4],[1120,5,1005,5],[1121,4,1006,4],[1121,10,1006,10,"defaultSigOpts_format"],[1121,31,1006,31],[1121,34,1006,34],[1121,43,1006,43],[1122,4,1007,4],[1122,13,1007,13,"isBiggerThanHalfOrder"],[1122,34,1007,34,"isBiggerThanHalfOrder"],[1122,35,1007,35,"number"],[1122,41,1007,41],[1122,43,1007,43],[1123,6,1008,8],[1123,12,1008,14,"HALF"],[1123,16,1008,18],[1123,19,1008,21,"CURVE_ORDER"],[1123,30,1008,32],[1123,34,1008,36,"_1n"],[1123,37,1008,39],[1124,6,1009,8],[1124,13,1009,15,"number"],[1124,19,1009,21],[1124,22,1009,24,"HALF"],[1124,26,1009,28],[1125,4,1010,4],[1126,4,1011,4],[1126,13,1011,13,"validateRS"],[1126,23,1011,23,"validateRS"],[1126,24,1011,24,"title"],[1126,29,1011,29],[1126,31,1011,31,"num"],[1126,34,1011,34],[1126,36,1011,36],[1127,6,1012,8],[1127,10,1012,12],[1127,11,1012,13,"Fn"],[1127,13,1012,15],[1127,14,1012,16,"isValidNot0"],[1127,25,1012,27],[1127,26,1012,28,"num"],[1127,29,1012,31],[1127,30,1012,32],[1127,32,1013,12],[1127,38,1013,18],[1127,42,1013,22,"Error"],[1127,47,1013,27],[1127,48,1013,28],[1127,69,1013,49,"title"],[1127,74,1013,54],[1127,108,1013,88],[1127,109,1013,89],[1128,6,1014,8],[1128,13,1014,15,"num"],[1128,16,1014,18],[1129,4,1015,4],[1130,4,1016,4],[1130,13,1016,13,"validateSigLength"],[1130,30,1016,30,"validateSigLength"],[1130,31,1016,31,"bytes"],[1130,36,1016,36],[1130,38,1016,38,"format"],[1130,44,1016,44],[1130,46,1016,46],[1131,6,1017,8,"validateSigFormat"],[1131,23,1017,25],[1131,24,1017,26,"format"],[1131,30,1017,32],[1131,31,1017,33],[1132,6,1018,8],[1132,12,1018,14,"size"],[1132,16,1018,18],[1132,19,1018,21,"lengths"],[1132,26,1018,28],[1132,27,1018,29,"signature"],[1132,36,1018,38],[1133,6,1019,8],[1133,12,1019,14,"sizer"],[1133,17,1019,19],[1133,20,1019,22,"format"],[1133,26,1019,28],[1133,31,1019,33],[1133,40,1019,42],[1133,43,1019,45,"size"],[1133,47,1019,49],[1133,50,1019,52,"format"],[1133,56,1019,58],[1133,61,1019,63],[1133,72,1019,74],[1133,75,1019,77,"size"],[1133,79,1019,81],[1133,82,1019,84],[1133,83,1019,85],[1133,86,1019,88,"undefined"],[1133,95,1019,97],[1134,6,1020,8],[1134,13,1020,15],[1134,14,1020,16],[1134,15,1020,17],[1134,17,1020,19,"utils_ts_1"],[1134,27,1020,29],[1134,28,1020,30,"_abytes2"],[1134,36,1020,38],[1134,38,1020,40,"bytes"],[1134,43,1020,45],[1134,45,1020,47,"sizer"],[1134,50,1020,52],[1134,52,1020,54],[1134,55,1020,57,"format"],[1134,61,1020,63],[1134,73,1020,75],[1134,74,1020,76],[1135,4,1021,4],[1136,4,1022,4],[1137,0,1023,0],[1138,0,1024,0],[1139,4,1025,4],[1139,10,1025,10,"Signature"],[1139,19,1025,19],[1139,20,1025,20],[1140,6,1026,8,"constructor"],[1140,17,1026,19,"constructor"],[1140,18,1026,20,"r"],[1140,19,1026,21],[1140,21,1026,23,"s"],[1140,22,1026,24],[1140,24,1026,26,"recovery"],[1140,32,1026,34],[1140,34,1026,36],[1141,8,1027,12],[1141,12,1027,16],[1141,13,1027,17,"r"],[1141,14,1027,18],[1141,17,1027,21,"validateRS"],[1141,27,1027,31],[1141,28,1027,32],[1141,31,1027,35],[1141,33,1027,37,"r"],[1141,34,1027,38],[1141,35,1027,39],[1141,36,1027,40],[1141,37,1027,41],[1142,8,1028,12],[1142,12,1028,16],[1142,13,1028,17,"s"],[1142,14,1028,18],[1142,17,1028,21,"validateRS"],[1142,27,1028,31],[1142,28,1028,32],[1142,31,1028,35],[1142,33,1028,37,"s"],[1142,34,1028,38],[1142,35,1028,39],[1142,36,1028,40],[1142,37,1028,41],[1143,8,1029,12],[1143,12,1029,16,"recovery"],[1143,20,1029,24],[1143,24,1029,28],[1143,28,1029,32],[1143,30,1030,16],[1143,34,1030,20],[1143,35,1030,21,"recovery"],[1143,43,1030,29],[1143,46,1030,32,"recovery"],[1143,54,1030,40],[1144,8,1031,12,"Object"],[1144,14,1031,18],[1144,15,1031,19,"freeze"],[1144,21,1031,25],[1144,22,1031,26],[1144,26,1031,30],[1144,27,1031,31],[1145,6,1032,8],[1146,6,1033,8],[1146,13,1033,15,"fromBytes"],[1146,22,1033,24,"fromBytes"],[1146,23,1033,25,"bytes"],[1146,28,1033,30],[1146,30,1033,32,"format"],[1146,36,1033,38],[1146,39,1033,41,"defaultSigOpts_format"],[1146,60,1033,62],[1146,62,1033,64],[1147,8,1034,12,"validateSigLength"],[1147,25,1034,29],[1147,26,1034,30,"bytes"],[1147,31,1034,35],[1147,33,1034,37,"format"],[1147,39,1034,43],[1147,40,1034,44],[1148,8,1035,12],[1148,12,1035,16,"recid"],[1148,17,1035,21],[1149,8,1036,12],[1149,12,1036,16,"format"],[1149,18,1036,22],[1149,23,1036,27],[1149,28,1036,32],[1149,30,1036,34],[1150,10,1037,16],[1150,16,1037,22],[1151,12,1037,24,"r"],[1151,13,1037,25],[1152,12,1037,27,"s"],[1153,10,1037,29],[1153,11,1037,30],[1153,14,1037,33,"exports"],[1153,21,1037,40],[1153,22,1037,41,"DER"],[1153,25,1037,44],[1153,26,1037,45,"toSig"],[1153,31,1037,50],[1153,32,1037,51],[1153,33,1037,52],[1153,34,1037,53],[1153,36,1037,55,"utils_ts_1"],[1153,46,1037,65],[1153,47,1037,66,"_abytes2"],[1153,55,1037,74],[1153,57,1037,76,"bytes"],[1153,62,1037,81],[1153,63,1037,82],[1153,64,1037,83],[1154,10,1038,16],[1154,17,1038,23],[1154,21,1038,27,"Signature"],[1154,30,1038,36],[1154,31,1038,37,"r"],[1154,32,1038,38],[1154,34,1038,40,"s"],[1154,35,1038,41],[1154,36,1038,42],[1155,8,1039,12],[1156,8,1040,12],[1156,12,1040,16,"format"],[1156,18,1040,22],[1156,23,1040,27],[1156,34,1040,38],[1156,36,1040,40],[1157,10,1041,16,"recid"],[1157,15,1041,21],[1157,18,1041,24,"bytes"],[1157,23,1041,29],[1157,24,1041,30],[1157,25,1041,31],[1157,26,1041,32],[1158,10,1042,16,"format"],[1158,16,1042,22],[1158,19,1042,25],[1158,28,1042,34],[1159,10,1043,16,"bytes"],[1159,15,1043,21],[1159,18,1043,24,"bytes"],[1159,23,1043,29],[1159,24,1043,30,"subarray"],[1159,32,1043,38],[1159,33,1043,39],[1159,34,1043,40],[1159,35,1043,41],[1160,8,1044,12],[1161,8,1045,12],[1161,14,1045,18,"L"],[1161,15,1045,19],[1161,18,1045,22,"Fn"],[1161,20,1045,24],[1161,21,1045,25,"BYTES"],[1161,26,1045,30],[1162,8,1046,12],[1162,14,1046,18,"r"],[1162,15,1046,19],[1162,18,1046,22,"bytes"],[1162,23,1046,27],[1162,24,1046,28,"subarray"],[1162,32,1046,36],[1162,33,1046,37],[1162,34,1046,38],[1162,36,1046,40,"L"],[1162,37,1046,41],[1162,38,1046,42],[1163,8,1047,12],[1163,14,1047,18,"s"],[1163,15,1047,19],[1163,18,1047,22,"bytes"],[1163,23,1047,27],[1163,24,1047,28,"subarray"],[1163,32,1047,36],[1163,33,1047,37,"L"],[1163,34,1047,38],[1163,36,1047,40,"L"],[1163,37,1047,41],[1163,40,1047,44],[1163,41,1047,45],[1163,42,1047,46],[1164,8,1048,12],[1164,15,1048,19],[1164,19,1048,23,"Signature"],[1164,28,1048,32],[1164,29,1048,33,"Fn"],[1164,31,1048,35],[1164,32,1048,36,"fromBytes"],[1164,41,1048,45],[1164,42,1048,46,"r"],[1164,43,1048,47],[1164,44,1048,48],[1164,46,1048,50,"Fn"],[1164,48,1048,52],[1164,49,1048,53,"fromBytes"],[1164,58,1048,62],[1164,59,1048,63,"s"],[1164,60,1048,64],[1164,61,1048,65],[1164,63,1048,67,"recid"],[1164,68,1048,72],[1164,69,1048,73],[1165,6,1049,8],[1166,6,1050,8],[1166,13,1050,15,"fromHex"],[1166,20,1050,22,"fromHex"],[1166,21,1050,23,"hex"],[1166,24,1050,26],[1166,26,1050,28,"format"],[1166,32,1050,34],[1166,34,1050,36],[1167,8,1051,12],[1167,15,1051,19],[1167,19,1051,23],[1167,20,1051,24,"fromBytes"],[1167,29,1051,33],[1167,30,1051,34],[1167,31,1051,35],[1167,32,1051,36],[1167,34,1051,38,"utils_ts_1"],[1167,44,1051,48],[1167,45,1051,49,"hexToBytes"],[1167,55,1051,59],[1167,57,1051,61,"hex"],[1167,60,1051,64],[1167,61,1051,65],[1167,63,1051,67,"format"],[1167,69,1051,73],[1167,70,1051,74],[1168,6,1052,8],[1169,6,1053,8,"addRecoveryBit"],[1169,20,1053,22,"addRecoveryBit"],[1169,21,1053,23,"recovery"],[1169,29,1053,31],[1169,31,1053,33],[1170,8,1054,12],[1170,15,1054,19],[1170,19,1054,23,"Signature"],[1170,28,1054,32],[1170,29,1054,33],[1170,33,1054,37],[1170,34,1054,38,"r"],[1170,35,1054,39],[1170,37,1054,41],[1170,41,1054,45],[1170,42,1054,46,"s"],[1170,43,1054,47],[1170,45,1054,49,"recovery"],[1170,53,1054,57],[1170,54,1054,58],[1171,6,1055,8],[1172,6,1056,8,"recoverPublicKey"],[1172,22,1056,24,"recoverPublicKey"],[1172,23,1056,25,"messageHash"],[1172,34,1056,36],[1172,36,1056,38],[1173,8,1057,12],[1173,14,1057,18,"FIELD_ORDER"],[1173,25,1057,29],[1173,28,1057,32,"Fp"],[1173,30,1057,34],[1173,31,1057,35,"ORDER"],[1173,36,1057,40],[1174,8,1058,12],[1174,14,1058,18],[1175,10,1058,20,"r"],[1175,11,1058,21],[1176,10,1058,23,"s"],[1176,11,1058,24],[1177,10,1058,26,"recovery"],[1177,18,1058,34],[1177,20,1058,36,"rec"],[1178,8,1058,40],[1178,9,1058,41],[1178,12,1058,44],[1178,16,1058,48],[1179,8,1059,12],[1179,12,1059,16,"rec"],[1179,15,1059,19],[1179,19,1059,23],[1179,23,1059,27],[1179,27,1059,31],[1179,28,1059,32],[1179,29,1059,33],[1179,30,1059,34],[1179,32,1059,36],[1179,33,1059,37],[1179,35,1059,39],[1179,36,1059,40],[1179,38,1059,42],[1179,39,1059,43],[1179,40,1059,44],[1179,41,1059,45,"includes"],[1179,49,1059,53],[1179,50,1059,54,"rec"],[1179,53,1059,57],[1179,54,1059,58],[1179,56,1060,16],[1179,62,1060,22],[1179,66,1060,26,"Error"],[1179,71,1060,31],[1179,72,1060,32],[1179,93,1060,53],[1179,94,1060,54],[1180,8,1061,12],[1181,8,1062,12],[1182,8,1063,12],[1183,8,1064,12],[1184,8,1065,12],[1185,8,1066,12],[1186,8,1067,12],[1187,8,1068,12],[1188,8,1069,12],[1188,14,1069,18,"hasCofactor"],[1188,25,1069,29],[1188,28,1069,32,"CURVE_ORDER"],[1188,39,1069,43],[1188,42,1069,46,"_2n"],[1188,45,1069,49],[1188,48,1069,52,"FIELD_ORDER"],[1188,59,1069,63],[1189,8,1070,12],[1189,12,1070,16,"hasCofactor"],[1189,23,1070,27],[1189,27,1070,31,"rec"],[1189,30,1070,34],[1189,33,1070,37],[1189,34,1070,38],[1189,36,1071,16],[1189,42,1071,22],[1189,46,1071,26,"Error"],[1189,51,1071,31],[1189,52,1071,32],[1189,92,1071,72],[1189,93,1071,73],[1190,8,1072,12],[1190,14,1072,18,"radj"],[1190,18,1072,22],[1190,21,1072,25,"rec"],[1190,24,1072,28],[1190,29,1072,33],[1190,30,1072,34],[1190,34,1072,38,"rec"],[1190,37,1072,41],[1190,42,1072,46],[1190,43,1072,47],[1190,46,1072,50,"r"],[1190,47,1072,51],[1190,50,1072,54,"CURVE_ORDER"],[1190,61,1072,65],[1190,64,1072,68,"r"],[1190,65,1072,69],[1191,8,1073,12],[1191,12,1073,16],[1191,13,1073,17,"Fp"],[1191,15,1073,19],[1191,16,1073,20,"isValid"],[1191,23,1073,27],[1191,24,1073,28,"radj"],[1191,28,1073,32],[1191,29,1073,33],[1191,31,1074,16],[1191,37,1074,22],[1191,41,1074,26,"Error"],[1191,46,1074,31],[1191,47,1074,32],[1191,75,1074,60],[1191,76,1074,61],[1192,8,1075,12],[1192,14,1075,18,"x"],[1192,15,1075,19],[1192,18,1075,22,"Fp"],[1192,20,1075,24],[1192,21,1075,25,"toBytes"],[1192,28,1075,32],[1192,29,1075,33,"radj"],[1192,33,1075,37],[1192,34,1075,38],[1193,8,1076,12],[1193,14,1076,18,"R"],[1193,15,1076,19],[1193,18,1076,22,"Point"],[1193,23,1076,27],[1193,24,1076,28,"fromBytes"],[1193,33,1076,37],[1193,34,1076,38],[1193,35,1076,39],[1193,36,1076,40],[1193,38,1076,42,"utils_ts_1"],[1193,48,1076,52],[1193,49,1076,53,"concatBytes"],[1193,60,1076,64],[1193,62,1076,66,"pprefix"],[1193,69,1076,73],[1193,70,1076,74],[1193,71,1076,75,"rec"],[1193,74,1076,78],[1193,77,1076,81],[1193,78,1076,82],[1193,84,1076,88],[1193,85,1076,89],[1193,86,1076,90],[1193,88,1076,92,"x"],[1193,89,1076,93],[1193,90,1076,94],[1193,91,1076,95],[1194,8,1077,12],[1194,14,1077,18,"ir"],[1194,16,1077,20],[1194,19,1077,23,"Fn"],[1194,21,1077,25],[1194,22,1077,26,"inv"],[1194,25,1077,29],[1194,26,1077,30,"radj"],[1194,30,1077,34],[1194,31,1077,35],[1194,32,1077,36],[1194,33,1077,37],[1195,8,1078,12],[1195,14,1078,18,"h"],[1195,15,1078,19],[1195,18,1078,22,"bits2int_modN"],[1195,31,1078,35],[1195,32,1078,36],[1195,33,1078,37],[1195,34,1078,38],[1195,36,1078,40,"utils_ts_1"],[1195,46,1078,50],[1195,47,1078,51,"ensureBytes"],[1195,58,1078,62],[1195,60,1078,64],[1195,69,1078,73],[1195,71,1078,75,"messageHash"],[1195,82,1078,86],[1195,83,1078,87],[1195,84,1078,88],[1195,85,1078,89],[1195,86,1078,90],[1196,8,1079,12],[1196,14,1079,18,"u1"],[1196,16,1079,20],[1196,19,1079,23,"Fn"],[1196,21,1079,25],[1196,22,1079,26,"create"],[1196,28,1079,32],[1196,29,1079,33],[1196,30,1079,34,"h"],[1196,31,1079,35],[1196,34,1079,38,"ir"],[1196,36,1079,40],[1196,37,1079,41],[1196,38,1079,42],[1196,39,1079,43],[1197,8,1080,12],[1197,14,1080,18,"u2"],[1197,16,1080,20],[1197,19,1080,23,"Fn"],[1197,21,1080,25],[1197,22,1080,26,"create"],[1197,28,1080,32],[1197,29,1080,33,"s"],[1197,30,1080,34],[1197,33,1080,37,"ir"],[1197,35,1080,39],[1197,36,1080,40],[1197,37,1080,41],[1197,38,1080,42],[1198,8,1081,12],[1199,8,1082,12],[1199,14,1082,18,"Q"],[1199,15,1082,19],[1199,18,1082,22,"Point"],[1199,23,1082,27],[1199,24,1082,28,"BASE"],[1199,28,1082,32],[1199,29,1082,33,"multiplyUnsafe"],[1199,43,1082,47],[1199,44,1082,48,"u1"],[1199,46,1082,50],[1199,47,1082,51],[1199,48,1082,52,"add"],[1199,51,1082,55],[1199,52,1082,56,"R"],[1199,53,1082,57],[1199,54,1082,58,"multiplyUnsafe"],[1199,68,1082,72],[1199,69,1082,73,"u2"],[1199,71,1082,75],[1199,72,1082,76],[1199,73,1082,77],[1200,8,1083,12],[1200,12,1083,16,"Q"],[1200,13,1083,17],[1200,14,1083,18,"is0"],[1200,17,1083,21],[1200,18,1083,22],[1200,19,1083,23],[1200,21,1084,16],[1200,27,1084,22],[1200,31,1084,26,"Error"],[1200,36,1084,31],[1200,37,1084,32],[1200,56,1084,51],[1200,57,1084,52],[1201,8,1085,12,"Q"],[1201,9,1085,13],[1201,10,1085,14,"assertValidity"],[1201,24,1085,28],[1201,25,1085,29],[1201,26,1085,30],[1202,8,1086,12],[1202,15,1086,19,"Q"],[1202,16,1086,20],[1203,6,1087,8],[1204,6,1088,8],[1205,6,1089,8,"hasHighS"],[1205,14,1089,16,"hasHighS"],[1205,15,1089,16],[1205,17,1089,19],[1206,8,1090,12],[1206,15,1090,19,"isBiggerThanHalfOrder"],[1206,36,1090,40],[1206,37,1090,41],[1206,41,1090,45],[1206,42,1090,46,"s"],[1206,43,1090,47],[1206,44,1090,48],[1207,6,1091,8],[1208,6,1092,8,"toBytes"],[1208,13,1092,15,"toBytes"],[1208,14,1092,16,"format"],[1208,20,1092,22],[1208,23,1092,25,"defaultSigOpts_format"],[1208,44,1092,46],[1208,46,1092,48],[1209,8,1093,12,"validateSigFormat"],[1209,25,1093,29],[1209,26,1093,30,"format"],[1209,32,1093,36],[1209,33,1093,37],[1210,8,1094,12],[1210,12,1094,16,"format"],[1210,18,1094,22],[1210,23,1094,27],[1210,28,1094,32],[1210,30,1095,16],[1210,37,1095,23],[1210,38,1095,24],[1210,39,1095,25],[1210,41,1095,27,"utils_ts_1"],[1210,51,1095,37],[1210,52,1095,38,"hexToBytes"],[1210,62,1095,48],[1210,64,1095,50,"exports"],[1210,71,1095,57],[1210,72,1095,58,"DER"],[1210,75,1095,61],[1210,76,1095,62,"hexFromSig"],[1210,86,1095,72],[1210,87,1095,73],[1210,91,1095,77],[1210,92,1095,78],[1210,93,1095,79],[1211,8,1096,12],[1211,14,1096,18,"r"],[1211,15,1096,19],[1211,18,1096,22,"Fn"],[1211,20,1096,24],[1211,21,1096,25,"toBytes"],[1211,28,1096,32],[1211,29,1096,33],[1211,33,1096,37],[1211,34,1096,38,"r"],[1211,35,1096,39],[1211,36,1096,40],[1212,8,1097,12],[1212,14,1097,18,"s"],[1212,15,1097,19],[1212,18,1097,22,"Fn"],[1212,20,1097,24],[1212,21,1097,25,"toBytes"],[1212,28,1097,32],[1212,29,1097,33],[1212,33,1097,37],[1212,34,1097,38,"s"],[1212,35,1097,39],[1212,36,1097,40],[1213,8,1098,12],[1213,12,1098,16,"format"],[1213,18,1098,22],[1213,23,1098,27],[1213,34,1098,38],[1213,36,1098,40],[1214,10,1099,16],[1214,14,1099,20],[1214,18,1099,24],[1214,19,1099,25,"recovery"],[1214,27,1099,33],[1214,31,1099,37],[1214,35,1099,41],[1214,37,1100,20],[1214,43,1100,26],[1214,47,1100,30,"Error"],[1214,52,1100,35],[1214,53,1100,36],[1214,83,1100,66],[1214,84,1100,67],[1215,10,1101,16],[1215,17,1101,23],[1215,18,1101,24],[1215,19,1101,25],[1215,21,1101,27,"utils_ts_1"],[1215,31,1101,37],[1215,32,1101,38,"concatBytes"],[1215,43,1101,49],[1215,45,1101,51,"Uint8Array"],[1215,55,1101,61],[1215,56,1101,62,"of"],[1215,58,1101,64],[1215,59,1101,65],[1215,63,1101,69],[1215,64,1101,70,"recovery"],[1215,72,1101,78],[1215,73,1101,79],[1215,75,1101,81,"r"],[1215,76,1101,82],[1215,78,1101,84,"s"],[1215,79,1101,85],[1215,80,1101,86],[1216,8,1102,12],[1217,8,1103,12],[1217,15,1103,19],[1217,16,1103,20],[1217,17,1103,21],[1217,19,1103,23,"utils_ts_1"],[1217,29,1103,33],[1217,30,1103,34,"concatBytes"],[1217,41,1103,45],[1217,43,1103,47,"r"],[1217,44,1103,48],[1217,46,1103,50,"s"],[1217,47,1103,51],[1217,48,1103,52],[1218,6,1104,8],[1219,6,1105,8,"toHex"],[1219,11,1105,13,"toHex"],[1219,12,1105,14,"format"],[1219,18,1105,20],[1219,20,1105,22],[1220,8,1106,12],[1220,15,1106,19],[1220,16,1106,20],[1220,17,1106,21],[1220,19,1106,23,"utils_ts_1"],[1220,29,1106,33],[1220,30,1106,34,"bytesToHex"],[1220,40,1106,44],[1220,42,1106,46],[1220,46,1106,50],[1220,47,1106,51,"toBytes"],[1220,54,1106,58],[1220,55,1106,59,"format"],[1220,61,1106,65],[1220,62,1106,66],[1220,63,1106,67],[1221,6,1107,8],[1222,6,1108,8],[1223,6,1109,8,"assertValidity"],[1223,20,1109,22,"assertValidity"],[1223,21,1109,22],[1223,23,1109,25],[1223,24,1109,27],[1224,6,1110,8],[1224,13,1110,15,"fromCompact"],[1224,24,1110,26,"fromCompact"],[1224,25,1110,27,"hex"],[1224,28,1110,30],[1224,30,1110,32],[1225,8,1111,12],[1225,15,1111,19,"Signature"],[1225,24,1111,28],[1225,25,1111,29,"fromBytes"],[1225,34,1111,38],[1225,35,1111,39],[1225,36,1111,40],[1225,37,1111,41],[1225,39,1111,43,"utils_ts_1"],[1225,49,1111,53],[1225,50,1111,54,"ensureBytes"],[1225,61,1111,65],[1225,63,1111,67],[1225,68,1111,72],[1225,70,1111,74,"hex"],[1225,73,1111,77],[1225,74,1111,78],[1225,76,1111,80],[1225,85,1111,89],[1225,86,1111,90],[1226,6,1112,8],[1227,6,1113,8],[1227,13,1113,15,"fromDER"],[1227,20,1113,22,"fromDER"],[1227,21,1113,23,"hex"],[1227,24,1113,26],[1227,26,1113,28],[1228,8,1114,12],[1228,15,1114,19,"Signature"],[1228,24,1114,28],[1228,25,1114,29,"fromBytes"],[1228,34,1114,38],[1228,35,1114,39],[1228,36,1114,40],[1228,37,1114,41],[1228,39,1114,43,"utils_ts_1"],[1228,49,1114,53],[1228,50,1114,54,"ensureBytes"],[1228,61,1114,65],[1228,63,1114,67],[1228,68,1114,72],[1228,70,1114,74,"hex"],[1228,73,1114,77],[1228,74,1114,78],[1228,76,1114,80],[1228,81,1114,85],[1228,82,1114,86],[1229,6,1115,8],[1230,6,1116,8,"normalizeS"],[1230,16,1116,18,"normalizeS"],[1230,17,1116,18],[1230,19,1116,21],[1231,8,1117,12],[1231,15,1117,19],[1231,19,1117,23],[1231,20,1117,24,"hasHighS"],[1231,28,1117,32],[1231,29,1117,33],[1231,30,1117,34],[1231,33,1117,37],[1231,37,1117,41,"Signature"],[1231,46,1117,50],[1231,47,1117,51],[1231,51,1117,55],[1231,52,1117,56,"r"],[1231,53,1117,57],[1231,55,1117,59,"Fn"],[1231,57,1117,61],[1231,58,1117,62,"neg"],[1231,61,1117,65],[1231,62,1117,66],[1231,66,1117,70],[1231,67,1117,71,"s"],[1231,68,1117,72],[1231,69,1117,73],[1231,71,1117,75],[1231,75,1117,79],[1231,76,1117,80,"recovery"],[1231,84,1117,88],[1231,85,1117,89],[1231,88,1117,92],[1231,92,1117,96],[1232,6,1118,8],[1233,6,1119,8,"toDERRawBytes"],[1233,19,1119,21,"toDERRawBytes"],[1233,20,1119,21],[1233,22,1119,24],[1234,8,1120,12],[1234,15,1120,19],[1234,19,1120,23],[1234,20,1120,24,"toBytes"],[1234,27,1120,31],[1234,28,1120,32],[1234,33,1120,37],[1234,34,1120,38],[1235,6,1121,8],[1236,6,1122,8,"toDERHex"],[1236,14,1122,16,"toDERHex"],[1236,15,1122,16],[1236,17,1122,19],[1237,8,1123,12],[1237,15,1123,19],[1237,16,1123,20],[1237,17,1123,21],[1237,19,1123,23,"utils_ts_1"],[1237,29,1123,33],[1237,30,1123,34,"bytesToHex"],[1237,40,1123,44],[1237,42,1123,46],[1237,46,1123,50],[1237,47,1123,51,"toBytes"],[1237,54,1123,58],[1237,55,1123,59],[1237,60,1123,64],[1237,61,1123,65],[1237,62,1123,66],[1238,6,1124,8],[1239,6,1125,8,"toCompactRawBytes"],[1239,23,1125,25,"toCompactRawBytes"],[1239,24,1125,25],[1239,26,1125,28],[1240,8,1126,12],[1240,15,1126,19],[1240,19,1126,23],[1240,20,1126,24,"toBytes"],[1240,27,1126,31],[1240,28,1126,32],[1240,37,1126,41],[1240,38,1126,42],[1241,6,1127,8],[1242,6,1128,8,"toCompactHex"],[1242,18,1128,20,"toCompactHex"],[1242,19,1128,20],[1242,21,1128,23],[1243,8,1129,12],[1243,15,1129,19],[1243,16,1129,20],[1243,17,1129,21],[1243,19,1129,23,"utils_ts_1"],[1243,29,1129,33],[1243,30,1129,34,"bytesToHex"],[1243,40,1129,44],[1243,42,1129,46],[1243,46,1129,50],[1243,47,1129,51,"toBytes"],[1243,54,1129,58],[1243,55,1129,59],[1243,64,1129,68],[1243,65,1129,69],[1243,66,1129,70],[1244,6,1130,8],[1245,4,1131,4],[1246,4,1132,4],[1247,4,1133,4],[1248,4,1134,4],[1249,4,1135,4],[1250,4,1136,4],[1250,10,1136,10,"bits2int"],[1250,18,1136,18],[1250,21,1136,21,"ecdsaOpts"],[1250,30,1136,30],[1250,31,1136,31,"bits2int"],[1250,39,1136,39],[1250,43,1137,8],[1250,52,1137,17,"bits2int_def"],[1250,64,1137,29,"bits2int_def"],[1250,65,1137,30,"bytes"],[1250,70,1137,35],[1250,72,1137,37],[1251,6,1138,12],[1252,6,1139,12],[1252,10,1139,16,"bytes"],[1252,15,1139,21],[1252,16,1139,22,"length"],[1252,22,1139,28],[1252,25,1139,31],[1252,29,1139,35],[1252,31,1140,16],[1252,37,1140,22],[1252,41,1140,26,"Error"],[1252,46,1140,31],[1252,47,1140,32],[1252,67,1140,52],[1252,68,1140,53],[1253,6,1141,12],[1254,6,1142,12],[1255,6,1143,12],[1255,12,1143,18,"num"],[1255,15,1143,21],[1255,18,1143,24],[1255,19,1143,25],[1255,20,1143,26],[1255,22,1143,28,"utils_ts_1"],[1255,32,1143,38],[1255,33,1143,39,"bytesToNumberBE"],[1255,48,1143,54],[1255,50,1143,56,"bytes"],[1255,55,1143,61],[1255,56,1143,62],[1255,57,1143,63],[1255,58,1143,64],[1256,6,1144,12],[1256,12,1144,18,"delta"],[1256,17,1144,23],[1256,20,1144,26,"bytes"],[1256,25,1144,31],[1256,26,1144,32,"length"],[1256,32,1144,38],[1256,35,1144,41],[1256,36,1144,42],[1256,39,1144,45,"fnBits"],[1256,45,1144,51],[1256,46,1144,52],[1256,47,1144,53],[1257,6,1145,12],[1257,13,1145,19,"delta"],[1257,18,1145,24],[1257,21,1145,27],[1257,22,1145,28],[1257,25,1145,31,"num"],[1257,28,1145,34],[1257,32,1145,38,"BigInt"],[1257,38,1145,44],[1257,39,1145,45,"delta"],[1257,44,1145,50],[1257,45,1145,51],[1257,48,1145,54,"num"],[1257,51,1145,57],[1258,4,1146,8],[1258,5,1146,9],[1259,4,1147,4],[1259,10,1147,10,"bits2int_modN"],[1259,23,1147,23],[1259,26,1147,26,"ecdsaOpts"],[1259,35,1147,35],[1259,36,1147,36,"bits2int_modN"],[1259,49,1147,49],[1259,53,1148,8],[1259,62,1148,17,"bits2int_modN_def"],[1259,79,1148,34,"bits2int_modN_def"],[1259,80,1148,35,"bytes"],[1259,85,1148,40],[1259,87,1148,42],[1260,6,1149,12],[1260,13,1149,19,"Fn"],[1260,15,1149,21],[1260,16,1149,22,"create"],[1260,22,1149,28],[1260,23,1149,29,"bits2int"],[1260,31,1149,37],[1260,32,1149,38,"bytes"],[1260,37,1149,43],[1260,38,1149,44],[1260,39,1149,45],[1260,40,1149,46],[1260,41,1149,47],[1261,4,1150,8],[1261,5,1150,9],[1262,4,1151,4],[1263,4,1152,4],[1263,10,1152,10,"ORDER_MASK"],[1263,20,1152,20],[1263,23,1152,23],[1263,24,1152,24],[1263,25,1152,25],[1263,27,1152,27,"utils_ts_1"],[1263,37,1152,37],[1263,38,1152,38,"bitMask"],[1263,45,1152,45],[1263,47,1152,47,"fnBits"],[1263,53,1152,53],[1263,54,1152,54],[1264,4,1153,4],[1265,4,1154,4],[1265,13,1154,13,"int2octets"],[1265,23,1154,23,"int2octets"],[1265,24,1154,24,"num"],[1265,27,1154,27],[1265,29,1154,29],[1266,6,1155,8],[1267,6,1156,8],[1267,7,1156,9],[1267,8,1156,10],[1267,10,1156,12,"utils_ts_1"],[1267,20,1156,22],[1267,21,1156,23,"aInRange"],[1267,29,1156,31],[1267,31,1156,33],[1267,41,1156,43],[1267,44,1156,46,"fnBits"],[1267,50,1156,52],[1267,52,1156,54,"num"],[1267,55,1156,57],[1267,57,1156,59,"_0n"],[1267,60,1156,62],[1267,62,1156,64,"ORDER_MASK"],[1267,72,1156,74],[1267,73,1156,75],[1268,6,1157,8],[1268,13,1157,15,"Fn"],[1268,15,1157,17],[1268,16,1157,18,"toBytes"],[1268,23,1157,25],[1268,24,1157,26,"num"],[1268,27,1157,29],[1268,28,1157,30],[1269,4,1158,4],[1270,4,1159,4],[1270,13,1159,13,"validateMsgAndHash"],[1270,31,1159,31,"validateMsgAndHash"],[1270,32,1159,32,"message"],[1270,39,1159,39],[1270,41,1159,41,"prehash"],[1270,48,1159,48],[1270,50,1159,50],[1271,6,1160,8],[1271,7,1160,9],[1271,8,1160,10],[1271,10,1160,12,"utils_ts_1"],[1271,20,1160,22],[1271,21,1160,23,"_abytes2"],[1271,29,1160,31],[1271,31,1160,33,"message"],[1271,38,1160,40],[1271,40,1160,42,"undefined"],[1271,49,1160,51],[1271,51,1160,53],[1271,60,1160,62],[1271,61,1160,63],[1272,6,1161,8],[1272,13,1161,15,"prehash"],[1272,20,1161,22],[1272,23,1161,25],[1272,24,1161,26],[1272,25,1161,27],[1272,27,1161,29,"utils_ts_1"],[1272,37,1161,39],[1272,38,1161,40,"_abytes2"],[1272,46,1161,48],[1272,48,1161,50,"hash"],[1272,52,1161,54],[1272,53,1161,55,"message"],[1272,60,1161,62],[1272,61,1161,63],[1272,63,1161,65,"undefined"],[1272,72,1161,74],[1272,74,1161,76],[1272,93,1161,95],[1272,94,1161,96],[1272,97,1161,99,"message"],[1272,104,1161,106],[1273,4,1162,4],[1274,4,1163,4],[1275,0,1164,0],[1276,0,1165,0],[1277,0,1166,0],[1278,0,1167,0],[1279,0,1168,0],[1280,0,1169,0],[1281,0,1170,0],[1282,4,1171,4],[1282,13,1171,13,"prepSig"],[1282,20,1171,20,"prepSig"],[1282,21,1171,21,"message"],[1282,28,1171,28],[1282,30,1171,30,"privateKey"],[1282,40,1171,40],[1282,42,1171,42,"opts"],[1282,46,1171,46],[1282,48,1171,48],[1283,6,1172,8],[1283,10,1172,12],[1283,11,1172,13],[1283,22,1172,24],[1283,24,1172,26],[1283,35,1172,37],[1283,36,1172,38],[1283,37,1172,39,"some"],[1283,41,1172,43],[1283,42,1172,45,"k"],[1283,43,1172,46],[1283,47,1172,51,"k"],[1283,48,1172,52],[1283,52,1172,56,"opts"],[1283,56,1172,60],[1283,57,1172,61],[1283,59,1173,12],[1283,65,1173,18],[1283,69,1173,22,"Error"],[1283,74,1173,27],[1283,75,1173,28],[1283,112,1173,65],[1283,113,1173,66],[1284,6,1174,8],[1284,12,1174,14],[1285,8,1174,16,"lowS"],[1285,12,1174,20],[1286,8,1174,22,"prehash"],[1286,15,1174,29],[1287,8,1174,31,"extraEntropy"],[1288,6,1174,44],[1288,7,1174,45],[1288,10,1174,48,"validateSigOpts"],[1288,25,1174,63],[1288,26,1174,64,"opts"],[1288,30,1174,68],[1288,32,1174,70,"defaultSigOpts"],[1288,46,1174,84],[1288,47,1174,85],[1289,6,1175,8,"message"],[1289,13,1175,15],[1289,16,1175,18,"validateMsgAndHash"],[1289,34,1175,36],[1289,35,1175,37,"message"],[1289,42,1175,44],[1289,44,1175,46,"prehash"],[1289,51,1175,53],[1289,52,1175,54],[1289,53,1175,55],[1289,54,1175,56],[1290,6,1176,8],[1291,6,1177,8],[1292,6,1178,8],[1293,6,1179,8],[1293,12,1179,14,"h1int"],[1293,17,1179,19],[1293,20,1179,22,"bits2int_modN"],[1293,33,1179,35],[1293,34,1179,36,"message"],[1293,41,1179,43],[1293,42,1179,44],[1294,6,1180,8],[1294,12,1180,14,"d"],[1294,13,1180,15],[1294,16,1180,18,"_normFnElement"],[1294,30,1180,32],[1294,31,1180,33,"Fn"],[1294,33,1180,35],[1294,35,1180,37,"privateKey"],[1294,45,1180,47],[1294,46,1180,48],[1294,47,1180,49],[1294,48,1180,50],[1295,6,1181,8],[1295,12,1181,14,"seedArgs"],[1295,20,1181,22],[1295,23,1181,25],[1295,24,1181,26,"int2octets"],[1295,34,1181,36],[1295,35,1181,37,"d"],[1295,36,1181,38],[1295,37,1181,39],[1295,39,1181,41,"int2octets"],[1295,49,1181,51],[1295,50,1181,52,"h1int"],[1295,55,1181,57],[1295,56,1181,58],[1295,57,1181,59],[1296,6,1182,8],[1297,6,1183,8],[1297,10,1183,12,"extraEntropy"],[1297,22,1183,24],[1297,26,1183,28],[1297,30,1183,32],[1297,34,1183,36,"extraEntropy"],[1297,46,1183,48],[1297,51,1183,53],[1297,56,1183,58],[1297,58,1183,60],[1298,8,1184,12],[1299,8,1185,12],[1300,8,1186,12],[1300,14,1186,18,"e"],[1300,15,1186,19],[1300,18,1186,22,"extraEntropy"],[1300,30,1186,34],[1300,35,1186,39],[1300,39,1186,43],[1300,42,1186,46,"randomBytes"],[1300,53,1186,57],[1300,54,1186,58,"lengths"],[1300,61,1186,65],[1300,62,1186,66,"secretKey"],[1300,71,1186,75],[1300,72,1186,76],[1300,75,1186,79,"extraEntropy"],[1300,87,1186,91],[1301,8,1187,12,"seedArgs"],[1301,16,1187,20],[1301,17,1187,21,"push"],[1301,21,1187,25],[1301,22,1187,26],[1301,23,1187,27],[1301,24,1187,28],[1301,26,1187,30,"utils_ts_1"],[1301,36,1187,40],[1301,37,1187,41,"ensureBytes"],[1301,48,1187,52],[1301,50,1187,54],[1301,64,1187,68],[1301,66,1187,70,"e"],[1301,67,1187,71],[1301,68,1187,72],[1301,69,1187,73],[1301,70,1187,74],[1301,71,1187,75],[1302,6,1188,8],[1303,6,1189,8],[1303,12,1189,14,"seed"],[1303,16,1189,18],[1303,19,1189,21],[1303,20,1189,22],[1303,21,1189,23],[1303,23,1189,25,"utils_ts_1"],[1303,33,1189,35],[1303,34,1189,36,"concatBytes"],[1303,45,1189,47],[1303,47,1189,49],[1303,50,1189,52,"seedArgs"],[1303,58,1189,60],[1303,59,1189,61],[1303,60,1189,62],[1303,61,1189,63],[1304,6,1190,8],[1304,12,1190,14,"m"],[1304,13,1190,15],[1304,16,1190,18,"h1int"],[1304,21,1190,23],[1304,22,1190,24],[1304,23,1190,25],[1305,6,1191,8],[1306,6,1192,8],[1307,6,1193,8],[1308,6,1194,8],[1309,6,1195,8],[1310,6,1196,8],[1311,6,1197,8],[1312,6,1198,8],[1313,6,1199,8],[1313,15,1199,17,"k2sig"],[1313,20,1199,22,"k2sig"],[1313,21,1199,23,"kBytes"],[1313,27,1199,29],[1313,29,1199,31],[1314,8,1200,12],[1315,8,1201,12],[1316,8,1202,12],[1316,14,1202,18,"k"],[1316,15,1202,19],[1316,18,1202,22,"bits2int"],[1316,26,1202,30],[1316,27,1202,31,"kBytes"],[1316,33,1202,37],[1316,34,1202,38],[1316,35,1202,39],[1316,36,1202,40],[1317,8,1203,12],[1317,12,1203,16],[1317,13,1203,17,"Fn"],[1317,15,1203,19],[1317,16,1203,20,"isValidNot0"],[1317,27,1203,31],[1317,28,1203,32,"k"],[1317,29,1203,33],[1317,30,1203,34],[1317,32,1204,16],[1317,39,1204,23],[1317,40,1204,24],[1318,8,1205,12],[1318,14,1205,18,"ik"],[1318,16,1205,20],[1318,19,1205,23,"Fn"],[1318,21,1205,25],[1318,22,1205,26,"inv"],[1318,25,1205,29],[1318,26,1205,30,"k"],[1318,27,1205,31],[1318,28,1205,32],[1318,29,1205,33],[1318,30,1205,34],[1319,8,1206,12],[1319,14,1206,18,"q"],[1319,15,1206,19],[1319,18,1206,22,"Point"],[1319,23,1206,27],[1319,24,1206,28,"BASE"],[1319,28,1206,32],[1319,29,1206,33,"multiply"],[1319,37,1206,41],[1319,38,1206,42,"k"],[1319,39,1206,43],[1319,40,1206,44],[1319,41,1206,45,"toAffine"],[1319,49,1206,53],[1319,50,1206,54],[1319,51,1206,55],[1319,52,1206,56],[1319,53,1206,57],[1320,8,1207,12],[1320,14,1207,18,"r"],[1320,15,1207,19],[1320,18,1207,22,"Fn"],[1320,20,1207,24],[1320,21,1207,25,"create"],[1320,27,1207,31],[1320,28,1207,32,"q"],[1320,29,1207,33],[1320,30,1207,34,"x"],[1320,31,1207,35],[1320,32,1207,36],[1320,33,1207,37],[1320,34,1207,38],[1321,8,1208,12],[1321,12,1208,16,"r"],[1321,13,1208,17],[1321,18,1208,22,"_0n"],[1321,21,1208,25],[1321,23,1209,16],[1322,8,1210,12],[1322,14,1210,18,"s"],[1322,15,1210,19],[1322,18,1210,22,"Fn"],[1322,20,1210,24],[1322,21,1210,25,"create"],[1322,27,1210,31],[1322,28,1210,32,"ik"],[1322,30,1210,34],[1322,33,1210,37,"Fn"],[1322,35,1210,39],[1322,36,1210,40,"create"],[1322,42,1210,46],[1322,43,1210,47,"m"],[1322,44,1210,48],[1322,47,1210,51,"r"],[1322,48,1210,52],[1322,51,1210,55,"d"],[1322,52,1210,56],[1322,53,1210,57],[1322,54,1210,58],[1322,55,1210,59],[1322,56,1210,60],[1323,8,1211,12],[1323,12,1211,16,"s"],[1323,13,1211,17],[1323,18,1211,22,"_0n"],[1323,21,1211,25],[1323,23,1212,16],[1324,8,1213,12],[1324,12,1213,16,"recovery"],[1324,20,1213,24],[1324,23,1213,27],[1324,24,1213,28,"q"],[1324,25,1213,29],[1324,26,1213,30,"x"],[1324,27,1213,31],[1324,32,1213,36,"r"],[1324,33,1213,37],[1324,36,1213,40],[1324,37,1213,41],[1324,40,1213,44],[1324,41,1213,45],[1324,45,1213,49,"Number"],[1324,51,1213,55],[1324,52,1213,56,"q"],[1324,53,1213,57],[1324,54,1213,58,"y"],[1324,55,1213,59],[1324,58,1213,62,"_1n"],[1324,61,1213,65],[1324,62,1213,66],[1324,63,1213,67],[1324,64,1213,68],[1325,8,1214,12],[1325,12,1214,16,"normS"],[1325,17,1214,21],[1325,20,1214,24,"s"],[1325,21,1214,25],[1326,8,1215,12],[1326,12,1215,16,"lowS"],[1326,16,1215,20],[1326,20,1215,24,"isBiggerThanHalfOrder"],[1326,41,1215,45],[1326,42,1215,46,"s"],[1326,43,1215,47],[1326,44,1215,48],[1326,46,1215,50],[1327,10,1216,16,"normS"],[1327,15,1216,21],[1327,18,1216,24,"Fn"],[1327,20,1216,26],[1327,21,1216,27,"neg"],[1327,24,1216,30],[1327,25,1216,31,"s"],[1327,26,1216,32],[1327,27,1216,33],[1327,28,1216,34],[1327,29,1216,35],[1328,10,1217,16,"recovery"],[1328,18,1217,24],[1328,22,1217,28],[1328,23,1217,29],[1328,24,1217,30],[1328,25,1217,31],[1329,8,1218,12],[1330,8,1219,12],[1330,15,1219,19],[1330,19,1219,23,"Signature"],[1330,28,1219,32],[1330,29,1219,33,"r"],[1330,30,1219,34],[1330,32,1219,36,"normS"],[1330,37,1219,41],[1330,39,1219,43,"recovery"],[1330,47,1219,51],[1330,48,1219,52],[1330,49,1219,53],[1330,50,1219,54],[1331,6,1220,8],[1332,6,1221,8],[1332,13,1221,15],[1333,8,1221,17,"seed"],[1333,12,1221,21],[1334,8,1221,23,"k2sig"],[1335,6,1221,29],[1335,7,1221,30],[1336,4,1222,4],[1337,4,1223,4],[1338,0,1224,0],[1339,0,1225,0],[1340,0,1226,0],[1341,0,1227,0],[1342,0,1228,0],[1343,0,1229,0],[1344,0,1230,0],[1345,0,1231,0],[1346,0,1232,0],[1347,0,1233,0],[1348,4,1234,4],[1348,13,1234,13,"sign"],[1348,17,1234,17,"sign"],[1348,18,1234,18,"message"],[1348,25,1234,25],[1348,27,1234,27,"secretKey"],[1348,36,1234,36],[1348,38,1234,38,"opts"],[1348,42,1234,42],[1348,45,1234,45],[1348,46,1234,46],[1348,47,1234,47],[1348,49,1234,49],[1349,6,1235,8,"message"],[1349,13,1235,15],[1349,16,1235,18],[1349,17,1235,19],[1349,18,1235,20],[1349,20,1235,22,"utils_ts_1"],[1349,30,1235,32],[1349,31,1235,33,"ensureBytes"],[1349,42,1235,44],[1349,44,1235,46],[1349,53,1235,55],[1349,55,1235,57,"message"],[1349,62,1235,64],[1349,63,1235,65],[1350,6,1236,8],[1350,12,1236,14],[1351,8,1236,16,"seed"],[1351,12,1236,20],[1352,8,1236,22,"k2sig"],[1353,6,1236,28],[1353,7,1236,29],[1353,10,1236,32,"prepSig"],[1353,17,1236,39],[1353,18,1236,40,"message"],[1353,25,1236,47],[1353,27,1236,49,"secretKey"],[1353,36,1236,58],[1353,38,1236,60,"opts"],[1353,42,1236,64],[1353,43,1236,65],[1353,44,1236,66],[1353,45,1236,67],[1354,6,1237,8],[1354,12,1237,14,"drbg"],[1354,16,1237,18],[1354,19,1237,21],[1354,20,1237,22],[1354,21,1237,23],[1354,23,1237,25,"utils_ts_1"],[1354,33,1237,35],[1354,34,1237,36,"createHmacDrbg"],[1354,48,1237,50],[1354,50,1237,52,"hash"],[1354,54,1237,56],[1354,55,1237,57,"outputLen"],[1354,64,1237,66],[1354,66,1237,68,"Fn"],[1354,68,1237,70],[1354,69,1237,71,"BYTES"],[1354,74,1237,76],[1354,76,1237,78,"hmac"],[1354,80,1237,82],[1354,81,1237,83],[1355,6,1238,8],[1355,12,1238,14,"sig"],[1355,15,1238,17],[1355,18,1238,20,"drbg"],[1355,22,1238,24],[1355,23,1238,25,"seed"],[1355,27,1238,29],[1355,29,1238,31,"k2sig"],[1355,34,1238,36],[1355,35,1238,37],[1355,36,1238,38],[1355,37,1238,39],[1356,6,1239,8],[1356,13,1239,15,"sig"],[1356,16,1239,18],[1357,4,1240,4],[1358,4,1241,4],[1358,13,1241,13,"tryParsingSig"],[1358,26,1241,26,"tryParsingSig"],[1358,27,1241,27,"sg"],[1358,29,1241,29],[1358,31,1241,31],[1359,6,1242,8],[1360,6,1243,8],[1360,10,1243,12,"sig"],[1360,13,1243,15],[1360,16,1243,18,"undefined"],[1360,25,1243,27],[1361,6,1244,8],[1361,12,1244,14,"isHex"],[1361,17,1244,19],[1361,20,1244,22],[1361,27,1244,29,"sg"],[1361,29,1244,31],[1361,34,1244,36],[1361,42,1244,44],[1361,46,1244,48],[1361,47,1244,49],[1361,48,1244,50],[1361,50,1244,52,"utils_ts_1"],[1361,60,1244,62],[1361,61,1244,63,"isBytes"],[1361,68,1244,70],[1361,70,1244,72,"sg"],[1361,72,1244,74],[1361,73,1244,75],[1362,6,1245,8],[1362,12,1245,14,"isObj"],[1362,17,1245,19],[1362,20,1245,22],[1362,21,1245,23,"isHex"],[1362,26,1245,28],[1362,30,1246,12,"sg"],[1362,32,1246,14],[1362,37,1246,19],[1362,41,1246,23],[1362,45,1247,12],[1362,52,1247,19,"sg"],[1362,54,1247,21],[1362,59,1247,26],[1362,67,1247,34],[1362,71,1248,12],[1362,78,1248,19,"sg"],[1362,80,1248,21],[1362,81,1248,22,"r"],[1362,82,1248,23],[1362,87,1248,28],[1362,95,1248,36],[1362,99,1249,12],[1362,106,1249,19,"sg"],[1362,108,1249,21],[1362,109,1249,22,"s"],[1362,110,1249,23],[1362,115,1249,28],[1362,123,1249,36],[1363,6,1250,8],[1363,10,1250,12],[1363,11,1250,13,"isHex"],[1363,16,1250,18],[1363,20,1250,22],[1363,21,1250,23,"isObj"],[1363,26,1250,28],[1363,28,1251,12],[1363,34,1251,18],[1363,38,1251,22,"Error"],[1363,43,1251,27],[1363,44,1251,28],[1363,118,1251,102],[1363,119,1251,103],[1364,6,1252,8],[1364,10,1252,12,"isObj"],[1364,15,1252,17],[1364,17,1252,19],[1365,8,1253,12,"sig"],[1365,11,1253,15],[1365,14,1253,18],[1365,18,1253,22,"Signature"],[1365,27,1253,31],[1365,28,1253,32,"sg"],[1365,30,1253,34],[1365,31,1253,35,"r"],[1365,32,1253,36],[1365,34,1253,38,"sg"],[1365,36,1253,40],[1365,37,1253,41,"s"],[1365,38,1253,42],[1365,39,1253,43],[1366,6,1254,8],[1366,7,1254,9],[1366,13,1255,13],[1366,17,1255,17,"isHex"],[1366,22,1255,22],[1366,24,1255,24],[1367,8,1256,12],[1367,12,1256,16],[1368,10,1257,16,"sig"],[1368,13,1257,19],[1368,16,1257,22,"Signature"],[1368,25,1257,31],[1368,26,1257,32,"fromBytes"],[1368,35,1257,41],[1368,36,1257,42],[1368,37,1257,43],[1368,38,1257,44],[1368,40,1257,46,"utils_ts_1"],[1368,50,1257,56],[1368,51,1257,57,"ensureBytes"],[1368,62,1257,68],[1368,64,1257,70],[1368,69,1257,75],[1368,71,1257,77,"sg"],[1368,73,1257,79],[1368,74,1257,80],[1368,76,1257,82],[1368,81,1257,87],[1368,82,1257,88],[1369,8,1258,12],[1369,9,1258,13],[1369,10,1259,12],[1369,17,1259,19,"derError"],[1369,25,1259,27],[1369,27,1259,29],[1370,10,1260,16],[1370,14,1260,20],[1370,16,1260,22,"derError"],[1370,24,1260,30],[1370,36,1260,42,"exports"],[1370,43,1260,49],[1370,44,1260,50,"DER"],[1370,47,1260,53],[1370,48,1260,54,"Err"],[1370,51,1260,57],[1370,52,1260,58],[1370,54,1261,20],[1370,60,1261,26,"derError"],[1370,68,1261,34],[1371,8,1262,12],[1372,8,1263,12],[1372,12,1263,16],[1372,13,1263,17,"sig"],[1372,16,1263,20],[1372,18,1263,22],[1373,10,1264,16],[1373,14,1264,20],[1374,12,1265,20,"sig"],[1374,15,1265,23],[1374,18,1265,26,"Signature"],[1374,27,1265,35],[1374,28,1265,36,"fromBytes"],[1374,37,1265,45],[1374,38,1265,46],[1374,39,1265,47],[1374,40,1265,48],[1374,42,1265,50,"utils_ts_1"],[1374,52,1265,60],[1374,53,1265,61,"ensureBytes"],[1374,64,1265,72],[1374,66,1265,74],[1374,71,1265,79],[1374,73,1265,81,"sg"],[1374,75,1265,83],[1374,76,1265,84],[1374,78,1265,86],[1374,87,1265,95],[1374,88,1265,96],[1375,10,1266,16],[1375,11,1266,17],[1375,12,1267,16],[1375,19,1267,23,"error"],[1375,24,1267,28],[1375,26,1267,30],[1376,12,1268,20],[1376,19,1268,27],[1376,24,1268,32],[1377,10,1269,16],[1378,8,1270,12],[1379,6,1271,8],[1380,6,1272,8],[1380,10,1272,12],[1380,11,1272,13,"sig"],[1380,14,1272,16],[1380,16,1273,12],[1380,23,1273,19],[1380,28,1273,24],[1381,6,1274,8],[1381,13,1274,15,"sig"],[1381,16,1274,18],[1382,4,1275,4],[1383,4,1276,4],[1384,0,1277,0],[1385,0,1278,0],[1386,0,1279,0],[1387,0,1280,0],[1388,0,1281,0],[1389,0,1282,0],[1390,0,1283,0],[1391,0,1284,0],[1392,0,1285,0],[1393,0,1286,0],[1394,0,1287,0],[1395,0,1288,0],[1396,4,1289,4],[1396,13,1289,13,"verify"],[1396,19,1289,19,"verify"],[1396,20,1289,20,"signature"],[1396,29,1289,29],[1396,31,1289,31,"message"],[1396,38,1289,38],[1396,40,1289,40,"publicKey"],[1396,49,1289,49],[1396,51,1289,51,"opts"],[1396,55,1289,55],[1396,58,1289,58],[1396,59,1289,59],[1396,60,1289,60],[1396,62,1289,62],[1397,6,1290,8],[1397,12,1290,14],[1398,8,1290,16,"lowS"],[1398,12,1290,20],[1399,8,1290,22,"prehash"],[1399,15,1290,29],[1400,8,1290,31,"format"],[1401,6,1290,38],[1401,7,1290,39],[1401,10,1290,42,"validateSigOpts"],[1401,25,1290,57],[1401,26,1290,58,"opts"],[1401,30,1290,62],[1401,32,1290,64,"defaultSigOpts"],[1401,46,1290,78],[1401,47,1290,79],[1402,6,1291,8,"publicKey"],[1402,15,1291,17],[1402,18,1291,20],[1402,19,1291,21],[1402,20,1291,22],[1402,22,1291,24,"utils_ts_1"],[1402,32,1291,34],[1402,33,1291,35,"ensureBytes"],[1402,44,1291,46],[1402,46,1291,48],[1402,57,1291,59],[1402,59,1291,61,"publicKey"],[1402,68,1291,70],[1402,69,1291,71],[1403,6,1292,8,"message"],[1403,13,1292,15],[1403,16,1292,18,"validateMsgAndHash"],[1403,34,1292,36],[1403,35,1292,37],[1403,36,1292,38],[1403,37,1292,39],[1403,39,1292,41,"utils_ts_1"],[1403,49,1292,51],[1403,50,1292,52,"ensureBytes"],[1403,61,1292,63],[1403,63,1292,65],[1403,72,1292,74],[1403,74,1292,76,"message"],[1403,81,1292,83],[1403,82,1292,84],[1403,84,1292,86,"prehash"],[1403,91,1292,93],[1403,92,1292,94],[1404,6,1293,8],[1404,10,1293,12],[1404,18,1293,20],[1404,22,1293,24,"opts"],[1404,26,1293,28],[1404,28,1294,12],[1404,34,1294,18],[1404,38,1294,22,"Error"],[1404,43,1294,27],[1404,44,1294,28],[1404,80,1294,64],[1404,81,1294,65],[1405,6,1295,8],[1405,12,1295,14,"sig"],[1405,15,1295,17],[1405,18,1295,20,"format"],[1405,24,1295,26],[1405,29,1295,31,"undefined"],[1405,38,1295,40],[1405,41,1296,14,"tryParsingSig"],[1405,54,1296,27],[1405,55,1296,28,"signature"],[1405,64,1296,37],[1405,65,1296,38],[1405,68,1297,14,"Signature"],[1405,77,1297,23],[1405,78,1297,24,"fromBytes"],[1405,87,1297,33],[1405,88,1297,34],[1405,89,1297,35],[1405,90,1297,36],[1405,92,1297,38,"utils_ts_1"],[1405,102,1297,48],[1405,103,1297,49,"ensureBytes"],[1405,114,1297,60],[1405,116,1297,62],[1405,121,1297,67],[1405,123,1297,69,"signature"],[1405,132,1297,78],[1405,133,1297,79],[1405,135,1297,81,"format"],[1405,141,1297,87],[1405,142,1297,88],[1406,6,1298,8],[1406,10,1298,12,"sig"],[1406,13,1298,15],[1406,18,1298,20],[1406,23,1298,25],[1406,25,1299,12],[1406,32,1299,19],[1406,37,1299,24],[1407,6,1300,8],[1407,10,1300,12],[1408,8,1301,12],[1408,14,1301,18,"P"],[1408,15,1301,19],[1408,18,1301,22,"Point"],[1408,23,1301,27],[1408,24,1301,28,"fromBytes"],[1408,33,1301,37],[1408,34,1301,38,"publicKey"],[1408,43,1301,47],[1408,44,1301,48],[1409,8,1302,12],[1409,12,1302,16,"lowS"],[1409,16,1302,20],[1409,20,1302,24,"sig"],[1409,23,1302,27],[1409,24,1302,28,"hasHighS"],[1409,32,1302,36],[1409,33,1302,37],[1409,34,1302,38],[1409,36,1303,16],[1409,43,1303,23],[1409,48,1303,28],[1410,8,1304,12],[1410,14,1304,18],[1411,10,1304,20,"r"],[1411,11,1304,21],[1412,10,1304,23,"s"],[1413,8,1304,25],[1413,9,1304,26],[1413,12,1304,29,"sig"],[1413,15,1304,32],[1414,8,1305,12],[1414,14,1305,18,"h"],[1414,15,1305,19],[1414,18,1305,22,"bits2int_modN"],[1414,31,1305,35],[1414,32,1305,36,"message"],[1414,39,1305,43],[1414,40,1305,44],[1414,41,1305,45],[1414,42,1305,46],[1415,8,1306,12],[1415,14,1306,18,"is"],[1415,16,1306,20],[1415,19,1306,23,"Fn"],[1415,21,1306,25],[1415,22,1306,26,"inv"],[1415,25,1306,29],[1415,26,1306,30,"s"],[1415,27,1306,31],[1415,28,1306,32],[1415,29,1306,33],[1415,30,1306,34],[1416,8,1307,12],[1416,14,1307,18,"u1"],[1416,16,1307,20],[1416,19,1307,23,"Fn"],[1416,21,1307,25],[1416,22,1307,26,"create"],[1416,28,1307,32],[1416,29,1307,33,"h"],[1416,30,1307,34],[1416,33,1307,37,"is"],[1416,35,1307,39],[1416,36,1307,40],[1416,37,1307,41],[1416,38,1307,42],[1417,8,1308,12],[1417,14,1308,18,"u2"],[1417,16,1308,20],[1417,19,1308,23,"Fn"],[1417,21,1308,25],[1417,22,1308,26,"create"],[1417,28,1308,32],[1417,29,1308,33,"r"],[1417,30,1308,34],[1417,33,1308,37,"is"],[1417,35,1308,39],[1417,36,1308,40],[1417,37,1308,41],[1417,38,1308,42],[1418,8,1309,12],[1418,14,1309,18,"R"],[1418,15,1309,19],[1418,18,1309,22,"Point"],[1418,23,1309,27],[1418,24,1309,28,"BASE"],[1418,28,1309,32],[1418,29,1309,33,"multiplyUnsafe"],[1418,43,1309,47],[1418,44,1309,48,"u1"],[1418,46,1309,50],[1418,47,1309,51],[1418,48,1309,52,"add"],[1418,51,1309,55],[1418,52,1309,56,"P"],[1418,53,1309,57],[1418,54,1309,58,"multiplyUnsafe"],[1418,68,1309,72],[1418,69,1309,73,"u2"],[1418,71,1309,75],[1418,72,1309,76],[1418,73,1309,77],[1418,74,1309,78],[1418,75,1309,79],[1419,8,1310,12],[1419,12,1310,16,"R"],[1419,13,1310,17],[1419,14,1310,18,"is0"],[1419,17,1310,21],[1419,18,1310,22],[1419,19,1310,23],[1419,21,1311,16],[1419,28,1311,23],[1419,33,1311,28],[1420,8,1312,12],[1420,14,1312,18,"v"],[1420,15,1312,19],[1420,18,1312,22,"Fn"],[1420,20,1312,24],[1420,21,1312,25,"create"],[1420,27,1312,31],[1420,28,1312,32,"R"],[1420,29,1312,33],[1420,30,1312,34,"x"],[1420,31,1312,35],[1420,32,1312,36],[1420,33,1312,37],[1420,34,1312,38],[1421,8,1313,12],[1421,15,1313,19,"v"],[1421,16,1313,20],[1421,21,1313,25,"r"],[1421,22,1313,26],[1422,6,1314,8],[1422,7,1314,9],[1422,8,1315,8],[1422,15,1315,15,"e"],[1422,16,1315,16],[1422,18,1315,18],[1423,8,1316,12],[1423,15,1316,19],[1423,20,1316,24],[1424,6,1317,8],[1425,4,1318,4],[1426,4,1319,4],[1426,13,1319,13,"recoverPublicKey"],[1426,29,1319,29,"recoverPublicKey"],[1426,30,1319,30,"signature"],[1426,39,1319,39],[1426,41,1319,41,"message"],[1426,48,1319,48],[1426,50,1319,50,"opts"],[1426,54,1319,54],[1426,57,1319,57],[1426,58,1319,58],[1426,59,1319,59],[1426,61,1319,61],[1427,6,1320,8],[1427,12,1320,14],[1428,8,1320,16,"prehash"],[1429,6,1320,24],[1429,7,1320,25],[1429,10,1320,28,"validateSigOpts"],[1429,25,1320,43],[1429,26,1320,44,"opts"],[1429,30,1320,48],[1429,32,1320,50,"defaultSigOpts"],[1429,46,1320,64],[1429,47,1320,65],[1430,6,1321,8,"message"],[1430,13,1321,15],[1430,16,1321,18,"validateMsgAndHash"],[1430,34,1321,36],[1430,35,1321,37,"message"],[1430,42,1321,44],[1430,44,1321,46,"prehash"],[1430,51,1321,53],[1430,52,1321,54],[1431,6,1322,8],[1431,13,1322,15,"Signature"],[1431,22,1322,24],[1431,23,1322,25,"fromBytes"],[1431,32,1322,34],[1431,33,1322,35,"signature"],[1431,42,1322,44],[1431,44,1322,46],[1431,55,1322,57],[1431,56,1322,58],[1431,57,1322,59,"recoverPublicKey"],[1431,73,1322,75],[1431,74,1322,76,"message"],[1431,81,1322,83],[1431,82,1322,84],[1431,83,1322,85,"toBytes"],[1431,90,1322,92],[1431,91,1322,93],[1431,92,1322,94],[1432,4,1323,4],[1433,4,1324,4],[1433,11,1324,11,"Object"],[1433,17,1324,17],[1433,18,1324,18,"freeze"],[1433,24,1324,24],[1433,25,1324,25],[1434,6,1325,8,"keygen"],[1434,12,1325,14],[1435,6,1326,8,"getPublicKey"],[1435,18,1326,20],[1436,6,1327,8,"getSharedSecret"],[1436,21,1327,23],[1437,6,1328,8,"utils"],[1437,11,1328,13],[1438,6,1329,8,"lengths"],[1438,13,1329,15],[1439,6,1330,8,"Point"],[1439,11,1330,13],[1440,6,1331,8,"sign"],[1440,10,1331,12],[1441,6,1332,8,"verify"],[1441,12,1332,14],[1442,6,1333,8,"recoverPublicKey"],[1442,22,1333,24],[1443,6,1334,8,"Signature"],[1443,15,1334,17],[1444,6,1335,8,"hash"],[1445,4,1336,4],[1445,5,1336,5],[1445,6,1336,6],[1446,2,1337,0],[1447,2,1338,0],[1448,2,1339,0],[1448,11,1339,9,"weierstrassPoints"],[1448,28,1339,26,"weierstrassPoints"],[1448,29,1339,27,"c"],[1448,30,1339,28],[1448,32,1339,30],[1449,4,1340,4],[1449,10,1340,10],[1450,6,1340,12,"CURVE"],[1450,11,1340,17],[1451,6,1340,19,"curveOpts"],[1452,4,1340,29],[1452,5,1340,30],[1452,8,1340,33,"_weierstrass_legacy_opts_to_new"],[1452,39,1340,64],[1452,40,1340,65,"c"],[1452,41,1340,66],[1452,42,1340,67],[1453,4,1341,4],[1453,10,1341,10,"Point"],[1453,15,1341,15],[1453,18,1341,18,"weierstrassN"],[1453,30,1341,30],[1453,31,1341,31,"CURVE"],[1453,36,1341,36],[1453,38,1341,38,"curveOpts"],[1453,47,1341,47],[1453,48,1341,48],[1454,4,1342,4],[1454,11,1342,11,"_weierstrass_new_output_to_legacy"],[1454,44,1342,44],[1454,45,1342,45,"c"],[1454,46,1342,46],[1454,48,1342,48,"Point"],[1454,53,1342,53],[1454,54,1342,54],[1455,2,1343,0],[1456,2,1344,0],[1456,11,1344,9,"_weierstrass_legacy_opts_to_new"],[1456,42,1344,40,"_weierstrass_legacy_opts_to_new"],[1456,43,1344,41,"c"],[1456,44,1344,42],[1456,46,1344,44],[1457,4,1345,4],[1457,10,1345,10,"CURVE"],[1457,15,1345,15],[1457,18,1345,18],[1458,6,1346,8,"a"],[1458,7,1346,9],[1458,9,1346,11,"c"],[1458,10,1346,12],[1458,11,1346,13,"a"],[1458,12,1346,14],[1459,6,1347,8,"b"],[1459,7,1347,9],[1459,9,1347,11,"c"],[1459,10,1347,12],[1459,11,1347,13,"b"],[1459,12,1347,14],[1460,6,1348,8,"p"],[1460,7,1348,9],[1460,9,1348,11,"c"],[1460,10,1348,12],[1460,11,1348,13,"Fp"],[1460,13,1348,15],[1460,14,1348,16,"ORDER"],[1460,19,1348,21],[1461,6,1349,8,"n"],[1461,7,1349,9],[1461,9,1349,11,"c"],[1461,10,1349,12],[1461,11,1349,13,"n"],[1461,12,1349,14],[1462,6,1350,8,"h"],[1462,7,1350,9],[1462,9,1350,11,"c"],[1462,10,1350,12],[1462,11,1350,13,"h"],[1462,12,1350,14],[1463,6,1351,8,"Gx"],[1463,8,1351,10],[1463,10,1351,12,"c"],[1463,11,1351,13],[1463,12,1351,14,"Gx"],[1463,14,1351,16],[1464,6,1352,8,"Gy"],[1464,8,1352,10],[1464,10,1352,12,"c"],[1464,11,1352,13],[1464,12,1352,14,"Gy"],[1465,4,1353,4],[1465,5,1353,5],[1466,4,1354,4],[1466,10,1354,10,"Fp"],[1466,12,1354,12],[1466,15,1354,15,"c"],[1466,16,1354,16],[1466,17,1354,17,"Fp"],[1466,19,1354,19],[1467,4,1355,4],[1467,8,1355,8,"allowedLengths"],[1467,22,1355,22],[1467,25,1355,25,"c"],[1467,26,1355,26],[1467,27,1355,27,"allowedPrivateKeyLengths"],[1467,51,1355,51],[1467,54,1356,10,"Array"],[1467,59,1356,15],[1467,60,1356,16,"from"],[1467,64,1356,20],[1467,65,1356,21],[1467,69,1356,25,"Set"],[1467,72,1356,28],[1467,73,1356,29,"c"],[1467,74,1356,30],[1467,75,1356,31,"allowedPrivateKeyLengths"],[1467,99,1356,55],[1467,100,1356,56,"map"],[1467,103,1356,59],[1467,104,1356,61,"l"],[1467,105,1356,62],[1467,109,1356,67,"Math"],[1467,113,1356,71],[1467,114,1356,72,"ceil"],[1467,118,1356,76],[1467,119,1356,77,"l"],[1467,120,1356,78],[1467,123,1356,81],[1467,124,1356,82],[1467,125,1356,83],[1467,126,1356,84],[1467,127,1356,85],[1467,128,1356,86],[1467,131,1357,10,"undefined"],[1467,140,1357,19],[1468,4,1358,4],[1468,10,1358,10,"Fn"],[1468,12,1358,12],[1468,15,1358,15],[1468,16,1358,16],[1468,17,1358,17],[1468,19,1358,19,"modular_ts_1"],[1468,31,1358,31],[1468,32,1358,32,"Field"],[1468,37,1358,37],[1468,39,1358,39,"CURVE"],[1468,44,1358,44],[1468,45,1358,45,"n"],[1468,46,1358,46],[1468,48,1358,48],[1469,6,1359,8,"BITS"],[1469,10,1359,12],[1469,12,1359,14,"c"],[1469,13,1359,15],[1469,14,1359,16,"nBitLength"],[1469,24,1359,26],[1470,6,1360,8,"allowedLengths"],[1470,20,1360,22],[1470,22,1360,24,"allowedLengths"],[1470,36,1360,38],[1471,6,1361,8,"modFromBytes"],[1471,18,1361,20],[1471,20,1361,22,"c"],[1471,21,1361,23],[1471,22,1361,24,"wrapPrivateKey"],[1472,4,1362,4],[1472,5,1362,5],[1472,6,1362,6],[1473,4,1363,4],[1473,10,1363,10,"curveOpts"],[1473,19,1363,19],[1473,22,1363,22],[1474,6,1364,8,"Fp"],[1474,8,1364,10],[1475,6,1365,8,"Fn"],[1475,8,1365,10],[1476,6,1366,8,"allowInfinityPoint"],[1476,24,1366,26],[1476,26,1366,28,"c"],[1476,27,1366,29],[1476,28,1366,30,"allowInfinityPoint"],[1476,46,1366,48],[1477,6,1367,8,"endo"],[1477,10,1367,12],[1477,12,1367,14,"c"],[1477,13,1367,15],[1477,14,1367,16,"endo"],[1477,18,1367,20],[1478,6,1368,8,"isTorsionFree"],[1478,19,1368,21],[1478,21,1368,23,"c"],[1478,22,1368,24],[1478,23,1368,25,"isTorsionFree"],[1478,36,1368,38],[1479,6,1369,8,"clearCofactor"],[1479,19,1369,21],[1479,21,1369,23,"c"],[1479,22,1369,24],[1479,23,1369,25,"clearCofactor"],[1479,36,1369,38],[1480,6,1370,8,"fromBytes"],[1480,15,1370,17],[1480,17,1370,19,"c"],[1480,18,1370,20],[1480,19,1370,21,"fromBytes"],[1480,28,1370,30],[1481,6,1371,8,"toBytes"],[1481,13,1371,15],[1481,15,1371,17,"c"],[1481,16,1371,18],[1481,17,1371,19,"toBytes"],[1482,4,1372,4],[1482,5,1372,5],[1483,4,1373,4],[1483,11,1373,11],[1484,6,1373,13,"CURVE"],[1484,11,1373,18],[1485,6,1373,20,"curveOpts"],[1486,4,1373,30],[1486,5,1373,31],[1487,2,1374,0],[1488,2,1375,0],[1488,11,1375,9,"_ecdsa_legacy_opts_to_new"],[1488,36,1375,34,"_ecdsa_legacy_opts_to_new"],[1488,37,1375,35,"c"],[1488,38,1375,36],[1488,40,1375,38],[1489,4,1376,4],[1489,10,1376,10],[1490,6,1376,12,"CURVE"],[1490,11,1376,17],[1491,6,1376,19,"curveOpts"],[1492,4,1376,29],[1492,5,1376,30],[1492,8,1376,33,"_weierstrass_legacy_opts_to_new"],[1492,39,1376,64],[1492,40,1376,65,"c"],[1492,41,1376,66],[1492,42,1376,67],[1493,4,1377,4],[1493,10,1377,10,"ecdsaOpts"],[1493,19,1377,19],[1493,22,1377,22],[1494,6,1378,8,"hmac"],[1494,10,1378,12],[1494,12,1378,14,"c"],[1494,13,1378,15],[1494,14,1378,16,"hmac"],[1494,18,1378,20],[1495,6,1379,8,"randomBytes"],[1495,17,1379,19],[1495,19,1379,21,"c"],[1495,20,1379,22],[1495,21,1379,23,"randomBytes"],[1495,32,1379,34],[1496,6,1380,8,"lowS"],[1496,10,1380,12],[1496,12,1380,14,"c"],[1496,13,1380,15],[1496,14,1380,16,"lowS"],[1496,18,1380,20],[1497,6,1381,8,"bits2int"],[1497,14,1381,16],[1497,16,1381,18,"c"],[1497,17,1381,19],[1497,18,1381,20,"bits2int"],[1497,26,1381,28],[1498,6,1382,8,"bits2int_modN"],[1498,19,1382,21],[1498,21,1382,23,"c"],[1498,22,1382,24],[1498,23,1382,25,"bits2int_modN"],[1499,4,1383,4],[1499,5,1383,5],[1500,4,1384,4],[1500,11,1384,11],[1501,6,1384,13,"CURVE"],[1501,11,1384,18],[1502,6,1384,20,"curveOpts"],[1502,15,1384,29],[1503,6,1384,31,"hash"],[1503,10,1384,35],[1503,12,1384,37,"c"],[1503,13,1384,38],[1503,14,1384,39,"hash"],[1503,18,1384,43],[1504,6,1384,45,"ecdsaOpts"],[1505,4,1384,55],[1505,5,1384,56],[1506,2,1385,0],[1507,2,1386,0],[1507,11,1386,9,"_legacyHelperEquat"],[1507,29,1386,27,"_legacyHelperEquat"],[1507,30,1386,28,"Fp"],[1507,32,1386,30],[1507,34,1386,32,"a"],[1507,35,1386,33],[1507,37,1386,35,"b"],[1507,38,1386,36],[1507,40,1386,38],[1508,4,1387,4],[1509,0,1388,0],[1510,0,1389,0],[1511,0,1390,0],[1512,4,1391,4],[1512,13,1391,13,"weierstrassEquation"],[1512,32,1391,32,"weierstrassEquation"],[1512,33,1391,33,"x"],[1512,34,1391,34],[1512,36,1391,36],[1513,6,1392,8],[1513,12,1392,14,"x2"],[1513,14,1392,16],[1513,17,1392,19,"Fp"],[1513,19,1392,21],[1513,20,1392,22,"sqr"],[1513,23,1392,25],[1513,24,1392,26,"x"],[1513,25,1392,27],[1513,26,1392,28],[1513,27,1392,29],[1513,28,1392,30],[1514,6,1393,8],[1514,12,1393,14,"x3"],[1514,14,1393,16],[1514,17,1393,19,"Fp"],[1514,19,1393,21],[1514,20,1393,22,"mul"],[1514,23,1393,25],[1514,24,1393,26,"x2"],[1514,26,1393,28],[1514,28,1393,30,"x"],[1514,29,1393,31],[1514,30,1393,32],[1514,31,1393,33],[1514,32,1393,34],[1515,6,1394,8],[1515,13,1394,15,"Fp"],[1515,15,1394,17],[1515,16,1394,18,"add"],[1515,19,1394,21],[1515,20,1394,22,"Fp"],[1515,22,1394,24],[1515,23,1394,25,"add"],[1515,26,1394,28],[1515,27,1394,29,"x3"],[1515,29,1394,31],[1515,31,1394,33,"Fp"],[1515,33,1394,35],[1515,34,1394,36,"mul"],[1515,37,1394,39],[1515,38,1394,40,"x"],[1515,39,1394,41],[1515,41,1394,43,"a"],[1515,42,1394,44],[1515,43,1394,45],[1515,44,1394,46],[1515,46,1394,48,"b"],[1515,47,1394,49],[1515,48,1394,50],[1515,49,1394,51],[1515,50,1394,52],[1516,4,1395,4],[1517,4,1396,4],[1517,11,1396,11,"weierstrassEquation"],[1517,30,1396,30],[1518,2,1397,0],[1519,2,1398,0],[1519,11,1398,9,"_weierstrass_new_output_to_legacy"],[1519,44,1398,42,"_weierstrass_new_output_to_legacy"],[1519,45,1398,43,"c"],[1519,46,1398,44],[1519,48,1398,46,"Point"],[1519,53,1398,51],[1519,55,1398,53],[1520,4,1399,4],[1520,10,1399,10],[1521,6,1399,12,"Fp"],[1521,8,1399,14],[1522,6,1399,16,"Fn"],[1523,4,1399,19],[1523,5,1399,20],[1523,8,1399,23,"Point"],[1523,13,1399,28],[1524,4,1400,4],[1524,13,1400,13,"isWithinCurveOrder"],[1524,31,1400,31,"isWithinCurveOrder"],[1524,32,1400,32,"num"],[1524,35,1400,35],[1524,37,1400,37],[1525,6,1401,8],[1525,13,1401,15],[1525,14,1401,16],[1525,15,1401,17],[1525,17,1401,19,"utils_ts_1"],[1525,27,1401,29],[1525,28,1401,30,"inRange"],[1525,35,1401,37],[1525,37,1401,39,"num"],[1525,40,1401,42],[1525,42,1401,44,"_1n"],[1525,45,1401,47],[1525,47,1401,49,"Fn"],[1525,49,1401,51],[1525,50,1401,52,"ORDER"],[1525,55,1401,57],[1525,56,1401,58],[1526,4,1402,4],[1527,4,1403,4],[1527,10,1403,10,"weierstrassEquation"],[1527,29,1403,29],[1527,32,1403,32,"_legacyHelperEquat"],[1527,50,1403,50],[1527,51,1403,51,"Fp"],[1527,53,1403,53],[1527,55,1403,55,"c"],[1527,56,1403,56],[1527,57,1403,57,"a"],[1527,58,1403,58],[1527,60,1403,60,"c"],[1527,61,1403,61],[1527,62,1403,62,"b"],[1527,63,1403,63],[1527,64,1403,64],[1528,4,1404,4],[1528,11,1404,11,"Object"],[1528,17,1404,17],[1528,18,1404,18,"assign"],[1528,24,1404,24],[1528,25,1404,25],[1528,26,1404,26],[1528,27,1404,27],[1528,29,1404,29],[1529,6,1405,8,"CURVE"],[1529,11,1405,13],[1529,13,1405,15,"c"],[1529,14,1405,16],[1530,6,1406,8,"Point"],[1530,11,1406,13],[1530,13,1406,15,"Point"],[1530,18,1406,20],[1531,6,1407,8,"ProjectivePoint"],[1531,21,1407,23],[1531,23,1407,25,"Point"],[1531,28,1407,30],[1532,6,1408,8,"normPrivateKeyToScalar"],[1532,28,1408,30],[1532,30,1408,33,"key"],[1532,33,1408,36],[1532,37,1408,41,"_normFnElement"],[1532,51,1408,55],[1532,52,1408,56,"Fn"],[1532,54,1408,58],[1532,56,1408,60,"key"],[1532,59,1408,63],[1532,60,1408,64],[1533,6,1409,8,"weierstrassEquation"],[1533,25,1409,27],[1534,6,1410,8,"isWithinCurveOrder"],[1535,4,1411,4],[1535,5,1411,5],[1535,6,1411,6],[1536,2,1412,0],[1537,2,1413,0],[1537,11,1413,9,"_ecdsa_new_output_to_legacy"],[1537,38,1413,36,"_ecdsa_new_output_to_legacy"],[1537,39,1413,37,"c"],[1537,40,1413,38],[1537,42,1413,40,"_ecdsa"],[1537,48,1413,46],[1537,50,1413,48],[1538,4,1414,4],[1538,10,1414,10,"Point"],[1538,15,1414,15],[1538,18,1414,18,"_ecdsa"],[1538,24,1414,24],[1538,25,1414,25,"Point"],[1538,30,1414,30],[1539,4,1415,4],[1539,11,1415,11,"Object"],[1539,17,1415,17],[1539,18,1415,18,"assign"],[1539,24,1415,24],[1539,25,1415,25],[1539,26,1415,26],[1539,27,1415,27],[1539,29,1415,29,"_ecdsa"],[1539,35,1415,35],[1539,37,1415,37],[1540,6,1416,8,"ProjectivePoint"],[1540,21,1416,23],[1540,23,1416,25,"Point"],[1540,28,1416,30],[1541,6,1417,8,"CURVE"],[1541,11,1417,13],[1541,13,1417,15,"Object"],[1541,19,1417,21],[1541,20,1417,22,"assign"],[1541,26,1417,28],[1541,27,1417,29],[1541,28,1417,30],[1541,29,1417,31],[1541,31,1417,33,"c"],[1541,32,1417,34],[1541,34,1417,36],[1541,35,1417,37],[1541,36,1417,38],[1541,38,1417,40,"modular_ts_1"],[1541,50,1417,52],[1541,51,1417,53,"nLength"],[1541,58,1417,60],[1541,60,1417,62,"Point"],[1541,65,1417,67],[1541,66,1417,68,"Fn"],[1541,68,1417,70],[1541,69,1417,71,"ORDER"],[1541,74,1417,76],[1541,76,1417,78,"Point"],[1541,81,1417,83],[1541,82,1417,84,"Fn"],[1541,84,1417,86],[1541,85,1417,87,"BITS"],[1541,89,1417,91],[1541,90,1417,92],[1542,4,1418,4],[1542,5,1418,5],[1542,6,1418,6],[1543,2,1419,0],[1544,2,1420,0],[1545,2,1421,0],[1545,11,1421,9,"weierstrass"],[1545,22,1421,20,"weierstrass"],[1545,23,1421,21,"c"],[1545,24,1421,22],[1545,26,1421,24],[1546,4,1422,4],[1546,10,1422,10],[1547,6,1422,12,"CURVE"],[1547,11,1422,17],[1548,6,1422,19,"curveOpts"],[1548,15,1422,28],[1549,6,1422,30,"hash"],[1549,10,1422,34],[1550,6,1422,36,"ecdsaOpts"],[1551,4,1422,46],[1551,5,1422,47],[1551,8,1422,50,"_ecdsa_legacy_opts_to_new"],[1551,33,1422,75],[1551,34,1422,76,"c"],[1551,35,1422,77],[1551,36,1422,78],[1552,4,1423,4],[1552,10,1423,10,"Point"],[1552,15,1423,15],[1552,18,1423,18,"weierstrassN"],[1552,30,1423,30],[1552,31,1423,31,"CURVE"],[1552,36,1423,36],[1552,38,1423,38,"curveOpts"],[1552,47,1423,47],[1552,48,1423,48],[1553,4,1424,4],[1553,10,1424,10,"signs"],[1553,15,1424,15],[1553,18,1424,18,"ecdsa"],[1553,23,1424,23],[1553,24,1424,24,"Point"],[1553,29,1424,29],[1553,31,1424,31,"hash"],[1553,35,1424,35],[1553,37,1424,37,"ecdsaOpts"],[1553,46,1424,46],[1553,47,1424,47],[1554,4,1425,4],[1554,11,1425,11,"_ecdsa_new_output_to_legacy"],[1554,38,1425,38],[1554,39,1425,39,"c"],[1554,40,1425,40],[1554,42,1425,42,"signs"],[1554,47,1425,47],[1554,48,1425,48],[1555,2,1426,0],[1556,0,1426,1],[1556,3]],"functionMap":{"names":["<global>","divNearest","_splitEndoScalar","validateSigFormat","validateSigOpts","DERErr","DERErr#constructor","exports.DER._tlv.encode","exports.DER._tlv.decode","exports.DER._int.encode","exports.DER._int.decode","exports.DER.toSig","exports.DER.hexFromSig","_normFnElement","weierstrassN","assertCompressionIsSupported","pointToBytes","pointFromBytes","weierstrassEquation","isValidXY","acoord","aprjpoint","splitEndoScalarN","<anonymous>","finishEndo","Point","Point#constructor","Point.CURVE","Point.fromAffine","Point.fromBytes","Point.fromHex","Point#get__x","Point#get__y","Point#precompute","Point#assertValidity","Point#hasEvenY","Point#equals","Point#negate","Point#double","Point#add","Point#subtract","Point#is0","Point#multiply","mul","wnaf.cached$argument_2","Point#multiplyUnsafe","Point#multiplyAndAddUnsafe","Point#toAffine","Point#isTorsionFree","Point#clearCofactor","Point#isSmallOrder","Point#toBytes","Point#toHex","Point#toString","Point#get__px","Point#get__py","Point#get__pz","Point#toRawBytes","Point#_setWindowSize","Point.normalizeZ","Point.msm","Point.fromPrivateKey","pprefix","SWUFpSqrtRatio","sqrtRatio","mapToCurveSimpleSWU","getWLengths","ecdh","isValidSecretKey","isValidPublicKey","randomSecretKey","getPublicKey","keygen","isProbPub","getSharedSecret","utils.normPrivateKeyToScalar","utils.precompute","ecdsa","isBiggerThanHalfOrder","validateRS","validateSigLength","Signature","Signature#constructor","Signature.fromBytes","Signature.fromHex","Signature#addRecoveryBit","Signature#recoverPublicKey","Signature#hasHighS","Signature#toBytes","Signature#toHex","Signature#assertValidity","Signature.fromCompact","Signature.fromDER","Signature#normalizeS","Signature#toDERRawBytes","Signature#toDERHex","Signature#toCompactRawBytes","Signature#toCompactHex","bits2int_def","bits2int_modN_def","int2octets","validateMsgAndHash","prepSig","some$argument_0","k2sig","sign","tryParsingSig","verify","recoverPublicKey","weierstrassPoints","_weierstrass_legacy_opts_to_new","c.allowedPrivateKeyLengths.map$argument_0","_ecdsa_legacy_opts_to_new","_legacyHelperEquat","_weierstrass_new_output_to_legacy","isWithinCurveOrder","Object.assign$argument_1.normPrivateKeyToScalar","_ecdsa_new_output_to_legacy","weierstrass"],"mappings":"AAA;mBC8C,yDD;AEI;CFwB;AGC;CHI;AIC;CJW;AKC;ICC;KDE;CLC;gBOc;SPc;QQE;SRkC;QSO;STW;QUC;SVO;IWE;KXY;IYC;KZM;AaK;CbkB;AckB;ICsB;KDG;IEE;KFY;IGC;KHuC;IIG;KJI;IKG;KLI;IMY;KNI;IOC;KPG;IQC;KRI;kDSK;KTkB;qDSG;KTkB;IUC;KVK;IWM;QCE;SDK;QEC;SFE;QGE;SHU;QIC;SJI;QKC;SLE;QMC;SNE;QOC;SPE;QQO;SRK;QSG;STE;QUC;SVK;QWE;SXO;QYE;SZE;QaK;SbqC;QcK;SdgD;QeC;SfE;QgBC;ShBE;QiBU;wBCK,4BC,2CD,CD;SjBgB;QoBM;SpBmB;QqBC;SrBG;QsBK;StBE;QuBK;SvBO;QwBC;SxBO;QyBC;SzBG;Q0BC;S1BI;Q2BC;S3BE;Q4BC;S5BE;Q6BE;S7BE;Q8BC;S9BE;Q+BC;S/BE;QgCC;ShCE;QiCC;SjCE;QkCC;SlCE;QmCC;SnCE;QoCC;SpCE;KXC;Cda;A8DE;C9DE;A+DU;oBCiB;KD8B;oBCK;SDW;C/DK;AiEK;W1CU;K0C8B;CjEC;AkEC;ClEQ;AmEK;ICI;KDO;IEC;KFa;IGK;KHE;IIM;KJE;IKC;KLG;IMI;KNU;IOS;KPQ;gCQQ,gCR;QSC;STE;CnEG;A6EiB;StDW,sFsD;ICW;KDG;IEC;KFI;IGC;KHK;III;QCC;SDM;QEC;SFgB;QGC;SHE;QIC;SJE;QKC;SL+B;QME;SNE;QOC;SPY;QQC;SRE;QSE,oBT;QUC;SVE;QWC;SXE;QYC;SZE;QaC;SbE;QcC;SdE;QeC;SfE;QgBC;ShBE;KJC;QqBM;SrBS;QsBE;StBE;IuBI;KvBI;IwBC;KxBG;IyBS;4CCC,gBD;QE2B;SFqB;KzBE;I4BY;K5BM;I6BC;K7BkC;I8Bc;K9B6B;I+BC;K/BI;C7Ec;A6GE;C7GI;A8GC;4DCY,uBD;C9GkB;AgHC;ChHU;AiHC;I/FK;K+FI;CjHE;AkHC;ICE;KDE;gCEM,gCF;ClHI;AqHC;CrHM;AsHE;CtHK"}},"type":"js/module"}]}