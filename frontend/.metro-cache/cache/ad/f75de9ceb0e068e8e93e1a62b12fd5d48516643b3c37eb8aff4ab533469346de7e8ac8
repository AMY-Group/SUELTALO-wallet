{"dependencies":[{"name":"ws","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":3,"column":20,"index":35},"end":{"line":3,"column":33,"index":48}}],"key":"BZg7ddMu2AkBE4wk9dCTuNZ34RA=","exportNames":["*"]}},{"name":"eventemitter3","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":4,"column":20,"index":70},"end":{"line":4,"column":44,"index":94}}],"key":"Zer+KWV0bk2Kb76lO2UgzgR5IvY=","exportNames":["*"]}},{"name":"url","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":10,"index":106},"end":{"line":5,"column":24,"index":120}}],"key":"Ug/DVHoj+F8BpIFoKWnZvPrb/TI=","exportNames":["*"]}},{"name":"uuid","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":11,"index":133},"end":{"line":6,"column":26,"index":148}}],"key":"jDVWfT8IaDtrIKMfZusH6IH9Zlc=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var WebSocketImpl = require(_dependencyMap[0], \"ws\");\n  var eventemitter3 = require(_dependencyMap[1], \"eventemitter3\");\n  var url = require(_dependencyMap[2], \"url\");\n  var uuid = require(_dependencyMap[3], \"uuid\");\n  function _interopDefault(e) {\n    return e && e.__esModule ? e : {\n      default: e\n    };\n  }\n  var WebSocketImpl__default = /*#__PURE__*/_interopDefault(WebSocketImpl);\n  var url__default = /*#__PURE__*/_interopDefault(url);\n\n  // src/lib/client/websocket.ts\n  function WebSocket(address, options) {\n    return new WebSocketImpl__default.default(address, options);\n  }\n\n  // src/lib/utils.ts\n  var DefaultDataPack = class {\n    encode(value) {\n      return JSON.stringify(value);\n    }\n    decode(value) {\n      return JSON.parse(value);\n    }\n  };\n\n  // src/lib/client.ts\n  var CommonClient = class extends eventemitter3.EventEmitter {\n    /**\n    * Instantiate a Client class.\n    * @constructor\n    * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n    * @param {String} address - url to a websocket server\n    * @param {Object} options - ws options object with reconnect parameters\n    * @param {Function} generate_request_id - custom generation request Id\n    * @param {DataPack} dataPack - data pack contains encoder and decoder\n    * @return {CommonClient}\n    */\n    constructor(webSocketFactory, address = \"ws://localhost:8080\", {\n      autoconnect = true,\n      reconnect = true,\n      reconnect_interval = 1e3,\n      max_reconnects = 5,\n      ...rest_options\n    } = {}, generate_request_id, dataPack) {\n      super();\n      this.webSocketFactory = webSocketFactory;\n      this.queue = {};\n      this.rpc_id = 0;\n      this.address = address;\n      this.autoconnect = autoconnect;\n      this.ready = false;\n      this.reconnect = reconnect;\n      this.reconnect_timer_id = void 0;\n      this.reconnect_interval = reconnect_interval;\n      this.max_reconnects = max_reconnects;\n      this.rest_options = rest_options;\n      this.current_reconnects = 0;\n      this.generate_request_id = generate_request_id || (() => typeof this.rpc_id === \"number\" ? ++this.rpc_id : Number(this.rpc_id) + 1);\n      if (!dataPack) this.dataPack = new DefaultDataPack();else this.dataPack = dataPack;\n      if (this.autoconnect) this._connect(this.address, {\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects,\n        ...this.rest_options\n      });\n    }\n    /**\n    * Connects to a defined server if not connected already.\n    * @method\n    * @return {Undefined}\n    */\n    connect() {\n      if (this.socket) return;\n      this._connect(this.address, {\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects,\n        ...this.rest_options\n      });\n    }\n    /**\n    * Calls a registered RPC method on server.\n    * @method\n    * @param {String} method - RPC method name\n    * @param {Object|Array} params - optional method parameters\n    * @param {Number} timeout - RPC reply timeout value\n    * @param {Object} ws_opts - options passed to ws\n    * @return {Promise}\n    */\n    call(method, params, timeout, ws_opts) {\n      if (!ws_opts && \"object\" === typeof timeout) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n      return new Promise((resolve, reject) => {\n        if (!this.ready) return reject(new Error(\"socket not ready\"));\n        const rpc_id = this.generate_request_id(method, params);\n        const message = {\n          jsonrpc: \"2.0\",\n          method,\n          params: params || void 0,\n          id: rpc_id\n        };\n        this.socket.send(this.dataPack.encode(message), ws_opts, error => {\n          if (error) return reject(error);\n          this.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n          if (timeout) {\n            this.queue[rpc_id].timeout = setTimeout(() => {\n              delete this.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n    * Logins with the other side of the connection.\n    * @method\n    * @param {Object} params - Login credentials object\n    * @return {Promise}\n    */\n    async login(params) {\n      const resp = await this.call(\"rpc.login\", params);\n      if (!resp) throw new Error(\"authentication failed\");\n      return resp;\n    }\n    /**\n    * Fetches a list of client's methods registered on server.\n    * @method\n    * @return {Array}\n    */\n    async listMethods() {\n      return await this.call(\"__listMethods\");\n    }\n    /**\n    * Sends a JSON-RPC 2.0 notification to server.\n    * @method\n    * @param {String} method - RPC method name\n    * @param {Object} params - optional method parameters\n    * @return {Promise}\n    */\n    notify(method, params) {\n      return new Promise((resolve, reject) => {\n        if (!this.ready) return reject(new Error(\"socket not ready\"));\n        const message = {\n          jsonrpc: \"2.0\",\n          method,\n          params\n        };\n        this.socket.send(this.dataPack.encode(message), error => {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n    * Subscribes for a defined event.\n    * @method\n    * @param {String|Array} event - event name\n    * @return {Undefined}\n    * @throws {Error}\n    */\n    async subscribe(event) {\n      if (typeof event === \"string\") event = [event];\n      const result = await this.call(\"rpc.on\", event);\n      if (typeof event === \"string\" && result[event] !== \"ok\") throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n      return result;\n    }\n    /**\n    * Unsubscribes from a defined event.\n    * @method\n    * @param {String|Array} event - event name\n    * @return {Undefined}\n    * @throws {Error}\n    */\n    async unsubscribe(event) {\n      if (typeof event === \"string\") event = [event];\n      const result = await this.call(\"rpc.off\", event);\n      if (typeof event === \"string\" && result[event] !== \"ok\") throw new Error(\"Failed unsubscribing from an event with: \" + result);\n      return result;\n    }\n    /**\n    * Closes a WebSocket connection gracefully.\n    * @method\n    * @param {Number} code - socket close code\n    * @param {String} data - optional data to be sent before closing\n    * @return {Undefined}\n    */\n    close(code, data) {\n      this.socket.close(code || 1e3, data);\n    }\n    /**\n    * Enable / disable automatic reconnection.\n    * @method\n    * @param {Boolean} reconnect - enable / disable reconnection\n    * @return {Undefined}\n    */\n    setAutoReconnect(reconnect) {\n      this.reconnect = reconnect;\n    }\n    /**\n    * Set the interval between reconnection attempts.\n    * @method\n    * @param {Number} interval - reconnection interval in milliseconds\n    * @return {Undefined}\n    */\n    setReconnectInterval(interval) {\n      this.reconnect_interval = interval;\n    }\n    /**\n    * Set the maximum number of reconnection attempts.\n    * @method\n    * @param {Number} max_reconnects - maximum reconnection attempts\n    * @return {Undefined}\n    */\n    setMaxReconnects(max_reconnects) {\n      this.max_reconnects = max_reconnects;\n    }\n    /**\n    * Connection/Message handler.\n    * @method\n    * @private\n    * @param {String} address - WebSocket API address\n    * @param {Object} options - ws options object\n    * @return {Undefined}\n    */\n    _connect(address, options) {\n      clearTimeout(this.reconnect_timer_id);\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", () => {\n        this.ready = true;\n        this.emit(\"open\");\n        this.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", ({\n        data: message\n      }) => {\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n        try {\n          message = this.dataPack.decode(message);\n        } catch (error) {\n          return;\n        }\n        if (message.notification && this.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return this.emit(message.notification);\n          const args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else for (let i = 0; i < message.params.length; i++) args.push(message.params[i]);\n          return Promise.resolve().then(() => {\n            this.emit.apply(this, args);\n          });\n        }\n        if (!this.queue[message.id]) {\n          if (message.method) {\n            return Promise.resolve().then(() => {\n              this.emit(message.method, message?.params);\n            });\n          }\n          return;\n        }\n        if (\"error\" in message === \"result\" in message) this.queue[message.id].promise[1](new Error('Server response malformed. Response must include either \"result\" or \"error\", but not both.'));\n        if (this.queue[message.id].timeout) clearTimeout(this.queue[message.id].timeout);\n        if (message.error) this.queue[message.id].promise[1](message.error);else this.queue[message.id].promise[0](message.result);\n        delete this.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", error => this.emit(\"error\", error));\n      this.socket.addEventListener(\"close\", ({\n        code,\n        reason\n      }) => {\n        if (this.ready) setTimeout(() => this.emit(\"close\", code, reason), 0);\n        this.ready = false;\n        this.socket = void 0;\n        if (code === 1e3) return;\n        this.current_reconnects++;\n        if (this.reconnect && (this.max_reconnects > this.current_reconnects || this.max_reconnects === 0)) this.reconnect_timer_id = setTimeout(() => this._connect(address, options), this.reconnect_interval);\n      });\n    }\n  };\n  var Server = class extends eventemitter3.EventEmitter {\n    /**\n    * Instantiate a Server class.\n    * @constructor\n    * @param {Object} options - ws constructor's parameters with rpc\n    * @param {DataPack} dataPack - data pack contains encoder and decoder\n    * @return {Server} - returns a new Server instance\n    */\n    constructor(options, dataPack) {\n      super();\n      this.namespaces = {};\n      if (!dataPack) this.dataPack = new DefaultDataPack();else this.dataPack = dataPack;\n      this.wss = new WebSocketImpl.WebSocketServer(options);\n      this.wss.on(\"listening\", () => this.emit(\"listening\"));\n      this.wss.on(\"connection\", (socket, request) => {\n        const u = url__default.default.parse(request.url, true);\n        const ns = u.pathname;\n        if (u.query.socket_id) socket._id = u.query.socket_id;else socket._id = uuid.v1();\n        socket[\"_authenticated\"] = false;\n        socket.on(\"error\", error => this.emit(\"socket-error\", socket, error));\n        socket.on(\"close\", () => {\n          this.namespaces[ns].clients.delete(socket._id);\n          for (const event of Object.keys(this.namespaces[ns].events)) {\n            const index = this.namespaces[ns].events[event].sockets.indexOf(socket._id);\n            if (index >= 0) this.namespaces[ns].events[event].sockets.splice(index, 1);\n          }\n          this.emit(\"disconnection\", socket);\n        });\n        if (!this.namespaces[ns]) this._generateNamespace(ns);\n        this.namespaces[ns].clients.set(socket._id, socket);\n        this.emit(\"connection\", socket, request);\n        return this._handleRPC(socket, ns);\n      });\n      this.wss.on(\"error\", error => this.emit(\"error\", error));\n    }\n    /**\n    * Registers an RPC method.\n    * @method\n    * @param {String} name - method name\n    * @param {Function} fn - a callee function\n    * @param {String} ns - namespace identifier\n    * @throws {TypeError}\n    * @return {Object} - returns an IMethod object\n    */\n    register(name, fn, ns = \"/\") {\n      if (!this.namespaces[ns]) this._generateNamespace(ns);\n      this.namespaces[ns].rpc_methods[name] = {\n        fn,\n        protected: false\n      };\n      return {\n        protected: () => this._makeProtectedMethod(name, ns),\n        public: () => this._makePublicMethod(name, ns)\n      };\n    }\n    /**\n    * Sets an auth method.\n    * @method\n    * @param {Function} fn - an arbitrary auth method\n    * @param {String} ns - namespace identifier\n    * @throws {TypeError}\n    * @return {Undefined}\n    */\n    setAuth(fn, ns = \"/\") {\n      this.register(\"rpc.login\", fn, ns);\n    }\n    /**\n    * Marks an RPC method as protected.\n    * @method\n    * @param {String} name - method name\n    * @param {String} ns - namespace identifier\n    * @return {Undefined}\n    */\n    _makeProtectedMethod(name, ns = \"/\") {\n      this.namespaces[ns].rpc_methods[name].protected = true;\n    }\n    /**\n    * Marks an RPC method as public.\n    * @method\n    * @param {String} name - method name\n    * @param {String} ns - namespace identifier\n    * @return {Undefined}\n    */\n    _makePublicMethod(name, ns = \"/\") {\n      this.namespaces[ns].rpc_methods[name].protected = false;\n    }\n    /**\n    * Marks an event as protected.\n    * @method\n    * @param {String} name - event name\n    * @param {String} ns - namespace identifier\n    * @return {Undefined}\n    */\n    _makeProtectedEvent(name, ns = \"/\") {\n      this.namespaces[ns].events[name].protected = true;\n    }\n    /**\n    * Marks an event as public.\n    * @method\n    * @param {String} name - event name\n    * @param {String} ns - namespace identifier\n    * @return {Undefined}\n    */\n    _makePublicEvent(name, ns = \"/\") {\n      this.namespaces[ns].events[name].protected = false;\n    }\n    /**\n    * Removes a namespace and closes all connections\n    * @method\n    * @param {String} ns - namespace identifier\n    * @throws {TypeError}\n    * @return {Undefined}\n    */\n    closeNamespace(ns) {\n      const namespace = this.namespaces[ns];\n      if (namespace) {\n        delete namespace.rpc_methods;\n        delete namespace.events;\n        for (const socket of namespace.clients.values()) socket.close();\n        delete this.namespaces[ns];\n      }\n    }\n    /**\n    * Creates a new event that can be emitted to clients.\n    * @method\n    * @param {String} name - event name\n    * @param {String} ns - namespace identifier\n    * @throws {TypeError}\n    * @return {Object} - returns an IEvent object\n    */\n    event(name, ns = \"/\") {\n      if (!this.namespaces[ns]) this._generateNamespace(ns);else {\n        const index = this.namespaces[ns].events[name];\n        if (index !== void 0) throw new Error(`Already registered event ${ns}${name}`);\n      }\n      this.namespaces[ns].events[name] = {\n        sockets: [],\n        protected: false\n      };\n      this.on(name, (...params) => {\n        if (params.length === 1 && params[0] instanceof Object) params = params[0];\n        for (const socket_id of this.namespaces[ns].events[name].sockets) {\n          const socket = this.namespaces[ns].clients.get(socket_id);\n          if (!socket) continue;\n          socket.send(this.dataPack.encode({\n            notification: name,\n            params\n          }));\n        }\n      });\n      return {\n        protected: () => this._makeProtectedEvent(name, ns),\n        public: () => this._makePublicEvent(name, ns)\n      };\n    }\n    /**\n    * Returns a requested namespace object\n    * @method\n    * @param {String} name - namespace identifier\n    * @throws {TypeError}\n    * @return {Object} - namespace object\n    */\n    of(name) {\n      if (!this.namespaces[name]) this._generateNamespace(name);\n      const self = this;\n      return {\n        // self.register convenience method\n        register(fn_name, fn) {\n          if (arguments.length !== 2) throw new Error(\"must provide exactly two arguments\");\n          if (typeof fn_name !== \"string\") throw new Error(\"name must be a string\");\n          if (typeof fn !== \"function\") throw new Error(\"handler must be a function\");\n          return self.register(fn_name, fn, name);\n        },\n        // self.event convenience method\n        event(ev_name) {\n          if (arguments.length !== 1) throw new Error(\"must provide exactly one argument\");\n          if (typeof ev_name !== \"string\") throw new Error(\"name must be a string\");\n          return self.event(ev_name, name);\n        },\n        // self.eventList convenience method\n        get eventList() {\n          return Object.keys(self.namespaces[name].events);\n        },\n        /**\n        * Emits a specified event to this namespace.\n        * @inner\n        * @method\n        * @param {String} event - event name\n        * @param {Array} params - event parameters\n        * @return {Undefined}\n        */\n        emit(event, ...params) {\n          const nsEvent = self.namespaces[name].events[event];\n          if (nsEvent) for (const socket_id of nsEvent.sockets) {\n            const socket = self.namespaces[name].clients.get(socket_id);\n            if (!socket) continue;\n            socket.send(self.dataPack.encode({\n              notification: event,\n              params\n            }));\n          }\n        },\n        /**\n        * Returns a name of this namespace.\n        * @inner\n        * @method\n        * @kind constant\n        * @return {String}\n        */\n        get name() {\n          return name;\n        },\n        /**\n        * Returns a hash of websocket objects connected to this namespace.\n        * @inner\n        * @method\n        * @return {Object}\n        */\n        connected() {\n          const socket_ids = [...self.namespaces[name].clients.keys()];\n          return socket_ids.reduce((acc, curr) => ({\n            ...acc,\n            [curr]: self.namespaces[name].clients.get(curr)\n          }), {});\n        },\n        /**\n        * Returns a list of client unique identifiers connected to this namespace.\n        * @inner\n        * @method\n        * @return {Array}\n        */\n        clients() {\n          return self.namespaces[name];\n        }\n      };\n    }\n    /**\n    * Lists all created events in a given namespace. Defaults to \"/\".\n    * @method\n    * @param {String} ns - namespaces identifier\n    * @readonly\n    * @return {Array} - returns a list of created events\n    */\n    eventList(ns = \"/\") {\n      if (!this.namespaces[ns]) return [];\n      return Object.keys(this.namespaces[ns].events);\n    }\n    /**\n    * Creates a JSON-RPC 2.0 compliant error\n    * @method\n    * @param {Number} code - indicates the error type that occurred\n    * @param {String} message - provides a short description of the error\n    * @param {String|Object} data - details containing additional information about the error\n    * @return {Object}\n    */\n    createError(code, message, data) {\n      return {\n        code,\n        message,\n        data: data || null\n      };\n    }\n    /**\n    * Closes the server and terminates all clients.\n    * @method\n    * @return {Promise}\n    */\n    close() {\n      return new Promise((resolve, reject) => {\n        try {\n          this.wss.close();\n          this.emit(\"close\");\n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      });\n    }\n    /**\n    * Handles all WebSocket JSON RPC 2.0 requests.\n    * @private\n    * @param {Object} socket - ws socket instance\n    * @param {String} ns - namespaces identifier\n    * @return {Undefined}\n    */\n    _handleRPC(socket, ns = \"/\") {\n      socket.on(\"message\", async data => {\n        const msg_options = {};\n        if (data instanceof ArrayBuffer) {\n          msg_options.binary = true;\n          data = Buffer.from(data).toString();\n        }\n        if (socket.readyState !== 1) return;\n        let parsedData;\n        try {\n          parsedData = this.dataPack.decode(data);\n        } catch (error) {\n          return socket.send(this.dataPack.encode({\n            jsonrpc: \"2.0\",\n            error: createError(-32700, error.toString()),\n            id: null\n          }), msg_options);\n        }\n        if (Array.isArray(parsedData)) {\n          if (!parsedData.length) return socket.send(this.dataPack.encode({\n            jsonrpc: \"2.0\",\n            error: createError(-32600, \"Invalid array\"),\n            id: null\n          }), msg_options);\n          const responses = [];\n          for (const message of parsedData) {\n            const response2 = await this._runMethod(message, socket._id, ns);\n            if (!response2) continue;\n            responses.push(response2);\n          }\n          if (!responses.length) return;\n          return socket.send(this.dataPack.encode(responses), msg_options);\n        }\n        const response = await this._runMethod(parsedData, socket._id, ns);\n        if (!response) return;\n        return socket.send(this.dataPack.encode(response), msg_options);\n      });\n    }\n    /**\n    * Runs a defined RPC method.\n    * @private\n    * @param {Object} message - a message received\n    * @param {Object} socket_id - user's socket id\n    * @param {String} ns - namespaces identifier\n    * @return {Object|undefined}\n    */\n    async _runMethod(message, socket_id, ns = \"/\") {\n      if (typeof message !== \"object\" || message === null) return {\n        jsonrpc: \"2.0\",\n        error: createError(-32600),\n        id: null\n      };\n      if (message.jsonrpc !== \"2.0\") return {\n        jsonrpc: \"2.0\",\n        error: createError(-32600, \"Invalid JSON RPC version\"),\n        id: message.id || null\n      };\n      if (!message.method) return {\n        jsonrpc: \"2.0\",\n        error: createError(-32602, \"Method not specified\"),\n        id: message.id || null\n      };\n      if (typeof message.method !== \"string\") return {\n        jsonrpc: \"2.0\",\n        error: createError(-32600, \"Invalid method name\"),\n        id: message.id || null\n      };\n      if (message.params && typeof message.params === \"string\") return {\n        jsonrpc: \"2.0\",\n        error: createError(-32600),\n        id: message.id || null\n      };\n      if (message.method === \"rpc.on\") {\n        if (!message.params) return {\n          jsonrpc: \"2.0\",\n          error: createError(-32e3),\n          id: message.id || null\n        };\n        const results = {};\n        const event_names = Object.keys(this.namespaces[ns].events);\n        for (const name of message.params) {\n          const index = event_names.indexOf(name);\n          const namespace = this.namespaces[ns];\n          if (index === -1) {\n            results[name] = \"provided event invalid\";\n            continue;\n          }\n          if (namespace.events[event_names[index]].protected === true && namespace.clients.get(socket_id)[\"_authenticated\"] === false) {\n            return {\n              jsonrpc: \"2.0\",\n              error: createError(-32606),\n              id: message.id || null\n            };\n          }\n          const socket_index = namespace.events[event_names[index]].sockets.indexOf(socket_id);\n          if (socket_index >= 0) {\n            results[name] = \"socket has already been subscribed to event\";\n            continue;\n          }\n          namespace.events[event_names[index]].sockets.push(socket_id);\n          results[name] = \"ok\";\n        }\n        return {\n          jsonrpc: \"2.0\",\n          result: results,\n          id: message.id || null\n        };\n      } else if (message.method === \"rpc.off\") {\n        if (!message.params) return {\n          jsonrpc: \"2.0\",\n          error: createError(-32e3),\n          id: message.id || null\n        };\n        const results = {};\n        for (const name of message.params) {\n          if (!this.namespaces[ns].events[name]) {\n            results[name] = \"provided event invalid\";\n            continue;\n          }\n          const index = this.namespaces[ns].events[name].sockets.indexOf(socket_id);\n          if (index === -1) {\n            results[name] = \"not subscribed\";\n            continue;\n          }\n          this.namespaces[ns].events[name].sockets.splice(index, 1);\n          results[name] = \"ok\";\n        }\n        return {\n          jsonrpc: \"2.0\",\n          result: results,\n          id: message.id || null\n        };\n      } else if (message.method === \"rpc.login\") {\n        if (!message.params) return {\n          jsonrpc: \"2.0\",\n          error: createError(-32604),\n          id: message.id || null\n        };\n      }\n      if (!this.namespaces[ns].rpc_methods[message.method]) {\n        return {\n          jsonrpc: \"2.0\",\n          error: createError(-32601),\n          id: message.id || null\n        };\n      }\n      let response = null;\n      if (this.namespaces[ns].rpc_methods[message.method].protected === true && this.namespaces[ns].clients.get(socket_id)[\"_authenticated\"] === false) {\n        return {\n          jsonrpc: \"2.0\",\n          error: createError(-32605),\n          id: message.id || null\n        };\n      }\n      try {\n        response = await this.namespaces[ns].rpc_methods[message.method].fn(message.params, socket_id);\n      } catch (error) {\n        if (!message.id) return;\n        if (error instanceof Error) return {\n          jsonrpc: \"2.0\",\n          error: {\n            code: -32e3,\n            message: error.name,\n            data: error.message\n          },\n          id: message.id\n        };\n        return {\n          jsonrpc: \"2.0\",\n          error,\n          id: message.id\n        };\n      }\n      if (!message.id) return;\n      if (message.method === \"rpc.login\" && response === true) {\n        const s = this.namespaces[ns].clients.get(socket_id);\n        s[\"_authenticated\"] = true;\n        this.namespaces[ns].clients.set(socket_id, s);\n      }\n      return {\n        jsonrpc: \"2.0\",\n        result: response,\n        id: message.id\n      };\n    }\n    /**\n    * Generate a new namespace store.\n    * Also preregister some special namespace methods.\n    * @private\n    * @param {String} name - namespaces identifier\n    * @return {undefined}\n    */\n    _generateNamespace(name) {\n      this.namespaces[name] = {\n        rpc_methods: {\n          __listMethods: {\n            fn: () => Object.keys(this.namespaces[name].rpc_methods),\n            protected: false\n          }\n        },\n        clients: /* @__PURE__ */new Map(),\n        events: {}\n      };\n    }\n  };\n  var RPC_ERRORS = /* @__PURE__ */new Map([[-32e3, \"Event not provided\"], [-32600, \"Invalid Request\"], [-32601, \"Method not found\"], [-32602, \"Invalid params\"], [-32603, \"Internal error\"], [-32604, \"Params not found\"], [-32605, \"Method forbidden\"], [-32606, \"Event forbidden\"], [-32700, \"Parse error\"]]);\n  function createError(code, details) {\n    const error = {\n      code,\n      message: RPC_ERRORS.get(code) || \"Internal Server Error\"\n    };\n    if (details) error[\"data\"] = details;\n    return error;\n  }\n\n  // src/index.ts\n  var Client = class extends CommonClient {\n    constructor(address = \"ws://localhost:8080\", {\n      autoconnect = true,\n      reconnect = true,\n      reconnect_interval = 1e3,\n      max_reconnects = 5,\n      ...rest_options\n    } = {}, generate_request_id) {\n      super(WebSocket, address, {\n        autoconnect,\n        reconnect,\n        reconnect_interval,\n        max_reconnects,\n        ...rest_options\n      }, generate_request_id);\n    }\n  };\n  exports.Client = Client;\n  exports.CommonClient = CommonClient;\n  exports.DefaultDataPack = DefaultDataPack;\n  exports.Server = Server;\n  exports.WebSocket = WebSocket;\n  exports.createError = createError;\n});","lineCount":812,"map":[[2,2,1,0],[2,14,1,12],[4,2,3,0],[4,6,3,4,"WebSocketImpl"],[4,19,3,17],[4,22,3,20,"require"],[4,29,3,27],[4,30,3,27,"_dependencyMap"],[4,44,3,27],[4,53,3,32],[4,54,3,33],[5,2,4,0],[5,6,4,4,"eventemitter3"],[5,19,4,17],[5,22,4,20,"require"],[5,29,4,27],[5,30,4,27,"_dependencyMap"],[5,44,4,27],[5,64,4,43],[5,65,4,44],[6,2,5,0],[6,6,5,4,"url"],[6,9,5,7],[6,12,5,10,"require"],[6,19,5,17],[6,20,5,17,"_dependencyMap"],[6,34,5,17],[6,44,5,23],[6,45,5,24],[7,2,6,0],[7,6,6,4,"uuid"],[7,10,6,8],[7,13,6,11,"require"],[7,20,6,18],[7,21,6,18,"_dependencyMap"],[7,35,6,18],[7,46,6,25],[7,47,6,26],[8,2,8,0],[8,11,8,9,"_interopDefault"],[8,26,8,24,"_interopDefault"],[8,27,8,26,"e"],[8,28,8,27],[8,30,8,29],[9,4,8,31],[9,11,8,38,"e"],[9,12,8,39],[9,16,8,43,"e"],[9,17,8,44],[9,18,8,45,"__esModule"],[9,28,8,55],[9,31,8,58,"e"],[9,32,8,59],[9,35,8,62],[10,6,8,64,"default"],[10,13,8,71],[10,15,8,73,"e"],[11,4,8,75],[11,5,8,76],[12,2,8,78],[13,2,10,0],[13,6,10,4,"WebSocketImpl__default"],[13,28,10,26],[13,31,10,29],[13,44,10,42,"_interopDefault"],[13,59,10,57],[13,60,10,58,"WebSocketImpl"],[13,73,10,71],[13,74,10,72],[14,2,11,0],[14,6,11,4,"url__default"],[14,18,11,16],[14,21,11,19],[14,34,11,32,"_interopDefault"],[14,49,11,47],[14,50,11,48,"url"],[14,53,11,51],[14,54,11,52],[16,2,13,0],[17,2,14,0],[17,11,14,9,"WebSocket"],[17,20,14,18,"WebSocket"],[17,21,14,19,"address"],[17,28,14,26],[17,30,14,28,"options"],[17,37,14,35],[17,39,14,37],[18,4,15,2],[18,11,15,9],[18,15,15,13,"WebSocketImpl__default"],[18,37,15,35],[18,38,15,36,"default"],[18,45,15,43],[18,46,15,44,"address"],[18,53,15,51],[18,55,15,53,"options"],[18,62,15,60],[18,63,15,61],[19,2,16,0],[21,2,18,0],[22,2,19,0],[22,6,19,4,"DefaultDataPack"],[22,21,19,19],[22,24,19,22],[22,30,19,28],[23,4,20,2,"encode"],[23,10,20,8,"encode"],[23,11,20,9,"value"],[23,16,20,14],[23,18,20,16],[24,6,21,4],[24,13,21,11,"JSON"],[24,17,21,15],[24,18,21,16,"stringify"],[24,27,21,25],[24,28,21,26,"value"],[24,33,21,31],[24,34,21,32],[25,4,22,2],[26,4,23,2,"decode"],[26,10,23,8,"decode"],[26,11,23,9,"value"],[26,16,23,14],[26,18,23,16],[27,6,24,4],[27,13,24,11,"JSON"],[27,17,24,15],[27,18,24,16,"parse"],[27,23,24,21],[27,24,24,22,"value"],[27,29,24,27],[27,30,24,28],[28,4,25,2],[29,2,26,0],[29,3,26,1],[31,2,28,0],[32,2,29,0],[32,6,29,4,"CommonClient"],[32,18,29,16],[32,21,29,19],[32,35,29,33,"eventemitter3"],[32,48,29,46],[32,49,29,47,"EventEmitter"],[32,61,29,59],[32,62,29,60],[33,4,46,2],[34,0,47,0],[35,0,48,0],[36,0,49,0],[37,0,50,0],[38,0,51,0],[39,0,52,0],[40,0,53,0],[41,0,54,0],[42,0,55,0],[43,4,56,2,"constructor"],[43,15,56,13,"constructor"],[43,16,56,14,"webSocketFactory"],[43,32,56,30],[43,34,56,32,"address"],[43,41,56,39],[43,44,56,42],[43,65,56,63],[43,67,56,65],[44,6,57,4,"autoconnect"],[44,17,57,15],[44,20,57,18],[44,24,57,22],[45,6,58,4,"reconnect"],[45,15,58,13],[45,18,58,16],[45,22,58,20],[46,6,59,4,"reconnect_interval"],[46,24,59,22],[46,27,59,25],[46,30,59,28],[47,6,60,4,"max_reconnects"],[47,20,60,18],[47,23,60,21],[47,24,60,22],[48,6,61,4],[48,9,61,7,"rest_options"],[49,4,62,2],[49,5,62,3],[49,8,62,6],[49,9,62,7],[49,10,62,8],[49,12,62,10,"generate_request_id"],[49,31,62,29],[49,33,62,31,"dataPack"],[49,41,62,39],[49,43,62,41],[50,6,63,4],[50,11,63,9],[50,12,63,10],[50,13,63,11],[51,6,64,4],[51,10,64,8],[51,11,64,9,"webSocketFactory"],[51,27,64,25],[51,30,64,28,"webSocketFactory"],[51,46,64,44],[52,6,65,4],[52,10,65,8],[52,11,65,9,"queue"],[52,16,65,14],[52,19,65,17],[52,20,65,18],[52,21,65,19],[53,6,66,4],[53,10,66,8],[53,11,66,9,"rpc_id"],[53,17,66,15],[53,20,66,18],[53,21,66,19],[54,6,67,4],[54,10,67,8],[54,11,67,9,"address"],[54,18,67,16],[54,21,67,19,"address"],[54,28,67,26],[55,6,68,4],[55,10,68,8],[55,11,68,9,"autoconnect"],[55,22,68,20],[55,25,68,23,"autoconnect"],[55,36,68,34],[56,6,69,4],[56,10,69,8],[56,11,69,9,"ready"],[56,16,69,14],[56,19,69,17],[56,24,69,22],[57,6,70,4],[57,10,70,8],[57,11,70,9,"reconnect"],[57,20,70,18],[57,23,70,21,"reconnect"],[57,32,70,30],[58,6,71,4],[58,10,71,8],[58,11,71,9,"reconnect_timer_id"],[58,29,71,27],[58,32,71,30],[58,37,71,35],[58,38,71,36],[59,6,72,4],[59,10,72,8],[59,11,72,9,"reconnect_interval"],[59,29,72,27],[59,32,72,30,"reconnect_interval"],[59,50,72,48],[60,6,73,4],[60,10,73,8],[60,11,73,9,"max_reconnects"],[60,25,73,23],[60,28,73,26,"max_reconnects"],[60,42,73,40],[61,6,74,4],[61,10,74,8],[61,11,74,9,"rest_options"],[61,23,74,21],[61,26,74,24,"rest_options"],[61,38,74,36],[62,6,75,4],[62,10,75,8],[62,11,75,9,"current_reconnects"],[62,29,75,27],[62,32,75,30],[62,33,75,31],[63,6,76,4],[63,10,76,8],[63,11,76,9,"generate_request_id"],[63,30,76,28],[63,33,76,31,"generate_request_id"],[63,52,76,50],[63,57,76,55],[63,63,76,61],[63,70,76,68],[63,74,76,72],[63,75,76,73,"rpc_id"],[63,81,76,79],[63,86,76,84],[63,94,76,92],[63,97,76,95],[63,99,76,97],[63,103,76,101],[63,104,76,102,"rpc_id"],[63,110,76,108],[63,113,76,111,"Number"],[63,119,76,117],[63,120,76,118],[63,124,76,122],[63,125,76,123,"rpc_id"],[63,131,76,129],[63,132,76,130],[63,135,76,133],[63,136,76,134],[63,137,76,135],[64,6,77,4],[64,10,77,8],[64,11,77,9,"dataPack"],[64,19,77,17],[64,21,77,19],[64,25,77,23],[64,26,77,24,"dataPack"],[64,34,77,32],[64,37,77,35],[64,41,77,39,"DefaultDataPack"],[64,56,77,54],[64,57,77,55],[64,58,77,56],[64,59,77,57],[64,64,78,9],[64,68,78,13],[64,69,78,14,"dataPack"],[64,77,78,22],[64,80,78,25,"dataPack"],[64,88,78,33],[65,6,79,4],[65,10,79,8],[65,14,79,12],[65,15,79,13,"autoconnect"],[65,26,79,24],[65,28,80,6],[65,32,80,10],[65,33,80,11,"_connect"],[65,41,80,19],[65,42,80,20],[65,46,80,24],[65,47,80,25,"address"],[65,54,80,32],[65,56,80,34],[66,8,81,8,"autoconnect"],[66,19,81,19],[66,21,81,21],[66,25,81,25],[66,26,81,26,"autoconnect"],[66,37,81,37],[67,8,82,8,"reconnect"],[67,17,82,17],[67,19,82,19],[67,23,82,23],[67,24,82,24,"reconnect"],[67,33,82,33],[68,8,83,8,"reconnect_interval"],[68,26,83,26],[68,28,83,28],[68,32,83,32],[68,33,83,33,"reconnect_interval"],[68,51,83,51],[69,8,84,8,"max_reconnects"],[69,22,84,22],[69,24,84,24],[69,28,84,28],[69,29,84,29,"max_reconnects"],[69,43,84,43],[70,8,85,8],[70,11,85,11],[70,15,85,15],[70,16,85,16,"rest_options"],[71,6,86,6],[71,7,86,7],[71,8,86,8],[72,4,87,2],[73,4,88,2],[74,0,89,0],[75,0,90,0],[76,0,91,0],[77,0,92,0],[78,4,93,2,"connect"],[78,11,93,9,"connect"],[78,12,93,9],[78,14,93,12],[79,6,94,4],[79,10,94,8],[79,14,94,12],[79,15,94,13,"socket"],[79,21,94,19],[79,23,94,21],[80,6,95,4],[80,10,95,8],[80,11,95,9,"_connect"],[80,19,95,17],[80,20,95,18],[80,24,95,22],[80,25,95,23,"address"],[80,32,95,30],[80,34,95,32],[81,8,96,6,"autoconnect"],[81,19,96,17],[81,21,96,19],[81,25,96,23],[81,26,96,24,"autoconnect"],[81,37,96,35],[82,8,97,6,"reconnect"],[82,17,97,15],[82,19,97,17],[82,23,97,21],[82,24,97,22,"reconnect"],[82,33,97,31],[83,8,98,6,"reconnect_interval"],[83,26,98,24],[83,28,98,26],[83,32,98,30],[83,33,98,31,"reconnect_interval"],[83,51,98,49],[84,8,99,6,"max_reconnects"],[84,22,99,20],[84,24,99,22],[84,28,99,26],[84,29,99,27,"max_reconnects"],[84,43,99,41],[85,8,100,6],[85,11,100,9],[85,15,100,13],[85,16,100,14,"rest_options"],[86,6,101,4],[86,7,101,5],[86,8,101,6],[87,4,102,2],[88,4,103,2],[89,0,104,0],[90,0,105,0],[91,0,106,0],[92,0,107,0],[93,0,108,0],[94,0,109,0],[95,0,110,0],[96,0,111,0],[97,4,112,2,"call"],[97,8,112,6,"call"],[97,9,112,7,"method"],[97,15,112,13],[97,17,112,15,"params"],[97,23,112,21],[97,25,112,23,"timeout"],[97,32,112,30],[97,34,112,32,"ws_opts"],[97,41,112,39],[97,43,112,41],[98,6,113,4],[98,10,113,8],[98,11,113,9,"ws_opts"],[98,18,113,16],[98,22,113,20],[98,30,113,28],[98,35,113,33],[98,42,113,40,"timeout"],[98,49,113,47],[98,51,113,49],[99,8,114,6,"ws_opts"],[99,15,114,13],[99,18,114,16,"timeout"],[99,25,114,23],[100,8,115,6,"timeout"],[100,15,115,13],[100,18,115,16],[100,22,115,20],[101,6,116,4],[102,6,117,4],[102,13,117,11],[102,17,117,15,"Promise"],[102,24,117,22],[102,25,117,23],[102,26,117,24,"resolve"],[102,33,117,31],[102,35,117,33,"reject"],[102,41,117,39],[102,46,117,44],[103,8,118,6],[103,12,118,10],[103,13,118,11],[103,17,118,15],[103,18,118,16,"ready"],[103,23,118,21],[103,25,118,23],[103,32,118,30,"reject"],[103,38,118,36],[103,39,118,37],[103,43,118,41,"Error"],[103,48,118,46],[103,49,118,47],[103,67,118,65],[103,68,118,66],[103,69,118,67],[104,8,119,6],[104,14,119,12,"rpc_id"],[104,20,119,18],[104,23,119,21],[104,27,119,25],[104,28,119,26,"generate_request_id"],[104,47,119,45],[104,48,119,46,"method"],[104,54,119,52],[104,56,119,54,"params"],[104,62,119,60],[104,63,119,61],[105,8,120,6],[105,14,120,12,"message"],[105,21,120,19],[105,24,120,22],[106,10,121,8,"jsonrpc"],[106,17,121,15],[106,19,121,17],[106,24,121,22],[107,10,122,8,"method"],[107,16,122,14],[108,10,123,8,"params"],[108,16,123,14],[108,18,123,16,"params"],[108,24,123,22],[108,28,123,26],[108,33,123,31],[108,34,123,32],[109,10,124,8,"id"],[109,12,124,10],[109,14,124,12,"rpc_id"],[110,8,125,6],[110,9,125,7],[111,8,126,6],[111,12,126,10],[111,13,126,11,"socket"],[111,19,126,17],[111,20,126,18,"send"],[111,24,126,22],[111,25,126,23],[111,29,126,27],[111,30,126,28,"dataPack"],[111,38,126,36],[111,39,126,37,"encode"],[111,45,126,43],[111,46,126,44,"message"],[111,53,126,51],[111,54,126,52],[111,56,126,54,"ws_opts"],[111,63,126,61],[111,65,126,64,"error"],[111,70,126,69],[111,74,126,74],[112,10,127,8],[112,14,127,12,"error"],[112,19,127,17],[112,21,127,19],[112,28,127,26,"reject"],[112,34,127,32],[112,35,127,33,"error"],[112,40,127,38],[112,41,127,39],[113,10,128,8],[113,14,128,12],[113,15,128,13,"queue"],[113,20,128,18],[113,21,128,19,"rpc_id"],[113,27,128,25],[113,28,128,26],[113,31,128,29],[114,12,128,31,"promise"],[114,19,128,38],[114,21,128,40],[114,22,128,41,"resolve"],[114,29,128,48],[114,31,128,50,"reject"],[114,37,128,56],[115,10,128,58],[115,11,128,59],[116,10,129,8],[116,14,129,12,"timeout"],[116,21,129,19],[116,23,129,21],[117,12,130,10],[117,16,130,14],[117,17,130,15,"queue"],[117,22,130,20],[117,23,130,21,"rpc_id"],[117,29,130,27],[117,30,130,28],[117,31,130,29,"timeout"],[117,38,130,36],[117,41,130,39,"setTimeout"],[117,51,130,49],[117,52,130,50],[117,58,130,56],[118,14,131,12],[118,21,131,19],[118,25,131,23],[118,26,131,24,"queue"],[118,31,131,29],[118,32,131,30,"rpc_id"],[118,38,131,36],[118,39,131,37],[119,14,132,12,"reject"],[119,20,132,18],[119,21,132,19],[119,25,132,23,"Error"],[119,30,132,28],[119,31,132,29],[119,46,132,44],[119,47,132,45],[119,48,132,46],[120,12,133,10],[120,13,133,11],[120,15,133,13,"timeout"],[120,22,133,20],[120,23,133,21],[121,10,134,8],[122,8,135,6],[122,9,135,7],[122,10,135,8],[123,6,136,4],[123,7,136,5],[123,8,136,6],[124,4,137,2],[125,4,138,2],[126,0,139,0],[127,0,140,0],[128,0,141,0],[129,0,142,0],[130,0,143,0],[131,4,144,2],[131,10,144,8,"login"],[131,15,144,13,"login"],[131,16,144,14,"params"],[131,22,144,20],[131,24,144,22],[132,6,145,4],[132,12,145,10,"resp"],[132,16,145,14],[132,19,145,17],[132,25,145,23],[132,29,145,27],[132,30,145,28,"call"],[132,34,145,32],[132,35,145,33],[132,46,145,44],[132,48,145,46,"params"],[132,54,145,52],[132,55,145,53],[133,6,146,4],[133,10,146,8],[133,11,146,9,"resp"],[133,15,146,13],[133,17,146,15],[133,23,146,21],[133,27,146,25,"Error"],[133,32,146,30],[133,33,146,31],[133,56,146,54],[133,57,146,55],[134,6,147,4],[134,13,147,11,"resp"],[134,17,147,15],[135,4,148,2],[136,4,149,2],[137,0,150,0],[138,0,151,0],[139,0,152,0],[140,0,153,0],[141,4,154,2],[141,10,154,8,"listMethods"],[141,21,154,19,"listMethods"],[141,22,154,19],[141,24,154,22],[142,6,155,4],[142,13,155,11],[142,19,155,17],[142,23,155,21],[142,24,155,22,"call"],[142,28,155,26],[142,29,155,27],[142,44,155,42],[142,45,155,43],[143,4,156,2],[144,4,157,2],[145,0,158,0],[146,0,159,0],[147,0,160,0],[148,0,161,0],[149,0,162,0],[150,0,163,0],[151,4,164,2,"notify"],[151,10,164,8,"notify"],[151,11,164,9,"method"],[151,17,164,15],[151,19,164,17,"params"],[151,25,164,23],[151,27,164,25],[152,6,165,4],[152,13,165,11],[152,17,165,15,"Promise"],[152,24,165,22],[152,25,165,23],[152,26,165,24,"resolve"],[152,33,165,31],[152,35,165,33,"reject"],[152,41,165,39],[152,46,165,44],[153,8,166,6],[153,12,166,10],[153,13,166,11],[153,17,166,15],[153,18,166,16,"ready"],[153,23,166,21],[153,25,166,23],[153,32,166,30,"reject"],[153,38,166,36],[153,39,166,37],[153,43,166,41,"Error"],[153,48,166,46],[153,49,166,47],[153,67,166,65],[153,68,166,66],[153,69,166,67],[154,8,167,6],[154,14,167,12,"message"],[154,21,167,19],[154,24,167,22],[155,10,168,8,"jsonrpc"],[155,17,168,15],[155,19,168,17],[155,24,168,22],[156,10,169,8,"method"],[156,16,169,14],[157,10,170,8,"params"],[158,8,171,6],[158,9,171,7],[159,8,172,6],[159,12,172,10],[159,13,172,11,"socket"],[159,19,172,17],[159,20,172,18,"send"],[159,24,172,22],[159,25,172,23],[159,29,172,27],[159,30,172,28,"dataPack"],[159,38,172,36],[159,39,172,37,"encode"],[159,45,172,43],[159,46,172,44,"message"],[159,53,172,51],[159,54,172,52],[159,56,172,55,"error"],[159,61,172,60],[159,65,172,65],[160,10,173,8],[160,14,173,12,"error"],[160,19,173,17],[160,21,173,19],[160,28,173,26,"reject"],[160,34,173,32],[160,35,173,33,"error"],[160,40,173,38],[160,41,173,39],[161,10,174,8,"resolve"],[161,17,174,15],[161,18,174,16],[161,19,174,17],[162,8,175,6],[162,9,175,7],[162,10,175,8],[163,6,176,4],[163,7,176,5],[163,8,176,6],[164,4,177,2],[165,4,178,2],[166,0,179,0],[167,0,180,0],[168,0,181,0],[169,0,182,0],[170,0,183,0],[171,0,184,0],[172,4,185,2],[172,10,185,8,"subscribe"],[172,19,185,17,"subscribe"],[172,20,185,18,"event"],[172,25,185,23],[172,27,185,25],[173,6,186,4],[173,10,186,8],[173,17,186,15,"event"],[173,22,186,20],[173,27,186,25],[173,35,186,33],[173,37,186,35,"event"],[173,42,186,40],[173,45,186,43],[173,46,186,44,"event"],[173,51,186,49],[173,52,186,50],[174,6,187,4],[174,12,187,10,"result"],[174,18,187,16],[174,21,187,19],[174,27,187,25],[174,31,187,29],[174,32,187,30,"call"],[174,36,187,34],[174,37,187,35],[174,45,187,43],[174,47,187,45,"event"],[174,52,187,50],[174,53,187,51],[175,6,188,4],[175,10,188,8],[175,17,188,15,"event"],[175,22,188,20],[175,27,188,25],[175,35,188,33],[175,39,188,37,"result"],[175,45,188,43],[175,46,188,44,"event"],[175,51,188,49],[175,52,188,50],[175,57,188,55],[175,61,188,59],[175,63,189,6],[175,69,189,12],[175,73,189,16,"Error"],[175,78,189,21],[175,79,190,8],[175,113,190,42],[175,116,190,45,"event"],[175,121,190,50],[175,124,190,53],[175,134,190,63],[175,137,190,66,"result"],[175,143,190,72],[175,144,190,73,"event"],[175,149,190,78],[175,150,191,6],[175,151,191,7],[176,6,192,4],[176,13,192,11,"result"],[176,19,192,17],[177,4,193,2],[178,4,194,2],[179,0,195,0],[180,0,196,0],[181,0,197,0],[182,0,198,0],[183,0,199,0],[184,0,200,0],[185,4,201,2],[185,10,201,8,"unsubscribe"],[185,21,201,19,"unsubscribe"],[185,22,201,20,"event"],[185,27,201,25],[185,29,201,27],[186,6,202,4],[186,10,202,8],[186,17,202,15,"event"],[186,22,202,20],[186,27,202,25],[186,35,202,33],[186,37,202,35,"event"],[186,42,202,40],[186,45,202,43],[186,46,202,44,"event"],[186,51,202,49],[186,52,202,50],[187,6,203,4],[187,12,203,10,"result"],[187,18,203,16],[187,21,203,19],[187,27,203,25],[187,31,203,29],[187,32,203,30,"call"],[187,36,203,34],[187,37,203,35],[187,46,203,44],[187,48,203,46,"event"],[187,53,203,51],[187,54,203,52],[188,6,204,4],[188,10,204,8],[188,17,204,15,"event"],[188,22,204,20],[188,27,204,25],[188,35,204,33],[188,39,204,37,"result"],[188,45,204,43],[188,46,204,44,"event"],[188,51,204,49],[188,52,204,50],[188,57,204,55],[188,61,204,59],[188,63,205,6],[188,69,205,12],[188,73,205,16,"Error"],[188,78,205,21],[188,79,205,22],[188,122,205,65],[188,125,205,68,"result"],[188,131,205,74],[188,132,205,75],[189,6,206,4],[189,13,206,11,"result"],[189,19,206,17],[190,4,207,2],[191,4,208,2],[192,0,209,0],[193,0,210,0],[194,0,211,0],[195,0,212,0],[196,0,213,0],[197,0,214,0],[198,4,215,2,"close"],[198,9,215,7,"close"],[198,10,215,8,"code"],[198,14,215,12],[198,16,215,14,"data"],[198,20,215,18],[198,22,215,20],[199,6,216,4],[199,10,216,8],[199,11,216,9,"socket"],[199,17,216,15],[199,18,216,16,"close"],[199,23,216,21],[199,24,216,22,"code"],[199,28,216,26],[199,32,216,30],[199,35,216,33],[199,37,216,35,"data"],[199,41,216,39],[199,42,216,40],[200,4,217,2],[201,4,218,2],[202,0,219,0],[203,0,220,0],[204,0,221,0],[205,0,222,0],[206,0,223,0],[207,4,224,2,"setAutoReconnect"],[207,20,224,18,"setAutoReconnect"],[207,21,224,19,"reconnect"],[207,30,224,28],[207,32,224,30],[208,6,225,4],[208,10,225,8],[208,11,225,9,"reconnect"],[208,20,225,18],[208,23,225,21,"reconnect"],[208,32,225,30],[209,4,226,2],[210,4,227,2],[211,0,228,0],[212,0,229,0],[213,0,230,0],[214,0,231,0],[215,0,232,0],[216,4,233,2,"setReconnectInterval"],[216,24,233,22,"setReconnectInterval"],[216,25,233,23,"interval"],[216,33,233,31],[216,35,233,33],[217,6,234,4],[217,10,234,8],[217,11,234,9,"reconnect_interval"],[217,29,234,27],[217,32,234,30,"interval"],[217,40,234,38],[218,4,235,2],[219,4,236,2],[220,0,237,0],[221,0,238,0],[222,0,239,0],[223,0,240,0],[224,0,241,0],[225,4,242,2,"setMaxReconnects"],[225,20,242,18,"setMaxReconnects"],[225,21,242,19,"max_reconnects"],[225,35,242,33],[225,37,242,35],[226,6,243,4],[226,10,243,8],[226,11,243,9,"max_reconnects"],[226,25,243,23],[226,28,243,26,"max_reconnects"],[226,42,243,40],[227,4,244,2],[228,4,245,2],[229,0,246,0],[230,0,247,0],[231,0,248,0],[232,0,249,0],[233,0,250,0],[234,0,251,0],[235,0,252,0],[236,4,253,2,"_connect"],[236,12,253,10,"_connect"],[236,13,253,11,"address"],[236,20,253,18],[236,22,253,20,"options"],[236,29,253,27],[236,31,253,29],[237,6,254,4,"clearTimeout"],[237,18,254,16],[237,19,254,17],[237,23,254,21],[237,24,254,22,"reconnect_timer_id"],[237,42,254,40],[237,43,254,41],[238,6,255,4],[238,10,255,8],[238,11,255,9,"socket"],[238,17,255,15],[238,20,255,18],[238,24,255,22],[238,25,255,23,"webSocketFactory"],[238,41,255,39],[238,42,255,40,"address"],[238,49,255,47],[238,51,255,49,"options"],[238,58,255,56],[238,59,255,57],[239,6,256,4],[239,10,256,8],[239,11,256,9,"socket"],[239,17,256,15],[239,18,256,16,"addEventListener"],[239,34,256,32],[239,35,256,33],[239,41,256,39],[239,43,256,41],[239,49,256,47],[240,8,257,6],[240,12,257,10],[240,13,257,11,"ready"],[240,18,257,16],[240,21,257,19],[240,25,257,23],[241,8,258,6],[241,12,258,10],[241,13,258,11,"emit"],[241,17,258,15],[241,18,258,16],[241,24,258,22],[241,25,258,23],[242,8,259,6],[242,12,259,10],[242,13,259,11,"current_reconnects"],[242,31,259,29],[242,34,259,32],[242,35,259,33],[243,6,260,4],[243,7,260,5],[243,8,260,6],[244,6,261,4],[244,10,261,8],[244,11,261,9,"socket"],[244,17,261,15],[244,18,261,16,"addEventListener"],[244,34,261,32],[244,35,261,33],[244,44,261,42],[244,46,261,44],[244,47,261,45],[245,8,261,47,"data"],[245,12,261,51],[245,14,261,53,"message"],[246,6,261,61],[246,7,261,62],[246,12,261,67],[247,8,262,6],[247,12,262,10,"message"],[247,19,262,17],[247,31,262,29,"ArrayBuffer"],[247,42,262,40],[247,44,263,8,"message"],[247,51,263,15],[247,54,263,18,"Buffer"],[247,60,263,24],[247,61,263,25,"from"],[247,65,263,29],[247,66,263,30,"message"],[247,73,263,37],[247,74,263,38],[247,75,263,39,"toString"],[247,83,263,47],[247,84,263,48],[247,85,263,49],[248,8,264,6],[248,12,264,10],[249,10,265,8,"message"],[249,17,265,15],[249,20,265,18],[249,24,265,22],[249,25,265,23,"dataPack"],[249,33,265,31],[249,34,265,32,"decode"],[249,40,265,38],[249,41,265,39,"message"],[249,48,265,46],[249,49,265,47],[250,8,266,6],[250,9,266,7],[250,10,266,8],[250,17,266,15,"error"],[250,22,266,20],[250,24,266,22],[251,10,267,8],[252,8,268,6],[253,8,269,6],[253,12,269,10,"message"],[253,19,269,17],[253,20,269,18,"notification"],[253,32,269,30],[253,36,269,34],[253,40,269,38],[253,41,269,39,"listeners"],[253,50,269,48],[253,51,269,49,"message"],[253,58,269,56],[253,59,269,57,"notification"],[253,71,269,69],[253,72,269,70],[253,73,269,71,"length"],[253,79,269,77],[253,81,269,79],[254,10,270,8],[254,14,270,12],[254,15,270,13,"Object"],[254,21,270,19],[254,22,270,20,"keys"],[254,26,270,24],[254,27,270,25,"message"],[254,34,270,32],[254,35,270,33,"params"],[254,41,270,39],[254,42,270,40],[254,43,270,41,"length"],[254,49,270,47],[254,51,271,10],[254,58,271,17],[254,62,271,21],[254,63,271,22,"emit"],[254,67,271,26],[254,68,271,27,"message"],[254,75,271,34],[254,76,271,35,"notification"],[254,88,271,47],[254,89,271,48],[255,10,272,8],[255,16,272,14,"args"],[255,20,272,18],[255,23,272,21],[255,24,272,22,"message"],[255,31,272,29],[255,32,272,30,"notification"],[255,44,272,42],[255,45,272,43],[256,10,273,8],[256,14,273,12,"message"],[256,21,273,19],[256,22,273,20,"params"],[256,28,273,26],[256,29,273,27,"constructor"],[256,40,273,38],[256,45,273,43,"Object"],[256,51,273,49],[256,53,273,51,"args"],[256,57,273,55],[256,58,273,56,"push"],[256,62,273,60],[256,63,273,61,"message"],[256,70,273,68],[256,71,273,69,"params"],[256,77,273,75],[256,78,273,76],[256,79,273,77],[256,84,275,10],[256,89,275,15],[256,93,275,19,"i"],[256,94,275,20],[256,97,275,23],[256,98,275,24],[256,100,275,26,"i"],[256,101,275,27],[256,104,275,30,"message"],[256,111,275,37],[256,112,275,38,"params"],[256,118,275,44],[256,119,275,45,"length"],[256,125,275,51],[256,127,275,53,"i"],[256,128,275,54],[256,130,275,56],[256,132,276,12,"args"],[256,136,276,16],[256,137,276,17,"push"],[256,141,276,21],[256,142,276,22,"message"],[256,149,276,29],[256,150,276,30,"params"],[256,156,276,36],[256,157,276,37,"i"],[256,158,276,38],[256,159,276,39],[256,160,276,40],[257,10,277,8],[257,17,277,15,"Promise"],[257,24,277,22],[257,25,277,23,"resolve"],[257,32,277,30],[257,33,277,31],[257,34,277,32],[257,35,277,33,"then"],[257,39,277,37],[257,40,277,38],[257,46,277,44],[258,12,278,10],[258,16,278,14],[258,17,278,15,"emit"],[258,21,278,19],[258,22,278,20,"apply"],[258,27,278,25],[258,28,278,26],[258,32,278,30],[258,34,278,32,"args"],[258,38,278,36],[258,39,278,37],[259,10,279,8],[259,11,279,9],[259,12,279,10],[260,8,280,6],[261,8,281,6],[261,12,281,10],[261,13,281,11],[261,17,281,15],[261,18,281,16,"queue"],[261,23,281,21],[261,24,281,22,"message"],[261,31,281,29],[261,32,281,30,"id"],[261,34,281,32],[261,35,281,33],[261,37,281,35],[262,10,282,8],[262,14,282,12,"message"],[262,21,282,19],[262,22,282,20,"method"],[262,28,282,26],[262,30,282,28],[263,12,283,10],[263,19,283,17,"Promise"],[263,26,283,24],[263,27,283,25,"resolve"],[263,34,283,32],[263,35,283,33],[263,36,283,34],[263,37,283,35,"then"],[263,41,283,39],[263,42,283,40],[263,48,283,46],[264,14,284,12],[264,18,284,16],[264,19,284,17,"emit"],[264,23,284,21],[264,24,284,22,"message"],[264,31,284,29],[264,32,284,30,"method"],[264,38,284,36],[264,40,284,38,"message"],[264,47,284,45],[264,49,284,47,"params"],[264,55,284,53],[264,56,284,54],[265,12,285,10],[265,13,285,11],[265,14,285,12],[266,10,286,8],[267,10,287,8],[268,8,288,6],[269,8,289,6],[269,12,289,10],[269,19,289,17],[269,23,289,21,"message"],[269,30,289,28],[269,35,289,33],[269,43,289,41],[269,47,289,45,"message"],[269,54,289,52],[269,56,290,8],[269,60,290,12],[269,61,290,13,"queue"],[269,66,290,18],[269,67,290,19,"message"],[269,74,290,26],[269,75,290,27,"id"],[269,77,290,29],[269,78,290,30],[269,79,290,31,"promise"],[269,86,290,38],[269,87,290,39],[269,88,290,40],[269,89,290,41],[269,90,291,10],[269,94,291,14,"Error"],[269,99,291,19],[269,100,292,12],[269,192,293,10],[269,193,294,8],[269,194,294,9],[270,8,295,6],[270,12,295,10],[270,16,295,14],[270,17,295,15,"queue"],[270,22,295,20],[270,23,295,21,"message"],[270,30,295,28],[270,31,295,29,"id"],[270,33,295,31],[270,34,295,32],[270,35,295,33,"timeout"],[270,42,295,40],[270,44,296,8,"clearTimeout"],[270,56,296,20],[270,57,296,21],[270,61,296,25],[270,62,296,26,"queue"],[270,67,296,31],[270,68,296,32,"message"],[270,75,296,39],[270,76,296,40,"id"],[270,78,296,42],[270,79,296,43],[270,80,296,44,"timeout"],[270,87,296,51],[270,88,296,52],[271,8,297,6],[271,12,297,10,"message"],[271,19,297,17],[271,20,297,18,"error"],[271,25,297,23],[271,27,297,25],[271,31,297,29],[271,32,297,30,"queue"],[271,37,297,35],[271,38,297,36,"message"],[271,45,297,43],[271,46,297,44,"id"],[271,48,297,46],[271,49,297,47],[271,50,297,48,"promise"],[271,57,297,55],[271,58,297,56],[271,59,297,57],[271,60,297,58],[271,61,297,59,"message"],[271,68,297,66],[271,69,297,67,"error"],[271,74,297,72],[271,75,297,73],[271,76,297,74],[271,81,298,11],[271,85,298,15],[271,86,298,16,"queue"],[271,91,298,21],[271,92,298,22,"message"],[271,99,298,29],[271,100,298,30,"id"],[271,102,298,32],[271,103,298,33],[271,104,298,34,"promise"],[271,111,298,41],[271,112,298,42],[271,113,298,43],[271,114,298,44],[271,115,298,45,"message"],[271,122,298,52],[271,123,298,53,"result"],[271,129,298,59],[271,130,298,60],[272,8,299,6],[272,15,299,13],[272,19,299,17],[272,20,299,18,"queue"],[272,25,299,23],[272,26,299,24,"message"],[272,33,299,31],[272,34,299,32,"id"],[272,36,299,34],[272,37,299,35],[273,6,300,4],[273,7,300,5],[273,8,300,6],[274,6,301,4],[274,10,301,8],[274,11,301,9,"socket"],[274,17,301,15],[274,18,301,16,"addEventListener"],[274,34,301,32],[274,35,301,33],[274,42,301,40],[274,44,301,43,"error"],[274,49,301,48],[274,53,301,53],[274,57,301,57],[274,58,301,58,"emit"],[274,62,301,62],[274,63,301,63],[274,70,301,70],[274,72,301,72,"error"],[274,77,301,77],[274,78,301,78],[274,79,301,79],[275,6,302,4],[275,10,302,8],[275,11,302,9,"socket"],[275,17,302,15],[275,18,302,16,"addEventListener"],[275,34,302,32],[275,35,302,33],[275,42,302,40],[275,44,302,42],[275,45,302,43],[276,8,302,45,"code"],[276,12,302,49],[277,8,302,51,"reason"],[278,6,302,58],[278,7,302,59],[278,12,302,64],[279,8,303,6],[279,12,303,10],[279,16,303,14],[279,17,303,15,"ready"],[279,22,303,20],[279,24,304,8,"setTimeout"],[279,34,304,18],[279,35,304,19],[279,41,304,25],[279,45,304,29],[279,46,304,30,"emit"],[279,50,304,34],[279,51,304,35],[279,58,304,42],[279,60,304,44,"code"],[279,64,304,48],[279,66,304,50,"reason"],[279,72,304,56],[279,73,304,57],[279,75,304,59],[279,76,304,60],[279,77,304,61],[280,8,305,6],[280,12,305,10],[280,13,305,11,"ready"],[280,18,305,16],[280,21,305,19],[280,26,305,24],[281,8,306,6],[281,12,306,10],[281,13,306,11,"socket"],[281,19,306,17],[281,22,306,20],[281,27,306,25],[281,28,306,26],[282,8,307,6],[282,12,307,10,"code"],[282,16,307,14],[282,21,307,19],[282,24,307,22],[282,26,307,24],[283,8,308,6],[283,12,308,10],[283,13,308,11,"current_reconnects"],[283,31,308,29],[283,33,308,31],[284,8,309,6],[284,12,309,10],[284,16,309,14],[284,17,309,15,"reconnect"],[284,26,309,24],[284,31,309,29],[284,35,309,33],[284,36,309,34,"max_reconnects"],[284,50,309,48],[284,53,309,51],[284,57,309,55],[284,58,309,56,"current_reconnects"],[284,76,309,74],[284,80,309,78],[284,84,309,82],[284,85,309,83,"max_reconnects"],[284,99,309,97],[284,104,309,102],[284,105,309,103],[284,106,309,104],[284,108,310,8],[284,112,310,12],[284,113,310,13,"reconnect_timer_id"],[284,131,310,31],[284,134,310,34,"setTimeout"],[284,144,310,44],[284,145,311,10],[284,151,311,16],[284,155,311,20],[284,156,311,21,"_connect"],[284,164,311,29],[284,165,311,30,"address"],[284,172,311,37],[284,174,311,39,"options"],[284,181,311,46],[284,182,311,47],[284,184,312,10],[284,188,312,14],[284,189,312,15,"reconnect_interval"],[284,207,313,8],[284,208,313,9],[285,6,314,4],[285,7,314,5],[285,8,314,6],[286,4,315,2],[287,2,316,0],[287,3,316,1],[288,2,317,0],[288,6,317,4,"Server"],[288,12,317,10],[288,15,317,13],[288,29,317,27,"eventemitter3"],[288,42,317,40],[288,43,317,41,"EventEmitter"],[288,55,317,53],[288,56,317,54],[289,4,321,2],[290,0,322,0],[291,0,323,0],[292,0,324,0],[293,0,325,0],[294,0,326,0],[295,0,327,0],[296,4,328,2,"constructor"],[296,15,328,13,"constructor"],[296,16,328,14,"options"],[296,23,328,21],[296,25,328,23,"dataPack"],[296,33,328,31],[296,35,328,33],[297,6,329,4],[297,11,329,9],[297,12,329,10],[297,13,329,11],[298,6,330,4],[298,10,330,8],[298,11,330,9,"namespaces"],[298,21,330,19],[298,24,330,22],[298,25,330,23],[298,26,330,24],[299,6,331,4],[299,10,331,8],[299,11,331,9,"dataPack"],[299,19,331,17],[299,21,331,19],[299,25,331,23],[299,26,331,24,"dataPack"],[299,34,331,32],[299,37,331,35],[299,41,331,39,"DefaultDataPack"],[299,56,331,54],[299,57,331,55],[299,58,331,56],[299,59,331,57],[299,64,332,9],[299,68,332,13],[299,69,332,14,"dataPack"],[299,77,332,22],[299,80,332,25,"dataPack"],[299,88,332,33],[300,6,333,4],[300,10,333,8],[300,11,333,9,"wss"],[300,14,333,12],[300,17,333,15],[300,21,333,19,"WebSocketImpl"],[300,34,333,32],[300,35,333,33,"WebSocketServer"],[300,50,333,48],[300,51,333,49,"options"],[300,58,333,56],[300,59,333,57],[301,6,334,4],[301,10,334,8],[301,11,334,9,"wss"],[301,14,334,12],[301,15,334,13,"on"],[301,17,334,15],[301,18,334,16],[301,29,334,27],[301,31,334,29],[301,37,334,35],[301,41,334,39],[301,42,334,40,"emit"],[301,46,334,44],[301,47,334,45],[301,58,334,56],[301,59,334,57],[301,60,334,58],[302,6,335,4],[302,10,335,8],[302,11,335,9,"wss"],[302,14,335,12],[302,15,335,13,"on"],[302,17,335,15],[302,18,335,16],[302,30,335,28],[302,32,335,30],[302,33,335,31,"socket"],[302,39,335,37],[302,41,335,39,"request"],[302,48,335,46],[302,53,335,51],[303,8,336,6],[303,14,336,12,"u"],[303,15,336,13],[303,18,336,16,"url__default"],[303,30,336,28],[303,31,336,29,"default"],[303,38,336,36],[303,39,336,37,"parse"],[303,44,336,42],[303,45,336,43,"request"],[303,52,336,50],[303,53,336,51,"url"],[303,56,336,54],[303,58,336,56],[303,62,336,60],[303,63,336,61],[304,8,337,6],[304,14,337,12,"ns"],[304,16,337,14],[304,19,337,17,"u"],[304,20,337,18],[304,21,337,19,"pathname"],[304,29,337,27],[305,8,338,6],[305,12,338,10,"u"],[305,13,338,11],[305,14,338,12,"query"],[305,19,338,17],[305,20,338,18,"socket_id"],[305,29,338,27],[305,31,338,29,"socket"],[305,37,338,35],[305,38,338,36,"_id"],[305,41,338,39],[305,44,338,42,"u"],[305,45,338,43],[305,46,338,44,"query"],[305,51,338,49],[305,52,338,50,"socket_id"],[305,61,338,59],[305,62,338,60],[305,67,339,11,"socket"],[305,73,339,17],[305,74,339,18,"_id"],[305,77,339,21],[305,80,339,24,"uuid"],[305,84,339,28],[305,85,339,29,"v1"],[305,87,339,31],[305,88,339,32],[305,89,339,33],[306,8,340,6,"socket"],[306,14,340,12],[306,15,340,13],[306,31,340,29],[306,32,340,30],[306,35,340,33],[306,40,340,38],[307,8,341,6,"socket"],[307,14,341,12],[307,15,341,13,"on"],[307,17,341,15],[307,18,341,16],[307,25,341,23],[307,27,341,26,"error"],[307,32,341,31],[307,36,341,36],[307,40,341,40],[307,41,341,41,"emit"],[307,45,341,45],[307,46,341,46],[307,60,341,60],[307,62,341,62,"socket"],[307,68,341,68],[307,70,341,70,"error"],[307,75,341,75],[307,76,341,76],[307,77,341,77],[308,8,342,6,"socket"],[308,14,342,12],[308,15,342,13,"on"],[308,17,342,15],[308,18,342,16],[308,25,342,23],[308,27,342,25],[308,33,342,31],[309,10,343,8],[309,14,343,12],[309,15,343,13,"namespaces"],[309,25,343,23],[309,26,343,24,"ns"],[309,28,343,26],[309,29,343,27],[309,30,343,28,"clients"],[309,37,343,35],[309,38,343,36,"delete"],[309,44,343,42],[309,45,343,43,"socket"],[309,51,343,49],[309,52,343,50,"_id"],[309,55,343,53],[309,56,343,54],[310,10,344,8],[310,15,344,13],[310,21,344,19,"event"],[310,26,344,24],[310,30,344,28,"Object"],[310,36,344,34],[310,37,344,35,"keys"],[310,41,344,39],[310,42,344,40],[310,46,344,44],[310,47,344,45,"namespaces"],[310,57,344,55],[310,58,344,56,"ns"],[310,60,344,58],[310,61,344,59],[310,62,344,60,"events"],[310,68,344,66],[310,69,344,67],[310,71,344,69],[311,12,345,10],[311,18,345,16,"index"],[311,23,345,21],[311,26,345,24],[311,30,345,28],[311,31,345,29,"namespaces"],[311,41,345,39],[311,42,345,40,"ns"],[311,44,345,42],[311,45,345,43],[311,46,345,44,"events"],[311,52,345,50],[311,53,345,51,"event"],[311,58,345,56],[311,59,345,57],[311,60,345,58,"sockets"],[311,67,345,65],[311,68,345,66,"indexOf"],[311,75,345,73],[311,76,346,12,"socket"],[311,82,346,18],[311,83,346,19,"_id"],[311,86,347,10],[311,87,347,11],[312,12,348,10],[312,16,348,14,"index"],[312,21,348,19],[312,25,348,23],[312,26,348,24],[312,28,349,12],[312,32,349,16],[312,33,349,17,"namespaces"],[312,43,349,27],[312,44,349,28,"ns"],[312,46,349,30],[312,47,349,31],[312,48,349,32,"events"],[312,54,349,38],[312,55,349,39,"event"],[312,60,349,44],[312,61,349,45],[312,62,349,46,"sockets"],[312,69,349,53],[312,70,349,54,"splice"],[312,76,349,60],[312,77,349,61,"index"],[312,82,349,66],[312,84,349,68],[312,85,349,69],[312,86,349,70],[313,10,350,8],[314,10,351,8],[314,14,351,12],[314,15,351,13,"emit"],[314,19,351,17],[314,20,351,18],[314,35,351,33],[314,37,351,35,"socket"],[314,43,351,41],[314,44,351,42],[315,8,352,6],[315,9,352,7],[315,10,352,8],[316,8,353,6],[316,12,353,10],[316,13,353,11],[316,17,353,15],[316,18,353,16,"namespaces"],[316,28,353,26],[316,29,353,27,"ns"],[316,31,353,29],[316,32,353,30],[316,34,353,32],[316,38,353,36],[316,39,353,37,"_generateNamespace"],[316,57,353,55],[316,58,353,56,"ns"],[316,60,353,58],[316,61,353,59],[317,8,354,6],[317,12,354,10],[317,13,354,11,"namespaces"],[317,23,354,21],[317,24,354,22,"ns"],[317,26,354,24],[317,27,354,25],[317,28,354,26,"clients"],[317,35,354,33],[317,36,354,34,"set"],[317,39,354,37],[317,40,354,38,"socket"],[317,46,354,44],[317,47,354,45,"_id"],[317,50,354,48],[317,52,354,50,"socket"],[317,58,354,56],[317,59,354,57],[318,8,355,6],[318,12,355,10],[318,13,355,11,"emit"],[318,17,355,15],[318,18,355,16],[318,30,355,28],[318,32,355,30,"socket"],[318,38,355,36],[318,40,355,38,"request"],[318,47,355,45],[318,48,355,46],[319,8,356,6],[319,15,356,13],[319,19,356,17],[319,20,356,18,"_handleRPC"],[319,30,356,28],[319,31,356,29,"socket"],[319,37,356,35],[319,39,356,37,"ns"],[319,41,356,39],[319,42,356,40],[320,6,357,4],[320,7,357,5],[320,8,357,6],[321,6,358,4],[321,10,358,8],[321,11,358,9,"wss"],[321,14,358,12],[321,15,358,13,"on"],[321,17,358,15],[321,18,358,16],[321,25,358,23],[321,27,358,26,"error"],[321,32,358,31],[321,36,358,36],[321,40,358,40],[321,41,358,41,"emit"],[321,45,358,45],[321,46,358,46],[321,53,358,53],[321,55,358,55,"error"],[321,60,358,60],[321,61,358,61],[321,62,358,62],[322,4,359,2],[323,4,360,2],[324,0,361,0],[325,0,362,0],[326,0,363,0],[327,0,364,0],[328,0,365,0],[329,0,366,0],[330,0,367,0],[331,0,368,0],[332,4,369,2,"register"],[332,12,369,10,"register"],[332,13,369,11,"name"],[332,17,369,15],[332,19,369,17,"fn"],[332,21,369,19],[332,23,369,21,"ns"],[332,25,369,23],[332,28,369,26],[332,31,369,29],[332,33,369,31],[333,6,370,4],[333,10,370,8],[333,11,370,9],[333,15,370,13],[333,16,370,14,"namespaces"],[333,26,370,24],[333,27,370,25,"ns"],[333,29,370,27],[333,30,370,28],[333,32,370,30],[333,36,370,34],[333,37,370,35,"_generateNamespace"],[333,55,370,53],[333,56,370,54,"ns"],[333,58,370,56],[333,59,370,57],[334,6,371,4],[334,10,371,8],[334,11,371,9,"namespaces"],[334,21,371,19],[334,22,371,20,"ns"],[334,24,371,22],[334,25,371,23],[334,26,371,24,"rpc_methods"],[334,37,371,35],[334,38,371,36,"name"],[334,42,371,40],[334,43,371,41],[334,46,371,44],[335,8,372,6,"fn"],[335,10,372,8],[336,8,373,6,"protected"],[336,17,373,15],[336,19,373,17],[337,6,374,4],[337,7,374,5],[338,6,375,4],[338,13,375,11],[339,8,376,6,"protected"],[339,17,376,15],[339,19,376,17,"protected"],[339,20,376,17],[339,25,376,23],[339,29,376,27],[339,30,376,28,"_makeProtectedMethod"],[339,50,376,48],[339,51,376,49,"name"],[339,55,376,53],[339,57,376,55,"ns"],[339,59,376,57],[339,60,376,58],[340,8,377,6,"public"],[340,14,377,12],[340,16,377,14,"public"],[340,17,377,14],[340,22,377,20],[340,26,377,24],[340,27,377,25,"_makePublicMethod"],[340,44,377,42],[340,45,377,43,"name"],[340,49,377,47],[340,51,377,49,"ns"],[340,53,377,51],[341,6,378,4],[341,7,378,5],[342,4,379,2],[343,4,380,2],[344,0,381,0],[345,0,382,0],[346,0,383,0],[347,0,384,0],[348,0,385,0],[349,0,386,0],[350,0,387,0],[351,4,388,2,"setAuth"],[351,11,388,9,"setAuth"],[351,12,388,10,"fn"],[351,14,388,12],[351,16,388,14,"ns"],[351,18,388,16],[351,21,388,19],[351,24,388,22],[351,26,388,24],[352,6,389,4],[352,10,389,8],[352,11,389,9,"register"],[352,19,389,17],[352,20,389,18],[352,31,389,29],[352,33,389,31,"fn"],[352,35,389,33],[352,37,389,35,"ns"],[352,39,389,37],[352,40,389,38],[353,4,390,2],[354,4,391,2],[355,0,392,0],[356,0,393,0],[357,0,394,0],[358,0,395,0],[359,0,396,0],[360,0,397,0],[361,4,398,2,"_makeProtectedMethod"],[361,24,398,22,"_makeProtectedMethod"],[361,25,398,23,"name"],[361,29,398,27],[361,31,398,29,"ns"],[361,33,398,31],[361,36,398,34],[361,39,398,37],[361,41,398,39],[362,6,399,4],[362,10,399,8],[362,11,399,9,"namespaces"],[362,21,399,19],[362,22,399,20,"ns"],[362,24,399,22],[362,25,399,23],[362,26,399,24,"rpc_methods"],[362,37,399,35],[362,38,399,36,"name"],[362,42,399,40],[362,43,399,41],[362,44,399,42,"protected"],[362,53,399,51],[362,56,399,54],[362,60,399,58],[363,4,400,2],[364,4,401,2],[365,0,402,0],[366,0,403,0],[367,0,404,0],[368,0,405,0],[369,0,406,0],[370,0,407,0],[371,4,408,2,"_makePublicMethod"],[371,21,408,19,"_makePublicMethod"],[371,22,408,20,"name"],[371,26,408,24],[371,28,408,26,"ns"],[371,30,408,28],[371,33,408,31],[371,36,408,34],[371,38,408,36],[372,6,409,4],[372,10,409,8],[372,11,409,9,"namespaces"],[372,21,409,19],[372,22,409,20,"ns"],[372,24,409,22],[372,25,409,23],[372,26,409,24,"rpc_methods"],[372,37,409,35],[372,38,409,36,"name"],[372,42,409,40],[372,43,409,41],[372,44,409,42,"protected"],[372,53,409,51],[372,56,409,54],[372,61,409,59],[373,4,410,2],[374,4,411,2],[375,0,412,0],[376,0,413,0],[377,0,414,0],[378,0,415,0],[379,0,416,0],[380,0,417,0],[381,4,418,2,"_makeProtectedEvent"],[381,23,418,21,"_makeProtectedEvent"],[381,24,418,22,"name"],[381,28,418,26],[381,30,418,28,"ns"],[381,32,418,30],[381,35,418,33],[381,38,418,36],[381,40,418,38],[382,6,419,4],[382,10,419,8],[382,11,419,9,"namespaces"],[382,21,419,19],[382,22,419,20,"ns"],[382,24,419,22],[382,25,419,23],[382,26,419,24,"events"],[382,32,419,30],[382,33,419,31,"name"],[382,37,419,35],[382,38,419,36],[382,39,419,37,"protected"],[382,48,419,46],[382,51,419,49],[382,55,419,53],[383,4,420,2],[384,4,421,2],[385,0,422,0],[386,0,423,0],[387,0,424,0],[388,0,425,0],[389,0,426,0],[390,0,427,0],[391,4,428,2,"_makePublicEvent"],[391,20,428,18,"_makePublicEvent"],[391,21,428,19,"name"],[391,25,428,23],[391,27,428,25,"ns"],[391,29,428,27],[391,32,428,30],[391,35,428,33],[391,37,428,35],[392,6,429,4],[392,10,429,8],[392,11,429,9,"namespaces"],[392,21,429,19],[392,22,429,20,"ns"],[392,24,429,22],[392,25,429,23],[392,26,429,24,"events"],[392,32,429,30],[392,33,429,31,"name"],[392,37,429,35],[392,38,429,36],[392,39,429,37,"protected"],[392,48,429,46],[392,51,429,49],[392,56,429,54],[393,4,430,2],[394,4,431,2],[395,0,432,0],[396,0,433,0],[397,0,434,0],[398,0,435,0],[399,0,436,0],[400,0,437,0],[401,4,438,2,"closeNamespace"],[401,18,438,16,"closeNamespace"],[401,19,438,17,"ns"],[401,21,438,19],[401,23,438,21],[402,6,439,4],[402,12,439,10,"namespace"],[402,21,439,19],[402,24,439,22],[402,28,439,26],[402,29,439,27,"namespaces"],[402,39,439,37],[402,40,439,38,"ns"],[402,42,439,40],[402,43,439,41],[403,6,440,4],[403,10,440,8,"namespace"],[403,19,440,17],[403,21,440,19],[404,8,441,6],[404,15,441,13,"namespace"],[404,24,441,22],[404,25,441,23,"rpc_methods"],[404,36,441,34],[405,8,442,6],[405,15,442,13,"namespace"],[405,24,442,22],[405,25,442,23,"events"],[405,31,442,29],[406,8,443,6],[406,13,443,11],[406,19,443,17,"socket"],[406,25,443,23],[406,29,443,27,"namespace"],[406,38,443,36],[406,39,443,37,"clients"],[406,46,443,44],[406,47,443,45,"values"],[406,53,443,51],[406,54,443,52],[406,55,443,53],[406,57,443,55,"socket"],[406,63,443,61],[406,64,443,62,"close"],[406,69,443,67],[406,70,443,68],[406,71,443,69],[407,8,444,6],[407,15,444,13],[407,19,444,17],[407,20,444,18,"namespaces"],[407,30,444,28],[407,31,444,29,"ns"],[407,33,444,31],[407,34,444,32],[408,6,445,4],[409,4,446,2],[410,4,447,2],[411,0,448,0],[412,0,449,0],[413,0,450,0],[414,0,451,0],[415,0,452,0],[416,0,453,0],[417,0,454,0],[418,4,455,2,"event"],[418,9,455,7,"event"],[418,10,455,8,"name"],[418,14,455,12],[418,16,455,14,"ns"],[418,18,455,16],[418,21,455,19],[418,24,455,22],[418,26,455,24],[419,6,456,4],[419,10,456,8],[419,11,456,9],[419,15,456,13],[419,16,456,14,"namespaces"],[419,26,456,24],[419,27,456,25,"ns"],[419,29,456,27],[419,30,456,28],[419,32,456,30],[419,36,456,34],[419,37,456,35,"_generateNamespace"],[419,55,456,53],[419,56,456,54,"ns"],[419,58,456,56],[419,59,456,57],[419,60,456,58],[419,65,457,9],[420,8,458,6],[420,14,458,12,"index"],[420,19,458,17],[420,22,458,20],[420,26,458,24],[420,27,458,25,"namespaces"],[420,37,458,35],[420,38,458,36,"ns"],[420,40,458,38],[420,41,458,39],[420,42,458,40,"events"],[420,48,458,46],[420,49,458,47,"name"],[420,53,458,51],[420,54,458,52],[421,8,459,6],[421,12,459,10,"index"],[421,17,459,15],[421,22,459,20],[421,27,459,25],[421,28,459,26],[421,30,460,8],[421,36,460,14],[421,40,460,18,"Error"],[421,45,460,23],[421,46,460,24],[421,74,460,52,"ns"],[421,76,460,54],[421,79,460,57,"name"],[421,83,460,61],[421,85,460,63],[421,86,460,64],[422,6,461,4],[423,6,462,4],[423,10,462,8],[423,11,462,9,"namespaces"],[423,21,462,19],[423,22,462,20,"ns"],[423,24,462,22],[423,25,462,23],[423,26,462,24,"events"],[423,32,462,30],[423,33,462,31,"name"],[423,37,462,35],[423,38,462,36],[423,41,462,39],[424,8,463,6,"sockets"],[424,15,463,13],[424,17,463,15],[424,19,463,17],[425,8,464,6,"protected"],[425,17,464,15],[425,19,464,17],[426,6,465,4],[426,7,465,5],[427,6,466,4],[427,10,466,8],[427,11,466,9,"on"],[427,13,466,11],[427,14,466,12,"name"],[427,18,466,16],[427,20,466,18],[427,21,466,19],[427,24,466,22,"params"],[427,30,466,28],[427,35,466,33],[428,8,467,6],[428,12,467,10,"params"],[428,18,467,16],[428,19,467,17,"length"],[428,25,467,23],[428,30,467,28],[428,31,467,29],[428,35,467,33,"params"],[428,41,467,39],[428,42,467,40],[428,43,467,41],[428,44,467,42],[428,56,467,54,"Object"],[428,62,467,60],[428,64,468,8,"params"],[428,70,468,14],[428,73,468,17,"params"],[428,79,468,23],[428,80,468,24],[428,81,468,25],[428,82,468,26],[429,8,469,6],[429,13,469,11],[429,19,469,17,"socket_id"],[429,28,469,26],[429,32,469,30],[429,36,469,34],[429,37,469,35,"namespaces"],[429,47,469,45],[429,48,469,46,"ns"],[429,50,469,48],[429,51,469,49],[429,52,469,50,"events"],[429,58,469,56],[429,59,469,57,"name"],[429,63,469,61],[429,64,469,62],[429,65,469,63,"sockets"],[429,72,469,70],[429,74,469,72],[430,10,470,8],[430,16,470,14,"socket"],[430,22,470,20],[430,25,470,23],[430,29,470,27],[430,30,470,28,"namespaces"],[430,40,470,38],[430,41,470,39,"ns"],[430,43,470,41],[430,44,470,42],[430,45,470,43,"clients"],[430,52,470,50],[430,53,470,51,"get"],[430,56,470,54],[430,57,470,55,"socket_id"],[430,66,470,64],[430,67,470,65],[431,10,471,8],[431,14,471,12],[431,15,471,13,"socket"],[431,21,471,19],[431,23,471,21],[432,10,472,8,"socket"],[432,16,472,14],[432,17,472,15,"send"],[432,21,472,19],[432,22,473,10],[432,26,473,14],[432,27,473,15,"dataPack"],[432,35,473,23],[432,36,473,24,"encode"],[432,42,473,30],[432,43,473,31],[433,12,474,12,"notification"],[433,24,474,24],[433,26,474,26,"name"],[433,30,474,30],[434,12,475,12,"params"],[435,10,476,10],[435,11,476,11],[435,12,477,8],[435,13,477,9],[436,8,478,6],[437,6,479,4],[437,7,479,5],[437,8,479,6],[438,6,480,4],[438,13,480,11],[439,8,481,6,"protected"],[439,17,481,15],[439,19,481,17,"protected"],[439,20,481,17],[439,25,481,23],[439,29,481,27],[439,30,481,28,"_makeProtectedEvent"],[439,49,481,47],[439,50,481,48,"name"],[439,54,481,52],[439,56,481,54,"ns"],[439,58,481,56],[439,59,481,57],[440,8,482,6,"public"],[440,14,482,12],[440,16,482,14,"public"],[440,17,482,14],[440,22,482,20],[440,26,482,24],[440,27,482,25,"_makePublicEvent"],[440,43,482,41],[440,44,482,42,"name"],[440,48,482,46],[440,50,482,48,"ns"],[440,52,482,50],[441,6,483,4],[441,7,483,5],[442,4,484,2],[443,4,485,2],[444,0,486,0],[445,0,487,0],[446,0,488,0],[447,0,489,0],[448,0,490,0],[449,0,491,0],[450,4,492,2,"of"],[450,6,492,4,"of"],[450,7,492,5,"name"],[450,11,492,9],[450,13,492,11],[451,6,493,4],[451,10,493,8],[451,11,493,9],[451,15,493,13],[451,16,493,14,"namespaces"],[451,26,493,24],[451,27,493,25,"name"],[451,31,493,29],[451,32,493,30],[451,34,493,32],[451,38,493,36],[451,39,493,37,"_generateNamespace"],[451,57,493,55],[451,58,493,56,"name"],[451,62,493,60],[451,63,493,61],[452,6,494,4],[452,12,494,10,"self"],[452,16,494,14],[452,19,494,17],[452,23,494,21],[453,6,495,4],[453,13,495,11],[454,8,496,6],[455,8,497,6,"register"],[455,16,497,14,"register"],[455,17,497,15,"fn_name"],[455,24,497,22],[455,26,497,24,"fn"],[455,28,497,26],[455,30,497,28],[456,10,498,8],[456,14,498,12,"arguments"],[456,23,498,21],[456,24,498,22,"length"],[456,30,498,28],[456,35,498,33],[456,36,498,34],[456,38,499,10],[456,44,499,16],[456,48,499,20,"Error"],[456,53,499,25],[456,54,499,26],[456,90,499,62],[456,91,499,63],[457,10,500,8],[457,14,500,12],[457,21,500,19,"fn_name"],[457,28,500,26],[457,33,500,31],[457,41,500,39],[457,43,501,10],[457,49,501,16],[457,53,501,20,"Error"],[457,58,501,25],[457,59,501,26],[457,82,501,49],[457,83,501,50],[458,10,502,8],[458,14,502,12],[458,21,502,19,"fn"],[458,23,502,21],[458,28,502,26],[458,38,502,36],[458,40,503,10],[458,46,503,16],[458,50,503,20,"Error"],[458,55,503,25],[458,56,503,26],[458,84,503,54],[458,85,503,55],[459,10,504,8],[459,17,504,15,"self"],[459,21,504,19],[459,22,504,20,"register"],[459,30,504,28],[459,31,504,29,"fn_name"],[459,38,504,36],[459,40,504,38,"fn"],[459,42,504,40],[459,44,504,42,"name"],[459,48,504,46],[459,49,504,47],[460,8,505,6],[460,9,505,7],[461,8,506,6],[462,8,507,6,"event"],[462,13,507,11,"event"],[462,14,507,12,"ev_name"],[462,21,507,19],[462,23,507,21],[463,10,508,8],[463,14,508,12,"arguments"],[463,23,508,21],[463,24,508,22,"length"],[463,30,508,28],[463,35,508,33],[463,36,508,34],[463,38,509,10],[463,44,509,16],[463,48,509,20,"Error"],[463,53,509,25],[463,54,509,26],[463,89,509,61],[463,90,509,62],[464,10,510,8],[464,14,510,12],[464,21,510,19,"ev_name"],[464,28,510,26],[464,33,510,31],[464,41,510,39],[464,43,511,10],[464,49,511,16],[464,53,511,20,"Error"],[464,58,511,25],[464,59,511,26],[464,82,511,49],[464,83,511,50],[465,10,512,8],[465,17,512,15,"self"],[465,21,512,19],[465,22,512,20,"event"],[465,27,512,25],[465,28,512,26,"ev_name"],[465,35,512,33],[465,37,512,35,"name"],[465,41,512,39],[465,42,512,40],[466,8,513,6],[466,9,513,7],[467,8,514,6],[468,8,515,6],[468,12,515,10,"eventList"],[468,21,515,19,"eventList"],[468,22,515,19],[468,24,515,22],[469,10,516,8],[469,17,516,15,"Object"],[469,23,516,21],[469,24,516,22,"keys"],[469,28,516,26],[469,29,516,27,"self"],[469,33,516,31],[469,34,516,32,"namespaces"],[469,44,516,42],[469,45,516,43,"name"],[469,49,516,47],[469,50,516,48],[469,51,516,49,"events"],[469,57,516,55],[469,58,516,56],[470,8,517,6],[470,9,517,7],[471,8,518,6],[472,0,519,0],[473,0,520,0],[474,0,521,0],[475,0,522,0],[476,0,523,0],[477,0,524,0],[478,0,525,0],[479,8,526,6,"emit"],[479,12,526,10,"emit"],[479,13,526,11,"event"],[479,18,526,16],[479,20,526,18],[479,23,526,21,"params"],[479,29,526,27],[479,31,526,29],[480,10,527,8],[480,16,527,14,"nsEvent"],[480,23,527,21],[480,26,527,24,"self"],[480,30,527,28],[480,31,527,29,"namespaces"],[480,41,527,39],[480,42,527,40,"name"],[480,46,527,44],[480,47,527,45],[480,48,527,46,"events"],[480,54,527,52],[480,55,527,53,"event"],[480,60,527,58],[480,61,527,59],[481,10,528,8],[481,14,528,12,"nsEvent"],[481,21,528,19],[481,23,529,10],[481,28,529,15],[481,34,529,21,"socket_id"],[481,43,529,30],[481,47,529,34,"nsEvent"],[481,54,529,41],[481,55,529,42,"sockets"],[481,62,529,49],[481,64,529,51],[482,12,530,12],[482,18,530,18,"socket"],[482,24,530,24],[482,27,530,27,"self"],[482,31,530,31],[482,32,530,32,"namespaces"],[482,42,530,42],[482,43,530,43,"name"],[482,47,530,47],[482,48,530,48],[482,49,530,49,"clients"],[482,56,530,56],[482,57,530,57,"get"],[482,60,530,60],[482,61,530,61,"socket_id"],[482,70,530,70],[482,71,530,71],[483,12,531,12],[483,16,531,16],[483,17,531,17,"socket"],[483,23,531,23],[483,25,531,25],[484,12,532,12,"socket"],[484,18,532,18],[484,19,532,19,"send"],[484,23,532,23],[484,24,533,14,"self"],[484,28,533,18],[484,29,533,19,"dataPack"],[484,37,533,27],[484,38,533,28,"encode"],[484,44,533,34],[484,45,533,35],[485,14,534,16,"notification"],[485,26,534,28],[485,28,534,30,"event"],[485,33,534,35],[486,14,535,16,"params"],[487,12,536,14],[487,13,536,15],[487,14,537,12],[487,15,537,13],[488,10,538,10],[489,8,539,6],[489,9,539,7],[490,8,540,6],[491,0,541,0],[492,0,542,0],[493,0,543,0],[494,0,544,0],[495,0,545,0],[496,0,546,0],[497,8,547,6],[497,12,547,10,"name"],[497,16,547,14,"name"],[497,17,547,14],[497,19,547,17],[498,10,548,8],[498,17,548,15,"name"],[498,21,548,19],[499,8,549,6],[499,9,549,7],[500,8,550,6],[501,0,551,0],[502,0,552,0],[503,0,553,0],[504,0,554,0],[505,0,555,0],[506,8,556,6,"connected"],[506,17,556,15,"connected"],[506,18,556,15],[506,20,556,18],[507,10,557,8],[507,16,557,14,"socket_ids"],[507,26,557,24],[507,29,557,27],[507,30,557,28],[507,33,557,31,"self"],[507,37,557,35],[507,38,557,36,"namespaces"],[507,48,557,46],[507,49,557,47,"name"],[507,53,557,51],[507,54,557,52],[507,55,557,53,"clients"],[507,62,557,60],[507,63,557,61,"keys"],[507,67,557,65],[507,68,557,66],[507,69,557,67],[507,70,557,68],[508,10,558,8],[508,17,558,15,"socket_ids"],[508,27,558,25],[508,28,558,26,"reduce"],[508,34,558,32],[508,35,559,10],[508,36,559,11,"acc"],[508,39,559,14],[508,41,559,16,"curr"],[508,45,559,20],[508,51,559,26],[509,12,560,12],[509,15,560,15,"acc"],[509,18,560,18],[510,12,561,12],[510,13,561,13,"curr"],[510,17,561,17],[510,20,561,20,"self"],[510,24,561,24],[510,25,561,25,"namespaces"],[510,35,561,35],[510,36,561,36,"name"],[510,40,561,40],[510,41,561,41],[510,42,561,42,"clients"],[510,49,561,49],[510,50,561,50,"get"],[510,53,561,53],[510,54,561,54,"curr"],[510,58,561,58],[511,10,562,10],[511,11,562,11],[511,12,562,12],[511,14,563,10],[511,15,563,11],[511,16,564,8],[511,17,564,9],[512,8,565,6],[512,9,565,7],[513,8,566,6],[514,0,567,0],[515,0,568,0],[516,0,569,0],[517,0,570,0],[518,0,571,0],[519,8,572,6,"clients"],[519,15,572,13,"clients"],[519,16,572,13],[519,18,572,16],[520,10,573,8],[520,17,573,15,"self"],[520,21,573,19],[520,22,573,20,"namespaces"],[520,32,573,30],[520,33,573,31,"name"],[520,37,573,35],[520,38,573,36],[521,8,574,6],[522,6,575,4],[522,7,575,5],[523,4,576,2],[524,4,577,2],[525,0,578,0],[526,0,579,0],[527,0,580,0],[528,0,581,0],[529,0,582,0],[530,0,583,0],[531,4,584,2,"eventList"],[531,13,584,11,"eventList"],[531,14,584,12,"ns"],[531,16,584,14],[531,19,584,17],[531,22,584,20],[531,24,584,22],[532,6,585,4],[532,10,585,8],[532,11,585,9],[532,15,585,13],[532,16,585,14,"namespaces"],[532,26,585,24],[532,27,585,25,"ns"],[532,29,585,27],[532,30,585,28],[532,32,585,30],[532,39,585,37],[532,41,585,39],[533,6,586,4],[533,13,586,11,"Object"],[533,19,586,17],[533,20,586,18,"keys"],[533,24,586,22],[533,25,586,23],[533,29,586,27],[533,30,586,28,"namespaces"],[533,40,586,38],[533,41,586,39,"ns"],[533,43,586,41],[533,44,586,42],[533,45,586,43,"events"],[533,51,586,49],[533,52,586,50],[534,4,587,2],[535,4,588,2],[536,0,589,0],[537,0,590,0],[538,0,591,0],[539,0,592,0],[540,0,593,0],[541,0,594,0],[542,0,595,0],[543,4,596,2,"createError"],[543,15,596,13,"createError"],[543,16,596,14,"code"],[543,20,596,18],[543,22,596,20,"message"],[543,29,596,27],[543,31,596,29,"data"],[543,35,596,33],[543,37,596,35],[544,6,597,4],[544,13,597,11],[545,8,598,6,"code"],[545,12,598,10],[546,8,599,6,"message"],[546,15,599,13],[547,8,600,6,"data"],[547,12,600,10],[547,14,600,12,"data"],[547,18,600,16],[547,22,600,20],[548,6,601,4],[548,7,601,5],[549,4,602,2],[550,4,603,2],[551,0,604,0],[552,0,605,0],[553,0,606,0],[554,0,607,0],[555,4,608,2,"close"],[555,9,608,7,"close"],[555,10,608,7],[555,12,608,10],[556,6,609,4],[556,13,609,11],[556,17,609,15,"Promise"],[556,24,609,22],[556,25,609,23],[556,26,609,24,"resolve"],[556,33,609,31],[556,35,609,33,"reject"],[556,41,609,39],[556,46,609,44],[557,8,610,6],[557,12,610,10],[558,10,611,8],[558,14,611,12],[558,15,611,13,"wss"],[558,18,611,16],[558,19,611,17,"close"],[558,24,611,22],[558,25,611,23],[558,26,611,24],[559,10,612,8],[559,14,612,12],[559,15,612,13,"emit"],[559,19,612,17],[559,20,612,18],[559,27,612,25],[559,28,612,26],[560,10,613,8,"resolve"],[560,17,613,15],[560,18,613,16],[560,19,613,17],[561,8,614,6],[561,9,614,7],[561,10,614,8],[561,17,614,15,"error"],[561,22,614,20],[561,24,614,22],[562,10,615,8,"reject"],[562,16,615,14],[562,17,615,15,"error"],[562,22,615,20],[562,23,615,21],[563,8,616,6],[564,6,617,4],[564,7,617,5],[564,8,617,6],[565,4,618,2],[566,4,619,2],[567,0,620,0],[568,0,621,0],[569,0,622,0],[570,0,623,0],[571,0,624,0],[572,0,625,0],[573,4,626,2,"_handleRPC"],[573,14,626,12,"_handleRPC"],[573,15,626,13,"socket"],[573,21,626,19],[573,23,626,21,"ns"],[573,25,626,23],[573,28,626,26],[573,31,626,29],[573,33,626,31],[574,6,627,4,"socket"],[574,12,627,10],[574,13,627,11,"on"],[574,15,627,13],[574,16,627,14],[574,25,627,23],[574,27,627,25],[574,33,627,32,"data"],[574,37,627,36],[574,41,627,41],[575,8,628,6],[575,14,628,12,"msg_options"],[575,25,628,23],[575,28,628,26],[575,29,628,27],[575,30,628,28],[576,8,629,6],[576,12,629,10,"data"],[576,16,629,14],[576,28,629,26,"ArrayBuffer"],[576,39,629,37],[576,41,629,39],[577,10,630,8,"msg_options"],[577,21,630,19],[577,22,630,20,"binary"],[577,28,630,26],[577,31,630,29],[577,35,630,33],[578,10,631,8,"data"],[578,14,631,12],[578,17,631,15,"Buffer"],[578,23,631,21],[578,24,631,22,"from"],[578,28,631,26],[578,29,631,27,"data"],[578,33,631,31],[578,34,631,32],[578,35,631,33,"toString"],[578,43,631,41],[578,44,631,42],[578,45,631,43],[579,8,632,6],[580,8,633,6],[580,12,633,10,"socket"],[580,18,633,16],[580,19,633,17,"readyState"],[580,29,633,27],[580,34,633,32],[580,35,633,33],[580,37,633,35],[581,8,634,6],[581,12,634,10,"parsedData"],[581,22,634,20],[582,8,635,6],[582,12,635,10],[583,10,636,8,"parsedData"],[583,20,636,18],[583,23,636,21],[583,27,636,25],[583,28,636,26,"dataPack"],[583,36,636,34],[583,37,636,35,"decode"],[583,43,636,41],[583,44,636,42,"data"],[583,48,636,46],[583,49,636,47],[584,8,637,6],[584,9,637,7],[584,10,637,8],[584,17,637,15,"error"],[584,22,637,20],[584,24,637,22],[585,10,638,8],[585,17,638,15,"socket"],[585,23,638,21],[585,24,638,22,"send"],[585,28,638,26],[585,29,639,10],[585,33,639,14],[585,34,639,15,"dataPack"],[585,42,639,23],[585,43,639,24,"encode"],[585,49,639,30],[585,50,639,31],[586,12,640,12,"jsonrpc"],[586,19,640,19],[586,21,640,21],[586,26,640,26],[587,12,641,12,"error"],[587,17,641,17],[587,19,641,19,"createError"],[587,30,641,30],[587,31,641,31],[587,32,641,32],[587,37,641,37],[587,39,641,39,"error"],[587,44,641,44],[587,45,641,45,"toString"],[587,53,641,53],[587,54,641,54],[587,55,641,55],[587,56,641,56],[588,12,642,12,"id"],[588,14,642,14],[588,16,642,16],[589,10,643,10],[589,11,643,11],[589,12,643,12],[589,14,644,10,"msg_options"],[589,25,645,8],[589,26,645,9],[590,8,646,6],[591,8,647,6],[591,12,647,10,"Array"],[591,17,647,15],[591,18,647,16,"isArray"],[591,25,647,23],[591,26,647,24,"parsedData"],[591,36,647,34],[591,37,647,35],[591,39,647,37],[592,10,648,8],[592,14,648,12],[592,15,648,13,"parsedData"],[592,25,648,23],[592,26,648,24,"length"],[592,32,648,30],[592,34,649,10],[592,41,649,17,"socket"],[592,47,649,23],[592,48,649,24,"send"],[592,52,649,28],[592,53,650,12],[592,57,650,16],[592,58,650,17,"dataPack"],[592,66,650,25],[592,67,650,26,"encode"],[592,73,650,32],[592,74,650,33],[593,12,651,14,"jsonrpc"],[593,19,651,21],[593,21,651,23],[593,26,651,28],[594,12,652,14,"error"],[594,17,652,19],[594,19,652,21,"createError"],[594,30,652,32],[594,31,652,33],[594,32,652,34],[594,37,652,39],[594,39,652,41],[594,54,652,56],[594,55,652,57],[595,12,653,14,"id"],[595,14,653,16],[595,16,653,18],[596,10,654,12],[596,11,654,13],[596,12,654,14],[596,14,655,12,"msg_options"],[596,25,656,10],[596,26,656,11],[597,10,657,8],[597,16,657,14,"responses"],[597,25,657,23],[597,28,657,26],[597,30,657,28],[598,10,658,8],[598,15,658,13],[598,21,658,19,"message"],[598,28,658,26],[598,32,658,30,"parsedData"],[598,42,658,40],[598,44,658,42],[599,12,659,10],[599,18,659,16,"response2"],[599,27,659,25],[599,30,659,28],[599,36,659,34],[599,40,659,38],[599,41,659,39,"_runMethod"],[599,51,659,49],[599,52,659,50,"message"],[599,59,659,57],[599,61,659,59,"socket"],[599,67,659,65],[599,68,659,66,"_id"],[599,71,659,69],[599,73,659,71,"ns"],[599,75,659,73],[599,76,659,74],[600,12,660,10],[600,16,660,14],[600,17,660,15,"response2"],[600,26,660,24],[600,28,660,26],[601,12,661,10,"responses"],[601,21,661,19],[601,22,661,20,"push"],[601,26,661,24],[601,27,661,25,"response2"],[601,36,661,34],[601,37,661,35],[602,10,662,8],[603,10,663,8],[603,14,663,12],[603,15,663,13,"responses"],[603,24,663,22],[603,25,663,23,"length"],[603,31,663,29],[603,33,663,31],[604,10,664,8],[604,17,664,15,"socket"],[604,23,664,21],[604,24,664,22,"send"],[604,28,664,26],[604,29,664,27],[604,33,664,31],[604,34,664,32,"dataPack"],[604,42,664,40],[604,43,664,41,"encode"],[604,49,664,47],[604,50,664,48,"responses"],[604,59,664,57],[604,60,664,58],[604,62,664,60,"msg_options"],[604,73,664,71],[604,74,664,72],[605,8,665,6],[606,8,666,6],[606,14,666,12,"response"],[606,22,666,20],[606,25,666,23],[606,31,666,29],[606,35,666,33],[606,36,666,34,"_runMethod"],[606,46,666,44],[606,47,666,45,"parsedData"],[606,57,666,55],[606,59,666,57,"socket"],[606,65,666,63],[606,66,666,64,"_id"],[606,69,666,67],[606,71,666,69,"ns"],[606,73,666,71],[606,74,666,72],[607,8,667,6],[607,12,667,10],[607,13,667,11,"response"],[607,21,667,19],[607,23,667,21],[608,8,668,6],[608,15,668,13,"socket"],[608,21,668,19],[608,22,668,20,"send"],[608,26,668,24],[608,27,668,25],[608,31,668,29],[608,32,668,30,"dataPack"],[608,40,668,38],[608,41,668,39,"encode"],[608,47,668,45],[608,48,668,46,"response"],[608,56,668,54],[608,57,668,55],[608,59,668,57,"msg_options"],[608,70,668,68],[608,71,668,69],[609,6,669,4],[609,7,669,5],[609,8,669,6],[610,4,670,2],[611,4,671,2],[612,0,672,0],[613,0,673,0],[614,0,674,0],[615,0,675,0],[616,0,676,0],[617,0,677,0],[618,0,678,0],[619,4,679,2],[619,10,679,8,"_runMethod"],[619,20,679,18,"_runMethod"],[619,21,679,19,"message"],[619,28,679,26],[619,30,679,28,"socket_id"],[619,39,679,37],[619,41,679,39,"ns"],[619,43,679,41],[619,46,679,44],[619,49,679,47],[619,51,679,49],[620,6,680,4],[620,10,680,8],[620,17,680,15,"message"],[620,24,680,22],[620,29,680,27],[620,37,680,35],[620,41,680,39,"message"],[620,48,680,46],[620,53,680,51],[620,57,680,55],[620,59,681,6],[620,66,681,13],[621,8,682,8,"jsonrpc"],[621,15,682,15],[621,17,682,17],[621,22,682,22],[622,8,683,8,"error"],[622,13,683,13],[622,15,683,15,"createError"],[622,26,683,26],[622,27,683,27],[622,28,683,28],[622,33,683,33],[622,34,683,34],[623,8,684,8,"id"],[623,10,684,10],[623,12,684,12],[624,6,685,6],[624,7,685,7],[625,6,686,4],[625,10,686,8,"message"],[625,17,686,15],[625,18,686,16,"jsonrpc"],[625,25,686,23],[625,30,686,28],[625,35,686,33],[625,37,687,6],[625,44,687,13],[626,8,688,8,"jsonrpc"],[626,15,688,15],[626,17,688,17],[626,22,688,22],[627,8,689,8,"error"],[627,13,689,13],[627,15,689,15,"createError"],[627,26,689,26],[627,27,689,27],[627,28,689,28],[627,33,689,33],[627,35,689,35],[627,61,689,61],[627,62,689,62],[628,8,690,8,"id"],[628,10,690,10],[628,12,690,12,"message"],[628,19,690,19],[628,20,690,20,"id"],[628,22,690,22],[628,26,690,26],[629,6,691,6],[629,7,691,7],[630,6,692,4],[630,10,692,8],[630,11,692,9,"message"],[630,18,692,16],[630,19,692,17,"method"],[630,25,692,23],[630,27,693,6],[630,34,693,13],[631,8,694,8,"jsonrpc"],[631,15,694,15],[631,17,694,17],[631,22,694,22],[632,8,695,8,"error"],[632,13,695,13],[632,15,695,15,"createError"],[632,26,695,26],[632,27,695,27],[632,28,695,28],[632,33,695,33],[632,35,695,35],[632,57,695,57],[632,58,695,58],[633,8,696,8,"id"],[633,10,696,10],[633,12,696,12,"message"],[633,19,696,19],[633,20,696,20,"id"],[633,22,696,22],[633,26,696,26],[634,6,697,6],[634,7,697,7],[635,6,698,4],[635,10,698,8],[635,17,698,15,"message"],[635,24,698,22],[635,25,698,23,"method"],[635,31,698,29],[635,36,698,34],[635,44,698,42],[635,46,699,6],[635,53,699,13],[636,8,700,8,"jsonrpc"],[636,15,700,15],[636,17,700,17],[636,22,700,22],[637,8,701,8,"error"],[637,13,701,13],[637,15,701,15,"createError"],[637,26,701,26],[637,27,701,27],[637,28,701,28],[637,33,701,33],[637,35,701,35],[637,56,701,56],[637,57,701,57],[638,8,702,8,"id"],[638,10,702,10],[638,12,702,12,"message"],[638,19,702,19],[638,20,702,20,"id"],[638,22,702,22],[638,26,702,26],[639,6,703,6],[639,7,703,7],[640,6,704,4],[640,10,704,8,"message"],[640,17,704,15],[640,18,704,16,"params"],[640,24,704,22],[640,28,704,26],[640,35,704,33,"message"],[640,42,704,40],[640,43,704,41,"params"],[640,49,704,47],[640,54,704,52],[640,62,704,60],[640,64,705,6],[640,71,705,13],[641,8,706,8,"jsonrpc"],[641,15,706,15],[641,17,706,17],[641,22,706,22],[642,8,707,8,"error"],[642,13,707,13],[642,15,707,15,"createError"],[642,26,707,26],[642,27,707,27],[642,28,707,28],[642,33,707,33],[642,34,707,34],[643,8,708,8,"id"],[643,10,708,10],[643,12,708,12,"message"],[643,19,708,19],[643,20,708,20,"id"],[643,22,708,22],[643,26,708,26],[644,6,709,6],[644,7,709,7],[645,6,710,4],[645,10,710,8,"message"],[645,17,710,15],[645,18,710,16,"method"],[645,24,710,22],[645,29,710,27],[645,37,710,35],[645,39,710,37],[646,8,711,6],[646,12,711,10],[646,13,711,11,"message"],[646,20,711,18],[646,21,711,19,"params"],[646,27,711,25],[646,29,712,8],[646,36,712,15],[647,10,713,10,"jsonrpc"],[647,17,713,17],[647,19,713,19],[647,24,713,24],[648,10,714,10,"error"],[648,15,714,15],[648,17,714,17,"createError"],[648,28,714,28],[648,29,714,29],[648,30,714,30],[648,34,714,34],[648,35,714,35],[649,10,715,10,"id"],[649,12,715,12],[649,14,715,14,"message"],[649,21,715,21],[649,22,715,22,"id"],[649,24,715,24],[649,28,715,28],[650,8,716,8],[650,9,716,9],[651,8,717,6],[651,14,717,12,"results"],[651,21,717,19],[651,24,717,22],[651,25,717,23],[651,26,717,24],[652,8,718,6],[652,14,718,12,"event_names"],[652,25,718,23],[652,28,718,26,"Object"],[652,34,718,32],[652,35,718,33,"keys"],[652,39,718,37],[652,40,718,38],[652,44,718,42],[652,45,718,43,"namespaces"],[652,55,718,53],[652,56,718,54,"ns"],[652,58,718,56],[652,59,718,57],[652,60,718,58,"events"],[652,66,718,64],[652,67,718,65],[653,8,719,6],[653,13,719,11],[653,19,719,17,"name"],[653,23,719,21],[653,27,719,25,"message"],[653,34,719,32],[653,35,719,33,"params"],[653,41,719,39],[653,43,719,41],[654,10,720,8],[654,16,720,14,"index"],[654,21,720,19],[654,24,720,22,"event_names"],[654,35,720,33],[654,36,720,34,"indexOf"],[654,43,720,41],[654,44,720,42,"name"],[654,48,720,46],[654,49,720,47],[655,10,721,8],[655,16,721,14,"namespace"],[655,25,721,23],[655,28,721,26],[655,32,721,30],[655,33,721,31,"namespaces"],[655,43,721,41],[655,44,721,42,"ns"],[655,46,721,44],[655,47,721,45],[656,10,722,8],[656,14,722,12,"index"],[656,19,722,17],[656,24,722,22],[656,25,722,23],[656,26,722,24],[656,28,722,26],[657,12,723,10,"results"],[657,19,723,17],[657,20,723,18,"name"],[657,24,723,22],[657,25,723,23],[657,28,723,26],[657,52,723,50],[658,12,724,10],[659,10,725,8],[660,10,726,8],[660,14,726,12,"namespace"],[660,23,726,21],[660,24,726,22,"events"],[660,30,726,28],[660,31,726,29,"event_names"],[660,42,726,40],[660,43,726,41,"index"],[660,48,726,46],[660,49,726,47],[660,50,726,48],[660,51,726,49,"protected"],[660,60,726,58],[660,65,726,63],[660,69,726,67],[660,73,726,71,"namespace"],[660,82,726,80],[660,83,726,81,"clients"],[660,90,726,88],[660,91,726,89,"get"],[660,94,726,92],[660,95,726,93,"socket_id"],[660,104,726,102],[660,105,726,103],[660,106,726,104],[660,122,726,120],[660,123,726,121],[660,128,726,126],[660,133,726,131],[660,135,726,133],[661,12,727,10],[661,19,727,17],[662,14,728,12,"jsonrpc"],[662,21,728,19],[662,23,728,21],[662,28,728,26],[663,14,729,12,"error"],[663,19,729,17],[663,21,729,19,"createError"],[663,32,729,30],[663,33,729,31],[663,34,729,32],[663,39,729,37],[663,40,729,38],[664,14,730,12,"id"],[664,16,730,14],[664,18,730,16,"message"],[664,25,730,23],[664,26,730,24,"id"],[664,28,730,26],[664,32,730,30],[665,12,731,10],[665,13,731,11],[666,10,732,8],[667,10,733,8],[667,16,733,14,"socket_index"],[667,28,733,26],[667,31,733,29,"namespace"],[667,40,733,38],[667,41,733,39,"events"],[667,47,733,45],[667,48,733,46,"event_names"],[667,59,733,57],[667,60,733,58,"index"],[667,65,733,63],[667,66,733,64],[667,67,733,65],[667,68,733,66,"sockets"],[667,75,733,73],[667,76,733,74,"indexOf"],[667,83,733,81],[667,84,733,82,"socket_id"],[667,93,733,91],[667,94,733,92],[668,10,734,8],[668,14,734,12,"socket_index"],[668,26,734,24],[668,30,734,28],[668,31,734,29],[668,33,734,31],[669,12,735,10,"results"],[669,19,735,17],[669,20,735,18,"name"],[669,24,735,22],[669,25,735,23],[669,28,735,26],[669,73,735,71],[670,12,736,10],[671,10,737,8],[672,10,738,8,"namespace"],[672,19,738,17],[672,20,738,18,"events"],[672,26,738,24],[672,27,738,25,"event_names"],[672,38,738,36],[672,39,738,37,"index"],[672,44,738,42],[672,45,738,43],[672,46,738,44],[672,47,738,45,"sockets"],[672,54,738,52],[672,55,738,53,"push"],[672,59,738,57],[672,60,738,58,"socket_id"],[672,69,738,67],[672,70,738,68],[673,10,739,8,"results"],[673,17,739,15],[673,18,739,16,"name"],[673,22,739,20],[673,23,739,21],[673,26,739,24],[673,30,739,28],[674,8,740,6],[675,8,741,6],[675,15,741,13],[676,10,742,8,"jsonrpc"],[676,17,742,15],[676,19,742,17],[676,24,742,22],[677,10,743,8,"result"],[677,16,743,14],[677,18,743,16,"results"],[677,25,743,23],[678,10,744,8,"id"],[678,12,744,10],[678,14,744,12,"message"],[678,21,744,19],[678,22,744,20,"id"],[678,24,744,22],[678,28,744,26],[679,8,745,6],[679,9,745,7],[680,6,746,4],[680,7,746,5],[680,13,746,11],[680,17,746,15,"message"],[680,24,746,22],[680,25,746,23,"method"],[680,31,746,29],[680,36,746,34],[680,45,746,43],[680,47,746,45],[681,8,747,6],[681,12,747,10],[681,13,747,11,"message"],[681,20,747,18],[681,21,747,19,"params"],[681,27,747,25],[681,29,748,8],[681,36,748,15],[682,10,749,10,"jsonrpc"],[682,17,749,17],[682,19,749,19],[682,24,749,24],[683,10,750,10,"error"],[683,15,750,15],[683,17,750,17,"createError"],[683,28,750,28],[683,29,750,29],[683,30,750,30],[683,34,750,34],[683,35,750,35],[684,10,751,10,"id"],[684,12,751,12],[684,14,751,14,"message"],[684,21,751,21],[684,22,751,22,"id"],[684,24,751,24],[684,28,751,28],[685,8,752,8],[685,9,752,9],[686,8,753,6],[686,14,753,12,"results"],[686,21,753,19],[686,24,753,22],[686,25,753,23],[686,26,753,24],[687,8,754,6],[687,13,754,11],[687,19,754,17,"name"],[687,23,754,21],[687,27,754,25,"message"],[687,34,754,32],[687,35,754,33,"params"],[687,41,754,39],[687,43,754,41],[688,10,755,8],[688,14,755,12],[688,15,755,13],[688,19,755,17],[688,20,755,18,"namespaces"],[688,30,755,28],[688,31,755,29,"ns"],[688,33,755,31],[688,34,755,32],[688,35,755,33,"events"],[688,41,755,39],[688,42,755,40,"name"],[688,46,755,44],[688,47,755,45],[688,49,755,47],[689,12,756,10,"results"],[689,19,756,17],[689,20,756,18,"name"],[689,24,756,22],[689,25,756,23],[689,28,756,26],[689,52,756,50],[690,12,757,10],[691,10,758,8],[692,10,759,8],[692,16,759,14,"index"],[692,21,759,19],[692,24,759,22],[692,28,759,26],[692,29,759,27,"namespaces"],[692,39,759,37],[692,40,759,38,"ns"],[692,42,759,40],[692,43,759,41],[692,44,759,42,"events"],[692,50,759,48],[692,51,759,49,"name"],[692,55,759,53],[692,56,759,54],[692,57,759,55,"sockets"],[692,64,759,62],[692,65,759,63,"indexOf"],[692,72,759,70],[692,73,759,71,"socket_id"],[692,82,759,80],[692,83,759,81],[693,10,760,8],[693,14,760,12,"index"],[693,19,760,17],[693,24,760,22],[693,25,760,23],[693,26,760,24],[693,28,760,26],[694,12,761,10,"results"],[694,19,761,17],[694,20,761,18,"name"],[694,24,761,22],[694,25,761,23],[694,28,761,26],[694,44,761,42],[695,12,762,10],[696,10,763,8],[697,10,764,8],[697,14,764,12],[697,15,764,13,"namespaces"],[697,25,764,23],[697,26,764,24,"ns"],[697,28,764,26],[697,29,764,27],[697,30,764,28,"events"],[697,36,764,34],[697,37,764,35,"name"],[697,41,764,39],[697,42,764,40],[697,43,764,41,"sockets"],[697,50,764,48],[697,51,764,49,"splice"],[697,57,764,55],[697,58,764,56,"index"],[697,63,764,61],[697,65,764,63],[697,66,764,64],[697,67,764,65],[698,10,765,8,"results"],[698,17,765,15],[698,18,765,16,"name"],[698,22,765,20],[698,23,765,21],[698,26,765,24],[698,30,765,28],[699,8,766,6],[700,8,767,6],[700,15,767,13],[701,10,768,8,"jsonrpc"],[701,17,768,15],[701,19,768,17],[701,24,768,22],[702,10,769,8,"result"],[702,16,769,14],[702,18,769,16,"results"],[702,25,769,23],[703,10,770,8,"id"],[703,12,770,10],[703,14,770,12,"message"],[703,21,770,19],[703,22,770,20,"id"],[703,24,770,22],[703,28,770,26],[704,8,771,6],[704,9,771,7],[705,6,772,4],[705,7,772,5],[705,13,772,11],[705,17,772,15,"message"],[705,24,772,22],[705,25,772,23,"method"],[705,31,772,29],[705,36,772,34],[705,47,772,45],[705,49,772,47],[706,8,773,6],[706,12,773,10],[706,13,773,11,"message"],[706,20,773,18],[706,21,773,19,"params"],[706,27,773,25],[706,29,774,8],[706,36,774,15],[707,10,775,10,"jsonrpc"],[707,17,775,17],[707,19,775,19],[707,24,775,24],[708,10,776,10,"error"],[708,15,776,15],[708,17,776,17,"createError"],[708,28,776,28],[708,29,776,29],[708,30,776,30],[708,35,776,35],[708,36,776,36],[709,10,777,10,"id"],[709,12,777,12],[709,14,777,14,"message"],[709,21,777,21],[709,22,777,22,"id"],[709,24,777,24],[709,28,777,28],[710,8,778,8],[710,9,778,9],[711,6,779,4],[712,6,780,4],[712,10,780,8],[712,11,780,9],[712,15,780,13],[712,16,780,14,"namespaces"],[712,26,780,24],[712,27,780,25,"ns"],[712,29,780,27],[712,30,780,28],[712,31,780,29,"rpc_methods"],[712,42,780,40],[712,43,780,41,"message"],[712,50,780,48],[712,51,780,49,"method"],[712,57,780,55],[712,58,780,56],[712,60,780,58],[713,8,781,6],[713,15,781,13],[714,10,782,8,"jsonrpc"],[714,17,782,15],[714,19,782,17],[714,24,782,22],[715,10,783,8,"error"],[715,15,783,13],[715,17,783,15,"createError"],[715,28,783,26],[715,29,783,27],[715,30,783,28],[715,35,783,33],[715,36,783,34],[716,10,784,8,"id"],[716,12,784,10],[716,14,784,12,"message"],[716,21,784,19],[716,22,784,20,"id"],[716,24,784,22],[716,28,784,26],[717,8,785,6],[717,9,785,7],[718,6,786,4],[719,6,787,4],[719,10,787,8,"response"],[719,18,787,16],[719,21,787,19],[719,25,787,23],[720,6,788,4],[720,10,788,8],[720,14,788,12],[720,15,788,13,"namespaces"],[720,25,788,23],[720,26,788,24,"ns"],[720,28,788,26],[720,29,788,27],[720,30,788,28,"rpc_methods"],[720,41,788,39],[720,42,788,40,"message"],[720,49,788,47],[720,50,788,48,"method"],[720,56,788,54],[720,57,788,55],[720,58,788,56,"protected"],[720,67,788,65],[720,72,788,70],[720,76,788,74],[720,80,788,78],[720,84,788,82],[720,85,788,83,"namespaces"],[720,95,788,93],[720,96,788,94,"ns"],[720,98,788,96],[720,99,788,97],[720,100,788,98,"clients"],[720,107,788,105],[720,108,788,106,"get"],[720,111,788,109],[720,112,788,110,"socket_id"],[720,121,788,119],[720,122,788,120],[720,123,788,121],[720,139,788,137],[720,140,788,138],[720,145,788,143],[720,150,788,148],[720,152,788,150],[721,8,789,6],[721,15,789,13],[722,10,790,8,"jsonrpc"],[722,17,790,15],[722,19,790,17],[722,24,790,22],[723,10,791,8,"error"],[723,15,791,13],[723,17,791,15,"createError"],[723,28,791,26],[723,29,791,27],[723,30,791,28],[723,35,791,33],[723,36,791,34],[724,10,792,8,"id"],[724,12,792,10],[724,14,792,12,"message"],[724,21,792,19],[724,22,792,20,"id"],[724,24,792,22],[724,28,792,26],[725,8,793,6],[725,9,793,7],[726,6,794,4],[727,6,795,4],[727,10,795,8],[728,8,796,6,"response"],[728,16,796,14],[728,19,796,17],[728,25,796,23],[728,29,796,27],[728,30,796,28,"namespaces"],[728,40,796,38],[728,41,796,39,"ns"],[728,43,796,41],[728,44,796,42],[728,45,796,43,"rpc_methods"],[728,56,796,54],[728,57,796,55,"message"],[728,64,796,62],[728,65,796,63,"method"],[728,71,796,69],[728,72,796,70],[728,73,796,71,"fn"],[728,75,796,73],[728,76,797,8,"message"],[728,83,797,15],[728,84,797,16,"params"],[728,90,797,22],[728,92,798,8,"socket_id"],[728,101,799,6],[728,102,799,7],[729,6,800,4],[729,7,800,5],[729,8,800,6],[729,15,800,13,"error"],[729,20,800,18],[729,22,800,20],[730,8,801,6],[730,12,801,10],[730,13,801,11,"message"],[730,20,801,18],[730,21,801,19,"id"],[730,23,801,21],[730,25,801,23],[731,8,802,6],[731,12,802,10,"error"],[731,17,802,15],[731,29,802,27,"Error"],[731,34,802,32],[731,36,803,8],[731,43,803,15],[732,10,804,10,"jsonrpc"],[732,17,804,17],[732,19,804,19],[732,24,804,24],[733,10,805,10,"error"],[733,15,805,15],[733,17,805,17],[734,12,806,12,"code"],[734,16,806,16],[734,18,806,18],[734,19,806,19],[734,23,806,23],[735,12,807,12,"message"],[735,19,807,19],[735,21,807,21,"error"],[735,26,807,26],[735,27,807,27,"name"],[735,31,807,31],[736,12,808,12,"data"],[736,16,808,16],[736,18,808,18,"error"],[736,23,808,23],[736,24,808,24,"message"],[737,10,809,10],[737,11,809,11],[738,10,810,10,"id"],[738,12,810,12],[738,14,810,14,"message"],[738,21,810,21],[738,22,810,22,"id"],[739,8,811,8],[739,9,811,9],[740,8,812,6],[740,15,812,13],[741,10,813,8,"jsonrpc"],[741,17,813,15],[741,19,813,17],[741,24,813,22],[742,10,814,8,"error"],[742,15,814,13],[743,10,815,8,"id"],[743,12,815,10],[743,14,815,12,"message"],[743,21,815,19],[743,22,815,20,"id"],[744,8,816,6],[744,9,816,7],[745,6,817,4],[746,6,818,4],[746,10,818,8],[746,11,818,9,"message"],[746,18,818,16],[746,19,818,17,"id"],[746,21,818,19],[746,23,818,21],[747,6,819,4],[747,10,819,8,"message"],[747,17,819,15],[747,18,819,16,"method"],[747,24,819,22],[747,29,819,27],[747,40,819,38],[747,44,819,42,"response"],[747,52,819,50],[747,57,819,55],[747,61,819,59],[747,63,819,61],[748,8,820,6],[748,14,820,12,"s"],[748,15,820,13],[748,18,820,16],[748,22,820,20],[748,23,820,21,"namespaces"],[748,33,820,31],[748,34,820,32,"ns"],[748,36,820,34],[748,37,820,35],[748,38,820,36,"clients"],[748,45,820,43],[748,46,820,44,"get"],[748,49,820,47],[748,50,820,48,"socket_id"],[748,59,820,57],[748,60,820,58],[749,8,821,6,"s"],[749,9,821,7],[749,10,821,8],[749,26,821,24],[749,27,821,25],[749,30,821,28],[749,34,821,32],[750,8,822,6],[750,12,822,10],[750,13,822,11,"namespaces"],[750,23,822,21],[750,24,822,22,"ns"],[750,26,822,24],[750,27,822,25],[750,28,822,26,"clients"],[750,35,822,33],[750,36,822,34,"set"],[750,39,822,37],[750,40,822,38,"socket_id"],[750,49,822,47],[750,51,822,49,"s"],[750,52,822,50],[750,53,822,51],[751,6,823,4],[752,6,824,4],[752,13,824,11],[753,8,825,6,"jsonrpc"],[753,15,825,13],[753,17,825,15],[753,22,825,20],[754,8,826,6,"result"],[754,14,826,12],[754,16,826,14,"response"],[754,24,826,22],[755,8,827,6,"id"],[755,10,827,8],[755,12,827,10,"message"],[755,19,827,17],[755,20,827,18,"id"],[756,6,828,4],[756,7,828,5],[757,4,829,2],[758,4,830,2],[759,0,831,0],[760,0,832,0],[761,0,833,0],[762,0,834,0],[763,0,835,0],[764,0,836,0],[765,4,837,2,"_generateNamespace"],[765,22,837,20,"_generateNamespace"],[765,23,837,21,"name"],[765,27,837,25],[765,29,837,27],[766,6,838,4],[766,10,838,8],[766,11,838,9,"namespaces"],[766,21,838,19],[766,22,838,20,"name"],[766,26,838,24],[766,27,838,25],[766,30,838,28],[767,8,839,6,"rpc_methods"],[767,19,839,17],[767,21,839,19],[768,10,840,8,"__listMethods"],[768,23,840,21],[768,25,840,23],[769,12,841,10,"fn"],[769,14,841,12],[769,16,841,14,"fn"],[769,17,841,14],[769,22,841,20,"Object"],[769,28,841,26],[769,29,841,27,"keys"],[769,33,841,31],[769,34,841,32],[769,38,841,36],[769,39,841,37,"namespaces"],[769,49,841,47],[769,50,841,48,"name"],[769,54,841,52],[769,55,841,53],[769,56,841,54,"rpc_methods"],[769,67,841,65],[769,68,841,66],[770,12,842,10,"protected"],[770,21,842,19],[770,23,842,21],[771,10,843,8],[772,8,844,6],[772,9,844,7],[773,8,845,6,"clients"],[773,15,845,13],[773,17,845,15],[773,32,845,31],[773,36,845,35,"Map"],[773,39,845,38],[773,40,845,39],[773,41,845,40],[774,8,846,6,"events"],[774,14,846,12],[774,16,846,14],[774,17,846,15],[775,6,847,4],[775,7,847,5],[776,4,848,2],[777,2,849,0],[777,3,849,1],[778,2,850,0],[778,6,850,4,"RPC_ERRORS"],[778,16,850,14],[778,19,850,17],[778,34,850,33],[778,38,850,37,"Map"],[778,41,850,40],[778,42,850,41],[778,43,851,2],[778,44,851,3],[778,45,851,4],[778,49,851,8],[778,51,851,10],[778,71,851,30],[778,72,851,31],[778,74,852,2],[778,75,852,3],[778,76,852,4],[778,81,852,9],[778,83,852,11],[778,100,852,28],[778,101,852,29],[778,103,853,2],[778,104,853,3],[778,105,853,4],[778,110,853,9],[778,112,853,11],[778,130,853,29],[778,131,853,30],[778,133,854,2],[778,134,854,3],[778,135,854,4],[778,140,854,9],[778,142,854,11],[778,158,854,27],[778,159,854,28],[778,161,855,2],[778,162,855,3],[778,163,855,4],[778,168,855,9],[778,170,855,11],[778,186,855,27],[778,187,855,28],[778,189,856,2],[778,190,856,3],[778,191,856,4],[778,196,856,9],[778,198,856,11],[778,216,856,29],[778,217,856,30],[778,219,857,2],[778,220,857,3],[778,221,857,4],[778,226,857,9],[778,228,857,11],[778,246,857,29],[778,247,857,30],[778,249,858,2],[778,250,858,3],[778,251,858,4],[778,256,858,9],[778,258,858,11],[778,275,858,28],[778,276,858,29],[778,278,859,2],[778,279,859,3],[778,280,859,4],[778,285,859,9],[778,287,859,11],[778,300,859,24],[778,301,859,25],[778,302,860,1],[778,303,860,2],[779,2,861,0],[779,11,861,9,"createError"],[779,22,861,20,"createError"],[779,23,861,21,"code"],[779,27,861,25],[779,29,861,27,"details"],[779,36,861,34],[779,38,861,36],[780,4,862,2],[780,10,862,8,"error"],[780,15,862,13],[780,18,862,16],[781,6,863,4,"code"],[781,10,863,8],[782,6,864,4,"message"],[782,13,864,11],[782,15,864,13,"RPC_ERRORS"],[782,25,864,23],[782,26,864,24,"get"],[782,29,864,27],[782,30,864,28,"code"],[782,34,864,32],[782,35,864,33],[782,39,864,37],[783,4,865,2],[783,5,865,3],[784,4,866,2],[784,8,866,6,"details"],[784,15,866,13],[784,17,866,15,"error"],[784,22,866,20],[784,23,866,21],[784,29,866,27],[784,30,866,28],[784,33,866,31,"details"],[784,40,866,38],[785,4,867,2],[785,11,867,9,"error"],[785,16,867,14],[786,2,868,0],[788,2,870,0],[789,2,871,0],[789,6,871,4,"Client"],[789,12,871,10],[789,15,871,13],[789,29,871,27,"CommonClient"],[789,41,871,39],[789,42,871,40],[790,4,872,2,"constructor"],[790,15,872,13,"constructor"],[790,16,872,14,"address"],[790,23,872,21],[790,26,872,24],[790,47,872,45],[790,49,872,47],[791,6,873,4,"autoconnect"],[791,17,873,15],[791,20,873,18],[791,24,873,22],[792,6,874,4,"reconnect"],[792,15,874,13],[792,18,874,16],[792,22,874,20],[793,6,875,4,"reconnect_interval"],[793,24,875,22],[793,27,875,25],[793,30,875,28],[794,6,876,4,"max_reconnects"],[794,20,876,18],[794,23,876,21],[794,24,876,22],[795,6,877,4],[795,9,877,7,"rest_options"],[796,4,878,2],[796,5,878,3],[796,8,878,6],[796,9,878,7],[796,10,878,8],[796,12,878,10,"generate_request_id"],[796,31,878,29],[796,33,878,31],[797,6,879,4],[797,11,879,9],[797,12,880,6,"WebSocket"],[797,21,880,15],[797,23,881,6,"address"],[797,30,881,13],[797,32,882,6],[798,8,883,8,"autoconnect"],[798,19,883,19],[799,8,884,8,"reconnect"],[799,17,884,17],[800,8,885,8,"reconnect_interval"],[800,26,885,26],[801,8,886,8,"max_reconnects"],[801,22,886,22],[802,8,887,8],[802,11,887,11,"rest_options"],[803,6,888,6],[803,7,888,7],[803,9,889,6,"generate_request_id"],[803,28,890,4],[803,29,890,5],[804,4,891,2],[805,2,892,0],[805,3,892,1],[806,2,894,0,"exports"],[806,9,894,7],[806,10,894,8,"Client"],[806,16,894,14],[806,19,894,17,"Client"],[806,25,894,23],[807,2,895,0,"exports"],[807,9,895,7],[807,10,895,8,"CommonClient"],[807,22,895,20],[807,25,895,23,"CommonClient"],[807,37,895,35],[808,2,896,0,"exports"],[808,9,896,7],[808,10,896,8,"DefaultDataPack"],[808,25,896,23],[808,28,896,26,"DefaultDataPack"],[808,43,896,41],[809,2,897,0,"exports"],[809,9,897,7],[809,10,897,8,"Server"],[809,16,897,14],[809,19,897,17,"Server"],[809,25,897,23],[810,2,898,0,"exports"],[810,9,898,7],[810,10,898,8,"WebSocket"],[810,19,898,17],[810,22,898,20,"WebSocket"],[810,31,898,29],[811,2,899,0,"exports"],[811,9,899,7],[811,10,899,8,"createError"],[811,21,899,19],[811,24,899,22,"createError"],[811,35,899,33],[812,0,899,34],[812,3]],"functionMap":{"names":["<global>","_interopDefault","WebSocket","DefaultDataPack","DefaultDataPack#encode","DefaultDataPack#decode","CommonClient","CommonClient#constructor","<anonymous>","CommonClient#connect","CommonClient#call","Promise$argument_0","socket.send$argument_2","setTimeout$argument_0","CommonClient#login","CommonClient#listMethods","CommonClient#notify","socket.send$argument_1","CommonClient#subscribe","CommonClient#unsubscribe","CommonClient#close","CommonClient#setAutoReconnect","CommonClient#setReconnectInterval","CommonClient#setMaxReconnects","CommonClient#_connect","socket.addEventListener$argument_1","Promise.resolve.then$argument_0","Server","Server#constructor","wss.on$argument_1","socket.on$argument_1","Server#register","_protected","_public","Server#setAuth","Server#_makeProtectedMethod","Server#_makePublicMethod","Server#_makeProtectedEvent","Server#_makePublicEvent","Server#closeNamespace","Server#event","on$argument_1","Server#of","register","event","get__eventList","emit","get__name","connected","socket_ids.reduce$argument_0","clients","Server#eventList","Server#createError","Server#close","Server#_handleRPC","Server#_runMethod","Server#_generateNamespace","namespaces.name.rpc_methods.__listMethods.fn","createError","Client","Client#constructor"],"mappings":"AAA;ACO,+ED;AEM;CFE;sBGG;ECC;GDE;EEC;GFE;CHC;mBMG;EC2B;uDCoB,+ED;GDW;EGM;GHS;EIU;uBCK;+DCS;kDCI;WDG;ODE;KDC;GJC;EQO;GRI;ESM;GTE;EUQ;uBLC;sDMO;ONG;KKC;GVC;EYQ;GZQ;EaQ;GbM;EcQ;GdE;EeO;GfE;EgBO;GhBE;EiBO;GjBE;EkBS;yCCG;KDI;4CCC;sCCgB;SDE;wCCI;WDE;KDe;0CCC,oCD;0CCC;mBZE,sCY;UZO,qCY;KDG;GlBC;CNC;a2BC;ECW;6BCM,4BD;8BCC;yBCM,mDD;yBCC;ODU;KDK;yBCC,oCD;GDC;EIU;iBCO,yCD;cEC,sCF;GJE;EOS;GPE;EQQ;GRE;ESQ;GTE;EUQ;GVE;EWQ;GXE;EYQ;GZQ;EaS;kBCW;KDa;iBRE,wCQ;cPC,qCO;GbE;EeQ;MCK;ODQ;MEE;OFM;MGE;OHE;MIS;OJa;MKQ;OLE;MMO;UCG;YDG;ONG;MQO;ORE;GfE;EwBQ;GxBG;EyBS;GzBM;E0BM;uB1CC;K0CQ;G1BC;E2BQ;yBxBC;KwB0C;G3BC;E4BS;G5BsJ;E6BQ;cCI,oDD;G7BO;C3BC;A0DY;C1DO;a2DG;ECC;GDmB;C3DC"}},"type":"js/module"}]}