{"dependencies":[{"name":"../utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":275},"end":{"line":8,"column":125,"index":400}}],"key":"dGswK136diHRCgUa8xpQUn/UMbc=","exportNames":["*"]}},{"name":"./modular.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":401},"end":{"line":9,"column":35,"index":436}}],"key":"9k+FDNYf3zXm2KDVSy5nBT9psY4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.montgomery = montgomery;\n  var _utils = require(_dependencyMap[0], \"../utils.js\");\n  var _modular = require(_dependencyMap[1], \"./modular.js\");\n  /**\n   * Montgomery curve methods. It's not really whole montgomery curve,\n   * just bunch of very specific methods for X25519 / X448 from\n   * [RFC 7748](https://www.rfc-editor.org/rfc/rfc7748)\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n  const _0n = BigInt(0);\n  const _1n = BigInt(1);\n  const _2n = BigInt(2);\n  function validateOpts(curve) {\n    (0, _utils._validateObject)(curve, {\n      adjustScalarBytes: 'function',\n      powPminus2: 'function'\n    });\n    return Object.freeze({\n      ...curve\n    });\n  }\n  function montgomery(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const {\n      P,\n      type,\n      adjustScalarBytes,\n      powPminus2,\n      randomBytes: rand\n    } = CURVE;\n    const is25519 = type === 'x25519';\n    if (!is25519 && type !== 'x448') throw new Error('invalid type');\n    const randomBytes_ = rand || _utils.randomBytes;\n    const montgomeryBits = is25519 ? 255 : 448;\n    const fieldLen = is25519 ? 32 : 56;\n    const Gu = is25519 ? BigInt(9) : BigInt(5);\n    // RFC 7748 #5:\n    // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519 and\n    // (156326 - 2) / 4 = 39081 for curve448/X448\n    // const a = is25519 ? 156326n : 486662n;\n    const a24 = is25519 ? BigInt(121665) : BigInt(39081);\n    // RFC: x25519 \"the resulting integer is of the form 2^254 plus\n    // eight times a value between 0 and 2^251 - 1 (inclusive)\"\n    // x448: \"2^447 plus four times a value between 0 and 2^445 - 1 (inclusive)\"\n    const minScalar = is25519 ? _2n ** BigInt(254) : _2n ** BigInt(447);\n    const maxAdded = is25519 ? BigInt(8) * _2n ** BigInt(251) - _1n : BigInt(4) * _2n ** BigInt(445) - _1n;\n    const maxScalar = minScalar + maxAdded + _1n; // (inclusive)\n    const modP = n => (0, _modular.mod)(n, P);\n    const GuBytes = encodeU(Gu);\n    function encodeU(u) {\n      return (0, _utils.numberToBytesLE)(modP(u), fieldLen);\n    }\n    function decodeU(u) {\n      const _u = (0, _utils.ensureBytes)('u coordinate', u, fieldLen);\n      // RFC: When receiving such an array, implementations of X25519\n      // (but not X448) MUST mask the most significant bit in the final byte.\n      if (is25519) _u[31] &= 127; // 0b0111_1111\n      // RFC: Implementations MUST accept non-canonical values and process them as\n      // if they had been reduced modulo the field prime.  The non-canonical\n      // values are 2^255 - 19 through 2^255 - 1 for X25519 and 2^448 - 2^224\n      // - 1 through 2^448 - 1 for X448.\n      return modP((0, _utils.bytesToNumberLE)(_u));\n    }\n    function decodeScalar(scalar) {\n      return (0, _utils.bytesToNumberLE)(adjustScalarBytes((0, _utils.ensureBytes)('scalar', scalar, fieldLen)));\n    }\n    function scalarMult(scalar, u) {\n      const pu = montgomeryLadder(decodeU(u), decodeScalar(scalar));\n      // Some public keys are useless, of low-order. Curve author doesn't think\n      // it needs to be validated, but we do it nonetheless.\n      // https://cr.yp.to/ecdh.html#validate\n      if (pu === _0n) throw new Error('invalid private or public key received');\n      return encodeU(pu);\n    }\n    // Computes public key from private. By doing scalar multiplication of base point.\n    function scalarMultBase(scalar) {\n      return scalarMult(scalar, GuBytes);\n    }\n    // cswap from RFC7748 \"example code\"\n    function cswap(swap, x_2, x_3) {\n      // dummy = mask(swap) AND (x_2 XOR x_3)\n      // Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n      // and x_3, computed, e.g., as mask(swap) = 0 - swap.\n      const dummy = modP(swap * (x_2 - x_3));\n      x_2 = modP(x_2 - dummy); // x_2 = x_2 XOR dummy\n      x_3 = modP(x_3 + dummy); // x_3 = x_3 XOR dummy\n      return {\n        x_2,\n        x_3\n      };\n    }\n    /**\n     * Montgomery x-only multiplication ladder.\n     * @param pointU u coordinate (x) on Montgomery Curve 25519\n     * @param scalar by which the point would be multiplied\n     * @returns new Point on Montgomery curve\n     */\n    function montgomeryLadder(u, scalar) {\n      (0, _utils.aInRange)('u', u, _0n, P);\n      (0, _utils.aInRange)('scalar', scalar, minScalar, maxScalar);\n      const k = scalar;\n      const x_1 = u;\n      let x_2 = _1n;\n      let z_2 = _0n;\n      let x_3 = u;\n      let z_3 = _1n;\n      let swap = _0n;\n      for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n        const k_t = k >> t & _1n;\n        swap ^= k_t;\n        ({\n          x_2,\n          x_3\n        } = cswap(swap, x_2, x_3));\n        ({\n          x_2: z_2,\n          x_3: z_3\n        } = cswap(swap, z_2, z_3));\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = modP(A * A);\n        const B = x_2 - z_2;\n        const BB = modP(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = modP(D * A);\n        const CB = modP(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = modP(dacb * dacb);\n        z_3 = modP(x_1 * modP(da_cb * da_cb));\n        x_2 = modP(AA * BB);\n        z_2 = modP(E * (AA + modP(a24 * E)));\n      }\n      ({\n        x_2,\n        x_3\n      } = cswap(swap, x_2, x_3));\n      ({\n        x_2: z_2,\n        x_3: z_3\n      } = cswap(swap, z_2, z_3));\n      const z2 = powPminus2(z_2); // `Fp.pow(x, P - _2n)` is much slower equivalent\n      return modP(x_2 * z2); // Return x_2 * (z_2^(p - 2))\n    }\n    const lengths = {\n      secretKey: fieldLen,\n      publicKey: fieldLen,\n      seed: fieldLen\n    };\n    const randomSecretKey = (seed = randomBytes_(fieldLen)) => {\n      (0, _utils.abytes)(seed, lengths.seed);\n      return seed;\n    };\n    function keygen(seed) {\n      const secretKey = randomSecretKey(seed);\n      return {\n        secretKey,\n        publicKey: scalarMultBase(secretKey)\n      };\n    }\n    const utils = {\n      randomSecretKey,\n      randomPrivateKey: randomSecretKey\n    };\n    return {\n      keygen,\n      getSharedSecret: (secretKey, publicKey) => scalarMult(secretKey, publicKey),\n      getPublicKey: secretKey => scalarMultBase(secretKey),\n      scalarMult,\n      scalarMultBase,\n      utils,\n      GuBytes: GuBytes.slice(),\n      lengths\n    };\n  }\n});","lineCount":184,"map":[[6,2,8,0],[6,6,8,0,"_utils"],[6,12,8,0],[6,15,8,0,"require"],[6,22,8,0],[6,23,8,0,"_dependencyMap"],[6,37,8,0],[7,2,9,0],[7,6,9,0,"_modular"],[7,14,9,0],[7,17,9,0,"require"],[7,24,9,0],[7,25,9,0,"_dependencyMap"],[7,39,9,0],[8,2,1,0],[9,0,2,0],[10,0,3,0],[11,0,4,0],[12,0,5,0],[13,0,6,0],[14,2,7,0],[16,2,10,0],[16,8,10,6,"_0n"],[16,11,10,9],[16,14,10,12,"BigInt"],[16,20,10,18],[16,21,10,19],[16,22,10,20],[16,23,10,21],[17,2,11,0],[17,8,11,6,"_1n"],[17,11,11,9],[17,14,11,12,"BigInt"],[17,20,11,18],[17,21,11,19],[17,22,11,20],[17,23,11,21],[18,2,12,0],[18,8,12,6,"_2n"],[18,11,12,9],[18,14,12,12,"BigInt"],[18,20,12,18],[18,21,12,19],[18,22,12,20],[18,23,12,21],[19,2,13,0],[19,11,13,9,"validateOpts"],[19,23,13,21,"validateOpts"],[19,24,13,22,"curve"],[19,29,13,27],[19,31,13,29],[20,4,14,4],[20,8,14,4,"_validateObject"],[20,30,14,19],[20,32,14,20,"curve"],[20,37,14,25],[20,39,14,27],[21,6,15,8,"adjustScalarBytes"],[21,23,15,25],[21,25,15,27],[21,35,15,37],[22,6,16,8,"powPminus2"],[22,16,16,18],[22,18,16,20],[23,4,17,4],[23,5,17,5],[23,6,17,6],[24,4,18,4],[24,11,18,11,"Object"],[24,17,18,17],[24,18,18,18,"freeze"],[24,24,18,24],[24,25,18,25],[25,6,18,27],[25,9,18,30,"curve"],[26,4,18,36],[26,5,18,37],[26,6,18,38],[27,2,19,0],[28,2,20,7],[28,11,20,16,"montgomery"],[28,21,20,26,"montgomery"],[28,22,20,27,"curveDef"],[28,30,20,35],[28,32,20,37],[29,4,21,4],[29,10,21,10,"CURVE"],[29,15,21,15],[29,18,21,18,"validateOpts"],[29,30,21,30],[29,31,21,31,"curveDef"],[29,39,21,39],[29,40,21,40],[30,4,22,4],[30,10,22,10],[31,6,22,12,"P"],[31,7,22,13],[32,6,22,15,"type"],[32,10,22,19],[33,6,22,21,"adjustScalarBytes"],[33,23,22,38],[34,6,22,40,"powPminus2"],[34,16,22,50],[35,6,22,52,"randomBytes"],[35,17,22,63],[35,19,22,65,"rand"],[36,4,22,70],[36,5,22,71],[36,8,22,74,"CURVE"],[36,13,22,79],[37,4,23,4],[37,10,23,10,"is25519"],[37,17,23,17],[37,20,23,20,"type"],[37,24,23,24],[37,29,23,29],[37,37,23,37],[38,4,24,4],[38,8,24,8],[38,9,24,9,"is25519"],[38,16,24,16],[38,20,24,20,"type"],[38,24,24,24],[38,29,24,29],[38,35,24,35],[38,37,25,8],[38,43,25,14],[38,47,25,18,"Error"],[38,52,25,23],[38,53,25,24],[38,67,25,38],[38,68,25,39],[39,4,26,4],[39,10,26,10,"randomBytes_"],[39,22,26,22],[39,25,26,25,"rand"],[39,29,26,29],[39,33,26,33,"randomBytes"],[39,51,26,44],[40,4,27,4],[40,10,27,10,"montgomeryBits"],[40,24,27,24],[40,27,27,27,"is25519"],[40,34,27,34],[40,37,27,37],[40,40,27,40],[40,43,27,43],[40,46,27,46],[41,4,28,4],[41,10,28,10,"fieldLen"],[41,18,28,18],[41,21,28,21,"is25519"],[41,28,28,28],[41,31,28,31],[41,33,28,33],[41,36,28,36],[41,38,28,38],[42,4,29,4],[42,10,29,10,"Gu"],[42,12,29,12],[42,15,29,15,"is25519"],[42,22,29,22],[42,25,29,25,"BigInt"],[42,31,29,31],[42,32,29,32],[42,33,29,33],[42,34,29,34],[42,37,29,37,"BigInt"],[42,43,29,43],[42,44,29,44],[42,45,29,45],[42,46,29,46],[43,4,30,4],[44,4,31,4],[45,4,32,4],[46,4,33,4],[47,4,34,4],[47,10,34,10,"a24"],[47,13,34,13],[47,16,34,16,"is25519"],[47,23,34,23],[47,26,34,26,"BigInt"],[47,32,34,32],[47,33,34,33],[47,39,34,39],[47,40,34,40],[47,43,34,43,"BigInt"],[47,49,34,49],[47,50,34,50],[47,55,34,55],[47,56,34,56],[48,4,35,4],[49,4,36,4],[50,4,37,4],[51,4,38,4],[51,10,38,10,"minScalar"],[51,19,38,19],[51,22,38,22,"is25519"],[51,29,38,29],[51,32,38,32,"_2n"],[51,35,38,35],[51,39,38,39,"BigInt"],[51,45,38,45],[51,46,38,46],[51,49,38,49],[51,50,38,50],[51,53,38,53,"_2n"],[51,56,38,56],[51,60,38,60,"BigInt"],[51,66,38,66],[51,67,38,67],[51,70,38,70],[51,71,38,71],[52,4,39,4],[52,10,39,10,"maxAdded"],[52,18,39,18],[52,21,39,21,"is25519"],[52,28,39,28],[52,31,40,10,"BigInt"],[52,37,40,16],[52,38,40,17],[52,39,40,18],[52,40,40,19],[52,43,40,22,"_2n"],[52,46,40,25],[52,50,40,29,"BigInt"],[52,56,40,35],[52,57,40,36],[52,60,40,39],[52,61,40,40],[52,64,40,43,"_1n"],[52,67,40,46],[52,70,41,10,"BigInt"],[52,76,41,16],[52,77,41,17],[52,78,41,18],[52,79,41,19],[52,82,41,22,"_2n"],[52,85,41,25],[52,89,41,29,"BigInt"],[52,95,41,35],[52,96,41,36],[52,99,41,39],[52,100,41,40],[52,103,41,43,"_1n"],[52,106,41,46],[53,4,42,4],[53,10,42,10,"maxScalar"],[53,19,42,19],[53,22,42,22,"minScalar"],[53,31,42,31],[53,34,42,34,"maxAdded"],[53,42,42,42],[53,45,42,45,"_1n"],[53,48,42,48],[53,49,42,49],[53,50,42,50],[54,4,43,4],[54,10,43,10,"modP"],[54,14,43,14],[54,17,43,18,"n"],[54,18,43,19],[54,22,43,24],[54,26,43,24,"mod"],[54,38,43,27],[54,40,43,28,"n"],[54,41,43,29],[54,43,43,31,"P"],[54,44,43,32],[54,45,43,33],[55,4,44,4],[55,10,44,10,"GuBytes"],[55,17,44,17],[55,20,44,20,"encodeU"],[55,27,44,27],[55,28,44,28,"Gu"],[55,30,44,30],[55,31,44,31],[56,4,45,4],[56,13,45,13,"encodeU"],[56,20,45,20,"encodeU"],[56,21,45,21,"u"],[56,22,45,22],[56,24,45,24],[57,6,46,8],[57,13,46,15],[57,17,46,15,"numberToBytesLE"],[57,39,46,30],[57,41,46,31,"modP"],[57,45,46,35],[57,46,46,36,"u"],[57,47,46,37],[57,48,46,38],[57,50,46,40,"fieldLen"],[57,58,46,48],[57,59,46,49],[58,4,47,4],[59,4,48,4],[59,13,48,13,"decodeU"],[59,20,48,20,"decodeU"],[59,21,48,21,"u"],[59,22,48,22],[59,24,48,24],[60,6,49,8],[60,12,49,14,"_u"],[60,14,49,16],[60,17,49,19],[60,21,49,19,"ensureBytes"],[60,39,49,30],[60,41,49,31],[60,55,49,45],[60,57,49,47,"u"],[60,58,49,48],[60,60,49,50,"fieldLen"],[60,68,49,58],[60,69,49,59],[61,6,50,8],[62,6,51,8],[63,6,52,8],[63,10,52,12,"is25519"],[63,17,52,19],[63,19,53,12,"_u"],[63,21,53,14],[63,22,53,15],[63,24,53,17],[63,25,53,18],[63,29,53,22],[63,32,53,25],[63,33,53,26],[63,34,53,27],[64,6,54,8],[65,6,55,8],[66,6,56,8],[67,6,57,8],[68,6,58,8],[68,13,58,15,"modP"],[68,17,58,19],[68,18,58,20],[68,22,58,20,"bytesToNumberLE"],[68,44,58,35],[68,46,58,36,"_u"],[68,48,58,38],[68,49,58,39],[68,50,58,40],[69,4,59,4],[70,4,60,4],[70,13,60,13,"decodeScalar"],[70,25,60,25,"decodeScalar"],[70,26,60,26,"scalar"],[70,32,60,32],[70,34,60,34],[71,6,61,8],[71,13,61,15],[71,17,61,15,"bytesToNumberLE"],[71,39,61,30],[71,41,61,31,"adjustScalarBytes"],[71,58,61,48],[71,59,61,49],[71,63,61,49,"ensureBytes"],[71,81,61,60],[71,83,61,61],[71,91,61,69],[71,93,61,71,"scalar"],[71,99,61,77],[71,101,61,79,"fieldLen"],[71,109,61,87],[71,110,61,88],[71,111,61,89],[71,112,61,90],[72,4,62,4],[73,4,63,4],[73,13,63,13,"scalarMult"],[73,23,63,23,"scalarMult"],[73,24,63,24,"scalar"],[73,30,63,30],[73,32,63,32,"u"],[73,33,63,33],[73,35,63,35],[74,6,64,8],[74,12,64,14,"pu"],[74,14,64,16],[74,17,64,19,"montgomeryLadder"],[74,33,64,35],[74,34,64,36,"decodeU"],[74,41,64,43],[74,42,64,44,"u"],[74,43,64,45],[74,44,64,46],[74,46,64,48,"decodeScalar"],[74,58,64,60],[74,59,64,61,"scalar"],[74,65,64,67],[74,66,64,68],[74,67,64,69],[75,6,65,8],[76,6,66,8],[77,6,67,8],[78,6,68,8],[78,10,68,12,"pu"],[78,12,68,14],[78,17,68,19,"_0n"],[78,20,68,22],[78,22,69,12],[78,28,69,18],[78,32,69,22,"Error"],[78,37,69,27],[78,38,69,28],[78,78,69,68],[78,79,69,69],[79,6,70,8],[79,13,70,15,"encodeU"],[79,20,70,22],[79,21,70,23,"pu"],[79,23,70,25],[79,24,70,26],[80,4,71,4],[81,4,72,4],[82,4,73,4],[82,13,73,13,"scalarMultBase"],[82,27,73,27,"scalarMultBase"],[82,28,73,28,"scalar"],[82,34,73,34],[82,36,73,36],[83,6,74,8],[83,13,74,15,"scalarMult"],[83,23,74,25],[83,24,74,26,"scalar"],[83,30,74,32],[83,32,74,34,"GuBytes"],[83,39,74,41],[83,40,74,42],[84,4,75,4],[85,4,76,4],[86,4,77,4],[86,13,77,13,"cswap"],[86,18,77,18,"cswap"],[86,19,77,19,"swap"],[86,23,77,23],[86,25,77,25,"x_2"],[86,28,77,28],[86,30,77,30,"x_3"],[86,33,77,33],[86,35,77,35],[87,6,78,8],[88,6,79,8],[89,6,80,8],[90,6,81,8],[90,12,81,14,"dummy"],[90,17,81,19],[90,20,81,22,"modP"],[90,24,81,26],[90,25,81,27,"swap"],[90,29,81,31],[90,33,81,35,"x_2"],[90,36,81,38],[90,39,81,41,"x_3"],[90,42,81,44],[90,43,81,45],[90,44,81,46],[91,6,82,8,"x_2"],[91,9,82,11],[91,12,82,14,"modP"],[91,16,82,18],[91,17,82,19,"x_2"],[91,20,82,22],[91,23,82,25,"dummy"],[91,28,82,30],[91,29,82,31],[91,30,82,32],[91,31,82,33],[92,6,83,8,"x_3"],[92,9,83,11],[92,12,83,14,"modP"],[92,16,83,18],[92,17,83,19,"x_3"],[92,20,83,22],[92,23,83,25,"dummy"],[92,28,83,30],[92,29,83,31],[92,30,83,32],[92,31,83,33],[93,6,84,8],[93,13,84,15],[94,8,84,17,"x_2"],[94,11,84,20],[95,8,84,22,"x_3"],[96,6,84,26],[96,7,84,27],[97,4,85,4],[98,4,86,4],[99,0,87,0],[100,0,88,0],[101,0,89,0],[102,0,90,0],[103,0,91,0],[104,4,92,4],[104,13,92,13,"montgomeryLadder"],[104,29,92,29,"montgomeryLadder"],[104,30,92,30,"u"],[104,31,92,31],[104,33,92,33,"scalar"],[104,39,92,39],[104,41,92,41],[105,6,93,8],[105,10,93,8,"aInRange"],[105,25,93,16],[105,27,93,17],[105,30,93,20],[105,32,93,22,"u"],[105,33,93,23],[105,35,93,25,"_0n"],[105,38,93,28],[105,40,93,30,"P"],[105,41,93,31],[105,42,93,32],[106,6,94,8],[106,10,94,8,"aInRange"],[106,25,94,16],[106,27,94,17],[106,35,94,25],[106,37,94,27,"scalar"],[106,43,94,33],[106,45,94,35,"minScalar"],[106,54,94,44],[106,56,94,46,"maxScalar"],[106,65,94,55],[106,66,94,56],[107,6,95,8],[107,12,95,14,"k"],[107,13,95,15],[107,16,95,18,"scalar"],[107,22,95,24],[108,6,96,8],[108,12,96,14,"x_1"],[108,15,96,17],[108,18,96,20,"u"],[108,19,96,21],[109,6,97,8],[109,10,97,12,"x_2"],[109,13,97,15],[109,16,97,18,"_1n"],[109,19,97,21],[110,6,98,8],[110,10,98,12,"z_2"],[110,13,98,15],[110,16,98,18,"_0n"],[110,19,98,21],[111,6,99,8],[111,10,99,12,"x_3"],[111,13,99,15],[111,16,99,18,"u"],[111,17,99,19],[112,6,100,8],[112,10,100,12,"z_3"],[112,13,100,15],[112,16,100,18,"_1n"],[112,19,100,21],[113,6,101,8],[113,10,101,12,"swap"],[113,14,101,16],[113,17,101,19,"_0n"],[113,20,101,22],[114,6,102,8],[114,11,102,13],[114,15,102,17,"t"],[114,16,102,18],[114,19,102,21,"BigInt"],[114,25,102,27],[114,26,102,28,"montgomeryBits"],[114,40,102,42],[114,43,102,45],[114,44,102,46],[114,45,102,47],[114,47,102,49,"t"],[114,48,102,50],[114,52,102,54,"_0n"],[114,55,102,57],[114,57,102,59,"t"],[114,58,102,60],[114,60,102,62],[114,62,102,64],[115,8,103,12],[115,14,103,18,"k_t"],[115,17,103,21],[115,20,103,25,"k"],[115,21,103,26],[115,25,103,30,"t"],[115,26,103,31],[115,29,103,35,"_1n"],[115,32,103,38],[116,8,104,12,"swap"],[116,12,104,16],[116,16,104,20,"k_t"],[116,19,104,23],[117,8,105,12],[117,9,105,13],[118,10,105,15,"x_2"],[118,13,105,18],[119,10,105,20,"x_3"],[120,8,105,24],[120,9,105,25],[120,12,105,28,"cswap"],[120,17,105,33],[120,18,105,34,"swap"],[120,22,105,38],[120,24,105,40,"x_2"],[120,27,105,43],[120,29,105,45,"x_3"],[120,32,105,48],[120,33,105,49],[121,8,106,12],[121,9,106,13],[122,10,106,15,"x_2"],[122,13,106,18],[122,15,106,20,"z_2"],[122,18,106,23],[123,10,106,25,"x_3"],[123,13,106,28],[123,15,106,30,"z_3"],[124,8,106,34],[124,9,106,35],[124,12,106,38,"cswap"],[124,17,106,43],[124,18,106,44,"swap"],[124,22,106,48],[124,24,106,50,"z_2"],[124,27,106,53],[124,29,106,55,"z_3"],[124,32,106,58],[124,33,106,59],[125,8,107,12,"swap"],[125,12,107,16],[125,15,107,19,"k_t"],[125,18,107,22],[126,8,108,12],[126,14,108,18,"A"],[126,15,108,19],[126,18,108,22,"x_2"],[126,21,108,25],[126,24,108,28,"z_2"],[126,27,108,31],[127,8,109,12],[127,14,109,18,"AA"],[127,16,109,20],[127,19,109,23,"modP"],[127,23,109,27],[127,24,109,28,"A"],[127,25,109,29],[127,28,109,32,"A"],[127,29,109,33],[127,30,109,34],[128,8,110,12],[128,14,110,18,"B"],[128,15,110,19],[128,18,110,22,"x_2"],[128,21,110,25],[128,24,110,28,"z_2"],[128,27,110,31],[129,8,111,12],[129,14,111,18,"BB"],[129,16,111,20],[129,19,111,23,"modP"],[129,23,111,27],[129,24,111,28,"B"],[129,25,111,29],[129,28,111,32,"B"],[129,29,111,33],[129,30,111,34],[130,8,112,12],[130,14,112,18,"E"],[130,15,112,19],[130,18,112,22,"AA"],[130,20,112,24],[130,23,112,27,"BB"],[130,25,112,29],[131,8,113,12],[131,14,113,18,"C"],[131,15,113,19],[131,18,113,22,"x_3"],[131,21,113,25],[131,24,113,28,"z_3"],[131,27,113,31],[132,8,114,12],[132,14,114,18,"D"],[132,15,114,19],[132,18,114,22,"x_3"],[132,21,114,25],[132,24,114,28,"z_3"],[132,27,114,31],[133,8,115,12],[133,14,115,18,"DA"],[133,16,115,20],[133,19,115,23,"modP"],[133,23,115,27],[133,24,115,28,"D"],[133,25,115,29],[133,28,115,32,"A"],[133,29,115,33],[133,30,115,34],[134,8,116,12],[134,14,116,18,"CB"],[134,16,116,20],[134,19,116,23,"modP"],[134,23,116,27],[134,24,116,28,"C"],[134,25,116,29],[134,28,116,32,"B"],[134,29,116,33],[134,30,116,34],[135,8,117,12],[135,14,117,18,"dacb"],[135,18,117,22],[135,21,117,25,"DA"],[135,23,117,27],[135,26,117,30,"CB"],[135,28,117,32],[136,8,118,12],[136,14,118,18,"da_cb"],[136,19,118,23],[136,22,118,26,"DA"],[136,24,118,28],[136,27,118,31,"CB"],[136,29,118,33],[137,8,119,12,"x_3"],[137,11,119,15],[137,14,119,18,"modP"],[137,18,119,22],[137,19,119,23,"dacb"],[137,23,119,27],[137,26,119,30,"dacb"],[137,30,119,34],[137,31,119,35],[138,8,120,12,"z_3"],[138,11,120,15],[138,14,120,18,"modP"],[138,18,120,22],[138,19,120,23,"x_1"],[138,22,120,26],[138,25,120,29,"modP"],[138,29,120,33],[138,30,120,34,"da_cb"],[138,35,120,39],[138,38,120,42,"da_cb"],[138,43,120,47],[138,44,120,48],[138,45,120,49],[139,8,121,12,"x_2"],[139,11,121,15],[139,14,121,18,"modP"],[139,18,121,22],[139,19,121,23,"AA"],[139,21,121,25],[139,24,121,28,"BB"],[139,26,121,30],[139,27,121,31],[140,8,122,12,"z_2"],[140,11,122,15],[140,14,122,18,"modP"],[140,18,122,22],[140,19,122,23,"E"],[140,20,122,24],[140,24,122,28,"AA"],[140,26,122,30],[140,29,122,33,"modP"],[140,33,122,37],[140,34,122,38,"a24"],[140,37,122,41],[140,40,122,44,"E"],[140,41,122,45],[140,42,122,46],[140,43,122,47],[140,44,122,48],[141,6,123,8],[142,6,124,8],[142,7,124,9],[143,8,124,11,"x_2"],[143,11,124,14],[144,8,124,16,"x_3"],[145,6,124,20],[145,7,124,21],[145,10,124,24,"cswap"],[145,15,124,29],[145,16,124,30,"swap"],[145,20,124,34],[145,22,124,36,"x_2"],[145,25,124,39],[145,27,124,41,"x_3"],[145,30,124,44],[145,31,124,45],[146,6,125,8],[146,7,125,9],[147,8,125,11,"x_2"],[147,11,125,14],[147,13,125,16,"z_2"],[147,16,125,19],[148,8,125,21,"x_3"],[148,11,125,24],[148,13,125,26,"z_3"],[149,6,125,30],[149,7,125,31],[149,10,125,34,"cswap"],[149,15,125,39],[149,16,125,40,"swap"],[149,20,125,44],[149,22,125,46,"z_2"],[149,25,125,49],[149,27,125,51,"z_3"],[149,30,125,54],[149,31,125,55],[150,6,126,8],[150,12,126,14,"z2"],[150,14,126,16],[150,17,126,19,"powPminus2"],[150,27,126,29],[150,28,126,30,"z_2"],[150,31,126,33],[150,32,126,34],[150,33,126,35],[150,34,126,36],[151,6,127,8],[151,13,127,15,"modP"],[151,17,127,19],[151,18,127,20,"x_2"],[151,21,127,23],[151,24,127,26,"z2"],[151,26,127,28],[151,27,127,29],[151,28,127,30],[151,29,127,31],[152,4,128,4],[153,4,129,4],[153,10,129,10,"lengths"],[153,17,129,17],[153,20,129,20],[154,6,130,8,"secretKey"],[154,15,130,17],[154,17,130,19,"fieldLen"],[154,25,130,27],[155,6,131,8,"publicKey"],[155,15,131,17],[155,17,131,19,"fieldLen"],[155,25,131,27],[156,6,132,8,"seed"],[156,10,132,12],[156,12,132,14,"fieldLen"],[157,4,133,4],[157,5,133,5],[158,4,134,4],[158,10,134,10,"randomSecretKey"],[158,25,134,25],[158,28,134,28,"randomSecretKey"],[158,29,134,29,"seed"],[158,33,134,33],[158,36,134,36,"randomBytes_"],[158,48,134,48],[158,49,134,49,"fieldLen"],[158,57,134,57],[158,58,134,58],[158,63,134,63],[159,6,135,8],[159,10,135,8,"abytes"],[159,23,135,14],[159,25,135,15,"seed"],[159,29,135,19],[159,31,135,21,"lengths"],[159,38,135,28],[159,39,135,29,"seed"],[159,43,135,33],[159,44,135,34],[160,6,136,8],[160,13,136,15,"seed"],[160,17,136,19],[161,4,137,4],[161,5,137,5],[162,4,138,4],[162,13,138,13,"keygen"],[162,19,138,19,"keygen"],[162,20,138,20,"seed"],[162,24,138,24],[162,26,138,26],[163,6,139,8],[163,12,139,14,"secretKey"],[163,21,139,23],[163,24,139,26,"randomSecretKey"],[163,39,139,41],[163,40,139,42,"seed"],[163,44,139,46],[163,45,139,47],[164,6,140,8],[164,13,140,15],[165,8,140,17,"secretKey"],[165,17,140,26],[166,8,140,28,"publicKey"],[166,17,140,37],[166,19,140,39,"scalarMultBase"],[166,33,140,53],[166,34,140,54,"secretKey"],[166,43,140,63],[167,6,140,65],[167,7,140,66],[168,4,141,4],[169,4,142,4],[169,10,142,10,"utils"],[169,15,142,15],[169,18,142,18],[170,6,143,8,"randomSecretKey"],[170,21,143,23],[171,6,144,8,"randomPrivateKey"],[171,22,144,24],[171,24,144,26,"randomSecretKey"],[172,4,145,4],[172,5,145,5],[173,4,146,4],[173,11,146,11],[174,6,147,8,"keygen"],[174,12,147,14],[175,6,148,8,"getSharedSecret"],[175,21,148,23],[175,23,148,25,"getSharedSecret"],[175,24,148,26,"secretKey"],[175,33,148,35],[175,35,148,37,"publicKey"],[175,44,148,46],[175,49,148,51,"scalarMult"],[175,59,148,61],[175,60,148,62,"secretKey"],[175,69,148,71],[175,71,148,73,"publicKey"],[175,80,148,82],[175,81,148,83],[176,6,149,8,"getPublicKey"],[176,18,149,20],[176,20,149,23,"secretKey"],[176,29,149,32],[176,33,149,37,"scalarMultBase"],[176,47,149,51],[176,48,149,52,"secretKey"],[176,57,149,61],[176,58,149,62],[177,6,150,8,"scalarMult"],[177,16,150,18],[178,6,151,8,"scalarMultBase"],[178,20,151,22],[179,6,152,8,"utils"],[179,11,152,13],[180,6,153,8,"GuBytes"],[180,13,153,15],[180,15,153,17,"GuBytes"],[180,22,153,24],[180,23,153,25,"slice"],[180,28,153,30],[180,29,153,31],[180,30,153,32],[181,6,154,8,"lengths"],[182,4,155,4],[182,5,155,5],[183,2,156,0],[184,0,156,1],[184,3]],"functionMap":{"names":["<global>","validateOpts","montgomery","modP","encodeU","decodeU","decodeScalar","scalarMult","scalarMultBase","cswap","montgomeryLadder","randomSecretKey","keygen","getSharedSecret","getPublicKey"],"mappings":"AAA;ACY;CDM;OEC;iBCuB,gBD;IEE;KFE;IGC;KHW;IIC;KJE;IKC;KLQ;IME;KNE;IOE;KPQ;IQO;KRoC;4BSM;KTG;IUC;KVG;yBWO,0DX;sBYC,wCZ;CFO"}},"type":"js/module"}]}