{"dependencies":[{"name":"./utils.js","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":19,"index":199},"end":{"line":8,"column":40,"index":220}}],"key":"v6h+l9IeOWbEcXdtKQqd2f4now4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.hmac = exports.HMAC = void 0;\n  /**\n   * HMAC: RFC2104 message authentication code.\n   * @module\n   */\n  const utils_ts_1 = require(_dependencyMap[0], \"./utils.js\");\n  class HMAC extends utils_ts_1.Hash {\n    constructor(hash, _key) {\n      super();\n      this.finished = false;\n      this.destroyed = false;\n      (0, utils_ts_1.ahash)(hash);\n      const key = (0, utils_ts_1.toBytes)(_key);\n      this.iHash = hash.create();\n      if (typeof this.iHash.update !== 'function') throw new Error('Expected instance of class which extends utils.Hash');\n      this.blockLen = this.iHash.blockLen;\n      this.outputLen = this.iHash.outputLen;\n      const blockLen = this.blockLen;\n      const pad = new Uint8Array(blockLen);\n      // blockLen can be bigger than outputLen\n      pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n      for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n      this.iHash.update(pad);\n      // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n      this.oHash = hash.create();\n      // Undo internal XOR && apply outer XOR\n      for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n      this.oHash.update(pad);\n      (0, utils_ts_1.clean)(pad);\n    }\n    update(buf) {\n      (0, utils_ts_1.aexists)(this);\n      this.iHash.update(buf);\n      return this;\n    }\n    digestInto(out) {\n      (0, utils_ts_1.aexists)(this);\n      (0, utils_ts_1.abytes)(out, this.outputLen);\n      this.finished = true;\n      this.iHash.digestInto(out);\n      this.oHash.update(out);\n      this.oHash.digestInto(out);\n      this.destroy();\n    }\n    digest() {\n      const out = new Uint8Array(this.oHash.outputLen);\n      this.digestInto(out);\n      return out;\n    }\n    _cloneInto(to) {\n      // Create new instance without calling constructor since key already in state and we don't know it.\n      to || (to = Object.create(Object.getPrototypeOf(this), {}));\n      const {\n        oHash,\n        iHash,\n        finished,\n        destroyed,\n        blockLen,\n        outputLen\n      } = this;\n      to = to;\n      to.finished = finished;\n      to.destroyed = destroyed;\n      to.blockLen = blockLen;\n      to.outputLen = outputLen;\n      to.oHash = oHash._cloneInto(to.oHash);\n      to.iHash = iHash._cloneInto(to.iHash);\n      return to;\n    }\n    clone() {\n      return this._cloneInto();\n    }\n    destroy() {\n      this.destroyed = true;\n      this.oHash.destroy();\n      this.iHash.destroy();\n    }\n  }\n  exports.HMAC = HMAC;\n  /**\n   * HMAC: RFC2104 message authentication code.\n   * @param hash - function that would be used e.g. sha256\n   * @param key - message key\n   * @param message - message data\n   * @example\n   * import { hmac } from '@noble/hashes/hmac';\n   * import { sha256 } from '@noble/hashes/sha2';\n   * const mac1 = hmac(sha256, 'key', 'message');\n   */\n  const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\n  exports.hmac = hmac;\n  exports.hmac.create = (hash, key) => new HMAC(hash, key);\n});","lineCount":99,"map":[[2,2,1,0],[2,14,1,12],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,21],[4,24,2,22,"exports"],[4,31,2,29],[4,33,2,31],[4,45,2,43],[4,47,2,45],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,2,2,59],[6,3,2,60],[6,4,2,61],[7,2,3,0,"exports"],[7,9,3,7],[7,10,3,8,"hmac"],[7,14,3,12],[7,17,3,15,"exports"],[7,24,3,22],[7,25,3,23,"HMAC"],[7,29,3,27],[7,32,3,30],[7,37,3,35],[7,38,3,36],[8,2,4,0],[9,0,5,0],[10,0,6,0],[11,0,7,0],[12,2,8,0],[12,8,8,6,"utils_ts_1"],[12,18,8,16],[12,21,8,19,"require"],[12,28,8,26],[12,29,8,26,"_dependencyMap"],[12,43,8,26],[12,60,8,39],[12,61,8,40],[13,2,9,0],[13,8,9,6,"HMAC"],[13,12,9,10],[13,21,9,19,"utils_ts_1"],[13,31,9,29],[13,32,9,30,"Hash"],[13,36,9,34],[13,37,9,35],[14,4,10,4,"constructor"],[14,15,10,15,"constructor"],[14,16,10,16,"hash"],[14,20,10,20],[14,22,10,22,"_key"],[14,26,10,26],[14,28,10,28],[15,6,11,8],[15,11,11,13],[15,12,11,14],[15,13,11,15],[16,6,12,8],[16,10,12,12],[16,11,12,13,"finished"],[16,19,12,21],[16,22,12,24],[16,27,12,29],[17,6,13,8],[17,10,13,12],[17,11,13,13,"destroyed"],[17,20,13,22],[17,23,13,25],[17,28,13,30],[18,6,14,8],[18,7,14,9],[18,8,14,10],[18,10,14,12,"utils_ts_1"],[18,20,14,22],[18,21,14,23,"ahash"],[18,26,14,28],[18,28,14,30,"hash"],[18,32,14,34],[18,33,14,35],[19,6,15,8],[19,12,15,14,"key"],[19,15,15,17],[19,18,15,20],[19,19,15,21],[19,20,15,22],[19,22,15,24,"utils_ts_1"],[19,32,15,34],[19,33,15,35,"toBytes"],[19,40,15,42],[19,42,15,44,"_key"],[19,46,15,48],[19,47,15,49],[20,6,16,8],[20,10,16,12],[20,11,16,13,"iHash"],[20,16,16,18],[20,19,16,21,"hash"],[20,23,16,25],[20,24,16,26,"create"],[20,30,16,32],[20,31,16,33],[20,32,16,34],[21,6,17,8],[21,10,17,12],[21,17,17,19],[21,21,17,23],[21,22,17,24,"iHash"],[21,27,17,29],[21,28,17,30,"update"],[21,34,17,36],[21,39,17,41],[21,49,17,51],[21,51,18,12],[21,57,18,18],[21,61,18,22,"Error"],[21,66,18,27],[21,67,18,28],[21,120,18,81],[21,121,18,82],[22,6,19,8],[22,10,19,12],[22,11,19,13,"blockLen"],[22,19,19,21],[22,22,19,24],[22,26,19,28],[22,27,19,29,"iHash"],[22,32,19,34],[22,33,19,35,"blockLen"],[22,41,19,43],[23,6,20,8],[23,10,20,12],[23,11,20,13,"outputLen"],[23,20,20,22],[23,23,20,25],[23,27,20,29],[23,28,20,30,"iHash"],[23,33,20,35],[23,34,20,36,"outputLen"],[23,43,20,45],[24,6,21,8],[24,12,21,14,"blockLen"],[24,20,21,22],[24,23,21,25],[24,27,21,29],[24,28,21,30,"blockLen"],[24,36,21,38],[25,6,22,8],[25,12,22,14,"pad"],[25,15,22,17],[25,18,22,20],[25,22,22,24,"Uint8Array"],[25,32,22,34],[25,33,22,35,"blockLen"],[25,41,22,43],[25,42,22,44],[26,6,23,8],[27,6,24,8,"pad"],[27,9,24,11],[27,10,24,12,"set"],[27,13,24,15],[27,14,24,16,"key"],[27,17,24,19],[27,18,24,20,"length"],[27,24,24,26],[27,27,24,29,"blockLen"],[27,35,24,37],[27,38,24,40,"hash"],[27,42,24,44],[27,43,24,45,"create"],[27,49,24,51],[27,50,24,52],[27,51,24,53],[27,52,24,54,"update"],[27,58,24,60],[27,59,24,61,"key"],[27,62,24,64],[27,63,24,65],[27,64,24,66,"digest"],[27,70,24,72],[27,71,24,73],[27,72,24,74],[27,75,24,77,"key"],[27,78,24,80],[27,79,24,81],[28,6,25,8],[28,11,25,13],[28,15,25,17,"i"],[28,16,25,18],[28,19,25,21],[28,20,25,22],[28,22,25,24,"i"],[28,23,25,25],[28,26,25,28,"pad"],[28,29,25,31],[28,30,25,32,"length"],[28,36,25,38],[28,38,25,40,"i"],[28,39,25,41],[28,41,25,43],[28,43,26,12,"pad"],[28,46,26,15],[28,47,26,16,"i"],[28,48,26,17],[28,49,26,18],[28,53,26,22],[28,57,26,26],[29,6,27,8],[29,10,27,12],[29,11,27,13,"iHash"],[29,16,27,18],[29,17,27,19,"update"],[29,23,27,25],[29,24,27,26,"pad"],[29,27,27,29],[29,28,27,30],[30,6,28,8],[31,6,29,8],[31,10,29,12],[31,11,29,13,"oHash"],[31,16,29,18],[31,19,29,21,"hash"],[31,23,29,25],[31,24,29,26,"create"],[31,30,29,32],[31,31,29,33],[31,32,29,34],[32,6,30,8],[33,6,31,8],[33,11,31,13],[33,15,31,17,"i"],[33,16,31,18],[33,19,31,21],[33,20,31,22],[33,22,31,24,"i"],[33,23,31,25],[33,26,31,28,"pad"],[33,29,31,31],[33,30,31,32,"length"],[33,36,31,38],[33,38,31,40,"i"],[33,39,31,41],[33,41,31,43],[33,43,32,12,"pad"],[33,46,32,15],[33,47,32,16,"i"],[33,48,32,17],[33,49,32,18],[33,53,32,22],[33,57,32,26],[33,60,32,29],[33,64,32,33],[34,6,33,8],[34,10,33,12],[34,11,33,13,"oHash"],[34,16,33,18],[34,17,33,19,"update"],[34,23,33,25],[34,24,33,26,"pad"],[34,27,33,29],[34,28,33,30],[35,6,34,8],[35,7,34,9],[35,8,34,10],[35,10,34,12,"utils_ts_1"],[35,20,34,22],[35,21,34,23,"clean"],[35,26,34,28],[35,28,34,30,"pad"],[35,31,34,33],[35,32,34,34],[36,4,35,4],[37,4,36,4,"update"],[37,10,36,10,"update"],[37,11,36,11,"buf"],[37,14,36,14],[37,16,36,16],[38,6,37,8],[38,7,37,9],[38,8,37,10],[38,10,37,12,"utils_ts_1"],[38,20,37,22],[38,21,37,23,"aexists"],[38,28,37,30],[38,30,37,32],[38,34,37,36],[38,35,37,37],[39,6,38,8],[39,10,38,12],[39,11,38,13,"iHash"],[39,16,38,18],[39,17,38,19,"update"],[39,23,38,25],[39,24,38,26,"buf"],[39,27,38,29],[39,28,38,30],[40,6,39,8],[40,13,39,15],[40,17,39,19],[41,4,40,4],[42,4,41,4,"digestInto"],[42,14,41,14,"digestInto"],[42,15,41,15,"out"],[42,18,41,18],[42,20,41,20],[43,6,42,8],[43,7,42,9],[43,8,42,10],[43,10,42,12,"utils_ts_1"],[43,20,42,22],[43,21,42,23,"aexists"],[43,28,42,30],[43,30,42,32],[43,34,42,36],[43,35,42,37],[44,6,43,8],[44,7,43,9],[44,8,43,10],[44,10,43,12,"utils_ts_1"],[44,20,43,22],[44,21,43,23,"abytes"],[44,27,43,29],[44,29,43,31,"out"],[44,32,43,34],[44,34,43,36],[44,38,43,40],[44,39,43,41,"outputLen"],[44,48,43,50],[44,49,43,51],[45,6,44,8],[45,10,44,12],[45,11,44,13,"finished"],[45,19,44,21],[45,22,44,24],[45,26,44,28],[46,6,45,8],[46,10,45,12],[46,11,45,13,"iHash"],[46,16,45,18],[46,17,45,19,"digestInto"],[46,27,45,29],[46,28,45,30,"out"],[46,31,45,33],[46,32,45,34],[47,6,46,8],[47,10,46,12],[47,11,46,13,"oHash"],[47,16,46,18],[47,17,46,19,"update"],[47,23,46,25],[47,24,46,26,"out"],[47,27,46,29],[47,28,46,30],[48,6,47,8],[48,10,47,12],[48,11,47,13,"oHash"],[48,16,47,18],[48,17,47,19,"digestInto"],[48,27,47,29],[48,28,47,30,"out"],[48,31,47,33],[48,32,47,34],[49,6,48,8],[49,10,48,12],[49,11,48,13,"destroy"],[49,18,48,20],[49,19,48,21],[49,20,48,22],[50,4,49,4],[51,4,50,4,"digest"],[51,10,50,10,"digest"],[51,11,50,10],[51,13,50,13],[52,6,51,8],[52,12,51,14,"out"],[52,15,51,17],[52,18,51,20],[52,22,51,24,"Uint8Array"],[52,32,51,34],[52,33,51,35],[52,37,51,39],[52,38,51,40,"oHash"],[52,43,51,45],[52,44,51,46,"outputLen"],[52,53,51,55],[52,54,51,56],[53,6,52,8],[53,10,52,12],[53,11,52,13,"digestInto"],[53,21,52,23],[53,22,52,24,"out"],[53,25,52,27],[53,26,52,28],[54,6,53,8],[54,13,53,15,"out"],[54,16,53,18],[55,4,54,4],[56,4,55,4,"_cloneInto"],[56,14,55,14,"_cloneInto"],[56,15,55,15,"to"],[56,17,55,17],[56,19,55,19],[57,6,56,8],[58,6,57,8,"to"],[58,8,57,10],[58,13,57,15,"to"],[58,15,57,17],[58,18,57,20,"Object"],[58,24,57,26],[58,25,57,27,"create"],[58,31,57,33],[58,32,57,34,"Object"],[58,38,57,40],[58,39,57,41,"getPrototypeOf"],[58,53,57,55],[58,54,57,56],[58,58,57,60],[58,59,57,61],[58,61,57,63],[58,62,57,64],[58,63,57,65],[58,64,57,66],[58,65,57,67],[59,6,58,8],[59,12,58,14],[60,8,58,16,"oHash"],[60,13,58,21],[61,8,58,23,"iHash"],[61,13,58,28],[62,8,58,30,"finished"],[62,16,58,38],[63,8,58,40,"destroyed"],[63,17,58,49],[64,8,58,51,"blockLen"],[64,16,58,59],[65,8,58,61,"outputLen"],[66,6,58,71],[66,7,58,72],[66,10,58,75],[66,14,58,79],[67,6,59,8,"to"],[67,8,59,10],[67,11,59,13,"to"],[67,13,59,15],[68,6,60,8,"to"],[68,8,60,10],[68,9,60,11,"finished"],[68,17,60,19],[68,20,60,22,"finished"],[68,28,60,30],[69,6,61,8,"to"],[69,8,61,10],[69,9,61,11,"destroyed"],[69,18,61,20],[69,21,61,23,"destroyed"],[69,30,61,32],[70,6,62,8,"to"],[70,8,62,10],[70,9,62,11,"blockLen"],[70,17,62,19],[70,20,62,22,"blockLen"],[70,28,62,30],[71,6,63,8,"to"],[71,8,63,10],[71,9,63,11,"outputLen"],[71,18,63,20],[71,21,63,23,"outputLen"],[71,30,63,32],[72,6,64,8,"to"],[72,8,64,10],[72,9,64,11,"oHash"],[72,14,64,16],[72,17,64,19,"oHash"],[72,22,64,24],[72,23,64,25,"_cloneInto"],[72,33,64,35],[72,34,64,36,"to"],[72,36,64,38],[72,37,64,39,"oHash"],[72,42,64,44],[72,43,64,45],[73,6,65,8,"to"],[73,8,65,10],[73,9,65,11,"iHash"],[73,14,65,16],[73,17,65,19,"iHash"],[73,22,65,24],[73,23,65,25,"_cloneInto"],[73,33,65,35],[73,34,65,36,"to"],[73,36,65,38],[73,37,65,39,"iHash"],[73,42,65,44],[73,43,65,45],[74,6,66,8],[74,13,66,15,"to"],[74,15,66,17],[75,4,67,4],[76,4,68,4,"clone"],[76,9,68,9,"clone"],[76,10,68,9],[76,12,68,12],[77,6,69,8],[77,13,69,15],[77,17,69,19],[77,18,69,20,"_cloneInto"],[77,28,69,30],[77,29,69,31],[77,30,69,32],[78,4,70,4],[79,4,71,4,"destroy"],[79,11,71,11,"destroy"],[79,12,71,11],[79,14,71,14],[80,6,72,8],[80,10,72,12],[80,11,72,13,"destroyed"],[80,20,72,22],[80,23,72,25],[80,27,72,29],[81,6,73,8],[81,10,73,12],[81,11,73,13,"oHash"],[81,16,73,18],[81,17,73,19,"destroy"],[81,24,73,26],[81,25,73,27],[81,26,73,28],[82,6,74,8],[82,10,74,12],[82,11,74,13,"iHash"],[82,16,74,18],[82,17,74,19,"destroy"],[82,24,74,26],[82,25,74,27],[82,26,74,28],[83,4,75,4],[84,2,76,0],[85,2,77,0,"exports"],[85,9,77,7],[85,10,77,8,"HMAC"],[85,14,77,12],[85,17,77,15,"HMAC"],[85,21,77,19],[86,2,78,0],[87,0,79,0],[88,0,80,0],[89,0,81,0],[90,0,82,0],[91,0,83,0],[92,0,84,0],[93,0,85,0],[94,0,86,0],[95,0,87,0],[96,2,88,0],[96,8,88,6,"hmac"],[96,12,88,10],[96,15,88,13,"hmac"],[96,16,88,14,"hash"],[96,20,88,18],[96,22,88,20,"key"],[96,25,88,23],[96,27,88,25,"message"],[96,34,88,32],[96,39,88,37],[96,43,88,41,"HMAC"],[96,47,88,45],[96,48,88,46,"hash"],[96,52,88,50],[96,54,88,52,"key"],[96,57,88,55],[96,58,88,56],[96,59,88,57,"update"],[96,65,88,63],[96,66,88,64,"message"],[96,73,88,71],[96,74,88,72],[96,75,88,73,"digest"],[96,81,88,79],[96,82,88,80],[96,83,88,81],[97,2,89,0,"exports"],[97,9,89,7],[97,10,89,8,"hmac"],[97,14,89,12],[97,17,89,15,"hmac"],[97,21,89,19],[98,2,90,0,"exports"],[98,9,90,7],[98,10,90,8,"hmac"],[98,14,90,12],[98,15,90,13,"create"],[98,21,90,19],[98,24,90,22],[98,25,90,23,"hash"],[98,29,90,27],[98,31,90,29,"key"],[98,34,90,32],[98,39,90,37],[98,43,90,41,"HMAC"],[98,47,90,45],[98,48,90,46,"hash"],[98,52,90,50],[98,54,90,52,"key"],[98,57,90,55],[98,58,90,56],[99,0,90,57],[99,3]],"functionMap":{"names":["<global>","HMAC","HMAC#constructor","HMAC#update","HMAC#digestInto","HMAC#digest","HMAC#_cloneInto","HMAC#clone","HMAC#destroy","hmac","exports.hmac.create"],"mappings":"AAA;ACQ;ICC;KDyB;IEC;KFI;IGC;KHQ;IIC;KJI;IKC;KLY;IMC;KNE;IOC;KPI;CDC;aSY,oET;sBUE,kCV"}},"type":"js/module"}]}