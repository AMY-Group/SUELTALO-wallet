{"dependencies":[{"name":"events","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":5,"column":21,"index":146},"end":{"line":5,"column":38,"index":163}}],"key":"JsYPPZbiyTKGtgYi4nFi37XasmQ=","exportNames":["*"]}},{"name":"https","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":6,"column":14,"index":179},"end":{"line":6,"column":30,"index":195}}],"key":"AhYA/wzuyLyFn+08Irz9o1KG9Do=","exportNames":["*"]}},{"name":"http","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":7,"column":13,"index":210},"end":{"line":7,"column":28,"index":225}}],"key":"yxqbxLTX0paWNp+looPTDqSlUdI=","exportNames":["*"]}},{"name":"net","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":8,"column":12,"index":239},"end":{"line":8,"column":26,"index":253}}],"key":"VaJ41XPkzAfy8SiomkwZkgq4Twc=","exportNames":["*"]}},{"name":"tls","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":9,"column":12,"index":267},"end":{"line":9,"column":26,"index":281}}],"key":"eX6GUrFMErTifXO1FtYN6E9FYTs=","exportNames":["*"]}},{"name":"crypto","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":10,"column":36,"index":319},"end":{"line":10,"column":53,"index":336}}],"key":"qkQHogusroKbdlr5of4h1Mv5pUg=","exportNames":["*"]}},{"name":"stream","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":11,"column":29,"index":367},"end":{"line":11,"column":46,"index":384}}],"key":"ywjhWBPQUrHXIfwGsbgNg7Szt/A=","exportNames":["*"]}},{"name":"url","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":12,"column":16,"index":402},"end":{"line":12,"column":30,"index":416}}],"key":"Ug/DVHoj+F8BpIFoKWnZvPrb/TI=","exportNames":["*"]}},{"name":"./permessage-deflate","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":14,"column":26,"index":445},"end":{"line":14,"column":57,"index":476}}],"key":"Q2Pva8QskhgfG9XaS7nBCDBdIDE=","exportNames":["*"]}},{"name":"./receiver","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":15,"column":17,"index":495},"end":{"line":15,"column":38,"index":516}}],"key":"EhKccarkCOSoSBgf6BMBvJ5XfXA=","exportNames":["*"]}},{"name":"./sender","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":16,"column":15,"index":533},"end":{"line":16,"column":34,"index":552}}],"key":"cEQiTTsOYxab13IErIUPlkwSnpE=","exportNames":["*"]}},{"name":"./validation","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":17,"column":19,"index":573},"end":{"line":17,"column":42,"index":596}}],"key":"DtGlBq654swJEbIf2z6Mk/R87pk=","exportNames":["*"]}},{"name":"./constants","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":28,"column":4,"index":724},"end":{"line":28,"column":26,"index":746}}],"key":"3z43bJyk/UB4EKjDCOXTFak09do=","exportNames":["*"]}},{"name":"./event-target","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":31,"column":4,"index":817},"end":{"line":31,"column":29,"index":842}}],"key":"Il9xWLjo81HM8YSjAQJbKwYfTRM=","exportNames":["*"]}},{"name":"./extension","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":32,"column":26,"index":870},"end":{"line":32,"column":48,"index":892}}],"key":"j9VWPq7/dbuGxKTZLdSJJsd9Szs=","exportNames":["*"]}},{"name":"./buffer-util","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":33,"column":21,"index":915},"end":{"line":33,"column":45,"index":939}}],"key":"FKD7Yg4fnu7BzoYB+P98shiBLdA=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  /* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"^Duplex|Readable$\", \"caughtErrors\": \"none\" }] */\n\n  'use strict';\n\n  const EventEmitter = require(_dependencyMap[0], \"events\");\n  const https = require(_dependencyMap[1], \"https\");\n  const http = require(_dependencyMap[2], \"http\");\n  const net = require(_dependencyMap[3], \"net\");\n  const tls = require(_dependencyMap[4], \"tls\");\n  const {\n    randomBytes,\n    createHash\n  } = require(_dependencyMap[5], \"crypto\");\n  const {\n    Duplex,\n    Readable\n  } = require(_dependencyMap[6], \"stream\");\n  const {\n    URL\n  } = require(_dependencyMap[7], \"url\");\n  const PerMessageDeflate = require(_dependencyMap[8], \"./permessage-deflate\");\n  const Receiver = require(_dependencyMap[9], \"./receiver\");\n  const Sender = require(_dependencyMap[10], \"./sender\");\n  const {\n    isBlob\n  } = require(_dependencyMap[11], \"./validation\");\n  const {\n    BINARY_TYPES,\n    EMPTY_BUFFER,\n    GUID,\n    kForOnEventAttribute,\n    kListener,\n    kStatusCode,\n    kWebSocket,\n    NOOP\n  } = require(_dependencyMap[12], \"./constants\");\n  const {\n    EventTarget: {\n      addEventListener,\n      removeEventListener\n    }\n  } = require(_dependencyMap[13], \"./event-target\");\n  const {\n    format,\n    parse\n  } = require(_dependencyMap[14], \"./extension\");\n  const {\n    toBuffer\n  } = require(_dependencyMap[15], \"./buffer-util\");\n  const closeTimeout = 30 * 1000;\n  const kAborted = Symbol('kAborted');\n  const protocolVersions = [8, 13];\n  const readyStates = ['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'];\n  const subprotocolRegex = /^[!#$%&'*+\\-.0-9A-Z^_`|a-z~]+$/;\n\n  /**\n   * Class representing a WebSocket.\n   *\n   * @extends EventEmitter\n   */\n  class WebSocket extends EventEmitter {\n    /**\n     * Create a new `WebSocket`.\n     *\n     * @param {(String|URL)} address The URL to which to connect\n     * @param {(String|String[])} [protocols] The subprotocols\n     * @param {Object} [options] Connection options\n     */\n    constructor(address, protocols, options) {\n      super();\n      this._binaryType = BINARY_TYPES[0];\n      this._closeCode = 1006;\n      this._closeFrameReceived = false;\n      this._closeFrameSent = false;\n      this._closeMessage = EMPTY_BUFFER;\n      this._closeTimer = null;\n      this._errorEmitted = false;\n      this._extensions = {};\n      this._paused = false;\n      this._protocol = '';\n      this._readyState = WebSocket.CONNECTING;\n      this._receiver = null;\n      this._sender = null;\n      this._socket = null;\n      if (address !== null) {\n        this._bufferedAmount = 0;\n        this._isServer = false;\n        this._redirects = 0;\n        if (protocols === undefined) {\n          protocols = [];\n        } else if (!Array.isArray(protocols)) {\n          if (typeof protocols === 'object' && protocols !== null) {\n            options = protocols;\n            protocols = [];\n          } else {\n            protocols = [protocols];\n          }\n        }\n        initAsClient(this, address, protocols, options);\n      } else {\n        this._autoPong = options.autoPong;\n        this._isServer = true;\n      }\n    }\n\n    /**\n     * For historical reasons, the custom \"nodebuffer\" type is used by the default\n     * instead of \"blob\".\n     *\n     * @type {String}\n     */\n    get binaryType() {\n      return this._binaryType;\n    }\n    set binaryType(type) {\n      if (!BINARY_TYPES.includes(type)) return;\n      this._binaryType = type;\n\n      //\n      // Allow to change `binaryType` on the fly.\n      //\n      if (this._receiver) this._receiver._binaryType = type;\n    }\n\n    /**\n     * @type {Number}\n     */\n    get bufferedAmount() {\n      if (!this._socket) return this._bufferedAmount;\n      return this._socket._writableState.length + this._sender._bufferedBytes;\n    }\n\n    /**\n     * @type {String}\n     */\n    get extensions() {\n      return Object.keys(this._extensions).join();\n    }\n\n    /**\n     * @type {Boolean}\n     */\n    get isPaused() {\n      return this._paused;\n    }\n\n    /**\n     * @type {Function}\n     */\n    /* istanbul ignore next */\n    get onclose() {\n      return null;\n    }\n\n    /**\n     * @type {Function}\n     */\n    /* istanbul ignore next */\n    get onerror() {\n      return null;\n    }\n\n    /**\n     * @type {Function}\n     */\n    /* istanbul ignore next */\n    get onopen() {\n      return null;\n    }\n\n    /**\n     * @type {Function}\n     */\n    /* istanbul ignore next */\n    get onmessage() {\n      return null;\n    }\n\n    /**\n     * @type {String}\n     */\n    get protocol() {\n      return this._protocol;\n    }\n\n    /**\n     * @type {Number}\n     */\n    get readyState() {\n      return this._readyState;\n    }\n\n    /**\n     * @type {String}\n     */\n    get url() {\n      return this._url;\n    }\n\n    /**\n     * Set up the socket and the internal resources.\n     *\n     * @param {Duplex} socket The network socket between the server and client\n     * @param {Buffer} head The first packet of the upgraded stream\n     * @param {Object} options Options object\n     * @param {Boolean} [options.allowSynchronousEvents=false] Specifies whether\n     *     any of the `'message'`, `'ping'`, and `'pong'` events can be emitted\n     *     multiple times in the same tick\n     * @param {Function} [options.generateMask] The function used to generate the\n     *     masking key\n     * @param {Number} [options.maxPayload=0] The maximum allowed message size\n     * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n     *     not to skip UTF-8 validation for text and close messages\n     * @private\n     */\n    setSocket(socket, head, options) {\n      const receiver = new Receiver({\n        allowSynchronousEvents: options.allowSynchronousEvents,\n        binaryType: this.binaryType,\n        extensions: this._extensions,\n        isServer: this._isServer,\n        maxPayload: options.maxPayload,\n        skipUTF8Validation: options.skipUTF8Validation\n      });\n      const sender = new Sender(socket, this._extensions, options.generateMask);\n      this._receiver = receiver;\n      this._sender = sender;\n      this._socket = socket;\n      receiver[kWebSocket] = this;\n      sender[kWebSocket] = this;\n      socket[kWebSocket] = this;\n      receiver.on('conclude', receiverOnConclude);\n      receiver.on('drain', receiverOnDrain);\n      receiver.on('error', receiverOnError);\n      receiver.on('message', receiverOnMessage);\n      receiver.on('ping', receiverOnPing);\n      receiver.on('pong', receiverOnPong);\n      sender.onerror = senderOnError;\n\n      //\n      // These methods may not be available if `socket` is just a `Duplex`.\n      //\n      if (socket.setTimeout) socket.setTimeout(0);\n      if (socket.setNoDelay) socket.setNoDelay();\n      if (head.length > 0) socket.unshift(head);\n      socket.on('close', socketOnClose);\n      socket.on('data', socketOnData);\n      socket.on('end', socketOnEnd);\n      socket.on('error', socketOnError);\n      this._readyState = WebSocket.OPEN;\n      this.emit('open');\n    }\n\n    /**\n     * Emit the `'close'` event.\n     *\n     * @private\n     */\n    emitClose() {\n      if (!this._socket) {\n        this._readyState = WebSocket.CLOSED;\n        this.emit('close', this._closeCode, this._closeMessage);\n        return;\n      }\n      if (this._extensions[PerMessageDeflate.extensionName]) {\n        this._extensions[PerMessageDeflate.extensionName].cleanup();\n      }\n      this._receiver.removeAllListeners();\n      this._readyState = WebSocket.CLOSED;\n      this.emit('close', this._closeCode, this._closeMessage);\n    }\n\n    /**\n     * Start a closing handshake.\n     *\n     *          +----------+   +-----------+   +----------+\n     *     - - -|ws.close()|-->|close frame|-->|ws.close()|- - -\n     *    |     +----------+   +-----------+   +----------+     |\n     *          +----------+   +-----------+         |\n     * CLOSING  |ws.close()|<--|close frame|<--+-----+       CLOSING\n     *          +----------+   +-----------+   |\n     *    |           |                        |   +---+        |\n     *                +------------------------+-->|fin| - - - -\n     *    |         +---+                      |   +---+\n     *     - - - - -|fin|<---------------------+\n     *              +---+\n     *\n     * @param {Number} [code] Status code explaining why the connection is closing\n     * @param {(String|Buffer)} [data] The reason why the connection is\n     *     closing\n     * @public\n     */\n    close(code, data) {\n      if (this.readyState === WebSocket.CLOSED) return;\n      if (this.readyState === WebSocket.CONNECTING) {\n        const msg = 'WebSocket was closed before the connection was established';\n        abortHandshake(this, this._req, msg);\n        return;\n      }\n      if (this.readyState === WebSocket.CLOSING) {\n        if (this._closeFrameSent && (this._closeFrameReceived || this._receiver._writableState.errorEmitted)) {\n          this._socket.end();\n        }\n        return;\n      }\n      this._readyState = WebSocket.CLOSING;\n      this._sender.close(code, data, !this._isServer, err => {\n        //\n        // This error is handled by the `'error'` listener on the socket. We only\n        // want to know if the close frame has been sent here.\n        //\n        if (err) return;\n        this._closeFrameSent = true;\n        if (this._closeFrameReceived || this._receiver._writableState.errorEmitted) {\n          this._socket.end();\n        }\n      });\n      setCloseTimer(this);\n    }\n\n    /**\n     * Pause the socket.\n     *\n     * @public\n     */\n    pause() {\n      if (this.readyState === WebSocket.CONNECTING || this.readyState === WebSocket.CLOSED) {\n        return;\n      }\n      this._paused = true;\n      this._socket.pause();\n    }\n\n    /**\n     * Send a ping.\n     *\n     * @param {*} [data] The data to send\n     * @param {Boolean} [mask] Indicates whether or not to mask `data`\n     * @param {Function} [cb] Callback which is executed when the ping is sent\n     * @public\n     */\n    ping(data, mask, cb) {\n      if (this.readyState === WebSocket.CONNECTING) {\n        throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n      }\n      if (typeof data === 'function') {\n        cb = data;\n        data = mask = undefined;\n      } else if (typeof mask === 'function') {\n        cb = mask;\n        mask = undefined;\n      }\n      if (typeof data === 'number') data = data.toString();\n      if (this.readyState !== WebSocket.OPEN) {\n        sendAfterClose(this, data, cb);\n        return;\n      }\n      if (mask === undefined) mask = !this._isServer;\n      this._sender.ping(data || EMPTY_BUFFER, mask, cb);\n    }\n\n    /**\n     * Send a pong.\n     *\n     * @param {*} [data] The data to send\n     * @param {Boolean} [mask] Indicates whether or not to mask `data`\n     * @param {Function} [cb] Callback which is executed when the pong is sent\n     * @public\n     */\n    pong(data, mask, cb) {\n      if (this.readyState === WebSocket.CONNECTING) {\n        throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n      }\n      if (typeof data === 'function') {\n        cb = data;\n        data = mask = undefined;\n      } else if (typeof mask === 'function') {\n        cb = mask;\n        mask = undefined;\n      }\n      if (typeof data === 'number') data = data.toString();\n      if (this.readyState !== WebSocket.OPEN) {\n        sendAfterClose(this, data, cb);\n        return;\n      }\n      if (mask === undefined) mask = !this._isServer;\n      this._sender.pong(data || EMPTY_BUFFER, mask, cb);\n    }\n\n    /**\n     * Resume the socket.\n     *\n     * @public\n     */\n    resume() {\n      if (this.readyState === WebSocket.CONNECTING || this.readyState === WebSocket.CLOSED) {\n        return;\n      }\n      this._paused = false;\n      if (!this._receiver._writableState.needDrain) this._socket.resume();\n    }\n\n    /**\n     * Send a data message.\n     *\n     * @param {*} data The message to send\n     * @param {Object} [options] Options object\n     * @param {Boolean} [options.binary] Specifies whether `data` is binary or\n     *     text\n     * @param {Boolean} [options.compress] Specifies whether or not to compress\n     *     `data`\n     * @param {Boolean} [options.fin=true] Specifies whether the fragment is the\n     *     last one\n     * @param {Boolean} [options.mask] Specifies whether or not to mask `data`\n     * @param {Function} [cb] Callback which is executed when data is written out\n     * @public\n     */\n    send(data, options, cb) {\n      if (this.readyState === WebSocket.CONNECTING) {\n        throw new Error('WebSocket is not open: readyState 0 (CONNECTING)');\n      }\n      if (typeof options === 'function') {\n        cb = options;\n        options = {};\n      }\n      if (typeof data === 'number') data = data.toString();\n      if (this.readyState !== WebSocket.OPEN) {\n        sendAfterClose(this, data, cb);\n        return;\n      }\n      const opts = {\n        binary: typeof data !== 'string',\n        mask: !this._isServer,\n        compress: true,\n        fin: true,\n        ...options\n      };\n      if (!this._extensions[PerMessageDeflate.extensionName]) {\n        opts.compress = false;\n      }\n      this._sender.send(data || EMPTY_BUFFER, opts, cb);\n    }\n\n    /**\n     * Forcibly close the connection.\n     *\n     * @public\n     */\n    terminate() {\n      if (this.readyState === WebSocket.CLOSED) return;\n      if (this.readyState === WebSocket.CONNECTING) {\n        const msg = 'WebSocket was closed before the connection was established';\n        abortHandshake(this, this._req, msg);\n        return;\n      }\n      if (this._socket) {\n        this._readyState = WebSocket.CLOSING;\n        this._socket.destroy();\n      }\n    }\n  }\n\n  /**\n   * @constant {Number} CONNECTING\n   * @memberof WebSocket\n   */\n  Object.defineProperty(WebSocket, 'CONNECTING', {\n    enumerable: true,\n    value: readyStates.indexOf('CONNECTING')\n  });\n\n  /**\n   * @constant {Number} CONNECTING\n   * @memberof WebSocket.prototype\n   */\n  Object.defineProperty(WebSocket.prototype, 'CONNECTING', {\n    enumerable: true,\n    value: readyStates.indexOf('CONNECTING')\n  });\n\n  /**\n   * @constant {Number} OPEN\n   * @memberof WebSocket\n   */\n  Object.defineProperty(WebSocket, 'OPEN', {\n    enumerable: true,\n    value: readyStates.indexOf('OPEN')\n  });\n\n  /**\n   * @constant {Number} OPEN\n   * @memberof WebSocket.prototype\n   */\n  Object.defineProperty(WebSocket.prototype, 'OPEN', {\n    enumerable: true,\n    value: readyStates.indexOf('OPEN')\n  });\n\n  /**\n   * @constant {Number} CLOSING\n   * @memberof WebSocket\n   */\n  Object.defineProperty(WebSocket, 'CLOSING', {\n    enumerable: true,\n    value: readyStates.indexOf('CLOSING')\n  });\n\n  /**\n   * @constant {Number} CLOSING\n   * @memberof WebSocket.prototype\n   */\n  Object.defineProperty(WebSocket.prototype, 'CLOSING', {\n    enumerable: true,\n    value: readyStates.indexOf('CLOSING')\n  });\n\n  /**\n   * @constant {Number} CLOSED\n   * @memberof WebSocket\n   */\n  Object.defineProperty(WebSocket, 'CLOSED', {\n    enumerable: true,\n    value: readyStates.indexOf('CLOSED')\n  });\n\n  /**\n   * @constant {Number} CLOSED\n   * @memberof WebSocket.prototype\n   */\n  Object.defineProperty(WebSocket.prototype, 'CLOSED', {\n    enumerable: true,\n    value: readyStates.indexOf('CLOSED')\n  });\n  ['binaryType', 'bufferedAmount', 'extensions', 'isPaused', 'protocol', 'readyState', 'url'].forEach(property => {\n    Object.defineProperty(WebSocket.prototype, property, {\n      enumerable: true\n    });\n  });\n\n  //\n  // Add the `onopen`, `onerror`, `onclose`, and `onmessage` attributes.\n  // See https://html.spec.whatwg.org/multipage/comms.html#the-websocket-interface\n  //\n  ['open', 'error', 'close', 'message'].forEach(method => {\n    Object.defineProperty(WebSocket.prototype, `on${method}`, {\n      enumerable: true,\n      get() {\n        for (const listener of this.listeners(method)) {\n          if (listener[kForOnEventAttribute]) return listener[kListener];\n        }\n        return null;\n      },\n      set(handler) {\n        for (const listener of this.listeners(method)) {\n          if (listener[kForOnEventAttribute]) {\n            this.removeListener(method, listener);\n            break;\n          }\n        }\n        if (typeof handler !== 'function') return;\n        this.addEventListener(method, handler, {\n          [kForOnEventAttribute]: true\n        });\n      }\n    });\n  });\n  WebSocket.prototype.addEventListener = addEventListener;\n  WebSocket.prototype.removeEventListener = removeEventListener;\n  module.exports = WebSocket;\n\n  /**\n   * Initialize a WebSocket client.\n   *\n   * @param {WebSocket} websocket The client to initialize\n   * @param {(String|URL)} address The URL to which to connect\n   * @param {Array} protocols The subprotocols\n   * @param {Object} [options] Connection options\n   * @param {Boolean} [options.allowSynchronousEvents=true] Specifies whether any\n   *     of the `'message'`, `'ping'`, and `'pong'` events can be emitted multiple\n   *     times in the same tick\n   * @param {Boolean} [options.autoPong=true] Specifies whether or not to\n   *     automatically send a pong in response to a ping\n   * @param {Function} [options.finishRequest] A function which can be used to\n   *     customize the headers of each http request before it is sent\n   * @param {Boolean} [options.followRedirects=false] Whether or not to follow\n   *     redirects\n   * @param {Function} [options.generateMask] The function used to generate the\n   *     masking key\n   * @param {Number} [options.handshakeTimeout] Timeout in milliseconds for the\n   *     handshake request\n   * @param {Number} [options.maxPayload=104857600] The maximum allowed message\n   *     size\n   * @param {Number} [options.maxRedirects=10] The maximum number of redirects\n   *     allowed\n   * @param {String} [options.origin] Value of the `Origin` or\n   *     `Sec-WebSocket-Origin` header\n   * @param {(Boolean|Object)} [options.perMessageDeflate=true] Enable/disable\n   *     permessage-deflate\n   * @param {Number} [options.protocolVersion=13] Value of the\n   *     `Sec-WebSocket-Version` header\n   * @param {Boolean} [options.skipUTF8Validation=false] Specifies whether or\n   *     not to skip UTF-8 validation for text and close messages\n   * @private\n   */\n  function initAsClient(websocket, address, protocols, options) {\n    const opts = {\n      allowSynchronousEvents: true,\n      autoPong: true,\n      protocolVersion: protocolVersions[1],\n      maxPayload: 100 * 1024 * 1024,\n      skipUTF8Validation: false,\n      perMessageDeflate: true,\n      followRedirects: false,\n      maxRedirects: 10,\n      ...options,\n      socketPath: undefined,\n      hostname: undefined,\n      protocol: undefined,\n      timeout: undefined,\n      method: 'GET',\n      host: undefined,\n      path: undefined,\n      port: undefined\n    };\n    websocket._autoPong = opts.autoPong;\n    if (!protocolVersions.includes(opts.protocolVersion)) {\n      throw new RangeError(`Unsupported protocol version: ${opts.protocolVersion} ` + `(supported versions: ${protocolVersions.join(', ')})`);\n    }\n    let parsedUrl;\n    if (address instanceof URL) {\n      parsedUrl = address;\n    } else {\n      try {\n        parsedUrl = new URL(address);\n      } catch (e) {\n        throw new SyntaxError(`Invalid URL: ${address}`);\n      }\n    }\n    if (parsedUrl.protocol === 'http:') {\n      parsedUrl.protocol = 'ws:';\n    } else if (parsedUrl.protocol === 'https:') {\n      parsedUrl.protocol = 'wss:';\n    }\n    websocket._url = parsedUrl.href;\n    const isSecure = parsedUrl.protocol === 'wss:';\n    const isIpcUrl = parsedUrl.protocol === 'ws+unix:';\n    let invalidUrlMessage;\n    if (parsedUrl.protocol !== 'ws:' && !isSecure && !isIpcUrl) {\n      invalidUrlMessage = 'The URL\\'s protocol must be one of \"ws:\", \"wss:\", ' + '\"http:\", \"https:\", or \"ws+unix:\"';\n    } else if (isIpcUrl && !parsedUrl.pathname) {\n      invalidUrlMessage = \"The URL's pathname is empty\";\n    } else if (parsedUrl.hash) {\n      invalidUrlMessage = 'The URL contains a fragment identifier';\n    }\n    if (invalidUrlMessage) {\n      const err = new SyntaxError(invalidUrlMessage);\n      if (websocket._redirects === 0) {\n        throw err;\n      } else {\n        emitErrorAndClose(websocket, err);\n        return;\n      }\n    }\n    const defaultPort = isSecure ? 443 : 80;\n    const key = randomBytes(16).toString('base64');\n    const request = isSecure ? https.request : http.request;\n    const protocolSet = new Set();\n    let perMessageDeflate;\n    opts.createConnection = opts.createConnection || (isSecure ? tlsConnect : netConnect);\n    opts.defaultPort = opts.defaultPort || defaultPort;\n    opts.port = parsedUrl.port || defaultPort;\n    opts.host = parsedUrl.hostname.startsWith('[') ? parsedUrl.hostname.slice(1, -1) : parsedUrl.hostname;\n    opts.headers = {\n      ...opts.headers,\n      'Sec-WebSocket-Version': opts.protocolVersion,\n      'Sec-WebSocket-Key': key,\n      Connection: 'Upgrade',\n      Upgrade: 'websocket'\n    };\n    opts.path = parsedUrl.pathname + parsedUrl.search;\n    opts.timeout = opts.handshakeTimeout;\n    if (opts.perMessageDeflate) {\n      perMessageDeflate = new PerMessageDeflate(opts.perMessageDeflate !== true ? opts.perMessageDeflate : {}, false, opts.maxPayload);\n      opts.headers['Sec-WebSocket-Extensions'] = format({\n        [PerMessageDeflate.extensionName]: perMessageDeflate.offer()\n      });\n    }\n    if (protocols.length) {\n      for (const protocol of protocols) {\n        if (typeof protocol !== 'string' || !subprotocolRegex.test(protocol) || protocolSet.has(protocol)) {\n          throw new SyntaxError('An invalid or duplicated subprotocol was specified');\n        }\n        protocolSet.add(protocol);\n      }\n      opts.headers['Sec-WebSocket-Protocol'] = protocols.join(',');\n    }\n    if (opts.origin) {\n      if (opts.protocolVersion < 13) {\n        opts.headers['Sec-WebSocket-Origin'] = opts.origin;\n      } else {\n        opts.headers.Origin = opts.origin;\n      }\n    }\n    if (parsedUrl.username || parsedUrl.password) {\n      opts.auth = `${parsedUrl.username}:${parsedUrl.password}`;\n    }\n    if (isIpcUrl) {\n      const parts = opts.path.split(':');\n      opts.socketPath = parts[0];\n      opts.path = parts[1];\n    }\n    let req;\n    if (opts.followRedirects) {\n      if (websocket._redirects === 0) {\n        websocket._originalIpc = isIpcUrl;\n        websocket._originalSecure = isSecure;\n        websocket._originalHostOrSocketPath = isIpcUrl ? opts.socketPath : parsedUrl.host;\n        const headers = options && options.headers;\n\n        //\n        // Shallow copy the user provided options so that headers can be changed\n        // without mutating the original object.\n        //\n        options = {\n          ...options,\n          headers: {}\n        };\n        if (headers) {\n          for (const [key, value] of Object.entries(headers)) {\n            options.headers[key.toLowerCase()] = value;\n          }\n        }\n      } else if (websocket.listenerCount('redirect') === 0) {\n        const isSameHost = isIpcUrl ? websocket._originalIpc ? opts.socketPath === websocket._originalHostOrSocketPath : false : websocket._originalIpc ? false : parsedUrl.host === websocket._originalHostOrSocketPath;\n        if (!isSameHost || websocket._originalSecure && !isSecure) {\n          //\n          // Match curl 7.77.0 behavior and drop the following headers. These\n          // headers are also dropped when following a redirect to a subdomain.\n          //\n          delete opts.headers.authorization;\n          delete opts.headers.cookie;\n          if (!isSameHost) delete opts.headers.host;\n          opts.auth = undefined;\n        }\n      }\n\n      //\n      // Match curl 7.77.0 behavior and make the first `Authorization` header win.\n      // If the `Authorization` header is set, then there is nothing to do as it\n      // will take precedence.\n      //\n      if (opts.auth && !options.headers.authorization) {\n        options.headers.authorization = 'Basic ' + Buffer.from(opts.auth).toString('base64');\n      }\n      req = websocket._req = request(opts);\n      if (websocket._redirects) {\n        //\n        // Unlike what is done for the `'upgrade'` event, no early exit is\n        // triggered here if the user calls `websocket.close()` or\n        // `websocket.terminate()` from a listener of the `'redirect'` event. This\n        // is because the user can also call `request.destroy()` with an error\n        // before calling `websocket.close()` or `websocket.terminate()` and this\n        // would result in an error being emitted on the `request` object with no\n        // `'error'` event listeners attached.\n        //\n        websocket.emit('redirect', websocket.url, req);\n      }\n    } else {\n      req = websocket._req = request(opts);\n    }\n    if (opts.timeout) {\n      req.on('timeout', () => {\n        abortHandshake(websocket, req, 'Opening handshake has timed out');\n      });\n    }\n    req.on('error', err => {\n      if (req === null || req[kAborted]) return;\n      req = websocket._req = null;\n      emitErrorAndClose(websocket, err);\n    });\n    req.on('response', res => {\n      const location = res.headers.location;\n      const statusCode = res.statusCode;\n      if (location && opts.followRedirects && statusCode >= 300 && statusCode < 400) {\n        if (++websocket._redirects > opts.maxRedirects) {\n          abortHandshake(websocket, req, 'Maximum redirects exceeded');\n          return;\n        }\n        req.abort();\n        let addr;\n        try {\n          addr = new URL(location, address);\n        } catch (e) {\n          const err = new SyntaxError(`Invalid URL: ${location}`);\n          emitErrorAndClose(websocket, err);\n          return;\n        }\n        initAsClient(websocket, addr, protocols, options);\n      } else if (!websocket.emit('unexpected-response', req, res)) {\n        abortHandshake(websocket, req, `Unexpected server response: ${res.statusCode}`);\n      }\n    });\n    req.on('upgrade', (res, socket, head) => {\n      websocket.emit('upgrade', res);\n\n      //\n      // The user may have closed the connection from a listener of the\n      // `'upgrade'` event.\n      //\n      if (websocket.readyState !== WebSocket.CONNECTING) return;\n      req = websocket._req = null;\n      const upgrade = res.headers.upgrade;\n      if (upgrade === undefined || upgrade.toLowerCase() !== 'websocket') {\n        abortHandshake(websocket, socket, 'Invalid Upgrade header');\n        return;\n      }\n      const digest = createHash('sha1').update(key + GUID).digest('base64');\n      if (res.headers['sec-websocket-accept'] !== digest) {\n        abortHandshake(websocket, socket, 'Invalid Sec-WebSocket-Accept header');\n        return;\n      }\n      const serverProt = res.headers['sec-websocket-protocol'];\n      let protError;\n      if (serverProt !== undefined) {\n        if (!protocolSet.size) {\n          protError = 'Server sent a subprotocol but none was requested';\n        } else if (!protocolSet.has(serverProt)) {\n          protError = 'Server sent an invalid subprotocol';\n        }\n      } else if (protocolSet.size) {\n        protError = 'Server sent no subprotocol';\n      }\n      if (protError) {\n        abortHandshake(websocket, socket, protError);\n        return;\n      }\n      if (serverProt) websocket._protocol = serverProt;\n      const secWebSocketExtensions = res.headers['sec-websocket-extensions'];\n      if (secWebSocketExtensions !== undefined) {\n        if (!perMessageDeflate) {\n          const message = 'Server sent a Sec-WebSocket-Extensions header but no extension ' + 'was requested';\n          abortHandshake(websocket, socket, message);\n          return;\n        }\n        let extensions;\n        try {\n          extensions = parse(secWebSocketExtensions);\n        } catch (err) {\n          const message = 'Invalid Sec-WebSocket-Extensions header';\n          abortHandshake(websocket, socket, message);\n          return;\n        }\n        const extensionNames = Object.keys(extensions);\n        if (extensionNames.length !== 1 || extensionNames[0] !== PerMessageDeflate.extensionName) {\n          const message = 'Server indicated an extension that was not requested';\n          abortHandshake(websocket, socket, message);\n          return;\n        }\n        try {\n          perMessageDeflate.accept(extensions[PerMessageDeflate.extensionName]);\n        } catch (err) {\n          const message = 'Invalid Sec-WebSocket-Extensions header';\n          abortHandshake(websocket, socket, message);\n          return;\n        }\n        websocket._extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n      }\n      websocket.setSocket(socket, head, {\n        allowSynchronousEvents: opts.allowSynchronousEvents,\n        generateMask: opts.generateMask,\n        maxPayload: opts.maxPayload,\n        skipUTF8Validation: opts.skipUTF8Validation\n      });\n    });\n    if (opts.finishRequest) {\n      opts.finishRequest(req, websocket);\n    } else {\n      req.end();\n    }\n  }\n\n  /**\n   * Emit the `'error'` and `'close'` events.\n   *\n   * @param {WebSocket} websocket The WebSocket instance\n   * @param {Error} The error to emit\n   * @private\n   */\n  function emitErrorAndClose(websocket, err) {\n    websocket._readyState = WebSocket.CLOSING;\n    //\n    // The following assignment is practically useless and is done only for\n    // consistency.\n    //\n    websocket._errorEmitted = true;\n    websocket.emit('error', err);\n    websocket.emitClose();\n  }\n\n  /**\n   * Create a `net.Socket` and initiate a connection.\n   *\n   * @param {Object} options Connection options\n   * @return {net.Socket} The newly created socket used to start the connection\n   * @private\n   */\n  function netConnect(options) {\n    options.path = options.socketPath;\n    return net.connect(options);\n  }\n\n  /**\n   * Create a `tls.TLSSocket` and initiate a connection.\n   *\n   * @param {Object} options Connection options\n   * @return {tls.TLSSocket} The newly created socket used to start the connection\n   * @private\n   */\n  function tlsConnect(options) {\n    options.path = undefined;\n    if (!options.servername && options.servername !== '') {\n      options.servername = net.isIP(options.host) ? '' : options.host;\n    }\n    return tls.connect(options);\n  }\n\n  /**\n   * Abort the handshake and emit an error.\n   *\n   * @param {WebSocket} websocket The WebSocket instance\n   * @param {(http.ClientRequest|net.Socket|tls.Socket)} stream The request to\n   *     abort or the socket to destroy\n   * @param {String} message The error message\n   * @private\n   */\n  function abortHandshake(websocket, stream, message) {\n    websocket._readyState = WebSocket.CLOSING;\n    const err = new Error(message);\n    Error.captureStackTrace(err, abortHandshake);\n    if (stream.setHeader) {\n      stream[kAborted] = true;\n      stream.abort();\n      if (stream.socket && !stream.socket.destroyed) {\n        //\n        // On Node.js >= 14.3.0 `request.abort()` does not destroy the socket if\n        // called after the request completed. See\n        // https://github.com/websockets/ws/issues/1869.\n        //\n        stream.socket.destroy();\n      }\n      process.nextTick(emitErrorAndClose, websocket, err);\n    } else {\n      stream.destroy(err);\n      stream.once('error', websocket.emit.bind(websocket, 'error'));\n      stream.once('close', websocket.emitClose.bind(websocket));\n    }\n  }\n\n  /**\n   * Handle cases where the `ping()`, `pong()`, or `send()` methods are called\n   * when the `readyState` attribute is `CLOSING` or `CLOSED`.\n   *\n   * @param {WebSocket} websocket The WebSocket instance\n   * @param {*} [data] The data to send\n   * @param {Function} [cb] Callback\n   * @private\n   */\n  function sendAfterClose(websocket, data, cb) {\n    if (data) {\n      const length = isBlob(data) ? data.size : toBuffer(data).length;\n\n      //\n      // The `_bufferedAmount` property is used only when the peer is a client and\n      // the opening handshake fails. Under these circumstances, in fact, the\n      // `setSocket()` method is not called, so the `_socket` and `_sender`\n      // properties are set to `null`.\n      //\n      if (websocket._socket) websocket._sender._bufferedBytes += length;else websocket._bufferedAmount += length;\n    }\n    if (cb) {\n      const err = new Error(`WebSocket is not open: readyState ${websocket.readyState} ` + `(${readyStates[websocket.readyState]})`);\n      process.nextTick(cb, err);\n    }\n  }\n\n  /**\n   * The listener of the `Receiver` `'conclude'` event.\n   *\n   * @param {Number} code The status code\n   * @param {Buffer} reason The reason for closing\n   * @private\n   */\n  function receiverOnConclude(code, reason) {\n    const websocket = this[kWebSocket];\n    websocket._closeFrameReceived = true;\n    websocket._closeMessage = reason;\n    websocket._closeCode = code;\n    if (websocket._socket[kWebSocket] === undefined) return;\n    websocket._socket.removeListener('data', socketOnData);\n    process.nextTick(resume, websocket._socket);\n    if (code === 1005) websocket.close();else websocket.close(code, reason);\n  }\n\n  /**\n   * The listener of the `Receiver` `'drain'` event.\n   *\n   * @private\n   */\n  function receiverOnDrain() {\n    const websocket = this[kWebSocket];\n    if (!websocket.isPaused) websocket._socket.resume();\n  }\n\n  /**\n   * The listener of the `Receiver` `'error'` event.\n   *\n   * @param {(RangeError|Error)} err The emitted error\n   * @private\n   */\n  function receiverOnError(err) {\n    const websocket = this[kWebSocket];\n    if (websocket._socket[kWebSocket] !== undefined) {\n      websocket._socket.removeListener('data', socketOnData);\n\n      //\n      // On Node.js < 14.0.0 the `'error'` event is emitted synchronously. See\n      // https://github.com/websockets/ws/issues/1940.\n      //\n      process.nextTick(resume, websocket._socket);\n      websocket.close(err[kStatusCode]);\n    }\n    if (!websocket._errorEmitted) {\n      websocket._errorEmitted = true;\n      websocket.emit('error', err);\n    }\n  }\n\n  /**\n   * The listener of the `Receiver` `'finish'` event.\n   *\n   * @private\n   */\n  function receiverOnFinish() {\n    this[kWebSocket].emitClose();\n  }\n\n  /**\n   * The listener of the `Receiver` `'message'` event.\n   *\n   * @param {Buffer|ArrayBuffer|Buffer[])} data The message\n   * @param {Boolean} isBinary Specifies whether the message is binary or not\n   * @private\n   */\n  function receiverOnMessage(data, isBinary) {\n    this[kWebSocket].emit('message', data, isBinary);\n  }\n\n  /**\n   * The listener of the `Receiver` `'ping'` event.\n   *\n   * @param {Buffer} data The data included in the ping frame\n   * @private\n   */\n  function receiverOnPing(data) {\n    const websocket = this[kWebSocket];\n    if (websocket._autoPong) websocket.pong(data, !this._isServer, NOOP);\n    websocket.emit('ping', data);\n  }\n\n  /**\n   * The listener of the `Receiver` `'pong'` event.\n   *\n   * @param {Buffer} data The data included in the pong frame\n   * @private\n   */\n  function receiverOnPong(data) {\n    this[kWebSocket].emit('pong', data);\n  }\n\n  /**\n   * Resume a readable stream\n   *\n   * @param {Readable} stream The readable stream\n   * @private\n   */\n  function resume(stream) {\n    stream.resume();\n  }\n\n  /**\n   * The `Sender` error event handler.\n   *\n   * @param {Error} The error\n   * @private\n   */\n  function senderOnError(err) {\n    const websocket = this[kWebSocket];\n    if (websocket.readyState === WebSocket.CLOSED) return;\n    if (websocket.readyState === WebSocket.OPEN) {\n      websocket._readyState = WebSocket.CLOSING;\n      setCloseTimer(websocket);\n    }\n\n    //\n    // `socket.end()` is used instead of `socket.destroy()` to allow the other\n    // peer to finish sending queued data. There is no need to set a timer here\n    // because `CLOSING` means that it is already set or not needed.\n    //\n    this._socket.end();\n    if (!websocket._errorEmitted) {\n      websocket._errorEmitted = true;\n      websocket.emit('error', err);\n    }\n  }\n\n  /**\n   * Set a timer to destroy the underlying raw socket of a WebSocket.\n   *\n   * @param {WebSocket} websocket The WebSocket instance\n   * @private\n   */\n  function setCloseTimer(websocket) {\n    websocket._closeTimer = setTimeout(websocket._socket.destroy.bind(websocket._socket), closeTimeout);\n  }\n\n  /**\n   * The listener of the socket `'close'` event.\n   *\n   * @private\n   */\n  function socketOnClose() {\n    const websocket = this[kWebSocket];\n    this.removeListener('close', socketOnClose);\n    this.removeListener('data', socketOnData);\n    this.removeListener('end', socketOnEnd);\n    websocket._readyState = WebSocket.CLOSING;\n    let chunk;\n\n    //\n    // The close frame might not have been received or the `'end'` event emitted,\n    // for example, if the socket was destroyed due to an error. Ensure that the\n    // `receiver` stream is closed after writing any remaining buffered data to\n    // it. If the readable side of the socket is in flowing mode then there is no\n    // buffered data as everything has been already written and `readable.read()`\n    // will return `null`. If instead, the socket is paused, any possible buffered\n    // data will be read as a single chunk.\n    //\n    if (!this._readableState.endEmitted && !websocket._closeFrameReceived && !websocket._receiver._writableState.errorEmitted && (chunk = websocket._socket.read()) !== null) {\n      websocket._receiver.write(chunk);\n    }\n    websocket._receiver.end();\n    this[kWebSocket] = undefined;\n    clearTimeout(websocket._closeTimer);\n    if (websocket._receiver._writableState.finished || websocket._receiver._writableState.errorEmitted) {\n      websocket.emitClose();\n    } else {\n      websocket._receiver.on('error', receiverOnFinish);\n      websocket._receiver.on('finish', receiverOnFinish);\n    }\n  }\n\n  /**\n   * The listener of the socket `'data'` event.\n   *\n   * @param {Buffer} chunk A chunk of data\n   * @private\n   */\n  function socketOnData(chunk) {\n    if (!this[kWebSocket]._receiver.write(chunk)) {\n      this.pause();\n    }\n  }\n\n  /**\n   * The listener of the socket `'end'` event.\n   *\n   * @private\n   */\n  function socketOnEnd() {\n    const websocket = this[kWebSocket];\n    websocket._readyState = WebSocket.CLOSING;\n    websocket._receiver.end();\n    this.end();\n  }\n\n  /**\n   * The listener of the socket `'error'` event.\n   *\n   * @private\n   */\n  function socketOnError() {\n    const websocket = this[kWebSocket];\n    this.removeListener('error', socketOnError);\n    this.on('error', NOOP);\n    if (websocket) {\n      websocket._readyState = WebSocket.CLOSING;\n      this.destroy();\n    }\n  }\n});","lineCount":1201,"map":[[2,2,1,0],[4,2,3,0],[4,14,3,12],[6,2,5,0],[6,8,5,6,"EventEmitter"],[6,20,5,18],[6,23,5,21,"require"],[6,30,5,28],[6,31,5,28,"_dependencyMap"],[6,45,5,28],[6,58,5,37],[6,59,5,38],[7,2,6,0],[7,8,6,6,"https"],[7,13,6,11],[7,16,6,14,"require"],[7,23,6,21],[7,24,6,21,"_dependencyMap"],[7,38,6,21],[7,50,6,29],[7,51,6,30],[8,2,7,0],[8,8,7,6,"http"],[8,12,7,10],[8,15,7,13,"require"],[8,22,7,20],[8,23,7,20,"_dependencyMap"],[8,37,7,20],[8,48,7,27],[8,49,7,28],[9,2,8,0],[9,8,8,6,"net"],[9,11,8,9],[9,14,8,12,"require"],[9,21,8,19],[9,22,8,19,"_dependencyMap"],[9,36,8,19],[9,46,8,25],[9,47,8,26],[10,2,9,0],[10,8,9,6,"tls"],[10,11,9,9],[10,14,9,12,"require"],[10,21,9,19],[10,22,9,19,"_dependencyMap"],[10,36,9,19],[10,46,9,25],[10,47,9,26],[11,2,10,0],[11,8,10,6],[12,4,10,8,"randomBytes"],[12,15,10,19],[13,4,10,21,"createHash"],[14,2,10,32],[14,3,10,33],[14,6,10,36,"require"],[14,13,10,43],[14,14,10,43,"_dependencyMap"],[14,28,10,43],[14,41,10,52],[14,42,10,53],[15,2,11,0],[15,8,11,6],[16,4,11,8,"Duplex"],[16,10,11,14],[17,4,11,16,"Readable"],[18,2,11,25],[18,3,11,26],[18,6,11,29,"require"],[18,13,11,36],[18,14,11,36,"_dependencyMap"],[18,28,11,36],[18,41,11,45],[18,42,11,46],[19,2,12,0],[19,8,12,6],[20,4,12,8,"URL"],[21,2,12,12],[21,3,12,13],[21,6,12,16,"require"],[21,13,12,23],[21,14,12,23,"_dependencyMap"],[21,28,12,23],[21,38,12,29],[21,39,12,30],[22,2,14,0],[22,8,14,6,"PerMessageDeflate"],[22,25,14,23],[22,28,14,26,"require"],[22,35,14,33],[22,36,14,33,"_dependencyMap"],[22,50,14,33],[22,77,14,56],[22,78,14,57],[23,2,15,0],[23,8,15,6,"Receiver"],[23,16,15,14],[23,19,15,17,"require"],[23,26,15,24],[23,27,15,24,"_dependencyMap"],[23,41,15,24],[23,58,15,37],[23,59,15,38],[24,2,16,0],[24,8,16,6,"Sender"],[24,14,16,12],[24,17,16,15,"require"],[24,24,16,22],[24,25,16,22,"_dependencyMap"],[24,39,16,22],[24,55,16,33],[24,56,16,34],[25,2,17,0],[25,8,17,6],[26,4,17,8,"isBlob"],[27,2,17,15],[27,3,17,16],[27,6,17,19,"require"],[27,13,17,26],[27,14,17,26,"_dependencyMap"],[27,28,17,26],[27,48,17,41],[27,49,17,42],[28,2,19,0],[28,8,19,6],[29,4,20,2,"BINARY_TYPES"],[29,16,20,14],[30,4,21,2,"EMPTY_BUFFER"],[30,16,21,14],[31,4,22,2,"GUID"],[31,8,22,6],[32,4,23,2,"kForOnEventAttribute"],[32,24,23,22],[33,4,24,2,"kListener"],[33,13,24,11],[34,4,25,2,"kStatusCode"],[34,15,25,13],[35,4,26,2,"kWebSocket"],[35,14,26,12],[36,4,27,2,"NOOP"],[37,2,28,0],[37,3,28,1],[37,6,28,4,"require"],[37,13,28,11],[37,14,28,11,"_dependencyMap"],[37,28,28,11],[37,47,28,25],[37,48,28,26],[38,2,29,0],[38,8,29,6],[39,4,30,2,"EventTarget"],[39,15,30,13],[39,17,30,15],[40,6,30,17,"addEventListener"],[40,22,30,33],[41,6,30,35,"removeEventListener"],[42,4,30,55],[43,2,31,0],[43,3,31,1],[43,6,31,4,"require"],[43,13,31,11],[43,14,31,11,"_dependencyMap"],[43,28,31,11],[43,50,31,28],[43,51,31,29],[44,2,32,0],[44,8,32,6],[45,4,32,8,"format"],[45,10,32,14],[46,4,32,16,"parse"],[47,2,32,22],[47,3,32,23],[47,6,32,26,"require"],[47,13,32,33],[47,14,32,33,"_dependencyMap"],[47,28,32,33],[47,47,32,47],[47,48,32,48],[48,2,33,0],[48,8,33,6],[49,4,33,8,"toBuffer"],[50,2,33,17],[50,3,33,18],[50,6,33,21,"require"],[50,13,33,28],[50,14,33,28,"_dependencyMap"],[50,28,33,28],[50,49,33,44],[50,50,33,45],[51,2,35,0],[51,8,35,6,"closeTimeout"],[51,20,35,18],[51,23,35,21],[51,25,35,23],[51,28,35,26],[51,32,35,30],[52,2,36,0],[52,8,36,6,"kAborted"],[52,16,36,14],[52,19,36,17,"Symbol"],[52,25,36,23],[52,26,36,24],[52,36,36,34],[52,37,36,35],[53,2,37,0],[53,8,37,6,"protocolVersions"],[53,24,37,22],[53,27,37,25],[53,28,37,26],[53,29,37,27],[53,31,37,29],[53,33,37,31],[53,34,37,32],[54,2,38,0],[54,8,38,6,"readyStates"],[54,19,38,17],[54,22,38,20],[54,23,38,21],[54,35,38,33],[54,37,38,35],[54,43,38,41],[54,45,38,43],[54,54,38,52],[54,56,38,54],[54,64,38,62],[54,65,38,63],[55,2,39,0],[55,8,39,6,"subprotocolRegex"],[55,24,39,22],[55,27,39,25],[55,59,39,57],[57,2,41,0],[58,0,42,0],[59,0,43,0],[60,0,44,0],[61,0,45,0],[62,2,46,0],[62,8,46,6,"WebSocket"],[62,17,46,15],[62,26,46,24,"EventEmitter"],[62,38,46,36],[62,39,46,37],[63,4,47,2],[64,0,48,0],[65,0,49,0],[66,0,50,0],[67,0,51,0],[68,0,52,0],[69,0,53,0],[70,4,54,2,"constructor"],[70,15,54,13,"constructor"],[70,16,54,14,"address"],[70,23,54,21],[70,25,54,23,"protocols"],[70,34,54,32],[70,36,54,34,"options"],[70,43,54,41],[70,45,54,43],[71,6,55,4],[71,11,55,9],[71,12,55,10],[71,13,55,11],[72,6,57,4],[72,10,57,8],[72,11,57,9,"_binaryType"],[72,22,57,20],[72,25,57,23,"BINARY_TYPES"],[72,37,57,35],[72,38,57,36],[72,39,57,37],[72,40,57,38],[73,6,58,4],[73,10,58,8],[73,11,58,9,"_closeCode"],[73,21,58,19],[73,24,58,22],[73,28,58,26],[74,6,59,4],[74,10,59,8],[74,11,59,9,"_closeFrameReceived"],[74,30,59,28],[74,33,59,31],[74,38,59,36],[75,6,60,4],[75,10,60,8],[75,11,60,9,"_closeFrameSent"],[75,26,60,24],[75,29,60,27],[75,34,60,32],[76,6,61,4],[76,10,61,8],[76,11,61,9,"_closeMessage"],[76,24,61,22],[76,27,61,25,"EMPTY_BUFFER"],[76,39,61,37],[77,6,62,4],[77,10,62,8],[77,11,62,9,"_closeTimer"],[77,22,62,20],[77,25,62,23],[77,29,62,27],[78,6,63,4],[78,10,63,8],[78,11,63,9,"_errorEmitted"],[78,24,63,22],[78,27,63,25],[78,32,63,30],[79,6,64,4],[79,10,64,8],[79,11,64,9,"_extensions"],[79,22,64,20],[79,25,64,23],[79,26,64,24],[79,27,64,25],[80,6,65,4],[80,10,65,8],[80,11,65,9,"_paused"],[80,18,65,16],[80,21,65,19],[80,26,65,24],[81,6,66,4],[81,10,66,8],[81,11,66,9,"_protocol"],[81,20,66,18],[81,23,66,21],[81,25,66,23],[82,6,67,4],[82,10,67,8],[82,11,67,9,"_readyState"],[82,22,67,20],[82,25,67,23,"WebSocket"],[82,34,67,32],[82,35,67,33,"CONNECTING"],[82,45,67,43],[83,6,68,4],[83,10,68,8],[83,11,68,9,"_receiver"],[83,20,68,18],[83,23,68,21],[83,27,68,25],[84,6,69,4],[84,10,69,8],[84,11,69,9,"_sender"],[84,18,69,16],[84,21,69,19],[84,25,69,23],[85,6,70,4],[85,10,70,8],[85,11,70,9,"_socket"],[85,18,70,16],[85,21,70,19],[85,25,70,23],[86,6,72,4],[86,10,72,8,"address"],[86,17,72,15],[86,22,72,20],[86,26,72,24],[86,28,72,26],[87,8,73,6],[87,12,73,10],[87,13,73,11,"_bufferedAmount"],[87,28,73,26],[87,31,73,29],[87,32,73,30],[88,8,74,6],[88,12,74,10],[88,13,74,11,"_isServer"],[88,22,74,20],[88,25,74,23],[88,30,74,28],[89,8,75,6],[89,12,75,10],[89,13,75,11,"_redirects"],[89,23,75,21],[89,26,75,24],[89,27,75,25],[90,8,77,6],[90,12,77,10,"protocols"],[90,21,77,19],[90,26,77,24,"undefined"],[90,35,77,33],[90,37,77,35],[91,10,78,8,"protocols"],[91,19,78,17],[91,22,78,20],[91,24,78,22],[92,8,79,6],[92,9,79,7],[92,15,79,13],[92,19,79,17],[92,20,79,18,"Array"],[92,25,79,23],[92,26,79,24,"isArray"],[92,33,79,31],[92,34,79,32,"protocols"],[92,43,79,41],[92,44,79,42],[92,46,79,44],[93,10,80,8],[93,14,80,12],[93,21,80,19,"protocols"],[93,30,80,28],[93,35,80,33],[93,43,80,41],[93,47,80,45,"protocols"],[93,56,80,54],[93,61,80,59],[93,65,80,63],[93,67,80,65],[94,12,81,10,"options"],[94,19,81,17],[94,22,81,20,"protocols"],[94,31,81,29],[95,12,82,10,"protocols"],[95,21,82,19],[95,24,82,22],[95,26,82,24],[96,10,83,8],[96,11,83,9],[96,17,83,15],[97,12,84,10,"protocols"],[97,21,84,19],[97,24,84,22],[97,25,84,23,"protocols"],[97,34,84,32],[97,35,84,33],[98,10,85,8],[99,8,86,6],[100,8,88,6,"initAsClient"],[100,20,88,18],[100,21,88,19],[100,25,88,23],[100,27,88,25,"address"],[100,34,88,32],[100,36,88,34,"protocols"],[100,45,88,43],[100,47,88,45,"options"],[100,54,88,52],[100,55,88,53],[101,6,89,4],[101,7,89,5],[101,13,89,11],[102,8,90,6],[102,12,90,10],[102,13,90,11,"_autoPong"],[102,22,90,20],[102,25,90,23,"options"],[102,32,90,30],[102,33,90,31,"autoPong"],[102,41,90,39],[103,8,91,6],[103,12,91,10],[103,13,91,11,"_isServer"],[103,22,91,20],[103,25,91,23],[103,29,91,27],[104,6,92,4],[105,4,93,2],[107,4,95,2],[108,0,96,0],[109,0,97,0],[110,0,98,0],[111,0,99,0],[112,0,100,0],[113,4,101,2],[113,8,101,6,"binaryType"],[113,18,101,16,"binaryType"],[113,19,101,16],[113,21,101,19],[114,6,102,4],[114,13,102,11],[114,17,102,15],[114,18,102,16,"_binaryType"],[114,29,102,27],[115,4,103,2],[116,4,105,2],[116,8,105,6,"binaryType"],[116,18,105,16,"binaryType"],[116,19,105,17,"type"],[116,23,105,21],[116,25,105,23],[117,6,106,4],[117,10,106,8],[117,11,106,9,"BINARY_TYPES"],[117,23,106,21],[117,24,106,22,"includes"],[117,32,106,30],[117,33,106,31,"type"],[117,37,106,35],[117,38,106,36],[117,40,106,38],[118,6,108,4],[118,10,108,8],[118,11,108,9,"_binaryType"],[118,22,108,20],[118,25,108,23,"type"],[118,29,108,27],[120,6,110,4],[121,6,111,4],[122,6,112,4],[123,6,113,4],[123,10,113,8],[123,14,113,12],[123,15,113,13,"_receiver"],[123,24,113,22],[123,26,113,24],[123,30,113,28],[123,31,113,29,"_receiver"],[123,40,113,38],[123,41,113,39,"_binaryType"],[123,52,113,50],[123,55,113,53,"type"],[123,59,113,57],[124,4,114,2],[126,4,116,2],[127,0,117,0],[128,0,118,0],[129,4,119,2],[129,8,119,6,"bufferedAmount"],[129,22,119,20,"bufferedAmount"],[129,23,119,20],[129,25,119,23],[130,6,120,4],[130,10,120,8],[130,11,120,9],[130,15,120,13],[130,16,120,14,"_socket"],[130,23,120,21],[130,25,120,23],[130,32,120,30],[130,36,120,34],[130,37,120,35,"_bufferedAmount"],[130,52,120,50],[131,6,122,4],[131,13,122,11],[131,17,122,15],[131,18,122,16,"_socket"],[131,25,122,23],[131,26,122,24,"_writableState"],[131,40,122,38],[131,41,122,39,"length"],[131,47,122,45],[131,50,122,48],[131,54,122,52],[131,55,122,53,"_sender"],[131,62,122,60],[131,63,122,61,"_bufferedBytes"],[131,77,122,75],[132,4,123,2],[134,4,125,2],[135,0,126,0],[136,0,127,0],[137,4,128,2],[137,8,128,6,"extensions"],[137,18,128,16,"extensions"],[137,19,128,16],[137,21,128,19],[138,6,129,4],[138,13,129,11,"Object"],[138,19,129,17],[138,20,129,18,"keys"],[138,24,129,22],[138,25,129,23],[138,29,129,27],[138,30,129,28,"_extensions"],[138,41,129,39],[138,42,129,40],[138,43,129,41,"join"],[138,47,129,45],[138,48,129,46],[138,49,129,47],[139,4,130,2],[141,4,132,2],[142,0,133,0],[143,0,134,0],[144,4,135,2],[144,8,135,6,"isPaused"],[144,16,135,14,"isPaused"],[144,17,135,14],[144,19,135,17],[145,6,136,4],[145,13,136,11],[145,17,136,15],[145,18,136,16,"_paused"],[145,25,136,23],[146,4,137,2],[148,4,139,2],[149,0,140,0],[150,0,141,0],[151,4,142,2],[152,4,143,2],[152,8,143,6,"onclose"],[152,15,143,13,"onclose"],[152,16,143,13],[152,18,143,16],[153,6,144,4],[153,13,144,11],[153,17,144,15],[154,4,145,2],[156,4,147,2],[157,0,148,0],[158,0,149,0],[159,4,150,2],[160,4,151,2],[160,8,151,6,"onerror"],[160,15,151,13,"onerror"],[160,16,151,13],[160,18,151,16],[161,6,152,4],[161,13,152,11],[161,17,152,15],[162,4,153,2],[164,4,155,2],[165,0,156,0],[166,0,157,0],[167,4,158,2],[168,4,159,2],[168,8,159,6,"onopen"],[168,14,159,12,"onopen"],[168,15,159,12],[168,17,159,15],[169,6,160,4],[169,13,160,11],[169,17,160,15],[170,4,161,2],[172,4,163,2],[173,0,164,0],[174,0,165,0],[175,4,166,2],[176,4,167,2],[176,8,167,6,"onmessage"],[176,17,167,15,"onmessage"],[176,18,167,15],[176,20,167,18],[177,6,168,4],[177,13,168,11],[177,17,168,15],[178,4,169,2],[180,4,171,2],[181,0,172,0],[182,0,173,0],[183,4,174,2],[183,8,174,6,"protocol"],[183,16,174,14,"protocol"],[183,17,174,14],[183,19,174,17],[184,6,175,4],[184,13,175,11],[184,17,175,15],[184,18,175,16,"_protocol"],[184,27,175,25],[185,4,176,2],[187,4,178,2],[188,0,179,0],[189,0,180,0],[190,4,181,2],[190,8,181,6,"readyState"],[190,18,181,16,"readyState"],[190,19,181,16],[190,21,181,19],[191,6,182,4],[191,13,182,11],[191,17,182,15],[191,18,182,16,"_readyState"],[191,29,182,27],[192,4,183,2],[194,4,185,2],[195,0,186,0],[196,0,187,0],[197,4,188,2],[197,8,188,6,"url"],[197,11,188,9,"url"],[197,12,188,9],[197,14,188,12],[198,6,189,4],[198,13,189,11],[198,17,189,15],[198,18,189,16,"_url"],[198,22,189,20],[199,4,190,2],[201,4,192,2],[202,0,193,0],[203,0,194,0],[204,0,195,0],[205,0,196,0],[206,0,197,0],[207,0,198,0],[208,0,199,0],[209,0,200,0],[210,0,201,0],[211,0,202,0],[212,0,203,0],[213,0,204,0],[214,0,205,0],[215,0,206,0],[216,0,207,0],[217,4,208,2,"setSocket"],[217,13,208,11,"setSocket"],[217,14,208,12,"socket"],[217,20,208,18],[217,22,208,20,"head"],[217,26,208,24],[217,28,208,26,"options"],[217,35,208,33],[217,37,208,35],[218,6,209,4],[218,12,209,10,"receiver"],[218,20,209,18],[218,23,209,21],[218,27,209,25,"Receiver"],[218,35,209,33],[218,36,209,34],[219,8,210,6,"allowSynchronousEvents"],[219,30,210,28],[219,32,210,30,"options"],[219,39,210,37],[219,40,210,38,"allowSynchronousEvents"],[219,62,210,60],[220,8,211,6,"binaryType"],[220,18,211,16],[220,20,211,18],[220,24,211,22],[220,25,211,23,"binaryType"],[220,35,211,33],[221,8,212,6,"extensions"],[221,18,212,16],[221,20,212,18],[221,24,212,22],[221,25,212,23,"_extensions"],[221,36,212,34],[222,8,213,6,"isServer"],[222,16,213,14],[222,18,213,16],[222,22,213,20],[222,23,213,21,"_isServer"],[222,32,213,30],[223,8,214,6,"maxPayload"],[223,18,214,16],[223,20,214,18,"options"],[223,27,214,25],[223,28,214,26,"maxPayload"],[223,38,214,36],[224,8,215,6,"skipUTF8Validation"],[224,26,215,24],[224,28,215,26,"options"],[224,35,215,33],[224,36,215,34,"skipUTF8Validation"],[225,6,216,4],[225,7,216,5],[225,8,216,6],[226,6,218,4],[226,12,218,10,"sender"],[226,18,218,16],[226,21,218,19],[226,25,218,23,"Sender"],[226,31,218,29],[226,32,218,30,"socket"],[226,38,218,36],[226,40,218,38],[226,44,218,42],[226,45,218,43,"_extensions"],[226,56,218,54],[226,58,218,56,"options"],[226,65,218,63],[226,66,218,64,"generateMask"],[226,78,218,76],[226,79,218,77],[227,6,220,4],[227,10,220,8],[227,11,220,9,"_receiver"],[227,20,220,18],[227,23,220,21,"receiver"],[227,31,220,29],[228,6,221,4],[228,10,221,8],[228,11,221,9,"_sender"],[228,18,221,16],[228,21,221,19,"sender"],[228,27,221,25],[229,6,222,4],[229,10,222,8],[229,11,222,9,"_socket"],[229,18,222,16],[229,21,222,19,"socket"],[229,27,222,25],[230,6,224,4,"receiver"],[230,14,224,12],[230,15,224,13,"kWebSocket"],[230,25,224,23],[230,26,224,24],[230,29,224,27],[230,33,224,31],[231,6,225,4,"sender"],[231,12,225,10],[231,13,225,11,"kWebSocket"],[231,23,225,21],[231,24,225,22],[231,27,225,25],[231,31,225,29],[232,6,226,4,"socket"],[232,12,226,10],[232,13,226,11,"kWebSocket"],[232,23,226,21],[232,24,226,22],[232,27,226,25],[232,31,226,29],[233,6,228,4,"receiver"],[233,14,228,12],[233,15,228,13,"on"],[233,17,228,15],[233,18,228,16],[233,28,228,26],[233,30,228,28,"receiverOnConclude"],[233,48,228,46],[233,49,228,47],[234,6,229,4,"receiver"],[234,14,229,12],[234,15,229,13,"on"],[234,17,229,15],[234,18,229,16],[234,25,229,23],[234,27,229,25,"receiverOnDrain"],[234,42,229,40],[234,43,229,41],[235,6,230,4,"receiver"],[235,14,230,12],[235,15,230,13,"on"],[235,17,230,15],[235,18,230,16],[235,25,230,23],[235,27,230,25,"receiverOnError"],[235,42,230,40],[235,43,230,41],[236,6,231,4,"receiver"],[236,14,231,12],[236,15,231,13,"on"],[236,17,231,15],[236,18,231,16],[236,27,231,25],[236,29,231,27,"receiverOnMessage"],[236,46,231,44],[236,47,231,45],[237,6,232,4,"receiver"],[237,14,232,12],[237,15,232,13,"on"],[237,17,232,15],[237,18,232,16],[237,24,232,22],[237,26,232,24,"receiverOnPing"],[237,40,232,38],[237,41,232,39],[238,6,233,4,"receiver"],[238,14,233,12],[238,15,233,13,"on"],[238,17,233,15],[238,18,233,16],[238,24,233,22],[238,26,233,24,"receiverOnPong"],[238,40,233,38],[238,41,233,39],[239,6,235,4,"sender"],[239,12,235,10],[239,13,235,11,"onerror"],[239,20,235,18],[239,23,235,21,"senderOnError"],[239,36,235,34],[241,6,237,4],[242,6,238,4],[243,6,239,4],[244,6,240,4],[244,10,240,8,"socket"],[244,16,240,14],[244,17,240,15,"setTimeout"],[244,27,240,25],[244,29,240,27,"socket"],[244,35,240,33],[244,36,240,34,"setTimeout"],[244,46,240,44],[244,47,240,45],[244,48,240,46],[244,49,240,47],[245,6,241,4],[245,10,241,8,"socket"],[245,16,241,14],[245,17,241,15,"setNoDelay"],[245,27,241,25],[245,29,241,27,"socket"],[245,35,241,33],[245,36,241,34,"setNoDelay"],[245,46,241,44],[245,47,241,45],[245,48,241,46],[246,6,243,4],[246,10,243,8,"head"],[246,14,243,12],[246,15,243,13,"length"],[246,21,243,19],[246,24,243,22],[246,25,243,23],[246,27,243,25,"socket"],[246,33,243,31],[246,34,243,32,"unshift"],[246,41,243,39],[246,42,243,40,"head"],[246,46,243,44],[246,47,243,45],[247,6,245,4,"socket"],[247,12,245,10],[247,13,245,11,"on"],[247,15,245,13],[247,16,245,14],[247,23,245,21],[247,25,245,23,"socketOnClose"],[247,38,245,36],[247,39,245,37],[248,6,246,4,"socket"],[248,12,246,10],[248,13,246,11,"on"],[248,15,246,13],[248,16,246,14],[248,22,246,20],[248,24,246,22,"socketOnData"],[248,36,246,34],[248,37,246,35],[249,6,247,4,"socket"],[249,12,247,10],[249,13,247,11,"on"],[249,15,247,13],[249,16,247,14],[249,21,247,19],[249,23,247,21,"socketOnEnd"],[249,34,247,32],[249,35,247,33],[250,6,248,4,"socket"],[250,12,248,10],[250,13,248,11,"on"],[250,15,248,13],[250,16,248,14],[250,23,248,21],[250,25,248,23,"socketOnError"],[250,38,248,36],[250,39,248,37],[251,6,250,4],[251,10,250,8],[251,11,250,9,"_readyState"],[251,22,250,20],[251,25,250,23,"WebSocket"],[251,34,250,32],[251,35,250,33,"OPEN"],[251,39,250,37],[252,6,251,4],[252,10,251,8],[252,11,251,9,"emit"],[252,15,251,13],[252,16,251,14],[252,22,251,20],[252,23,251,21],[253,4,252,2],[255,4,254,2],[256,0,255,0],[257,0,256,0],[258,0,257,0],[259,0,258,0],[260,4,259,2,"emitClose"],[260,13,259,11,"emitClose"],[260,14,259,11],[260,16,259,14],[261,6,260,4],[261,10,260,8],[261,11,260,9],[261,15,260,13],[261,16,260,14,"_socket"],[261,23,260,21],[261,25,260,23],[262,8,261,6],[262,12,261,10],[262,13,261,11,"_readyState"],[262,24,261,22],[262,27,261,25,"WebSocket"],[262,36,261,34],[262,37,261,35,"CLOSED"],[262,43,261,41],[263,8,262,6],[263,12,262,10],[263,13,262,11,"emit"],[263,17,262,15],[263,18,262,16],[263,25,262,23],[263,27,262,25],[263,31,262,29],[263,32,262,30,"_closeCode"],[263,42,262,40],[263,44,262,42],[263,48,262,46],[263,49,262,47,"_closeMessage"],[263,62,262,60],[263,63,262,61],[264,8,263,6],[265,6,264,4],[266,6,266,4],[266,10,266,8],[266,14,266,12],[266,15,266,13,"_extensions"],[266,26,266,24],[266,27,266,25,"PerMessageDeflate"],[266,44,266,42],[266,45,266,43,"extensionName"],[266,58,266,56],[266,59,266,57],[266,61,266,59],[267,8,267,6],[267,12,267,10],[267,13,267,11,"_extensions"],[267,24,267,22],[267,25,267,23,"PerMessageDeflate"],[267,42,267,40],[267,43,267,41,"extensionName"],[267,56,267,54],[267,57,267,55],[267,58,267,56,"cleanup"],[267,65,267,63],[267,66,267,64],[267,67,267,65],[268,6,268,4],[269,6,270,4],[269,10,270,8],[269,11,270,9,"_receiver"],[269,20,270,18],[269,21,270,19,"removeAllListeners"],[269,39,270,37],[269,40,270,38],[269,41,270,39],[270,6,271,4],[270,10,271,8],[270,11,271,9,"_readyState"],[270,22,271,20],[270,25,271,23,"WebSocket"],[270,34,271,32],[270,35,271,33,"CLOSED"],[270,41,271,39],[271,6,272,4],[271,10,272,8],[271,11,272,9,"emit"],[271,15,272,13],[271,16,272,14],[271,23,272,21],[271,25,272,23],[271,29,272,27],[271,30,272,28,"_closeCode"],[271,40,272,38],[271,42,272,40],[271,46,272,44],[271,47,272,45,"_closeMessage"],[271,60,272,58],[271,61,272,59],[272,4,273,2],[274,4,275,2],[275,0,276,0],[276,0,277,0],[277,0,278,0],[278,0,279,0],[279,0,280,0],[280,0,281,0],[281,0,282,0],[282,0,283,0],[283,0,284,0],[284,0,285,0],[285,0,286,0],[286,0,287,0],[287,0,288,0],[288,0,289,0],[289,0,290,0],[290,0,291,0],[291,0,292,0],[292,0,293,0],[293,0,294,0],[294,4,295,2,"close"],[294,9,295,7,"close"],[294,10,295,8,"code"],[294,14,295,12],[294,16,295,14,"data"],[294,20,295,18],[294,22,295,20],[295,6,296,4],[295,10,296,8],[295,14,296,12],[295,15,296,13,"readyState"],[295,25,296,23],[295,30,296,28,"WebSocket"],[295,39,296,37],[295,40,296,38,"CLOSED"],[295,46,296,44],[295,48,296,46],[296,6,297,4],[296,10,297,8],[296,14,297,12],[296,15,297,13,"readyState"],[296,25,297,23],[296,30,297,28,"WebSocket"],[296,39,297,37],[296,40,297,38,"CONNECTING"],[296,50,297,48],[296,52,297,50],[297,8,298,6],[297,14,298,12,"msg"],[297,17,298,15],[297,20,298,18],[297,80,298,78],[298,8,299,6,"abortHandshake"],[298,22,299,20],[298,23,299,21],[298,27,299,25],[298,29,299,27],[298,33,299,31],[298,34,299,32,"_req"],[298,38,299,36],[298,40,299,38,"msg"],[298,43,299,41],[298,44,299,42],[299,8,300,6],[300,6,301,4],[301,6,303,4],[301,10,303,8],[301,14,303,12],[301,15,303,13,"readyState"],[301,25,303,23],[301,30,303,28,"WebSocket"],[301,39,303,37],[301,40,303,38,"CLOSING"],[301,47,303,45],[301,49,303,47],[302,8,304,6],[302,12,305,8],[302,16,305,12],[302,17,305,13,"_closeFrameSent"],[302,32,305,28],[302,37,306,9],[302,41,306,13],[302,42,306,14,"_closeFrameReceived"],[302,61,306,33],[302,65,306,37],[302,69,306,41],[302,70,306,42,"_receiver"],[302,79,306,51],[302,80,306,52,"_writableState"],[302,94,306,66],[302,95,306,67,"errorEmitted"],[302,107,306,79],[302,108,306,80],[302,110,307,8],[303,10,308,8],[303,14,308,12],[303,15,308,13,"_socket"],[303,22,308,20],[303,23,308,21,"end"],[303,26,308,24],[303,27,308,25],[303,28,308,26],[304,8,309,6],[305,8,311,6],[306,6,312,4],[307,6,314,4],[307,10,314,8],[307,11,314,9,"_readyState"],[307,22,314,20],[307,25,314,23,"WebSocket"],[307,34,314,32],[307,35,314,33,"CLOSING"],[307,42,314,40],[308,6,315,4],[308,10,315,8],[308,11,315,9,"_sender"],[308,18,315,16],[308,19,315,17,"close"],[308,24,315,22],[308,25,315,23,"code"],[308,29,315,27],[308,31,315,29,"data"],[308,35,315,33],[308,37,315,35],[308,38,315,36],[308,42,315,40],[308,43,315,41,"_isServer"],[308,52,315,50],[308,54,315,53,"err"],[308,57,315,56],[308,61,315,61],[309,8,316,6],[310,8,317,6],[311,8,318,6],[312,8,319,6],[313,8,320,6],[313,12,320,10,"err"],[313,15,320,13],[313,17,320,15],[314,8,322,6],[314,12,322,10],[314,13,322,11,"_closeFrameSent"],[314,28,322,26],[314,31,322,29],[314,35,322,33],[315,8,324,6],[315,12,325,8],[315,16,325,12],[315,17,325,13,"_closeFrameReceived"],[315,36,325,32],[315,40,326,8],[315,44,326,12],[315,45,326,13,"_receiver"],[315,54,326,22],[315,55,326,23,"_writableState"],[315,69,326,37],[315,70,326,38,"errorEmitted"],[315,82,326,50],[315,84,327,8],[316,10,328,8],[316,14,328,12],[316,15,328,13,"_socket"],[316,22,328,20],[316,23,328,21,"end"],[316,26,328,24],[316,27,328,25],[316,28,328,26],[317,8,329,6],[318,6,330,4],[318,7,330,5],[318,8,330,6],[319,6,332,4,"setCloseTimer"],[319,19,332,17],[319,20,332,18],[319,24,332,22],[319,25,332,23],[320,4,333,2],[322,4,335,2],[323,0,336,0],[324,0,337,0],[325,0,338,0],[326,0,339,0],[327,4,340,2,"pause"],[327,9,340,7,"pause"],[327,10,340,7],[327,12,340,10],[328,6,341,4],[328,10,342,6],[328,14,342,10],[328,15,342,11,"readyState"],[328,25,342,21],[328,30,342,26,"WebSocket"],[328,39,342,35],[328,40,342,36,"CONNECTING"],[328,50,342,46],[328,54,343,6],[328,58,343,10],[328,59,343,11,"readyState"],[328,69,343,21],[328,74,343,26,"WebSocket"],[328,83,343,35],[328,84,343,36,"CLOSED"],[328,90,343,42],[328,92,344,6],[329,8,345,6],[330,6,346,4],[331,6,348,4],[331,10,348,8],[331,11,348,9,"_paused"],[331,18,348,16],[331,21,348,19],[331,25,348,23],[332,6,349,4],[332,10,349,8],[332,11,349,9,"_socket"],[332,18,349,16],[332,19,349,17,"pause"],[332,24,349,22],[332,25,349,23],[332,26,349,24],[333,4,350,2],[335,4,352,2],[336,0,353,0],[337,0,354,0],[338,0,355,0],[339,0,356,0],[340,0,357,0],[341,0,358,0],[342,0,359,0],[343,4,360,2,"ping"],[343,8,360,6,"ping"],[343,9,360,7,"data"],[343,13,360,11],[343,15,360,13,"mask"],[343,19,360,17],[343,21,360,19,"cb"],[343,23,360,21],[343,25,360,23],[344,6,361,4],[344,10,361,8],[344,14,361,12],[344,15,361,13,"readyState"],[344,25,361,23],[344,30,361,28,"WebSocket"],[344,39,361,37],[344,40,361,38,"CONNECTING"],[344,50,361,48],[344,52,361,50],[345,8,362,6],[345,14,362,12],[345,18,362,16,"Error"],[345,23,362,21],[345,24,362,22],[345,74,362,72],[345,75,362,73],[346,6,363,4],[347,6,365,4],[347,10,365,8],[347,17,365,15,"data"],[347,21,365,19],[347,26,365,24],[347,36,365,34],[347,38,365,36],[348,8,366,6,"cb"],[348,10,366,8],[348,13,366,11,"data"],[348,17,366,15],[349,8,367,6,"data"],[349,12,367,10],[349,15,367,13,"mask"],[349,19,367,17],[349,22,367,20,"undefined"],[349,31,367,29],[350,6,368,4],[350,7,368,5],[350,13,368,11],[350,17,368,15],[350,24,368,22,"mask"],[350,28,368,26],[350,33,368,31],[350,43,368,41],[350,45,368,43],[351,8,369,6,"cb"],[351,10,369,8],[351,13,369,11,"mask"],[351,17,369,15],[352,8,370,6,"mask"],[352,12,370,10],[352,15,370,13,"undefined"],[352,24,370,22],[353,6,371,4],[354,6,373,4],[354,10,373,8],[354,17,373,15,"data"],[354,21,373,19],[354,26,373,24],[354,34,373,32],[354,36,373,34,"data"],[354,40,373,38],[354,43,373,41,"data"],[354,47,373,45],[354,48,373,46,"toString"],[354,56,373,54],[354,57,373,55],[354,58,373,56],[355,6,375,4],[355,10,375,8],[355,14,375,12],[355,15,375,13,"readyState"],[355,25,375,23],[355,30,375,28,"WebSocket"],[355,39,375,37],[355,40,375,38,"OPEN"],[355,44,375,42],[355,46,375,44],[356,8,376,6,"sendAfterClose"],[356,22,376,20],[356,23,376,21],[356,27,376,25],[356,29,376,27,"data"],[356,33,376,31],[356,35,376,33,"cb"],[356,37,376,35],[356,38,376,36],[357,8,377,6],[358,6,378,4],[359,6,380,4],[359,10,380,8,"mask"],[359,14,380,12],[359,19,380,17,"undefined"],[359,28,380,26],[359,30,380,28,"mask"],[359,34,380,32],[359,37,380,35],[359,38,380,36],[359,42,380,40],[359,43,380,41,"_isServer"],[359,52,380,50],[360,6,381,4],[360,10,381,8],[360,11,381,9,"_sender"],[360,18,381,16],[360,19,381,17,"ping"],[360,23,381,21],[360,24,381,22,"data"],[360,28,381,26],[360,32,381,30,"EMPTY_BUFFER"],[360,44,381,42],[360,46,381,44,"mask"],[360,50,381,48],[360,52,381,50,"cb"],[360,54,381,52],[360,55,381,53],[361,4,382,2],[363,4,384,2],[364,0,385,0],[365,0,386,0],[366,0,387,0],[367,0,388,0],[368,0,389,0],[369,0,390,0],[370,0,391,0],[371,4,392,2,"pong"],[371,8,392,6,"pong"],[371,9,392,7,"data"],[371,13,392,11],[371,15,392,13,"mask"],[371,19,392,17],[371,21,392,19,"cb"],[371,23,392,21],[371,25,392,23],[372,6,393,4],[372,10,393,8],[372,14,393,12],[372,15,393,13,"readyState"],[372,25,393,23],[372,30,393,28,"WebSocket"],[372,39,393,37],[372,40,393,38,"CONNECTING"],[372,50,393,48],[372,52,393,50],[373,8,394,6],[373,14,394,12],[373,18,394,16,"Error"],[373,23,394,21],[373,24,394,22],[373,74,394,72],[373,75,394,73],[374,6,395,4],[375,6,397,4],[375,10,397,8],[375,17,397,15,"data"],[375,21,397,19],[375,26,397,24],[375,36,397,34],[375,38,397,36],[376,8,398,6,"cb"],[376,10,398,8],[376,13,398,11,"data"],[376,17,398,15],[377,8,399,6,"data"],[377,12,399,10],[377,15,399,13,"mask"],[377,19,399,17],[377,22,399,20,"undefined"],[377,31,399,29],[378,6,400,4],[378,7,400,5],[378,13,400,11],[378,17,400,15],[378,24,400,22,"mask"],[378,28,400,26],[378,33,400,31],[378,43,400,41],[378,45,400,43],[379,8,401,6,"cb"],[379,10,401,8],[379,13,401,11,"mask"],[379,17,401,15],[380,8,402,6,"mask"],[380,12,402,10],[380,15,402,13,"undefined"],[380,24,402,22],[381,6,403,4],[382,6,405,4],[382,10,405,8],[382,17,405,15,"data"],[382,21,405,19],[382,26,405,24],[382,34,405,32],[382,36,405,34,"data"],[382,40,405,38],[382,43,405,41,"data"],[382,47,405,45],[382,48,405,46,"toString"],[382,56,405,54],[382,57,405,55],[382,58,405,56],[383,6,407,4],[383,10,407,8],[383,14,407,12],[383,15,407,13,"readyState"],[383,25,407,23],[383,30,407,28,"WebSocket"],[383,39,407,37],[383,40,407,38,"OPEN"],[383,44,407,42],[383,46,407,44],[384,8,408,6,"sendAfterClose"],[384,22,408,20],[384,23,408,21],[384,27,408,25],[384,29,408,27,"data"],[384,33,408,31],[384,35,408,33,"cb"],[384,37,408,35],[384,38,408,36],[385,8,409,6],[386,6,410,4],[387,6,412,4],[387,10,412,8,"mask"],[387,14,412,12],[387,19,412,17,"undefined"],[387,28,412,26],[387,30,412,28,"mask"],[387,34,412,32],[387,37,412,35],[387,38,412,36],[387,42,412,40],[387,43,412,41,"_isServer"],[387,52,412,50],[388,6,413,4],[388,10,413,8],[388,11,413,9,"_sender"],[388,18,413,16],[388,19,413,17,"pong"],[388,23,413,21],[388,24,413,22,"data"],[388,28,413,26],[388,32,413,30,"EMPTY_BUFFER"],[388,44,413,42],[388,46,413,44,"mask"],[388,50,413,48],[388,52,413,50,"cb"],[388,54,413,52],[388,55,413,53],[389,4,414,2],[391,4,416,2],[392,0,417,0],[393,0,418,0],[394,0,419,0],[395,0,420,0],[396,4,421,2,"resume"],[396,10,421,8,"resume"],[396,11,421,8],[396,13,421,11],[397,6,422,4],[397,10,423,6],[397,14,423,10],[397,15,423,11,"readyState"],[397,25,423,21],[397,30,423,26,"WebSocket"],[397,39,423,35],[397,40,423,36,"CONNECTING"],[397,50,423,46],[397,54,424,6],[397,58,424,10],[397,59,424,11,"readyState"],[397,69,424,21],[397,74,424,26,"WebSocket"],[397,83,424,35],[397,84,424,36,"CLOSED"],[397,90,424,42],[397,92,425,6],[398,8,426,6],[399,6,427,4],[400,6,429,4],[400,10,429,8],[400,11,429,9,"_paused"],[400,18,429,16],[400,21,429,19],[400,26,429,24],[401,6,430,4],[401,10,430,8],[401,11,430,9],[401,15,430,13],[401,16,430,14,"_receiver"],[401,25,430,23],[401,26,430,24,"_writableState"],[401,40,430,38],[401,41,430,39,"needDrain"],[401,50,430,48],[401,52,430,50],[401,56,430,54],[401,57,430,55,"_socket"],[401,64,430,62],[401,65,430,63,"resume"],[401,71,430,69],[401,72,430,70],[401,73,430,71],[402,4,431,2],[404,4,433,2],[405,0,434,0],[406,0,435,0],[407,0,436,0],[408,0,437,0],[409,0,438,0],[410,0,439,0],[411,0,440,0],[412,0,441,0],[413,0,442,0],[414,0,443,0],[415,0,444,0],[416,0,445,0],[417,0,446,0],[418,0,447,0],[419,4,448,2,"send"],[419,8,448,6,"send"],[419,9,448,7,"data"],[419,13,448,11],[419,15,448,13,"options"],[419,22,448,20],[419,24,448,22,"cb"],[419,26,448,24],[419,28,448,26],[420,6,449,4],[420,10,449,8],[420,14,449,12],[420,15,449,13,"readyState"],[420,25,449,23],[420,30,449,28,"WebSocket"],[420,39,449,37],[420,40,449,38,"CONNECTING"],[420,50,449,48],[420,52,449,50],[421,8,450,6],[421,14,450,12],[421,18,450,16,"Error"],[421,23,450,21],[421,24,450,22],[421,74,450,72],[421,75,450,73],[422,6,451,4],[423,6,453,4],[423,10,453,8],[423,17,453,15,"options"],[423,24,453,22],[423,29,453,27],[423,39,453,37],[423,41,453,39],[424,8,454,6,"cb"],[424,10,454,8],[424,13,454,11,"options"],[424,20,454,18],[425,8,455,6,"options"],[425,15,455,13],[425,18,455,16],[425,19,455,17],[425,20,455,18],[426,6,456,4],[427,6,458,4],[427,10,458,8],[427,17,458,15,"data"],[427,21,458,19],[427,26,458,24],[427,34,458,32],[427,36,458,34,"data"],[427,40,458,38],[427,43,458,41,"data"],[427,47,458,45],[427,48,458,46,"toString"],[427,56,458,54],[427,57,458,55],[427,58,458,56],[428,6,460,4],[428,10,460,8],[428,14,460,12],[428,15,460,13,"readyState"],[428,25,460,23],[428,30,460,28,"WebSocket"],[428,39,460,37],[428,40,460,38,"OPEN"],[428,44,460,42],[428,46,460,44],[429,8,461,6,"sendAfterClose"],[429,22,461,20],[429,23,461,21],[429,27,461,25],[429,29,461,27,"data"],[429,33,461,31],[429,35,461,33,"cb"],[429,37,461,35],[429,38,461,36],[430,8,462,6],[431,6,463,4],[432,6,465,4],[432,12,465,10,"opts"],[432,16,465,14],[432,19,465,17],[433,8,466,6,"binary"],[433,14,466,12],[433,16,466,14],[433,23,466,21,"data"],[433,27,466,25],[433,32,466,30],[433,40,466,38],[434,8,467,6,"mask"],[434,12,467,10],[434,14,467,12],[434,15,467,13],[434,19,467,17],[434,20,467,18,"_isServer"],[434,29,467,27],[435,8,468,6,"compress"],[435,16,468,14],[435,18,468,16],[435,22,468,20],[436,8,469,6,"fin"],[436,11,469,9],[436,13,469,11],[436,17,469,15],[437,8,470,6],[437,11,470,9,"options"],[438,6,471,4],[438,7,471,5],[439,6,473,4],[439,10,473,8],[439,11,473,9],[439,15,473,13],[439,16,473,14,"_extensions"],[439,27,473,25],[439,28,473,26,"PerMessageDeflate"],[439,45,473,43],[439,46,473,44,"extensionName"],[439,59,473,57],[439,60,473,58],[439,62,473,60],[440,8,474,6,"opts"],[440,12,474,10],[440,13,474,11,"compress"],[440,21,474,19],[440,24,474,22],[440,29,474,27],[441,6,475,4],[442,6,477,4],[442,10,477,8],[442,11,477,9,"_sender"],[442,18,477,16],[442,19,477,17,"send"],[442,23,477,21],[442,24,477,22,"data"],[442,28,477,26],[442,32,477,30,"EMPTY_BUFFER"],[442,44,477,42],[442,46,477,44,"opts"],[442,50,477,48],[442,52,477,50,"cb"],[442,54,477,52],[442,55,477,53],[443,4,478,2],[445,4,480,2],[446,0,481,0],[447,0,482,0],[448,0,483,0],[449,0,484,0],[450,4,485,2,"terminate"],[450,13,485,11,"terminate"],[450,14,485,11],[450,16,485,14],[451,6,486,4],[451,10,486,8],[451,14,486,12],[451,15,486,13,"readyState"],[451,25,486,23],[451,30,486,28,"WebSocket"],[451,39,486,37],[451,40,486,38,"CLOSED"],[451,46,486,44],[451,48,486,46],[452,6,487,4],[452,10,487,8],[452,14,487,12],[452,15,487,13,"readyState"],[452,25,487,23],[452,30,487,28,"WebSocket"],[452,39,487,37],[452,40,487,38,"CONNECTING"],[452,50,487,48],[452,52,487,50],[453,8,488,6],[453,14,488,12,"msg"],[453,17,488,15],[453,20,488,18],[453,80,488,78],[454,8,489,6,"abortHandshake"],[454,22,489,20],[454,23,489,21],[454,27,489,25],[454,29,489,27],[454,33,489,31],[454,34,489,32,"_req"],[454,38,489,36],[454,40,489,38,"msg"],[454,43,489,41],[454,44,489,42],[455,8,490,6],[456,6,491,4],[457,6,493,4],[457,10,493,8],[457,14,493,12],[457,15,493,13,"_socket"],[457,22,493,20],[457,24,493,22],[458,8,494,6],[458,12,494,10],[458,13,494,11,"_readyState"],[458,24,494,22],[458,27,494,25,"WebSocket"],[458,36,494,34],[458,37,494,35,"CLOSING"],[458,44,494,42],[459,8,495,6],[459,12,495,10],[459,13,495,11,"_socket"],[459,20,495,18],[459,21,495,19,"destroy"],[459,28,495,26],[459,29,495,27],[459,30,495,28],[460,6,496,4],[461,4,497,2],[462,2,498,0],[464,2,500,0],[465,0,501,0],[466,0,502,0],[467,0,503,0],[468,2,504,0,"Object"],[468,8,504,6],[468,9,504,7,"defineProperty"],[468,23,504,21],[468,24,504,22,"WebSocket"],[468,33,504,31],[468,35,504,33],[468,47,504,45],[468,49,504,47],[469,4,505,2,"enumerable"],[469,14,505,12],[469,16,505,14],[469,20,505,18],[470,4,506,2,"value"],[470,9,506,7],[470,11,506,9,"readyStates"],[470,22,506,20],[470,23,506,21,"indexOf"],[470,30,506,28],[470,31,506,29],[470,43,506,41],[471,2,507,0],[471,3,507,1],[471,4,507,2],[473,2,509,0],[474,0,510,0],[475,0,511,0],[476,0,512,0],[477,2,513,0,"Object"],[477,8,513,6],[477,9,513,7,"defineProperty"],[477,23,513,21],[477,24,513,22,"WebSocket"],[477,33,513,31],[477,34,513,32,"prototype"],[477,43,513,41],[477,45,513,43],[477,57,513,55],[477,59,513,57],[478,4,514,2,"enumerable"],[478,14,514,12],[478,16,514,14],[478,20,514,18],[479,4,515,2,"value"],[479,9,515,7],[479,11,515,9,"readyStates"],[479,22,515,20],[479,23,515,21,"indexOf"],[479,30,515,28],[479,31,515,29],[479,43,515,41],[480,2,516,0],[480,3,516,1],[480,4,516,2],[482,2,518,0],[483,0,519,0],[484,0,520,0],[485,0,521,0],[486,2,522,0,"Object"],[486,8,522,6],[486,9,522,7,"defineProperty"],[486,23,522,21],[486,24,522,22,"WebSocket"],[486,33,522,31],[486,35,522,33],[486,41,522,39],[486,43,522,41],[487,4,523,2,"enumerable"],[487,14,523,12],[487,16,523,14],[487,20,523,18],[488,4,524,2,"value"],[488,9,524,7],[488,11,524,9,"readyStates"],[488,22,524,20],[488,23,524,21,"indexOf"],[488,30,524,28],[488,31,524,29],[488,37,524,35],[489,2,525,0],[489,3,525,1],[489,4,525,2],[491,2,527,0],[492,0,528,0],[493,0,529,0],[494,0,530,0],[495,2,531,0,"Object"],[495,8,531,6],[495,9,531,7,"defineProperty"],[495,23,531,21],[495,24,531,22,"WebSocket"],[495,33,531,31],[495,34,531,32,"prototype"],[495,43,531,41],[495,45,531,43],[495,51,531,49],[495,53,531,51],[496,4,532,2,"enumerable"],[496,14,532,12],[496,16,532,14],[496,20,532,18],[497,4,533,2,"value"],[497,9,533,7],[497,11,533,9,"readyStates"],[497,22,533,20],[497,23,533,21,"indexOf"],[497,30,533,28],[497,31,533,29],[497,37,533,35],[498,2,534,0],[498,3,534,1],[498,4,534,2],[500,2,536,0],[501,0,537,0],[502,0,538,0],[503,0,539,0],[504,2,540,0,"Object"],[504,8,540,6],[504,9,540,7,"defineProperty"],[504,23,540,21],[504,24,540,22,"WebSocket"],[504,33,540,31],[504,35,540,33],[504,44,540,42],[504,46,540,44],[505,4,541,2,"enumerable"],[505,14,541,12],[505,16,541,14],[505,20,541,18],[506,4,542,2,"value"],[506,9,542,7],[506,11,542,9,"readyStates"],[506,22,542,20],[506,23,542,21,"indexOf"],[506,30,542,28],[506,31,542,29],[506,40,542,38],[507,2,543,0],[507,3,543,1],[507,4,543,2],[509,2,545,0],[510,0,546,0],[511,0,547,0],[512,0,548,0],[513,2,549,0,"Object"],[513,8,549,6],[513,9,549,7,"defineProperty"],[513,23,549,21],[513,24,549,22,"WebSocket"],[513,33,549,31],[513,34,549,32,"prototype"],[513,43,549,41],[513,45,549,43],[513,54,549,52],[513,56,549,54],[514,4,550,2,"enumerable"],[514,14,550,12],[514,16,550,14],[514,20,550,18],[515,4,551,2,"value"],[515,9,551,7],[515,11,551,9,"readyStates"],[515,22,551,20],[515,23,551,21,"indexOf"],[515,30,551,28],[515,31,551,29],[515,40,551,38],[516,2,552,0],[516,3,552,1],[516,4,552,2],[518,2,554,0],[519,0,555,0],[520,0,556,0],[521,0,557,0],[522,2,558,0,"Object"],[522,8,558,6],[522,9,558,7,"defineProperty"],[522,23,558,21],[522,24,558,22,"WebSocket"],[522,33,558,31],[522,35,558,33],[522,43,558,41],[522,45,558,43],[523,4,559,2,"enumerable"],[523,14,559,12],[523,16,559,14],[523,20,559,18],[524,4,560,2,"value"],[524,9,560,7],[524,11,560,9,"readyStates"],[524,22,560,20],[524,23,560,21,"indexOf"],[524,30,560,28],[524,31,560,29],[524,39,560,37],[525,2,561,0],[525,3,561,1],[525,4,561,2],[527,2,563,0],[528,0,564,0],[529,0,565,0],[530,0,566,0],[531,2,567,0,"Object"],[531,8,567,6],[531,9,567,7,"defineProperty"],[531,23,567,21],[531,24,567,22,"WebSocket"],[531,33,567,31],[531,34,567,32,"prototype"],[531,43,567,41],[531,45,567,43],[531,53,567,51],[531,55,567,53],[532,4,568,2,"enumerable"],[532,14,568,12],[532,16,568,14],[532,20,568,18],[533,4,569,2,"value"],[533,9,569,7],[533,11,569,9,"readyStates"],[533,22,569,20],[533,23,569,21,"indexOf"],[533,30,569,28],[533,31,569,29],[533,39,569,37],[534,2,570,0],[534,3,570,1],[534,4,570,2],[535,2,572,0],[535,3,573,2],[535,15,573,14],[535,17,574,2],[535,33,574,18],[535,35,575,2],[535,47,575,14],[535,49,576,2],[535,59,576,12],[535,61,577,2],[535,71,577,12],[535,73,578,2],[535,85,578,14],[535,87,579,2],[535,92,579,7],[535,93,580,1],[535,94,580,2,"forEach"],[535,101,580,9],[535,102,580,11,"property"],[535,110,580,19],[535,114,580,24],[536,4,581,2,"Object"],[536,10,581,8],[536,11,581,9,"defineProperty"],[536,25,581,23],[536,26,581,24,"WebSocket"],[536,35,581,33],[536,36,581,34,"prototype"],[536,45,581,43],[536,47,581,45,"property"],[536,55,581,53],[536,57,581,55],[537,6,581,57,"enumerable"],[537,16,581,67],[537,18,581,69],[538,4,581,74],[538,5,581,75],[538,6,581,76],[539,2,582,0],[539,3,582,1],[539,4,582,2],[541,2,584,0],[542,2,585,0],[543,2,586,0],[544,2,587,0],[545,2,588,0],[545,3,588,1],[545,9,588,7],[545,11,588,9],[545,18,588,16],[545,20,588,18],[545,27,588,25],[545,29,588,27],[545,38,588,36],[545,39,588,37],[545,40,588,38,"forEach"],[545,47,588,45],[545,48,588,47,"method"],[545,54,588,53],[545,58,588,58],[546,4,589,2,"Object"],[546,10,589,8],[546,11,589,9,"defineProperty"],[546,25,589,23],[546,26,589,24,"WebSocket"],[546,35,589,33],[546,36,589,34,"prototype"],[546,45,589,43],[546,47,589,45],[546,52,589,50,"method"],[546,58,589,56],[546,60,589,58],[546,62,589,60],[547,6,590,4,"enumerable"],[547,16,590,14],[547,18,590,16],[547,22,590,20],[548,6,591,4,"get"],[548,9,591,7,"get"],[548,10,591,7],[548,12,591,10],[549,8,592,6],[549,13,592,11],[549,19,592,17,"listener"],[549,27,592,25],[549,31,592,29],[549,35,592,33],[549,36,592,34,"listeners"],[549,45,592,43],[549,46,592,44,"method"],[549,52,592,50],[549,53,592,51],[549,55,592,53],[550,10,593,8],[550,14,593,12,"listener"],[550,22,593,20],[550,23,593,21,"kForOnEventAttribute"],[550,43,593,41],[550,44,593,42],[550,46,593,44],[550,53,593,51,"listener"],[550,61,593,59],[550,62,593,60,"kListener"],[550,71,593,69],[550,72,593,70],[551,8,594,6],[552,8,596,6],[552,15,596,13],[552,19,596,17],[553,6,597,4],[553,7,597,5],[554,6,598,4,"set"],[554,9,598,7,"set"],[554,10,598,8,"handler"],[554,17,598,15],[554,19,598,17],[555,8,599,6],[555,13,599,11],[555,19,599,17,"listener"],[555,27,599,25],[555,31,599,29],[555,35,599,33],[555,36,599,34,"listeners"],[555,45,599,43],[555,46,599,44,"method"],[555,52,599,50],[555,53,599,51],[555,55,599,53],[556,10,600,8],[556,14,600,12,"listener"],[556,22,600,20],[556,23,600,21,"kForOnEventAttribute"],[556,43,600,41],[556,44,600,42],[556,46,600,44],[557,12,601,10],[557,16,601,14],[557,17,601,15,"removeListener"],[557,31,601,29],[557,32,601,30,"method"],[557,38,601,36],[557,40,601,38,"listener"],[557,48,601,46],[557,49,601,47],[558,12,602,10],[559,10,603,8],[560,8,604,6],[561,8,606,6],[561,12,606,10],[561,19,606,17,"handler"],[561,26,606,24],[561,31,606,29],[561,41,606,39],[561,43,606,41],[562,8,608,6],[562,12,608,10],[562,13,608,11,"addEventListener"],[562,29,608,27],[562,30,608,28,"method"],[562,36,608,34],[562,38,608,36,"handler"],[562,45,608,43],[562,47,608,45],[563,10,609,8],[563,11,609,9,"kForOnEventAttribute"],[563,31,609,29],[563,34,609,32],[564,8,610,6],[564,9,610,7],[564,10,610,8],[565,6,611,4],[566,4,612,2],[566,5,612,3],[566,6,612,4],[567,2,613,0],[567,3,613,1],[567,4,613,2],[568,2,615,0,"WebSocket"],[568,11,615,9],[568,12,615,10,"prototype"],[568,21,615,19],[568,22,615,20,"addEventListener"],[568,38,615,36],[568,41,615,39,"addEventListener"],[568,57,615,55],[569,2,616,0,"WebSocket"],[569,11,616,9],[569,12,616,10,"prototype"],[569,21,616,19],[569,22,616,20,"removeEventListener"],[569,41,616,39],[569,44,616,42,"removeEventListener"],[569,63,616,61],[570,2,618,0,"module"],[570,8,618,6],[570,9,618,7,"exports"],[570,16,618,14],[570,19,618,17,"WebSocket"],[570,28,618,26],[572,2,620,0],[573,0,621,0],[574,0,622,0],[575,0,623,0],[576,0,624,0],[577,0,625,0],[578,0,626,0],[579,0,627,0],[580,0,628,0],[581,0,629,0],[582,0,630,0],[583,0,631,0],[584,0,632,0],[585,0,633,0],[586,0,634,0],[587,0,635,0],[588,0,636,0],[589,0,637,0],[590,0,638,0],[591,0,639,0],[592,0,640,0],[593,0,641,0],[594,0,642,0],[595,0,643,0],[596,0,644,0],[597,0,645,0],[598,0,646,0],[599,0,647,0],[600,0,648,0],[601,0,649,0],[602,0,650,0],[603,0,651,0],[604,0,652,0],[605,0,653,0],[606,2,654,0],[606,11,654,9,"initAsClient"],[606,23,654,21,"initAsClient"],[606,24,654,22,"websocket"],[606,33,654,31],[606,35,654,33,"address"],[606,42,654,40],[606,44,654,42,"protocols"],[606,53,654,51],[606,55,654,53,"options"],[606,62,654,60],[606,64,654,62],[607,4,655,2],[607,10,655,8,"opts"],[607,14,655,12],[607,17,655,15],[608,6,656,4,"allowSynchronousEvents"],[608,28,656,26],[608,30,656,28],[608,34,656,32],[609,6,657,4,"autoPong"],[609,14,657,12],[609,16,657,14],[609,20,657,18],[610,6,658,4,"protocolVersion"],[610,21,658,19],[610,23,658,21,"protocolVersions"],[610,39,658,37],[610,40,658,38],[610,41,658,39],[610,42,658,40],[611,6,659,4,"maxPayload"],[611,16,659,14],[611,18,659,16],[611,21,659,19],[611,24,659,22],[611,28,659,26],[611,31,659,29],[611,35,659,33],[612,6,660,4,"skipUTF8Validation"],[612,24,660,22],[612,26,660,24],[612,31,660,29],[613,6,661,4,"perMessageDeflate"],[613,23,661,21],[613,25,661,23],[613,29,661,27],[614,6,662,4,"followRedirects"],[614,21,662,19],[614,23,662,21],[614,28,662,26],[615,6,663,4,"maxRedirects"],[615,18,663,16],[615,20,663,18],[615,22,663,20],[616,6,664,4],[616,9,664,7,"options"],[616,16,664,14],[617,6,665,4,"socketPath"],[617,16,665,14],[617,18,665,16,"undefined"],[617,27,665,25],[618,6,666,4,"hostname"],[618,14,666,12],[618,16,666,14,"undefined"],[618,25,666,23],[619,6,667,4,"protocol"],[619,14,667,12],[619,16,667,14,"undefined"],[619,25,667,23],[620,6,668,4,"timeout"],[620,13,668,11],[620,15,668,13,"undefined"],[620,24,668,22],[621,6,669,4,"method"],[621,12,669,10],[621,14,669,12],[621,19,669,17],[622,6,670,4,"host"],[622,10,670,8],[622,12,670,10,"undefined"],[622,21,670,19],[623,6,671,4,"path"],[623,10,671,8],[623,12,671,10,"undefined"],[623,21,671,19],[624,6,672,4,"port"],[624,10,672,8],[624,12,672,10,"undefined"],[625,4,673,2],[625,5,673,3],[626,4,675,2,"websocket"],[626,13,675,11],[626,14,675,12,"_autoPong"],[626,23,675,21],[626,26,675,24,"opts"],[626,30,675,28],[626,31,675,29,"autoPong"],[626,39,675,37],[627,4,677,2],[627,8,677,6],[627,9,677,7,"protocolVersions"],[627,25,677,23],[627,26,677,24,"includes"],[627,34,677,32],[627,35,677,33,"opts"],[627,39,677,37],[627,40,677,38,"protocolVersion"],[627,55,677,53],[627,56,677,54],[627,58,677,56],[628,6,678,4],[628,12,678,10],[628,16,678,14,"RangeError"],[628,26,678,24],[628,27,679,6],[628,60,679,39,"opts"],[628,64,679,43],[628,65,679,44,"protocolVersion"],[628,80,679,59],[628,83,679,62],[628,86,680,8],[628,110,680,32,"protocolVersions"],[628,126,680,48],[628,127,680,49,"join"],[628,131,680,53],[628,132,680,54],[628,136,680,58],[628,137,680,59],[628,140,681,4],[628,141,681,5],[629,4,682,2],[630,4,684,2],[630,8,684,6,"parsedUrl"],[630,17,684,15],[631,4,686,2],[631,8,686,6,"address"],[631,15,686,13],[631,27,686,25,"URL"],[631,30,686,28],[631,32,686,30],[632,6,687,4,"parsedUrl"],[632,15,687,13],[632,18,687,16,"address"],[632,25,687,23],[633,4,688,2],[633,5,688,3],[633,11,688,9],[634,6,689,4],[634,10,689,8],[635,8,690,6,"parsedUrl"],[635,17,690,15],[635,20,690,18],[635,24,690,22,"URL"],[635,27,690,25],[635,28,690,26,"address"],[635,35,690,33],[635,36,690,34],[636,6,691,4],[636,7,691,5],[636,8,691,6],[636,15,691,13,"e"],[636,16,691,14],[636,18,691,16],[637,8,692,6],[637,14,692,12],[637,18,692,16,"SyntaxError"],[637,29,692,27],[637,30,692,28],[637,46,692,44,"address"],[637,53,692,51],[637,55,692,53],[637,56,692,54],[638,6,693,4],[639,4,694,2],[640,4,696,2],[640,8,696,6,"parsedUrl"],[640,17,696,15],[640,18,696,16,"protocol"],[640,26,696,24],[640,31,696,29],[640,38,696,36],[640,40,696,38],[641,6,697,4,"parsedUrl"],[641,15,697,13],[641,16,697,14,"protocol"],[641,24,697,22],[641,27,697,25],[641,32,697,30],[642,4,698,2],[642,5,698,3],[642,11,698,9],[642,15,698,13,"parsedUrl"],[642,24,698,22],[642,25,698,23,"protocol"],[642,33,698,31],[642,38,698,36],[642,46,698,44],[642,48,698,46],[643,6,699,4,"parsedUrl"],[643,15,699,13],[643,16,699,14,"protocol"],[643,24,699,22],[643,27,699,25],[643,33,699,31],[644,4,700,2],[645,4,702,2,"websocket"],[645,13,702,11],[645,14,702,12,"_url"],[645,18,702,16],[645,21,702,19,"parsedUrl"],[645,30,702,28],[645,31,702,29,"href"],[645,35,702,33],[646,4,704,2],[646,10,704,8,"isSecure"],[646,18,704,16],[646,21,704,19,"parsedUrl"],[646,30,704,28],[646,31,704,29,"protocol"],[646,39,704,37],[646,44,704,42],[646,50,704,48],[647,4,705,2],[647,10,705,8,"isIpcUrl"],[647,18,705,16],[647,21,705,19,"parsedUrl"],[647,30,705,28],[647,31,705,29,"protocol"],[647,39,705,37],[647,44,705,42],[647,54,705,52],[648,4,706,2],[648,8,706,6,"invalidUrlMessage"],[648,25,706,23],[649,4,708,2],[649,8,708,6,"parsedUrl"],[649,17,708,15],[649,18,708,16,"protocol"],[649,26,708,24],[649,31,708,29],[649,36,708,34],[649,40,708,38],[649,41,708,39,"isSecure"],[649,49,708,47],[649,53,708,51],[649,54,708,52,"isIpcUrl"],[649,62,708,60],[649,64,708,62],[650,6,709,4,"invalidUrlMessage"],[650,23,709,21],[650,26,710,6],[650,78,710,58],[650,81,711,6],[650,115,711,40],[651,4,712,2],[651,5,712,3],[651,11,712,9],[651,15,712,13,"isIpcUrl"],[651,23,712,21],[651,27,712,25],[651,28,712,26,"parsedUrl"],[651,37,712,35],[651,38,712,36,"pathname"],[651,46,712,44],[651,48,712,46],[652,6,713,4,"invalidUrlMessage"],[652,23,713,21],[652,26,713,24],[652,55,713,53],[653,4,714,2],[653,5,714,3],[653,11,714,9],[653,15,714,13,"parsedUrl"],[653,24,714,22],[653,25,714,23,"hash"],[653,29,714,27],[653,31,714,29],[654,6,715,4,"invalidUrlMessage"],[654,23,715,21],[654,26,715,24],[654,66,715,64],[655,4,716,2],[656,4,718,2],[656,8,718,6,"invalidUrlMessage"],[656,25,718,23],[656,27,718,25],[657,6,719,4],[657,12,719,10,"err"],[657,15,719,13],[657,18,719,16],[657,22,719,20,"SyntaxError"],[657,33,719,31],[657,34,719,32,"invalidUrlMessage"],[657,51,719,49],[657,52,719,50],[658,6,721,4],[658,10,721,8,"websocket"],[658,19,721,17],[658,20,721,18,"_redirects"],[658,30,721,28],[658,35,721,33],[658,36,721,34],[658,38,721,36],[659,8,722,6],[659,14,722,12,"err"],[659,17,722,15],[660,6,723,4],[660,7,723,5],[660,13,723,11],[661,8,724,6,"emitErrorAndClose"],[661,25,724,23],[661,26,724,24,"websocket"],[661,35,724,33],[661,37,724,35,"err"],[661,40,724,38],[661,41,724,39],[662,8,725,6],[663,6,726,4],[664,4,727,2],[665,4,729,2],[665,10,729,8,"defaultPort"],[665,21,729,19],[665,24,729,22,"isSecure"],[665,32,729,30],[665,35,729,33],[665,38,729,36],[665,41,729,39],[665,43,729,41],[666,4,730,2],[666,10,730,8,"key"],[666,13,730,11],[666,16,730,14,"randomBytes"],[666,27,730,25],[666,28,730,26],[666,30,730,28],[666,31,730,29],[666,32,730,30,"toString"],[666,40,730,38],[666,41,730,39],[666,49,730,47],[666,50,730,48],[667,4,731,2],[667,10,731,8,"request"],[667,17,731,15],[667,20,731,18,"isSecure"],[667,28,731,26],[667,31,731,29,"https"],[667,36,731,34],[667,37,731,35,"request"],[667,44,731,42],[667,47,731,45,"http"],[667,51,731,49],[667,52,731,50,"request"],[667,59,731,57],[668,4,732,2],[668,10,732,8,"protocolSet"],[668,21,732,19],[668,24,732,22],[668,28,732,26,"Set"],[668,31,732,29],[668,32,732,30],[668,33,732,31],[669,4,733,2],[669,8,733,6,"perMessageDeflate"],[669,25,733,23],[670,4,735,2,"opts"],[670,8,735,6],[670,9,735,7,"createConnection"],[670,25,735,23],[670,28,736,4,"opts"],[670,32,736,8],[670,33,736,9,"createConnection"],[670,49,736,25],[670,54,736,30,"isSecure"],[670,62,736,38],[670,65,736,41,"tlsConnect"],[670,75,736,51],[670,78,736,54,"netConnect"],[670,88,736,64],[670,89,736,65],[671,4,737,2,"opts"],[671,8,737,6],[671,9,737,7,"defaultPort"],[671,20,737,18],[671,23,737,21,"opts"],[671,27,737,25],[671,28,737,26,"defaultPort"],[671,39,737,37],[671,43,737,41,"defaultPort"],[671,54,737,52],[672,4,738,2,"opts"],[672,8,738,6],[672,9,738,7,"port"],[672,13,738,11],[672,16,738,14,"parsedUrl"],[672,25,738,23],[672,26,738,24,"port"],[672,30,738,28],[672,34,738,32,"defaultPort"],[672,45,738,43],[673,4,739,2,"opts"],[673,8,739,6],[673,9,739,7,"host"],[673,13,739,11],[673,16,739,14,"parsedUrl"],[673,25,739,23],[673,26,739,24,"hostname"],[673,34,739,32],[673,35,739,33,"startsWith"],[673,45,739,43],[673,46,739,44],[673,49,739,47],[673,50,739,48],[673,53,740,6,"parsedUrl"],[673,62,740,15],[673,63,740,16,"hostname"],[673,71,740,24],[673,72,740,25,"slice"],[673,77,740,30],[673,78,740,31],[673,79,740,32],[673,81,740,34],[673,82,740,35],[673,83,740,36],[673,84,740,37],[673,87,741,6,"parsedUrl"],[673,96,741,15],[673,97,741,16,"hostname"],[673,105,741,24],[674,4,742,2,"opts"],[674,8,742,6],[674,9,742,7,"headers"],[674,16,742,14],[674,19,742,17],[675,6,743,4],[675,9,743,7,"opts"],[675,13,743,11],[675,14,743,12,"headers"],[675,21,743,19],[676,6,744,4],[676,29,744,27],[676,31,744,29,"opts"],[676,35,744,33],[676,36,744,34,"protocolVersion"],[676,51,744,49],[677,6,745,4],[677,25,745,23],[677,27,745,25,"key"],[677,30,745,28],[678,6,746,4,"Connection"],[678,16,746,14],[678,18,746,16],[678,27,746,25],[679,6,747,4,"Upgrade"],[679,13,747,11],[679,15,747,13],[680,4,748,2],[680,5,748,3],[681,4,749,2,"opts"],[681,8,749,6],[681,9,749,7,"path"],[681,13,749,11],[681,16,749,14,"parsedUrl"],[681,25,749,23],[681,26,749,24,"pathname"],[681,34,749,32],[681,37,749,35,"parsedUrl"],[681,46,749,44],[681,47,749,45,"search"],[681,53,749,51],[682,4,750,2,"opts"],[682,8,750,6],[682,9,750,7,"timeout"],[682,16,750,14],[682,19,750,17,"opts"],[682,23,750,21],[682,24,750,22,"handshakeTimeout"],[682,40,750,38],[683,4,752,2],[683,8,752,6,"opts"],[683,12,752,10],[683,13,752,11,"perMessageDeflate"],[683,30,752,28],[683,32,752,30],[684,6,753,4,"perMessageDeflate"],[684,23,753,21],[684,26,753,24],[684,30,753,28,"PerMessageDeflate"],[684,47,753,45],[684,48,754,6,"opts"],[684,52,754,10],[684,53,754,11,"perMessageDeflate"],[684,70,754,28],[684,75,754,33],[684,79,754,37],[684,82,754,40,"opts"],[684,86,754,44],[684,87,754,45,"perMessageDeflate"],[684,104,754,62],[684,107,754,65],[684,108,754,66],[684,109,754,67],[684,111,755,6],[684,116,755,11],[684,118,756,6,"opts"],[684,122,756,10],[684,123,756,11,"maxPayload"],[684,133,757,4],[684,134,757,5],[685,6,758,4,"opts"],[685,10,758,8],[685,11,758,9,"headers"],[685,18,758,16],[685,19,758,17],[685,45,758,43],[685,46,758,44],[685,49,758,47,"format"],[685,55,758,53],[685,56,758,54],[686,8,759,6],[686,9,759,7,"PerMessageDeflate"],[686,26,759,24],[686,27,759,25,"extensionName"],[686,40,759,38],[686,43,759,41,"perMessageDeflate"],[686,60,759,58],[686,61,759,59,"offer"],[686,66,759,64],[686,67,759,65],[687,6,760,4],[687,7,760,5],[687,8,760,6],[688,4,761,2],[689,4,762,2],[689,8,762,6,"protocols"],[689,17,762,15],[689,18,762,16,"length"],[689,24,762,22],[689,26,762,24],[690,6,763,4],[690,11,763,9],[690,17,763,15,"protocol"],[690,25,763,23],[690,29,763,27,"protocols"],[690,38,763,36],[690,40,763,38],[691,8,764,6],[691,12,765,8],[691,19,765,15,"protocol"],[691,27,765,23],[691,32,765,28],[691,40,765,36],[691,44,766,8],[691,45,766,9,"subprotocolRegex"],[691,61,766,25],[691,62,766,26,"test"],[691,66,766,30],[691,67,766,31,"protocol"],[691,75,766,39],[691,76,766,40],[691,80,767,8,"protocolSet"],[691,91,767,19],[691,92,767,20,"has"],[691,95,767,23],[691,96,767,24,"protocol"],[691,104,767,32],[691,105,767,33],[691,107,768,8],[692,10,769,8],[692,16,769,14],[692,20,769,18,"SyntaxError"],[692,31,769,29],[692,32,770,10],[692,84,771,8],[692,85,771,9],[693,8,772,6],[694,8,774,6,"protocolSet"],[694,19,774,17],[694,20,774,18,"add"],[694,23,774,21],[694,24,774,22,"protocol"],[694,32,774,30],[694,33,774,31],[695,6,775,4],[696,6,777,4,"opts"],[696,10,777,8],[696,11,777,9,"headers"],[696,18,777,16],[696,19,777,17],[696,43,777,41],[696,44,777,42],[696,47,777,45,"protocols"],[696,56,777,54],[696,57,777,55,"join"],[696,61,777,59],[696,62,777,60],[696,65,777,63],[696,66,777,64],[697,4,778,2],[698,4,779,2],[698,8,779,6,"opts"],[698,12,779,10],[698,13,779,11,"origin"],[698,19,779,17],[698,21,779,19],[699,6,780,4],[699,10,780,8,"opts"],[699,14,780,12],[699,15,780,13,"protocolVersion"],[699,30,780,28],[699,33,780,31],[699,35,780,33],[699,37,780,35],[700,8,781,6,"opts"],[700,12,781,10],[700,13,781,11,"headers"],[700,20,781,18],[700,21,781,19],[700,43,781,41],[700,44,781,42],[700,47,781,45,"opts"],[700,51,781,49],[700,52,781,50,"origin"],[700,58,781,56],[701,6,782,4],[701,7,782,5],[701,13,782,11],[702,8,783,6,"opts"],[702,12,783,10],[702,13,783,11,"headers"],[702,20,783,18],[702,21,783,19,"Origin"],[702,27,783,25],[702,30,783,28,"opts"],[702,34,783,32],[702,35,783,33,"origin"],[702,41,783,39],[703,6,784,4],[704,4,785,2],[705,4,786,2],[705,8,786,6,"parsedUrl"],[705,17,786,15],[705,18,786,16,"username"],[705,26,786,24],[705,30,786,28,"parsedUrl"],[705,39,786,37],[705,40,786,38,"password"],[705,48,786,46],[705,50,786,48],[706,6,787,4,"opts"],[706,10,787,8],[706,11,787,9,"auth"],[706,15,787,13],[706,18,787,16],[706,21,787,19,"parsedUrl"],[706,30,787,28],[706,31,787,29,"username"],[706,39,787,37],[706,43,787,41,"parsedUrl"],[706,52,787,50],[706,53,787,51,"password"],[706,61,787,59],[706,63,787,61],[707,4,788,2],[708,4,790,2],[708,8,790,6,"isIpcUrl"],[708,16,790,14],[708,18,790,16],[709,6,791,4],[709,12,791,10,"parts"],[709,17,791,15],[709,20,791,18,"opts"],[709,24,791,22],[709,25,791,23,"path"],[709,29,791,27],[709,30,791,28,"split"],[709,35,791,33],[709,36,791,34],[709,39,791,37],[709,40,791,38],[710,6,793,4,"opts"],[710,10,793,8],[710,11,793,9,"socketPath"],[710,21,793,19],[710,24,793,22,"parts"],[710,29,793,27],[710,30,793,28],[710,31,793,29],[710,32,793,30],[711,6,794,4,"opts"],[711,10,794,8],[711,11,794,9,"path"],[711,15,794,13],[711,18,794,16,"parts"],[711,23,794,21],[711,24,794,22],[711,25,794,23],[711,26,794,24],[712,4,795,2],[713,4,797,2],[713,8,797,6,"req"],[713,11,797,9],[714,4,799,2],[714,8,799,6,"opts"],[714,12,799,10],[714,13,799,11,"followRedirects"],[714,28,799,26],[714,30,799,28],[715,6,800,4],[715,10,800,8,"websocket"],[715,19,800,17],[715,20,800,18,"_redirects"],[715,30,800,28],[715,35,800,33],[715,36,800,34],[715,38,800,36],[716,8,801,6,"websocket"],[716,17,801,15],[716,18,801,16,"_originalIpc"],[716,30,801,28],[716,33,801,31,"isIpcUrl"],[716,41,801,39],[717,8,802,6,"websocket"],[717,17,802,15],[717,18,802,16,"_originalSecure"],[717,33,802,31],[717,36,802,34,"isSecure"],[717,44,802,42],[718,8,803,6,"websocket"],[718,17,803,15],[718,18,803,16,"_originalHostOrSocketPath"],[718,43,803,41],[718,46,803,44,"isIpcUrl"],[718,54,803,52],[718,57,804,10,"opts"],[718,61,804,14],[718,62,804,15,"socketPath"],[718,72,804,25],[718,75,805,10,"parsedUrl"],[718,84,805,19],[718,85,805,20,"host"],[718,89,805,24],[719,8,807,6],[719,14,807,12,"headers"],[719,21,807,19],[719,24,807,22,"options"],[719,31,807,29],[719,35,807,33,"options"],[719,42,807,40],[719,43,807,41,"headers"],[719,50,807,48],[721,8,809,6],[722,8,810,6],[723,8,811,6],[724,8,812,6],[725,8,813,6,"options"],[725,15,813,13],[725,18,813,16],[726,10,813,18],[726,13,813,21,"options"],[726,20,813,28],[727,10,813,30,"headers"],[727,17,813,37],[727,19,813,39],[727,20,813,40],[728,8,813,42],[728,9,813,43],[729,8,815,6],[729,12,815,10,"headers"],[729,19,815,17],[729,21,815,19],[730,10,816,8],[730,15,816,13],[730,21,816,19],[730,22,816,20,"key"],[730,25,816,23],[730,27,816,25,"value"],[730,32,816,30],[730,33,816,31],[730,37,816,35,"Object"],[730,43,816,41],[730,44,816,42,"entries"],[730,51,816,49],[730,52,816,50,"headers"],[730,59,816,57],[730,60,816,58],[730,62,816,60],[731,12,817,10,"options"],[731,19,817,17],[731,20,817,18,"headers"],[731,27,817,25],[731,28,817,26,"key"],[731,31,817,29],[731,32,817,30,"toLowerCase"],[731,43,817,41],[731,44,817,42],[731,45,817,43],[731,46,817,44],[731,49,817,47,"value"],[731,54,817,52],[732,10,818,8],[733,8,819,6],[734,6,820,4],[734,7,820,5],[734,13,820,11],[734,17,820,15,"websocket"],[734,26,820,24],[734,27,820,25,"listenerCount"],[734,40,820,38],[734,41,820,39],[734,51,820,49],[734,52,820,50],[734,57,820,55],[734,58,820,56],[734,60,820,58],[735,8,821,6],[735,14,821,12,"isSameHost"],[735,24,821,22],[735,27,821,25,"isIpcUrl"],[735,35,821,33],[735,38,822,10,"websocket"],[735,47,822,19],[735,48,822,20,"_originalIpc"],[735,60,822,32],[735,63,823,12,"opts"],[735,67,823,16],[735,68,823,17,"socketPath"],[735,78,823,27],[735,83,823,32,"websocket"],[735,92,823,41],[735,93,823,42,"_originalHostOrSocketPath"],[735,118,823,67],[735,121,824,12],[735,126,824,17],[735,129,825,10,"websocket"],[735,138,825,19],[735,139,825,20,"_originalIpc"],[735,151,825,32],[735,154,826,12],[735,159,826,17],[735,162,827,12,"parsedUrl"],[735,171,827,21],[735,172,827,22,"host"],[735,176,827,26],[735,181,827,31,"websocket"],[735,190,827,40],[735,191,827,41,"_originalHostOrSocketPath"],[735,216,827,66],[736,8,829,6],[736,12,829,10],[736,13,829,11,"isSameHost"],[736,23,829,21],[736,27,829,26,"websocket"],[736,36,829,35],[736,37,829,36,"_originalSecure"],[736,52,829,51],[736,56,829,55],[736,57,829,56,"isSecure"],[736,65,829,65],[736,67,829,67],[737,10,830,8],[738,10,831,8],[739,10,832,8],[740,10,833,8],[741,10,834,8],[741,17,834,15,"opts"],[741,21,834,19],[741,22,834,20,"headers"],[741,29,834,27],[741,30,834,28,"authorization"],[741,43,834,41],[742,10,835,8],[742,17,835,15,"opts"],[742,21,835,19],[742,22,835,20,"headers"],[742,29,835,27],[742,30,835,28,"cookie"],[742,36,835,34],[743,10,837,8],[743,14,837,12],[743,15,837,13,"isSameHost"],[743,25,837,23],[743,27,837,25],[743,34,837,32,"opts"],[743,38,837,36],[743,39,837,37,"headers"],[743,46,837,44],[743,47,837,45,"host"],[743,51,837,49],[744,10,839,8,"opts"],[744,14,839,12],[744,15,839,13,"auth"],[744,19,839,17],[744,22,839,20,"undefined"],[744,31,839,29],[745,8,840,6],[746,6,841,4],[748,6,843,4],[749,6,844,4],[750,6,845,4],[751,6,846,4],[752,6,847,4],[753,6,848,4],[753,10,848,8,"opts"],[753,14,848,12],[753,15,848,13,"auth"],[753,19,848,17],[753,23,848,21],[753,24,848,22,"options"],[753,31,848,29],[753,32,848,30,"headers"],[753,39,848,37],[753,40,848,38,"authorization"],[753,53,848,51],[753,55,848,53],[754,8,849,6,"options"],[754,15,849,13],[754,16,849,14,"headers"],[754,23,849,21],[754,24,849,22,"authorization"],[754,37,849,35],[754,40,850,8],[754,48,850,16],[754,51,850,19,"Buffer"],[754,57,850,25],[754,58,850,26,"from"],[754,62,850,30],[754,63,850,31,"opts"],[754,67,850,35],[754,68,850,36,"auth"],[754,72,850,40],[754,73,850,41],[754,74,850,42,"toString"],[754,82,850,50],[754,83,850,51],[754,91,850,59],[754,92,850,60],[755,6,851,4],[756,6,853,4,"req"],[756,9,853,7],[756,12,853,10,"websocket"],[756,21,853,19],[756,22,853,20,"_req"],[756,26,853,24],[756,29,853,27,"request"],[756,36,853,34],[756,37,853,35,"opts"],[756,41,853,39],[756,42,853,40],[757,6,855,4],[757,10,855,8,"websocket"],[757,19,855,17],[757,20,855,18,"_redirects"],[757,30,855,28],[757,32,855,30],[758,8,856,6],[759,8,857,6],[760,8,858,6],[761,8,859,6],[762,8,860,6],[763,8,861,6],[764,8,862,6],[765,8,863,6],[766,8,864,6],[767,8,865,6,"websocket"],[767,17,865,15],[767,18,865,16,"emit"],[767,22,865,20],[767,23,865,21],[767,33,865,31],[767,35,865,33,"websocket"],[767,44,865,42],[767,45,865,43,"url"],[767,48,865,46],[767,50,865,48,"req"],[767,53,865,51],[767,54,865,52],[768,6,866,4],[769,4,867,2],[769,5,867,3],[769,11,867,9],[770,6,868,4,"req"],[770,9,868,7],[770,12,868,10,"websocket"],[770,21,868,19],[770,22,868,20,"_req"],[770,26,868,24],[770,29,868,27,"request"],[770,36,868,34],[770,37,868,35,"opts"],[770,41,868,39],[770,42,868,40],[771,4,869,2],[772,4,871,2],[772,8,871,6,"opts"],[772,12,871,10],[772,13,871,11,"timeout"],[772,20,871,18],[772,22,871,20],[773,6,872,4,"req"],[773,9,872,7],[773,10,872,8,"on"],[773,12,872,10],[773,13,872,11],[773,22,872,20],[773,24,872,22],[773,30,872,28],[774,8,873,6,"abortHandshake"],[774,22,873,20],[774,23,873,21,"websocket"],[774,32,873,30],[774,34,873,32,"req"],[774,37,873,35],[774,39,873,37],[774,72,873,70],[774,73,873,71],[775,6,874,4],[775,7,874,5],[775,8,874,6],[776,4,875,2],[777,4,877,2,"req"],[777,7,877,5],[777,8,877,6,"on"],[777,10,877,8],[777,11,877,9],[777,18,877,16],[777,20,877,19,"err"],[777,23,877,22],[777,27,877,27],[778,6,878,4],[778,10,878,8,"req"],[778,13,878,11],[778,18,878,16],[778,22,878,20],[778,26,878,24,"req"],[778,29,878,27],[778,30,878,28,"kAborted"],[778,38,878,36],[778,39,878,37],[778,41,878,39],[779,6,880,4,"req"],[779,9,880,7],[779,12,880,10,"websocket"],[779,21,880,19],[779,22,880,20,"_req"],[779,26,880,24],[779,29,880,27],[779,33,880,31],[780,6,881,4,"emitErrorAndClose"],[780,23,881,21],[780,24,881,22,"websocket"],[780,33,881,31],[780,35,881,33,"err"],[780,38,881,36],[780,39,881,37],[781,4,882,2],[781,5,882,3],[781,6,882,4],[782,4,884,2,"req"],[782,7,884,5],[782,8,884,6,"on"],[782,10,884,8],[782,11,884,9],[782,21,884,19],[782,23,884,22,"res"],[782,26,884,25],[782,30,884,30],[783,6,885,4],[783,12,885,10,"location"],[783,20,885,18],[783,23,885,21,"res"],[783,26,885,24],[783,27,885,25,"headers"],[783,34,885,32],[783,35,885,33,"location"],[783,43,885,41],[784,6,886,4],[784,12,886,10,"statusCode"],[784,22,886,20],[784,25,886,23,"res"],[784,28,886,26],[784,29,886,27,"statusCode"],[784,39,886,37],[785,6,888,4],[785,10,889,6,"location"],[785,18,889,14],[785,22,890,6,"opts"],[785,26,890,10],[785,27,890,11,"followRedirects"],[785,42,890,26],[785,46,891,6,"statusCode"],[785,56,891,16],[785,60,891,20],[785,63,891,23],[785,67,892,6,"statusCode"],[785,77,892,16],[785,80,892,19],[785,83,892,22],[785,85,893,6],[786,8,894,6],[786,12,894,10],[786,14,894,12,"websocket"],[786,23,894,21],[786,24,894,22,"_redirects"],[786,34,894,32],[786,37,894,35,"opts"],[786,41,894,39],[786,42,894,40,"maxRedirects"],[786,54,894,52],[786,56,894,54],[787,10,895,8,"abortHandshake"],[787,24,895,22],[787,25,895,23,"websocket"],[787,34,895,32],[787,36,895,34,"req"],[787,39,895,37],[787,41,895,39],[787,69,895,67],[787,70,895,68],[788,10,896,8],[789,8,897,6],[790,8,899,6,"req"],[790,11,899,9],[790,12,899,10,"abort"],[790,17,899,15],[790,18,899,16],[790,19,899,17],[791,8,901,6],[791,12,901,10,"addr"],[791,16,901,14],[792,8,903,6],[792,12,903,10],[793,10,904,8,"addr"],[793,14,904,12],[793,17,904,15],[793,21,904,19,"URL"],[793,24,904,22],[793,25,904,23,"location"],[793,33,904,31],[793,35,904,33,"address"],[793,42,904,40],[793,43,904,41],[794,8,905,6],[794,9,905,7],[794,10,905,8],[794,17,905,15,"e"],[794,18,905,16],[794,20,905,18],[795,10,906,8],[795,16,906,14,"err"],[795,19,906,17],[795,22,906,20],[795,26,906,24,"SyntaxError"],[795,37,906,35],[795,38,906,36],[795,54,906,52,"location"],[795,62,906,60],[795,64,906,62],[795,65,906,63],[796,10,907,8,"emitErrorAndClose"],[796,27,907,25],[796,28,907,26,"websocket"],[796,37,907,35],[796,39,907,37,"err"],[796,42,907,40],[796,43,907,41],[797,10,908,8],[798,8,909,6],[799,8,911,6,"initAsClient"],[799,20,911,18],[799,21,911,19,"websocket"],[799,30,911,28],[799,32,911,30,"addr"],[799,36,911,34],[799,38,911,36,"protocols"],[799,47,911,45],[799,49,911,47,"options"],[799,56,911,54],[799,57,911,55],[800,6,912,4],[800,7,912,5],[800,13,912,11],[800,17,912,15],[800,18,912,16,"websocket"],[800,27,912,25],[800,28,912,26,"emit"],[800,32,912,30],[800,33,912,31],[800,54,912,52],[800,56,912,54,"req"],[800,59,912,57],[800,61,912,59,"res"],[800,64,912,62],[800,65,912,63],[800,67,912,65],[801,8,913,6,"abortHandshake"],[801,22,913,20],[801,23,914,8,"websocket"],[801,32,914,17],[801,34,915,8,"req"],[801,37,915,11],[801,39,916,8],[801,70,916,39,"res"],[801,73,916,42],[801,74,916,43,"statusCode"],[801,84,916,53],[801,86,917,6],[801,87,917,7],[802,6,918,4],[803,4,919,2],[803,5,919,3],[803,6,919,4],[804,4,921,2,"req"],[804,7,921,5],[804,8,921,6,"on"],[804,10,921,8],[804,11,921,9],[804,20,921,18],[804,22,921,20],[804,23,921,21,"res"],[804,26,921,24],[804,28,921,26,"socket"],[804,34,921,32],[804,36,921,34,"head"],[804,40,921,38],[804,45,921,43],[805,6,922,4,"websocket"],[805,15,922,13],[805,16,922,14,"emit"],[805,20,922,18],[805,21,922,19],[805,30,922,28],[805,32,922,30,"res"],[805,35,922,33],[805,36,922,34],[807,6,924,4],[808,6,925,4],[809,6,926,4],[810,6,927,4],[811,6,928,4],[811,10,928,8,"websocket"],[811,19,928,17],[811,20,928,18,"readyState"],[811,30,928,28],[811,35,928,33,"WebSocket"],[811,44,928,42],[811,45,928,43,"CONNECTING"],[811,55,928,53],[811,57,928,55],[812,6,930,4,"req"],[812,9,930,7],[812,12,930,10,"websocket"],[812,21,930,19],[812,22,930,20,"_req"],[812,26,930,24],[812,29,930,27],[812,33,930,31],[813,6,932,4],[813,12,932,10,"upgrade"],[813,19,932,17],[813,22,932,20,"res"],[813,25,932,23],[813,26,932,24,"headers"],[813,33,932,31],[813,34,932,32,"upgrade"],[813,41,932,39],[814,6,934,4],[814,10,934,8,"upgrade"],[814,17,934,15],[814,22,934,20,"undefined"],[814,31,934,29],[814,35,934,33,"upgrade"],[814,42,934,40],[814,43,934,41,"toLowerCase"],[814,54,934,52],[814,55,934,53],[814,56,934,54],[814,61,934,59],[814,72,934,70],[814,74,934,72],[815,8,935,6,"abortHandshake"],[815,22,935,20],[815,23,935,21,"websocket"],[815,32,935,30],[815,34,935,32,"socket"],[815,40,935,38],[815,42,935,40],[815,66,935,64],[815,67,935,65],[816,8,936,6],[817,6,937,4],[818,6,939,4],[818,12,939,10,"digest"],[818,18,939,16],[818,21,939,19,"createHash"],[818,31,939,29],[818,32,939,30],[818,38,939,36],[818,39,939,37],[818,40,940,7,"update"],[818,46,940,13],[818,47,940,14,"key"],[818,50,940,17],[818,53,940,20,"GUID"],[818,57,940,24],[818,58,940,25],[818,59,941,7,"digest"],[818,65,941,13],[818,66,941,14],[818,74,941,22],[818,75,941,23],[819,6,943,4],[819,10,943,8,"res"],[819,13,943,11],[819,14,943,12,"headers"],[819,21,943,19],[819,22,943,20],[819,44,943,42],[819,45,943,43],[819,50,943,48,"digest"],[819,56,943,54],[819,58,943,56],[820,8,944,6,"abortHandshake"],[820,22,944,20],[820,23,944,21,"websocket"],[820,32,944,30],[820,34,944,32,"socket"],[820,40,944,38],[820,42,944,40],[820,79,944,77],[820,80,944,78],[821,8,945,6],[822,6,946,4],[823,6,948,4],[823,12,948,10,"serverProt"],[823,22,948,20],[823,25,948,23,"res"],[823,28,948,26],[823,29,948,27,"headers"],[823,36,948,34],[823,37,948,35],[823,61,948,59],[823,62,948,60],[824,6,949,4],[824,10,949,8,"protError"],[824,19,949,17],[825,6,951,4],[825,10,951,8,"serverProt"],[825,20,951,18],[825,25,951,23,"undefined"],[825,34,951,32],[825,36,951,34],[826,8,952,6],[826,12,952,10],[826,13,952,11,"protocolSet"],[826,24,952,22],[826,25,952,23,"size"],[826,29,952,27],[826,31,952,29],[827,10,953,8,"protError"],[827,19,953,17],[827,22,953,20],[827,72,953,70],[828,8,954,6],[828,9,954,7],[828,15,954,13],[828,19,954,17],[828,20,954,18,"protocolSet"],[828,31,954,29],[828,32,954,30,"has"],[828,35,954,33],[828,36,954,34,"serverProt"],[828,46,954,44],[828,47,954,45],[828,49,954,47],[829,10,955,8,"protError"],[829,19,955,17],[829,22,955,20],[829,58,955,56],[830,8,956,6],[831,6,957,4],[831,7,957,5],[831,13,957,11],[831,17,957,15,"protocolSet"],[831,28,957,26],[831,29,957,27,"size"],[831,33,957,31],[831,35,957,33],[832,8,958,6,"protError"],[832,17,958,15],[832,20,958,18],[832,48,958,46],[833,6,959,4],[834,6,961,4],[834,10,961,8,"protError"],[834,19,961,17],[834,21,961,19],[835,8,962,6,"abortHandshake"],[835,22,962,20],[835,23,962,21,"websocket"],[835,32,962,30],[835,34,962,32,"socket"],[835,40,962,38],[835,42,962,40,"protError"],[835,51,962,49],[835,52,962,50],[836,8,963,6],[837,6,964,4],[838,6,966,4],[838,10,966,8,"serverProt"],[838,20,966,18],[838,22,966,20,"websocket"],[838,31,966,29],[838,32,966,30,"_protocol"],[838,41,966,39],[838,44,966,42,"serverProt"],[838,54,966,52],[839,6,968,4],[839,12,968,10,"secWebSocketExtensions"],[839,34,968,32],[839,37,968,35,"res"],[839,40,968,38],[839,41,968,39,"headers"],[839,48,968,46],[839,49,968,47],[839,75,968,73],[839,76,968,74],[840,6,970,4],[840,10,970,8,"secWebSocketExtensions"],[840,32,970,30],[840,37,970,35,"undefined"],[840,46,970,44],[840,48,970,46],[841,8,971,6],[841,12,971,10],[841,13,971,11,"perMessageDeflate"],[841,30,971,28],[841,32,971,30],[842,10,972,8],[842,16,972,14,"message"],[842,23,972,21],[842,26,973,10],[842,91,973,75],[842,94,974,10],[842,109,974,25],[843,10,975,8,"abortHandshake"],[843,24,975,22],[843,25,975,23,"websocket"],[843,34,975,32],[843,36,975,34,"socket"],[843,42,975,40],[843,44,975,42,"message"],[843,51,975,49],[843,52,975,50],[844,10,976,8],[845,8,977,6],[846,8,979,6],[846,12,979,10,"extensions"],[846,22,979,20],[847,8,981,6],[847,12,981,10],[848,10,982,8,"extensions"],[848,20,982,18],[848,23,982,21,"parse"],[848,28,982,26],[848,29,982,27,"secWebSocketExtensions"],[848,51,982,49],[848,52,982,50],[849,8,983,6],[849,9,983,7],[849,10,983,8],[849,17,983,15,"err"],[849,20,983,18],[849,22,983,20],[850,10,984,8],[850,16,984,14,"message"],[850,23,984,21],[850,26,984,24],[850,67,984,65],[851,10,985,8,"abortHandshake"],[851,24,985,22],[851,25,985,23,"websocket"],[851,34,985,32],[851,36,985,34,"socket"],[851,42,985,40],[851,44,985,42,"message"],[851,51,985,49],[851,52,985,50],[852,10,986,8],[853,8,987,6],[854,8,989,6],[854,14,989,12,"extensionNames"],[854,28,989,26],[854,31,989,29,"Object"],[854,37,989,35],[854,38,989,36,"keys"],[854,42,989,40],[854,43,989,41,"extensions"],[854,53,989,51],[854,54,989,52],[855,8,991,6],[855,12,992,8,"extensionNames"],[855,26,992,22],[855,27,992,23,"length"],[855,33,992,29],[855,38,992,34],[855,39,992,35],[855,43,993,8,"extensionNames"],[855,57,993,22],[855,58,993,23],[855,59,993,24],[855,60,993,25],[855,65,993,30,"PerMessageDeflate"],[855,82,993,47],[855,83,993,48,"extensionName"],[855,96,993,61],[855,98,994,8],[856,10,995,8],[856,16,995,14,"message"],[856,23,995,21],[856,26,995,24],[856,80,995,78],[857,10,996,8,"abortHandshake"],[857,24,996,22],[857,25,996,23,"websocket"],[857,34,996,32],[857,36,996,34,"socket"],[857,42,996,40],[857,44,996,42,"message"],[857,51,996,49],[857,52,996,50],[858,10,997,8],[859,8,998,6],[860,8,1000,6],[860,12,1000,10],[861,10,1001,8,"perMessageDeflate"],[861,27,1001,25],[861,28,1001,26,"accept"],[861,34,1001,32],[861,35,1001,33,"extensions"],[861,45,1001,43],[861,46,1001,44,"PerMessageDeflate"],[861,63,1001,61],[861,64,1001,62,"extensionName"],[861,77,1001,75],[861,78,1001,76],[861,79,1001,77],[862,8,1002,6],[862,9,1002,7],[862,10,1002,8],[862,17,1002,15,"err"],[862,20,1002,18],[862,22,1002,20],[863,10,1003,8],[863,16,1003,14,"message"],[863,23,1003,21],[863,26,1003,24],[863,67,1003,65],[864,10,1004,8,"abortHandshake"],[864,24,1004,22],[864,25,1004,23,"websocket"],[864,34,1004,32],[864,36,1004,34,"socket"],[864,42,1004,40],[864,44,1004,42,"message"],[864,51,1004,49],[864,52,1004,50],[865,10,1005,8],[866,8,1006,6],[867,8,1008,6,"websocket"],[867,17,1008,15],[867,18,1008,16,"_extensions"],[867,29,1008,27],[867,30,1008,28,"PerMessageDeflate"],[867,47,1008,45],[867,48,1008,46,"extensionName"],[867,61,1008,59],[867,62,1008,60],[867,65,1009,8,"perMessageDeflate"],[867,82,1009,25],[868,6,1010,4],[869,6,1012,4,"websocket"],[869,15,1012,13],[869,16,1012,14,"setSocket"],[869,25,1012,23],[869,26,1012,24,"socket"],[869,32,1012,30],[869,34,1012,32,"head"],[869,38,1012,36],[869,40,1012,38],[870,8,1013,6,"allowSynchronousEvents"],[870,30,1013,28],[870,32,1013,30,"opts"],[870,36,1013,34],[870,37,1013,35,"allowSynchronousEvents"],[870,59,1013,57],[871,8,1014,6,"generateMask"],[871,20,1014,18],[871,22,1014,20,"opts"],[871,26,1014,24],[871,27,1014,25,"generateMask"],[871,39,1014,37],[872,8,1015,6,"maxPayload"],[872,18,1015,16],[872,20,1015,18,"opts"],[872,24,1015,22],[872,25,1015,23,"maxPayload"],[872,35,1015,33],[873,8,1016,6,"skipUTF8Validation"],[873,26,1016,24],[873,28,1016,26,"opts"],[873,32,1016,30],[873,33,1016,31,"skipUTF8Validation"],[874,6,1017,4],[874,7,1017,5],[874,8,1017,6],[875,4,1018,2],[875,5,1018,3],[875,6,1018,4],[876,4,1020,2],[876,8,1020,6,"opts"],[876,12,1020,10],[876,13,1020,11,"finishRequest"],[876,26,1020,24],[876,28,1020,26],[877,6,1021,4,"opts"],[877,10,1021,8],[877,11,1021,9,"finishRequest"],[877,24,1021,22],[877,25,1021,23,"req"],[877,28,1021,26],[877,30,1021,28,"websocket"],[877,39,1021,37],[877,40,1021,38],[878,4,1022,2],[878,5,1022,3],[878,11,1022,9],[879,6,1023,4,"req"],[879,9,1023,7],[879,10,1023,8,"end"],[879,13,1023,11],[879,14,1023,12],[879,15,1023,13],[880,4,1024,2],[881,2,1025,0],[883,2,1027,0],[884,0,1028,0],[885,0,1029,0],[886,0,1030,0],[887,0,1031,0],[888,0,1032,0],[889,0,1033,0],[890,2,1034,0],[890,11,1034,9,"emitErrorAndClose"],[890,28,1034,26,"emitErrorAndClose"],[890,29,1034,27,"websocket"],[890,38,1034,36],[890,40,1034,38,"err"],[890,43,1034,41],[890,45,1034,43],[891,4,1035,2,"websocket"],[891,13,1035,11],[891,14,1035,12,"_readyState"],[891,25,1035,23],[891,28,1035,26,"WebSocket"],[891,37,1035,35],[891,38,1035,36,"CLOSING"],[891,45,1035,43],[892,4,1036,2],[893,4,1037,2],[894,4,1038,2],[895,4,1039,2],[896,4,1040,2,"websocket"],[896,13,1040,11],[896,14,1040,12,"_errorEmitted"],[896,27,1040,25],[896,30,1040,28],[896,34,1040,32],[897,4,1041,2,"websocket"],[897,13,1041,11],[897,14,1041,12,"emit"],[897,18,1041,16],[897,19,1041,17],[897,26,1041,24],[897,28,1041,26,"err"],[897,31,1041,29],[897,32,1041,30],[898,4,1042,2,"websocket"],[898,13,1042,11],[898,14,1042,12,"emitClose"],[898,23,1042,21],[898,24,1042,22],[898,25,1042,23],[899,2,1043,0],[901,2,1045,0],[902,0,1046,0],[903,0,1047,0],[904,0,1048,0],[905,0,1049,0],[906,0,1050,0],[907,0,1051,0],[908,2,1052,0],[908,11,1052,9,"netConnect"],[908,21,1052,19,"netConnect"],[908,22,1052,20,"options"],[908,29,1052,27],[908,31,1052,29],[909,4,1053,2,"options"],[909,11,1053,9],[909,12,1053,10,"path"],[909,16,1053,14],[909,19,1053,17,"options"],[909,26,1053,24],[909,27,1053,25,"socketPath"],[909,37,1053,35],[910,4,1054,2],[910,11,1054,9,"net"],[910,14,1054,12],[910,15,1054,13,"connect"],[910,22,1054,20],[910,23,1054,21,"options"],[910,30,1054,28],[910,31,1054,29],[911,2,1055,0],[913,2,1057,0],[914,0,1058,0],[915,0,1059,0],[916,0,1060,0],[917,0,1061,0],[918,0,1062,0],[919,0,1063,0],[920,2,1064,0],[920,11,1064,9,"tlsConnect"],[920,21,1064,19,"tlsConnect"],[920,22,1064,20,"options"],[920,29,1064,27],[920,31,1064,29],[921,4,1065,2,"options"],[921,11,1065,9],[921,12,1065,10,"path"],[921,16,1065,14],[921,19,1065,17,"undefined"],[921,28,1065,26],[922,4,1067,2],[922,8,1067,6],[922,9,1067,7,"options"],[922,16,1067,14],[922,17,1067,15,"servername"],[922,27,1067,25],[922,31,1067,29,"options"],[922,38,1067,36],[922,39,1067,37,"servername"],[922,49,1067,47],[922,54,1067,52],[922,56,1067,54],[922,58,1067,56],[923,6,1068,4,"options"],[923,13,1068,11],[923,14,1068,12,"servername"],[923,24,1068,22],[923,27,1068,25,"net"],[923,30,1068,28],[923,31,1068,29,"isIP"],[923,35,1068,33],[923,36,1068,34,"options"],[923,43,1068,41],[923,44,1068,42,"host"],[923,48,1068,46],[923,49,1068,47],[923,52,1068,50],[923,54,1068,52],[923,57,1068,55,"options"],[923,64,1068,62],[923,65,1068,63,"host"],[923,69,1068,67],[924,4,1069,2],[925,4,1071,2],[925,11,1071,9,"tls"],[925,14,1071,12],[925,15,1071,13,"connect"],[925,22,1071,20],[925,23,1071,21,"options"],[925,30,1071,28],[925,31,1071,29],[926,2,1072,0],[928,2,1074,0],[929,0,1075,0],[930,0,1076,0],[931,0,1077,0],[932,0,1078,0],[933,0,1079,0],[934,0,1080,0],[935,0,1081,0],[936,0,1082,0],[937,2,1083,0],[937,11,1083,9,"abortHandshake"],[937,25,1083,23,"abortHandshake"],[937,26,1083,24,"websocket"],[937,35,1083,33],[937,37,1083,35,"stream"],[937,43,1083,41],[937,45,1083,43,"message"],[937,52,1083,50],[937,54,1083,52],[938,4,1084,2,"websocket"],[938,13,1084,11],[938,14,1084,12,"_readyState"],[938,25,1084,23],[938,28,1084,26,"WebSocket"],[938,37,1084,35],[938,38,1084,36,"CLOSING"],[938,45,1084,43],[939,4,1086,2],[939,10,1086,8,"err"],[939,13,1086,11],[939,16,1086,14],[939,20,1086,18,"Error"],[939,25,1086,23],[939,26,1086,24,"message"],[939,33,1086,31],[939,34,1086,32],[940,4,1087,2,"Error"],[940,9,1087,7],[940,10,1087,8,"captureStackTrace"],[940,27,1087,25],[940,28,1087,26,"err"],[940,31,1087,29],[940,33,1087,31,"abortHandshake"],[940,47,1087,45],[940,48,1087,46],[941,4,1089,2],[941,8,1089,6,"stream"],[941,14,1089,12],[941,15,1089,13,"setHeader"],[941,24,1089,22],[941,26,1089,24],[942,6,1090,4,"stream"],[942,12,1090,10],[942,13,1090,11,"kAborted"],[942,21,1090,19],[942,22,1090,20],[942,25,1090,23],[942,29,1090,27],[943,6,1091,4,"stream"],[943,12,1091,10],[943,13,1091,11,"abort"],[943,18,1091,16],[943,19,1091,17],[943,20,1091,18],[944,6,1093,4],[944,10,1093,8,"stream"],[944,16,1093,14],[944,17,1093,15,"socket"],[944,23,1093,21],[944,27,1093,25],[944,28,1093,26,"stream"],[944,34,1093,32],[944,35,1093,33,"socket"],[944,41,1093,39],[944,42,1093,40,"destroyed"],[944,51,1093,49],[944,53,1093,51],[945,8,1094,6],[946,8,1095,6],[947,8,1096,6],[948,8,1097,6],[949,8,1098,6],[950,8,1099,6,"stream"],[950,14,1099,12],[950,15,1099,13,"socket"],[950,21,1099,19],[950,22,1099,20,"destroy"],[950,29,1099,27],[950,30,1099,28],[950,31,1099,29],[951,6,1100,4],[952,6,1102,4,"process"],[952,13,1102,11],[952,14,1102,12,"nextTick"],[952,22,1102,20],[952,23,1102,21,"emitErrorAndClose"],[952,40,1102,38],[952,42,1102,40,"websocket"],[952,51,1102,49],[952,53,1102,51,"err"],[952,56,1102,54],[952,57,1102,55],[953,4,1103,2],[953,5,1103,3],[953,11,1103,9],[954,6,1104,4,"stream"],[954,12,1104,10],[954,13,1104,11,"destroy"],[954,20,1104,18],[954,21,1104,19,"err"],[954,24,1104,22],[954,25,1104,23],[955,6,1105,4,"stream"],[955,12,1105,10],[955,13,1105,11,"once"],[955,17,1105,15],[955,18,1105,16],[955,25,1105,23],[955,27,1105,25,"websocket"],[955,36,1105,34],[955,37,1105,35,"emit"],[955,41,1105,39],[955,42,1105,40,"bind"],[955,46,1105,44],[955,47,1105,45,"websocket"],[955,56,1105,54],[955,58,1105,56],[955,65,1105,63],[955,66,1105,64],[955,67,1105,65],[956,6,1106,4,"stream"],[956,12,1106,10],[956,13,1106,11,"once"],[956,17,1106,15],[956,18,1106,16],[956,25,1106,23],[956,27,1106,25,"websocket"],[956,36,1106,34],[956,37,1106,35,"emitClose"],[956,46,1106,44],[956,47,1106,45,"bind"],[956,51,1106,49],[956,52,1106,50,"websocket"],[956,61,1106,59],[956,62,1106,60],[956,63,1106,61],[957,4,1107,2],[958,2,1108,0],[960,2,1110,0],[961,0,1111,0],[962,0,1112,0],[963,0,1113,0],[964,0,1114,0],[965,0,1115,0],[966,0,1116,0],[967,0,1117,0],[968,0,1118,0],[969,2,1119,0],[969,11,1119,9,"sendAfterClose"],[969,25,1119,23,"sendAfterClose"],[969,26,1119,24,"websocket"],[969,35,1119,33],[969,37,1119,35,"data"],[969,41,1119,39],[969,43,1119,41,"cb"],[969,45,1119,43],[969,47,1119,45],[970,4,1120,2],[970,8,1120,6,"data"],[970,12,1120,10],[970,14,1120,12],[971,6,1121,4],[971,12,1121,10,"length"],[971,18,1121,16],[971,21,1121,19,"isBlob"],[971,27,1121,25],[971,28,1121,26,"data"],[971,32,1121,30],[971,33,1121,31],[971,36,1121,34,"data"],[971,40,1121,38],[971,41,1121,39,"size"],[971,45,1121,43],[971,48,1121,46,"toBuffer"],[971,56,1121,54],[971,57,1121,55,"data"],[971,61,1121,59],[971,62,1121,60],[971,63,1121,61,"length"],[971,69,1121,67],[973,6,1123,4],[974,6,1124,4],[975,6,1125,4],[976,6,1126,4],[977,6,1127,4],[978,6,1128,4],[979,6,1129,4],[979,10,1129,8,"websocket"],[979,19,1129,17],[979,20,1129,18,"_socket"],[979,27,1129,25],[979,29,1129,27,"websocket"],[979,38,1129,36],[979,39,1129,37,"_sender"],[979,46,1129,44],[979,47,1129,45,"_bufferedBytes"],[979,61,1129,59],[979,65,1129,63,"length"],[979,71,1129,69],[979,72,1129,70],[979,77,1130,9,"websocket"],[979,86,1130,18],[979,87,1130,19,"_bufferedAmount"],[979,102,1130,34],[979,106,1130,38,"length"],[979,112,1130,44],[980,4,1131,2],[981,4,1133,2],[981,8,1133,6,"cb"],[981,10,1133,8],[981,12,1133,10],[982,6,1134,4],[982,12,1134,10,"err"],[982,15,1134,13],[982,18,1134,16],[982,22,1134,20,"Error"],[982,27,1134,25],[982,28,1135,6],[982,65,1135,43,"websocket"],[982,74,1135,52],[982,75,1135,53,"readyState"],[982,85,1135,63],[982,88,1135,66],[982,91,1136,8],[982,95,1136,12,"readyStates"],[982,106,1136,23],[982,107,1136,24,"websocket"],[982,116,1136,33],[982,117,1136,34,"readyState"],[982,127,1136,44],[982,128,1136,45],[982,131,1137,4],[982,132,1137,5],[983,6,1138,4,"process"],[983,13,1138,11],[983,14,1138,12,"nextTick"],[983,22,1138,20],[983,23,1138,21,"cb"],[983,25,1138,23],[983,27,1138,25,"err"],[983,30,1138,28],[983,31,1138,29],[984,4,1139,2],[985,2,1140,0],[987,2,1142,0],[988,0,1143,0],[989,0,1144,0],[990,0,1145,0],[991,0,1146,0],[992,0,1147,0],[993,0,1148,0],[994,2,1149,0],[994,11,1149,9,"receiverOnConclude"],[994,29,1149,27,"receiverOnConclude"],[994,30,1149,28,"code"],[994,34,1149,32],[994,36,1149,34,"reason"],[994,42,1149,40],[994,44,1149,42],[995,4,1150,2],[995,10,1150,8,"websocket"],[995,19,1150,17],[995,22,1150,20],[995,26,1150,24],[995,27,1150,25,"kWebSocket"],[995,37,1150,35],[995,38,1150,36],[996,4,1152,2,"websocket"],[996,13,1152,11],[996,14,1152,12,"_closeFrameReceived"],[996,33,1152,31],[996,36,1152,34],[996,40,1152,38],[997,4,1153,2,"websocket"],[997,13,1153,11],[997,14,1153,12,"_closeMessage"],[997,27,1153,25],[997,30,1153,28,"reason"],[997,36,1153,34],[998,4,1154,2,"websocket"],[998,13,1154,11],[998,14,1154,12,"_closeCode"],[998,24,1154,22],[998,27,1154,25,"code"],[998,31,1154,29],[999,4,1156,2],[999,8,1156,6,"websocket"],[999,17,1156,15],[999,18,1156,16,"_socket"],[999,25,1156,23],[999,26,1156,24,"kWebSocket"],[999,36,1156,34],[999,37,1156,35],[999,42,1156,40,"undefined"],[999,51,1156,49],[999,53,1156,51],[1000,4,1158,2,"websocket"],[1000,13,1158,11],[1000,14,1158,12,"_socket"],[1000,21,1158,19],[1000,22,1158,20,"removeListener"],[1000,36,1158,34],[1000,37,1158,35],[1000,43,1158,41],[1000,45,1158,43,"socketOnData"],[1000,57,1158,55],[1000,58,1158,56],[1001,4,1159,2,"process"],[1001,11,1159,9],[1001,12,1159,10,"nextTick"],[1001,20,1159,18],[1001,21,1159,19,"resume"],[1001,27,1159,25],[1001,29,1159,27,"websocket"],[1001,38,1159,36],[1001,39,1159,37,"_socket"],[1001,46,1159,44],[1001,47,1159,45],[1002,4,1161,2],[1002,8,1161,6,"code"],[1002,12,1161,10],[1002,17,1161,15],[1002,21,1161,19],[1002,23,1161,21,"websocket"],[1002,32,1161,30],[1002,33,1161,31,"close"],[1002,38,1161,36],[1002,39,1161,37],[1002,40,1161,38],[1002,41,1161,39],[1002,46,1162,7,"websocket"],[1002,55,1162,16],[1002,56,1162,17,"close"],[1002,61,1162,22],[1002,62,1162,23,"code"],[1002,66,1162,27],[1002,68,1162,29,"reason"],[1002,74,1162,35],[1002,75,1162,36],[1003,2,1163,0],[1005,2,1165,0],[1006,0,1166,0],[1007,0,1167,0],[1008,0,1168,0],[1009,0,1169,0],[1010,2,1170,0],[1010,11,1170,9,"receiverOnDrain"],[1010,26,1170,24,"receiverOnDrain"],[1010,27,1170,24],[1010,29,1170,27],[1011,4,1171,2],[1011,10,1171,8,"websocket"],[1011,19,1171,17],[1011,22,1171,20],[1011,26,1171,24],[1011,27,1171,25,"kWebSocket"],[1011,37,1171,35],[1011,38,1171,36],[1012,4,1173,2],[1012,8,1173,6],[1012,9,1173,7,"websocket"],[1012,18,1173,16],[1012,19,1173,17,"isPaused"],[1012,27,1173,25],[1012,29,1173,27,"websocket"],[1012,38,1173,36],[1012,39,1173,37,"_socket"],[1012,46,1173,44],[1012,47,1173,45,"resume"],[1012,53,1173,51],[1012,54,1173,52],[1012,55,1173,53],[1013,2,1174,0],[1015,2,1176,0],[1016,0,1177,0],[1017,0,1178,0],[1018,0,1179,0],[1019,0,1180,0],[1020,0,1181,0],[1021,2,1182,0],[1021,11,1182,9,"receiverOnError"],[1021,26,1182,24,"receiverOnError"],[1021,27,1182,25,"err"],[1021,30,1182,28],[1021,32,1182,30],[1022,4,1183,2],[1022,10,1183,8,"websocket"],[1022,19,1183,17],[1022,22,1183,20],[1022,26,1183,24],[1022,27,1183,25,"kWebSocket"],[1022,37,1183,35],[1022,38,1183,36],[1023,4,1185,2],[1023,8,1185,6,"websocket"],[1023,17,1185,15],[1023,18,1185,16,"_socket"],[1023,25,1185,23],[1023,26,1185,24,"kWebSocket"],[1023,36,1185,34],[1023,37,1185,35],[1023,42,1185,40,"undefined"],[1023,51,1185,49],[1023,53,1185,51],[1024,6,1186,4,"websocket"],[1024,15,1186,13],[1024,16,1186,14,"_socket"],[1024,23,1186,21],[1024,24,1186,22,"removeListener"],[1024,38,1186,36],[1024,39,1186,37],[1024,45,1186,43],[1024,47,1186,45,"socketOnData"],[1024,59,1186,57],[1024,60,1186,58],[1026,6,1188,4],[1027,6,1189,4],[1028,6,1190,4],[1029,6,1191,4],[1030,6,1192,4,"process"],[1030,13,1192,11],[1030,14,1192,12,"nextTick"],[1030,22,1192,20],[1030,23,1192,21,"resume"],[1030,29,1192,27],[1030,31,1192,29,"websocket"],[1030,40,1192,38],[1030,41,1192,39,"_socket"],[1030,48,1192,46],[1030,49,1192,47],[1031,6,1194,4,"websocket"],[1031,15,1194,13],[1031,16,1194,14,"close"],[1031,21,1194,19],[1031,22,1194,20,"err"],[1031,25,1194,23],[1031,26,1194,24,"kStatusCode"],[1031,37,1194,35],[1031,38,1194,36],[1031,39,1194,37],[1032,4,1195,2],[1033,4,1197,2],[1033,8,1197,6],[1033,9,1197,7,"websocket"],[1033,18,1197,16],[1033,19,1197,17,"_errorEmitted"],[1033,32,1197,30],[1033,34,1197,32],[1034,6,1198,4,"websocket"],[1034,15,1198,13],[1034,16,1198,14,"_errorEmitted"],[1034,29,1198,27],[1034,32,1198,30],[1034,36,1198,34],[1035,6,1199,4,"websocket"],[1035,15,1199,13],[1035,16,1199,14,"emit"],[1035,20,1199,18],[1035,21,1199,19],[1035,28,1199,26],[1035,30,1199,28,"err"],[1035,33,1199,31],[1035,34,1199,32],[1036,4,1200,2],[1037,2,1201,0],[1039,2,1203,0],[1040,0,1204,0],[1041,0,1205,0],[1042,0,1206,0],[1043,0,1207,0],[1044,2,1208,0],[1044,11,1208,9,"receiverOnFinish"],[1044,27,1208,25,"receiverOnFinish"],[1044,28,1208,25],[1044,30,1208,28],[1045,4,1209,2],[1045,8,1209,6],[1045,9,1209,7,"kWebSocket"],[1045,19,1209,17],[1045,20,1209,18],[1045,21,1209,19,"emitClose"],[1045,30,1209,28],[1045,31,1209,29],[1045,32,1209,30],[1046,2,1210,0],[1048,2,1212,0],[1049,0,1213,0],[1050,0,1214,0],[1051,0,1215,0],[1052,0,1216,0],[1053,0,1217,0],[1054,0,1218,0],[1055,2,1219,0],[1055,11,1219,9,"receiverOnMessage"],[1055,28,1219,26,"receiverOnMessage"],[1055,29,1219,27,"data"],[1055,33,1219,31],[1055,35,1219,33,"isBinary"],[1055,43,1219,41],[1055,45,1219,43],[1056,4,1220,2],[1056,8,1220,6],[1056,9,1220,7,"kWebSocket"],[1056,19,1220,17],[1056,20,1220,18],[1056,21,1220,19,"emit"],[1056,25,1220,23],[1056,26,1220,24],[1056,35,1220,33],[1056,37,1220,35,"data"],[1056,41,1220,39],[1056,43,1220,41,"isBinary"],[1056,51,1220,49],[1056,52,1220,50],[1057,2,1221,0],[1059,2,1223,0],[1060,0,1224,0],[1061,0,1225,0],[1062,0,1226,0],[1063,0,1227,0],[1064,0,1228,0],[1065,2,1229,0],[1065,11,1229,9,"receiverOnPing"],[1065,25,1229,23,"receiverOnPing"],[1065,26,1229,24,"data"],[1065,30,1229,28],[1065,32,1229,30],[1066,4,1230,2],[1066,10,1230,8,"websocket"],[1066,19,1230,17],[1066,22,1230,20],[1066,26,1230,24],[1066,27,1230,25,"kWebSocket"],[1066,37,1230,35],[1066,38,1230,36],[1067,4,1232,2],[1067,8,1232,6,"websocket"],[1067,17,1232,15],[1067,18,1232,16,"_autoPong"],[1067,27,1232,25],[1067,29,1232,27,"websocket"],[1067,38,1232,36],[1067,39,1232,37,"pong"],[1067,43,1232,41],[1067,44,1232,42,"data"],[1067,48,1232,46],[1067,50,1232,48],[1067,51,1232,49],[1067,55,1232,53],[1067,56,1232,54,"_isServer"],[1067,65,1232,63],[1067,67,1232,65,"NOOP"],[1067,71,1232,69],[1067,72,1232,70],[1068,4,1233,2,"websocket"],[1068,13,1233,11],[1068,14,1233,12,"emit"],[1068,18,1233,16],[1068,19,1233,17],[1068,25,1233,23],[1068,27,1233,25,"data"],[1068,31,1233,29],[1068,32,1233,30],[1069,2,1234,0],[1071,2,1236,0],[1072,0,1237,0],[1073,0,1238,0],[1074,0,1239,0],[1075,0,1240,0],[1076,0,1241,0],[1077,2,1242,0],[1077,11,1242,9,"receiverOnPong"],[1077,25,1242,23,"receiverOnPong"],[1077,26,1242,24,"data"],[1077,30,1242,28],[1077,32,1242,30],[1078,4,1243,2],[1078,8,1243,6],[1078,9,1243,7,"kWebSocket"],[1078,19,1243,17],[1078,20,1243,18],[1078,21,1243,19,"emit"],[1078,25,1243,23],[1078,26,1243,24],[1078,32,1243,30],[1078,34,1243,32,"data"],[1078,38,1243,36],[1078,39,1243,37],[1079,2,1244,0],[1081,2,1246,0],[1082,0,1247,0],[1083,0,1248,0],[1084,0,1249,0],[1085,0,1250,0],[1086,0,1251,0],[1087,2,1252,0],[1087,11,1252,9,"resume"],[1087,17,1252,15,"resume"],[1087,18,1252,16,"stream"],[1087,24,1252,22],[1087,26,1252,24],[1088,4,1253,2,"stream"],[1088,10,1253,8],[1088,11,1253,9,"resume"],[1088,17,1253,15],[1088,18,1253,16],[1088,19,1253,17],[1089,2,1254,0],[1091,2,1256,0],[1092,0,1257,0],[1093,0,1258,0],[1094,0,1259,0],[1095,0,1260,0],[1096,0,1261,0],[1097,2,1262,0],[1097,11,1262,9,"senderOnError"],[1097,24,1262,22,"senderOnError"],[1097,25,1262,23,"err"],[1097,28,1262,26],[1097,30,1262,28],[1098,4,1263,2],[1098,10,1263,8,"websocket"],[1098,19,1263,17],[1098,22,1263,20],[1098,26,1263,24],[1098,27,1263,25,"kWebSocket"],[1098,37,1263,35],[1098,38,1263,36],[1099,4,1265,2],[1099,8,1265,6,"websocket"],[1099,17,1265,15],[1099,18,1265,16,"readyState"],[1099,28,1265,26],[1099,33,1265,31,"WebSocket"],[1099,42,1265,40],[1099,43,1265,41,"CLOSED"],[1099,49,1265,47],[1099,51,1265,49],[1100,4,1266,2],[1100,8,1266,6,"websocket"],[1100,17,1266,15],[1100,18,1266,16,"readyState"],[1100,28,1266,26],[1100,33,1266,31,"WebSocket"],[1100,42,1266,40],[1100,43,1266,41,"OPEN"],[1100,47,1266,45],[1100,49,1266,47],[1101,6,1267,4,"websocket"],[1101,15,1267,13],[1101,16,1267,14,"_readyState"],[1101,27,1267,25],[1101,30,1267,28,"WebSocket"],[1101,39,1267,37],[1101,40,1267,38,"CLOSING"],[1101,47,1267,45],[1102,6,1268,4,"setCloseTimer"],[1102,19,1268,17],[1102,20,1268,18,"websocket"],[1102,29,1268,27],[1102,30,1268,28],[1103,4,1269,2],[1105,4,1271,2],[1106,4,1272,2],[1107,4,1273,2],[1108,4,1274,2],[1109,4,1275,2],[1110,4,1276,2],[1110,8,1276,6],[1110,9,1276,7,"_socket"],[1110,16,1276,14],[1110,17,1276,15,"end"],[1110,20,1276,18],[1110,21,1276,19],[1110,22,1276,20],[1111,4,1278,2],[1111,8,1278,6],[1111,9,1278,7,"websocket"],[1111,18,1278,16],[1111,19,1278,17,"_errorEmitted"],[1111,32,1278,30],[1111,34,1278,32],[1112,6,1279,4,"websocket"],[1112,15,1279,13],[1112,16,1279,14,"_errorEmitted"],[1112,29,1279,27],[1112,32,1279,30],[1112,36,1279,34],[1113,6,1280,4,"websocket"],[1113,15,1280,13],[1113,16,1280,14,"emit"],[1113,20,1280,18],[1113,21,1280,19],[1113,28,1280,26],[1113,30,1280,28,"err"],[1113,33,1280,31],[1113,34,1280,32],[1114,4,1281,2],[1115,2,1282,0],[1117,2,1284,0],[1118,0,1285,0],[1119,0,1286,0],[1120,0,1287,0],[1121,0,1288,0],[1122,0,1289,0],[1123,2,1290,0],[1123,11,1290,9,"setCloseTimer"],[1123,24,1290,22,"setCloseTimer"],[1123,25,1290,23,"websocket"],[1123,34,1290,32],[1123,36,1290,34],[1124,4,1291,2,"websocket"],[1124,13,1291,11],[1124,14,1291,12,"_closeTimer"],[1124,25,1291,23],[1124,28,1291,26,"setTimeout"],[1124,38,1291,36],[1124,39,1292,4,"websocket"],[1124,48,1292,13],[1124,49,1292,14,"_socket"],[1124,56,1292,21],[1124,57,1292,22,"destroy"],[1124,64,1292,29],[1124,65,1292,30,"bind"],[1124,69,1292,34],[1124,70,1292,35,"websocket"],[1124,79,1292,44],[1124,80,1292,45,"_socket"],[1124,87,1292,52],[1124,88,1292,53],[1124,90,1293,4,"closeTimeout"],[1124,102,1294,2],[1124,103,1294,3],[1125,2,1295,0],[1127,2,1297,0],[1128,0,1298,0],[1129,0,1299,0],[1130,0,1300,0],[1131,0,1301,0],[1132,2,1302,0],[1132,11,1302,9,"socketOnClose"],[1132,24,1302,22,"socketOnClose"],[1132,25,1302,22],[1132,27,1302,25],[1133,4,1303,2],[1133,10,1303,8,"websocket"],[1133,19,1303,17],[1133,22,1303,20],[1133,26,1303,24],[1133,27,1303,25,"kWebSocket"],[1133,37,1303,35],[1133,38,1303,36],[1134,4,1305,2],[1134,8,1305,6],[1134,9,1305,7,"removeListener"],[1134,23,1305,21],[1134,24,1305,22],[1134,31,1305,29],[1134,33,1305,31,"socketOnClose"],[1134,46,1305,44],[1134,47,1305,45],[1135,4,1306,2],[1135,8,1306,6],[1135,9,1306,7,"removeListener"],[1135,23,1306,21],[1135,24,1306,22],[1135,30,1306,28],[1135,32,1306,30,"socketOnData"],[1135,44,1306,42],[1135,45,1306,43],[1136,4,1307,2],[1136,8,1307,6],[1136,9,1307,7,"removeListener"],[1136,23,1307,21],[1136,24,1307,22],[1136,29,1307,27],[1136,31,1307,29,"socketOnEnd"],[1136,42,1307,40],[1136,43,1307,41],[1137,4,1309,2,"websocket"],[1137,13,1309,11],[1137,14,1309,12,"_readyState"],[1137,25,1309,23],[1137,28,1309,26,"WebSocket"],[1137,37,1309,35],[1137,38,1309,36,"CLOSING"],[1137,45,1309,43],[1138,4,1311,2],[1138,8,1311,6,"chunk"],[1138,13,1311,11],[1140,4,1313,2],[1141,4,1314,2],[1142,4,1315,2],[1143,4,1316,2],[1144,4,1317,2],[1145,4,1318,2],[1146,4,1319,2],[1147,4,1320,2],[1148,4,1321,2],[1149,4,1322,2],[1149,8,1323,4],[1149,9,1323,5],[1149,13,1323,9],[1149,14,1323,10,"_readableState"],[1149,28,1323,24],[1149,29,1323,25,"endEmitted"],[1149,39,1323,35],[1149,43,1324,4],[1149,44,1324,5,"websocket"],[1149,53,1324,14],[1149,54,1324,15,"_closeFrameReceived"],[1149,73,1324,34],[1149,77,1325,4],[1149,78,1325,5,"websocket"],[1149,87,1325,14],[1149,88,1325,15,"_receiver"],[1149,97,1325,24],[1149,98,1325,25,"_writableState"],[1149,112,1325,39],[1149,113,1325,40,"errorEmitted"],[1149,125,1325,52],[1149,129,1326,4],[1149,130,1326,5,"chunk"],[1149,135,1326,10],[1149,138,1326,13,"websocket"],[1149,147,1326,22],[1149,148,1326,23,"_socket"],[1149,155,1326,30],[1149,156,1326,31,"read"],[1149,160,1326,35],[1149,161,1326,36],[1149,162,1326,37],[1149,168,1326,43],[1149,172,1326,47],[1149,174,1327,4],[1150,6,1328,4,"websocket"],[1150,15,1328,13],[1150,16,1328,14,"_receiver"],[1150,25,1328,23],[1150,26,1328,24,"write"],[1150,31,1328,29],[1150,32,1328,30,"chunk"],[1150,37,1328,35],[1150,38,1328,36],[1151,4,1329,2],[1152,4,1331,2,"websocket"],[1152,13,1331,11],[1152,14,1331,12,"_receiver"],[1152,23,1331,21],[1152,24,1331,22,"end"],[1152,27,1331,25],[1152,28,1331,26],[1152,29,1331,27],[1153,4,1333,2],[1153,8,1333,6],[1153,9,1333,7,"kWebSocket"],[1153,19,1333,17],[1153,20,1333,18],[1153,23,1333,21,"undefined"],[1153,32,1333,30],[1154,4,1335,2,"clearTimeout"],[1154,16,1335,14],[1154,17,1335,15,"websocket"],[1154,26,1335,24],[1154,27,1335,25,"_closeTimer"],[1154,38,1335,36],[1154,39,1335,37],[1155,4,1337,2],[1155,8,1338,4,"websocket"],[1155,17,1338,13],[1155,18,1338,14,"_receiver"],[1155,27,1338,23],[1155,28,1338,24,"_writableState"],[1155,42,1338,38],[1155,43,1338,39,"finished"],[1155,51,1338,47],[1155,55,1339,4,"websocket"],[1155,64,1339,13],[1155,65,1339,14,"_receiver"],[1155,74,1339,23],[1155,75,1339,24,"_writableState"],[1155,89,1339,38],[1155,90,1339,39,"errorEmitted"],[1155,102,1339,51],[1155,104,1340,4],[1156,6,1341,4,"websocket"],[1156,15,1341,13],[1156,16,1341,14,"emitClose"],[1156,25,1341,23],[1156,26,1341,24],[1156,27,1341,25],[1157,4,1342,2],[1157,5,1342,3],[1157,11,1342,9],[1158,6,1343,4,"websocket"],[1158,15,1343,13],[1158,16,1343,14,"_receiver"],[1158,25,1343,23],[1158,26,1343,24,"on"],[1158,28,1343,26],[1158,29,1343,27],[1158,36,1343,34],[1158,38,1343,36,"receiverOnFinish"],[1158,54,1343,52],[1158,55,1343,53],[1159,6,1344,4,"websocket"],[1159,15,1344,13],[1159,16,1344,14,"_receiver"],[1159,25,1344,23],[1159,26,1344,24,"on"],[1159,28,1344,26],[1159,29,1344,27],[1159,37,1344,35],[1159,39,1344,37,"receiverOnFinish"],[1159,55,1344,53],[1159,56,1344,54],[1160,4,1345,2],[1161,2,1346,0],[1163,2,1348,0],[1164,0,1349,0],[1165,0,1350,0],[1166,0,1351,0],[1167,0,1352,0],[1168,0,1353,0],[1169,2,1354,0],[1169,11,1354,9,"socketOnData"],[1169,23,1354,21,"socketOnData"],[1169,24,1354,22,"chunk"],[1169,29,1354,27],[1169,31,1354,29],[1170,4,1355,2],[1170,8,1355,6],[1170,9,1355,7],[1170,13,1355,11],[1170,14,1355,12,"kWebSocket"],[1170,24,1355,22],[1170,25,1355,23],[1170,26,1355,24,"_receiver"],[1170,35,1355,33],[1170,36,1355,34,"write"],[1170,41,1355,39],[1170,42,1355,40,"chunk"],[1170,47,1355,45],[1170,48,1355,46],[1170,50,1355,48],[1171,6,1356,4],[1171,10,1356,8],[1171,11,1356,9,"pause"],[1171,16,1356,14],[1171,17,1356,15],[1171,18,1356,16],[1172,4,1357,2],[1173,2,1358,0],[1175,2,1360,0],[1176,0,1361,0],[1177,0,1362,0],[1178,0,1363,0],[1179,0,1364,0],[1180,2,1365,0],[1180,11,1365,9,"socketOnEnd"],[1180,22,1365,20,"socketOnEnd"],[1180,23,1365,20],[1180,25,1365,23],[1181,4,1366,2],[1181,10,1366,8,"websocket"],[1181,19,1366,17],[1181,22,1366,20],[1181,26,1366,24],[1181,27,1366,25,"kWebSocket"],[1181,37,1366,35],[1181,38,1366,36],[1182,4,1368,2,"websocket"],[1182,13,1368,11],[1182,14,1368,12,"_readyState"],[1182,25,1368,23],[1182,28,1368,26,"WebSocket"],[1182,37,1368,35],[1182,38,1368,36,"CLOSING"],[1182,45,1368,43],[1183,4,1369,2,"websocket"],[1183,13,1369,11],[1183,14,1369,12,"_receiver"],[1183,23,1369,21],[1183,24,1369,22,"end"],[1183,27,1369,25],[1183,28,1369,26],[1183,29,1369,27],[1184,4,1370,2],[1184,8,1370,6],[1184,9,1370,7,"end"],[1184,12,1370,10],[1184,13,1370,11],[1184,14,1370,12],[1185,2,1371,0],[1187,2,1373,0],[1188,0,1374,0],[1189,0,1375,0],[1190,0,1376,0],[1191,0,1377,0],[1192,2,1378,0],[1192,11,1378,9,"socketOnError"],[1192,24,1378,22,"socketOnError"],[1192,25,1378,22],[1192,27,1378,25],[1193,4,1379,2],[1193,10,1379,8,"websocket"],[1193,19,1379,17],[1193,22,1379,20],[1193,26,1379,24],[1193,27,1379,25,"kWebSocket"],[1193,37,1379,35],[1193,38,1379,36],[1194,4,1381,2],[1194,8,1381,6],[1194,9,1381,7,"removeListener"],[1194,23,1381,21],[1194,24,1381,22],[1194,31,1381,29],[1194,33,1381,31,"socketOnError"],[1194,46,1381,44],[1194,47,1381,45],[1195,4,1382,2],[1195,8,1382,6],[1195,9,1382,7,"on"],[1195,11,1382,9],[1195,12,1382,10],[1195,19,1382,17],[1195,21,1382,19,"NOOP"],[1195,25,1382,23],[1195,26,1382,24],[1196,4,1384,2],[1196,8,1384,6,"websocket"],[1196,17,1384,15],[1196,19,1384,17],[1197,6,1385,4,"websocket"],[1197,15,1385,13],[1197,16,1385,14,"_readyState"],[1197,27,1385,25],[1197,30,1385,28,"WebSocket"],[1197,39,1385,37],[1197,40,1385,38,"CLOSING"],[1197,47,1385,45],[1198,6,1386,4],[1198,10,1386,8],[1198,11,1386,9,"destroy"],[1198,18,1386,16],[1198,19,1386,17],[1198,20,1386,18],[1199,4,1387,2],[1200,2,1388,0],[1201,0,1388,1],[1201,3]],"functionMap":{"names":["<global>","WebSocket","WebSocket#constructor","WebSocket#get__binaryType","WebSocket#set__binaryType","WebSocket#get__bufferedAmount","WebSocket#get__extensions","WebSocket#get__isPaused","WebSocket#get__onclose","WebSocket#get__onerror","WebSocket#get__onopen","WebSocket#get__onmessage","WebSocket#get__protocol","WebSocket#get__readyState","WebSocket#get__url","WebSocket#setSocket","WebSocket#emitClose","WebSocket#close","_sender.close$argument_3","WebSocket#pause","WebSocket#ping","WebSocket#pong","WebSocket#resume","WebSocket#send","WebSocket#terminate","forEach$argument_0","Object.defineProperty$argument_2.get","Object.defineProperty$argument_2.set","initAsClient","req.on$argument_1","emitErrorAndClose","netConnect","tlsConnect","abortHandshake","sendAfterClose","receiverOnConclude","receiverOnDrain","receiverOnError","receiverOnFinish","receiverOnMessage","receiverOnPing","receiverOnPong","resume","senderOnError","setCloseTimer","socketOnClose","socketOnData","socketOnEnd","socketOnError"],"mappings":"AAA;AC6C;ECQ;GDuC;EEQ;GFE;EGE;GHS;EIK;GJI;EKK;GLE;EMK;GNE;EOM;GPE;EQM;GRE;ESM;GTE;EUM;GVE;EWK;GXE;EYK;GZE;EaK;GbE;EckB;Gd4C;EeO;Gfc;EgBsB;oDCoB;KDe;GhBG;EkBO;GlBU;EmBU;GnBsB;EoBU;GpBsB;EqBO;GrBU;EsBiB;GtB8B;EuBO;GvBY;CDC;UyBkF;CzBE;8CyBM;ICG;KDM;IEC;KFa;CzBE;A4ByC;sBC0N;KDE;kBCG;GDK;qBCE;GDmC;oBCE;GDiG;C5BO;A8BS;C9BS;A+BS;C/BG;AgCS;ChCQ;AiCW;CjCyB;AkCW;ClCqB;AmCS;CnCc;AoCO;CpCI;AqCQ;CrCmB;AsCO;CtCE;AuCS;CvCE;AwCQ;CxCK;AyCQ;CzCE;A0CQ;C1CE;A2CQ;C3CoB;A4CQ;C5CK;A6CO;C7C4C;A8CQ;C9CI;A+CO;C/CM;AgDO;ChDU"}},"type":"js/module"}]}