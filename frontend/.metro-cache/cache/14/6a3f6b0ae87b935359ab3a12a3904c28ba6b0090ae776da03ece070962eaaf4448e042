{"dependencies":[{"name":"safe-buffer","data":{"asyncType":null,"isESMImport":false,"locs":[{"start":{"line":1,"column":13,"index":13},"end":{"line":1,"column":35,"index":35}}],"key":"JYiVyKV2adrbhzv3Ouecl8p4NAI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  var Buffer = require(_dependencyMap[0], \"safe-buffer\").Buffer;\n  function encryptByte(self, byteParam, decrypt) {\n    var pad;\n    var i = -1;\n    var len = 8;\n    var out = 0;\n    var bit, value;\n    while (++i < len) {\n      pad = self._cipher.encryptBlock(self._prev);\n      bit = byteParam & 1 << 7 - i ? 0x80 : 0;\n      value = pad[0] ^ bit;\n      out += (value & 0x80) >> i % 8;\n      self._prev = shiftIn(self._prev, decrypt ? bit : value);\n    }\n    return out;\n  }\n  function shiftIn(buffer, value) {\n    var len = buffer.length;\n    var i = -1;\n    var out = Buffer.allocUnsafe(buffer.length);\n    buffer = Buffer.concat([buffer, Buffer.from([value])]);\n    while (++i < len) {\n      out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;\n    }\n    return out;\n  }\n  exports.encrypt = function (self, chunk, decrypt) {\n    var len = chunk.length;\n    var out = Buffer.allocUnsafe(len);\n    var i = -1;\n    while (++i < len) {\n      out[i] = encryptByte(self, chunk[i], decrypt);\n    }\n    return out;\n  };\n});","lineCount":37,"map":[[2,2,1,0],[2,6,1,4,"Buffer"],[2,12,1,10],[2,15,1,13,"require"],[2,22,1,20],[2,23,1,20,"_dependencyMap"],[2,37,1,20],[2,55,1,34],[2,56,1,35],[2,57,1,36,"Buffer"],[2,63,1,42],[3,2,3,0],[3,11,3,9,"encryptByte"],[3,22,3,20,"encryptByte"],[3,23,3,22,"self"],[3,27,3,26],[3,29,3,28,"byteParam"],[3,38,3,37],[3,40,3,39,"decrypt"],[3,47,3,46],[3,49,3,48],[4,4,4,2],[4,8,4,6,"pad"],[4,11,4,9],[5,4,5,2],[5,8,5,6,"i"],[5,9,5,7],[5,12,5,10],[5,13,5,11],[5,14,5,12],[6,4,6,2],[6,8,6,6,"len"],[6,11,6,9],[6,14,6,12],[6,15,6,13],[7,4,7,2],[7,8,7,6,"out"],[7,11,7,9],[7,14,7,12],[7,15,7,13],[8,4,8,2],[8,8,8,6,"bit"],[8,11,8,9],[8,13,8,11,"value"],[8,18,8,16],[9,4,9,2],[9,11,9,9],[9,13,9,11,"i"],[9,14,9,12],[9,17,9,15,"len"],[9,20,9,18],[9,22,9,20],[10,6,10,4,"pad"],[10,9,10,7],[10,12,10,10,"self"],[10,16,10,14],[10,17,10,15,"_cipher"],[10,24,10,22],[10,25,10,23,"encryptBlock"],[10,37,10,35],[10,38,10,36,"self"],[10,42,10,40],[10,43,10,41,"_prev"],[10,48,10,46],[10,49,10,47],[11,6,11,4,"bit"],[11,9,11,7],[11,12,11,11,"byteParam"],[11,21,11,20],[11,24,11,24],[11,25,11,25],[11,29,11,30],[11,30,11,31],[11,33,11,34,"i"],[11,34,11,37],[11,37,11,41],[11,41,11,45],[11,44,11,48],[11,45,11,49],[12,6,12,4,"value"],[12,11,12,9],[12,14,12,12,"pad"],[12,17,12,15],[12,18,12,16],[12,19,12,17],[12,20,12,18],[12,23,12,21,"bit"],[12,26,12,24],[13,6,13,4,"out"],[13,9,13,7],[13,13,13,12],[13,14,13,13,"value"],[13,19,13,18],[13,22,13,21],[13,26,13,25],[13,31,13,31,"i"],[13,32,13,32],[13,35,13,35],[13,36,13,38],[14,6,14,4,"self"],[14,10,14,8],[14,11,14,9,"_prev"],[14,16,14,14],[14,19,14,17,"shiftIn"],[14,26,14,24],[14,27,14,25,"self"],[14,31,14,29],[14,32,14,30,"_prev"],[14,37,14,35],[14,39,14,37,"decrypt"],[14,46,14,44],[14,49,14,47,"bit"],[14,52,14,50],[14,55,14,53,"value"],[14,60,14,58],[14,61,14,59],[15,4,15,2],[16,4,16,2],[16,11,16,9,"out"],[16,14,16,12],[17,2,17,0],[18,2,19,0],[18,11,19,9,"shiftIn"],[18,18,19,16,"shiftIn"],[18,19,19,18,"buffer"],[18,25,19,24],[18,27,19,26,"value"],[18,32,19,31],[18,34,19,33],[19,4,20,2],[19,8,20,6,"len"],[19,11,20,9],[19,14,20,12,"buffer"],[19,20,20,18],[19,21,20,19,"length"],[19,27,20,25],[20,4,21,2],[20,8,21,6,"i"],[20,9,21,7],[20,12,21,10],[20,13,21,11],[20,14,21,12],[21,4,22,2],[21,8,22,6,"out"],[21,11,22,9],[21,14,22,12,"Buffer"],[21,20,22,18],[21,21,22,19,"allocUnsafe"],[21,32,22,30],[21,33,22,31,"buffer"],[21,39,22,37],[21,40,22,38,"length"],[21,46,22,44],[21,47,22,45],[22,4,23,2,"buffer"],[22,10,23,8],[22,13,23,11,"Buffer"],[22,19,23,17],[22,20,23,18,"concat"],[22,26,23,24],[22,27,23,25],[22,28,23,26,"buffer"],[22,34,23,32],[22,36,23,34,"Buffer"],[22,42,23,40],[22,43,23,41,"from"],[22,47,23,45],[22,48,23,46],[22,49,23,47,"value"],[22,54,23,52],[22,55,23,53],[22,56,23,54],[22,57,23,55],[22,58,23,56],[23,4,25,2],[23,11,25,9],[23,13,25,11,"i"],[23,14,25,12],[23,17,25,15,"len"],[23,20,25,18],[23,22,25,20],[24,6,26,4,"out"],[24,9,26,7],[24,10,26,8,"i"],[24,11,26,9],[24,12,26,10],[24,15,26,13,"buffer"],[24,21,26,19],[24,22,26,20,"i"],[24,23,26,21],[24,24,26,22],[24,28,26,26],[24,29,26,27],[24,32,26,30,"buffer"],[24,38,26,36],[24,39,26,37,"i"],[24,40,26,38],[24,43,26,41],[24,44,26,42],[24,45,26,43],[24,49,26,48],[24,50,26,50],[25,4,27,2],[26,4,29,2],[26,11,29,9,"out"],[26,14,29,12],[27,2,30,0],[28,2,32,0,"exports"],[28,9,32,7],[28,10,32,8,"encrypt"],[28,17,32,15],[28,20,32,18],[28,30,32,28,"self"],[28,34,32,32],[28,36,32,34,"chunk"],[28,41,32,39],[28,43,32,41,"decrypt"],[28,50,32,48],[28,52,32,50],[29,4,33,2],[29,8,33,6,"len"],[29,11,33,9],[29,14,33,12,"chunk"],[29,19,33,17],[29,20,33,18,"length"],[29,26,33,24],[30,4,34,2],[30,8,34,6,"out"],[30,11,34,9],[30,14,34,12,"Buffer"],[30,20,34,18],[30,21,34,19,"allocUnsafe"],[30,32,34,30],[30,33,34,31,"len"],[30,36,34,34],[30,37,34,35],[31,4,35,2],[31,8,35,6,"i"],[31,9,35,7],[31,12,35,10],[31,13,35,11],[31,14,35,12],[32,4,37,2],[32,11,37,9],[32,13,37,11,"i"],[32,14,37,12],[32,17,37,15,"len"],[32,20,37,18],[32,22,37,20],[33,6,38,4,"out"],[33,9,38,7],[33,10,38,8,"i"],[33,11,38,9],[33,12,38,10],[33,15,38,13,"encryptByte"],[33,26,38,24],[33,27,38,25,"self"],[33,31,38,29],[33,33,38,31,"chunk"],[33,38,38,36],[33,39,38,37,"i"],[33,40,38,38],[33,41,38,39],[33,43,38,41,"decrypt"],[33,50,38,48],[33,51,38,49],[34,4,39,2],[35,4,41,2],[35,11,41,9,"out"],[35,14,41,12],[36,2,42,0],[36,3,42,1],[37,0,42,1],[37,3]],"functionMap":{"names":["<global>","encryptByte","shiftIn","exports.encrypt"],"mappings":"AAA;ACE;CDc;AEE;CFW;kBGE;CHU"}},"type":"js/module"}]}