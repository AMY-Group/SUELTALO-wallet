{"dependencies":[{"name":"@noble/hashes/sha2.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":257},"end":{"line":9,"column":47,"index":304}}],"key":"6+AQdZFmgXxbBRsj7vXjiW169Ao=","exportNames":["*"]}},{"name":"@noble/hashes/utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":305},"end":{"line":10,"column":74,"index":379}}],"key":"9JUbQ31V1iDWPVrlEOLWo2H+V7Q=","exportNames":["*"]}},{"name":"./abstract/curve.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":11,"column":0,"index":380},"end":{"line":11,"column":48,"index":428}}],"key":"aA5jjFGGjX4GOw/FS2nK17UOhXQ=","exportNames":["*"]}},{"name":"./abstract/edwards.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":12,"column":0,"index":429},"end":{"line":12,"column":75,"index":504}}],"key":"huc/9FhnHVOEeFoK1MBBo0sg5vQ=","exportNames":["*"]}},{"name":"./abstract/hash-to-curve.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":13,"column":0,"index":505},"end":{"line":13,"column":93,"index":598}}],"key":"6cIrPYlRjjJUQl2gr4hN6UWsQZg=","exportNames":["*"]}},{"name":"./abstract/modular.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":14,"column":0,"index":599},"end":{"line":14,"column":99,"index":698}}],"key":"x/hC1jRUt/ly9bL40f8FeUx///E=","exportNames":["*"]}},{"name":"./abstract/montgomery.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":15,"column":0,"index":699},"end":{"line":15,"column":54,"index":753}}],"key":"ld9obsz1IIawMjzsCFr0eOuZ4YA=","exportNames":["*"]}},{"name":"./utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":16,"column":0,"index":754},"end":{"line":16,"column":70,"index":824}}],"key":"NIaSEHO1E48gsZc7jH9Ex1xTHgE=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.edwardsToMontgomery = exports.ed25519ph = exports.ed25519ctx = exports.ed25519_hasher = exports.ed25519 = exports.RistrettoPoint = exports.ED25519_TORSION_SUBGROUP = void 0;\n  exports.edwardsToMontgomeryPriv = edwardsToMontgomeryPriv;\n  exports.edwardsToMontgomeryPub = edwardsToMontgomeryPub;\n  exports.x25519 = exports.ristretto255_hasher = exports.ristretto255 = exports.hash_to_ristretto255 = exports.hashToRistretto255 = exports.hashToCurve = exports.encodeToCurve = void 0;\n  var _sha = require(_dependencyMap[0], \"@noble/hashes/sha2.js\");\n  var _utils = require(_dependencyMap[1], \"@noble/hashes/utils.js\");\n  var _curve = require(_dependencyMap[2], \"./abstract/curve.js\");\n  var _edwards = require(_dependencyMap[3], \"./abstract/edwards.js\");\n  var _hashToCurve = require(_dependencyMap[4], \"./abstract/hash-to-curve.js\");\n  var _modular = require(_dependencyMap[5], \"./abstract/modular.js\");\n  var _montgomery = require(_dependencyMap[6], \"./abstract/montgomery.js\");\n  var _utils2 = require(_dependencyMap[7], \"./utils.js\");\n  /**\n   * ed25519 Twisted Edwards curve with following addons:\n   * - X25519 ECDH\n   * - Ristretto cofactor elimination\n   * - Elligator hash-to-group / point indistinguishability\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n  // prettier-ignore\n  const _0n = /* @__PURE__ */BigInt(0),\n    _1n = BigInt(1),\n    _2n = BigInt(2),\n    _3n = BigInt(3);\n  // prettier-ignore\n  const _5n = BigInt(5),\n    _8n = BigInt(8);\n  // P = 2n**255n-19n\n  const ed25519_CURVE_p = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffed');\n  // N = 2n**252n + 27742317777372353535851937790883648493n\n  // a = Fp.create(BigInt(-1))\n  // d = -121665/121666 a.k.a. Fp.neg(121665 * Fp.inv(121666))\n  const ed25519_CURVE = /* @__PURE__ */(() => ({\n    p: ed25519_CURVE_p,\n    n: BigInt('0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed'),\n    h: _8n,\n    a: BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec'),\n    d: BigInt('0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3'),\n    Gx: BigInt('0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a'),\n    Gy: BigInt('0x6666666666666666666666666666666666666666666666666666666666666658')\n  }))();\n  function ed25519_pow_2_252_3(x) {\n    // prettier-ignore\n    const _10n = BigInt(10),\n      _20n = BigInt(20),\n      _40n = BigInt(40),\n      _80n = BigInt(80);\n    const P = ed25519_CURVE_p;\n    const x2 = x * x % P;\n    const b2 = x2 * x % P; // x^3, 11\n    const b4 = (0, _modular.pow2)(b2, _2n, P) * b2 % P; // x^15, 1111\n    const b5 = (0, _modular.pow2)(b4, _1n, P) * x % P; // x^31\n    const b10 = (0, _modular.pow2)(b5, _5n, P) * b5 % P;\n    const b20 = (0, _modular.pow2)(b10, _10n, P) * b10 % P;\n    const b40 = (0, _modular.pow2)(b20, _20n, P) * b20 % P;\n    const b80 = (0, _modular.pow2)(b40, _40n, P) * b40 % P;\n    const b160 = (0, _modular.pow2)(b80, _80n, P) * b80 % P;\n    const b240 = (0, _modular.pow2)(b160, _80n, P) * b80 % P;\n    const b250 = (0, _modular.pow2)(b240, _10n, P) * b10 % P;\n    const pow_p_5_8 = (0, _modular.pow2)(b250, _2n, P) * x % P;\n    // ^ To pow to (p+3)/8, multiply it by x.\n    return {\n      pow_p_5_8,\n      b2\n    };\n  }\n  function adjustScalarBytes(bytes) {\n    // Section 5: For X25519, in order to decode 32 random bytes as an integer scalar,\n    // set the three least significant bits of the first byte\n    bytes[0] &= 248; // 0b1111_1000\n    // and the most significant bit of the last to zero,\n    bytes[31] &= 127; // 0b0111_1111\n    // set the second most significant bit of the last byte to 1\n    bytes[31] |= 64; // 0b0100_0000\n    return bytes;\n  }\n  // √(-1) aka √(a) aka 2^((p-1)/4)\n  // Fp.sqrt(Fp.neg(1))\n  const ED25519_SQRT_M1 = /* @__PURE__ */BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\n  // sqrt(u/v)\n  function uvRatio(u, v) {\n    const P = ed25519_CURVE_p;\n    const v3 = (0, _modular.mod)(v * v * v, P); // v³\n    const v7 = (0, _modular.mod)(v3 * v3 * v, P); // v⁷\n    // (p+3)/8 and (p-5)/8\n    const pow = ed25519_pow_2_252_3(u * v7).pow_p_5_8;\n    let x = (0, _modular.mod)(u * v3 * pow, P); // (uv³)(uv⁷)^(p-5)/8\n    const vx2 = (0, _modular.mod)(v * x * x, P); // vx²\n    const root1 = x; // First root candidate\n    const root2 = (0, _modular.mod)(x * ED25519_SQRT_M1, P); // Second root candidate\n    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n    const useRoot2 = vx2 === (0, _modular.mod)(-u, P); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === (0, _modular.mod)(-u * ED25519_SQRT_M1, P); // There is no valid root, vx² = -u√(-1)\n    if (useRoot1) x = root1;\n    if (useRoot2 || noRoot) x = root2; // We return root2 anyway, for const-time\n    if ((0, _modular.isNegativeLE)(x, P)) x = (0, _modular.mod)(-x, P);\n    return {\n      isValid: useRoot1 || useRoot2,\n      value: x\n    };\n  }\n  const Fp = /* @__PURE__ */(() => (0, _modular.Field)(ed25519_CURVE.p, {\n    isLE: true\n  }))();\n  const Fn = /* @__PURE__ */(() => (0, _modular.Field)(ed25519_CURVE.n, {\n    isLE: true\n  }))();\n  const ed25519Defaults = /* @__PURE__ */(() => Object.assign({}, ed25519_CURVE, {\n    Fp,\n    hash: _sha.sha512,\n    adjustScalarBytes,\n    // dom2\n    // Ratio of u to v. Allows us to combine inversion and square root. Uses algo from RFC8032 5.1.3.\n    // Constant-time, u/√v\n    uvRatio\n  }))();\n  /**\n   * ed25519 curve with EdDSA signatures.\n   * @example\n   * import { ed25519 } from '@noble/curves/ed25519';\n   * const { secretKey, publicKey } = ed25519.keygen();\n   * const msg = new TextEncoder().encode('hello');\n   * const sig = ed25519.sign(msg, priv);\n   * ed25519.verify(sig, msg, pub); // Default mode: follows ZIP215\n   * ed25519.verify(sig, msg, pub, { zip215: false }); // RFC8032 / FIPS 186-5\n   */\n  const ed25519 = exports.ed25519 = /* @__PURE__ */(() => (0, _edwards.twistedEdwards)(ed25519Defaults))();\n  function ed25519_domain(data, ctx, phflag) {\n    if (ctx.length > 255) throw new Error('Context is too big');\n    return (0, _utils.concatBytes)((0, _utils.utf8ToBytes)('SigEd25519 no Ed25519 collisions'), new Uint8Array([phflag ? 1 : 0, ctx.length]), ctx, data);\n  }\n  /** Context of ed25519. Uses context for domain separation. */\n  const ed25519ctx = exports.ed25519ctx = /* @__PURE__ */(() => (0, _edwards.twistedEdwards)(Object.assign({}, ed25519Defaults, {\n    domain: ed25519_domain\n  })))();\n  /** Prehashed version of ed25519. Accepts already-hashed messages in sign() and verify(). */\n  const ed25519ph = exports.ed25519ph = /* @__PURE__ */(() => (0, _edwards.twistedEdwards)(Object.assign({}, ed25519Defaults, {\n    domain: ed25519_domain,\n    prehash: _sha.sha512\n  })))();\n  /**\n   * ECDH using curve25519 aka x25519.\n   * @example\n   * import { x25519 } from '@noble/curves/ed25519';\n   * const priv = 'a546e36bf0527c9d3b16154b82465edd62144c0ac1fc5a18506a2244ba449ac4';\n   * const pub = 'e6db6867583030db3594c1a424b15f7c726624ec26b3353b10a903a6d0ab1c4c';\n   * x25519.getSharedSecret(priv, pub) === x25519.scalarMult(priv, pub); // aliases\n   * x25519.getPublicKey(priv) === x25519.scalarMultBase(priv);\n   * x25519.getPublicKey(x25519.utils.randomSecretKey());\n   */\n  const x25519 = exports.x25519 = /* @__PURE__ */(() => {\n    const P = Fp.ORDER;\n    return (0, _montgomery.montgomery)({\n      P,\n      type: 'x25519',\n      powPminus2: x => {\n        // x^(p-2) aka x^(2^255-21)\n        const {\n          pow_p_5_8,\n          b2\n        } = ed25519_pow_2_252_3(x);\n        return (0, _modular.mod)((0, _modular.pow2)(pow_p_5_8, _3n, P) * b2, P);\n      },\n      adjustScalarBytes\n    });\n  })();\n  // Hash To Curve Elligator2 Map (NOTE: different from ristretto255 elligator)\n  // NOTE: very important part is usage of FpSqrtEven for ELL2_C1_EDWARDS, since\n  // SageMath returns different root first and everything falls apart\n  const ELL2_C1 = /* @__PURE__ */(() => (ed25519_CURVE_p + _3n) / _8n)(); // 1. c1 = (q + 3) / 8       # Integer arithmetic\n  const ELL2_C2 = /* @__PURE__ */(() => Fp.pow(_2n, ELL2_C1))(); // 2. c2 = 2^c1\n  const ELL2_C3 = /* @__PURE__ */(() => Fp.sqrt(Fp.neg(Fp.ONE)))(); // 3. c3 = sqrt(-1)\n  // prettier-ignore\n  function map_to_curve_elligator2_curve25519(u) {\n    const ELL2_C4 = (ed25519_CURVE_p - _5n) / _8n; // 4. c4 = (q - 5) / 8       # Integer arithmetic\n    const ELL2_J = BigInt(486662);\n    let tv1 = Fp.sqr(u); //  1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, _2n); //  2.  tv1 = 2 * tv1\n    let xd = Fp.add(tv1, Fp.ONE); //  3.   xd = tv1 + 1         # Nonzero: -1 is square (mod p), tv1 is not\n    let x1n = Fp.neg(ELL2_J); //  4.  x1n = -J              # x1 = x1n / xd = -J / (1 + 2 * u^2)\n    let tv2 = Fp.sqr(xd); //  5.  tv2 = xd^2\n    let gxd = Fp.mul(tv2, xd); //  6.  gxd = tv2 * xd        # gxd = xd^3\n    let gx1 = Fp.mul(tv1, ELL2_J); //  7.  gx1 = J * tv1         # x1n + J * xd\n    gx1 = Fp.mul(gx1, x1n); //  8.  gx1 = gx1 * x1n       # x1n^2 + J * x1n * xd\n    gx1 = Fp.add(gx1, tv2); //  9.  gx1 = gx1 + tv2       # x1n^2 + J * x1n * xd + xd^2\n    gx1 = Fp.mul(gx1, x1n); //  10. gx1 = gx1 * x1n       # x1n^3 + J * x1n^2 * xd + x1n * xd^2\n    let tv3 = Fp.sqr(gxd); //  11. tv3 = gxd^2\n    tv2 = Fp.sqr(tv3); //  12. tv2 = tv3^2           # gxd^4\n    tv3 = Fp.mul(tv3, gxd); //  13. tv3 = tv3 * gxd       # gxd^3\n    tv3 = Fp.mul(tv3, gx1); //  14. tv3 = tv3 * gx1       # gx1 * gxd^3\n    tv2 = Fp.mul(tv2, tv3); //  15. tv2 = tv2 * tv3       # gx1 * gxd^7\n    let y11 = Fp.pow(tv2, ELL2_C4); //  16. y11 = tv2^c4        # (gx1 * gxd^7)^((p - 5) / 8)\n    y11 = Fp.mul(y11, tv3); //  17. y11 = y11 * tv3       # gx1*gxd^3*(gx1*gxd^7)^((p-5)/8)\n    let y12 = Fp.mul(y11, ELL2_C3); //  18. y12 = y11 * c3\n    tv2 = Fp.sqr(y11); //  19. tv2 = y11^2\n    tv2 = Fp.mul(tv2, gxd); //  20. tv2 = tv2 * gxd\n    let e1 = Fp.eql(tv2, gx1); //  21.  e1 = tv2 == gx1\n    let y1 = Fp.cmov(y12, y11, e1); //  22.  y1 = CMOV(y12, y11, e1)  # If g(x1) is square, this is its sqrt\n    let x2n = Fp.mul(x1n, tv1); //  23. x2n = x1n * tv1       # x2 = x2n / xd = 2 * u^2 * x1n / xd\n    let y21 = Fp.mul(y11, u); //  24. y21 = y11 * u\n    y21 = Fp.mul(y21, ELL2_C2); //  25. y21 = y21 * c2\n    let y22 = Fp.mul(y21, ELL2_C3); //  26. y22 = y21 * c3\n    let gx2 = Fp.mul(gx1, tv1); //  27. gx2 = gx1 * tv1       # g(x2) = gx2 / gxd = 2 * u^2 * g(x1)\n    tv2 = Fp.sqr(y21); //  28. tv2 = y21^2\n    tv2 = Fp.mul(tv2, gxd); //  29. tv2 = tv2 * gxd\n    let e2 = Fp.eql(tv2, gx2); //  30.  e2 = tv2 == gx2\n    let y2 = Fp.cmov(y22, y21, e2); //  31.  y2 = CMOV(y22, y21, e2)  # If g(x2) is square, this is its sqrt\n    tv2 = Fp.sqr(y1); //  32. tv2 = y1^2\n    tv2 = Fp.mul(tv2, gxd); //  33. tv2 = tv2 * gxd\n    let e3 = Fp.eql(tv2, gx1); //  34.  e3 = tv2 == gx1\n    let xn = Fp.cmov(x2n, x1n, e3); //  35.  xn = CMOV(x2n, x1n, e3)  # If e3, x = x1, else x = x2\n    let y = Fp.cmov(y2, y1, e3); //  36.   y = CMOV(y2, y1, e3)    # If e3, y = y1, else y = y2\n    let e4 = Fp.isOdd(y); //  37.  e4 = sgn0(y) == 1        # Fix sign of y\n    y = Fp.cmov(y, Fp.neg(y), e3 !== e4); //  38.   y = CMOV(y, -y, e3 XOR e4)\n    return {\n      xMn: xn,\n      xMd: xd,\n      yMn: y,\n      yMd: _1n\n    }; //  39. return (xn, xd, y, 1)\n  }\n  const ELL2_C1_EDWARDS = /* @__PURE__ */(() => (0, _modular.FpSqrtEven)(Fp, Fp.neg(BigInt(486664))))(); // sgn0(c1) MUST equal 0\n  function map_to_curve_elligator2_edwards25519(u) {\n    const {\n      xMn,\n      xMd,\n      yMn,\n      yMd\n    } = map_to_curve_elligator2_curve25519(u); //  1.  (xMn, xMd, yMn, yMd) =\n    // map_to_curve_elligator2_curve25519(u)\n    let xn = Fp.mul(xMn, yMd); //  2.  xn = xMn * yMd\n    xn = Fp.mul(xn, ELL2_C1_EDWARDS); //  3.  xn = xn * c1\n    let xd = Fp.mul(xMd, yMn); //  4.  xd = xMd * yMn    # xn / xd = c1 * xM / yM\n    let yn = Fp.sub(xMn, xMd); //  5.  yn = xMn - xMd\n    let yd = Fp.add(xMn, xMd); //  6.  yd = xMn + xMd    # (n / d - 1) / (n / d + 1) = (n - d) / (n + d)\n    let tv1 = Fp.mul(xd, yd); //  7. tv1 = xd * yd\n    let e = Fp.eql(tv1, Fp.ZERO); //  8.   e = tv1 == 0\n    xn = Fp.cmov(xn, Fp.ZERO, e); //  9.  xn = CMOV(xn, 0, e)\n    xd = Fp.cmov(xd, Fp.ONE, e); //  10. xd = CMOV(xd, 1, e)\n    yn = Fp.cmov(yn, Fp.ONE, e); //  11. yn = CMOV(yn, 1, e)\n    yd = Fp.cmov(yd, Fp.ONE, e); //  12. yd = CMOV(yd, 1, e)\n    const [xd_inv, yd_inv] = (0, _modular.FpInvertBatch)(Fp, [xd, yd], true); // batch division\n    return {\n      x: Fp.mul(xn, xd_inv),\n      y: Fp.mul(yn, yd_inv)\n    }; //  13. return (xn, xd, yn, yd)\n  }\n  /** Hashing to ed25519 points / field. RFC 9380 methods. */\n  const ed25519_hasher = exports.ed25519_hasher = /* @__PURE__ */(() => (0, _hashToCurve.createHasher)(ed25519.Point, scalars => map_to_curve_elligator2_edwards25519(scalars[0]), {\n    DST: 'edwards25519_XMD:SHA-512_ELL2_RO_',\n    encodeDST: 'edwards25519_XMD:SHA-512_ELL2_NU_',\n    p: ed25519_CURVE_p,\n    m: 1,\n    k: 128,\n    expand: 'xmd',\n    hash: _sha.sha512\n  }))();\n  // √(-1) aka √(a) aka 2^((p-1)/4)\n  const SQRT_M1 = ED25519_SQRT_M1;\n  // √(ad - 1)\n  const SQRT_AD_MINUS_ONE = /* @__PURE__ */BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\n  // 1 / √(a-d)\n  const INVSQRT_A_MINUS_D = /* @__PURE__ */BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\n  // 1-d²\n  const ONE_MINUS_D_SQ = /* @__PURE__ */BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\n  // (d-1)²\n  const D_MINUS_ONE_SQ = /* @__PURE__ */BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\n  // Calculates 1/√(number)\n  const invertSqrt = number => uvRatio(_1n, number);\n  const MAX_255B = /* @__PURE__ */BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n  const bytes255ToNumberLE = bytes => ed25519.Point.Fp.create((0, _utils2.bytesToNumberLE)(bytes) & MAX_255B);\n  /**\n   * Computes Elligator map for Ristretto255.\n   * Described in [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#appendix-B) and on\n   * the [website](https://ristretto.group/formulas/elligator.html).\n   */\n  function calcElligatorRistrettoMap(r0) {\n    const {\n      d\n    } = ed25519_CURVE;\n    const P = ed25519_CURVE_p;\n    const mod = n => Fp.create(n);\n    const r = mod(SQRT_M1 * r0 * r0); // 1\n    const Ns = mod((r + _1n) * ONE_MINUS_D_SQ); // 2\n    let c = BigInt(-1); // 3\n    const D = mod((c - d * r) * mod(r + d)); // 4\n    let {\n      isValid: Ns_D_is_sq,\n      value: s\n    } = uvRatio(Ns, D); // 5\n    let s_ = mod(s * r0); // 6\n    if (!(0, _modular.isNegativeLE)(s_, P)) s_ = mod(-s_);\n    if (!Ns_D_is_sq) s = s_; // 7\n    if (!Ns_D_is_sq) c = r; // 8\n    const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D); // 9\n    const s2 = s * s;\n    const W0 = mod((s + s) * D); // 10\n    const W1 = mod(Nt * SQRT_AD_MINUS_ONE); // 11\n    const W2 = mod(_1n - s2); // 12\n    const W3 = mod(_1n + s2); // 13\n    return new ed25519.Point(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n  }\n  function ristretto255_map(bytes) {\n    (0, _utils.abytes)(bytes, 64);\n    const r1 = bytes255ToNumberLE(bytes.subarray(0, 32));\n    const R1 = calcElligatorRistrettoMap(r1);\n    const r2 = bytes255ToNumberLE(bytes.subarray(32, 64));\n    const R2 = calcElligatorRistrettoMap(r2);\n    return new _RistrettoPoint(R1.add(R2));\n  }\n  /**\n   * Wrapper over Edwards Point for ristretto255.\n   *\n   * Each ed25519/ExtendedPoint has 8 different equivalent points. This can be\n   * a source of bugs for protocols like ring signatures. Ristretto was created to solve this.\n   * Ristretto point operates in X:Y:Z:T extended coordinates like ExtendedPoint,\n   * but it should work in its own namespace: do not combine those two.\n   * See [RFC9496](https://www.rfc-editor.org/rfc/rfc9496).\n   */\n  class _RistrettoPoint extends _edwards.PrimeEdwardsPoint {\n    constructor(ep) {\n      super(ep);\n    }\n    static fromAffine(ap) {\n      return new _RistrettoPoint(ed25519.Point.fromAffine(ap));\n    }\n    assertSame(other) {\n      if (!(other instanceof _RistrettoPoint)) throw new Error('RistrettoPoint expected');\n    }\n    init(ep) {\n      return new _RistrettoPoint(ep);\n    }\n    /** @deprecated use `import { ristretto255_hasher } from '@noble/curves/ed25519.js';` */\n    static hashToCurve(hex) {\n      return ristretto255_map((0, _utils2.ensureBytes)('ristrettoHash', hex, 64));\n    }\n    static fromBytes(bytes) {\n      (0, _utils.abytes)(bytes, 32);\n      const {\n        a,\n        d\n      } = ed25519_CURVE;\n      const P = ed25519_CURVE_p;\n      const mod = n => Fp.create(n);\n      const s = bytes255ToNumberLE(bytes);\n      // 1. Check that s_bytes is the canonical encoding of a field element, or else abort.\n      // 3. Check that s is non-negative, or else abort\n      if (!(0, _utils2.equalBytes)(Fp.toBytes(s), bytes) || (0, _modular.isNegativeLE)(s, P)) throw new Error('invalid ristretto255 encoding 1');\n      const s2 = mod(s * s);\n      const u1 = mod(_1n + a * s2); // 4 (a is -1)\n      const u2 = mod(_1n - a * s2); // 5\n      const u1_2 = mod(u1 * u1);\n      const u2_2 = mod(u2 * u2);\n      const v = mod(a * d * u1_2 - u2_2); // 6\n      const {\n        isValid,\n        value: I\n      } = invertSqrt(mod(v * u2_2)); // 7\n      const Dx = mod(I * u2); // 8\n      const Dy = mod(I * Dx * v); // 9\n      let x = mod((s + s) * Dx); // 10\n      if ((0, _modular.isNegativeLE)(x, P)) x = mod(-x); // 10\n      const y = mod(u1 * Dy); // 11\n      const t = mod(x * y); // 12\n      if (!isValid || (0, _modular.isNegativeLE)(t, P) || y === _0n) throw new Error('invalid ristretto255 encoding 2');\n      return new _RistrettoPoint(new ed25519.Point(x, y, _1n, t));\n    }\n    /**\n     * Converts ristretto-encoded string to ristretto point.\n     * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-decode).\n     * @param hex Ristretto-encoded 32 bytes. Not every 32-byte string is valid ristretto encoding\n     */\n    static fromHex(hex) {\n      return _RistrettoPoint.fromBytes((0, _utils2.ensureBytes)('ristrettoHex', hex, 32));\n    }\n    static msm(points, scalars) {\n      return (0, _curve.pippenger)(_RistrettoPoint, ed25519.Point.Fn, points, scalars);\n    }\n    /**\n     * Encodes ristretto point to Uint8Array.\n     * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-encode).\n     */\n    toBytes() {\n      let {\n        X,\n        Y,\n        Z,\n        T\n      } = this.ep;\n      const P = ed25519_CURVE_p;\n      const mod = n => Fp.create(n);\n      const u1 = mod(mod(Z + Y) * mod(Z - Y)); // 1\n      const u2 = mod(X * Y); // 2\n      // Square root always exists\n      const u2sq = mod(u2 * u2);\n      const {\n        value: invsqrt\n      } = invertSqrt(mod(u1 * u2sq)); // 3\n      const D1 = mod(invsqrt * u1); // 4\n      const D2 = mod(invsqrt * u2); // 5\n      const zInv = mod(D1 * D2 * T); // 6\n      let D; // 7\n      if ((0, _modular.isNegativeLE)(T * zInv, P)) {\n        let _x = mod(Y * SQRT_M1);\n        let _y = mod(X * SQRT_M1);\n        X = _x;\n        Y = _y;\n        D = mod(D1 * INVSQRT_A_MINUS_D);\n      } else {\n        D = D2; // 8\n      }\n      if ((0, _modular.isNegativeLE)(X * zInv, P)) Y = mod(-Y); // 9\n      let s = mod((Z - Y) * D); // 10 (check footer's note, no sqrt(-a))\n      if ((0, _modular.isNegativeLE)(s, P)) s = mod(-s);\n      return Fp.toBytes(s); // 11\n    }\n    /**\n     * Compares two Ristretto points.\n     * Described in [RFC9496](https://www.rfc-editor.org/rfc/rfc9496#name-equals).\n     */\n    equals(other) {\n      this.assertSame(other);\n      const {\n        X: X1,\n        Y: Y1\n      } = this.ep;\n      const {\n        X: X2,\n        Y: Y2\n      } = other.ep;\n      const mod = n => Fp.create(n);\n      // (x1 * y2 == y1 * x2) | (y1 * y2 == x1 * x2)\n      const one = mod(X1 * Y2) === mod(Y1 * X2);\n      const two = mod(Y1 * Y2) === mod(X1 * X2);\n      return one || two;\n    }\n    is0() {\n      return this.equals(_RistrettoPoint.ZERO);\n    }\n  }\n  // Do NOT change syntax: the following gymnastics is done,\n  // because typescript strips comments, which makes bundlers disable tree-shaking.\n  // prettier-ignore\n  _RistrettoPoint.BASE = /* @__PURE__ */(() => new _RistrettoPoint(ed25519.Point.BASE))();\n  // prettier-ignore\n  _RistrettoPoint.ZERO = /* @__PURE__ */(() => new _RistrettoPoint(ed25519.Point.ZERO))();\n  // prettier-ignore\n  _RistrettoPoint.Fp = /* @__PURE__ */(() => Fp)();\n  // prettier-ignore\n  _RistrettoPoint.Fn = /* @__PURE__ */(() => Fn)();\n  const ristretto255 = exports.ristretto255 = {\n    Point: _RistrettoPoint\n  };\n  /** Hashing to ristretto255 points / field. RFC 9380 methods. */\n  const ristretto255_hasher = exports.ristretto255_hasher = {\n    hashToCurve(msg, options) {\n      const DST = options?.DST || 'ristretto255_XMD:SHA-512_R255MAP_RO_';\n      const xmd = (0, _hashToCurve.expand_message_xmd)(msg, DST, 64, _sha.sha512);\n      return ristretto255_map(xmd);\n    },\n    hashToScalar(msg, options = {\n      DST: _hashToCurve._DST_scalar\n    }) {\n      const xmd = (0, _hashToCurve.expand_message_xmd)(msg, options.DST, 64, _sha.sha512);\n      return Fn.create((0, _utils2.bytesToNumberLE)(xmd));\n    }\n  };\n  // export const ristretto255_oprf: OPRF = createORPF({\n  //   name: 'ristretto255-SHA512',\n  //   Point: RistrettoPoint,\n  //   hash: sha512,\n  //   hashToGroup: ristretto255_hasher.hashToCurve,\n  //   hashToScalar: ristretto255_hasher.hashToScalar,\n  // });\n  /**\n   * Weird / bogus points, useful for debugging.\n   * All 8 ed25519 points of 8-torsion subgroup can be generated from the point\n   * T = `26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05`.\n   * ⟨T⟩ = { O, T, 2T, 3T, 4T, 5T, 6T, 7T }\n   */\n  const ED25519_TORSION_SUBGROUP = exports.ED25519_TORSION_SUBGROUP = ['0100000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a', '0000000000000000000000000000000000000000000000000000000000000080', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05', 'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f', '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85', '0000000000000000000000000000000000000000000000000000000000000000', 'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa'];\n  /** @deprecated use `ed25519.utils.toMontgomery` */\n  function edwardsToMontgomeryPub(edwardsPub) {\n    return ed25519.utils.toMontgomery((0, _utils2.ensureBytes)('pub', edwardsPub));\n  }\n  /** @deprecated use `ed25519.utils.toMontgomery` */\n  const edwardsToMontgomery = exports.edwardsToMontgomery = edwardsToMontgomeryPub;\n  /** @deprecated use `ed25519.utils.toMontgomerySecret` */\n  function edwardsToMontgomeryPriv(edwardsPriv) {\n    return ed25519.utils.toMontgomerySecret((0, _utils2.ensureBytes)('pub', edwardsPriv));\n  }\n  /** @deprecated use `ristretto255.Point` */\n  const RistrettoPoint = exports.RistrettoPoint = _RistrettoPoint;\n  /** @deprecated use `import { ed25519_hasher } from '@noble/curves/ed25519.js';` */\n  const hashToCurve = exports.hashToCurve = /* @__PURE__ */(() => ed25519_hasher.hashToCurve)();\n  /** @deprecated use `import { ed25519_hasher } from '@noble/curves/ed25519.js';` */\n  const encodeToCurve = exports.encodeToCurve = /* @__PURE__ */(() => ed25519_hasher.encodeToCurve)();\n  /** @deprecated use `import { ristretto255_hasher } from '@noble/curves/ed25519.js';` */\n  const hashToRistretto255 = exports.hashToRistretto255 = /* @__PURE__ */(() => ristretto255_hasher.hashToCurve)();\n  /** @deprecated use `import { ristretto255_hasher } from '@noble/curves/ed25519.js';` */\n  const hash_to_ristretto255 = exports.hash_to_ristretto255 = /* @__PURE__ */(() => ristretto255_hasher.hashToCurve)();\n});","lineCount":508,"map":[[9,2,9,0],[9,6,9,0,"_sha"],[9,10,9,0],[9,13,9,0,"require"],[9,20,9,0],[9,21,9,0,"_dependencyMap"],[9,35,9,0],[10,2,10,0],[10,6,10,0,"_utils"],[10,12,10,0],[10,15,10,0,"require"],[10,22,10,0],[10,23,10,0,"_dependencyMap"],[10,37,10,0],[11,2,11,0],[11,6,11,0,"_curve"],[11,12,11,0],[11,15,11,0,"require"],[11,22,11,0],[11,23,11,0,"_dependencyMap"],[11,37,11,0],[12,2,12,0],[12,6,12,0,"_edwards"],[12,14,12,0],[12,17,12,0,"require"],[12,24,12,0],[12,25,12,0,"_dependencyMap"],[12,39,12,0],[13,2,13,0],[13,6,13,0,"_hashToCurve"],[13,18,13,0],[13,21,13,0,"require"],[13,28,13,0],[13,29,13,0,"_dependencyMap"],[13,43,13,0],[14,2,14,0],[14,6,14,0,"_modular"],[14,14,14,0],[14,17,14,0,"require"],[14,24,14,0],[14,25,14,0,"_dependencyMap"],[14,39,14,0],[15,2,15,0],[15,6,15,0,"_montgomery"],[15,17,15,0],[15,20,15,0,"require"],[15,27,15,0],[15,28,15,0,"_dependencyMap"],[15,42,15,0],[16,2,16,0],[16,6,16,0,"_utils2"],[16,13,16,0],[16,16,16,0,"require"],[16,23,16,0],[16,24,16,0,"_dependencyMap"],[16,38,16,0],[17,2,1,0],[18,0,2,0],[19,0,3,0],[20,0,4,0],[21,0,5,0],[22,0,6,0],[23,0,7,0],[24,2,8,0],[26,2,17,0],[27,2,18,0],[27,8,18,6,"_0n"],[27,11,18,9],[27,14,18,12],[27,29,18,28,"BigInt"],[27,35,18,34],[27,36,18,35],[27,37,18,36],[27,38,18,37],[28,4,18,39,"_1n"],[28,7,18,42],[28,10,18,45,"BigInt"],[28,16,18,51],[28,17,18,52],[28,18,18,53],[28,19,18,54],[29,4,18,56,"_2n"],[29,7,18,59],[29,10,18,62,"BigInt"],[29,16,18,68],[29,17,18,69],[29,18,18,70],[29,19,18,71],[30,4,18,73,"_3n"],[30,7,18,76],[30,10,18,79,"BigInt"],[30,16,18,85],[30,17,18,86],[30,18,18,87],[30,19,18,88],[31,2,19,0],[32,2,20,0],[32,8,20,6,"_5n"],[32,11,20,9],[32,14,20,12,"BigInt"],[32,20,20,18],[32,21,20,19],[32,22,20,20],[32,23,20,21],[33,4,20,23,"_8n"],[33,7,20,26],[33,10,20,29,"BigInt"],[33,16,20,35],[33,17,20,36],[33,18,20,37],[33,19,20,38],[34,2,21,0],[35,2,22,0],[35,8,22,6,"ed25519_CURVE_p"],[35,23,22,21],[35,26,22,24,"BigInt"],[35,32,22,30],[35,33,22,31],[35,101,22,99],[35,102,22,100],[36,2,23,0],[37,2,24,0],[38,2,25,0],[39,2,26,0],[39,8,26,6,"ed25519_CURVE"],[39,21,26,19],[39,24,26,22],[39,39,26,38],[39,40,26,39],[39,47,26,46],[40,4,27,4,"p"],[40,5,27,5],[40,7,27,7,"ed25519_CURVE_p"],[40,22,27,22],[41,4,28,4,"n"],[41,5,28,5],[41,7,28,7,"BigInt"],[41,13,28,13],[41,14,28,14],[41,82,28,82],[41,83,28,83],[42,4,29,4,"h"],[42,5,29,5],[42,7,29,7,"_8n"],[42,10,29,10],[43,4,30,4,"a"],[43,5,30,5],[43,7,30,7,"BigInt"],[43,13,30,13],[43,14,30,14],[43,82,30,82],[43,83,30,83],[44,4,31,4,"d"],[44,5,31,5],[44,7,31,7,"BigInt"],[44,13,31,13],[44,14,31,14],[44,82,31,82],[44,83,31,83],[45,4,32,4,"Gx"],[45,6,32,6],[45,8,32,8,"BigInt"],[45,14,32,14],[45,15,32,15],[45,83,32,83],[45,84,32,84],[46,4,33,4,"Gy"],[46,6,33,6],[46,8,33,8,"BigInt"],[46,14,33,14],[46,15,33,15],[46,83,33,83],[47,2,34,0],[47,3,34,1],[47,4,34,2],[47,6,34,4],[47,7,34,5],[48,2,35,0],[48,11,35,9,"ed25519_pow_2_252_3"],[48,30,35,28,"ed25519_pow_2_252_3"],[48,31,35,29,"x"],[48,32,35,30],[48,34,35,32],[49,4,36,4],[50,4,37,4],[50,10,37,10,"_10n"],[50,14,37,14],[50,17,37,17,"BigInt"],[50,23,37,23],[50,24,37,24],[50,26,37,26],[50,27,37,27],[51,6,37,29,"_20n"],[51,10,37,33],[51,13,37,36,"BigInt"],[51,19,37,42],[51,20,37,43],[51,22,37,45],[51,23,37,46],[52,6,37,48,"_40n"],[52,10,37,52],[52,13,37,55,"BigInt"],[52,19,37,61],[52,20,37,62],[52,22,37,64],[52,23,37,65],[53,6,37,67,"_80n"],[53,10,37,71],[53,13,37,74,"BigInt"],[53,19,37,80],[53,20,37,81],[53,22,37,83],[53,23,37,84],[54,4,38,4],[54,10,38,10,"P"],[54,11,38,11],[54,14,38,14,"ed25519_CURVE_p"],[54,29,38,29],[55,4,39,4],[55,10,39,10,"x2"],[55,12,39,12],[55,15,39,16,"x"],[55,16,39,17],[55,19,39,20,"x"],[55,20,39,21],[55,23,39,25,"P"],[55,24,39,26],[56,4,40,4],[56,10,40,10,"b2"],[56,12,40,12],[56,15,40,16,"x2"],[56,17,40,18],[56,20,40,21,"x"],[56,21,40,22],[56,24,40,26,"P"],[56,25,40,27],[56,26,40,28],[56,27,40,29],[57,4,41,4],[57,10,41,10,"b4"],[57,12,41,12],[57,15,41,16],[57,19,41,16,"pow2"],[57,32,41,20],[57,34,41,21,"b2"],[57,36,41,23],[57,38,41,25,"_2n"],[57,41,41,28],[57,43,41,30,"P"],[57,44,41,31],[57,45,41,32],[57,48,41,35,"b2"],[57,50,41,37],[57,53,41,41,"P"],[57,54,41,42],[57,55,41,43],[57,56,41,44],[58,4,42,4],[58,10,42,10,"b5"],[58,12,42,12],[58,15,42,16],[58,19,42,16,"pow2"],[58,32,42,20],[58,34,42,21,"b4"],[58,36,42,23],[58,38,42,25,"_1n"],[58,41,42,28],[58,43,42,30,"P"],[58,44,42,31],[58,45,42,32],[58,48,42,35,"x"],[58,49,42,36],[58,52,42,40,"P"],[58,53,42,41],[58,54,42,42],[58,55,42,43],[59,4,43,4],[59,10,43,10,"b10"],[59,13,43,13],[59,16,43,17],[59,20,43,17,"pow2"],[59,33,43,21],[59,35,43,22,"b5"],[59,37,43,24],[59,39,43,26,"_5n"],[59,42,43,29],[59,44,43,31,"P"],[59,45,43,32],[59,46,43,33],[59,49,43,36,"b5"],[59,51,43,38],[59,54,43,42,"P"],[59,55,43,43],[60,4,44,4],[60,10,44,10,"b20"],[60,13,44,13],[60,16,44,17],[60,20,44,17,"pow2"],[60,33,44,21],[60,35,44,22,"b10"],[60,38,44,25],[60,40,44,27,"_10n"],[60,44,44,31],[60,46,44,33,"P"],[60,47,44,34],[60,48,44,35],[60,51,44,38,"b10"],[60,54,44,41],[60,57,44,45,"P"],[60,58,44,46],[61,4,45,4],[61,10,45,10,"b40"],[61,13,45,13],[61,16,45,17],[61,20,45,17,"pow2"],[61,33,45,21],[61,35,45,22,"b20"],[61,38,45,25],[61,40,45,27,"_20n"],[61,44,45,31],[61,46,45,33,"P"],[61,47,45,34],[61,48,45,35],[61,51,45,38,"b20"],[61,54,45,41],[61,57,45,45,"P"],[61,58,45,46],[62,4,46,4],[62,10,46,10,"b80"],[62,13,46,13],[62,16,46,17],[62,20,46,17,"pow2"],[62,33,46,21],[62,35,46,22,"b40"],[62,38,46,25],[62,40,46,27,"_40n"],[62,44,46,31],[62,46,46,33,"P"],[62,47,46,34],[62,48,46,35],[62,51,46,38,"b40"],[62,54,46,41],[62,57,46,45,"P"],[62,58,46,46],[63,4,47,4],[63,10,47,10,"b160"],[63,14,47,14],[63,17,47,18],[63,21,47,18,"pow2"],[63,34,47,22],[63,36,47,23,"b80"],[63,39,47,26],[63,41,47,28,"_80n"],[63,45,47,32],[63,47,47,34,"P"],[63,48,47,35],[63,49,47,36],[63,52,47,39,"b80"],[63,55,47,42],[63,58,47,46,"P"],[63,59,47,47],[64,4,48,4],[64,10,48,10,"b240"],[64,14,48,14],[64,17,48,18],[64,21,48,18,"pow2"],[64,34,48,22],[64,36,48,23,"b160"],[64,40,48,27],[64,42,48,29,"_80n"],[64,46,48,33],[64,48,48,35,"P"],[64,49,48,36],[64,50,48,37],[64,53,48,40,"b80"],[64,56,48,43],[64,59,48,47,"P"],[64,60,48,48],[65,4,49,4],[65,10,49,10,"b250"],[65,14,49,14],[65,17,49,18],[65,21,49,18,"pow2"],[65,34,49,22],[65,36,49,23,"b240"],[65,40,49,27],[65,42,49,29,"_10n"],[65,46,49,33],[65,48,49,35,"P"],[65,49,49,36],[65,50,49,37],[65,53,49,40,"b10"],[65,56,49,43],[65,59,49,47,"P"],[65,60,49,48],[66,4,50,4],[66,10,50,10,"pow_p_5_8"],[66,19,50,19],[66,22,50,23],[66,26,50,23,"pow2"],[66,39,50,27],[66,41,50,28,"b250"],[66,45,50,32],[66,47,50,34,"_2n"],[66,50,50,37],[66,52,50,39,"P"],[66,53,50,40],[66,54,50,41],[66,57,50,44,"x"],[66,58,50,45],[66,61,50,49,"P"],[66,62,50,50],[67,4,51,4],[68,4,52,4],[68,11,52,11],[69,6,52,13,"pow_p_5_8"],[69,15,52,22],[70,6,52,24,"b2"],[71,4,52,27],[71,5,52,28],[72,2,53,0],[73,2,54,0],[73,11,54,9,"adjustScalarBytes"],[73,28,54,26,"adjustScalarBytes"],[73,29,54,27,"bytes"],[73,34,54,32],[73,36,54,34],[74,4,55,4],[75,4,56,4],[76,4,57,4,"bytes"],[76,9,57,9],[76,10,57,10],[76,11,57,11],[76,12,57,12],[76,16,57,16],[76,19,57,19],[76,20,57,20],[76,21,57,21],[77,4,58,4],[78,4,59,4,"bytes"],[78,9,59,9],[78,10,59,10],[78,12,59,12],[78,13,59,13],[78,17,59,17],[78,20,59,20],[78,21,59,21],[78,22,59,22],[79,4,60,4],[80,4,61,4,"bytes"],[80,9,61,9],[80,10,61,10],[80,12,61,12],[80,13,61,13],[80,17,61,17],[80,19,61,19],[80,20,61,20],[80,21,61,21],[81,4,62,4],[81,11,62,11,"bytes"],[81,16,62,16],[82,2,63,0],[83,2,64,0],[84,2,65,0],[85,2,66,0],[85,8,66,6,"ED25519_SQRT_M1"],[85,23,66,21],[85,26,66,24],[85,41,66,40,"BigInt"],[85,47,66,46],[85,48,66,47],[85,127,66,126],[85,128,66,127],[86,2,67,0],[87,2,68,0],[87,11,68,9,"uvRatio"],[87,18,68,16,"uvRatio"],[87,19,68,17,"u"],[87,20,68,18],[87,22,68,20,"v"],[87,23,68,21],[87,25,68,23],[88,4,69,4],[88,10,69,10,"P"],[88,11,69,11],[88,14,69,14,"ed25519_CURVE_p"],[88,29,69,29],[89,4,70,4],[89,10,70,10,"v3"],[89,12,70,12],[89,15,70,15],[89,19,70,15,"mod"],[89,31,70,18],[89,33,70,19,"v"],[89,34,70,20],[89,37,70,23,"v"],[89,38,70,24],[89,41,70,27,"v"],[89,42,70,28],[89,44,70,30,"P"],[89,45,70,31],[89,46,70,32],[89,47,70,33],[89,48,70,34],[90,4,71,4],[90,10,71,10,"v7"],[90,12,71,12],[90,15,71,15],[90,19,71,15,"mod"],[90,31,71,18],[90,33,71,19,"v3"],[90,35,71,21],[90,38,71,24,"v3"],[90,40,71,26],[90,43,71,29,"v"],[90,44,71,30],[90,46,71,32,"P"],[90,47,71,33],[90,48,71,34],[90,49,71,35],[90,50,71,36],[91,4,72,4],[92,4,73,4],[92,10,73,10,"pow"],[92,13,73,13],[92,16,73,16,"ed25519_pow_2_252_3"],[92,35,73,35],[92,36,73,36,"u"],[92,37,73,37],[92,40,73,40,"v7"],[92,42,73,42],[92,43,73,43],[92,44,73,44,"pow_p_5_8"],[92,53,73,53],[93,4,74,4],[93,8,74,8,"x"],[93,9,74,9],[93,12,74,12],[93,16,74,12,"mod"],[93,28,74,15],[93,30,74,16,"u"],[93,31,74,17],[93,34,74,20,"v3"],[93,36,74,22],[93,39,74,25,"pow"],[93,42,74,28],[93,44,74,30,"P"],[93,45,74,31],[93,46,74,32],[93,47,74,33],[93,48,74,34],[94,4,75,4],[94,10,75,10,"vx2"],[94,13,75,13],[94,16,75,16],[94,20,75,16,"mod"],[94,32,75,19],[94,34,75,20,"v"],[94,35,75,21],[94,38,75,24,"x"],[94,39,75,25],[94,42,75,28,"x"],[94,43,75,29],[94,45,75,31,"P"],[94,46,75,32],[94,47,75,33],[94,48,75,34],[94,49,75,35],[95,4,76,4],[95,10,76,10,"root1"],[95,15,76,15],[95,18,76,18,"x"],[95,19,76,19],[95,20,76,20],[95,21,76,21],[96,4,77,4],[96,10,77,10,"root2"],[96,15,77,15],[96,18,77,18],[96,22,77,18,"mod"],[96,34,77,21],[96,36,77,22,"x"],[96,37,77,23],[96,40,77,26,"ED25519_SQRT_M1"],[96,55,77,41],[96,57,77,43,"P"],[96,58,77,44],[96,59,77,45],[96,60,77,46],[96,61,77,47],[97,4,78,4],[97,10,78,10,"useRoot1"],[97,18,78,18],[97,21,78,21,"vx2"],[97,24,78,24],[97,29,78,29,"u"],[97,30,78,30],[97,31,78,31],[97,32,78,32],[98,4,79,4],[98,10,79,10,"useRoot2"],[98,18,79,18],[98,21,79,21,"vx2"],[98,24,79,24],[98,29,79,29],[98,33,79,29,"mod"],[98,45,79,32],[98,47,79,33],[98,48,79,34,"u"],[98,49,79,35],[98,51,79,37,"P"],[98,52,79,38],[98,53,79,39],[98,54,79,40],[98,55,79,41],[99,4,80,4],[99,10,80,10,"noRoot"],[99,16,80,16],[99,19,80,19,"vx2"],[99,22,80,22],[99,27,80,27],[99,31,80,27,"mod"],[99,43,80,30],[99,45,80,31],[99,46,80,32,"u"],[99,47,80,33],[99,50,80,36,"ED25519_SQRT_M1"],[99,65,80,51],[99,67,80,53,"P"],[99,68,80,54],[99,69,80,55],[99,70,80,56],[99,71,80,57],[100,4,81,4],[100,8,81,8,"useRoot1"],[100,16,81,16],[100,18,82,8,"x"],[100,19,82,9],[100,22,82,12,"root1"],[100,27,82,17],[101,4,83,4],[101,8,83,8,"useRoot2"],[101,16,83,16],[101,20,83,20,"noRoot"],[101,26,83,26],[101,28,84,8,"x"],[101,29,84,9],[101,32,84,12,"root2"],[101,37,84,17],[101,38,84,18],[101,39,84,19],[102,4,85,4],[102,8,85,8],[102,12,85,8,"isNegativeLE"],[102,33,85,20],[102,35,85,21,"x"],[102,36,85,22],[102,38,85,24,"P"],[102,39,85,25],[102,40,85,26],[102,42,86,8,"x"],[102,43,86,9],[102,46,86,12],[102,50,86,12,"mod"],[102,62,86,15],[102,64,86,16],[102,65,86,17,"x"],[102,66,86,18],[102,68,86,20,"P"],[102,69,86,21],[102,70,86,22],[103,4,87,4],[103,11,87,11],[104,6,87,13,"isValid"],[104,13,87,20],[104,15,87,22,"useRoot1"],[104,23,87,30],[104,27,87,34,"useRoot2"],[104,35,87,42],[105,6,87,44,"value"],[105,11,87,49],[105,13,87,51,"x"],[106,4,87,53],[106,5,87,54],[107,2,88,0],[108,2,89,0],[108,8,89,6,"Fp"],[108,10,89,8],[108,13,89,11],[108,28,89,27],[108,29,89,28],[108,35,89,34],[108,39,89,34,"Field"],[108,53,89,39],[108,55,89,40,"ed25519_CURVE"],[108,68,89,53],[108,69,89,54,"p"],[108,70,89,55],[108,72,89,57],[109,4,89,59,"isLE"],[109,8,89,63],[109,10,89,65],[110,2,89,70],[110,3,89,71],[110,4,89,72],[110,6,89,74],[110,7,89,75],[111,2,90,0],[111,8,90,6,"Fn"],[111,10,90,8],[111,13,90,11],[111,28,90,27],[111,29,90,28],[111,35,90,34],[111,39,90,34,"Field"],[111,53,90,39],[111,55,90,40,"ed25519_CURVE"],[111,68,90,53],[111,69,90,54,"n"],[111,70,90,55],[111,72,90,57],[112,4,90,59,"isLE"],[112,8,90,63],[112,10,90,65],[113,2,90,70],[113,3,90,71],[113,4,90,72],[113,6,90,74],[113,7,90,75],[114,2,91,0],[114,8,91,6,"ed25519Defaults"],[114,23,91,21],[114,26,91,24],[114,41,91,40],[114,42,91,41],[114,48,91,41,"Object"],[114,54,91,41],[114,55,91,41,"assign"],[114,61,91,41],[114,66,92,7,"ed25519_CURVE"],[114,79,92,20],[115,4,93,4,"Fp"],[115,6,93,6],[116,4,94,4,"hash"],[116,8,94,8],[116,10,94,10,"sha512"],[116,21,94,16],[117,4,95,4,"adjustScalarBytes"],[117,21,95,21],[118,4,96,4],[119,4,97,4],[120,4,98,4],[121,4,99,4,"uvRatio"],[122,2,99,11],[122,4,100,2],[122,6,100,4],[122,7,100,5],[123,2,101,0],[124,0,102,0],[125,0,103,0],[126,0,104,0],[127,0,105,0],[128,0,106,0],[129,0,107,0],[130,0,108,0],[131,0,109,0],[132,0,110,0],[133,2,111,7],[133,8,111,13,"ed25519"],[133,15,111,20],[133,18,111,20,"exports"],[133,25,111,20],[133,26,111,20,"ed25519"],[133,33,111,20],[133,36,111,23],[133,51,111,39],[133,52,111,40],[133,58,111,46],[133,62,111,46,"twistedEdwards"],[133,85,111,60],[133,87,111,61,"ed25519Defaults"],[133,102,111,76],[133,103,111,77],[133,105,111,79],[133,106,111,80],[134,2,112,0],[134,11,112,9,"ed25519_domain"],[134,25,112,23,"ed25519_domain"],[134,26,112,24,"data"],[134,30,112,28],[134,32,112,30,"ctx"],[134,35,112,33],[134,37,112,35,"phflag"],[134,43,112,41],[134,45,112,43],[135,4,113,4],[135,8,113,8,"ctx"],[135,11,113,11],[135,12,113,12,"length"],[135,18,113,18],[135,21,113,21],[135,24,113,24],[135,26,114,8],[135,32,114,14],[135,36,114,18,"Error"],[135,41,114,23],[135,42,114,24],[135,62,114,44],[135,63,114,45],[136,4,115,4],[136,11,115,11],[136,15,115,11,"concatBytes"],[136,33,115,22],[136,35,115,23],[136,39,115,23,"utf8ToBytes"],[136,57,115,34],[136,59,115,35],[136,93,115,69],[136,94,115,70],[136,96,115,72],[136,100,115,76,"Uint8Array"],[136,110,115,86],[136,111,115,87],[136,112,115,88,"phflag"],[136,118,115,94],[136,121,115,97],[136,122,115,98],[136,125,115,101],[136,126,115,102],[136,128,115,104,"ctx"],[136,131,115,107],[136,132,115,108,"length"],[136,138,115,114],[136,139,115,115],[136,140,115,116],[136,142,115,118,"ctx"],[136,145,115,121],[136,147,115,123,"data"],[136,151,115,127],[136,152,115,128],[137,2,116,0],[138,2,117,0],[139,2,118,7],[139,8,118,13,"ed25519ctx"],[139,18,118,23],[139,21,118,23,"exports"],[139,28,118,23],[139,29,118,23,"ed25519ctx"],[139,39,118,23],[139,42,118,26],[139,57,118,42],[139,58,118,43],[139,64,118,49],[139,68,118,49,"twistedEdwards"],[139,91,118,63],[139,93,118,63,"Object"],[139,99,118,63],[139,100,118,63,"assign"],[139,106,118,63],[139,111,119,7,"ed25519Defaults"],[139,126,119,22],[140,4,120,4,"domain"],[140,10,120,10],[140,12,120,12,"ed25519_domain"],[141,2,120,26],[141,4,121,1],[141,5,121,2],[141,7,121,4],[141,8,121,5],[142,2,122,0],[143,2,123,7],[143,8,123,13,"ed25519ph"],[143,17,123,22],[143,20,123,22,"exports"],[143,27,123,22],[143,28,123,22,"ed25519ph"],[143,37,123,22],[143,40,123,25],[143,55,123,41],[143,56,123,42],[143,62,123,48],[143,66,123,48,"twistedEdwards"],[143,89,123,62],[143,91,123,63,"Object"],[143,97,123,69],[143,98,123,70,"assign"],[143,104,123,76],[143,105,123,77],[143,106,123,78],[143,107,123,79],[143,109,123,81,"ed25519Defaults"],[143,124,123,96],[143,126,123,98],[144,4,124,4,"domain"],[144,10,124,10],[144,12,124,12,"ed25519_domain"],[144,26,124,26],[145,4,125,4,"prehash"],[145,11,125,11],[145,13,125,13,"sha512"],[146,2,126,0],[146,3,126,1],[146,4,126,2],[146,5,126,3],[146,7,126,5],[146,8,126,6],[147,2,127,0],[148,0,128,0],[149,0,129,0],[150,0,130,0],[151,0,131,0],[152,0,132,0],[153,0,133,0],[154,0,134,0],[155,0,135,0],[156,0,136,0],[157,2,137,7],[157,8,137,13,"x25519"],[157,14,137,19],[157,17,137,19,"exports"],[157,24,137,19],[157,25,137,19,"x25519"],[157,31,137,19],[157,34,137,22],[157,49,137,38],[157,50,137,39],[157,56,137,45],[158,4,138,4],[158,10,138,10,"P"],[158,11,138,11],[158,14,138,14,"Fp"],[158,16,138,16],[158,17,138,17,"ORDER"],[158,22,138,22],[159,4,139,4],[159,11,139,11],[159,15,139,11,"montgomery"],[159,37,139,21],[159,39,139,22],[160,6,140,8,"P"],[160,7,140,9],[161,6,141,8,"type"],[161,10,141,12],[161,12,141,14],[161,20,141,22],[162,6,142,8,"powPminus2"],[162,16,142,18],[162,18,142,21,"x"],[162,19,142,22],[162,23,142,27],[163,8,143,12],[164,8,144,12],[164,14,144,18],[165,10,144,20,"pow_p_5_8"],[165,19,144,29],[166,10,144,31,"b2"],[167,8,144,34],[167,9,144,35],[167,12,144,38,"ed25519_pow_2_252_3"],[167,31,144,57],[167,32,144,58,"x"],[167,33,144,59],[167,34,144,60],[168,8,145,12],[168,15,145,19],[168,19,145,19,"mod"],[168,31,145,22],[168,33,145,23],[168,37,145,23,"pow2"],[168,50,145,27],[168,52,145,28,"pow_p_5_8"],[168,61,145,37],[168,63,145,39,"_3n"],[168,66,145,42],[168,68,145,44,"P"],[168,69,145,45],[168,70,145,46],[168,73,145,49,"b2"],[168,75,145,51],[168,77,145,53,"P"],[168,78,145,54],[168,79,145,55],[169,6,146,8],[169,7,146,9],[170,6,147,8,"adjustScalarBytes"],[171,4,148,4],[171,5,148,5],[171,6,148,6],[172,2,149,0],[172,3,149,1],[172,5,149,3],[172,6,149,4],[173,2,150,0],[174,2,151,0],[175,2,152,0],[176,2,153,0],[176,8,153,6,"ELL2_C1"],[176,15,153,13],[176,18,153,16],[176,33,153,32],[176,34,153,33],[176,40,153,39],[176,41,153,40,"ed25519_CURVE_p"],[176,56,153,55],[176,59,153,58,"_3n"],[176,62,153,61],[176,66,153,65,"_8n"],[176,69,153,68],[176,71,153,70],[176,72,153,71],[176,73,153,72],[176,74,153,73],[177,2,154,0],[177,8,154,6,"ELL2_C2"],[177,15,154,13],[177,18,154,16],[177,33,154,32],[177,34,154,33],[177,40,154,39,"Fp"],[177,42,154,41],[177,43,154,42,"pow"],[177,46,154,45],[177,47,154,46,"_2n"],[177,50,154,49],[177,52,154,51,"ELL2_C1"],[177,59,154,58],[177,60,154,59],[177,62,154,61],[177,63,154,62],[177,64,154,63],[177,65,154,64],[178,2,155,0],[178,8,155,6,"ELL2_C3"],[178,15,155,13],[178,18,155,16],[178,33,155,32],[178,34,155,33],[178,40,155,39,"Fp"],[178,42,155,41],[178,43,155,42,"sqrt"],[178,47,155,46],[178,48,155,47,"Fp"],[178,50,155,49],[178,51,155,50,"neg"],[178,54,155,53],[178,55,155,54,"Fp"],[178,57,155,56],[178,58,155,57,"ONE"],[178,61,155,60],[178,62,155,61],[178,63,155,62],[178,65,155,64],[178,66,155,65],[178,67,155,66],[178,68,155,67],[179,2,156,0],[180,2,157,0],[180,11,157,9,"map_to_curve_elligator2_curve25519"],[180,45,157,43,"map_to_curve_elligator2_curve25519"],[180,46,157,44,"u"],[180,47,157,45],[180,49,157,47],[181,4,158,4],[181,10,158,10,"ELL2_C4"],[181,17,158,17],[181,20,158,20],[181,21,158,21,"ed25519_CURVE_p"],[181,36,158,36],[181,39,158,39,"_5n"],[181,42,158,42],[181,46,158,46,"_8n"],[181,49,158,49],[181,50,158,50],[181,51,158,51],[182,4,159,4],[182,10,159,10,"ELL2_J"],[182,16,159,16],[182,19,159,19,"BigInt"],[182,25,159,25],[182,26,159,26],[182,32,159,32],[182,33,159,33],[183,4,160,4],[183,8,160,8,"tv1"],[183,11,160,11],[183,14,160,14,"Fp"],[183,16,160,16],[183,17,160,17,"sqr"],[183,20,160,20],[183,21,160,21,"u"],[183,22,160,22],[183,23,160,23],[183,24,160,24],[183,25,160,25],[184,4,161,4,"tv1"],[184,7,161,7],[184,10,161,10,"Fp"],[184,12,161,12],[184,13,161,13,"mul"],[184,16,161,16],[184,17,161,17,"tv1"],[184,20,161,20],[184,22,161,22,"_2n"],[184,25,161,25],[184,26,161,26],[184,27,161,27],[184,28,161,28],[185,4,162,4],[185,8,162,8,"xd"],[185,10,162,10],[185,13,162,13,"Fp"],[185,15,162,15],[185,16,162,16,"add"],[185,19,162,19],[185,20,162,20,"tv1"],[185,23,162,23],[185,25,162,25,"Fp"],[185,27,162,27],[185,28,162,28,"ONE"],[185,31,162,31],[185,32,162,32],[185,33,162,33],[185,34,162,34],[186,4,163,4],[186,8,163,8,"x1n"],[186,11,163,11],[186,14,163,14,"Fp"],[186,16,163,16],[186,17,163,17,"neg"],[186,20,163,20],[186,21,163,21,"ELL2_J"],[186,27,163,27],[186,28,163,28],[186,29,163,29],[186,30,163,30],[187,4,164,4],[187,8,164,8,"tv2"],[187,11,164,11],[187,14,164,14,"Fp"],[187,16,164,16],[187,17,164,17,"sqr"],[187,20,164,20],[187,21,164,21,"xd"],[187,23,164,23],[187,24,164,24],[187,25,164,25],[187,26,164,26],[188,4,165,4],[188,8,165,8,"gxd"],[188,11,165,11],[188,14,165,14,"Fp"],[188,16,165,16],[188,17,165,17,"mul"],[188,20,165,20],[188,21,165,21,"tv2"],[188,24,165,24],[188,26,165,26,"xd"],[188,28,165,28],[188,29,165,29],[188,30,165,30],[188,31,165,31],[189,4,166,4],[189,8,166,8,"gx1"],[189,11,166,11],[189,14,166,14,"Fp"],[189,16,166,16],[189,17,166,17,"mul"],[189,20,166,20],[189,21,166,21,"tv1"],[189,24,166,24],[189,26,166,26,"ELL2_J"],[189,32,166,32],[189,33,166,33],[189,34,166,34],[189,35,166,35],[190,4,167,4,"gx1"],[190,7,167,7],[190,10,167,10,"Fp"],[190,12,167,12],[190,13,167,13,"mul"],[190,16,167,16],[190,17,167,17,"gx1"],[190,20,167,20],[190,22,167,22,"x1n"],[190,25,167,25],[190,26,167,26],[190,27,167,27],[190,28,167,28],[191,4,168,4,"gx1"],[191,7,168,7],[191,10,168,10,"Fp"],[191,12,168,12],[191,13,168,13,"add"],[191,16,168,16],[191,17,168,17,"gx1"],[191,20,168,20],[191,22,168,22,"tv2"],[191,25,168,25],[191,26,168,26],[191,27,168,27],[191,28,168,28],[192,4,169,4,"gx1"],[192,7,169,7],[192,10,169,10,"Fp"],[192,12,169,12],[192,13,169,13,"mul"],[192,16,169,16],[192,17,169,17,"gx1"],[192,20,169,20],[192,22,169,22,"x1n"],[192,25,169,25],[192,26,169,26],[192,27,169,27],[192,28,169,28],[193,4,170,4],[193,8,170,8,"tv3"],[193,11,170,11],[193,14,170,14,"Fp"],[193,16,170,16],[193,17,170,17,"sqr"],[193,20,170,20],[193,21,170,21,"gxd"],[193,24,170,24],[193,25,170,25],[193,26,170,26],[193,27,170,27],[194,4,171,4,"tv2"],[194,7,171,7],[194,10,171,10,"Fp"],[194,12,171,12],[194,13,171,13,"sqr"],[194,16,171,16],[194,17,171,17,"tv3"],[194,20,171,20],[194,21,171,21],[194,22,171,22],[194,23,171,23],[195,4,172,4,"tv3"],[195,7,172,7],[195,10,172,10,"Fp"],[195,12,172,12],[195,13,172,13,"mul"],[195,16,172,16],[195,17,172,17,"tv3"],[195,20,172,20],[195,22,172,22,"gxd"],[195,25,172,25],[195,26,172,26],[195,27,172,27],[195,28,172,28],[196,4,173,4,"tv3"],[196,7,173,7],[196,10,173,10,"Fp"],[196,12,173,12],[196,13,173,13,"mul"],[196,16,173,16],[196,17,173,17,"tv3"],[196,20,173,20],[196,22,173,22,"gx1"],[196,25,173,25],[196,26,173,26],[196,27,173,27],[196,28,173,28],[197,4,174,4,"tv2"],[197,7,174,7],[197,10,174,10,"Fp"],[197,12,174,12],[197,13,174,13,"mul"],[197,16,174,16],[197,17,174,17,"tv2"],[197,20,174,20],[197,22,174,22,"tv3"],[197,25,174,25],[197,26,174,26],[197,27,174,27],[197,28,174,28],[198,4,175,4],[198,8,175,8,"y11"],[198,11,175,11],[198,14,175,14,"Fp"],[198,16,175,16],[198,17,175,17,"pow"],[198,20,175,20],[198,21,175,21,"tv2"],[198,24,175,24],[198,26,175,26,"ELL2_C4"],[198,33,175,33],[198,34,175,34],[198,35,175,35],[198,36,175,36],[199,4,176,4,"y11"],[199,7,176,7],[199,10,176,10,"Fp"],[199,12,176,12],[199,13,176,13,"mul"],[199,16,176,16],[199,17,176,17,"y11"],[199,20,176,20],[199,22,176,22,"tv3"],[199,25,176,25],[199,26,176,26],[199,27,176,27],[199,28,176,28],[200,4,177,4],[200,8,177,8,"y12"],[200,11,177,11],[200,14,177,14,"Fp"],[200,16,177,16],[200,17,177,17,"mul"],[200,20,177,20],[200,21,177,21,"y11"],[200,24,177,24],[200,26,177,26,"ELL2_C3"],[200,33,177,33],[200,34,177,34],[200,35,177,35],[200,36,177,36],[201,4,178,4,"tv2"],[201,7,178,7],[201,10,178,10,"Fp"],[201,12,178,12],[201,13,178,13,"sqr"],[201,16,178,16],[201,17,178,17,"y11"],[201,20,178,20],[201,21,178,21],[201,22,178,22],[201,23,178,23],[202,4,179,4,"tv2"],[202,7,179,7],[202,10,179,10,"Fp"],[202,12,179,12],[202,13,179,13,"mul"],[202,16,179,16],[202,17,179,17,"tv2"],[202,20,179,20],[202,22,179,22,"gxd"],[202,25,179,25],[202,26,179,26],[202,27,179,27],[202,28,179,28],[203,4,180,4],[203,8,180,8,"e1"],[203,10,180,10],[203,13,180,13,"Fp"],[203,15,180,15],[203,16,180,16,"eql"],[203,19,180,19],[203,20,180,20,"tv2"],[203,23,180,23],[203,25,180,25,"gx1"],[203,28,180,28],[203,29,180,29],[203,30,180,30],[203,31,180,31],[204,4,181,4],[204,8,181,8,"y1"],[204,10,181,10],[204,13,181,13,"Fp"],[204,15,181,15],[204,16,181,16,"cmov"],[204,20,181,20],[204,21,181,21,"y12"],[204,24,181,24],[204,26,181,26,"y11"],[204,29,181,29],[204,31,181,31,"e1"],[204,33,181,33],[204,34,181,34],[204,35,181,35],[204,36,181,36],[205,4,182,4],[205,8,182,8,"x2n"],[205,11,182,11],[205,14,182,14,"Fp"],[205,16,182,16],[205,17,182,17,"mul"],[205,20,182,20],[205,21,182,21,"x1n"],[205,24,182,24],[205,26,182,26,"tv1"],[205,29,182,29],[205,30,182,30],[205,31,182,31],[205,32,182,32],[206,4,183,4],[206,8,183,8,"y21"],[206,11,183,11],[206,14,183,14,"Fp"],[206,16,183,16],[206,17,183,17,"mul"],[206,20,183,20],[206,21,183,21,"y11"],[206,24,183,24],[206,26,183,26,"u"],[206,27,183,27],[206,28,183,28],[206,29,183,29],[206,30,183,30],[207,4,184,4,"y21"],[207,7,184,7],[207,10,184,10,"Fp"],[207,12,184,12],[207,13,184,13,"mul"],[207,16,184,16],[207,17,184,17,"y21"],[207,20,184,20],[207,22,184,22,"ELL2_C2"],[207,29,184,29],[207,30,184,30],[207,31,184,31],[207,32,184,32],[208,4,185,4],[208,8,185,8,"y22"],[208,11,185,11],[208,14,185,14,"Fp"],[208,16,185,16],[208,17,185,17,"mul"],[208,20,185,20],[208,21,185,21,"y21"],[208,24,185,24],[208,26,185,26,"ELL2_C3"],[208,33,185,33],[208,34,185,34],[208,35,185,35],[208,36,185,36],[209,4,186,4],[209,8,186,8,"gx2"],[209,11,186,11],[209,14,186,14,"Fp"],[209,16,186,16],[209,17,186,17,"mul"],[209,20,186,20],[209,21,186,21,"gx1"],[209,24,186,24],[209,26,186,26,"tv1"],[209,29,186,29],[209,30,186,30],[209,31,186,31],[209,32,186,32],[210,4,187,4,"tv2"],[210,7,187,7],[210,10,187,10,"Fp"],[210,12,187,12],[210,13,187,13,"sqr"],[210,16,187,16],[210,17,187,17,"y21"],[210,20,187,20],[210,21,187,21],[210,22,187,22],[210,23,187,23],[211,4,188,4,"tv2"],[211,7,188,7],[211,10,188,10,"Fp"],[211,12,188,12],[211,13,188,13,"mul"],[211,16,188,16],[211,17,188,17,"tv2"],[211,20,188,20],[211,22,188,22,"gxd"],[211,25,188,25],[211,26,188,26],[211,27,188,27],[211,28,188,28],[212,4,189,4],[212,8,189,8,"e2"],[212,10,189,10],[212,13,189,13,"Fp"],[212,15,189,15],[212,16,189,16,"eql"],[212,19,189,19],[212,20,189,20,"tv2"],[212,23,189,23],[212,25,189,25,"gx2"],[212,28,189,28],[212,29,189,29],[212,30,189,30],[212,31,189,31],[213,4,190,4],[213,8,190,8,"y2"],[213,10,190,10],[213,13,190,13,"Fp"],[213,15,190,15],[213,16,190,16,"cmov"],[213,20,190,20],[213,21,190,21,"y22"],[213,24,190,24],[213,26,190,26,"y21"],[213,29,190,29],[213,31,190,31,"e2"],[213,33,190,33],[213,34,190,34],[213,35,190,35],[213,36,190,36],[214,4,191,4,"tv2"],[214,7,191,7],[214,10,191,10,"Fp"],[214,12,191,12],[214,13,191,13,"sqr"],[214,16,191,16],[214,17,191,17,"y1"],[214,19,191,19],[214,20,191,20],[214,21,191,21],[214,22,191,22],[215,4,192,4,"tv2"],[215,7,192,7],[215,10,192,10,"Fp"],[215,12,192,12],[215,13,192,13,"mul"],[215,16,192,16],[215,17,192,17,"tv2"],[215,20,192,20],[215,22,192,22,"gxd"],[215,25,192,25],[215,26,192,26],[215,27,192,27],[215,28,192,28],[216,4,193,4],[216,8,193,8,"e3"],[216,10,193,10],[216,13,193,13,"Fp"],[216,15,193,15],[216,16,193,16,"eql"],[216,19,193,19],[216,20,193,20,"tv2"],[216,23,193,23],[216,25,193,25,"gx1"],[216,28,193,28],[216,29,193,29],[216,30,193,30],[216,31,193,31],[217,4,194,4],[217,8,194,8,"xn"],[217,10,194,10],[217,13,194,13,"Fp"],[217,15,194,15],[217,16,194,16,"cmov"],[217,20,194,20],[217,21,194,21,"x2n"],[217,24,194,24],[217,26,194,26,"x1n"],[217,29,194,29],[217,31,194,31,"e3"],[217,33,194,33],[217,34,194,34],[217,35,194,35],[217,36,194,36],[218,4,195,4],[218,8,195,8,"y"],[218,9,195,9],[218,12,195,12,"Fp"],[218,14,195,14],[218,15,195,15,"cmov"],[218,19,195,19],[218,20,195,20,"y2"],[218,22,195,22],[218,24,195,24,"y1"],[218,26,195,26],[218,28,195,28,"e3"],[218,30,195,30],[218,31,195,31],[218,32,195,32],[218,33,195,33],[219,4,196,4],[219,8,196,8,"e4"],[219,10,196,10],[219,13,196,13,"Fp"],[219,15,196,15],[219,16,196,16,"isOdd"],[219,21,196,21],[219,22,196,22,"y"],[219,23,196,23],[219,24,196,24],[219,25,196,25],[219,26,196,26],[220,4,197,4,"y"],[220,5,197,5],[220,8,197,8,"Fp"],[220,10,197,10],[220,11,197,11,"cmov"],[220,15,197,15],[220,16,197,16,"y"],[220,17,197,17],[220,19,197,19,"Fp"],[220,21,197,21],[220,22,197,22,"neg"],[220,25,197,25],[220,26,197,26,"y"],[220,27,197,27],[220,28,197,28],[220,30,197,30,"e3"],[220,32,197,32],[220,37,197,37,"e4"],[220,39,197,39],[220,40,197,40],[220,41,197,41],[220,42,197,42],[221,4,198,4],[221,11,198,11],[222,6,198,13,"xMn"],[222,9,198,16],[222,11,198,18,"xn"],[222,13,198,20],[223,6,198,22,"xMd"],[223,9,198,25],[223,11,198,27,"xd"],[223,13,198,29],[224,6,198,31,"yMn"],[224,9,198,34],[224,11,198,36,"y"],[224,12,198,37],[225,6,198,39,"yMd"],[225,9,198,42],[225,11,198,44,"_1n"],[226,4,198,48],[226,5,198,49],[226,6,198,50],[226,7,198,51],[227,2,199,0],[228,2,200,0],[228,8,200,6,"ELL2_C1_EDWARDS"],[228,23,200,21],[228,26,200,24],[228,41,200,40],[228,42,200,41],[228,48,200,47],[228,52,200,47,"FpSqrtEven"],[228,71,200,57],[228,73,200,58,"Fp"],[228,75,200,60],[228,77,200,62,"Fp"],[228,79,200,64],[228,80,200,65,"neg"],[228,83,200,68],[228,84,200,69,"BigInt"],[228,90,200,75],[228,91,200,76],[228,97,200,82],[228,98,200,83],[228,99,200,84],[228,100,200,85],[228,102,200,87],[228,103,200,88],[228,104,200,89],[228,105,200,90],[229,2,201,0],[229,11,201,9,"map_to_curve_elligator2_edwards25519"],[229,47,201,45,"map_to_curve_elligator2_edwards25519"],[229,48,201,46,"u"],[229,49,201,47],[229,51,201,49],[230,4,202,4],[230,10,202,10],[231,6,202,12,"xMn"],[231,9,202,15],[232,6,202,17,"xMd"],[232,9,202,20],[233,6,202,22,"yMn"],[233,9,202,25],[234,6,202,27,"yMd"],[235,4,202,31],[235,5,202,32],[235,8,202,35,"map_to_curve_elligator2_curve25519"],[235,42,202,69],[235,43,202,70,"u"],[235,44,202,71],[235,45,202,72],[235,46,202,73],[235,47,202,74],[236,4,203,4],[237,4,204,4],[237,8,204,8,"xn"],[237,10,204,10],[237,13,204,13,"Fp"],[237,15,204,15],[237,16,204,16,"mul"],[237,19,204,19],[237,20,204,20,"xMn"],[237,23,204,23],[237,25,204,25,"yMd"],[237,28,204,28],[237,29,204,29],[237,30,204,30],[237,31,204,31],[238,4,205,4,"xn"],[238,6,205,6],[238,9,205,9,"Fp"],[238,11,205,11],[238,12,205,12,"mul"],[238,15,205,15],[238,16,205,16,"xn"],[238,18,205,18],[238,20,205,20,"ELL2_C1_EDWARDS"],[238,35,205,35],[238,36,205,36],[238,37,205,37],[238,38,205,38],[239,4,206,4],[239,8,206,8,"xd"],[239,10,206,10],[239,13,206,13,"Fp"],[239,15,206,15],[239,16,206,16,"mul"],[239,19,206,19],[239,20,206,20,"xMd"],[239,23,206,23],[239,25,206,25,"yMn"],[239,28,206,28],[239,29,206,29],[239,30,206,30],[239,31,206,31],[240,4,207,4],[240,8,207,8,"yn"],[240,10,207,10],[240,13,207,13,"Fp"],[240,15,207,15],[240,16,207,16,"sub"],[240,19,207,19],[240,20,207,20,"xMn"],[240,23,207,23],[240,25,207,25,"xMd"],[240,28,207,28],[240,29,207,29],[240,30,207,30],[240,31,207,31],[241,4,208,4],[241,8,208,8,"yd"],[241,10,208,10],[241,13,208,13,"Fp"],[241,15,208,15],[241,16,208,16,"add"],[241,19,208,19],[241,20,208,20,"xMn"],[241,23,208,23],[241,25,208,25,"xMd"],[241,28,208,28],[241,29,208,29],[241,30,208,30],[241,31,208,31],[242,4,209,4],[242,8,209,8,"tv1"],[242,11,209,11],[242,14,209,14,"Fp"],[242,16,209,16],[242,17,209,17,"mul"],[242,20,209,20],[242,21,209,21,"xd"],[242,23,209,23],[242,25,209,25,"yd"],[242,27,209,27],[242,28,209,28],[242,29,209,29],[242,30,209,30],[243,4,210,4],[243,8,210,8,"e"],[243,9,210,9],[243,12,210,12,"Fp"],[243,14,210,14],[243,15,210,15,"eql"],[243,18,210,18],[243,19,210,19,"tv1"],[243,22,210,22],[243,24,210,24,"Fp"],[243,26,210,26],[243,27,210,27,"ZERO"],[243,31,210,31],[243,32,210,32],[243,33,210,33],[243,34,210,34],[244,4,211,4,"xn"],[244,6,211,6],[244,9,211,9,"Fp"],[244,11,211,11],[244,12,211,12,"cmov"],[244,16,211,16],[244,17,211,17,"xn"],[244,19,211,19],[244,21,211,21,"Fp"],[244,23,211,23],[244,24,211,24,"ZERO"],[244,28,211,28],[244,30,211,30,"e"],[244,31,211,31],[244,32,211,32],[244,33,211,33],[244,34,211,34],[245,4,212,4,"xd"],[245,6,212,6],[245,9,212,9,"Fp"],[245,11,212,11],[245,12,212,12,"cmov"],[245,16,212,16],[245,17,212,17,"xd"],[245,19,212,19],[245,21,212,21,"Fp"],[245,23,212,23],[245,24,212,24,"ONE"],[245,27,212,27],[245,29,212,29,"e"],[245,30,212,30],[245,31,212,31],[245,32,212,32],[245,33,212,33],[246,4,213,4,"yn"],[246,6,213,6],[246,9,213,9,"Fp"],[246,11,213,11],[246,12,213,12,"cmov"],[246,16,213,16],[246,17,213,17,"yn"],[246,19,213,19],[246,21,213,21,"Fp"],[246,23,213,23],[246,24,213,24,"ONE"],[246,27,213,27],[246,29,213,29,"e"],[246,30,213,30],[246,31,213,31],[246,32,213,32],[246,33,213,33],[247,4,214,4,"yd"],[247,6,214,6],[247,9,214,9,"Fp"],[247,11,214,11],[247,12,214,12,"cmov"],[247,16,214,16],[247,17,214,17,"yd"],[247,19,214,19],[247,21,214,21,"Fp"],[247,23,214,23],[247,24,214,24,"ONE"],[247,27,214,27],[247,29,214,29,"e"],[247,30,214,30],[247,31,214,31],[247,32,214,32],[247,33,214,33],[248,4,215,4],[248,10,215,10],[248,11,215,11,"xd_inv"],[248,17,215,17],[248,19,215,19,"yd_inv"],[248,25,215,25],[248,26,215,26],[248,29,215,29],[248,33,215,29,"FpInvertBatch"],[248,55,215,42],[248,57,215,43,"Fp"],[248,59,215,45],[248,61,215,47],[248,62,215,48,"xd"],[248,64,215,50],[248,66,215,52,"yd"],[248,68,215,54],[248,69,215,55],[248,71,215,57],[248,75,215,61],[248,76,215,62],[248,77,215,63],[248,78,215,64],[249,4,216,4],[249,11,216,11],[250,6,216,13,"x"],[250,7,216,14],[250,9,216,16,"Fp"],[250,11,216,18],[250,12,216,19,"mul"],[250,15,216,22],[250,16,216,23,"xn"],[250,18,216,25],[250,20,216,27,"xd_inv"],[250,26,216,33],[250,27,216,34],[251,6,216,36,"y"],[251,7,216,37],[251,9,216,39,"Fp"],[251,11,216,41],[251,12,216,42,"mul"],[251,15,216,45],[251,16,216,46,"yn"],[251,18,216,48],[251,20,216,50,"yd_inv"],[251,26,216,56],[252,4,216,58],[252,5,216,59],[252,6,216,60],[252,7,216,61],[253,2,217,0],[254,2,218,0],[255,2,219,7],[255,8,219,13,"ed25519_hasher"],[255,22,219,27],[255,25,219,27,"exports"],[255,32,219,27],[255,33,219,27,"ed25519_hasher"],[255,47,219,27],[255,50,219,30],[255,65,219,46],[255,66,219,47],[255,72,219,53],[255,76,219,53,"createHasher"],[255,101,219,65],[255,103,219,66,"ed25519"],[255,110,219,73],[255,111,219,74,"Point"],[255,116,219,79],[255,118,219,82,"scalars"],[255,125,219,89],[255,129,219,94,"map_to_curve_elligator2_edwards25519"],[255,165,219,130],[255,166,219,131,"scalars"],[255,173,219,138],[255,174,219,139],[255,175,219,140],[255,176,219,141],[255,177,219,142],[255,179,219,144],[256,4,220,4,"DST"],[256,7,220,7],[256,9,220,9],[256,44,220,44],[257,4,221,4,"encodeDST"],[257,13,221,13],[257,15,221,15],[257,50,221,50],[258,4,222,4,"p"],[258,5,222,5],[258,7,222,7,"ed25519_CURVE_p"],[258,22,222,22],[259,4,223,4,"m"],[259,5,223,5],[259,7,223,7],[259,8,223,8],[260,4,224,4,"k"],[260,5,224,5],[260,7,224,7],[260,10,224,10],[261,4,225,4,"expand"],[261,10,225,10],[261,12,225,12],[261,17,225,17],[262,4,226,4,"hash"],[262,8,226,8],[262,10,226,10,"sha512"],[263,2,227,0],[263,3,227,1],[263,4,227,2],[263,6,227,4],[263,7,227,5],[264,2,228,0],[265,2,229,0],[265,8,229,6,"SQRT_M1"],[265,15,229,13],[265,18,229,16,"ED25519_SQRT_M1"],[265,33,229,31],[266,2,230,0],[267,2,231,0],[267,8,231,6,"SQRT_AD_MINUS_ONE"],[267,25,231,23],[267,28,231,26],[267,43,231,42,"BigInt"],[267,49,231,48],[267,50,231,49],[267,129,231,128],[267,130,231,129],[268,2,232,0],[269,2,233,0],[269,8,233,6,"INVSQRT_A_MINUS_D"],[269,25,233,23],[269,28,233,26],[269,43,233,42,"BigInt"],[269,49,233,48],[269,50,233,49],[269,129,233,128],[269,130,233,129],[270,2,234,0],[271,2,235,0],[271,8,235,6,"ONE_MINUS_D_SQ"],[271,22,235,20],[271,25,235,23],[271,40,235,39,"BigInt"],[271,46,235,45],[271,47,235,46],[271,125,235,124],[271,126,235,125],[272,2,236,0],[273,2,237,0],[273,8,237,6,"D_MINUS_ONE_SQ"],[273,22,237,20],[273,25,237,23],[273,40,237,39,"BigInt"],[273,46,237,45],[273,47,237,46],[273,126,237,125],[273,127,237,126],[274,2,238,0],[275,2,239,0],[275,8,239,6,"invertSqrt"],[275,18,239,16],[275,21,239,20,"number"],[275,27,239,26],[275,31,239,31,"uvRatio"],[275,38,239,38],[275,39,239,39,"_1n"],[275,42,239,42],[275,44,239,44,"number"],[275,50,239,50],[275,51,239,51],[276,2,240,0],[276,8,240,6,"MAX_255B"],[276,16,240,14],[276,19,240,17],[276,34,240,33,"BigInt"],[276,40,240,39],[276,41,240,40],[276,109,240,108],[276,110,240,109],[277,2,241,0],[277,8,241,6,"bytes255ToNumberLE"],[277,26,241,24],[277,29,241,28,"bytes"],[277,34,241,33],[277,38,241,38,"ed25519"],[277,45,241,45],[277,46,241,46,"Point"],[277,51,241,51],[277,52,241,52,"Fp"],[277,54,241,54],[277,55,241,55,"create"],[277,61,241,61],[277,62,241,62],[277,66,241,62,"bytesToNumberLE"],[277,89,241,77],[277,91,241,78,"bytes"],[277,96,241,83],[277,97,241,84],[277,100,241,87,"MAX_255B"],[277,108,241,95],[277,109,241,96],[278,2,242,0],[279,0,243,0],[280,0,244,0],[281,0,245,0],[282,0,246,0],[283,2,247,0],[283,11,247,9,"calcElligatorRistrettoMap"],[283,36,247,34,"calcElligatorRistrettoMap"],[283,37,247,35,"r0"],[283,39,247,37],[283,41,247,39],[284,4,248,4],[284,10,248,10],[285,6,248,12,"d"],[286,4,248,14],[286,5,248,15],[286,8,248,18,"ed25519_CURVE"],[286,21,248,31],[287,4,249,4],[287,10,249,10,"P"],[287,11,249,11],[287,14,249,14,"ed25519_CURVE_p"],[287,29,249,29],[288,4,250,4],[288,10,250,10,"mod"],[288,13,250,13],[288,16,250,17,"n"],[288,17,250,18],[288,21,250,23,"Fp"],[288,23,250,25],[288,24,250,26,"create"],[288,30,250,32],[288,31,250,33,"n"],[288,32,250,34],[288,33,250,35],[289,4,251,4],[289,10,251,10,"r"],[289,11,251,11],[289,14,251,14,"mod"],[289,17,251,17],[289,18,251,18,"SQRT_M1"],[289,25,251,25],[289,28,251,28,"r0"],[289,30,251,30],[289,33,251,33,"r0"],[289,35,251,35],[289,36,251,36],[289,37,251,37],[289,38,251,38],[290,4,252,4],[290,10,252,10,"Ns"],[290,12,252,12],[290,15,252,15,"mod"],[290,18,252,18],[290,19,252,19],[290,20,252,20,"r"],[290,21,252,21],[290,24,252,24,"_1n"],[290,27,252,27],[290,31,252,31,"ONE_MINUS_D_SQ"],[290,45,252,45],[290,46,252,46],[290,47,252,47],[290,48,252,48],[291,4,253,4],[291,8,253,8,"c"],[291,9,253,9],[291,12,253,12,"BigInt"],[291,18,253,18],[291,19,253,19],[291,20,253,20],[291,21,253,21],[291,22,253,22],[291,23,253,23],[291,24,253,24],[292,4,254,4],[292,10,254,10,"D"],[292,11,254,11],[292,14,254,14,"mod"],[292,17,254,17],[292,18,254,18],[292,19,254,19,"c"],[292,20,254,20],[292,23,254,23,"d"],[292,24,254,24],[292,27,254,27,"r"],[292,28,254,28],[292,32,254,32,"mod"],[292,35,254,35],[292,36,254,36,"r"],[292,37,254,37],[292,40,254,40,"d"],[292,41,254,41],[292,42,254,42],[292,43,254,43],[292,44,254,44],[292,45,254,45],[293,4,255,4],[293,8,255,8],[294,6,255,10,"isValid"],[294,13,255,17],[294,15,255,19,"Ns_D_is_sq"],[294,25,255,29],[295,6,255,31,"value"],[295,11,255,36],[295,13,255,38,"s"],[296,4,255,40],[296,5,255,41],[296,8,255,44,"uvRatio"],[296,15,255,51],[296,16,255,52,"Ns"],[296,18,255,54],[296,20,255,56,"D"],[296,21,255,57],[296,22,255,58],[296,23,255,59],[296,24,255,60],[297,4,256,4],[297,8,256,8,"s_"],[297,10,256,10],[297,13,256,13,"mod"],[297,16,256,16],[297,17,256,17,"s"],[297,18,256,18],[297,21,256,21,"r0"],[297,23,256,23],[297,24,256,24],[297,25,256,25],[297,26,256,26],[298,4,257,4],[298,8,257,8],[298,9,257,9],[298,13,257,9,"isNegativeLE"],[298,34,257,21],[298,36,257,22,"s_"],[298,38,257,24],[298,40,257,26,"P"],[298,41,257,27],[298,42,257,28],[298,44,258,8,"s_"],[298,46,258,10],[298,49,258,13,"mod"],[298,52,258,16],[298,53,258,17],[298,54,258,18,"s_"],[298,56,258,20],[298,57,258,21],[299,4,259,4],[299,8,259,8],[299,9,259,9,"Ns_D_is_sq"],[299,19,259,19],[299,21,260,8,"s"],[299,22,260,9],[299,25,260,12,"s_"],[299,27,260,14],[299,28,260,15],[299,29,260,16],[300,4,261,4],[300,8,261,8],[300,9,261,9,"Ns_D_is_sq"],[300,19,261,19],[300,21,262,8,"c"],[300,22,262,9],[300,25,262,12,"r"],[300,26,262,13],[300,27,262,14],[300,28,262,15],[301,4,263,4],[301,10,263,10,"Nt"],[301,12,263,12],[301,15,263,15,"mod"],[301,18,263,18],[301,19,263,19,"c"],[301,20,263,20],[301,24,263,24,"r"],[301,25,263,25],[301,28,263,28,"_1n"],[301,31,263,31],[301,32,263,32],[301,35,263,35,"D_MINUS_ONE_SQ"],[301,49,263,49],[301,52,263,52,"D"],[301,53,263,53],[301,54,263,54],[301,55,263,55],[301,56,263,56],[302,4,264,4],[302,10,264,10,"s2"],[302,12,264,12],[302,15,264,15,"s"],[302,16,264,16],[302,19,264,19,"s"],[302,20,264,20],[303,4,265,4],[303,10,265,10,"W0"],[303,12,265,12],[303,15,265,15,"mod"],[303,18,265,18],[303,19,265,19],[303,20,265,20,"s"],[303,21,265,21],[303,24,265,24,"s"],[303,25,265,25],[303,29,265,29,"D"],[303,30,265,30],[303,31,265,31],[303,32,265,32],[303,33,265,33],[304,4,266,4],[304,10,266,10,"W1"],[304,12,266,12],[304,15,266,15,"mod"],[304,18,266,18],[304,19,266,19,"Nt"],[304,21,266,21],[304,24,266,24,"SQRT_AD_MINUS_ONE"],[304,41,266,41],[304,42,266,42],[304,43,266,43],[304,44,266,44],[305,4,267,4],[305,10,267,10,"W2"],[305,12,267,12],[305,15,267,15,"mod"],[305,18,267,18],[305,19,267,19,"_1n"],[305,22,267,22],[305,25,267,25,"s2"],[305,27,267,27],[305,28,267,28],[305,29,267,29],[305,30,267,30],[306,4,268,4],[306,10,268,10,"W3"],[306,12,268,12],[306,15,268,15,"mod"],[306,18,268,18],[306,19,268,19,"_1n"],[306,22,268,22],[306,25,268,25,"s2"],[306,27,268,27],[306,28,268,28],[306,29,268,29],[306,30,268,30],[307,4,269,4],[307,11,269,11],[307,15,269,15,"ed25519"],[307,22,269,22],[307,23,269,23,"Point"],[307,28,269,28],[307,29,269,29,"mod"],[307,32,269,32],[307,33,269,33,"W0"],[307,35,269,35],[307,38,269,38,"W3"],[307,40,269,40],[307,41,269,41],[307,43,269,43,"mod"],[307,46,269,46],[307,47,269,47,"W2"],[307,49,269,49],[307,52,269,52,"W1"],[307,54,269,54],[307,55,269,55],[307,57,269,57,"mod"],[307,60,269,60],[307,61,269,61,"W1"],[307,63,269,63],[307,66,269,66,"W3"],[307,68,269,68],[307,69,269,69],[307,71,269,71,"mod"],[307,74,269,74],[307,75,269,75,"W0"],[307,77,269,77],[307,80,269,80,"W2"],[307,82,269,82],[307,83,269,83],[307,84,269,84],[308,2,270,0],[309,2,271,0],[309,11,271,9,"ristretto255_map"],[309,27,271,25,"ristretto255_map"],[309,28,271,26,"bytes"],[309,33,271,31],[309,35,271,33],[310,4,272,4],[310,8,272,4,"abytes"],[310,21,272,10],[310,23,272,11,"bytes"],[310,28,272,16],[310,30,272,18],[310,32,272,20],[310,33,272,21],[311,4,273,4],[311,10,273,10,"r1"],[311,12,273,12],[311,15,273,15,"bytes255ToNumberLE"],[311,33,273,33],[311,34,273,34,"bytes"],[311,39,273,39],[311,40,273,40,"subarray"],[311,48,273,48],[311,49,273,49],[311,50,273,50],[311,52,273,52],[311,54,273,54],[311,55,273,55],[311,56,273,56],[312,4,274,4],[312,10,274,10,"R1"],[312,12,274,12],[312,15,274,15,"calcElligatorRistrettoMap"],[312,40,274,40],[312,41,274,41,"r1"],[312,43,274,43],[312,44,274,44],[313,4,275,4],[313,10,275,10,"r2"],[313,12,275,12],[313,15,275,15,"bytes255ToNumberLE"],[313,33,275,33],[313,34,275,34,"bytes"],[313,39,275,39],[313,40,275,40,"subarray"],[313,48,275,48],[313,49,275,49],[313,51,275,51],[313,53,275,53],[313,55,275,55],[313,56,275,56],[313,57,275,57],[314,4,276,4],[314,10,276,10,"R2"],[314,12,276,12],[314,15,276,15,"calcElligatorRistrettoMap"],[314,40,276,40],[314,41,276,41,"r2"],[314,43,276,43],[314,44,276,44],[315,4,277,4],[315,11,277,11],[315,15,277,15,"_RistrettoPoint"],[315,30,277,30],[315,31,277,31,"R1"],[315,33,277,33],[315,34,277,34,"add"],[315,37,277,37],[315,38,277,38,"R2"],[315,40,277,40],[315,41,277,41],[315,42,277,42],[316,2,278,0],[317,2,279,0],[318,0,280,0],[319,0,281,0],[320,0,282,0],[321,0,283,0],[322,0,284,0],[323,0,285,0],[324,0,286,0],[325,0,287,0],[326,2,288,0],[326,8,288,6,"_RistrettoPoint"],[326,23,288,21],[326,32,288,30,"PrimeEdwardsPoint"],[326,58,288,47],[326,59,288,48],[327,4,289,4,"constructor"],[327,15,289,15,"constructor"],[327,16,289,16,"ep"],[327,18,289,18],[327,20,289,20],[328,6,290,8],[328,11,290,13],[328,12,290,14,"ep"],[328,14,290,16],[328,15,290,17],[329,4,291,4],[330,4,292,4],[330,11,292,11,"fromAffine"],[330,21,292,21,"fromAffine"],[330,22,292,22,"ap"],[330,24,292,24],[330,26,292,26],[331,6,293,8],[331,13,293,15],[331,17,293,19,"_RistrettoPoint"],[331,32,293,34],[331,33,293,35,"ed25519"],[331,40,293,42],[331,41,293,43,"Point"],[331,46,293,48],[331,47,293,49,"fromAffine"],[331,57,293,59],[331,58,293,60,"ap"],[331,60,293,62],[331,61,293,63],[331,62,293,64],[332,4,294,4],[333,4,295,4,"assertSame"],[333,14,295,14,"assertSame"],[333,15,295,15,"other"],[333,20,295,20],[333,22,295,22],[334,6,296,8],[334,10,296,12],[334,12,296,14,"other"],[334,17,296,19],[334,29,296,31,"_RistrettoPoint"],[334,44,296,46],[334,45,296,47],[334,47,297,12],[334,53,297,18],[334,57,297,22,"Error"],[334,62,297,27],[334,63,297,28],[334,88,297,53],[334,89,297,54],[335,4,298,4],[336,4,299,4,"init"],[336,8,299,8,"init"],[336,9,299,9,"ep"],[336,11,299,11],[336,13,299,13],[337,6,300,8],[337,13,300,15],[337,17,300,19,"_RistrettoPoint"],[337,32,300,34],[337,33,300,35,"ep"],[337,35,300,37],[337,36,300,38],[338,4,301,4],[339,4,302,4],[340,4,303,4],[340,11,303,11,"hashToCurve"],[340,22,303,22,"hashToCurve"],[340,23,303,23,"hex"],[340,26,303,26],[340,28,303,28],[341,6,304,8],[341,13,304,15,"ristretto255_map"],[341,29,304,31],[341,30,304,32],[341,34,304,32,"ensureBytes"],[341,53,304,43],[341,55,304,44],[341,70,304,59],[341,72,304,61,"hex"],[341,75,304,64],[341,77,304,66],[341,79,304,68],[341,80,304,69],[341,81,304,70],[342,4,305,4],[343,4,306,4],[343,11,306,11,"fromBytes"],[343,20,306,20,"fromBytes"],[343,21,306,21,"bytes"],[343,26,306,26],[343,28,306,28],[344,6,307,8],[344,10,307,8,"abytes"],[344,23,307,14],[344,25,307,15,"bytes"],[344,30,307,20],[344,32,307,22],[344,34,307,24],[344,35,307,25],[345,6,308,8],[345,12,308,14],[346,8,308,16,"a"],[346,9,308,17],[347,8,308,19,"d"],[348,6,308,21],[348,7,308,22],[348,10,308,25,"ed25519_CURVE"],[348,23,308,38],[349,6,309,8],[349,12,309,14,"P"],[349,13,309,15],[349,16,309,18,"ed25519_CURVE_p"],[349,31,309,33],[350,6,310,8],[350,12,310,14,"mod"],[350,15,310,17],[350,18,310,21,"n"],[350,19,310,22],[350,23,310,27,"Fp"],[350,25,310,29],[350,26,310,30,"create"],[350,32,310,36],[350,33,310,37,"n"],[350,34,310,38],[350,35,310,39],[351,6,311,8],[351,12,311,14,"s"],[351,13,311,15],[351,16,311,18,"bytes255ToNumberLE"],[351,34,311,36],[351,35,311,37,"bytes"],[351,40,311,42],[351,41,311,43],[352,6,312,8],[353,6,313,8],[354,6,314,8],[354,10,314,12],[354,11,314,13],[354,15,314,13,"equalBytes"],[354,33,314,23],[354,35,314,24,"Fp"],[354,37,314,26],[354,38,314,27,"toBytes"],[354,45,314,34],[354,46,314,35,"s"],[354,47,314,36],[354,48,314,37],[354,50,314,39,"bytes"],[354,55,314,44],[354,56,314,45],[354,60,314,49],[354,64,314,49,"isNegativeLE"],[354,85,314,61],[354,87,314,62,"s"],[354,88,314,63],[354,90,314,65,"P"],[354,91,314,66],[354,92,314,67],[354,94,315,12],[354,100,315,18],[354,104,315,22,"Error"],[354,109,315,27],[354,110,315,28],[354,143,315,61],[354,144,315,62],[355,6,316,8],[355,12,316,14,"s2"],[355,14,316,16],[355,17,316,19,"mod"],[355,20,316,22],[355,21,316,23,"s"],[355,22,316,24],[355,25,316,27,"s"],[355,26,316,28],[355,27,316,29],[356,6,317,8],[356,12,317,14,"u1"],[356,14,317,16],[356,17,317,19,"mod"],[356,20,317,22],[356,21,317,23,"_1n"],[356,24,317,26],[356,27,317,29,"a"],[356,28,317,30],[356,31,317,33,"s2"],[356,33,317,35],[356,34,317,36],[356,35,317,37],[356,36,317,38],[357,6,318,8],[357,12,318,14,"u2"],[357,14,318,16],[357,17,318,19,"mod"],[357,20,318,22],[357,21,318,23,"_1n"],[357,24,318,26],[357,27,318,29,"a"],[357,28,318,30],[357,31,318,33,"s2"],[357,33,318,35],[357,34,318,36],[357,35,318,37],[357,36,318,38],[358,6,319,8],[358,12,319,14,"u1_2"],[358,16,319,18],[358,19,319,21,"mod"],[358,22,319,24],[358,23,319,25,"u1"],[358,25,319,27],[358,28,319,30,"u1"],[358,30,319,32],[358,31,319,33],[359,6,320,8],[359,12,320,14,"u2_2"],[359,16,320,18],[359,19,320,21,"mod"],[359,22,320,24],[359,23,320,25,"u2"],[359,25,320,27],[359,28,320,30,"u2"],[359,30,320,32],[359,31,320,33],[360,6,321,8],[360,12,321,14,"v"],[360,13,321,15],[360,16,321,18,"mod"],[360,19,321,21],[360,20,321,22,"a"],[360,21,321,23],[360,24,321,26,"d"],[360,25,321,27],[360,28,321,30,"u1_2"],[360,32,321,34],[360,35,321,37,"u2_2"],[360,39,321,41],[360,40,321,42],[360,41,321,43],[360,42,321,44],[361,6,322,8],[361,12,322,14],[362,8,322,16,"isValid"],[362,15,322,23],[363,8,322,25,"value"],[363,13,322,30],[363,15,322,32,"I"],[364,6,322,34],[364,7,322,35],[364,10,322,38,"invertSqrt"],[364,20,322,48],[364,21,322,49,"mod"],[364,24,322,52],[364,25,322,53,"v"],[364,26,322,54],[364,29,322,57,"u2_2"],[364,33,322,61],[364,34,322,62],[364,35,322,63],[364,36,322,64],[364,37,322,65],[365,6,323,8],[365,12,323,14,"Dx"],[365,14,323,16],[365,17,323,19,"mod"],[365,20,323,22],[365,21,323,23,"I"],[365,22,323,24],[365,25,323,27,"u2"],[365,27,323,29],[365,28,323,30],[365,29,323,31],[365,30,323,32],[366,6,324,8],[366,12,324,14,"Dy"],[366,14,324,16],[366,17,324,19,"mod"],[366,20,324,22],[366,21,324,23,"I"],[366,22,324,24],[366,25,324,27,"Dx"],[366,27,324,29],[366,30,324,32,"v"],[366,31,324,33],[366,32,324,34],[366,33,324,35],[366,34,324,36],[367,6,325,8],[367,10,325,12,"x"],[367,11,325,13],[367,14,325,16,"mod"],[367,17,325,19],[367,18,325,20],[367,19,325,21,"s"],[367,20,325,22],[367,23,325,25,"s"],[367,24,325,26],[367,28,325,30,"Dx"],[367,30,325,32],[367,31,325,33],[367,32,325,34],[367,33,325,35],[368,6,326,8],[368,10,326,12],[368,14,326,12,"isNegativeLE"],[368,35,326,24],[368,37,326,25,"x"],[368,38,326,26],[368,40,326,28,"P"],[368,41,326,29],[368,42,326,30],[368,44,327,12,"x"],[368,45,327,13],[368,48,327,16,"mod"],[368,51,327,19],[368,52,327,20],[368,53,327,21,"x"],[368,54,327,22],[368,55,327,23],[368,56,327,24],[368,57,327,25],[369,6,328,8],[369,12,328,14,"y"],[369,13,328,15],[369,16,328,18,"mod"],[369,19,328,21],[369,20,328,22,"u1"],[369,22,328,24],[369,25,328,27,"Dy"],[369,27,328,29],[369,28,328,30],[369,29,328,31],[369,30,328,32],[370,6,329,8],[370,12,329,14,"t"],[370,13,329,15],[370,16,329,18,"mod"],[370,19,329,21],[370,20,329,22,"x"],[370,21,329,23],[370,24,329,26,"y"],[370,25,329,27],[370,26,329,28],[370,27,329,29],[370,28,329,30],[371,6,330,8],[371,10,330,12],[371,11,330,13,"isValid"],[371,18,330,20],[371,22,330,24],[371,26,330,24,"isNegativeLE"],[371,47,330,36],[371,49,330,37,"t"],[371,50,330,38],[371,52,330,40,"P"],[371,53,330,41],[371,54,330,42],[371,58,330,46,"y"],[371,59,330,47],[371,64,330,52,"_0n"],[371,67,330,55],[371,69,331,12],[371,75,331,18],[371,79,331,22,"Error"],[371,84,331,27],[371,85,331,28],[371,118,331,61],[371,119,331,62],[372,6,332,8],[372,13,332,15],[372,17,332,19,"_RistrettoPoint"],[372,32,332,34],[372,33,332,35],[372,37,332,39,"ed25519"],[372,44,332,46],[372,45,332,47,"Point"],[372,50,332,52],[372,51,332,53,"x"],[372,52,332,54],[372,54,332,56,"y"],[372,55,332,57],[372,57,332,59,"_1n"],[372,60,332,62],[372,62,332,64,"t"],[372,63,332,65],[372,64,332,66],[372,65,332,67],[373,4,333,4],[374,4,334,4],[375,0,335,0],[376,0,336,0],[377,0,337,0],[378,0,338,0],[379,4,339,4],[379,11,339,11,"fromHex"],[379,18,339,18,"fromHex"],[379,19,339,19,"hex"],[379,22,339,22],[379,24,339,24],[380,6,340,8],[380,13,340,15,"_RistrettoPoint"],[380,28,340,30],[380,29,340,31,"fromBytes"],[380,38,340,40],[380,39,340,41],[380,43,340,41,"ensureBytes"],[380,62,340,52],[380,64,340,53],[380,78,340,67],[380,80,340,69,"hex"],[380,83,340,72],[380,85,340,74],[380,87,340,76],[380,88,340,77],[380,89,340,78],[381,4,341,4],[382,4,342,4],[382,11,342,11,"msm"],[382,14,342,14,"msm"],[382,15,342,15,"points"],[382,21,342,21],[382,23,342,23,"scalars"],[382,30,342,30],[382,32,342,32],[383,6,343,8],[383,13,343,15],[383,17,343,15,"pippenger"],[383,33,343,24],[383,35,343,25,"_RistrettoPoint"],[383,50,343,40],[383,52,343,42,"ed25519"],[383,59,343,49],[383,60,343,50,"Point"],[383,65,343,55],[383,66,343,56,"Fn"],[383,68,343,58],[383,70,343,60,"points"],[383,76,343,66],[383,78,343,68,"scalars"],[383,85,343,75],[383,86,343,76],[384,4,344,4],[385,4,345,4],[386,0,346,0],[387,0,347,0],[388,0,348,0],[389,4,349,4,"toBytes"],[389,11,349,11,"toBytes"],[389,12,349,11],[389,14,349,14],[390,6,350,8],[390,10,350,12],[391,8,350,14,"X"],[391,9,350,15],[392,8,350,17,"Y"],[392,9,350,18],[393,8,350,20,"Z"],[393,9,350,21],[394,8,350,23,"T"],[395,6,350,25],[395,7,350,26],[395,10,350,29],[395,14,350,33],[395,15,350,34,"ep"],[395,17,350,36],[396,6,351,8],[396,12,351,14,"P"],[396,13,351,15],[396,16,351,18,"ed25519_CURVE_p"],[396,31,351,33],[397,6,352,8],[397,12,352,14,"mod"],[397,15,352,17],[397,18,352,21,"n"],[397,19,352,22],[397,23,352,27,"Fp"],[397,25,352,29],[397,26,352,30,"create"],[397,32,352,36],[397,33,352,37,"n"],[397,34,352,38],[397,35,352,39],[398,6,353,8],[398,12,353,14,"u1"],[398,14,353,16],[398,17,353,19,"mod"],[398,20,353,22],[398,21,353,23,"mod"],[398,24,353,26],[398,25,353,27,"Z"],[398,26,353,28],[398,29,353,31,"Y"],[398,30,353,32],[398,31,353,33],[398,34,353,36,"mod"],[398,37,353,39],[398,38,353,40,"Z"],[398,39,353,41],[398,42,353,44,"Y"],[398,43,353,45],[398,44,353,46],[398,45,353,47],[398,46,353,48],[398,47,353,49],[399,6,354,8],[399,12,354,14,"u2"],[399,14,354,16],[399,17,354,19,"mod"],[399,20,354,22],[399,21,354,23,"X"],[399,22,354,24],[399,25,354,27,"Y"],[399,26,354,28],[399,27,354,29],[399,28,354,30],[399,29,354,31],[400,6,355,8],[401,6,356,8],[401,12,356,14,"u2sq"],[401,16,356,18],[401,19,356,21,"mod"],[401,22,356,24],[401,23,356,25,"u2"],[401,25,356,27],[401,28,356,30,"u2"],[401,30,356,32],[401,31,356,33],[402,6,357,8],[402,12,357,14],[403,8,357,16,"value"],[403,13,357,21],[403,15,357,23,"invsqrt"],[404,6,357,31],[404,7,357,32],[404,10,357,35,"invertSqrt"],[404,20,357,45],[404,21,357,46,"mod"],[404,24,357,49],[404,25,357,50,"u1"],[404,27,357,52],[404,30,357,55,"u2sq"],[404,34,357,59],[404,35,357,60],[404,36,357,61],[404,37,357,62],[404,38,357,63],[405,6,358,8],[405,12,358,14,"D1"],[405,14,358,16],[405,17,358,19,"mod"],[405,20,358,22],[405,21,358,23,"invsqrt"],[405,28,358,30],[405,31,358,33,"u1"],[405,33,358,35],[405,34,358,36],[405,35,358,37],[405,36,358,38],[406,6,359,8],[406,12,359,14,"D2"],[406,14,359,16],[406,17,359,19,"mod"],[406,20,359,22],[406,21,359,23,"invsqrt"],[406,28,359,30],[406,31,359,33,"u2"],[406,33,359,35],[406,34,359,36],[406,35,359,37],[406,36,359,38],[407,6,360,8],[407,12,360,14,"zInv"],[407,16,360,18],[407,19,360,21,"mod"],[407,22,360,24],[407,23,360,25,"D1"],[407,25,360,27],[407,28,360,30,"D2"],[407,30,360,32],[407,33,360,35,"T"],[407,34,360,36],[407,35,360,37],[407,36,360,38],[407,37,360,39],[408,6,361,8],[408,10,361,12,"D"],[408,11,361,13],[408,12,361,14],[408,13,361,15],[409,6,362,8],[409,10,362,12],[409,14,362,12,"isNegativeLE"],[409,35,362,24],[409,37,362,25,"T"],[409,38,362,26],[409,41,362,29,"zInv"],[409,45,362,33],[409,47,362,35,"P"],[409,48,362,36],[409,49,362,37],[409,51,362,39],[410,8,363,12],[410,12,363,16,"_x"],[410,14,363,18],[410,17,363,21,"mod"],[410,20,363,24],[410,21,363,25,"Y"],[410,22,363,26],[410,25,363,29,"SQRT_M1"],[410,32,363,36],[410,33,363,37],[411,8,364,12],[411,12,364,16,"_y"],[411,14,364,18],[411,17,364,21,"mod"],[411,20,364,24],[411,21,364,25,"X"],[411,22,364,26],[411,25,364,29,"SQRT_M1"],[411,32,364,36],[411,33,364,37],[412,8,365,12,"X"],[412,9,365,13],[412,12,365,16,"_x"],[412,14,365,18],[413,8,366,12,"Y"],[413,9,366,13],[413,12,366,16,"_y"],[413,14,366,18],[414,8,367,12,"D"],[414,9,367,13],[414,12,367,16,"mod"],[414,15,367,19],[414,16,367,20,"D1"],[414,18,367,22],[414,21,367,25,"INVSQRT_A_MINUS_D"],[414,38,367,42],[414,39,367,43],[415,6,368,8],[415,7,368,9],[415,13,369,13],[416,8,370,12,"D"],[416,9,370,13],[416,12,370,16,"D2"],[416,14,370,18],[416,15,370,19],[416,16,370,20],[417,6,371,8],[418,6,372,8],[418,10,372,12],[418,14,372,12,"isNegativeLE"],[418,35,372,24],[418,37,372,25,"X"],[418,38,372,26],[418,41,372,29,"zInv"],[418,45,372,33],[418,47,372,35,"P"],[418,48,372,36],[418,49,372,37],[418,51,373,12,"Y"],[418,52,373,13],[418,55,373,16,"mod"],[418,58,373,19],[418,59,373,20],[418,60,373,21,"Y"],[418,61,373,22],[418,62,373,23],[418,63,373,24],[418,64,373,25],[419,6,374,8],[419,10,374,12,"s"],[419,11,374,13],[419,14,374,16,"mod"],[419,17,374,19],[419,18,374,20],[419,19,374,21,"Z"],[419,20,374,22],[419,23,374,25,"Y"],[419,24,374,26],[419,28,374,30,"D"],[419,29,374,31],[419,30,374,32],[419,31,374,33],[419,32,374,34],[420,6,375,8],[420,10,375,12],[420,14,375,12,"isNegativeLE"],[420,35,375,24],[420,37,375,25,"s"],[420,38,375,26],[420,40,375,28,"P"],[420,41,375,29],[420,42,375,30],[420,44,376,12,"s"],[420,45,376,13],[420,48,376,16,"mod"],[420,51,376,19],[420,52,376,20],[420,53,376,21,"s"],[420,54,376,22],[420,55,376,23],[421,6,377,8],[421,13,377,15,"Fp"],[421,15,377,17],[421,16,377,18,"toBytes"],[421,23,377,25],[421,24,377,26,"s"],[421,25,377,27],[421,26,377,28],[421,27,377,29],[421,28,377,30],[422,4,378,4],[423,4,379,4],[424,0,380,0],[425,0,381,0],[426,0,382,0],[427,4,383,4,"equals"],[427,10,383,10,"equals"],[427,11,383,11,"other"],[427,16,383,16],[427,18,383,18],[428,6,384,8],[428,10,384,12],[428,11,384,13,"assertSame"],[428,21,384,23],[428,22,384,24,"other"],[428,27,384,29],[428,28,384,30],[429,6,385,8],[429,12,385,14],[430,8,385,16,"X"],[430,9,385,17],[430,11,385,19,"X1"],[430,13,385,21],[431,8,385,23,"Y"],[431,9,385,24],[431,11,385,26,"Y1"],[432,6,385,29],[432,7,385,30],[432,10,385,33],[432,14,385,37],[432,15,385,38,"ep"],[432,17,385,40],[433,6,386,8],[433,12,386,14],[434,8,386,16,"X"],[434,9,386,17],[434,11,386,19,"X2"],[434,13,386,21],[435,8,386,23,"Y"],[435,9,386,24],[435,11,386,26,"Y2"],[436,6,386,29],[436,7,386,30],[436,10,386,33,"other"],[436,15,386,38],[436,16,386,39,"ep"],[436,18,386,41],[437,6,387,8],[437,12,387,14,"mod"],[437,15,387,17],[437,18,387,21,"n"],[437,19,387,22],[437,23,387,27,"Fp"],[437,25,387,29],[437,26,387,30,"create"],[437,32,387,36],[437,33,387,37,"n"],[437,34,387,38],[437,35,387,39],[438,6,388,8],[439,6,389,8],[439,12,389,14,"one"],[439,15,389,17],[439,18,389,20,"mod"],[439,21,389,23],[439,22,389,24,"X1"],[439,24,389,26],[439,27,389,29,"Y2"],[439,29,389,31],[439,30,389,32],[439,35,389,37,"mod"],[439,38,389,40],[439,39,389,41,"Y1"],[439,41,389,43],[439,44,389,46,"X2"],[439,46,389,48],[439,47,389,49],[440,6,390,8],[440,12,390,14,"two"],[440,15,390,17],[440,18,390,20,"mod"],[440,21,390,23],[440,22,390,24,"Y1"],[440,24,390,26],[440,27,390,29,"Y2"],[440,29,390,31],[440,30,390,32],[440,35,390,37,"mod"],[440,38,390,40],[440,39,390,41,"X1"],[440,41,390,43],[440,44,390,46,"X2"],[440,46,390,48],[440,47,390,49],[441,6,391,8],[441,13,391,15,"one"],[441,16,391,18],[441,20,391,22,"two"],[441,23,391,25],[442,4,392,4],[443,4,393,4,"is0"],[443,7,393,7,"is0"],[443,8,393,7],[443,10,393,10],[444,6,394,8],[444,13,394,15],[444,17,394,19],[444,18,394,20,"equals"],[444,24,394,26],[444,25,394,27,"_RistrettoPoint"],[444,40,394,42],[444,41,394,43,"ZERO"],[444,45,394,47],[444,46,394,48],[445,4,395,4],[446,2,396,0],[447,2,397,0],[448,2,398,0],[449,2,399,0],[450,2,400,0,"_RistrettoPoint"],[450,17,400,15],[450,18,400,16,"BASE"],[450,22,400,20],[450,25,401,0],[450,40,401,16],[450,41,401,17],[450,47,401,23],[450,51,401,27,"_RistrettoPoint"],[450,66,401,42],[450,67,401,43,"ed25519"],[450,74,401,50],[450,75,401,51,"Point"],[450,80,401,56],[450,81,401,57,"BASE"],[450,85,401,61],[450,86,401,62],[450,88,401,64],[450,89,401,65],[451,2,402,0],[452,2,403,0,"_RistrettoPoint"],[452,17,403,15],[452,18,403,16,"ZERO"],[452,22,403,20],[452,25,404,0],[452,40,404,16],[452,41,404,17],[452,47,404,23],[452,51,404,27,"_RistrettoPoint"],[452,66,404,42],[452,67,404,43,"ed25519"],[452,74,404,50],[452,75,404,51,"Point"],[452,80,404,56],[452,81,404,57,"ZERO"],[452,85,404,61],[452,86,404,62],[452,88,404,64],[452,89,404,65],[453,2,405,0],[454,2,406,0,"_RistrettoPoint"],[454,17,406,15],[454,18,406,16,"Fp"],[454,20,406,18],[454,23,407,0],[454,38,407,16],[454,39,407,17],[454,45,407,23,"Fp"],[454,47,407,25],[454,49,407,27],[454,50,407,28],[455,2,408,0],[456,2,409,0,"_RistrettoPoint"],[456,17,409,15],[456,18,409,16,"Fn"],[456,20,409,18],[456,23,410,0],[456,38,410,16],[456,39,410,17],[456,45,410,23,"Fn"],[456,47,410,25],[456,49,410,27],[456,50,410,28],[457,2,411,7],[457,8,411,13,"ristretto255"],[457,20,411,25],[457,23,411,25,"exports"],[457,30,411,25],[457,31,411,25,"ristretto255"],[457,43,411,25],[457,46,411,28],[458,4,411,30,"Point"],[458,9,411,35],[458,11,411,37,"_RistrettoPoint"],[459,2,411,53],[459,3,411,54],[460,2,412,0],[461,2,413,7],[461,8,413,13,"ristretto255_hasher"],[461,27,413,32],[461,30,413,32,"exports"],[461,37,413,32],[461,38,413,32,"ristretto255_hasher"],[461,57,413,32],[461,60,413,35],[462,4,414,4,"hashToCurve"],[462,15,414,15,"hashToCurve"],[462,16,414,16,"msg"],[462,19,414,19],[462,21,414,21,"options"],[462,28,414,28],[462,30,414,30],[463,6,415,8],[463,12,415,14,"DST"],[463,15,415,17],[463,18,415,20,"options"],[463,25,415,27],[463,27,415,29,"DST"],[463,30,415,32],[463,34,415,36],[463,72,415,74],[464,6,416,8],[464,12,416,14,"xmd"],[464,15,416,17],[464,18,416,20],[464,22,416,20,"expand_message_xmd"],[464,53,416,38],[464,55,416,39,"msg"],[464,58,416,42],[464,60,416,44,"DST"],[464,63,416,47],[464,65,416,49],[464,67,416,51],[464,69,416,53,"sha512"],[464,80,416,59],[464,81,416,60],[465,6,417,8],[465,13,417,15,"ristretto255_map"],[465,29,417,31],[465,30,417,32,"xmd"],[465,33,417,35],[465,34,417,36],[466,4,418,4],[466,5,418,5],[467,4,419,4,"hashToScalar"],[467,16,419,16,"hashToScalar"],[467,17,419,17,"msg"],[467,20,419,20],[467,22,419,22,"options"],[467,29,419,29],[467,32,419,32],[468,6,419,34,"DST"],[468,9,419,37],[468,11,419,39,"_DST_scalar"],[469,4,419,51],[469,5,419,52],[469,7,419,54],[470,6,420,8],[470,12,420,14,"xmd"],[470,15,420,17],[470,18,420,20],[470,22,420,20,"expand_message_xmd"],[470,53,420,38],[470,55,420,39,"msg"],[470,58,420,42],[470,60,420,44,"options"],[470,67,420,51],[470,68,420,52,"DST"],[470,71,420,55],[470,73,420,57],[470,75,420,59],[470,77,420,61,"sha512"],[470,88,420,67],[470,89,420,68],[471,6,421,8],[471,13,421,15,"Fn"],[471,15,421,17],[471,16,421,18,"create"],[471,22,421,24],[471,23,421,25],[471,27,421,25,"bytesToNumberLE"],[471,50,421,40],[471,52,421,41,"xmd"],[471,55,421,44],[471,56,421,45],[471,57,421,46],[472,4,422,4],[473,2,423,0],[473,3,423,1],[474,2,424,0],[475,2,425,0],[476,2,426,0],[477,2,427,0],[478,2,428,0],[479,2,429,0],[480,2,430,0],[481,2,431,0],[482,0,432,0],[483,0,433,0],[484,0,434,0],[485,0,435,0],[486,0,436,0],[487,2,437,7],[487,8,437,13,"ED25519_TORSION_SUBGROUP"],[487,32,437,37],[487,35,437,37,"exports"],[487,42,437,37],[487,43,437,37,"ED25519_TORSION_SUBGROUP"],[487,67,437,37],[487,70,437,40],[487,71,438,4],[487,137,438,70],[487,139,439,4],[487,205,439,70],[487,207,440,4],[487,273,440,70],[487,275,441,4],[487,341,441,70],[487,343,442,4],[487,409,442,70],[487,411,443,4],[487,477,443,70],[487,479,444,4],[487,545,444,70],[487,547,445,4],[487,613,445,70],[487,614,446,1],[488,2,447,0],[489,2,448,7],[489,11,448,16,"edwardsToMontgomeryPub"],[489,33,448,38,"edwardsToMontgomeryPub"],[489,34,448,39,"edwardsPub"],[489,44,448,49],[489,46,448,51],[490,4,449,4],[490,11,449,11,"ed25519"],[490,18,449,18],[490,19,449,19,"utils"],[490,24,449,24],[490,25,449,25,"toMontgomery"],[490,37,449,37],[490,38,449,38],[490,42,449,38,"ensureBytes"],[490,61,449,49],[490,63,449,50],[490,68,449,55],[490,70,449,57,"edwardsPub"],[490,80,449,67],[490,81,449,68],[490,82,449,69],[491,2,450,0],[492,2,451,0],[493,2,452,7],[493,8,452,13,"edwardsToMontgomery"],[493,27,452,32],[493,30,452,32,"exports"],[493,37,452,32],[493,38,452,32,"edwardsToMontgomery"],[493,57,452,32],[493,60,452,35,"edwardsToMontgomeryPub"],[493,82,452,57],[494,2,453,0],[495,2,454,7],[495,11,454,16,"edwardsToMontgomeryPriv"],[495,34,454,39,"edwardsToMontgomeryPriv"],[495,35,454,40,"edwardsPriv"],[495,46,454,51],[495,48,454,53],[496,4,455,4],[496,11,455,11,"ed25519"],[496,18,455,18],[496,19,455,19,"utils"],[496,24,455,24],[496,25,455,25,"toMontgomerySecret"],[496,43,455,43],[496,44,455,44],[496,48,455,44,"ensureBytes"],[496,67,455,55],[496,69,455,56],[496,74,455,61],[496,76,455,63,"edwardsPriv"],[496,87,455,74],[496,88,455,75],[496,89,455,76],[497,2,456,0],[498,2,457,0],[499,2,458,7],[499,8,458,13,"RistrettoPoint"],[499,22,458,27],[499,25,458,27,"exports"],[499,32,458,27],[499,33,458,27,"RistrettoPoint"],[499,47,458,27],[499,50,458,30,"_RistrettoPoint"],[499,65,458,45],[500,2,459,0],[501,2,460,7],[501,8,460,13,"hashToCurve"],[501,19,460,24],[501,22,460,24,"exports"],[501,29,460,24],[501,30,460,24,"hashToCurve"],[501,41,460,24],[501,44,460,27],[501,59,460,43],[501,60,460,44],[501,66,460,50,"ed25519_hasher"],[501,80,460,64],[501,81,460,65,"hashToCurve"],[501,92,460,76],[501,94,460,78],[501,95,460,79],[502,2,461,0],[503,2,462,7],[503,8,462,13,"encodeToCurve"],[503,21,462,26],[503,24,462,26,"exports"],[503,31,462,26],[503,32,462,26,"encodeToCurve"],[503,45,462,26],[503,48,462,29],[503,63,462,45],[503,64,462,46],[503,70,462,52,"ed25519_hasher"],[503,84,462,66],[503,85,462,67,"encodeToCurve"],[503,98,462,80],[503,100,462,82],[503,101,462,83],[504,2,463,0],[505,2,464,7],[505,8,464,13,"hashToRistretto255"],[505,26,464,31],[505,29,464,31,"exports"],[505,36,464,31],[505,37,464,31,"hashToRistretto255"],[505,55,464,31],[505,58,464,34],[505,73,464,50],[505,74,464,51],[505,80,464,57,"ristretto255_hasher"],[505,99,464,76],[505,100,464,77,"hashToCurve"],[505,111,464,88],[505,113,464,90],[505,114,464,91],[506,2,465,0],[507,2,466,7],[507,8,466,13,"hash_to_ristretto255"],[507,28,466,33],[507,31,466,33,"exports"],[507,38,466,33],[507,39,466,33,"hash_to_ristretto255"],[507,59,466,33],[507,62,466,36],[507,77,466,52],[507,78,466,53],[507,84,466,59,"ristretto255_hasher"],[507,103,466,78],[507,104,466,79,"hashToCurve"],[507,115,466,90],[507,117,466,92],[507,118,466,93],[508,0,466,94],[508,3]],"functionMap":{"names":["<global>","<anonymous>","ed25519_pow_2_252_3","adjustScalarBytes","uvRatio","ed25519_domain","montgomery$argument_0.powPminus2","map_to_curve_elligator2_curve25519","map_to_curve_elligator2_edwards25519","createHasher$argument_1","invertSqrt","bytes255ToNumberLE","calcElligatorRistrettoMap","mod","ristretto255_map","_RistrettoPoint","_RistrettoPoint#constructor","_RistrettoPoint.fromAffine","_RistrettoPoint#assertSame","_RistrettoPoint#init","_RistrettoPoint.hashToCurve","_RistrettoPoint.fromBytes","_RistrettoPoint.fromHex","_RistrettoPoint.msm","_RistrettoPoint#toBytes","_RistrettoPoint#equals","_RistrettoPoint#is0","ristretto255_hasher.hashToCurve","ristretto255_hasher.hashToScalar","edwardsToMontgomeryPub","edwardsToMontgomeryPriv"],"mappings":"AAA;uCCyB;EDQ;AEC;CFkB;AGC;CHS;AIK;CJoB;4BCC,4CD;4BCC,4CD;yCCC;EDS;wCCW,qCD;AKC;CLI;2CCE;EDG;0CCE;GDG;uCCW;oBKK;SLI;CDG;iCCI,mCD;iCCC,0BD;iCCC,6BD;AOE;CP0C;yCCC,4CD;AQC;CRgB;+CCE,kCQ,6DR;EDQ;mBUY,gCV;2BWE,qEX;AYM;gBCG,mBD;CZoB;AcC;CdO;AeU;ICC;KDE;IEC;KFE;IGC;KHG;IIC;KJE;IKE;KLE;IMC;oBRI,mBQ;KNuB;IOM;KPE;IQC;KRE;ISK;oBXG,mBW;KT0B;IUK;oBZI,mBY;KVK;IWC;KXE;CfC;iBCK,6CD;iBCG,6CD;iBCG,QD;iBCG,QD;I2BI;K3BI;I4BC;K5BG;O6B0B;C7BE;O8BI;C9BE;4CCI,gCD;8CCE,kCD;mDCE,qCD;qDCE,qCD"}},"type":"js/module"}]}