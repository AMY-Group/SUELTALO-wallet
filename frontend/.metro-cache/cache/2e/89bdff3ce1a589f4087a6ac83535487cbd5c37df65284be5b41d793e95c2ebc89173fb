{"dependencies":[{"name":"../utils.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":8,"column":0,"index":317},"end":{"line":8,"column":227,"index":544}}],"key":"dGswK136diHRCgUa8xpQUn/UMbc=","exportNames":["*"]}},{"name":"./curve.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":9,"column":0,"index":545},"end":{"line":9,"column":78,"index":623}}],"key":"NKqfgvbal9a/XOV6fa5X4e5VYms=","exportNames":["*"]}},{"name":"./modular.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":10,"column":0,"index":624},"end":{"line":10,"column":37,"index":661}}],"key":"9k+FDNYf3zXm2KDVSy5nBT9psY4=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.PrimeEdwardsPoint = void 0;\n  exports.eddsa = eddsa;\n  exports.edwards = edwards;\n  exports.twistedEdwards = twistedEdwards;\n  var _utils = require(_dependencyMap[0], \"../utils.js\");\n  var _curve = require(_dependencyMap[1], \"./curve.js\");\n  var _modular = require(_dependencyMap[2], \"./modular.js\");\n  /**\n   * Twisted Edwards curve. The formula is: ax² + y² = 1 + dx²y².\n   * For design rationale of types / exports, see weierstrass module documentation.\n   * Untwisted Edwards curves exist, but they aren't used in real-world protocols.\n   * @module\n   */\n  /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n  // Be friendly to bad ECMAScript parsers by not using bigint literals\n  // prettier-ignore\n  const _0n = BigInt(0),\n    _1n = BigInt(1),\n    _2n = BigInt(2),\n    _8n = BigInt(8);\n  function isEdValidXY(Fp, CURVE, x, y) {\n    const x2 = Fp.sqr(x);\n    const y2 = Fp.sqr(y);\n    const left = Fp.add(Fp.mul(CURVE.a, x2), y2);\n    const right = Fp.add(Fp.ONE, Fp.mul(CURVE.d, Fp.mul(x2, y2)));\n    return Fp.eql(left, right);\n  }\n  function edwards(params, extraOpts = {}) {\n    const validated = (0, _curve._createCurveFields)('edwards', params, extraOpts, extraOpts.FpFnLE);\n    const {\n      Fp,\n      Fn\n    } = validated;\n    let CURVE = validated.CURVE;\n    const {\n      h: cofactor\n    } = CURVE;\n    (0, _utils._validateObject)(extraOpts, {}, {\n      uvRatio: 'function'\n    });\n    // Important:\n    // There are some places where Fp.BYTES is used instead of nByteLength.\n    // So far, everything has been tested with curves of Fp.BYTES == nByteLength.\n    // TODO: test and find curves which behave otherwise.\n    const MASK = _2n << BigInt(Fn.BYTES * 8) - _1n;\n    const modP = n => Fp.create(n); // Function overrides\n    // sqrt(u/v)\n    const uvRatio = extraOpts.uvRatio || ((u, v) => {\n      try {\n        return {\n          isValid: true,\n          value: Fp.sqrt(Fp.div(u, v))\n        };\n      } catch (e) {\n        return {\n          isValid: false,\n          value: _0n\n        };\n      }\n    });\n    // Validate whether the passed curve params are valid.\n    // equation ax² + y² = 1 + dx²y² should work for generator point.\n    if (!isEdValidXY(Fp, CURVE, CURVE.Gx, CURVE.Gy)) throw new Error('bad curve params: generator point');\n    /**\n     * Asserts coordinate is valid: 0 <= n < MASK.\n     * Coordinates >= Fp.ORDER are allowed for zip215.\n     */\n    function acoord(title, n, banZero = false) {\n      const min = banZero ? _1n : _0n;\n      (0, _utils.aInRange)('coordinate ' + title, n, min, MASK);\n      return n;\n    }\n    function aextpoint(other) {\n      if (!(other instanceof Point)) throw new Error('ExtendedPoint expected');\n    }\n    // Converts Extended point to default (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    const toAffineMemo = (0, _utils.memoized)((p, iz) => {\n      const {\n        X,\n        Y,\n        Z\n      } = p;\n      const is0 = p.is0();\n      if (iz == null) iz = is0 ? _8n : Fp.inv(Z); // 8 was chosen arbitrarily\n      const x = modP(X * iz);\n      const y = modP(Y * iz);\n      const zz = Fp.mul(Z, iz);\n      if (is0) return {\n        x: _0n,\n        y: _1n\n      };\n      if (zz !== _1n) throw new Error('invZ was invalid');\n      return {\n        x,\n        y\n      };\n    });\n    const assertValidMemo = (0, _utils.memoized)(p => {\n      const {\n        a,\n        d\n      } = CURVE;\n      if (p.is0()) throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n      // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n      // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n      const {\n        X,\n        Y,\n        Z,\n        T\n      } = p;\n      const X2 = modP(X * X); // X²\n      const Y2 = modP(Y * Y); // Y²\n      const Z2 = modP(Z * Z); // Z²\n      const Z4 = modP(Z2 * Z2); // Z⁴\n      const aX2 = modP(X2 * a); // aX²\n      const left = modP(Z2 * modP(aX2 + Y2)); // (aX² + Y²)Z²\n      const right = modP(Z4 + modP(d * modP(X2 * Y2))); // Z⁴ + dX²Y²\n      if (left !== right) throw new Error('bad point: equation left != right (1)');\n      // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n      const XY = modP(X * Y);\n      const ZT = modP(Z * T);\n      if (XY !== ZT) throw new Error('bad point: equation left != right (2)');\n      return true;\n    });\n    // Extended Point works in extended coordinates: (X, Y, Z, T) ∋ (x=X/Z, y=Y/Z, T=xy).\n    // https://en.wikipedia.org/wiki/Twisted_Edwards_curve#Extended_coordinates\n    class Point {\n      constructor(X, Y, Z, T) {\n        this.X = acoord('x', X);\n        this.Y = acoord('y', Y);\n        this.Z = acoord('z', Z, true);\n        this.T = acoord('t', T);\n        Object.freeze(this);\n      }\n      static CURVE() {\n        return CURVE;\n      }\n      static fromAffine(p) {\n        if (p instanceof Point) throw new Error('extended point not allowed');\n        const {\n          x,\n          y\n        } = p || {};\n        acoord('x', x);\n        acoord('y', y);\n        return new Point(x, y, _1n, modP(x * y));\n      }\n      // Uses algo from RFC8032 5.1.3.\n      static fromBytes(bytes, zip215 = false) {\n        const len = Fp.BYTES;\n        const {\n          a,\n          d\n        } = CURVE;\n        bytes = (0, _utils.copyBytes)((0, _utils._abytes2)(bytes, len, 'point'));\n        (0, _utils._abool2)(zip215, 'zip215');\n        const normed = (0, _utils.copyBytes)(bytes); // copy again, we'll manipulate it\n        const lastByte = bytes[len - 1]; // select last byte\n        normed[len - 1] = lastByte & ~0x80; // clear last bit\n        const y = (0, _utils.bytesToNumberLE)(normed);\n        // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n        // RFC8032 prohibits >= p, but ZIP215 doesn't\n        // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n        // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n        const max = zip215 ? MASK : Fp.ORDER;\n        (0, _utils.aInRange)('point.y', y, _0n, max);\n        // Ed25519: x² = (y²-1)/(dy²+1) mod p. Ed448: x² = (y²-1)/(dy²-1) mod p. Generic case:\n        // ax²+y²=1+dx²y² => y²-1=dx²y²-ax² => y²-1=x²(dy²-a) => x²=(y²-1)/(dy²-a)\n        const y2 = modP(y * y); // denominator is always non-0 mod p.\n        const u = modP(y2 - _1n); // u = y² - 1\n        const v = modP(d * y2 - a); // v = d y² + 1.\n        let {\n          isValid,\n          value: x\n        } = uvRatio(u, v); // √(u/v)\n        if (!isValid) throw new Error('bad point: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n; // There are 2 square roots. Use x_0 bit to select proper\n        const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n        if (!zip215 && x === _0n && isLastByteOdd)\n          // if x=0 and x_0 = 1, fail\n          throw new Error('bad point: x=0 and x_0=1');\n        if (isLastByteOdd !== isXOdd) x = modP(-x); // if x_0 != x mod 2, set x = p-x\n        return Point.fromAffine({\n          x,\n          y\n        });\n      }\n      static fromHex(bytes, zip215 = false) {\n        return Point.fromBytes((0, _utils.ensureBytes)('point', bytes), zip215);\n      }\n      get x() {\n        return this.toAffine().x;\n      }\n      get y() {\n        return this.toAffine().y;\n      }\n      precompute(windowSize = 8, isLazy = true) {\n        wnaf.createCache(this, windowSize);\n        if (!isLazy) this.multiply(_2n); // random number\n        return this;\n      }\n      // Useful in fromAffine() - not for fromBytes(), which always created valid points.\n      assertValidity() {\n        assertValidMemo(this);\n      }\n      // Compare one point to another.\n      equals(other) {\n        aextpoint(other);\n        const {\n          X: X1,\n          Y: Y1,\n          Z: Z1\n        } = this;\n        const {\n          X: X2,\n          Y: Y2,\n          Z: Z2\n        } = other;\n        const X1Z2 = modP(X1 * Z2);\n        const X2Z1 = modP(X2 * Z1);\n        const Y1Z2 = modP(Y1 * Z2);\n        const Y2Z1 = modP(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n      }\n      is0() {\n        return this.equals(Point.ZERO);\n      }\n      negate() {\n        // Flips point sign to a negative one (-x, y in affine coords)\n        return new Point(modP(-this.X), this.Y, this.Z, modP(-this.T));\n      }\n      // Fast algo for doubling Extended Point.\n      // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n      // Cost: 4M + 4S + 1*a + 6add + 1*2.\n      double() {\n        const {\n          a\n        } = CURVE;\n        const {\n          X: X1,\n          Y: Y1,\n          Z: Z1\n        } = this;\n        const A = modP(X1 * X1); // A = X12\n        const B = modP(Y1 * Y1); // B = Y12\n        const C = modP(_2n * modP(Z1 * Z1)); // C = 2*Z12\n        const D = modP(a * A); // D = a*A\n        const x1y1 = X1 + Y1;\n        const E = modP(modP(x1y1 * x1y1) - A - B); // E = (X1+Y1)2-A-B\n        const G = D + B; // G = D+B\n        const F = G - C; // F = G-C\n        const H = D - B; // H = D-B\n        const X3 = modP(E * F); // X3 = E*F\n        const Y3 = modP(G * H); // Y3 = G*H\n        const T3 = modP(E * H); // T3 = E*H\n        const Z3 = modP(F * G); // Z3 = F*G\n        return new Point(X3, Y3, Z3, T3);\n      }\n      // Fast algo for adding 2 Extended Points.\n      // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#addition-add-2008-hwcd\n      // Cost: 9M + 1*a + 1*d + 7add.\n      add(other) {\n        aextpoint(other);\n        const {\n          a,\n          d\n        } = CURVE;\n        const {\n          X: X1,\n          Y: Y1,\n          Z: Z1,\n          T: T1\n        } = this;\n        const {\n          X: X2,\n          Y: Y2,\n          Z: Z2,\n          T: T2\n        } = other;\n        const A = modP(X1 * X2); // A = X1*X2\n        const B = modP(Y1 * Y2); // B = Y1*Y2\n        const C = modP(T1 * d * T2); // C = T1*d*T2\n        const D = modP(Z1 * Z2); // D = Z1*Z2\n        const E = modP((X1 + Y1) * (X2 + Y2) - A - B); // E = (X1+Y1)*(X2+Y2)-A-B\n        const F = D - C; // F = D-C\n        const G = D + C; // G = D+C\n        const H = modP(B - a * A); // H = B-a*A\n        const X3 = modP(E * F); // X3 = E*F\n        const Y3 = modP(G * H); // Y3 = G*H\n        const T3 = modP(E * H); // T3 = E*H\n        const Z3 = modP(F * G); // Z3 = F*G\n        return new Point(X3, Y3, Z3, T3);\n      }\n      subtract(other) {\n        return this.add(other.negate());\n      }\n      // Constant-time multiplication.\n      multiply(scalar) {\n        // 1 <= scalar < L\n        if (!Fn.isValidNot0(scalar)) throw new Error('invalid scalar: expected 1 <= sc < curve.n');\n        const {\n          p,\n          f\n        } = wnaf.cached(this, scalar, p => (0, _curve.normalizeZ)(Point, p));\n        return (0, _curve.normalizeZ)(Point, [p, f])[0];\n      }\n      // Non-constant-time multiplication. Uses double-and-add algorithm.\n      // It's faster, but should only be used when you don't care about\n      // an exposed private key e.g. sig verification.\n      // Does NOT allow scalars higher than CURVE.n.\n      // Accepts optional accumulator to merge with multiply (important for sparse scalars)\n      multiplyUnsafe(scalar, acc = Point.ZERO) {\n        // 0 <= scalar < L\n        if (!Fn.isValid(scalar)) throw new Error('invalid scalar: expected 0 <= sc < curve.n');\n        if (scalar === _0n) return Point.ZERO;\n        if (this.is0() || scalar === _1n) return this;\n        return wnaf.unsafe(this, scalar, p => (0, _curve.normalizeZ)(Point, p), acc);\n      }\n      // Checks if point is of small order.\n      // If you add something to small order point, you will have \"dirty\"\n      // point with torsion component.\n      // Multiplies point by cofactor and checks if the result is 0.\n      isSmallOrder() {\n        return this.multiplyUnsafe(cofactor).is0();\n      }\n      // Multiplies point by curve order and checks if the result is 0.\n      // Returns `false` is the point is dirty.\n      isTorsionFree() {\n        return wnaf.unsafe(this, CURVE.n).is0();\n      }\n      // Converts Extended point to default (x, y) coordinates.\n      // Can accept precomputed Z^-1 - for example, from invertBatch.\n      toAffine(invertedZ) {\n        return toAffineMemo(this, invertedZ);\n      }\n      clearCofactor() {\n        if (cofactor === _1n) return this;\n        return this.multiplyUnsafe(cofactor);\n      }\n      toBytes() {\n        const {\n          x,\n          y\n        } = this.toAffine();\n        // Fp.toBytes() allows non-canonical encoding of y (>= p).\n        const bytes = Fp.toBytes(y);\n        // Each y has 2 valid points: (x, y), (x,-y).\n        // When compressing, it's enough to store y and use the last byte to encode sign of x\n        bytes[bytes.length - 1] |= x & _1n ? 0x80 : 0;\n        return bytes;\n      }\n      toHex() {\n        return (0, _utils.bytesToHex)(this.toBytes());\n      }\n      toString() {\n        return `<Point ${this.is0() ? 'ZERO' : this.toHex()}>`;\n      }\n      // TODO: remove\n      get ex() {\n        return this.X;\n      }\n      get ey() {\n        return this.Y;\n      }\n      get ez() {\n        return this.Z;\n      }\n      get et() {\n        return this.T;\n      }\n      static normalizeZ(points) {\n        return (0, _curve.normalizeZ)(Point, points);\n      }\n      static msm(points, scalars) {\n        return (0, _curve.pippenger)(Point, Fn, points, scalars);\n      }\n      _setWindowSize(windowSize) {\n        this.precompute(windowSize);\n      }\n      toRawBytes() {\n        return this.toBytes();\n      }\n    }\n    // base / generator point\n    Point.BASE = new Point(CURVE.Gx, CURVE.Gy, _1n, modP(CURVE.Gx * CURVE.Gy));\n    // zero / infinity / identity point\n    Point.ZERO = new Point(_0n, _1n, _1n, _0n); // 0, 1, 1, 0\n    // math field\n    Point.Fp = Fp;\n    // scalar field\n    Point.Fn = Fn;\n    const wnaf = new _curve.wNAF(Point, Fn.BITS);\n    Point.BASE.precompute(8); // Enable precomputes. Slows down first publicKey computation by 20ms.\n    return Point;\n  }\n  /**\n   * Base class for prime-order points like Ristretto255 and Decaf448.\n   * These points eliminate cofactor issues by representing equivalence classes\n   * of Edwards curve points.\n   */\n  class PrimeEdwardsPoint {\n    constructor(ep) {\n      this.ep = ep;\n    }\n    // Static methods that must be implemented by subclasses\n    static fromBytes(_bytes) {\n      (0, _utils.notImplemented)();\n    }\n    static fromHex(_hex) {\n      (0, _utils.notImplemented)();\n    }\n    get x() {\n      return this.toAffine().x;\n    }\n    get y() {\n      return this.toAffine().y;\n    }\n    // Common implementations\n    clearCofactor() {\n      // no-op for prime-order groups\n      return this;\n    }\n    assertValidity() {\n      this.ep.assertValidity();\n    }\n    toAffine(invertedZ) {\n      return this.ep.toAffine(invertedZ);\n    }\n    toHex() {\n      return (0, _utils.bytesToHex)(this.toBytes());\n    }\n    toString() {\n      return this.toHex();\n    }\n    isTorsionFree() {\n      return true;\n    }\n    isSmallOrder() {\n      return false;\n    }\n    add(other) {\n      this.assertSame(other);\n      return this.init(this.ep.add(other.ep));\n    }\n    subtract(other) {\n      this.assertSame(other);\n      return this.init(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n      return this.init(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n      return this.init(this.ep.multiplyUnsafe(scalar));\n    }\n    double() {\n      return this.init(this.ep.double());\n    }\n    negate() {\n      return this.init(this.ep.negate());\n    }\n    precompute(windowSize, isLazy) {\n      return this.init(this.ep.precompute(windowSize, isLazy));\n    }\n    /** @deprecated use `toBytes` */\n    toRawBytes() {\n      return this.toBytes();\n    }\n  }\n  /**\n   * Initializes EdDSA signatures over given Edwards curve.\n   */\n  exports.PrimeEdwardsPoint = PrimeEdwardsPoint;\n  function eddsa(Point, cHash, eddsaOpts = {}) {\n    if (typeof cHash !== 'function') throw new Error('\"hash\" function param is required');\n    (0, _utils._validateObject)(eddsaOpts, {}, {\n      adjustScalarBytes: 'function',\n      randomBytes: 'function',\n      domain: 'function',\n      prehash: 'function',\n      mapToCurve: 'function'\n    });\n    const {\n      prehash\n    } = eddsaOpts;\n    const {\n      BASE,\n      Fp,\n      Fn\n    } = Point;\n    const randomBytes = eddsaOpts.randomBytes || _utils.randomBytes;\n    const adjustScalarBytes = eddsaOpts.adjustScalarBytes || (bytes => bytes);\n    const domain = eddsaOpts.domain || ((data, ctx, phflag) => {\n      (0, _utils._abool2)(phflag, 'phflag');\n      if (ctx.length || phflag) throw new Error('Contexts/pre-hash are not supported');\n      return data;\n    }); // NOOP\n    // Little-endian SHA512 with modulo n\n    function modN_LE(hash) {\n      return Fn.create((0, _utils.bytesToNumberLE)(hash)); // Not Fn.fromBytes: it has length limit\n    }\n    // Get the hashed private scalar per RFC8032 5.1.5\n    function getPrivateScalar(key) {\n      const len = lengths.secretKey;\n      key = (0, _utils.ensureBytes)('private key', key, len);\n      // Hash private key with curve's hash function to produce uniformingly random input\n      // Check byte lengths: ensure(64, h(ensure(32, key)))\n      const hashed = (0, _utils.ensureBytes)('hashed private key', cHash(key), 2 * len);\n      const head = adjustScalarBytes(hashed.slice(0, len)); // clear first half bits, produce FE\n      const prefix = hashed.slice(len, 2 * len); // second half is called key prefix (5.1.6)\n      const scalar = modN_LE(head); // The actual private scalar\n      return {\n        head,\n        prefix,\n        scalar\n      };\n    }\n    /** Convenience method that creates public key from scalar. RFC8032 5.1.5 */\n    function getExtendedPublicKey(secretKey) {\n      const {\n        head,\n        prefix,\n        scalar\n      } = getPrivateScalar(secretKey);\n      const point = BASE.multiply(scalar); // Point on Edwards curve aka public key\n      const pointBytes = point.toBytes();\n      return {\n        head,\n        prefix,\n        scalar,\n        point,\n        pointBytes\n      };\n    }\n    /** Calculates EdDSA pub key. RFC8032 5.1.5. */\n    function getPublicKey(secretKey) {\n      return getExtendedPublicKey(secretKey).pointBytes;\n    }\n    // int('LE', SHA512(dom2(F, C) || msgs)) mod N\n    function hashDomainToScalar(context = Uint8Array.of(), ...msgs) {\n      const msg = (0, _utils.concatBytes)(...msgs);\n      return modN_LE(cHash(domain(msg, (0, _utils.ensureBytes)('context', context), !!prehash)));\n    }\n    /** Signs message with privateKey. RFC8032 5.1.6 */\n    function sign(msg, secretKey, options = {}) {\n      msg = (0, _utils.ensureBytes)('message', msg);\n      if (prehash) msg = prehash(msg); // for ed25519ph etc.\n      const {\n        prefix,\n        scalar,\n        pointBytes\n      } = getExtendedPublicKey(secretKey);\n      const r = hashDomainToScalar(options.context, prefix, msg); // r = dom2(F, C) || prefix || PH(M)\n      const R = BASE.multiply(r).toBytes(); // R = rG\n      const k = hashDomainToScalar(options.context, R, pointBytes, msg); // R || A || PH(M)\n      const s = Fn.create(r + k * scalar); // S = (r + k * s) mod L\n      if (!Fn.isValid(s)) throw new Error('sign failed: invalid s'); // 0 <= s < L\n      const rs = (0, _utils.concatBytes)(R, Fn.toBytes(s));\n      return (0, _utils._abytes2)(rs, lengths.signature, 'result');\n    }\n    // verification rule is either zip215 or rfc8032 / nist186-5. Consult fromHex:\n    const verifyOpts = {\n      zip215: true\n    };\n    /**\n     * Verifies EdDSA signature against message and public key. RFC8032 5.1.7.\n     * An extended group equation is checked.\n     */\n    function verify(sig, msg, publicKey, options = verifyOpts) {\n      const {\n        context,\n        zip215\n      } = options;\n      const len = lengths.signature;\n      sig = (0, _utils.ensureBytes)('signature', sig, len);\n      msg = (0, _utils.ensureBytes)('message', msg);\n      publicKey = (0, _utils.ensureBytes)('publicKey', publicKey, lengths.publicKey);\n      if (zip215 !== undefined) (0, _utils._abool2)(zip215, 'zip215');\n      if (prehash) msg = prehash(msg); // for ed25519ph, etc\n      const mid = len / 2;\n      const r = sig.subarray(0, mid);\n      const s = (0, _utils.bytesToNumberLE)(sig.subarray(mid, len));\n      let A, R, SB;\n      try {\n        // zip215=true is good for consensus-critical apps. =false follows RFC8032 / NIST186-5.\n        // zip215=true:  0 <= y < MASK (2^256 for ed25519)\n        // zip215=false: 0 <= y < P (2^255-19 for ed25519)\n        A = Point.fromBytes(publicKey, zip215);\n        R = Point.fromBytes(r, zip215);\n        SB = BASE.multiplyUnsafe(s); // 0 <= s < l is done inside\n      } catch (error) {\n        return false;\n      }\n      if (!zip215 && A.isSmallOrder()) return false; // zip215 allows public keys of small order\n      const k = hashDomainToScalar(context, R.toBytes(), A.toBytes(), msg);\n      const RkA = R.add(A.multiplyUnsafe(k));\n      // Extended group equation\n      // [8][S]B = [8]R + [8][k]A'\n      return RkA.subtract(SB).clearCofactor().is0();\n    }\n    const _size = Fp.BYTES; // 32 for ed25519, 57 for ed448\n    const lengths = {\n      secretKey: _size,\n      publicKey: _size,\n      signature: 2 * _size,\n      seed: _size\n    };\n    function randomSecretKey(seed = randomBytes(lengths.seed)) {\n      return (0, _utils._abytes2)(seed, lengths.seed, 'seed');\n    }\n    function keygen(seed) {\n      const secretKey = utils.randomSecretKey(seed);\n      return {\n        secretKey,\n        publicKey: getPublicKey(secretKey)\n      };\n    }\n    function isValidSecretKey(key) {\n      return (0, _utils.isBytes)(key) && key.length === Fn.BYTES;\n    }\n    function isValidPublicKey(key, zip215) {\n      try {\n        return !!Point.fromBytes(key, zip215);\n      } catch (error) {\n        return false;\n      }\n    }\n    const utils = {\n      getExtendedPublicKey,\n      randomSecretKey,\n      isValidSecretKey,\n      isValidPublicKey,\n      /**\n       * Converts ed public key to x public key. Uses formula:\n       * - ed25519:\n       *   - `(u, v) = ((1+y)/(1-y), sqrt(-486664)*u/x)`\n       *   - `(x, y) = (sqrt(-486664)*u/v, (u-1)/(u+1))`\n       * - ed448:\n       *   - `(u, v) = ((y-1)/(y+1), sqrt(156324)*u/x)`\n       *   - `(x, y) = (sqrt(156324)*u/v, (1+u)/(1-u))`\n       */\n      toMontgomery(publicKey) {\n        const {\n          y\n        } = Point.fromBytes(publicKey);\n        const size = lengths.publicKey;\n        const is25519 = size === 32;\n        if (!is25519 && size !== 57) throw new Error('only defined for 25519 and 448');\n        const u = is25519 ? Fp.div(_1n + y, _1n - y) : Fp.div(y - _1n, y + _1n);\n        return Fp.toBytes(u);\n      },\n      toMontgomerySecret(secretKey) {\n        const size = lengths.secretKey;\n        (0, _utils._abytes2)(secretKey, size);\n        const hashed = cHash(secretKey.subarray(0, size));\n        return adjustScalarBytes(hashed).subarray(0, size);\n      },\n      /** @deprecated */\n      randomPrivateKey: randomSecretKey,\n      /** @deprecated */\n      precompute(windowSize = 8, point = Point.BASE) {\n        return point.precompute(windowSize, false);\n      }\n    };\n    return Object.freeze({\n      keygen,\n      getPublicKey,\n      sign,\n      verify,\n      utils,\n      Point,\n      lengths\n    });\n  }\n  function _eddsa_legacy_opts_to_new(c) {\n    const CURVE = {\n      a: c.a,\n      d: c.d,\n      p: c.Fp.ORDER,\n      n: c.n,\n      h: c.h,\n      Gx: c.Gx,\n      Gy: c.Gy\n    };\n    const Fp = c.Fp;\n    const Fn = (0, _modular.Field)(CURVE.n, c.nBitLength, true);\n    const curveOpts = {\n      Fp,\n      Fn,\n      uvRatio: c.uvRatio\n    };\n    const eddsaOpts = {\n      randomBytes: c.randomBytes,\n      adjustScalarBytes: c.adjustScalarBytes,\n      domain: c.domain,\n      prehash: c.prehash,\n      mapToCurve: c.mapToCurve\n    };\n    return {\n      CURVE,\n      curveOpts,\n      hash: c.hash,\n      eddsaOpts\n    };\n  }\n  function _eddsa_new_output_to_legacy(c, eddsa) {\n    const Point = eddsa.Point;\n    const legacy = Object.assign({}, eddsa, {\n      ExtendedPoint: Point,\n      CURVE: c,\n      nBitLength: Point.Fn.BITS,\n      nByteLength: Point.Fn.BYTES\n    });\n    return legacy;\n  }\n  // TODO: remove. Use eddsa\n  function twistedEdwards(c) {\n    const {\n      CURVE,\n      curveOpts,\n      hash,\n      eddsaOpts\n    } = _eddsa_legacy_opts_to_new(c);\n    const Point = edwards(CURVE, curveOpts);\n    const EDDSA = eddsa(Point, hash, eddsaOpts);\n    return _eddsa_new_output_to_legacy(c, EDDSA);\n  }\n});","lineCount":734,"map":[[9,2,8,0],[9,6,8,0,"_utils"],[9,12,8,0],[9,15,8,0,"require"],[9,22,8,0],[9,23,8,0,"_dependencyMap"],[9,37,8,0],[10,2,9,0],[10,6,9,0,"_curve"],[10,12,9,0],[10,15,9,0,"require"],[10,22,9,0],[10,23,9,0,"_dependencyMap"],[10,37,9,0],[11,2,10,0],[11,6,10,0,"_modular"],[11,14,10,0],[11,17,10,0,"require"],[11,24,10,0],[11,25,10,0,"_dependencyMap"],[11,39,10,0],[12,2,1,0],[13,0,2,0],[14,0,3,0],[15,0,4,0],[16,0,5,0],[17,0,6,0],[18,2,7,0],[20,2,11,0],[21,2,12,0],[22,2,13,0],[22,8,13,6,"_0n"],[22,11,13,9],[22,14,13,12,"BigInt"],[22,20,13,18],[22,21,13,19],[22,22,13,20],[22,23,13,21],[23,4,13,23,"_1n"],[23,7,13,26],[23,10,13,29,"BigInt"],[23,16,13,35],[23,17,13,36],[23,18,13,37],[23,19,13,38],[24,4,13,40,"_2n"],[24,7,13,43],[24,10,13,46,"BigInt"],[24,16,13,52],[24,17,13,53],[24,18,13,54],[24,19,13,55],[25,4,13,57,"_8n"],[25,7,13,60],[25,10,13,63,"BigInt"],[25,16,13,69],[25,17,13,70],[25,18,13,71],[25,19,13,72],[26,2,14,0],[26,11,14,9,"isEdValidXY"],[26,22,14,20,"isEdValidXY"],[26,23,14,21,"Fp"],[26,25,14,23],[26,27,14,25,"CURVE"],[26,32,14,30],[26,34,14,32,"x"],[26,35,14,33],[26,37,14,35,"y"],[26,38,14,36],[26,40,14,38],[27,4,15,4],[27,10,15,10,"x2"],[27,12,15,12],[27,15,15,15,"Fp"],[27,17,15,17],[27,18,15,18,"sqr"],[27,21,15,21],[27,22,15,22,"x"],[27,23,15,23],[27,24,15,24],[28,4,16,4],[28,10,16,10,"y2"],[28,12,16,12],[28,15,16,15,"Fp"],[28,17,16,17],[28,18,16,18,"sqr"],[28,21,16,21],[28,22,16,22,"y"],[28,23,16,23],[28,24,16,24],[29,4,17,4],[29,10,17,10,"left"],[29,14,17,14],[29,17,17,17,"Fp"],[29,19,17,19],[29,20,17,20,"add"],[29,23,17,23],[29,24,17,24,"Fp"],[29,26,17,26],[29,27,17,27,"mul"],[29,30,17,30],[29,31,17,31,"CURVE"],[29,36,17,36],[29,37,17,37,"a"],[29,38,17,38],[29,40,17,40,"x2"],[29,42,17,42],[29,43,17,43],[29,45,17,45,"y2"],[29,47,17,47],[29,48,17,48],[30,4,18,4],[30,10,18,10,"right"],[30,15,18,15],[30,18,18,18,"Fp"],[30,20,18,20],[30,21,18,21,"add"],[30,24,18,24],[30,25,18,25,"Fp"],[30,27,18,27],[30,28,18,28,"ONE"],[30,31,18,31],[30,33,18,33,"Fp"],[30,35,18,35],[30,36,18,36,"mul"],[30,39,18,39],[30,40,18,40,"CURVE"],[30,45,18,45],[30,46,18,46,"d"],[30,47,18,47],[30,49,18,49,"Fp"],[30,51,18,51],[30,52,18,52,"mul"],[30,55,18,55],[30,56,18,56,"x2"],[30,58,18,58],[30,60,18,60,"y2"],[30,62,18,62],[30,63,18,63],[30,64,18,64],[30,65,18,65],[31,4,19,4],[31,11,19,11,"Fp"],[31,13,19,13],[31,14,19,14,"eql"],[31,17,19,17],[31,18,19,18,"left"],[31,22,19,22],[31,24,19,24,"right"],[31,29,19,29],[31,30,19,30],[32,2,20,0],[33,2,21,7],[33,11,21,16,"edwards"],[33,18,21,23,"edwards"],[33,19,21,24,"params"],[33,25,21,30],[33,27,21,32,"extraOpts"],[33,36,21,41],[33,39,21,44],[33,40,21,45],[33,41,21,46],[33,43,21,48],[34,4,22,4],[34,10,22,10,"validated"],[34,19,22,19],[34,22,22,22],[34,26,22,22,"_createCurveFields"],[34,51,22,40],[34,53,22,41],[34,62,22,50],[34,64,22,52,"params"],[34,70,22,58],[34,72,22,60,"extraOpts"],[34,81,22,69],[34,83,22,71,"extraOpts"],[34,92,22,80],[34,93,22,81,"FpFnLE"],[34,99,22,87],[34,100,22,88],[35,4,23,4],[35,10,23,10],[36,6,23,12,"Fp"],[36,8,23,14],[37,6,23,16,"Fn"],[38,4,23,19],[38,5,23,20],[38,8,23,23,"validated"],[38,17,23,32],[39,4,24,4],[39,8,24,8,"CURVE"],[39,13,24,13],[39,16,24,16,"validated"],[39,25,24,25],[39,26,24,26,"CURVE"],[39,31,24,31],[40,4,25,4],[40,10,25,10],[41,6,25,12,"h"],[41,7,25,13],[41,9,25,15,"cofactor"],[42,4,25,24],[42,5,25,25],[42,8,25,28,"CURVE"],[42,13,25,33],[43,4,26,4],[43,8,26,4,"_validateObject"],[43,30,26,19],[43,32,26,20,"extraOpts"],[43,41,26,29],[43,43,26,31],[43,44,26,32],[43,45,26,33],[43,47,26,35],[44,6,26,37,"uvRatio"],[44,13,26,44],[44,15,26,46],[45,4,26,57],[45,5,26,58],[45,6,26,59],[46,4,27,4],[47,4,28,4],[48,4,29,4],[49,4,30,4],[50,4,31,4],[50,10,31,10,"MASK"],[50,14,31,14],[50,17,31,17,"_2n"],[50,20,31,20],[50,24,31,25,"BigInt"],[50,30,31,31],[50,31,31,32,"Fn"],[50,33,31,34],[50,34,31,35,"BYTES"],[50,39,31,40],[50,42,31,43],[50,43,31,44],[50,44,31,45],[50,47,31,48,"_1n"],[50,50,31,52],[51,4,32,4],[51,10,32,10,"modP"],[51,14,32,14],[51,17,32,18,"n"],[51,18,32,19],[51,22,32,24,"Fp"],[51,24,32,26],[51,25,32,27,"create"],[51,31,32,33],[51,32,32,34,"n"],[51,33,32,35],[51,34,32,36],[51,35,32,37],[51,36,32,38],[52,4,33,4],[53,4,34,4],[53,10,34,10,"uvRatio"],[53,17,34,17],[53,20,34,20,"extraOpts"],[53,29,34,29],[53,30,34,30,"uvRatio"],[53,37,34,37],[53,42,35,9],[53,43,35,10,"u"],[53,44,35,11],[53,46,35,13,"v"],[53,47,35,14],[53,52,35,19],[54,6,36,12],[54,10,36,16],[55,8,37,16],[55,15,37,23],[56,10,37,25,"isValid"],[56,17,37,32],[56,19,37,34],[56,23,37,38],[57,10,37,40,"value"],[57,15,37,45],[57,17,37,47,"Fp"],[57,19,37,49],[57,20,37,50,"sqrt"],[57,24,37,54],[57,25,37,55,"Fp"],[57,27,37,57],[57,28,37,58,"div"],[57,31,37,61],[57,32,37,62,"u"],[57,33,37,63],[57,35,37,65,"v"],[57,36,37,66],[57,37,37,67],[58,8,37,69],[58,9,37,70],[59,6,38,12],[59,7,38,13],[59,8,39,12],[59,15,39,19,"e"],[59,16,39,20],[59,18,39,22],[60,8,40,16],[60,15,40,23],[61,10,40,25,"isValid"],[61,17,40,32],[61,19,40,34],[61,24,40,39],[62,10,40,41,"value"],[62,15,40,46],[62,17,40,48,"_0n"],[63,8,40,52],[63,9,40,53],[64,6,41,12],[65,4,42,8],[65,5,42,9],[65,6,42,10],[66,4,43,4],[67,4,44,4],[68,4,45,4],[68,8,45,8],[68,9,45,9,"isEdValidXY"],[68,20,45,20],[68,21,45,21,"Fp"],[68,23,45,23],[68,25,45,25,"CURVE"],[68,30,45,30],[68,32,45,32,"CURVE"],[68,37,45,37],[68,38,45,38,"Gx"],[68,40,45,40],[68,42,45,42,"CURVE"],[68,47,45,47],[68,48,45,48,"Gy"],[68,50,45,50],[68,51,45,51],[68,53,46,8],[68,59,46,14],[68,63,46,18,"Error"],[68,68,46,23],[68,69,46,24],[68,104,46,59],[68,105,46,60],[69,4,47,4],[70,0,48,0],[71,0,49,0],[72,0,50,0],[73,4,51,4],[73,13,51,13,"acoord"],[73,19,51,19,"acoord"],[73,20,51,20,"title"],[73,25,51,25],[73,27,51,27,"n"],[73,28,51,28],[73,30,51,30,"banZero"],[73,37,51,37],[73,40,51,40],[73,45,51,45],[73,47,51,47],[74,6,52,8],[74,12,52,14,"min"],[74,15,52,17],[74,18,52,20,"banZero"],[74,25,52,27],[74,28,52,30,"_1n"],[74,31,52,33],[74,34,52,36,"_0n"],[74,37,52,39],[75,6,53,8],[75,10,53,8,"aInRange"],[75,25,53,16],[75,27,53,17],[75,40,53,30],[75,43,53,33,"title"],[75,48,53,38],[75,50,53,40,"n"],[75,51,53,41],[75,53,53,43,"min"],[75,56,53,46],[75,58,53,48,"MASK"],[75,62,53,52],[75,63,53,53],[76,6,54,8],[76,13,54,15,"n"],[76,14,54,16],[77,4,55,4],[78,4,56,4],[78,13,56,13,"aextpoint"],[78,22,56,22,"aextpoint"],[78,23,56,23,"other"],[78,28,56,28],[78,30,56,30],[79,6,57,8],[79,10,57,12],[79,12,57,14,"other"],[79,17,57,19],[79,29,57,31,"Point"],[79,34,57,36],[79,35,57,37],[79,37,58,12],[79,43,58,18],[79,47,58,22,"Error"],[79,52,58,27],[79,53,58,28],[79,77,58,52],[79,78,58,53],[80,4,59,4],[81,4,60,4],[82,4,61,4],[83,4,62,4],[83,10,62,10,"toAffineMemo"],[83,22,62,22],[83,25,62,25],[83,29,62,25,"memoized"],[83,44,62,33],[83,46,62,34],[83,47,62,35,"p"],[83,48,62,36],[83,50,62,38,"iz"],[83,52,62,40],[83,57,62,45],[84,6,63,8],[84,12,63,14],[85,8,63,16,"X"],[85,9,63,17],[86,8,63,19,"Y"],[86,9,63,20],[87,8,63,22,"Z"],[88,6,63,24],[88,7,63,25],[88,10,63,28,"p"],[88,11,63,29],[89,6,64,8],[89,12,64,14,"is0"],[89,15,64,17],[89,18,64,20,"p"],[89,19,64,21],[89,20,64,22,"is0"],[89,23,64,25],[89,24,64,26],[89,25,64,27],[90,6,65,8],[90,10,65,12,"iz"],[90,12,65,14],[90,16,65,18],[90,20,65,22],[90,22,66,12,"iz"],[90,24,66,14],[90,27,66,17,"is0"],[90,30,66,20],[90,33,66,23,"_8n"],[90,36,66,26],[90,39,66,29,"Fp"],[90,41,66,31],[90,42,66,32,"inv"],[90,45,66,35],[90,46,66,36,"Z"],[90,47,66,37],[90,48,66,38],[90,49,66,39],[90,50,66,40],[91,6,67,8],[91,12,67,14,"x"],[91,13,67,15],[91,16,67,18,"modP"],[91,20,67,22],[91,21,67,23,"X"],[91,22,67,24],[91,25,67,27,"iz"],[91,27,67,29],[91,28,67,30],[92,6,68,8],[92,12,68,14,"y"],[92,13,68,15],[92,16,68,18,"modP"],[92,20,68,22],[92,21,68,23,"Y"],[92,22,68,24],[92,25,68,27,"iz"],[92,27,68,29],[92,28,68,30],[93,6,69,8],[93,12,69,14,"zz"],[93,14,69,16],[93,17,69,19,"Fp"],[93,19,69,21],[93,20,69,22,"mul"],[93,23,69,25],[93,24,69,26,"Z"],[93,25,69,27],[93,27,69,29,"iz"],[93,29,69,31],[93,30,69,32],[94,6,70,8],[94,10,70,12,"is0"],[94,13,70,15],[94,15,71,12],[94,22,71,19],[95,8,71,21,"x"],[95,9,71,22],[95,11,71,24,"_0n"],[95,14,71,27],[96,8,71,29,"y"],[96,9,71,30],[96,11,71,32,"_1n"],[97,6,71,36],[97,7,71,37],[98,6,72,8],[98,10,72,12,"zz"],[98,12,72,14],[98,17,72,19,"_1n"],[98,20,72,22],[98,22,73,12],[98,28,73,18],[98,32,73,22,"Error"],[98,37,73,27],[98,38,73,28],[98,56,73,46],[98,57,73,47],[99,6,74,8],[99,13,74,15],[100,8,74,17,"x"],[100,9,74,18],[101,8,74,20,"y"],[102,6,74,22],[102,7,74,23],[103,4,75,4],[103,5,75,5],[103,6,75,6],[104,4,76,4],[104,10,76,10,"assertValidMemo"],[104,25,76,25],[104,28,76,28],[104,32,76,28,"memoized"],[104,47,76,36],[104,49,76,38,"p"],[104,50,76,39],[104,54,76,44],[105,6,77,8],[105,12,77,14],[106,8,77,16,"a"],[106,9,77,17],[107,8,77,19,"d"],[108,6,77,21],[108,7,77,22],[108,10,77,25,"CURVE"],[108,15,77,30],[109,6,78,8],[109,10,78,12,"p"],[109,11,78,13],[109,12,78,14,"is0"],[109,15,78,17],[109,16,78,18],[109,17,78,19],[109,19,79,12],[109,25,79,18],[109,29,79,22,"Error"],[109,34,79,27],[109,35,79,28],[109,52,79,45],[109,53,79,46],[109,54,79,47],[109,55,79,48],[110,6,80,8],[111,6,81,8],[112,6,82,8],[112,12,82,14],[113,8,82,16,"X"],[113,9,82,17],[114,8,82,19,"Y"],[114,9,82,20],[115,8,82,22,"Z"],[115,9,82,23],[116,8,82,25,"T"],[117,6,82,27],[117,7,82,28],[117,10,82,31,"p"],[117,11,82,32],[118,6,83,8],[118,12,83,14,"X2"],[118,14,83,16],[118,17,83,19,"modP"],[118,21,83,23],[118,22,83,24,"X"],[118,23,83,25],[118,26,83,28,"X"],[118,27,83,29],[118,28,83,30],[118,29,83,31],[118,30,83,32],[119,6,84,8],[119,12,84,14,"Y2"],[119,14,84,16],[119,17,84,19,"modP"],[119,21,84,23],[119,22,84,24,"Y"],[119,23,84,25],[119,26,84,28,"Y"],[119,27,84,29],[119,28,84,30],[119,29,84,31],[119,30,84,32],[120,6,85,8],[120,12,85,14,"Z2"],[120,14,85,16],[120,17,85,19,"modP"],[120,21,85,23],[120,22,85,24,"Z"],[120,23,85,25],[120,26,85,28,"Z"],[120,27,85,29],[120,28,85,30],[120,29,85,31],[120,30,85,32],[121,6,86,8],[121,12,86,14,"Z4"],[121,14,86,16],[121,17,86,19,"modP"],[121,21,86,23],[121,22,86,24,"Z2"],[121,24,86,26],[121,27,86,29,"Z2"],[121,29,86,31],[121,30,86,32],[121,31,86,33],[121,32,86,34],[122,6,87,8],[122,12,87,14,"aX2"],[122,15,87,17],[122,18,87,20,"modP"],[122,22,87,24],[122,23,87,25,"X2"],[122,25,87,27],[122,28,87,30,"a"],[122,29,87,31],[122,30,87,32],[122,31,87,33],[122,32,87,34],[123,6,88,8],[123,12,88,14,"left"],[123,16,88,18],[123,19,88,21,"modP"],[123,23,88,25],[123,24,88,26,"Z2"],[123,26,88,28],[123,29,88,31,"modP"],[123,33,88,35],[123,34,88,36,"aX2"],[123,37,88,39],[123,40,88,42,"Y2"],[123,42,88,44],[123,43,88,45],[123,44,88,46],[123,45,88,47],[123,46,88,48],[124,6,89,8],[124,12,89,14,"right"],[124,17,89,19],[124,20,89,22,"modP"],[124,24,89,26],[124,25,89,27,"Z4"],[124,27,89,29],[124,30,89,32,"modP"],[124,34,89,36],[124,35,89,37,"d"],[124,36,89,38],[124,39,89,41,"modP"],[124,43,89,45],[124,44,89,46,"X2"],[124,46,89,48],[124,49,89,51,"Y2"],[124,51,89,53],[124,52,89,54],[124,53,89,55],[124,54,89,56],[124,55,89,57],[124,56,89,58],[125,6,90,8],[125,10,90,12,"left"],[125,14,90,16],[125,19,90,21,"right"],[125,24,90,26],[125,26,91,12],[125,32,91,18],[125,36,91,22,"Error"],[125,41,91,27],[125,42,91,28],[125,81,91,67],[125,82,91,68],[126,6,92,8],[127,6,93,8],[127,12,93,14,"XY"],[127,14,93,16],[127,17,93,19,"modP"],[127,21,93,23],[127,22,93,24,"X"],[127,23,93,25],[127,26,93,28,"Y"],[127,27,93,29],[127,28,93,30],[128,6,94,8],[128,12,94,14,"ZT"],[128,14,94,16],[128,17,94,19,"modP"],[128,21,94,23],[128,22,94,24,"Z"],[128,23,94,25],[128,26,94,28,"T"],[128,27,94,29],[128,28,94,30],[129,6,95,8],[129,10,95,12,"XY"],[129,12,95,14],[129,17,95,19,"ZT"],[129,19,95,21],[129,21,96,12],[129,27,96,18],[129,31,96,22,"Error"],[129,36,96,27],[129,37,96,28],[129,76,96,67],[129,77,96,68],[130,6,97,8],[130,13,97,15],[130,17,97,19],[131,4,98,4],[131,5,98,5],[131,6,98,6],[132,4,99,4],[133,4,100,4],[134,4,101,4],[134,10,101,10,"Point"],[134,15,101,15],[134,16,101,16],[135,6,102,8,"constructor"],[135,17,102,19,"constructor"],[135,18,102,20,"X"],[135,19,102,21],[135,21,102,23,"Y"],[135,22,102,24],[135,24,102,26,"Z"],[135,25,102,27],[135,27,102,29,"T"],[135,28,102,30],[135,30,102,32],[136,8,103,12],[136,12,103,16],[136,13,103,17,"X"],[136,14,103,18],[136,17,103,21,"acoord"],[136,23,103,27],[136,24,103,28],[136,27,103,31],[136,29,103,33,"X"],[136,30,103,34],[136,31,103,35],[137,8,104,12],[137,12,104,16],[137,13,104,17,"Y"],[137,14,104,18],[137,17,104,21,"acoord"],[137,23,104,27],[137,24,104,28],[137,27,104,31],[137,29,104,33,"Y"],[137,30,104,34],[137,31,104,35],[138,8,105,12],[138,12,105,16],[138,13,105,17,"Z"],[138,14,105,18],[138,17,105,21,"acoord"],[138,23,105,27],[138,24,105,28],[138,27,105,31],[138,29,105,33,"Z"],[138,30,105,34],[138,32,105,36],[138,36,105,40],[138,37,105,41],[139,8,106,12],[139,12,106,16],[139,13,106,17,"T"],[139,14,106,18],[139,17,106,21,"acoord"],[139,23,106,27],[139,24,106,28],[139,27,106,31],[139,29,106,33,"T"],[139,30,106,34],[139,31,106,35],[140,8,107,12,"Object"],[140,14,107,18],[140,15,107,19,"freeze"],[140,21,107,25],[140,22,107,26],[140,26,107,30],[140,27,107,31],[141,6,108,8],[142,6,109,8],[142,13,109,15,"CURVE"],[142,18,109,20,"CURVE"],[142,19,109,20],[142,21,109,23],[143,8,110,12],[143,15,110,19,"CURVE"],[143,20,110,24],[144,6,111,8],[145,6,112,8],[145,13,112,15,"fromAffine"],[145,23,112,25,"fromAffine"],[145,24,112,26,"p"],[145,25,112,27],[145,27,112,29],[146,8,113,12],[146,12,113,16,"p"],[146,13,113,17],[146,25,113,29,"Point"],[146,30,113,34],[146,32,114,16],[146,38,114,22],[146,42,114,26,"Error"],[146,47,114,31],[146,48,114,32],[146,76,114,60],[146,77,114,61],[147,8,115,12],[147,14,115,18],[148,10,115,20,"x"],[148,11,115,21],[149,10,115,23,"y"],[150,8,115,25],[150,9,115,26],[150,12,115,29,"p"],[150,13,115,30],[150,17,115,34],[150,18,115,35],[150,19,115,36],[151,8,116,12,"acoord"],[151,14,116,18],[151,15,116,19],[151,18,116,22],[151,20,116,24,"x"],[151,21,116,25],[151,22,116,26],[152,8,117,12,"acoord"],[152,14,117,18],[152,15,117,19],[152,18,117,22],[152,20,117,24,"y"],[152,21,117,25],[152,22,117,26],[153,8,118,12],[153,15,118,19],[153,19,118,23,"Point"],[153,24,118,28],[153,25,118,29,"x"],[153,26,118,30],[153,28,118,32,"y"],[153,29,118,33],[153,31,118,35,"_1n"],[153,34,118,38],[153,36,118,40,"modP"],[153,40,118,44],[153,41,118,45,"x"],[153,42,118,46],[153,45,118,49,"y"],[153,46,118,50],[153,47,118,51],[153,48,118,52],[154,6,119,8],[155,6,120,8],[156,6,121,8],[156,13,121,15,"fromBytes"],[156,22,121,24,"fromBytes"],[156,23,121,25,"bytes"],[156,28,121,30],[156,30,121,32,"zip215"],[156,36,121,38],[156,39,121,41],[156,44,121,46],[156,46,121,48],[157,8,122,12],[157,14,122,18,"len"],[157,17,122,21],[157,20,122,24,"Fp"],[157,22,122,26],[157,23,122,27,"BYTES"],[157,28,122,32],[158,8,123,12],[158,14,123,18],[159,10,123,20,"a"],[159,11,123,21],[160,10,123,23,"d"],[161,8,123,25],[161,9,123,26],[161,12,123,29,"CURVE"],[161,17,123,34],[162,8,124,12,"bytes"],[162,13,124,17],[162,16,124,20],[162,20,124,20,"copyBytes"],[162,36,124,29],[162,38,124,30],[162,42,124,30,"abytes"],[162,57,124,36],[162,59,124,37,"bytes"],[162,64,124,42],[162,66,124,44,"len"],[162,69,124,47],[162,71,124,49],[162,78,124,56],[162,79,124,57],[162,80,124,58],[163,8,125,12],[163,12,125,12,"abool"],[163,26,125,17],[163,28,125,18,"zip215"],[163,34,125,24],[163,36,125,26],[163,44,125,34],[163,45,125,35],[164,8,126,12],[164,14,126,18,"normed"],[164,20,126,24],[164,23,126,27],[164,27,126,27,"copyBytes"],[164,43,126,36],[164,45,126,37,"bytes"],[164,50,126,42],[164,51,126,43],[164,52,126,44],[164,53,126,45],[165,8,127,12],[165,14,127,18,"lastByte"],[165,22,127,26],[165,25,127,29,"bytes"],[165,30,127,34],[165,31,127,35,"len"],[165,34,127,38],[165,37,127,41],[165,38,127,42],[165,39,127,43],[165,40,127,44],[165,41,127,45],[166,8,128,12,"normed"],[166,14,128,18],[166,15,128,19,"len"],[166,18,128,22],[166,21,128,25],[166,22,128,26],[166,23,128,27],[166,26,128,30,"lastByte"],[166,34,128,38],[166,37,128,41],[166,38,128,42],[166,42,128,46],[166,43,128,47],[166,44,128,48],[167,8,129,12],[167,14,129,18,"y"],[167,15,129,19],[167,18,129,22],[167,22,129,22,"bytesToNumberLE"],[167,44,129,37],[167,46,129,38,"normed"],[167,52,129,44],[167,53,129,45],[168,8,130,12],[169,8,131,12],[170,8,132,12],[171,8,133,12],[172,8,134,12],[172,14,134,18,"max"],[172,17,134,21],[172,20,134,24,"zip215"],[172,26,134,30],[172,29,134,33,"MASK"],[172,33,134,37],[172,36,134,40,"Fp"],[172,38,134,42],[172,39,134,43,"ORDER"],[172,44,134,48],[173,8,135,12],[173,12,135,12,"aInRange"],[173,27,135,20],[173,29,135,21],[173,38,135,30],[173,40,135,32,"y"],[173,41,135,33],[173,43,135,35,"_0n"],[173,46,135,38],[173,48,135,40,"max"],[173,51,135,43],[173,52,135,44],[174,8,136,12],[175,8,137,12],[176,8,138,12],[176,14,138,18,"y2"],[176,16,138,20],[176,19,138,23,"modP"],[176,23,138,27],[176,24,138,28,"y"],[176,25,138,29],[176,28,138,32,"y"],[176,29,138,33],[176,30,138,34],[176,31,138,35],[176,32,138,36],[177,8,139,12],[177,14,139,18,"u"],[177,15,139,19],[177,18,139,22,"modP"],[177,22,139,26],[177,23,139,27,"y2"],[177,25,139,29],[177,28,139,32,"_1n"],[177,31,139,35],[177,32,139,36],[177,33,139,37],[177,34,139,38],[178,8,140,12],[178,14,140,18,"v"],[178,15,140,19],[178,18,140,22,"modP"],[178,22,140,26],[178,23,140,27,"d"],[178,24,140,28],[178,27,140,31,"y2"],[178,29,140,33],[178,32,140,36,"a"],[178,33,140,37],[178,34,140,38],[178,35,140,39],[178,36,140,40],[179,8,141,12],[179,12,141,16],[180,10,141,18,"isValid"],[180,17,141,25],[181,10,141,27,"value"],[181,15,141,32],[181,17,141,34,"x"],[182,8,141,36],[182,9,141,37],[182,12,141,40,"uvRatio"],[182,19,141,47],[182,20,141,48,"u"],[182,21,141,49],[182,23,141,51,"v"],[182,24,141,52],[182,25,141,53],[182,26,141,54],[182,27,141,55],[183,8,142,12],[183,12,142,16],[183,13,142,17,"isValid"],[183,20,142,24],[183,22,143,16],[183,28,143,22],[183,32,143,26,"Error"],[183,37,143,31],[183,38,143,32],[183,71,143,65],[183,72,143,66],[184,8,144,12],[184,14,144,18,"isXOdd"],[184,20,144,24],[184,23,144,27],[184,24,144,28,"x"],[184,25,144,29],[184,28,144,32,"_1n"],[184,31,144,35],[184,37,144,41,"_1n"],[184,40,144,44],[184,41,144,45],[184,42,144,46],[185,8,145,12],[185,14,145,18,"isLastByteOdd"],[185,27,145,31],[185,30,145,34],[185,31,145,35,"lastByte"],[185,39,145,43],[185,42,145,46],[185,46,145,50],[185,52,145,56],[185,53,145,57],[185,54,145,58],[185,55,145,59],[186,8,146,12],[186,12,146,16],[186,13,146,17,"zip215"],[186,19,146,23],[186,23,146,27,"x"],[186,24,146,28],[186,29,146,33,"_0n"],[186,32,146,36],[186,36,146,40,"isLastByteOdd"],[186,49,146,53],[187,10,147,16],[188,10,148,16],[188,16,148,22],[188,20,148,26,"Error"],[188,25,148,31],[188,26,148,32],[188,52,148,58],[188,53,148,59],[189,8,149,12],[189,12,149,16,"isLastByteOdd"],[189,25,149,29],[189,30,149,34,"isXOdd"],[189,36,149,40],[189,38,150,16,"x"],[189,39,150,17],[189,42,150,20,"modP"],[189,46,150,24],[189,47,150,25],[189,48,150,26,"x"],[189,49,150,27],[189,50,150,28],[189,51,150,29],[189,52,150,30],[190,8,151,12],[190,15,151,19,"Point"],[190,20,151,24],[190,21,151,25,"fromAffine"],[190,31,151,35],[190,32,151,36],[191,10,151,38,"x"],[191,11,151,39],[192,10,151,41,"y"],[193,8,151,43],[193,9,151,44],[193,10,151,45],[194,6,152,8],[195,6,153,8],[195,13,153,15,"fromHex"],[195,20,153,22,"fromHex"],[195,21,153,23,"bytes"],[195,26,153,28],[195,28,153,30,"zip215"],[195,34,153,36],[195,37,153,39],[195,42,153,44],[195,44,153,46],[196,8,154,12],[196,15,154,19,"Point"],[196,20,154,24],[196,21,154,25,"fromBytes"],[196,30,154,34],[196,31,154,35],[196,35,154,35,"ensureBytes"],[196,53,154,46],[196,55,154,47],[196,62,154,54],[196,64,154,56,"bytes"],[196,69,154,61],[196,70,154,62],[196,72,154,64,"zip215"],[196,78,154,70],[196,79,154,71],[197,6,155,8],[198,6,156,8],[198,10,156,12,"x"],[198,11,156,13,"x"],[198,12,156,13],[198,14,156,16],[199,8,157,12],[199,15,157,19],[199,19,157,23],[199,20,157,24,"toAffine"],[199,28,157,32],[199,29,157,33],[199,30,157,34],[199,31,157,35,"x"],[199,32,157,36],[200,6,158,8],[201,6,159,8],[201,10,159,12,"y"],[201,11,159,13,"y"],[201,12,159,13],[201,14,159,16],[202,8,160,12],[202,15,160,19],[202,19,160,23],[202,20,160,24,"toAffine"],[202,28,160,32],[202,29,160,33],[202,30,160,34],[202,31,160,35,"y"],[202,32,160,36],[203,6,161,8],[204,6,162,8,"precompute"],[204,16,162,18,"precompute"],[204,17,162,19,"windowSize"],[204,27,162,29],[204,30,162,32],[204,31,162,33],[204,33,162,35,"isLazy"],[204,39,162,41],[204,42,162,44],[204,46,162,48],[204,48,162,50],[205,8,163,12,"wnaf"],[205,12,163,16],[205,13,163,17,"createCache"],[205,24,163,28],[205,25,163,29],[205,29,163,33],[205,31,163,35,"windowSize"],[205,41,163,45],[205,42,163,46],[206,8,164,12],[206,12,164,16],[206,13,164,17,"isLazy"],[206,19,164,23],[206,21,165,16],[206,25,165,20],[206,26,165,21,"multiply"],[206,34,165,29],[206,35,165,30,"_2n"],[206,38,165,33],[206,39,165,34],[206,40,165,35],[206,41,165,36],[207,8,166,12],[207,15,166,19],[207,19,166,23],[208,6,167,8],[209,6,168,8],[210,6,169,8,"assertValidity"],[210,20,169,22,"assertValidity"],[210,21,169,22],[210,23,169,25],[211,8,170,12,"assertValidMemo"],[211,23,170,27],[211,24,170,28],[211,28,170,32],[211,29,170,33],[212,6,171,8],[213,6,172,8],[214,6,173,8,"equals"],[214,12,173,14,"equals"],[214,13,173,15,"other"],[214,18,173,20],[214,20,173,22],[215,8,174,12,"aextpoint"],[215,17,174,21],[215,18,174,22,"other"],[215,23,174,27],[215,24,174,28],[216,8,175,12],[216,14,175,18],[217,10,175,20,"X"],[217,11,175,21],[217,13,175,23,"X1"],[217,15,175,25],[218,10,175,27,"Y"],[218,11,175,28],[218,13,175,30,"Y1"],[218,15,175,32],[219,10,175,34,"Z"],[219,11,175,35],[219,13,175,37,"Z1"],[220,8,175,40],[220,9,175,41],[220,12,175,44],[220,16,175,48],[221,8,176,12],[221,14,176,18],[222,10,176,20,"X"],[222,11,176,21],[222,13,176,23,"X2"],[222,15,176,25],[223,10,176,27,"Y"],[223,11,176,28],[223,13,176,30,"Y2"],[223,15,176,32],[224,10,176,34,"Z"],[224,11,176,35],[224,13,176,37,"Z2"],[225,8,176,40],[225,9,176,41],[225,12,176,44,"other"],[225,17,176,49],[226,8,177,12],[226,14,177,18,"X1Z2"],[226,18,177,22],[226,21,177,25,"modP"],[226,25,177,29],[226,26,177,30,"X1"],[226,28,177,32],[226,31,177,35,"Z2"],[226,33,177,37],[226,34,177,38],[227,8,178,12],[227,14,178,18,"X2Z1"],[227,18,178,22],[227,21,178,25,"modP"],[227,25,178,29],[227,26,178,30,"X2"],[227,28,178,32],[227,31,178,35,"Z1"],[227,33,178,37],[227,34,178,38],[228,8,179,12],[228,14,179,18,"Y1Z2"],[228,18,179,22],[228,21,179,25,"modP"],[228,25,179,29],[228,26,179,30,"Y1"],[228,28,179,32],[228,31,179,35,"Z2"],[228,33,179,37],[228,34,179,38],[229,8,180,12],[229,14,180,18,"Y2Z1"],[229,18,180,22],[229,21,180,25,"modP"],[229,25,180,29],[229,26,180,30,"Y2"],[229,28,180,32],[229,31,180,35,"Z1"],[229,33,180,37],[229,34,180,38],[230,8,181,12],[230,15,181,19,"X1Z2"],[230,19,181,23],[230,24,181,28,"X2Z1"],[230,28,181,32],[230,32,181,36,"Y1Z2"],[230,36,181,40],[230,41,181,45,"Y2Z1"],[230,45,181,49],[231,6,182,8],[232,6,183,8,"is0"],[232,9,183,11,"is0"],[232,10,183,11],[232,12,183,14],[233,8,184,12],[233,15,184,19],[233,19,184,23],[233,20,184,24,"equals"],[233,26,184,30],[233,27,184,31,"Point"],[233,32,184,36],[233,33,184,37,"ZERO"],[233,37,184,41],[233,38,184,42],[234,6,185,8],[235,6,186,8,"negate"],[235,12,186,14,"negate"],[235,13,186,14],[235,15,186,17],[236,8,187,12],[237,8,188,12],[237,15,188,19],[237,19,188,23,"Point"],[237,24,188,28],[237,25,188,29,"modP"],[237,29,188,33],[237,30,188,34],[237,31,188,35],[237,35,188,39],[237,36,188,40,"X"],[237,37,188,41],[237,38,188,42],[237,40,188,44],[237,44,188,48],[237,45,188,49,"Y"],[237,46,188,50],[237,48,188,52],[237,52,188,56],[237,53,188,57,"Z"],[237,54,188,58],[237,56,188,60,"modP"],[237,60,188,64],[237,61,188,65],[237,62,188,66],[237,66,188,70],[237,67,188,71,"T"],[237,68,188,72],[237,69,188,73],[237,70,188,74],[238,6,189,8],[239,6,190,8],[240,6,191,8],[241,6,192,8],[242,6,193,8,"double"],[242,12,193,14,"double"],[242,13,193,14],[242,15,193,17],[243,8,194,12],[243,14,194,18],[244,10,194,20,"a"],[245,8,194,22],[245,9,194,23],[245,12,194,26,"CURVE"],[245,17,194,31],[246,8,195,12],[246,14,195,18],[247,10,195,20,"X"],[247,11,195,21],[247,13,195,23,"X1"],[247,15,195,25],[248,10,195,27,"Y"],[248,11,195,28],[248,13,195,30,"Y1"],[248,15,195,32],[249,10,195,34,"Z"],[249,11,195,35],[249,13,195,37,"Z1"],[250,8,195,40],[250,9,195,41],[250,12,195,44],[250,16,195,48],[251,8,196,12],[251,14,196,18,"A"],[251,15,196,19],[251,18,196,22,"modP"],[251,22,196,26],[251,23,196,27,"X1"],[251,25,196,29],[251,28,196,32,"X1"],[251,30,196,34],[251,31,196,35],[251,32,196,36],[251,33,196,37],[252,8,197,12],[252,14,197,18,"B"],[252,15,197,19],[252,18,197,22,"modP"],[252,22,197,26],[252,23,197,27,"Y1"],[252,25,197,29],[252,28,197,32,"Y1"],[252,30,197,34],[252,31,197,35],[252,32,197,36],[252,33,197,37],[253,8,198,12],[253,14,198,18,"C"],[253,15,198,19],[253,18,198,22,"modP"],[253,22,198,26],[253,23,198,27,"_2n"],[253,26,198,30],[253,29,198,33,"modP"],[253,33,198,37],[253,34,198,38,"Z1"],[253,36,198,40],[253,39,198,43,"Z1"],[253,41,198,45],[253,42,198,46],[253,43,198,47],[253,44,198,48],[253,45,198,49],[254,8,199,12],[254,14,199,18,"D"],[254,15,199,19],[254,18,199,22,"modP"],[254,22,199,26],[254,23,199,27,"a"],[254,24,199,28],[254,27,199,31,"A"],[254,28,199,32],[254,29,199,33],[254,30,199,34],[254,31,199,35],[255,8,200,12],[255,14,200,18,"x1y1"],[255,18,200,22],[255,21,200,25,"X1"],[255,23,200,27],[255,26,200,30,"Y1"],[255,28,200,32],[256,8,201,12],[256,14,201,18,"E"],[256,15,201,19],[256,18,201,22,"modP"],[256,22,201,26],[256,23,201,27,"modP"],[256,27,201,31],[256,28,201,32,"x1y1"],[256,32,201,36],[256,35,201,39,"x1y1"],[256,39,201,43],[256,40,201,44],[256,43,201,47,"A"],[256,44,201,48],[256,47,201,51,"B"],[256,48,201,52],[256,49,201,53],[256,50,201,54],[256,51,201,55],[257,8,202,12],[257,14,202,18,"G"],[257,15,202,19],[257,18,202,22,"D"],[257,19,202,23],[257,22,202,26,"B"],[257,23,202,27],[257,24,202,28],[257,25,202,29],[258,8,203,12],[258,14,203,18,"F"],[258,15,203,19],[258,18,203,22,"G"],[258,19,203,23],[258,22,203,26,"C"],[258,23,203,27],[258,24,203,28],[258,25,203,29],[259,8,204,12],[259,14,204,18,"H"],[259,15,204,19],[259,18,204,22,"D"],[259,19,204,23],[259,22,204,26,"B"],[259,23,204,27],[259,24,204,28],[259,25,204,29],[260,8,205,12],[260,14,205,18,"X3"],[260,16,205,20],[260,19,205,23,"modP"],[260,23,205,27],[260,24,205,28,"E"],[260,25,205,29],[260,28,205,32,"F"],[260,29,205,33],[260,30,205,34],[260,31,205,35],[260,32,205,36],[261,8,206,12],[261,14,206,18,"Y3"],[261,16,206,20],[261,19,206,23,"modP"],[261,23,206,27],[261,24,206,28,"G"],[261,25,206,29],[261,28,206,32,"H"],[261,29,206,33],[261,30,206,34],[261,31,206,35],[261,32,206,36],[262,8,207,12],[262,14,207,18,"T3"],[262,16,207,20],[262,19,207,23,"modP"],[262,23,207,27],[262,24,207,28,"E"],[262,25,207,29],[262,28,207,32,"H"],[262,29,207,33],[262,30,207,34],[262,31,207,35],[262,32,207,36],[263,8,208,12],[263,14,208,18,"Z3"],[263,16,208,20],[263,19,208,23,"modP"],[263,23,208,27],[263,24,208,28,"F"],[263,25,208,29],[263,28,208,32,"G"],[263,29,208,33],[263,30,208,34],[263,31,208,35],[263,32,208,36],[264,8,209,12],[264,15,209,19],[264,19,209,23,"Point"],[264,24,209,28],[264,25,209,29,"X3"],[264,27,209,31],[264,29,209,33,"Y3"],[264,31,209,35],[264,33,209,37,"Z3"],[264,35,209,39],[264,37,209,41,"T3"],[264,39,209,43],[264,40,209,44],[265,6,210,8],[266,6,211,8],[267,6,212,8],[268,6,213,8],[269,6,214,8,"add"],[269,9,214,11,"add"],[269,10,214,12,"other"],[269,15,214,17],[269,17,214,19],[270,8,215,12,"aextpoint"],[270,17,215,21],[270,18,215,22,"other"],[270,23,215,27],[270,24,215,28],[271,8,216,12],[271,14,216,18],[272,10,216,20,"a"],[272,11,216,21],[273,10,216,23,"d"],[274,8,216,25],[274,9,216,26],[274,12,216,29,"CURVE"],[274,17,216,34],[275,8,217,12],[275,14,217,18],[276,10,217,20,"X"],[276,11,217,21],[276,13,217,23,"X1"],[276,15,217,25],[277,10,217,27,"Y"],[277,11,217,28],[277,13,217,30,"Y1"],[277,15,217,32],[278,10,217,34,"Z"],[278,11,217,35],[278,13,217,37,"Z1"],[278,15,217,39],[279,10,217,41,"T"],[279,11,217,42],[279,13,217,44,"T1"],[280,8,217,47],[280,9,217,48],[280,12,217,51],[280,16,217,55],[281,8,218,12],[281,14,218,18],[282,10,218,20,"X"],[282,11,218,21],[282,13,218,23,"X2"],[282,15,218,25],[283,10,218,27,"Y"],[283,11,218,28],[283,13,218,30,"Y2"],[283,15,218,32],[284,10,218,34,"Z"],[284,11,218,35],[284,13,218,37,"Z2"],[284,15,218,39],[285,10,218,41,"T"],[285,11,218,42],[285,13,218,44,"T2"],[286,8,218,47],[286,9,218,48],[286,12,218,51,"other"],[286,17,218,56],[287,8,219,12],[287,14,219,18,"A"],[287,15,219,19],[287,18,219,22,"modP"],[287,22,219,26],[287,23,219,27,"X1"],[287,25,219,29],[287,28,219,32,"X2"],[287,30,219,34],[287,31,219,35],[287,32,219,36],[287,33,219,37],[288,8,220,12],[288,14,220,18,"B"],[288,15,220,19],[288,18,220,22,"modP"],[288,22,220,26],[288,23,220,27,"Y1"],[288,25,220,29],[288,28,220,32,"Y2"],[288,30,220,34],[288,31,220,35],[288,32,220,36],[288,33,220,37],[289,8,221,12],[289,14,221,18,"C"],[289,15,221,19],[289,18,221,22,"modP"],[289,22,221,26],[289,23,221,27,"T1"],[289,25,221,29],[289,28,221,32,"d"],[289,29,221,33],[289,32,221,36,"T2"],[289,34,221,38],[289,35,221,39],[289,36,221,40],[289,37,221,41],[290,8,222,12],[290,14,222,18,"D"],[290,15,222,19],[290,18,222,22,"modP"],[290,22,222,26],[290,23,222,27,"Z1"],[290,25,222,29],[290,28,222,32,"Z2"],[290,30,222,34],[290,31,222,35],[290,32,222,36],[290,33,222,37],[291,8,223,12],[291,14,223,18,"E"],[291,15,223,19],[291,18,223,22,"modP"],[291,22,223,26],[291,23,223,27],[291,24,223,28,"X1"],[291,26,223,30],[291,29,223,33,"Y1"],[291,31,223,35],[291,36,223,40,"X2"],[291,38,223,42],[291,41,223,45,"Y2"],[291,43,223,47],[291,44,223,48],[291,47,223,51,"A"],[291,48,223,52],[291,51,223,55,"B"],[291,52,223,56],[291,53,223,57],[291,54,223,58],[291,55,223,59],[292,8,224,12],[292,14,224,18,"F"],[292,15,224,19],[292,18,224,22,"D"],[292,19,224,23],[292,22,224,26,"C"],[292,23,224,27],[292,24,224,28],[292,25,224,29],[293,8,225,12],[293,14,225,18,"G"],[293,15,225,19],[293,18,225,22,"D"],[293,19,225,23],[293,22,225,26,"C"],[293,23,225,27],[293,24,225,28],[293,25,225,29],[294,8,226,12],[294,14,226,18,"H"],[294,15,226,19],[294,18,226,22,"modP"],[294,22,226,26],[294,23,226,27,"B"],[294,24,226,28],[294,27,226,31,"a"],[294,28,226,32],[294,31,226,35,"A"],[294,32,226,36],[294,33,226,37],[294,34,226,38],[294,35,226,39],[295,8,227,12],[295,14,227,18,"X3"],[295,16,227,20],[295,19,227,23,"modP"],[295,23,227,27],[295,24,227,28,"E"],[295,25,227,29],[295,28,227,32,"F"],[295,29,227,33],[295,30,227,34],[295,31,227,35],[295,32,227,36],[296,8,228,12],[296,14,228,18,"Y3"],[296,16,228,20],[296,19,228,23,"modP"],[296,23,228,27],[296,24,228,28,"G"],[296,25,228,29],[296,28,228,32,"H"],[296,29,228,33],[296,30,228,34],[296,31,228,35],[296,32,228,36],[297,8,229,12],[297,14,229,18,"T3"],[297,16,229,20],[297,19,229,23,"modP"],[297,23,229,27],[297,24,229,28,"E"],[297,25,229,29],[297,28,229,32,"H"],[297,29,229,33],[297,30,229,34],[297,31,229,35],[297,32,229,36],[298,8,230,12],[298,14,230,18,"Z3"],[298,16,230,20],[298,19,230,23,"modP"],[298,23,230,27],[298,24,230,28,"F"],[298,25,230,29],[298,28,230,32,"G"],[298,29,230,33],[298,30,230,34],[298,31,230,35],[298,32,230,36],[299,8,231,12],[299,15,231,19],[299,19,231,23,"Point"],[299,24,231,28],[299,25,231,29,"X3"],[299,27,231,31],[299,29,231,33,"Y3"],[299,31,231,35],[299,33,231,37,"Z3"],[299,35,231,39],[299,37,231,41,"T3"],[299,39,231,43],[299,40,231,44],[300,6,232,8],[301,6,233,8,"subtract"],[301,14,233,16,"subtract"],[301,15,233,17,"other"],[301,20,233,22],[301,22,233,24],[302,8,234,12],[302,15,234,19],[302,19,234,23],[302,20,234,24,"add"],[302,23,234,27],[302,24,234,28,"other"],[302,29,234,33],[302,30,234,34,"negate"],[302,36,234,40],[302,37,234,41],[302,38,234,42],[302,39,234,43],[303,6,235,8],[304,6,236,8],[305,6,237,8,"multiply"],[305,14,237,16,"multiply"],[305,15,237,17,"scalar"],[305,21,237,23],[305,23,237,25],[306,8,238,12],[307,8,239,12],[307,12,239,16],[307,13,239,17,"Fn"],[307,15,239,19],[307,16,239,20,"isValidNot0"],[307,27,239,31],[307,28,239,32,"scalar"],[307,34,239,38],[307,35,239,39],[307,37,240,16],[307,43,240,22],[307,47,240,26,"Error"],[307,52,240,31],[307,53,240,32],[307,97,240,76],[307,98,240,77],[308,8,241,12],[308,14,241,18],[309,10,241,20,"p"],[309,11,241,21],[310,10,241,23,"f"],[311,8,241,25],[311,9,241,26],[311,12,241,29,"wnaf"],[311,16,241,33],[311,17,241,34,"cached"],[311,23,241,40],[311,24,241,41],[311,28,241,45],[311,30,241,47,"scalar"],[311,36,241,53],[311,38,241,56,"p"],[311,39,241,57],[311,43,241,62],[311,47,241,62,"normalizeZ"],[311,64,241,72],[311,66,241,73,"Point"],[311,71,241,78],[311,73,241,80,"p"],[311,74,241,81],[311,75,241,82],[311,76,241,83],[312,8,242,12],[312,15,242,19],[312,19,242,19,"normalizeZ"],[312,36,242,29],[312,38,242,30,"Point"],[312,43,242,35],[312,45,242,37],[312,46,242,38,"p"],[312,47,242,39],[312,49,242,41,"f"],[312,50,242,42],[312,51,242,43],[312,52,242,44],[312,53,242,45],[312,54,242,46],[312,55,242,47],[313,6,243,8],[314,6,244,8],[315,6,245,8],[316,6,246,8],[317,6,247,8],[318,6,248,8],[319,6,249,8,"multiplyUnsafe"],[319,20,249,22,"multiplyUnsafe"],[319,21,249,23,"scalar"],[319,27,249,29],[319,29,249,31,"acc"],[319,32,249,34],[319,35,249,37,"Point"],[319,40,249,42],[319,41,249,43,"ZERO"],[319,45,249,47],[319,47,249,49],[320,8,250,12],[321,8,251,12],[321,12,251,16],[321,13,251,17,"Fn"],[321,15,251,19],[321,16,251,20,"isValid"],[321,23,251,27],[321,24,251,28,"scalar"],[321,30,251,34],[321,31,251,35],[321,33,252,16],[321,39,252,22],[321,43,252,26,"Error"],[321,48,252,31],[321,49,252,32],[321,93,252,76],[321,94,252,77],[322,8,253,12],[322,12,253,16,"scalar"],[322,18,253,22],[322,23,253,27,"_0n"],[322,26,253,30],[322,28,254,16],[322,35,254,23,"Point"],[322,40,254,28],[322,41,254,29,"ZERO"],[322,45,254,33],[323,8,255,12],[323,12,255,16],[323,16,255,20],[323,17,255,21,"is0"],[323,20,255,24],[323,21,255,25],[323,22,255,26],[323,26,255,30,"scalar"],[323,32,255,36],[323,37,255,41,"_1n"],[323,40,255,44],[323,42,256,16],[323,49,256,23],[323,53,256,27],[324,8,257,12],[324,15,257,19,"wnaf"],[324,19,257,23],[324,20,257,24,"unsafe"],[324,26,257,30],[324,27,257,31],[324,31,257,35],[324,33,257,37,"scalar"],[324,39,257,43],[324,41,257,46,"p"],[324,42,257,47],[324,46,257,52],[324,50,257,52,"normalizeZ"],[324,67,257,62],[324,69,257,63,"Point"],[324,74,257,68],[324,76,257,70,"p"],[324,77,257,71],[324,78,257,72],[324,80,257,74,"acc"],[324,83,257,77],[324,84,257,78],[325,6,258,8],[326,6,259,8],[327,6,260,8],[328,6,261,8],[329,6,262,8],[330,6,263,8,"isSmallOrder"],[330,18,263,20,"isSmallOrder"],[330,19,263,20],[330,21,263,23],[331,8,264,12],[331,15,264,19],[331,19,264,23],[331,20,264,24,"multiplyUnsafe"],[331,34,264,38],[331,35,264,39,"cofactor"],[331,43,264,47],[331,44,264,48],[331,45,264,49,"is0"],[331,48,264,52],[331,49,264,53],[331,50,264,54],[332,6,265,8],[333,6,266,8],[334,6,267,8],[335,6,268,8,"isTorsionFree"],[335,19,268,21,"isTorsionFree"],[335,20,268,21],[335,22,268,24],[336,8,269,12],[336,15,269,19,"wnaf"],[336,19,269,23],[336,20,269,24,"unsafe"],[336,26,269,30],[336,27,269,31],[336,31,269,35],[336,33,269,37,"CURVE"],[336,38,269,42],[336,39,269,43,"n"],[336,40,269,44],[336,41,269,45],[336,42,269,46,"is0"],[336,45,269,49],[336,46,269,50],[336,47,269,51],[337,6,270,8],[338,6,271,8],[339,6,272,8],[340,6,273,8,"toAffine"],[340,14,273,16,"toAffine"],[340,15,273,17,"invertedZ"],[340,24,273,26],[340,26,273,28],[341,8,274,12],[341,15,274,19,"toAffineMemo"],[341,27,274,31],[341,28,274,32],[341,32,274,36],[341,34,274,38,"invertedZ"],[341,43,274,47],[341,44,274,48],[342,6,275,8],[343,6,276,8,"clearCofactor"],[343,19,276,21,"clearCofactor"],[343,20,276,21],[343,22,276,24],[344,8,277,12],[344,12,277,16,"cofactor"],[344,20,277,24],[344,25,277,29,"_1n"],[344,28,277,32],[344,30,278,16],[344,37,278,23],[344,41,278,27],[345,8,279,12],[345,15,279,19],[345,19,279,23],[345,20,279,24,"multiplyUnsafe"],[345,34,279,38],[345,35,279,39,"cofactor"],[345,43,279,47],[345,44,279,48],[346,6,280,8],[347,6,281,8,"toBytes"],[347,13,281,15,"toBytes"],[347,14,281,15],[347,16,281,18],[348,8,282,12],[348,14,282,18],[349,10,282,20,"x"],[349,11,282,21],[350,10,282,23,"y"],[351,8,282,25],[351,9,282,26],[351,12,282,29],[351,16,282,33],[351,17,282,34,"toAffine"],[351,25,282,42],[351,26,282,43],[351,27,282,44],[352,8,283,12],[353,8,284,12],[353,14,284,18,"bytes"],[353,19,284,23],[353,22,284,26,"Fp"],[353,24,284,28],[353,25,284,29,"toBytes"],[353,32,284,36],[353,33,284,37,"y"],[353,34,284,38],[353,35,284,39],[354,8,285,12],[355,8,286,12],[356,8,287,12,"bytes"],[356,13,287,17],[356,14,287,18,"bytes"],[356,19,287,23],[356,20,287,24,"length"],[356,26,287,30],[356,29,287,33],[356,30,287,34],[356,31,287,35],[356,35,287,39,"x"],[356,36,287,40],[356,39,287,43,"_1n"],[356,42,287,46],[356,45,287,49],[356,49,287,53],[356,52,287,56],[356,53,287,57],[357,8,288,12],[357,15,288,19,"bytes"],[357,20,288,24],[358,6,289,8],[359,6,290,8,"toHex"],[359,11,290,13,"toHex"],[359,12,290,13],[359,14,290,16],[360,8,291,12],[360,15,291,19],[360,19,291,19,"bytesToHex"],[360,36,291,29],[360,38,291,30],[360,42,291,34],[360,43,291,35,"toBytes"],[360,50,291,42],[360,51,291,43],[360,52,291,44],[360,53,291,45],[361,6,292,8],[362,6,293,8,"toString"],[362,14,293,16,"toString"],[362,15,293,16],[362,17,293,19],[363,8,294,12],[363,15,294,19],[363,25,294,29],[363,29,294,33],[363,30,294,34,"is0"],[363,33,294,37],[363,34,294,38],[363,35,294,39],[363,38,294,42],[363,44,294,48],[363,47,294,51],[363,51,294,55],[363,52,294,56,"toHex"],[363,57,294,61],[363,58,294,62],[363,59,294,63],[363,62,294,66],[364,6,295,8],[365,6,296,8],[366,6,297,8],[366,10,297,12,"ex"],[366,12,297,14,"ex"],[366,13,297,14],[366,15,297,17],[367,8,298,12],[367,15,298,19],[367,19,298,23],[367,20,298,24,"X"],[367,21,298,25],[368,6,299,8],[369,6,300,8],[369,10,300,12,"ey"],[369,12,300,14,"ey"],[369,13,300,14],[369,15,300,17],[370,8,301,12],[370,15,301,19],[370,19,301,23],[370,20,301,24,"Y"],[370,21,301,25],[371,6,302,8],[372,6,303,8],[372,10,303,12,"ez"],[372,12,303,14,"ez"],[372,13,303,14],[372,15,303,17],[373,8,304,12],[373,15,304,19],[373,19,304,23],[373,20,304,24,"Z"],[373,21,304,25],[374,6,305,8],[375,6,306,8],[375,10,306,12,"et"],[375,12,306,14,"et"],[375,13,306,14],[375,15,306,17],[376,8,307,12],[376,15,307,19],[376,19,307,23],[376,20,307,24,"T"],[376,21,307,25],[377,6,308,8],[378,6,309,8],[378,13,309,15,"normalizeZ"],[378,23,309,25,"normalizeZ"],[378,24,309,26,"points"],[378,30,309,32],[378,32,309,34],[379,8,310,12],[379,15,310,19],[379,19,310,19,"normalizeZ"],[379,36,310,29],[379,38,310,30,"Point"],[379,43,310,35],[379,45,310,37,"points"],[379,51,310,43],[379,52,310,44],[380,6,311,8],[381,6,312,8],[381,13,312,15,"msm"],[381,16,312,18,"msm"],[381,17,312,19,"points"],[381,23,312,25],[381,25,312,27,"scalars"],[381,32,312,34],[381,34,312,36],[382,8,313,12],[382,15,313,19],[382,19,313,19,"pippenger"],[382,35,313,28],[382,37,313,29,"Point"],[382,42,313,34],[382,44,313,36,"Fn"],[382,46,313,38],[382,48,313,40,"points"],[382,54,313,46],[382,56,313,48,"scalars"],[382,63,313,55],[382,64,313,56],[383,6,314,8],[384,6,315,8,"_setWindowSize"],[384,20,315,22,"_setWindowSize"],[384,21,315,23,"windowSize"],[384,31,315,33],[384,33,315,35],[385,8,316,12],[385,12,316,16],[385,13,316,17,"precompute"],[385,23,316,27],[385,24,316,28,"windowSize"],[385,34,316,38],[385,35,316,39],[386,6,317,8],[387,6,318,8,"toRawBytes"],[387,16,318,18,"toRawBytes"],[387,17,318,18],[387,19,318,21],[388,8,319,12],[388,15,319,19],[388,19,319,23],[388,20,319,24,"toBytes"],[388,27,319,31],[388,28,319,32],[388,29,319,33],[389,6,320,8],[390,4,321,4],[391,4,322,4],[392,4,323,4,"Point"],[392,9,323,9],[392,10,323,10,"BASE"],[392,14,323,14],[392,17,323,17],[392,21,323,21,"Point"],[392,26,323,26],[392,27,323,27,"CURVE"],[392,32,323,32],[392,33,323,33,"Gx"],[392,35,323,35],[392,37,323,37,"CURVE"],[392,42,323,42],[392,43,323,43,"Gy"],[392,45,323,45],[392,47,323,47,"_1n"],[392,50,323,50],[392,52,323,52,"modP"],[392,56,323,56],[392,57,323,57,"CURVE"],[392,62,323,62],[392,63,323,63,"Gx"],[392,65,323,65],[392,68,323,68,"CURVE"],[392,73,323,73],[392,74,323,74,"Gy"],[392,76,323,76],[392,77,323,77],[392,78,323,78],[393,4,324,4],[394,4,325,4,"Point"],[394,9,325,9],[394,10,325,10,"ZERO"],[394,14,325,14],[394,17,325,17],[394,21,325,21,"Point"],[394,26,325,26],[394,27,325,27,"_0n"],[394,30,325,30],[394,32,325,32,"_1n"],[394,35,325,35],[394,37,325,37,"_1n"],[394,40,325,40],[394,42,325,42,"_0n"],[394,45,325,45],[394,46,325,46],[394,47,325,47],[394,48,325,48],[395,4,326,4],[396,4,327,4,"Point"],[396,9,327,9],[396,10,327,10,"Fp"],[396,12,327,12],[396,15,327,15,"Fp"],[396,17,327,17],[397,4,328,4],[398,4,329,4,"Point"],[398,9,329,9],[398,10,329,10,"Fn"],[398,12,329,12],[398,15,329,15,"Fn"],[398,17,329,17],[399,4,330,4],[399,10,330,10,"wnaf"],[399,14,330,14],[399,17,330,17],[399,21,330,21,"wNAF"],[399,32,330,25],[399,33,330,26,"Point"],[399,38,330,31],[399,40,330,33,"Fn"],[399,42,330,35],[399,43,330,36,"BITS"],[399,47,330,40],[399,48,330,41],[400,4,331,4,"Point"],[400,9,331,9],[400,10,331,10,"BASE"],[400,14,331,14],[400,15,331,15,"precompute"],[400,25,331,25],[400,26,331,26],[400,27,331,27],[400,28,331,28],[400,29,331,29],[400,30,331,30],[401,4,332,4],[401,11,332,11,"Point"],[401,16,332,16],[402,2,333,0],[403,2,334,0],[404,0,335,0],[405,0,336,0],[406,0,337,0],[407,0,338,0],[408,2,339,7],[408,8,339,13,"PrimeEdwardsPoint"],[408,25,339,30],[408,26,339,31],[409,4,340,4,"constructor"],[409,15,340,15,"constructor"],[409,16,340,16,"ep"],[409,18,340,18],[409,20,340,20],[410,6,341,8],[410,10,341,12],[410,11,341,13,"ep"],[410,13,341,15],[410,16,341,18,"ep"],[410,18,341,20],[411,4,342,4],[412,4,343,4],[413,4,344,4],[413,11,344,11,"fromBytes"],[413,20,344,20,"fromBytes"],[413,21,344,21,"_bytes"],[413,27,344,27],[413,29,344,29],[414,6,345,8],[414,10,345,8,"notImplemented"],[414,31,345,22],[414,33,345,23],[414,34,345,24],[415,4,346,4],[416,4,347,4],[416,11,347,11,"fromHex"],[416,18,347,18,"fromHex"],[416,19,347,19,"_hex"],[416,23,347,23],[416,25,347,25],[417,6,348,8],[417,10,348,8,"notImplemented"],[417,31,348,22],[417,33,348,23],[417,34,348,24],[418,4,349,4],[419,4,350,4],[419,8,350,8,"x"],[419,9,350,9,"x"],[419,10,350,9],[419,12,350,12],[420,6,351,8],[420,13,351,15],[420,17,351,19],[420,18,351,20,"toAffine"],[420,26,351,28],[420,27,351,29],[420,28,351,30],[420,29,351,31,"x"],[420,30,351,32],[421,4,352,4],[422,4,353,4],[422,8,353,8,"y"],[422,9,353,9,"y"],[422,10,353,9],[422,12,353,12],[423,6,354,8],[423,13,354,15],[423,17,354,19],[423,18,354,20,"toAffine"],[423,26,354,28],[423,27,354,29],[423,28,354,30],[423,29,354,31,"y"],[423,30,354,32],[424,4,355,4],[425,4,356,4],[426,4,357,4,"clearCofactor"],[426,17,357,17,"clearCofactor"],[426,18,357,17],[426,20,357,20],[427,6,358,8],[428,6,359,8],[428,13,359,15],[428,17,359,19],[429,4,360,4],[430,4,361,4,"assertValidity"],[430,18,361,18,"assertValidity"],[430,19,361,18],[430,21,361,21],[431,6,362,8],[431,10,362,12],[431,11,362,13,"ep"],[431,13,362,15],[431,14,362,16,"assertValidity"],[431,28,362,30],[431,29,362,31],[431,30,362,32],[432,4,363,4],[433,4,364,4,"toAffine"],[433,12,364,12,"toAffine"],[433,13,364,13,"invertedZ"],[433,22,364,22],[433,24,364,24],[434,6,365,8],[434,13,365,15],[434,17,365,19],[434,18,365,20,"ep"],[434,20,365,22],[434,21,365,23,"toAffine"],[434,29,365,31],[434,30,365,32,"invertedZ"],[434,39,365,41],[434,40,365,42],[435,4,366,4],[436,4,367,4,"toHex"],[436,9,367,9,"toHex"],[436,10,367,9],[436,12,367,12],[437,6,368,8],[437,13,368,15],[437,17,368,15,"bytesToHex"],[437,34,368,25],[437,36,368,26],[437,40,368,30],[437,41,368,31,"toBytes"],[437,48,368,38],[437,49,368,39],[437,50,368,40],[437,51,368,41],[438,4,369,4],[439,4,370,4,"toString"],[439,12,370,12,"toString"],[439,13,370,12],[439,15,370,15],[440,6,371,8],[440,13,371,15],[440,17,371,19],[440,18,371,20,"toHex"],[440,23,371,25],[440,24,371,26],[440,25,371,27],[441,4,372,4],[442,4,373,4,"isTorsionFree"],[442,17,373,17,"isTorsionFree"],[442,18,373,17],[442,20,373,20],[443,6,374,8],[443,13,374,15],[443,17,374,19],[444,4,375,4],[445,4,376,4,"isSmallOrder"],[445,16,376,16,"isSmallOrder"],[445,17,376,16],[445,19,376,19],[446,6,377,8],[446,13,377,15],[446,18,377,20],[447,4,378,4],[448,4,379,4,"add"],[448,7,379,7,"add"],[448,8,379,8,"other"],[448,13,379,13],[448,15,379,15],[449,6,380,8],[449,10,380,12],[449,11,380,13,"assertSame"],[449,21,380,23],[449,22,380,24,"other"],[449,27,380,29],[449,28,380,30],[450,6,381,8],[450,13,381,15],[450,17,381,19],[450,18,381,20,"init"],[450,22,381,24],[450,23,381,25],[450,27,381,29],[450,28,381,30,"ep"],[450,30,381,32],[450,31,381,33,"add"],[450,34,381,36],[450,35,381,37,"other"],[450,40,381,42],[450,41,381,43,"ep"],[450,43,381,45],[450,44,381,46],[450,45,381,47],[451,4,382,4],[452,4,383,4,"subtract"],[452,12,383,12,"subtract"],[452,13,383,13,"other"],[452,18,383,18],[452,20,383,20],[453,6,384,8],[453,10,384,12],[453,11,384,13,"assertSame"],[453,21,384,23],[453,22,384,24,"other"],[453,27,384,29],[453,28,384,30],[454,6,385,8],[454,13,385,15],[454,17,385,19],[454,18,385,20,"init"],[454,22,385,24],[454,23,385,25],[454,27,385,29],[454,28,385,30,"ep"],[454,30,385,32],[454,31,385,33,"subtract"],[454,39,385,41],[454,40,385,42,"other"],[454,45,385,47],[454,46,385,48,"ep"],[454,48,385,50],[454,49,385,51],[454,50,385,52],[455,4,386,4],[456,4,387,4,"multiply"],[456,12,387,12,"multiply"],[456,13,387,13,"scalar"],[456,19,387,19],[456,21,387,21],[457,6,388,8],[457,13,388,15],[457,17,388,19],[457,18,388,20,"init"],[457,22,388,24],[457,23,388,25],[457,27,388,29],[457,28,388,30,"ep"],[457,30,388,32],[457,31,388,33,"multiply"],[457,39,388,41],[457,40,388,42,"scalar"],[457,46,388,48],[457,47,388,49],[457,48,388,50],[458,4,389,4],[459,4,390,4,"multiplyUnsafe"],[459,18,390,18,"multiplyUnsafe"],[459,19,390,19,"scalar"],[459,25,390,25],[459,27,390,27],[460,6,391,8],[460,13,391,15],[460,17,391,19],[460,18,391,20,"init"],[460,22,391,24],[460,23,391,25],[460,27,391,29],[460,28,391,30,"ep"],[460,30,391,32],[460,31,391,33,"multiplyUnsafe"],[460,45,391,47],[460,46,391,48,"scalar"],[460,52,391,54],[460,53,391,55],[460,54,391,56],[461,4,392,4],[462,4,393,4,"double"],[462,10,393,10,"double"],[462,11,393,10],[462,13,393,13],[463,6,394,8],[463,13,394,15],[463,17,394,19],[463,18,394,20,"init"],[463,22,394,24],[463,23,394,25],[463,27,394,29],[463,28,394,30,"ep"],[463,30,394,32],[463,31,394,33,"double"],[463,37,394,39],[463,38,394,40],[463,39,394,41],[463,40,394,42],[464,4,395,4],[465,4,396,4,"negate"],[465,10,396,10,"negate"],[465,11,396,10],[465,13,396,13],[466,6,397,8],[466,13,397,15],[466,17,397,19],[466,18,397,20,"init"],[466,22,397,24],[466,23,397,25],[466,27,397,29],[466,28,397,30,"ep"],[466,30,397,32],[466,31,397,33,"negate"],[466,37,397,39],[466,38,397,40],[466,39,397,41],[466,40,397,42],[467,4,398,4],[468,4,399,4,"precompute"],[468,14,399,14,"precompute"],[468,15,399,15,"windowSize"],[468,25,399,25],[468,27,399,27,"isLazy"],[468,33,399,33],[468,35,399,35],[469,6,400,8],[469,13,400,15],[469,17,400,19],[469,18,400,20,"init"],[469,22,400,24],[469,23,400,25],[469,27,400,29],[469,28,400,30,"ep"],[469,30,400,32],[469,31,400,33,"precompute"],[469,41,400,43],[469,42,400,44,"windowSize"],[469,52,400,54],[469,54,400,56,"isLazy"],[469,60,400,62],[469,61,400,63],[469,62,400,64],[470,4,401,4],[471,4,402,4],[472,4,403,4,"toRawBytes"],[472,14,403,14,"toRawBytes"],[472,15,403,14],[472,17,403,17],[473,6,404,8],[473,13,404,15],[473,17,404,19],[473,18,404,20,"toBytes"],[473,25,404,27],[473,26,404,28],[473,27,404,29],[474,4,405,4],[475,2,406,0],[476,2,407,0],[477,0,408,0],[478,0,409,0],[479,2,407,0,"exports"],[479,9,407,0],[479,10,407,0,"PrimeEdwardsPoint"],[479,27,407,0],[479,30,407,0,"PrimeEdwardsPoint"],[479,47,407,0],[480,2,410,7],[480,11,410,16,"eddsa"],[480,16,410,21,"eddsa"],[480,17,410,22,"Point"],[480,22,410,27],[480,24,410,29,"cHash"],[480,29,410,34],[480,31,410,36,"eddsaOpts"],[480,40,410,45],[480,43,410,48],[480,44,410,49],[480,45,410,50],[480,47,410,52],[481,4,411,4],[481,8,411,8],[481,15,411,15,"cHash"],[481,20,411,20],[481,25,411,25],[481,35,411,35],[481,37,412,8],[481,43,412,14],[481,47,412,18,"Error"],[481,52,412,23],[481,53,412,24],[481,88,412,59],[481,89,412,60],[482,4,413,4],[482,8,413,4,"_validateObject"],[482,30,413,19],[482,32,413,20,"eddsaOpts"],[482,41,413,29],[482,43,413,31],[482,44,413,32],[482,45,413,33],[482,47,413,35],[483,6,414,8,"adjustScalarBytes"],[483,23,414,25],[483,25,414,27],[483,35,414,37],[484,6,415,8,"randomBytes"],[484,17,415,19],[484,19,415,21],[484,29,415,31],[485,6,416,8,"domain"],[485,12,416,14],[485,14,416,16],[485,24,416,26],[486,6,417,8,"prehash"],[486,13,417,15],[486,15,417,17],[486,25,417,27],[487,6,418,8,"mapToCurve"],[487,16,418,18],[487,18,418,20],[488,4,419,4],[488,5,419,5],[488,6,419,6],[489,4,420,4],[489,10,420,10],[490,6,420,12,"prehash"],[491,4,420,20],[491,5,420,21],[491,8,420,24,"eddsaOpts"],[491,17,420,33],[492,4,421,4],[492,10,421,10],[493,6,421,12,"BASE"],[493,10,421,16],[494,6,421,18,"Fp"],[494,8,421,20],[495,6,421,22,"Fn"],[496,4,421,25],[496,5,421,26],[496,8,421,29,"Point"],[496,13,421,34],[497,4,422,4],[497,10,422,10,"randomBytes"],[497,21,422,21],[497,24,422,24,"eddsaOpts"],[497,33,422,33],[497,34,422,34,"randomBytes"],[497,45,422,45],[497,49,422,49,"randomBytesWeb"],[497,67,422,63],[498,4,423,4],[498,10,423,10,"adjustScalarBytes"],[498,27,423,27],[498,30,423,30,"eddsaOpts"],[498,39,423,39],[498,40,423,40,"adjustScalarBytes"],[498,57,423,57],[498,62,423,63,"bytes"],[498,67,423,68],[498,71,423,73,"bytes"],[498,76,423,78],[498,77,423,79],[499,4,424,4],[499,10,424,10,"domain"],[499,16,424,16],[499,19,424,19,"eddsaOpts"],[499,28,424,28],[499,29,424,29,"domain"],[499,35,424,35],[499,40,425,9],[499,41,425,10,"data"],[499,45,425,14],[499,47,425,16,"ctx"],[499,50,425,19],[499,52,425,21,"phflag"],[499,58,425,27],[499,63,425,32],[500,6,426,12],[500,10,426,12,"abool"],[500,24,426,17],[500,26,426,18,"phflag"],[500,32,426,24],[500,34,426,26],[500,42,426,34],[500,43,426,35],[501,6,427,12],[501,10,427,16,"ctx"],[501,13,427,19],[501,14,427,20,"length"],[501,20,427,26],[501,24,427,30,"phflag"],[501,30,427,36],[501,32,428,16],[501,38,428,22],[501,42,428,26,"Error"],[501,47,428,31],[501,48,428,32],[501,85,428,69],[501,86,428,70],[502,6,429,12],[502,13,429,19,"data"],[502,17,429,23],[503,4,430,8],[503,5,430,9],[503,6,430,10],[503,7,430,11],[503,8,430,12],[504,4,431,4],[505,4,432,4],[505,13,432,13,"modN_LE"],[505,20,432,20,"modN_LE"],[505,21,432,21,"hash"],[505,25,432,25],[505,27,432,27],[506,6,433,8],[506,13,433,15,"Fn"],[506,15,433,17],[506,16,433,18,"create"],[506,22,433,24],[506,23,433,25],[506,27,433,25,"bytesToNumberLE"],[506,49,433,40],[506,51,433,41,"hash"],[506,55,433,45],[506,56,433,46],[506,57,433,47],[506,58,433,48],[506,59,433,49],[507,4,434,4],[508,4,435,4],[509,4,436,4],[509,13,436,13,"getPrivateScalar"],[509,29,436,29,"getPrivateScalar"],[509,30,436,30,"key"],[509,33,436,33],[509,35,436,35],[510,6,437,8],[510,12,437,14,"len"],[510,15,437,17],[510,18,437,20,"lengths"],[510,25,437,27],[510,26,437,28,"secretKey"],[510,35,437,37],[511,6,438,8,"key"],[511,9,438,11],[511,12,438,14],[511,16,438,14,"ensureBytes"],[511,34,438,25],[511,36,438,26],[511,49,438,39],[511,51,438,41,"key"],[511,54,438,44],[511,56,438,46,"len"],[511,59,438,49],[511,60,438,50],[512,6,439,8],[513,6,440,8],[514,6,441,8],[514,12,441,14,"hashed"],[514,18,441,20],[514,21,441,23],[514,25,441,23,"ensureBytes"],[514,43,441,34],[514,45,441,35],[514,65,441,55],[514,67,441,57,"cHash"],[514,72,441,62],[514,73,441,63,"key"],[514,76,441,66],[514,77,441,67],[514,79,441,69],[514,80,441,70],[514,83,441,73,"len"],[514,86,441,76],[514,87,441,77],[515,6,442,8],[515,12,442,14,"head"],[515,16,442,18],[515,19,442,21,"adjustScalarBytes"],[515,36,442,38],[515,37,442,39,"hashed"],[515,43,442,45],[515,44,442,46,"slice"],[515,49,442,51],[515,50,442,52],[515,51,442,53],[515,53,442,55,"len"],[515,56,442,58],[515,57,442,59],[515,58,442,60],[515,59,442,61],[515,60,442,62],[516,6,443,8],[516,12,443,14,"prefix"],[516,18,443,20],[516,21,443,23,"hashed"],[516,27,443,29],[516,28,443,30,"slice"],[516,33,443,35],[516,34,443,36,"len"],[516,37,443,39],[516,39,443,41],[516,40,443,42],[516,43,443,45,"len"],[516,46,443,48],[516,47,443,49],[516,48,443,50],[516,49,443,51],[517,6,444,8],[517,12,444,14,"scalar"],[517,18,444,20],[517,21,444,23,"modN_LE"],[517,28,444,30],[517,29,444,31,"head"],[517,33,444,35],[517,34,444,36],[517,35,444,37],[517,36,444,38],[518,6,445,8],[518,13,445,15],[519,8,445,17,"head"],[519,12,445,21],[520,8,445,23,"prefix"],[520,14,445,29],[521,8,445,31,"scalar"],[522,6,445,38],[522,7,445,39],[523,4,446,4],[524,4,447,4],[525,4,448,4],[525,13,448,13,"getExtendedPublicKey"],[525,33,448,33,"getExtendedPublicKey"],[525,34,448,34,"secretKey"],[525,43,448,43],[525,45,448,45],[526,6,449,8],[526,12,449,14],[527,8,449,16,"head"],[527,12,449,20],[528,8,449,22,"prefix"],[528,14,449,28],[529,8,449,30,"scalar"],[530,6,449,37],[530,7,449,38],[530,10,449,41,"getPrivateScalar"],[530,26,449,57],[530,27,449,58,"secretKey"],[530,36,449,67],[530,37,449,68],[531,6,450,8],[531,12,450,14,"point"],[531,17,450,19],[531,20,450,22,"BASE"],[531,24,450,26],[531,25,450,27,"multiply"],[531,33,450,35],[531,34,450,36,"scalar"],[531,40,450,42],[531,41,450,43],[531,42,450,44],[531,43,450,45],[532,6,451,8],[532,12,451,14,"pointBytes"],[532,22,451,24],[532,25,451,27,"point"],[532,30,451,32],[532,31,451,33,"toBytes"],[532,38,451,40],[532,39,451,41],[532,40,451,42],[533,6,452,8],[533,13,452,15],[534,8,452,17,"head"],[534,12,452,21],[535,8,452,23,"prefix"],[535,14,452,29],[536,8,452,31,"scalar"],[536,14,452,37],[537,8,452,39,"point"],[537,13,452,44],[538,8,452,46,"pointBytes"],[539,6,452,57],[539,7,452,58],[540,4,453,4],[541,4,454,4],[542,4,455,4],[542,13,455,13,"getPublicKey"],[542,25,455,25,"getPublicKey"],[542,26,455,26,"secretKey"],[542,35,455,35],[542,37,455,37],[543,6,456,8],[543,13,456,15,"getExtendedPublicKey"],[543,33,456,35],[543,34,456,36,"secretKey"],[543,43,456,45],[543,44,456,46],[543,45,456,47,"pointBytes"],[543,55,456,57],[544,4,457,4],[545,4,458,4],[546,4,459,4],[546,13,459,13,"hashDomainToScalar"],[546,31,459,31,"hashDomainToScalar"],[546,32,459,32,"context"],[546,39,459,39],[546,42,459,42,"Uint8Array"],[546,52,459,52],[546,53,459,53,"of"],[546,55,459,55],[546,56,459,56],[546,57,459,57],[546,59,459,59],[546,62,459,62,"msgs"],[546,66,459,66],[546,68,459,68],[547,6,460,8],[547,12,460,14,"msg"],[547,15,460,17],[547,18,460,20],[547,22,460,20,"concatBytes"],[547,40,460,31],[547,42,460,32],[547,45,460,35,"msgs"],[547,49,460,39],[547,50,460,40],[548,6,461,8],[548,13,461,15,"modN_LE"],[548,20,461,22],[548,21,461,23,"cHash"],[548,26,461,28],[548,27,461,29,"domain"],[548,33,461,35],[548,34,461,36,"msg"],[548,37,461,39],[548,39,461,41],[548,43,461,41,"ensureBytes"],[548,61,461,52],[548,63,461,53],[548,72,461,62],[548,74,461,64,"context"],[548,81,461,71],[548,82,461,72],[548,84,461,74],[548,85,461,75],[548,86,461,76,"prehash"],[548,93,461,83],[548,94,461,84],[548,95,461,85],[548,96,461,86],[549,4,462,4],[550,4,463,4],[551,4,464,4],[551,13,464,13,"sign"],[551,17,464,17,"sign"],[551,18,464,18,"msg"],[551,21,464,21],[551,23,464,23,"secretKey"],[551,32,464,32],[551,34,464,34,"options"],[551,41,464,41],[551,44,464,44],[551,45,464,45],[551,46,464,46],[551,48,464,48],[552,6,465,8,"msg"],[552,9,465,11],[552,12,465,14],[552,16,465,14,"ensureBytes"],[552,34,465,25],[552,36,465,26],[552,45,465,35],[552,47,465,37,"msg"],[552,50,465,40],[552,51,465,41],[553,6,466,8],[553,10,466,12,"prehash"],[553,17,466,19],[553,19,467,12,"msg"],[553,22,467,15],[553,25,467,18,"prehash"],[553,32,467,25],[553,33,467,26,"msg"],[553,36,467,29],[553,37,467,30],[553,38,467,31],[553,39,467,32],[554,6,468,8],[554,12,468,14],[555,8,468,16,"prefix"],[555,14,468,22],[556,8,468,24,"scalar"],[556,14,468,30],[557,8,468,32,"pointBytes"],[558,6,468,43],[558,7,468,44],[558,10,468,47,"getExtendedPublicKey"],[558,30,468,67],[558,31,468,68,"secretKey"],[558,40,468,77],[558,41,468,78],[559,6,469,8],[559,12,469,14,"r"],[559,13,469,15],[559,16,469,18,"hashDomainToScalar"],[559,34,469,36],[559,35,469,37,"options"],[559,42,469,44],[559,43,469,45,"context"],[559,50,469,52],[559,52,469,54,"prefix"],[559,58,469,60],[559,60,469,62,"msg"],[559,63,469,65],[559,64,469,66],[559,65,469,67],[559,66,469,68],[560,6,470,8],[560,12,470,14,"R"],[560,13,470,15],[560,16,470,18,"BASE"],[560,20,470,22],[560,21,470,23,"multiply"],[560,29,470,31],[560,30,470,32,"r"],[560,31,470,33],[560,32,470,34],[560,33,470,35,"toBytes"],[560,40,470,42],[560,41,470,43],[560,42,470,44],[560,43,470,45],[560,44,470,46],[561,6,471,8],[561,12,471,14,"k"],[561,13,471,15],[561,16,471,18,"hashDomainToScalar"],[561,34,471,36],[561,35,471,37,"options"],[561,42,471,44],[561,43,471,45,"context"],[561,50,471,52],[561,52,471,54,"R"],[561,53,471,55],[561,55,471,57,"pointBytes"],[561,65,471,67],[561,67,471,69,"msg"],[561,70,471,72],[561,71,471,73],[561,72,471,74],[561,73,471,75],[562,6,472,8],[562,12,472,14,"s"],[562,13,472,15],[562,16,472,18,"Fn"],[562,18,472,20],[562,19,472,21,"create"],[562,25,472,27],[562,26,472,28,"r"],[562,27,472,29],[562,30,472,32,"k"],[562,31,472,33],[562,34,472,36,"scalar"],[562,40,472,42],[562,41,472,43],[562,42,472,44],[562,43,472,45],[563,6,473,8],[563,10,473,12],[563,11,473,13,"Fn"],[563,13,473,15],[563,14,473,16,"isValid"],[563,21,473,23],[563,22,473,24,"s"],[563,23,473,25],[563,24,473,26],[563,26,474,12],[563,32,474,18],[563,36,474,22,"Error"],[563,41,474,27],[563,42,474,28],[563,66,474,52],[563,67,474,53],[563,68,474,54],[563,69,474,55],[564,6,475,8],[564,12,475,14,"rs"],[564,14,475,16],[564,17,475,19],[564,21,475,19,"concatBytes"],[564,39,475,30],[564,41,475,31,"R"],[564,42,475,32],[564,44,475,34,"Fn"],[564,46,475,36],[564,47,475,37,"toBytes"],[564,54,475,44],[564,55,475,45,"s"],[564,56,475,46],[564,57,475,47],[564,58,475,48],[565,6,476,8],[565,13,476,15],[565,17,476,15,"abytes"],[565,32,476,21],[565,34,476,22,"rs"],[565,36,476,24],[565,38,476,26,"lengths"],[565,45,476,33],[565,46,476,34,"signature"],[565,55,476,43],[565,57,476,45],[565,65,476,53],[565,66,476,54],[566,4,477,4],[567,4,478,4],[568,4,479,4],[568,10,479,10,"verifyOpts"],[568,20,479,20],[568,23,479,23],[569,6,479,25,"zip215"],[569,12,479,31],[569,14,479,33],[570,4,479,38],[570,5,479,39],[571,4,480,4],[572,0,481,0],[573,0,482,0],[574,0,483,0],[575,4,484,4],[575,13,484,13,"verify"],[575,19,484,19,"verify"],[575,20,484,20,"sig"],[575,23,484,23],[575,25,484,25,"msg"],[575,28,484,28],[575,30,484,30,"publicKey"],[575,39,484,39],[575,41,484,41,"options"],[575,48,484,48],[575,51,484,51,"verifyOpts"],[575,61,484,61],[575,63,484,63],[576,6,485,8],[576,12,485,14],[577,8,485,16,"context"],[577,15,485,23],[578,8,485,25,"zip215"],[579,6,485,32],[579,7,485,33],[579,10,485,36,"options"],[579,17,485,43],[580,6,486,8],[580,12,486,14,"len"],[580,15,486,17],[580,18,486,20,"lengths"],[580,25,486,27],[580,26,486,28,"signature"],[580,35,486,37],[581,6,487,8,"sig"],[581,9,487,11],[581,12,487,14],[581,16,487,14,"ensureBytes"],[581,34,487,25],[581,36,487,26],[581,47,487,37],[581,49,487,39,"sig"],[581,52,487,42],[581,54,487,44,"len"],[581,57,487,47],[581,58,487,48],[582,6,488,8,"msg"],[582,9,488,11],[582,12,488,14],[582,16,488,14,"ensureBytes"],[582,34,488,25],[582,36,488,26],[582,45,488,35],[582,47,488,37,"msg"],[582,50,488,40],[582,51,488,41],[583,6,489,8,"publicKey"],[583,15,489,17],[583,18,489,20],[583,22,489,20,"ensureBytes"],[583,40,489,31],[583,42,489,32],[583,53,489,43],[583,55,489,45,"publicKey"],[583,64,489,54],[583,66,489,56,"lengths"],[583,73,489,63],[583,74,489,64,"publicKey"],[583,83,489,73],[583,84,489,74],[584,6,490,8],[584,10,490,12,"zip215"],[584,16,490,18],[584,21,490,23,"undefined"],[584,30,490,32],[584,32,491,12],[584,36,491,12,"abool"],[584,50,491,17],[584,52,491,18,"zip215"],[584,58,491,24],[584,60,491,26],[584,68,491,34],[584,69,491,35],[585,6,492,8],[585,10,492,12,"prehash"],[585,17,492,19],[585,19,493,12,"msg"],[585,22,493,15],[585,25,493,18,"prehash"],[585,32,493,25],[585,33,493,26,"msg"],[585,36,493,29],[585,37,493,30],[585,38,493,31],[585,39,493,32],[586,6,494,8],[586,12,494,14,"mid"],[586,15,494,17],[586,18,494,20,"len"],[586,21,494,23],[586,24,494,26],[586,25,494,27],[587,6,495,8],[587,12,495,14,"r"],[587,13,495,15],[587,16,495,18,"sig"],[587,19,495,21],[587,20,495,22,"subarray"],[587,28,495,30],[587,29,495,31],[587,30,495,32],[587,32,495,34,"mid"],[587,35,495,37],[587,36,495,38],[588,6,496,8],[588,12,496,14,"s"],[588,13,496,15],[588,16,496,18],[588,20,496,18,"bytesToNumberLE"],[588,42,496,33],[588,44,496,34,"sig"],[588,47,496,37],[588,48,496,38,"subarray"],[588,56,496,46],[588,57,496,47,"mid"],[588,60,496,50],[588,62,496,52,"len"],[588,65,496,55],[588,66,496,56],[588,67,496,57],[589,6,497,8],[589,10,497,12,"A"],[589,11,497,13],[589,13,497,15,"R"],[589,14,497,16],[589,16,497,18,"SB"],[589,18,497,20],[590,6,498,8],[590,10,498,12],[591,8,499,12],[592,8,500,12],[593,8,501,12],[594,8,502,12,"A"],[594,9,502,13],[594,12,502,16,"Point"],[594,17,502,21],[594,18,502,22,"fromBytes"],[594,27,502,31],[594,28,502,32,"publicKey"],[594,37,502,41],[594,39,502,43,"zip215"],[594,45,502,49],[594,46,502,50],[595,8,503,12,"R"],[595,9,503,13],[595,12,503,16,"Point"],[595,17,503,21],[595,18,503,22,"fromBytes"],[595,27,503,31],[595,28,503,32,"r"],[595,29,503,33],[595,31,503,35,"zip215"],[595,37,503,41],[595,38,503,42],[596,8,504,12,"SB"],[596,10,504,14],[596,13,504,17,"BASE"],[596,17,504,21],[596,18,504,22,"multiplyUnsafe"],[596,32,504,36],[596,33,504,37,"s"],[596,34,504,38],[596,35,504,39],[596,36,504,40],[596,37,504,41],[597,6,505,8],[597,7,505,9],[597,8,506,8],[597,15,506,15,"error"],[597,20,506,20],[597,22,506,22],[598,8,507,12],[598,15,507,19],[598,20,507,24],[599,6,508,8],[600,6,509,8],[600,10,509,12],[600,11,509,13,"zip215"],[600,17,509,19],[600,21,509,23,"A"],[600,22,509,24],[600,23,509,25,"isSmallOrder"],[600,35,509,37],[600,36,509,38],[600,37,509,39],[600,39,510,12],[600,46,510,19],[600,51,510,24],[600,52,510,25],[600,53,510,26],[601,6,511,8],[601,12,511,14,"k"],[601,13,511,15],[601,16,511,18,"hashDomainToScalar"],[601,34,511,36],[601,35,511,37,"context"],[601,42,511,44],[601,44,511,46,"R"],[601,45,511,47],[601,46,511,48,"toBytes"],[601,53,511,55],[601,54,511,56],[601,55,511,57],[601,57,511,59,"A"],[601,58,511,60],[601,59,511,61,"toBytes"],[601,66,511,68],[601,67,511,69],[601,68,511,70],[601,70,511,72,"msg"],[601,73,511,75],[601,74,511,76],[602,6,512,8],[602,12,512,14,"RkA"],[602,15,512,17],[602,18,512,20,"R"],[602,19,512,21],[602,20,512,22,"add"],[602,23,512,25],[602,24,512,26,"A"],[602,25,512,27],[602,26,512,28,"multiplyUnsafe"],[602,40,512,42],[602,41,512,43,"k"],[602,42,512,44],[602,43,512,45],[602,44,512,46],[603,6,513,8],[604,6,514,8],[605,6,515,8],[605,13,515,15,"RkA"],[605,16,515,18],[605,17,515,19,"subtract"],[605,25,515,27],[605,26,515,28,"SB"],[605,28,515,30],[605,29,515,31],[605,30,515,32,"clearCofactor"],[605,43,515,45],[605,44,515,46],[605,45,515,47],[605,46,515,48,"is0"],[605,49,515,51],[605,50,515,52],[605,51,515,53],[606,4,516,4],[607,4,517,4],[607,10,517,10,"_size"],[607,15,517,15],[607,18,517,18,"Fp"],[607,20,517,20],[607,21,517,21,"BYTES"],[607,26,517,26],[607,27,517,27],[607,28,517,28],[608,4,518,4],[608,10,518,10,"lengths"],[608,17,518,17],[608,20,518,20],[609,6,519,8,"secretKey"],[609,15,519,17],[609,17,519,19,"_size"],[609,22,519,24],[610,6,520,8,"publicKey"],[610,15,520,17],[610,17,520,19,"_size"],[610,22,520,24],[611,6,521,8,"signature"],[611,15,521,17],[611,17,521,19],[611,18,521,20],[611,21,521,23,"_size"],[611,26,521,28],[612,6,522,8,"seed"],[612,10,522,12],[612,12,522,14,"_size"],[613,4,523,4],[613,5,523,5],[614,4,524,4],[614,13,524,13,"randomSecretKey"],[614,28,524,28,"randomSecretKey"],[614,29,524,29,"seed"],[614,33,524,33],[614,36,524,36,"randomBytes"],[614,47,524,47],[614,48,524,48,"lengths"],[614,55,524,55],[614,56,524,56,"seed"],[614,60,524,60],[614,61,524,61],[614,63,524,63],[615,6,525,8],[615,13,525,15],[615,17,525,15,"abytes"],[615,32,525,21],[615,34,525,22,"seed"],[615,38,525,26],[615,40,525,28,"lengths"],[615,47,525,35],[615,48,525,36,"seed"],[615,52,525,40],[615,54,525,42],[615,60,525,48],[615,61,525,49],[616,4,526,4],[617,4,527,4],[617,13,527,13,"keygen"],[617,19,527,19,"keygen"],[617,20,527,20,"seed"],[617,24,527,24],[617,26,527,26],[618,6,528,8],[618,12,528,14,"secretKey"],[618,21,528,23],[618,24,528,26,"utils"],[618,29,528,31],[618,30,528,32,"randomSecretKey"],[618,45,528,47],[618,46,528,48,"seed"],[618,50,528,52],[618,51,528,53],[619,6,529,8],[619,13,529,15],[620,8,529,17,"secretKey"],[620,17,529,26],[621,8,529,28,"publicKey"],[621,17,529,37],[621,19,529,39,"getPublicKey"],[621,31,529,51],[621,32,529,52,"secretKey"],[621,41,529,61],[622,6,529,63],[622,7,529,64],[623,4,530,4],[624,4,531,4],[624,13,531,13,"isValidSecretKey"],[624,29,531,29,"isValidSecretKey"],[624,30,531,30,"key"],[624,33,531,33],[624,35,531,35],[625,6,532,8],[625,13,532,15],[625,17,532,15,"isBytes"],[625,31,532,22],[625,33,532,23,"key"],[625,36,532,26],[625,37,532,27],[625,41,532,31,"key"],[625,44,532,34],[625,45,532,35,"length"],[625,51,532,41],[625,56,532,46,"Fn"],[625,58,532,48],[625,59,532,49,"BYTES"],[625,64,532,54],[626,4,533,4],[627,4,534,4],[627,13,534,13,"isValidPublicKey"],[627,29,534,29,"isValidPublicKey"],[627,30,534,30,"key"],[627,33,534,33],[627,35,534,35,"zip215"],[627,41,534,41],[627,43,534,43],[628,6,535,8],[628,10,535,12],[629,8,536,12],[629,15,536,19],[629,16,536,20],[629,17,536,21,"Point"],[629,22,536,26],[629,23,536,27,"fromBytes"],[629,32,536,36],[629,33,536,37,"key"],[629,36,536,40],[629,38,536,42,"zip215"],[629,44,536,48],[629,45,536,49],[630,6,537,8],[630,7,537,9],[630,8,538,8],[630,15,538,15,"error"],[630,20,538,20],[630,22,538,22],[631,8,539,12],[631,15,539,19],[631,20,539,24],[632,6,540,8],[633,4,541,4],[634,4,542,4],[634,10,542,10,"utils"],[634,15,542,15],[634,18,542,18],[635,6,543,8,"getExtendedPublicKey"],[635,26,543,28],[636,6,544,8,"randomSecretKey"],[636,21,544,23],[637,6,545,8,"isValidSecretKey"],[637,22,545,24],[638,6,546,8,"isValidPublicKey"],[638,22,546,24],[639,6,547,8],[640,0,548,0],[641,0,549,0],[642,0,550,0],[643,0,551,0],[644,0,552,0],[645,0,553,0],[646,0,554,0],[647,0,555,0],[648,6,556,8,"toMontgomery"],[648,18,556,20,"toMontgomery"],[648,19,556,21,"publicKey"],[648,28,556,30],[648,30,556,32],[649,8,557,12],[649,14,557,18],[650,10,557,20,"y"],[651,8,557,22],[651,9,557,23],[651,12,557,26,"Point"],[651,17,557,31],[651,18,557,32,"fromBytes"],[651,27,557,41],[651,28,557,42,"publicKey"],[651,37,557,51],[651,38,557,52],[652,8,558,12],[652,14,558,18,"size"],[652,18,558,22],[652,21,558,25,"lengths"],[652,28,558,32],[652,29,558,33,"publicKey"],[652,38,558,42],[653,8,559,12],[653,14,559,18,"is25519"],[653,21,559,25],[653,24,559,28,"size"],[653,28,559,32],[653,33,559,37],[653,35,559,39],[654,8,560,12],[654,12,560,16],[654,13,560,17,"is25519"],[654,20,560,24],[654,24,560,28,"size"],[654,28,560,32],[654,33,560,37],[654,35,560,39],[654,37,561,16],[654,43,561,22],[654,47,561,26,"Error"],[654,52,561,31],[654,53,561,32],[654,85,561,64],[654,86,561,65],[655,8,562,12],[655,14,562,18,"u"],[655,15,562,19],[655,18,562,22,"is25519"],[655,25,562,29],[655,28,562,32,"Fp"],[655,30,562,34],[655,31,562,35,"div"],[655,34,562,38],[655,35,562,39,"_1n"],[655,38,562,42],[655,41,562,45,"y"],[655,42,562,46],[655,44,562,48,"_1n"],[655,47,562,51],[655,50,562,54,"y"],[655,51,562,55],[655,52,562,56],[655,55,562,59,"Fp"],[655,57,562,61],[655,58,562,62,"div"],[655,61,562,65],[655,62,562,66,"y"],[655,63,562,67],[655,66,562,70,"_1n"],[655,69,562,73],[655,71,562,75,"y"],[655,72,562,76],[655,75,562,79,"_1n"],[655,78,562,82],[655,79,562,83],[656,8,563,12],[656,15,563,19,"Fp"],[656,17,563,21],[656,18,563,22,"toBytes"],[656,25,563,29],[656,26,563,30,"u"],[656,27,563,31],[656,28,563,32],[657,6,564,8],[657,7,564,9],[658,6,565,8,"toMontgomerySecret"],[658,24,565,26,"toMontgomerySecret"],[658,25,565,27,"secretKey"],[658,34,565,36],[658,36,565,38],[659,8,566,12],[659,14,566,18,"size"],[659,18,566,22],[659,21,566,25,"lengths"],[659,28,566,32],[659,29,566,33,"secretKey"],[659,38,566,42],[660,8,567,12],[660,12,567,12,"abytes"],[660,27,567,18],[660,29,567,19,"secretKey"],[660,38,567,28],[660,40,567,30,"size"],[660,44,567,34],[660,45,567,35],[661,8,568,12],[661,14,568,18,"hashed"],[661,20,568,24],[661,23,568,27,"cHash"],[661,28,568,32],[661,29,568,33,"secretKey"],[661,38,568,42],[661,39,568,43,"subarray"],[661,47,568,51],[661,48,568,52],[661,49,568,53],[661,51,568,55,"size"],[661,55,568,59],[661,56,568,60],[661,57,568,61],[662,8,569,12],[662,15,569,19,"adjustScalarBytes"],[662,32,569,36],[662,33,569,37,"hashed"],[662,39,569,43],[662,40,569,44],[662,41,569,45,"subarray"],[662,49,569,53],[662,50,569,54],[662,51,569,55],[662,53,569,57,"size"],[662,57,569,61],[662,58,569,62],[663,6,570,8],[663,7,570,9],[664,6,571,8],[665,6,572,8,"randomPrivateKey"],[665,22,572,24],[665,24,572,26,"randomSecretKey"],[665,39,572,41],[666,6,573,8],[667,6,574,8,"precompute"],[667,16,574,18,"precompute"],[667,17,574,19,"windowSize"],[667,27,574,29],[667,30,574,32],[667,31,574,33],[667,33,574,35,"point"],[667,38,574,40],[667,41,574,43,"Point"],[667,46,574,48],[667,47,574,49,"BASE"],[667,51,574,53],[667,53,574,55],[668,8,575,12],[668,15,575,19,"point"],[668,20,575,24],[668,21,575,25,"precompute"],[668,31,575,35],[668,32,575,36,"windowSize"],[668,42,575,46],[668,44,575,48],[668,49,575,53],[668,50,575,54],[669,6,576,8],[670,4,577,4],[670,5,577,5],[671,4,578,4],[671,11,578,11,"Object"],[671,17,578,17],[671,18,578,18,"freeze"],[671,24,578,24],[671,25,578,25],[672,6,579,8,"keygen"],[672,12,579,14],[673,6,580,8,"getPublicKey"],[673,18,580,20],[674,6,581,8,"sign"],[674,10,581,12],[675,6,582,8,"verify"],[675,12,582,14],[676,6,583,8,"utils"],[676,11,583,13],[677,6,584,8,"Point"],[677,11,584,13],[678,6,585,8,"lengths"],[679,4,586,4],[679,5,586,5],[679,6,586,6],[680,2,587,0],[681,2,588,0],[681,11,588,9,"_eddsa_legacy_opts_to_new"],[681,36,588,34,"_eddsa_legacy_opts_to_new"],[681,37,588,35,"c"],[681,38,588,36],[681,40,588,38],[682,4,589,4],[682,10,589,10,"CURVE"],[682,15,589,15],[682,18,589,18],[683,6,590,8,"a"],[683,7,590,9],[683,9,590,11,"c"],[683,10,590,12],[683,11,590,13,"a"],[683,12,590,14],[684,6,591,8,"d"],[684,7,591,9],[684,9,591,11,"c"],[684,10,591,12],[684,11,591,13,"d"],[684,12,591,14],[685,6,592,8,"p"],[685,7,592,9],[685,9,592,11,"c"],[685,10,592,12],[685,11,592,13,"Fp"],[685,13,592,15],[685,14,592,16,"ORDER"],[685,19,592,21],[686,6,593,8,"n"],[686,7,593,9],[686,9,593,11,"c"],[686,10,593,12],[686,11,593,13,"n"],[686,12,593,14],[687,6,594,8,"h"],[687,7,594,9],[687,9,594,11,"c"],[687,10,594,12],[687,11,594,13,"h"],[687,12,594,14],[688,6,595,8,"Gx"],[688,8,595,10],[688,10,595,12,"c"],[688,11,595,13],[688,12,595,14,"Gx"],[688,14,595,16],[689,6,596,8,"Gy"],[689,8,596,10],[689,10,596,12,"c"],[689,11,596,13],[689,12,596,14,"Gy"],[690,4,597,4],[690,5,597,5],[691,4,598,4],[691,10,598,10,"Fp"],[691,12,598,12],[691,15,598,15,"c"],[691,16,598,16],[691,17,598,17,"Fp"],[691,19,598,19],[692,4,599,4],[692,10,599,10,"Fn"],[692,12,599,12],[692,15,599,15],[692,19,599,15,"Field"],[692,33,599,20],[692,35,599,21,"CURVE"],[692,40,599,26],[692,41,599,27,"n"],[692,42,599,28],[692,44,599,30,"c"],[692,45,599,31],[692,46,599,32,"nBitLength"],[692,56,599,42],[692,58,599,44],[692,62,599,48],[692,63,599,49],[693,4,600,4],[693,10,600,10,"curveOpts"],[693,19,600,19],[693,22,600,22],[694,6,600,24,"Fp"],[694,8,600,26],[695,6,600,28,"Fn"],[695,8,600,30],[696,6,600,32,"uvRatio"],[696,13,600,39],[696,15,600,41,"c"],[696,16,600,42],[696,17,600,43,"uvRatio"],[697,4,600,51],[697,5,600,52],[698,4,601,4],[698,10,601,10,"eddsaOpts"],[698,19,601,19],[698,22,601,22],[699,6,602,8,"randomBytes"],[699,17,602,19],[699,19,602,21,"c"],[699,20,602,22],[699,21,602,23,"randomBytes"],[699,32,602,34],[700,6,603,8,"adjustScalarBytes"],[700,23,603,25],[700,25,603,27,"c"],[700,26,603,28],[700,27,603,29,"adjustScalarBytes"],[700,44,603,46],[701,6,604,8,"domain"],[701,12,604,14],[701,14,604,16,"c"],[701,15,604,17],[701,16,604,18,"domain"],[701,22,604,24],[702,6,605,8,"prehash"],[702,13,605,15],[702,15,605,17,"c"],[702,16,605,18],[702,17,605,19,"prehash"],[702,24,605,26],[703,6,606,8,"mapToCurve"],[703,16,606,18],[703,18,606,20,"c"],[703,19,606,21],[703,20,606,22,"mapToCurve"],[704,4,607,4],[704,5,607,5],[705,4,608,4],[705,11,608,11],[706,6,608,13,"CURVE"],[706,11,608,18],[707,6,608,20,"curveOpts"],[707,15,608,29],[708,6,608,31,"hash"],[708,10,608,35],[708,12,608,37,"c"],[708,13,608,38],[708,14,608,39,"hash"],[708,18,608,43],[709,6,608,45,"eddsaOpts"],[710,4,608,55],[710,5,608,56],[711,2,609,0],[712,2,610,0],[712,11,610,9,"_eddsa_new_output_to_legacy"],[712,38,610,36,"_eddsa_new_output_to_legacy"],[712,39,610,37,"c"],[712,40,610,38],[712,42,610,40,"eddsa"],[712,47,610,45],[712,49,610,47],[713,4,611,4],[713,10,611,10,"Point"],[713,15,611,15],[713,18,611,18,"eddsa"],[713,23,611,23],[713,24,611,24,"Point"],[713,29,611,29],[714,4,612,4],[714,10,612,10,"legacy"],[714,16,612,16],[714,19,612,19,"Object"],[714,25,612,25],[714,26,612,26,"assign"],[714,32,612,32],[714,33,612,33],[714,34,612,34],[714,35,612,35],[714,37,612,37,"eddsa"],[714,42,612,42],[714,44,612,44],[715,6,613,8,"ExtendedPoint"],[715,19,613,21],[715,21,613,23,"Point"],[715,26,613,28],[716,6,614,8,"CURVE"],[716,11,614,13],[716,13,614,15,"c"],[716,14,614,16],[717,6,615,8,"nBitLength"],[717,16,615,18],[717,18,615,20,"Point"],[717,23,615,25],[717,24,615,26,"Fn"],[717,26,615,28],[717,27,615,29,"BITS"],[717,31,615,33],[718,6,616,8,"nByteLength"],[718,17,616,19],[718,19,616,21,"Point"],[718,24,616,26],[718,25,616,27,"Fn"],[718,27,616,29],[718,28,616,30,"BYTES"],[719,4,617,4],[719,5,617,5],[719,6,617,6],[720,4,618,4],[720,11,618,11,"legacy"],[720,17,618,17],[721,2,619,0],[722,2,620,0],[723,2,621,7],[723,11,621,16,"twistedEdwards"],[723,25,621,30,"twistedEdwards"],[723,26,621,31,"c"],[723,27,621,32],[723,29,621,34],[724,4,622,4],[724,10,622,10],[725,6,622,12,"CURVE"],[725,11,622,17],[726,6,622,19,"curveOpts"],[726,15,622,28],[727,6,622,30,"hash"],[727,10,622,34],[728,6,622,36,"eddsaOpts"],[729,4,622,46],[729,5,622,47],[729,8,622,50,"_eddsa_legacy_opts_to_new"],[729,33,622,75],[729,34,622,76,"c"],[729,35,622,77],[729,36,622,78],[730,4,623,4],[730,10,623,10,"Point"],[730,15,623,15],[730,18,623,18,"edwards"],[730,25,623,25],[730,26,623,26,"CURVE"],[730,31,623,31],[730,33,623,33,"curveOpts"],[730,42,623,42],[730,43,623,43],[731,4,624,4],[731,10,624,10,"EDDSA"],[731,15,624,15],[731,18,624,18,"eddsa"],[731,23,624,23],[731,24,624,24,"Point"],[731,29,624,29],[731,31,624,31,"hash"],[731,35,624,35],[731,37,624,37,"eddsaOpts"],[731,46,624,46],[731,47,624,47],[732,4,625,4],[732,11,625,11,"_eddsa_new_output_to_legacy"],[732,38,625,38],[732,39,625,39,"c"],[732,40,625,40],[732,42,625,42,"EDDSA"],[732,47,625,47],[732,48,625,48],[733,2,626,0],[734,0,626,1],[734,3]],"functionMap":{"names":["<global>","isEdValidXY","edwards","modP","<anonymous>","acoord","aextpoint","memoized$argument_0","Point","Point#constructor","Point.CURVE","Point.fromAffine","Point.fromBytes","Point.fromHex","Point#get__x","Point#get__y","Point#precompute","Point#assertValidity","Point#equals","Point#is0","Point#negate","Point#double","Point#add","Point#subtract","Point#multiply","wnaf.cached$argument_2","Point#multiplyUnsafe","wnaf.unsafe$argument_2","Point#isSmallOrder","Point#isTorsionFree","Point#toAffine","Point#clearCofactor","Point#toBytes","Point#toHex","Point#toString","Point#get__ex","Point#get__ey","Point#get__ez","Point#get__et","Point.normalizeZ","Point.msm","Point#_setWindowSize","Point#toRawBytes","PrimeEdwardsPoint","PrimeEdwardsPoint#constructor","PrimeEdwardsPoint.fromBytes","PrimeEdwardsPoint.fromHex","PrimeEdwardsPoint#get__x","PrimeEdwardsPoint#get__y","PrimeEdwardsPoint#clearCofactor","PrimeEdwardsPoint#assertValidity","PrimeEdwardsPoint#toAffine","PrimeEdwardsPoint#toHex","PrimeEdwardsPoint#toString","PrimeEdwardsPoint#isTorsionFree","PrimeEdwardsPoint#isSmallOrder","PrimeEdwardsPoint#add","PrimeEdwardsPoint#subtract","PrimeEdwardsPoint#multiply","PrimeEdwardsPoint#multiplyUnsafe","PrimeEdwardsPoint#double","PrimeEdwardsPoint#negate","PrimeEdwardsPoint#precompute","PrimeEdwardsPoint#toRawBytes","eddsa","modN_LE","getPrivateScalar","getExtendedPublicKey","getPublicKey","hashDomainToScalar","sign","verify","randomSecretKey","keygen","isValidSecretKey","isValidPublicKey","utils.toMontgomery","utils.toMontgomerySecret","utils.precompute","_eddsa_legacy_opts_to_new","_eddsa_new_output_to_legacy","twistedEdwards"],"mappings":"AAA;ACa;CDM;OEC;iBCW,mBD;SEG;SFO;IGS;KHI;IIC;KJG;kCKG;KLa;qCKC;KLsB;IMG;QCC;SDM;QEC;SFE;QGC;SHO;QIE;SJ+B;QKC;SLE;QMC;SNE;QOC;SPE;QQC;SRK;QSE;STE;QUE;SVS;QWC;SXE;QYC;SZG;QaI;SbiB;QcI;SdkB;QeC;SfE;QgBE;uDCI,2BD;ShBE;QkBM;6CCQ,2BD;SlBC;QoBK;SpBE;QqBG;SrBE;QsBG;StBE;QuBC;SvBI;QwBC;SxBQ;QyBC;SzBE;Q0BC;S1BE;Q2BE;S3BE;Q4BC;S5BE;Q6BC;S7BE;Q8BC;S9BE;Q+BC;S/BE;QgCC;ShCE;QiCC;SjCE;QkCC;SlCE;KNC;CFY;O2CM;ICC;KDE;IEE;KFE;IGC;KHE;IIC;KJE;IKC;KLE;IME;KNG;IOC;KPE;IQC;KRE;ISC;KTE;IUC;KVE;IWC;KXE;IYC;KZE;IaC;KbG;IcC;KdG;IeC;KfE;IgBC;KhBE;IiBC;KjBE;IkBC;KlBE;ImBC;KnBE;IoBE;KpBE;C3CC;OgEI;8D5Da,gB4D;S5DE;S4DK;ICE;KDE;IEE;KFU;IGE;KHK;IIE;KJE;IKE;KLG;IME;KNa;IOO;KPgC;IQQ;KRE;ISC;KTG;IUC;KVE;IWC;KXO;QYe;SZQ;QaC;SbK;QcI;SdE;ChEW;A+EC;C/EqB;AgFC;ChFS;OiFE;CjFK"}},"type":"js/module"}]}